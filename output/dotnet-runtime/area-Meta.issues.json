[
  {
    "author": "ghuntley",
    "labels": [
      "enhancement",
      "area-Meta",
      "os-freebsd",
      "needs-further-triage"
    ],
    "createdAt": "2015-05-04T07:28:05Z",
    "body": "## Updated proposal from 2017/9\r\n\r\nProposal (by @karelz - https://github.com/dotnet/corefx/issues/1626#issuecomment-329840518) will be updated in top-post based on further discussion and proposal changes.\r\n\r\nWe discussed community-driven port for FreeBSD with @RussellHaley (from FreeBSD community) and @wfurt (from .NET Core team) who both expressed interest in the work.\r\nHere's a plan proposal we put together (feedback / suggestions are welcome):\r\n\r\n1. Produce binaries in CoreCLR & CoreFX repo targeting FreeBSD - using hacks is fine\r\n    * Hard to parallelize, @wfurt will work on that\r\n    * The build can be mix of builds from other platforms (Mac, Linux) targeting FreeBSD\r\n    * We will need documented steps (on FreeBSD wiki) to reproduce the build with FreeBSD-specific bug fixes\r\n2. Run & stabilize CoreCLR tests (using corerun)\r\n    * Tests may be built on another platform\r\n    * Goal: Provides basic quality of runtime\r\n3. Run & stabilize CoreFX tests (using corerun)\r\n    * Tests may be built on another platform\r\n    * Note this requires xunit. We believe, based on our past porting experience, once [2] is done, xunit will just work.\r\n    * This can be in theory parallelized with [2] - it may require shortcutting xunit (e.g. generate static execution recipe on another platform)\r\n    * We can expose new OSPlatform API for FreeBSD when the pass rate is reasonable: see dotnet/corefx#23989\r\n4. Full stack build on FreeBSD (using corerun as bootstrapper from [1]-[3])\r\n    * We will need all tools (nuget, msbuild, roslyn) to work on boostrapping .NET Core\r\n5. Installers (FreeBSD ports)\r\n    * First-stage: Using product binaries from nuget feeds\r\n    * Second-stage: Build product from source (blocked on build from source effort)\r\n    * Requires FreeBSD community expertise and guidance on design\r\n    * Note: We can link FreeBSD packages also from official .NET Core download pages as community-support packages\r\n6. Regular build and test runs on FreeBSD\r\n    * Goal: Make sure changes in .NET Core repos breaking FreeBSD are known early\r\n    * Design needed\r\n    * Requires FreeBSD community expertise and guidance on design\r\n\r\nOperation principles:\r\n* Changes in [2]-[4] should be done primarily in CoreCLR/CoreFX repos (due to CLA signing requirements, code reviews from .NET Core team experts/members. etc.)\r\n* We will track high-level work on this issue. Specific bugs will be filed as separate issues.\r\n\r\nIf anyone is interested in helping, please let us know here. We can easily distribute work items from [2] & [3] above once we are far enough with [1].\r\n\r\n---------------------------------------------\r\n\r\n## Original proposal from @ghuntley from 2015/5\r\n\r\nThis issue is to discuss unit(s) of work to actually produce FreeBSD assemblies for corefx.  \r\n\r\n> @stephentoub - There's what's likely a more pressing issue, which is actually building for FreeBSD. Today, when we need to specialize an assembly for a particular platform, we effectively have three builds, producing three different managed assemblies: Windows, Linux, OSX. Sounds like at least for now we'll need a fourth, FreeBSD. I suggest you start by modifying the build to support an IsFreeBSD property (or just IsBSD of you think there's a high chance that the implementations across BSDs will be the same even with varied kernels) along with the appropriate OSGroup targets. That can then be used in the csproj files as needed to specialize an assembly with FreeBSD-specific code.\r\n\r\nRelated issue(s) \r\n- dotnet/runtime#14536 (OSGroup identifier in the public API)\r\n- dotnet/runtime#14507 (OSGroup identifier in the private API)\r\n\r\n/cc: @janhenke @josteink",
    "number": 14537,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-01-30T22:33:38Z",
          "user": "preetpalS"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-05-07T19:54:07Z",
          "user": "valpackett"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-10-13T10:15:33Z",
          "user": "stevedowling"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-11-08T17:00:56Z",
          "user": "timothyklim"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-05-27T13:03:30Z",
          "user": "MarkSFrancis"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-11-03T19:08:11Z",
          "user": "xShivan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-11-07T14:22:56Z",
          "user": "thebf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-02-16T03:05:09Z",
          "user": "lukeb1961"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-25T20:32:38Z",
          "user": "army1349"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-12T09:24:13Z",
          "user": "onny"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-02T08:38:56Z",
          "user": "bqstony"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-07T14:17:02Z",
          "user": "morsiu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-15T23:45:58Z",
          "user": "shkit"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-04-20T05:03:15Z",
          "user": "hexerBEAST"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T04:04:13Z",
          "user": "akhramov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-06T14:19:45Z",
          "user": "tatsuyaueda"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-07-21T18:09:17Z",
          "user": "airbreather"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-15T12:21:16Z",
          "user": "kameko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-19T19:48:17Z",
          "user": "a-gubskiy"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-19T19:48:19Z",
          "user": "a-gubskiy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-30T14:20:18Z",
          "user": "papadave66"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-16T23:27:47Z",
          "user": "i80and"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-26T11:27:45Z",
          "user": "nanaya"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-07T11:28:29Z",
          "user": "perlun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-30T22:01:08Z",
          "user": "RokeJulianLockhart"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-04-10T14:36:58Z",
          "user": "SupinePandora43"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-04-17T16:15:07Z",
          "user": "ma499"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-05-08T08:05:19Z",
          "user": "Igorgro"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-08T08:48:16Z",
          "user": "nkosi23"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-07-03T22:05:53Z",
          "user": "BasixKOR"
        },
        {
          "content": "ROCKET",
          "createdAt": "2022-07-12T06:20:17Z",
          "user": "SommerEngineering"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-07-12T06:20:19Z",
          "user": "SommerEngineering"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-07-27T15:35:49Z",
          "user": "jakeswenson"
        },
        {
          "content": "ROCKET",
          "createdAt": "2022-07-27T15:35:51Z",
          "user": "jakeswenson"
        },
        {
          "content": "ROCKET",
          "createdAt": "2022-08-16T16:53:14Z",
          "user": "corporatepiyush"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-23T17:40:21Z",
          "user": "dko1905"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-27T12:42:00Z",
          "user": "WenceyWang"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-11-06T18:01:32Z",
          "user": "WhiteBlackGoose"
        },
        {
          "content": "ROCKET",
          "createdAt": "2022-11-06T18:02:02Z",
          "user": "WhiteBlackGoose"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-01-30T21:05:35Z",
          "user": "remyleone"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-02-16T10:28:06Z",
          "user": "juliekoubova"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-09T05:34:08Z",
          "user": "sba923"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-24T10:49:42Z",
          "user": "innovoix"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-05T01:16:42Z",
          "user": "dekimsey"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-10T16:03:34Z",
          "user": "mmarinchenko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-28T12:05:31Z",
          "user": "maxgira"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-20T16:11:18Z",
          "user": "DNS"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-12-20T16:11:22Z",
          "user": "DNS"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-10T09:47:41Z",
          "user": "mwisnicki"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-02T21:50:29Z",
          "user": "2rs2ts"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-20T12:53:09Z",
          "user": "ldilley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-18T00:45:13Z",
          "user": "spmzt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-13T10:27:33Z",
          "user": "0xfeeddeadbeef"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-17T12:46:13Z",
          "user": "lillo42"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-17T12:46:14Z",
          "user": "lillo42"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-19T19:25:29Z",
          "user": "cezn"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-05T23:40:04Z",
          "user": "samcarswell"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-23T07:00:17Z",
          "user": "issue-dispenser"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-18T13:48:14Z",
          "user": "manfromarce"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-27T19:39:13Z",
          "user": "tungol"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-28T13:15:48Z",
          "user": "romanov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-05-01T11:28:20Z",
          "user": "Captainpast"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-19T03:52:46Z",
          "user": "jswolf19"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-09-17T06:41:32Z",
          "user": "iqv-csis"
        }
      ],
      "totalCount": 64,
      "endCursor": "Y3Vyc29yOnYyOpHOCVe0Kg=="
    },
    "updatedAt": "2025-04-14T05:28:20Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "josteink",
          "body": "There seems to be agreement as far as https://github.com/dotnet/corefx/issues/1576 is concerned.\n\nWhen we also have a decision on https://github.com/dotnet/corefx/issues/1625 we should be able to start shipping some code.\n",
          "createdAt": "2015-05-04T08:16:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-05-04T08:16:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDk4NjI2MDE0"
        },
        {
          "author": "ghuntley",
          "body": "Agreement on dotnet/runtime#14536 has been reached by the portteam, unless MSFT chooses otherwise it will be `FreeBSD`. Issue dotnet/corefx#1999 will potentially be the issue that introduces the definition into the public API.\n",
          "createdAt": "2015-06-11T08:28:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-11T08:30:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTA0MDQ3MA=="
        },
        {
          "author": "josteink",
          "body": "> Agreement on dotnet/runtime#14536 has been reached by the portteam, unless MSFT chooses otherwise it will be FreeBSD\n\nIf I read that right, this means that when https://github.com/dotnet/corefx/pull/1999 is merged, we can consider this MSFT approving of the new public API, and can therefore press forward on the remaining issues with regular pull-requests without need for MSFT approval.\n\nIf so, that sounds good to me.\n",
          "createdAt": "2015-06-11T08:47:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-11T08:47:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTA0NDUxMw=="
        },
        {
          "author": "ghuntley",
          "body": "Next steps as per https://github.com/dotnet/corefx/pull/1999#issuecomment-111279577 are:\n\n> 1. The \"FreeBSD port team\" continues their work to get a FreeBSD version of CoreFX produced (tracked by dotnet/corefx#1626).\n> 2. The port team brings up enough of the CoreFX and CoreCLR stack on FreeBSD such that we can start running the CoreFX unit tests on FreeBSD.\n> 3. The tests reach some minimal quality level. I don't know exactly what this looks like yet, but I expect it means something like a majority of the tests pass. Ideally we would not have a bunch of specific tests disabled for only FreeBSD (compared to Linux and OSX, we wouldn't want to hold FreeBSD to a higher standard than the other *NIX platforms we have there).\n> 4. Working with the FreeBSD port team, the CoreFX team gets the CoreFX tests added to our CI system running on FreeBSD.\n> 5. Discuss merging a PR based for issue dotnet/runtime#14536, which adds the property.\n",
          "createdAt": "2015-06-11T21:37:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-11T21:38:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTI4Mzk4MQ=="
        },
        {
          "author": "josteink",
          "body": "That sounds like a fully reasonable plan to me.\n",
          "createdAt": "2015-06-12T05:45:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T05:45:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTM2NjkzNQ=="
        },
        {
          "author": "janhenke",
          "body": "Okay, then let's start the work on getting corefx to work.\n",
          "createdAt": "2015-06-12T06:22:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T06:22:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTM3NjQxNA=="
        },
        {
          "author": "josteink",
          "body": "First obstacle in building corefx on FreeBSD seems to be mono. The build-script insists version 4.1 is required. @ajensenwaud did some work on this on the Frankfurt-host, but I'm not sure how complete it is.\n\nI'll queue a build for now and see what the output looks like.\n\n**Edit:** The (mono) build crashes with the following kicker at the end:\n\n```\nMaking all in mini\nmake[1]: \"/usr/home/josteink/mono/mono/mini/Makefile\" line 2906: warning: duplicate script for target \"%.exe\" ignored\nmake[1]: \"/usr/home/josteink/mono/mono/mini/Makefile\" line 2899: warning: using previous script for \"%.exe\" defined here\n  CC       genmdesc-genmdesc.o\nIn file included from genmdesc.c:9:0:\nmini.h:17:34: fatal error: ./mono/metadata/loader.h: Too many levels of symbolic links\n #include <mono/metadata/loader.h>\n                                  ^\ncompilation terminated.\n*** Error code 1\n\nStop.\nmake[1]: stopped in /usr/home/josteink/mono/mono/mini\n*** Error code 1\n\nStop.\n```\n",
          "createdAt": "2015-06-12T07:03:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T07:21:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTM4Njc1Ng=="
        },
        {
          "author": "stephentoub",
          "body": "> First obstacle in building corefx on FreeBSD seems to be mono\n\nFWIW, I personally don't think this is the first obstacle. There are two build related issues:\n1. Building assemblies that work correctly on FreeBSD\n2. Building those assemblies on FreeBSD\n\n(1) is critical, and is I believe what this issue is meant to be about. (2) is very nice to have, but lack of it doesn't prevent the creation of a great system for running managed code on FreeBSD.\n\nYou're of course free to prioritize however you see fit, but my recommendation would be to focus on (1) rather than (2).\n\nNote that we still have issues building corefx on Linux and building it on OSX, such that our CI system builds the assemblies for those platforms on Windows; it then shuttles the resulting assemblies over to the target platform to execute the tests.\n",
          "createdAt": "2015-06-12T10:20:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T10:35:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTQzOTc5OQ=="
        },
        {
          "author": "josteink",
          "body": "That's fair enough. I just assumed that it would be easier to get general FreeBSD platform support baked into corefx if we could actually build it ourselves on FreeBSD.\n\nI'll make do with Windows-initiated building for now and attempt to ninja together a build-configuration.\n",
          "createdAt": "2015-06-12T17:45:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T17:45:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTU3MTUxNQ=="
        },
        {
          "author": "akoeplinger",
          "body": "@josteink btw. corefx should now build on Mono 4.0.1.44.\n",
          "createdAt": "2015-06-12T18:20:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T18:20:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTU3OTkwOQ=="
        },
        {
          "author": "josteink",
          "body": "@akoeplinger Nice. That leaves me some hope we can get it running on FreeBSD too :)\n",
          "createdAt": "2015-06-12T20:01:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T20:01:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTU5OTkxMA=="
        },
        {
          "author": "ajensenwaud",
          "body": "Good points. However if we really want corefx to be part of the FreeBSD environment, we really need it to be able to compile from source to get it into the Ports system.\n\nI did hear that Mono 4.0.1.44 fixes a lot of these issues but have not had time to play with it yet. I know the ports team are updating the port Makefile as well as we speak with a new patch.\n\n> On 12 Jun 2015, at 20:21, Stephen Toub notifications@github.com wrote:\n> \n> First obstacle in building corefx on FreeBSD seems to be mono\n> \n> FWIW, I personally don't think this is the first obstacle. There are two build related issues:\n> \n> Building assemblies that work correctly on FreeBSD\n> Building those assemblies on FreeBSD\n> (1) is critical, and is I believe what this issue is meant to be about. (2) is very nice to have, but lack of it doesn't prevent the creation of a great system for running managed code on FreeBSD.\n> \n> You're of course free to prioritize however you see fit, but my recommendation would be to focus on (1) rather than (2).\n> \n> Note that we barely have corefx building-on-Linux and building-on-OSX, such that our CI system builds the assemblies for those platforms on Windows; it then shuttles the resulting assemblies over to the target platform to execute the tests.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-06-12T22:49:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T22:49:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTYzNTQ3NA=="
        },
        {
          "author": "stephentoub",
          "body": "Yes, I'm in no way disagreeing... being able to _build_ corefx on Linux, OSX, and FreeBSD is important. I'm simply suggesting that from a priority perspective it's more important to be able to actually _run_ corefx on Linux, OSX, and FreeBSD. :wink:  If both can be worked on in parallel, all the better.\n",
          "createdAt": "2015-06-12T22:52:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-12T22:53:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTYzNTczNw=="
        },
        {
          "author": null,
          "body": "@ghuntley,\nwould be super :cool: if we have a markdown task checklist outlining what what is remaining:\n\n```\n- [x] task 1\n- [ ] task 2\n- [ ] task 3\n```\n\nrenders as:\n- [ ] task 1\n- [ ] task 2\n- [ ] task 3\n\nThis will probably encourage others to score those feats and FreeBSD support will land rather sooner than anticipated! :sunglasses: \n",
          "createdAt": "2015-06-13T23:17:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-27T21:52:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTc1OTc0NA=="
        },
        {
          "author": "janhenke",
          "body": "To my knowledge the following pieces of work in CoreFX are required for FreeBSD support:\n- [x] Introduce FreeBSD platform to the build tools and scripts. (Done by @josteink and me, PRs dotnet/corefx#2021 merged, dotnet/corefx#2030 merged)\n\n13 Assemblies do not compile on their own and need FreeBSD specific changes. Mostly the Interop pieces that already exist for Linux/OS X (order by the occurrence in the build output):\n- [x]  `System.Private.URI` (done, PR dotnet/corefx#2032 merged)\n- [x]  `System.Console` (done, PR dotnet/corefx#2031 merged)\n- [x]  `System.Diagnostics.Debug` (done, PR dotnet/corefx#2039 merged)\n- [x]  `System.Diagnostics.Process` (discussion dotnet/corefx#2070, PR dotnet/corefx#3257)\n- [x]  `System.IO.Compression.ZipFile` (done, PR dotnet/corefx#2041 merged)\n- [x]  `System.IO.FileSystem.DriveInfo` (discussion dotnet/corefx#2526, PR dotnet/corefx#2606)\n- [x]  `System.IO.FileSystem.Watcher` (discussion dotnet/corefx#2046, PR dotnet/corefx#3257)\n- [x]  `System.IO.FileSystem` (done, PR dotnet/corefx#2049 merged)\n- [x]  `System.IO.MemoryMappedFiles` (discussion dotnet/corefx#2527, PR dotnet/corefx#3143)\n- [x]  `System.IO.Pipes` (discussion dotnet/corefx#2528, PR dotnet/corefx#2974)\n- [x] `System.Net.NameResolution` (discussion dotnet/corefx#2988, PR dotnet/corefx#3471)\n- [x]  `System.Security.Cryptography.Hashing.Algorithms` (done, PR dotnet/corefx#2040 merged)\n- [x]  `System.Security.SecureString` (done, PR dotnet/corefx#2039 merged)\n- [x]  ~~`System.Runtime.Environment` (blocked by dotnet/corefx#1999 )~~\n- [x] `System.Runtime.InteropServices.RuntimInformation` (done, PR dotnet/corefx#2068 merged)\n\nI will try to update that list based on PRs opened and merged.\n",
          "createdAt": "2015-06-14T08:43:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-09-29T19:59:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTgwMDU0MA=="
        },
        {
          "author": "josteink",
          "body": "FYI: PR dotnet/corefx#2039 merged\n",
          "createdAt": "2015-06-14T14:08:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-14T14:08:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTgyODk3MQ=="
        },
        {
          "author": "josteink",
          "body": "Just trying to be ahead of the curve here... How do we plan to implement `System.IO.FileSystem.Watcher` ?\n\nIirc FreeBSD has no `inotify` such as Linux and Windows does (which is also why there is no Dropbox last time I checked). Will this be a potential source of trouble coming our way? Or does anyone have an idea for how to work around this? \n",
          "createdAt": "2015-06-15T08:22:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-15T08:22:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTk3NTE0MA=="
        },
        {
          "author": "janhenke",
          "body": "I suggest we stub that out for the moment and throw a PlatformNotSupportedException as Stephen Toub suggested in the other topic (https://github.com/dotnet/corefx/pull/2021#issuecomment-111602342). Then we have at least a complete set of assemblies and we can continue to work on that particular issue without blocking further steps.\n\nWould you mind opening a separate issue for that?\n",
          "createdAt": "2015-06-15T08:28:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-15T08:28:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTk3NTkzMw=="
        },
        {
          "author": "ghuntley",
          "body": "Let's move `System.IO.FileSystem.Watcher` discussions to dotnet/corefx#2046\n",
          "createdAt": "2015-06-15T08:49:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-15T08:49:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMTk4MTgwMQ=="
        },
        {
          "author": null,
          "body": "Guys is there any such blocker for `System.Diagnostics.Process`?\n",
          "createdAt": "2015-06-15T11:59:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-15T11:59:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMjAzNTQ5Mg=="
        },
        {
          "author": "ghuntley",
          "body": "@jasonwilliams200OK added FreeBSD to S.RT.I.RI early this morning which was merged but the FreeBSD tests within `CheckPlatformTests` had to be backed out until `dotnet/buildtools` is updated.\n- [ ] Update build tools to support FreeBSD - https://github.com/dotnet/buildtools/pull/180\n- [ ] Reapply `[Fact,PlatformSpecific(PlatformID.FreeBSD)]` tests to CheckPlatformTests  - see https://github.com/dotnet/corefx/pull/2068#discussion_r32570244 and https://github.com/dotnet/corefx/pull/2068#discussion_r32570244\n- [ ] Add `public static OSPlatform FreeBSD` to https://github.com/dotnet/corefx/pull/2068\n",
          "createdAt": "2015-06-16T21:21:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-17T03:01:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMjU3Mjk4NA=="
        },
        {
          "author": "ghuntley",
          "body": "@jasonwilliams200OK there were some discussions last night about `System.Diagnostics.Process` in gitter which have been formalized into https://github.com/dotnet/corefx/issues/2070\n",
          "createdAt": "2015-06-16T21:46:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-16T21:46:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMjU3Nzg4NQ=="
        },
        {
          "author": null,
          "body": "@ghuntley, thanks. I actually read those messages. `System.Diagnostics.Process` is a tricky one. AFAIK, io.js team had similar challenges with FreeBSD process management. Mono team has probably nailed it, so lets hope if @akoeplinger and co. could enlighten us on this matter? :)\n",
          "createdAt": "2015-06-16T22:22:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-16T22:22:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMjU4NzE0Mg=="
        },
        {
          "author": "josteink",
          "body": ">  System.IO.FileSystem.DriveInfo\n\nAs discussed in the gitter, For this one I tried looking into basic usage of `getmntinfo`:\n\n``` c\n#include <sys/param.h>\n#include <sys/ucred.h>\n#include <sys/mount.h>\n#include <stdio.h>\n\nint main() {\n  struct statfs *mntbuf;\n  int mntsize = getmntinfo(&mntbuf, MNT_NOWAIT);\n\n  for( int i = 0; i < mntsize; i++ ) {\n    printf(\"%s\\n\", mntbuf[i].f_mntonname);\n  }\n}\n```\n\nRunning that sample yielded this output:\n\n```\n$ ./a.out\n/\n/dev\n/tmp\n/usr/home\n/usr/ports\n/usr/src\n/var/crash\n/var/log\n/var/mail\n/var/tmp\n/dev/fd\n/usr/compat/linux/proc\n/proc\n$\n```\n\nSo it seems it does what we need. The question is, should we do any type of filtering on the results?\n\nLooking at the \"intent\" of the `DriveInfo` object, coming from the Windows world of .NET it has often been to enumerate the available locations to store or retrieve files (`C:`, `D:`, etc). But when using Unix hierarchical file-systems, returning `/` would be adequate to cover those needs.\n\nSo what should we return? What would be useful? Should even consider it being useful or not?\n\nThe Linux-version just dumps everything, except things set to be ignored:\n\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem.DriveInfo/src/System/IO/DriveInfo.Linux.cs#L98-L99\n\nI tried putting in the following filter, but it didn't really change anything in terms of output:\n\n``` c\n    if ((mntbuf[i].f_flags != MNT_IGNORE)) {\n        printf(\"%s\\n\", mntbuf[i].f_mntonname);\n    }\n```\n\nAny opinions?\n",
          "createdAt": "2015-06-21T13:54:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-21T15:35:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMzkwMzUwNQ=="
        },
        {
          "author": null,
          "body": "@josteink, great diggings! Based on https://github.com/dotnet/corefx/issues/815#issuecomment-113825960 and https://github.com/dotnet/corefx/issues/1729, I think we should collaborate with @sokket to come up with a solution with works  across different Unices.\n",
          "createdAt": "2015-06-21T14:09:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-21T14:09:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExMzkwNTY0MA=="
        },
        {
          "author": "jonmill",
          "body": "I have a version running on OSX that uses getmntinfo and statfs to get information about each mount point, which seems like the most logical mapping from the Windows Drive concept. I'll double check that the function and struct definitions on OSX match the FreeBSD definitions and, if so, my commit for OSX will work for BSD as well.\n\nI'll be sure to add you to my PR @josteink \n",
          "createdAt": "2015-06-22T18:08:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-22T18:08:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExNDIwMzU1OA=="
        },
        {
          "author": "josteink",
          "body": "Sounds good. Thanks for the heads up and thanks for giving FreeBSD  some love too.\n\nI looked into some basic pinvoke for these functions, and it seems like we need to do all the marshalling and conversions ourselves, so if anyone else has already put in the effort, who am I to say no? ;)\n",
          "createdAt": "2015-06-22T21:41:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-22T21:41:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExNDI3MjA1Nw=="
        },
        {
          "author": "jonmill",
          "body": "No problem...looks like the main difference was with the struct declarations; since we'll probably hit this more in the future, I'm doing some refactoring that will allow us to share a lot of the PInvoke signatures. I'll add a bigger description in my PR (today or tomorrow, based on how the test run) but I basically added the PInvoke signatures and struct signatures for FreeBSD (based on the headers I found online) and it compiles. I've tested it on Mac so it _should_ (in theory...) work on FreeBSD since it's just a struct declaration change, but your milage may vary :). If it doesn't, you'll have the DriveInfo class and PInvokes 99% of the way there and will just require some tweaking based on FreeBSD nuances. \n",
          "createdAt": "2015-06-22T21:47:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-22T21:47:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExNDI3MzI5Nw=="
        },
        {
          "author": "ghuntley",
          "body": "Excellent news @sokket. I've created you an account on the machine the port-team uses for development, it's european based but it's always on and has heaps of memory and processing power. Hopefully this will help out and remove some of the friction when working w/FreeBSD.\n\n```\n# ssh sokket@freebsd-frankfurt.zbsd.org\n```\n\nPassword authentication is disabled, use [one of your keys](https://api.github.com/users/sokket/keys).\n\n@josteink see also issue: https://github.com/dotnet/corefx/issues/815 (System.IO.FileSystem.DriveInfo for Mac/FreeBSD)\n",
          "createdAt": "2015-06-22T21:47:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-06-22T21:54:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDExNDI3MzM3MA=="
        },
        {
          "author": "janhenke",
          "body": "Are there any updates? Did anybody implement the remaining assemblies on FreeBSD?\n",
          "createdAt": "2015-07-25T07:41:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T07:41:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDgxNzQxNA=="
        },
        {
          "author": "josteink",
          "body": "I've been busy attending my new baby, haven't had time for any coding anywhere.\n\nI've suspected that issues like these have been lying dormant and I guess this confirms it to a certain extent.\n",
          "createdAt": "2015-07-25T09:21:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T09:21:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDgyNTI3Mw=="
        },
        {
          "author": "janhenke",
          "body": "For the assemblies that are still not implemented, I linked the \"how to implement\"-issue in the list above. I hope that helps coordinating the effort to get these remaining assemblies implemented.\n",
          "createdAt": "2015-07-25T12:09:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T12:09:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDgzODc4MQ=="
        },
        {
          "author": "josteink",
          "body": "I must admit I was having difficulties keeping track of what we have done and where, so that's definitely a good move. Good job :)\n",
          "createdAt": "2015-07-25T12:45:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T12:45:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDg0MzU2OA=="
        },
        {
          "author": "ajensenwaud",
          "body": "Where do I find that? Would be grat to get the remaining assemblies \nimplemented.\n\nOn 25/07/15 22:10, Jan Henke wrote:\n\n> For the assemblies that are still not implemented, I linked the \"how \n> to implement\"-issue in the list above. I hope that helps coordinating \n> the effort to get these remaining assemblies implemented.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/dotnet/corefx/issues/1626#issuecomment-124838781.\n",
          "createdAt": "2015-07-25T13:28:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T13:28:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDg0NzE1OQ=="
        },
        {
          "author": "josteink",
          "body": "This comment here: https://github.com/dotnet/corefx/issues/1626#issuecomment-111800540\n",
          "createdAt": "2015-07-25T13:55:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-07-25T13:55:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNDg0ODg4OA=="
        },
        {
          "author": "janhenke",
          "body": "I am right now waiting for the native shims to be finished, as these should take over most of the work for getting these assemblies working on FreeBSD.\n\n@nguerrera would be great if you can keep us posted on the progress. :)\n",
          "createdAt": "2015-08-10T20:33:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-10T20:33:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTU5ODE5MQ=="
        },
        {
          "author": null,
          "body": "Update:\n@janhenke confirmed that with https://github.com/dotnet/corefx/pull/2974 merged, `System.IO.Pipes` builds on FreeBSD! :sunglasses: \n",
          "createdAt": "2015-08-27T09:57:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-27T09:57:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEzNTM2ODg2Mg=="
        },
        {
          "author": null,
          "body": "Update:\ndotnet/corefx#2527 closed, `System.IO.MemoryMappedFiles` builds on FreeBSD.\nThanks @janhenke for the confirmation!\n",
          "createdAt": "2015-09-11T12:47:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-09-11T12:47:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEzOTUzNzU0Nw=="
        },
        {
          "author": "janhenke",
          "body": "Thanks to the shims approach, it just comes down to make sure the shims compile on FreeBSD. Thankfully that makes life a lot easier. :)\n",
          "createdAt": "2015-09-11T12:50:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-09-11T12:50:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEzOTUzNzg3OQ=="
        },
        {
          "author": "janhenke",
          "body": "dotnet/corefx#3257 should bring us both `System.Diagnostic.Process` and `System.IO.FileSystem.Watcher` leaving just `System.Net.NameResolution` unresolved. (I will check the mentioned two assemblies once the PR is merged and works on FreeBSD)\n",
          "createdAt": "2015-09-17T19:07:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-09-17T19:07:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0MTE5MTQ1NQ=="
        },
        {
          "author": "janhenke",
          "body": "dotnet/corefx#3471 should bring us `System.Net.NameResolution` and complete the list above.\n",
          "createdAt": "2015-09-29T19:59:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-09-29T19:59:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NDE3MTk2Ng=="
        },
        {
          "author": "jonmill",
          "body": "dotnet/corefx#3471 was just merged :)\n",
          "createdAt": "2015-10-01T18:42:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-01T18:42:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NDgxMzA0MA=="
        },
        {
          "author": null,
          "body": "@sokket, thanks for the update. I built master (f467911) on FreeBSD using this guide: https://gist.github.com/jasonwilliams200OK/6efa7907e66275df2d24. Current blocker is https://github.com/dotnet/buildtools/issues/292, which is fixed in upstream but waiting for next buildtools roll-out. :)\n",
          "createdAt": "2015-10-01T19:56:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-01T19:56:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NDgzMDMxNQ=="
        },
        {
          "author": null,
          "body": "Update: new buildtools with fix for dotnet/buildtools#292 has landed in CoreFX master. Next stopper from buildtools is https://github.com/dotnet/buildtools/issues/300: missing OS specific tool to be able to run the tests.\n\n@janhenke, you have marked `System.Diagnostics.Process` (#2070) and `System.IO.FileSystem.Watcher` (#2046) as done; but they are neither implemented nor do they compile on FreeBSD. Have you actually verified the list by compiling the managed code?\n\nBased on my recent experience with commit 60c78da3c918b0d256cc1f878de06d351dbe3342 (see [msbuild.log](https://gist.github.com/jasonwilliams200OK/0a2e92e19eb5bb5f3130)), following assemblies do not compile:\n- System.Diagnostics.Process\n- System.Diagnostics.ProcessManager\n- System.Diagnostics.ThreadInfo\n- System.IO.FileSystemWatcher\n- System.Net.SocketAddress _(alright, this one was added recently)_\n",
          "createdAt": "2015-10-04T05:50:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T05:50:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMxOTY3NQ=="
        },
        {
          "author": "janhenke",
          "body": "As far as I recall I verified the associated shims compile. Since the managed code should be free of FreeBSD specific code. Those shims you mention should have been shimed out with the PRs linked above.\nBut I have also run a full compile in between. At the very least `System.Diagnostics.ThreadInfo`and `System.IO.FileSystemWatcher` did compile. So something must have regressed.\n",
          "createdAt": "2015-10-04T05:55:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T06:00:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMxOTc5NA=="
        },
        {
          "author": null,
          "body": ">  Those shims you mention should have been shimed out with the PRs linked above.\n\nActually, PR https://github.com/dotnet/corefx/pull/3257 is not related to shim. There is still some PAL code within the managed projects (the old approach), therefore it is required to build managed assemblies to be absolutely sure.\n",
          "createdAt": "2015-10-04T06:01:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T06:01:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMyMDQ0OA=="
        },
        {
          "author": "janhenke",
          "body": "> Actually, PR dotnet/corefx#3257 is not related to shim.\n\nI disagree. It is refactoring the P/Invoke code to the System.Native shim. Also as I edited above, I am recalling at least some of the assemblies compiled in between.\n",
          "createdAt": "2015-10-04T06:05:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T06:05:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMyMDU2Mw=="
        },
        {
          "author": null,
          "body": "> I disagree\n\nhttps://github.com/dotnet/corefx/pull/3257/files: see the instances of `.Unix.cs` and `.Linux.cs` for `System.Diagnostics.`. Note that `.OSX.cs` is untouched.\n\n> It is refactoring the P/Invoke code to the System.Native shim\n\nYes it does refactor some common helpers under `System.Native`, but not `System.Diagnostics.*` et al.\n",
          "createdAt": "2015-10-04T06:21:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T06:22:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMyMTMwOQ=="
        },
        {
          "author": "stephentoub",
          "body": "Even when these assemblies are only P/Invoking to System.\\* libs, there may still be FreeBSD work required for some of them, e.g. System.Diagnostics.Process and System.IO.FileSystem.Watcher. They are using functionality specific to Linux and OS X, and we don't plan to try to abstract that behind native shims. The goal of the shims isn't to end up with a single managed binary for Unix, though that's a very nice property when it comes from the work; the primary goal is to avoid ABI differences that cause fragility. I expect at least a handful of assemblies will continue to have Linux/OS X specific binaries, where a FreeBSD binary would also be needed.\n",
          "createdAt": "2015-10-04T11:23:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T11:23:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMzNzQ3Mg=="
        },
        {
          "author": "stephentoub",
          "body": "FYI, there are no corefx assemblies named System.Diagnostics.ProcessManager, \nSystem.Diagnostics.ThreadInfo, \nSystem.IO.FileSystemWatcher, or\nSystem.Net.SocketAddress. Those are types in other assemblies.\n",
          "createdAt": "2015-10-04T11:27:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T11:27:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTMzNzYxMQ=="
        },
        {
          "author": null,
          "body": "> I expect at least a handful of assemblies will continue to have Linux/OS X specific binaries, where a FreeBSD binary would also be needed.\n\nDoes that mean whenever Solaris and non-glibc (musl and  μlibc) targeting Linux such as Alpine supports will arrive, they will have separate binaries? And then different architectures ARM, MIPS, RISC, SPARC etc. would require another level of separation?\n\nWouldn't it make sense to converge them to POSIX interface / sys-calls as much as possible and feature-detect the differences using configs (via CMake) to be used in the same binary (unless it is impacting the size/performance of the assemblies significantly)? As I have understood it, `System.Native.so` binary has common helper for other specific `System.*.Native.so` which seems enough for separation-of-concerns principle compliance. But if it gets transformed to `System.Net.Http.FreeBSD.ARM.Native.so` or `System.Net.Http.Solaris.SPARC.so`, then it will be quite unmanageable with \"too many moving parts\" etc.\n\n> there are no corefx assemblies named\n\nGood point. I was actually going by the failures instances in msbuild logs and number of `.OSX.cs` and `.Linux.cs` files. :smile: \n",
          "createdAt": "2015-10-04T17:40:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T17:40:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTM2ODUwMg=="
        },
        {
          "author": "stephentoub",
          "body": "> Wouldn't it make sense to converge them to POSIX interface / sys-calls as much as possible\n\nWe do. How do you propose doing file watching well via POSIX?  How do you propose we do process enumeration well via POSIX?\n\n> But if it gets transformed to System.Net.Http.FreeBSD.ARM.Native.so or System.Net.Http.Solaris.SPARC.so, then it will be quite unmanageable with \"too many moving parts\" etc\n\nI don't understand this.  The whole point of the native .so files is that you do get different native binaries for each target platform, but they're not named System.Whatever.Platform.ext, just System.Whatever.ext; that allows the compiler to take the same general logic and use it with the definitions specific to that platform.  This only works when the same symbols exist on each platform; the compiler doesn't magically take code written to use inotify and allow it to work with the file watching interface from some other system.  In general we've tried hard to use standardized APIs where it makes sense, but for places where such APIs don't exist or aren't well standardized or where there are better platform-specific solutions, we've used the better platform-specific solutions, e.g. using procfs for process enumeration on Linux, using inotify for file system watching on Linux, etc.  Whether such platform-specific logic lives in managed or native code doesn't really matter from an ease-of-porting-to-additional-platforms perspective, as when those new platforms come along, if the existing APIs do work, then so does the existing solution, and if it doesn't, then you need to write a new solution for that platform.  And so we've tried to do as much as possible in managed code, using native simply for the 1:1 shims that make that managed code much more portable where the target APIs are portable.  We've used #ifdefs in the native code to gloss over small details, where this API on what platform is close enough to that API on another platform, but that doesn't extend to entire solutions being completely different; at that point the abstraction becomes the managed API and we do a different managed implementation for each system.\n\nIf FreeBSD exposes inotify as Linux does or if it exposes EventStream as OS X does, then when those OS APIs are behind the shim, the shim can easily be made to work with FreeBSD, and the same managed binary can be used on FreeBSD.  If FreeBSD doesn't expose such APIs, then you'll need to write a custom implementation of System.IO.FileSystem.Watcher with some file watching solution that is available on FreeBSD.  Similar comments for System.Diagnostics.Process.  Whether the code for the file watching is in the shim or not has little impact on that.\n\nThe plan is for all such native APIs to eventually be moved behind the shim.  But they're far from a priority, as they're not very portable, and so you've seen us starting with APIs from libc that are (or are supposed to be) exposed everywhere.\n",
          "createdAt": "2015-10-04T18:44:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T19:40:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTM3MjQwMA=="
        },
        {
          "author": null,
          "body": "> How do you propose doing file watching well via POSIX?\n\nWe cannot do all of it POSIX, since inotify is Linux specific. FreeBSD/OSX offers a separate implementations.\n\n#### Proposal:\n\nFrom native binaries distribution viewpoint, every OS should receive equal set of binaries with same names, but different functionality.\n\nHere is a proposed structure:\n\n``` cmake\n# cmake\n\ncheck_include_files( \"inotify.h\" HAVE_INOTIFY_ABILITY )\n```\n\n---\n\n``` inf\n// config.h.in\ncmakedefine01 COREFX_HAVE_INOTIFY_ABILITY\n// always a good idea to prefix our headers with project id :)\n```\n\n---\n\n``` c++\n// header (pal_fsw.hpp) file\n\n#pragma once\n\nclass file_system_watcher_shim\n{\npublic:\n  void common_function_for_posix_compliants();\n  void slightly_diverged_function();\n  void painfully_diverged_watch_function();\n}\n```\n\n---\n\n``` c++\n// source (pal_fsw_commons.cpp) file\n\n#include \"pal_fsw.hpp\"\n\nvoid file_system_watcher_shim::common_function_for_posix_compliants() {\n // TODO: implement common function for all\n}\n\nvoid file_system_watcher_shim::slightly_varied_function() {\n\n#if COREFX_HAVE_XYZ_ABILITY\n\n  // your way\n\n#else\n\n  // my way\n\n#endif // COREFX_HAVE_XYZ_ABILITY\n\n}\n```\n\n---\n\n``` c++\n// source (pal_fsw_inotify.cpp) file\n\n// this is a separate compilation unit and will clash with others,\n// therefore guarding it with preprocessor directive\n\n#if COREFX_HAVE_INOTIFY_ABILITY\n\n#include \"pal_fsw.hpp\"\n\nvoid file_system_watcher_shim::painfully_diverged_watch_function() {\n // TODO: implement inotify based watcher\n}\n\n#endif // COREFX_HAVE_INOTIFY_ABILITY\n```\n\n---\n\n``` c++\n// source (pal_fsw_non_inotify.cpp) file\n\n// this is a separate compilation unit and will clash with others,\n// therefore guarding it with preprocessor directive\n\n#if !COREFX_HAVE_INOTIFY_ABILITY\n\n#include \"pal_fsw.hpp\"\n\nvoid file_system_watcher_shim::painfully_diverged_watch_function() {\n // TODO: implement non-inotify way\n}\n\n#endif // !COREFX_HAVE_INOTIFY_ABILITY\n```\n",
          "createdAt": "2015-10-04T20:45:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T20:45:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTM4NjEwNg=="
        },
        {
          "author": "stephentoub",
          "body": "This is essentially what we have, e.g.\n- \"common_function_for_posix_compliants\" are natively-shimmed 1:1 functions consumed from logic in a shared Unix managed binary\n- \"slightly_diverged_function\" are natively-shimmed almost 1:1 functions with some native #ifdefs consumed from logic in a shared Unix managed binary\n- \"painfully_diverged_watch_function\" are / will be natively-shimmed 1:1 functions consumed from logic in platform-specific managed binaries\n\nThe real difference is whether the code implementing the \"painfully diverged\" logic is done in C# or C++, and we've chosen C# and it's already all implemented in C#.  I've not seen any compelling argument for why in such cases rewriting it all to be in C++ would be a significantly more compelling option.\n",
          "createdAt": "2015-10-04T23:26:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-04T23:26:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NTQwMDk3Ng=="
        },
        {
          "author": "janhenke",
          "body": "@jasonwilliams200OK With today's update to mono I build corefx on FreeBSD itself again. There are a lot of new error messages since the last time I build it.\nI am wondering if `Interop.Libc` will go away eventually?\n\n@stephentoub It all comes down to packaging. Having all platform specific code in the native part has the benefit of having one managed assembly for all Unix-like platforms.\nBesides, I strongly think we need a generic implementation for these \"platform dependent managed code. Even if it just throws a NotImplementedExcpetion. That way you can much easier port to new platforms, if it at least compiles everything right away. Also it would give the chance to at least try running on an unsupported platform.\nGenerally it is much easier if you can at least compile successfully right away.\n",
          "createdAt": "2015-10-07T19:31:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T19:31:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMwMzgyMw=="
        },
        {
          "author": null,
          "body": "@stephentoub, sorry I was mixing C++ with C#. Now i understand that native layer is just exposing those entry points (native libs funcitons or syscalls) and sanitizing IO and managed code is where we decide which platform-specific wrapped utility method / wrapped syscall to be consumed. Besides, both (native and managed) tiers can't be OS-agnostics where non-POSIX functionality is to be consumed.\n\n@janhenke, I agree. I am also building master as we speak. There is another recurring assembly signing issue, I am hitting:\n\n```\nCSC : error CS7027: Error signing output with public key from file '/root/corefx/packages/Microsoft.DotNet.BuildTools.1.\n0.25-prerelease-00104/lib/ECMA.snk' -- mscoree.dll [/root/corefx/src/System.IO.Compression.ZipFile/ref/System.IO.Compres\nsion.ZipFile.csproj]\nCSC : error CS7033: Delay signing was specified and requires a public key, but no public key was specified [/root/corefx\n/src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.csproj]\n\nCSC : error CS7027: Error signing output with public key from file '/root/corefx/packages/Microsoft.DotNet.BuildTools.1.\n0.25-prerelease-00104/lib/ECMA.snk' -- mscoree.dll [/root/corefx/src/System.IO.Compression/ref/System.IO.Compression.csp\nroj]\nCSC : error CS7033: Delay signing was specified and requires a public key, but no public key was specified [/root/corefx\n/src/System.IO.Compression/ref/System.IO.Compression.csproj]\n```\n\nwill post the full msbuild.log gist link shortly.\n\n> Besides, I strongly think we need a generic implementation for these \"platform dependent managed code. \n\nI agree. Instead of partial classes, we can probably use inheritance with common and mostly common virtual methods in abstract base class and override for \"mostly common / partly different\" where necessary. Then implement abstract methods which are totally different for each OS. With this approach IMO, if where specialization/generalization is losing DRY'ing, we can employee multi-degree inheritance ancestry. But last time I checked, partial classes were preferred over parent-child association in CoreFX (for some reason I don't recall). :)\n",
          "createdAt": "2015-10-07T19:50:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T19:51:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMwOTAyOQ=="
        },
        {
          "author": null,
          "body": "Here is the msbuild.log for commit 2d36889:\n\nhttps://gist.githubusercontent.com/jasonwilliams200OK/b375ce52c7b0c90e24af/raw/c895d405a3044dd6acdb26ec49c4b0ced0c76d1a/corefx-msbuild.log\n\n/cc: @akoeplinger \n",
          "createdAt": "2015-10-07T19:56:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T21:44:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMxMDYyNg=="
        },
        {
          "author": "janhenke",
          "body": "@jasonwilliams200OK Why so complicated. All it needs is a \"if not Windows,Linux,OS X\" condition in the project files. So either include a platform specific set of files in the build or the generic ones.\n",
          "createdAt": "2015-10-07T20:48:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T20:48:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMyMzAzOQ=="
        },
        {
          "author": "nguerrera",
          "body": "I don't think the fact that some assemblies can't build/work for FreeBSD yet should be a major blocker for testing the rest of them. We should probably just make it so that the ones with pending work (FileSystemWatcher, Process, Networking) are skipped in the build and test run on FreeBSD. Then we can bring those up individually while having a process to prevent regression in what already works.\n",
          "createdAt": "2015-10-07T20:54:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T20:54:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMyNDg5OA=="
        },
        {
          "author": "stephentoub",
          "body": "> I don't think the fact that some assemblies can't build/work for FreeBSD yet should be a major blocker for testing the rest of them\n\nAgreed\n\n> We should probably just make it so that the ones with pending work (FileSystemWatcher, Process, Networking) are skipped in the build and test run on FreeBSD\n\nOr similar to what @janhenke suggested, just allow them to build, either by stubbing out with files that throw PlatformNotSupported, or just by mapping FreeBSD to one of the cases that does work, e.g. if FreeBSD is chosen, just build the Linux one (it won't work, but it'll build).\n",
          "createdAt": "2015-10-07T21:02:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-07T21:02:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMyODM0OA=="
        },
        {
          "author": null,
          "body": "With @ellismg recent changes (#3684), I am able to run tests by simplifying the previous method (https://github.com/dotnet/coreclr/issues/1633#issuecomment-143669303):\n- After https://gist.github.com/jasonwilliams200OK/6efa7907e66275df2d24 (especially the step to build native shims separately _after_ the build.sh exit with status 1), download [CoreCLR artifacts](http://dotnet-ci.cloudapp.net/job/dotnet_coreclr_freebsd_debug/) zip: `cd /root; curl -o bins.zip \"http://dotnet-ci.cloudapp.net/job/dotnet_coreclr/job/debug_freebsd/lastSuccessfulBuild/artifact/*zip*/archive.zip` (don't forget the quotes around URL) and then `unzip bins.zip; chmod -R 0777 archive/; rm bins.zip; cd corefx`.\n\n(nothing required from Windows machine)\n- Ran the test:\n  \n  ```\n  ./run-test.sh \\\n  --coreclr-bins      ../archive/bin/Product/FreeBSD.x64.Debug \\\n  --mscorlib-bins      ./packages/Microsoft.DotNet.CoreCLR/1.0.0-prerelease/lib/aspnetcore50 \\\n  --corefx-native-bins ./bin/FreeBSD.x64.Debug/Native\n  ```\n\nIt says:\n\n> 40 test(s) failed\n",
          "createdAt": "2015-10-07T21:12:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-24T06:40:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjMzMDk2OQ=="
        },
        {
          "author": "josteink",
          "body": "> I don't think the fact that some assemblies can't build/work for FreeBSD yet should be a major blocker for testing the rest of them.\n\nI have to agree with this one. It's better to start QAing the work we have done, instead of waiting on everything to complete before starting testing.\n\n> It says: 40 test(s) failed\n\n40 out of how many? In what ballpark are we? :)\n",
          "createdAt": "2015-10-08T06:21:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-08T06:22:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjQzMTM0OA=="
        },
        {
          "author": null,
          "body": "> 40 out of how many? In what ballpark are we? :)\n\nbeats me too. The tests are spawning out of test assemblies (managed dlls) and total number of tests is not visible.\n",
          "createdAt": "2015-10-08T07:39:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-08T07:39:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjQ0NTk4Mg=="
        },
        {
          "author": "ellismg",
          "body": "The number the script produces at the end is the number of test assemblies that failed.  xUnit should write the number of tests that failed per assembly to stdout as part of it's run.  The numbers should also be in the XML files it produces in each test assembly folder.\n\nIt could be the runtime is also just crashing and in that case there may not be logs produced per test assembly.\n",
          "createdAt": "2015-10-08T16:01:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-08T16:01:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0NjU5MjcyOQ=="
        },
        {
          "author": "naamunds",
          "body": "@jasonwilliams200OK Do you know if any progress has been made on the assembly signing issue?  I'm hitting the same thing on Ubuntu.  If no one's working on it, perhaps we should open a separate issue for it.\n",
          "createdAt": "2015-10-16T02:42:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-16T02:42:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0ODU4Mjc1Mg=="
        },
        {
          "author": null,
          "body": "@naamunds, that has been fixed on CoreFX master as part of https://github.com/dotnet/corefx/issues/3739.\n",
          "createdAt": "2015-10-16T04:20:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-10-16T04:20:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE0ODU5NjM3OA=="
        },
        {
          "author": null,
          "body": "Update - Today I ran tests on FreeBSD, thousands of them were passing and then some were failing due to obvious lack of System.Diagnostics.Process and friends snafu. After ~40 minutes of successful execution, it hung on System.IO.FileSystem tests (for about ~15 minutes before I pressed Ctrl+C to terminate).\n",
          "createdAt": "2016-02-26T20:23:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-02-27T10:29:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDE4OTQ2Nzc1Mw=="
        },
        {
          "author": "sec",
          "body": "@jasonwilliams200OK how did you manage to compile corefx under freebsd? I'm stuck at errors about gssapi\n",
          "createdAt": "2016-06-28T22:26:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-06-28T22:26:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIyOTIwMzE1NQ=="
        },
        {
          "author": null,
          "body": "@sec, at the time of making these notes: https://gist.github.com/jasonwilliams200OK/6efa7907e66275df2d24, GSSAPI wasn't required by CoreFX. However, it seems like the pkg is recently ported to FreeBSD: http://www.freshports.org/security/p5-GSSAPI. You may want to try `pkg upgrade pkg && pkg update && pkg install p5-GSSAPI`.\n",
          "createdAt": "2016-06-29T03:34:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-06-29T03:34:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIyOTI0Nzk3OQ=="
        },
        {
          "author": "sec",
          "body": "@jasonwilliams200OK, I already got this (it's perl ext. btw.) Problem was missing gssapi_ext.h. The trick was to do \"pkg install krb5\" - now native compiled.\nI've copied them to coreclr runtime, but still can't run ASP.NET Core app :) fight goes on then.\n",
          "createdAt": "2016-06-29T07:54:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-06-29T07:54:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIyOTI4MzIwNw=="
        },
        {
          "author": "josteink",
          "body": "What's the current status of this task? Is @janhenke's list complete and accurate? Is all work which needs being done, done? Then it should be closed, right?\n\nIf so, why do we still have this task? https://github.com/dotnet/corefx/issues/2070\n\nIf there's still work to be done, should a new issue be registered based on the current state of affairs?\n",
          "createdAt": "2016-07-18T09:30:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-07-18T09:30:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIzMzI4MzgyMA=="
        },
        {
          "author": "sec",
          "body": "There's also this needed I think - dotnet/corefx#2046\n",
          "createdAt": "2016-07-18T09:40:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-07-18T09:40:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIzMzI4NTg0NA=="
        },
        {
          "author": null,
          "body": "> should a new issue be registered based on the current state of affairs?\n\nYes :+1: \n",
          "createdAt": "2016-07-18T09:46:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-07-18T09:46:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDIzMzI4Njk2NA=="
        },
        {
          "author": "karelz",
          "body": "We discussed community-driven port for FreeBSD with @RussellHaley (from FreeBSD community) and @wfurt (from .NET Core team) who both expressed interest in the work.\r\nHere's a plan proposal we put together (feedback / suggestions are welcome):\r\n\r\n1. Produce binaries in CoreCLR & CoreFX repo targeting FreeBSD - using hacks is fine\r\n    * Hard to parallelize, @wfurt will work on that\r\n    * The build can be mix of builds from other platforms (Mac, Linux) targeting FreeBSD\r\n    * We will need documented steps (on FreeBSD wiki) to reproduce the build with FreeBSD-specific bug fixes\r\n2. Run & stabilize CoreCLR tests (using corerun)\r\n    * Tests may be built on another platform\r\n    * Goal: Provides basic quality of runtime\r\n3. Run & stabilize CoreFX tests (using corerun)\r\n    * Tests may be built on another platform\r\n    * Note this requires xunit. We believe, based on our past porting experience, once [2] is done, xunit will just work.\r\n    * This can be in theory parallelized with [2] - it may require shortcutting xunit (e.g. generate static execution recipe on another platform)\r\n4. Full stack build on FreeBSD (using corerun as bootstrapper from [1]-[3])\r\n    * We will need all tools (nuget, msbuild, roslyn) to work on boostrapping .NET Core\r\n5. Installers (FreeBSD ports)\r\n    * First-stage: Using product binaries from nuget feeds\r\n    * Second-stage: Build product from source (blocked on build from source effort)\r\n    * Requires FreeBSD community expertise and guidance on design\r\n    * Note: We can link FreeBSD packages also from official .NET Core download pages as community-support packages\r\n6. Regular build and test runs on FreeBSD\r\n    * Goal: Make sure changes in .NET Core repos breaking FreeBSD are known early\r\n    * Design needed\r\n    * Requires FreeBSD community expertise and guidance on design\r\n\r\nOperation principles:\r\n* Changes in [2]-[4] should be done primarily in CoreCLR/CoreFX repos (due to CLA signing requirements, code reviews from .NET Core team experts/members. etc.)\r\n* We will track high-level work on this issue. Specific bugs will be filed as separate issues.\r\n\r\nIf anyone is interested in helping, please let us know here. We can easily distribute work items from [2] & [3] above once we are far enough with [1].\r\n\r\nThe latest version of the proposal is in top-post of this issue.",
          "createdAt": "2017-09-15T17:02:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-15T17:07:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyOTg0MDUxOA=="
        },
        {
          "author": "karelz",
          "body": "Tagging more folks who expressed interest on freebsd-mono list ([this thread](https://lists.freebsd.org/pipermail/freebsd-mono/2017-September/002558.html)): @smortex @radovanovic @Echo-8-ERA\r\n\r\nBTW: I can't find [Mathieu Prevot](https://lists.freebsd.org/pipermail/freebsd-mono/2017-September/002570.html) GitHub account -- [UPDATE] Found in https://github.com/dotnet/corefx/issues/1626#issuecomment-330348424: @mprevot",
          "createdAt": "2017-09-15T17:52:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-18T20:39:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyOTg1MzMxMw=="
        },
        {
          "author": "krytarowski",
          "body": "For NetBSD we miss robust posix mutexes, this is the only feature that is still missing to produce named robus mutexes. We can now debug managed code failures with LLDB/NetBSD.. it works fine with core files. In my previous attempts we died on the lack of this feature in LLDB (I started to port this debugger for .NET).\r\n\r\nHaving better FreeBSD support will significantly help.\r\n\r\nThere were also problems in the past with lack of hyperv guest support to attach a NetBSD buildbot to CI machines and verify patches... for this I might need help from MS. I expect that there is required proprietary software to run it, which I don't own... I might find a developer to do the job if there would be joint interest (investment) between The NetBSD Foundation and Microsoft.",
          "createdAt": "2017-09-15T20:03:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-15T20:03:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyOTg4ODE2Mw=="
        },
        {
          "author": "karelz",
          "body": "Where do we miss \"robust posix mutexes\"? Is it part of .NET Core PAL?\r\n\r\nWhich CI system are you referring to? Why is it tied to .NET Core port effort?",
          "createdAt": "2017-09-15T21:27:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-15T21:27:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyOTkwODM3Nw=="
        },
        {
          "author": "krytarowski",
          "body": "> Where do we miss \"robust posix mutexes\"?\r\n\r\nIn the NetBSD kernel (and libc/libpthread), this is a part of CoreCLR. FreeBSD developed it in the last two years. It might be available in the latest stable release.. but there is need to check.\r\n\r\nI want to add this feature before my restart of .NET porting. (There was also detected a tiny missing API for network routing.. but I skip it now).\r\n\r\n> Is it part of .NET Core PAL?\r\n\r\nI don't remember now, without checking the code - it's the API used to implement of .NET named robust mutexes (or perhaps semapthores).\r\n\r\n> Which CI system are you referring to?\r\n\r\nNetBSD.\r\n\r\n> Why is it tied to .NET Core port effort?\r\n\r\nIt was optional feature last time I looked. I decided to get feature-parity on the kernel-interfaces and utilities (like LLDB). Just my style of work, to get functional buildingblock and later build a house. At some point we will need it anyway so why not to develop it in one go. Thanks for understanding :)",
          "createdAt": "2017-09-15T23:53:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-15T23:53:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyOTkyODc4Mw=="
        },
        {
          "author": "RussellHaley",
          "body": "Perhaps you can just tag the freebsd-dotnet group on GH? He is a member there (or you could look up his account name). ‎His email is mprevot@freebsd.org\r\n\r\n[EDIT] Delete email heards & previous reply by @karelz",
          "createdAt": "2017-09-18T19:45:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-18T19:49:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMDMzNDk2Nw=="
        },
        {
          "author": "karelz",
          "body": "@RussellHaley feel free to tag the larger group if you think it is appropriate. I couldn't find Mathieu's GH account via his name nor email, that's what I meant above (BTW: I pinged him over email directly).",
          "createdAt": "2017-09-18T20:00:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-18T20:12:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMDMzODk5Ng=="
        },
        {
          "author": "RussellHaley",
          "body": "I will look at tagging the group.\n\nHere is Mathieu's account. Perhaps a privacy setting?\n\nhttps://github.com/mprevot\n\nCheers,\n\nRuss\n\nOn Mon, Sep 18, 2017 at 1:01 PM, Karel Zikmund <notifications@github.com>\nwrote:\n\n> @RussellHaley <https://github.com/russellhaley> feel free to tag the\n> larger group if you think it is appropriate. I couldn't find Mathieu's GH\n> account via his name nor email, that's what I meant above.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/corefx/issues/1626#issuecomment-330338996>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACENF_N6mtOo3fptvku-LUMioNpZG7coks5sjswWgaJpZM4EPG-N>\n> .\n>\n",
          "createdAt": "2017-09-18T20:36:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-18T20:39:35Z",
                "user": "karelz"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOANYr7w=="
          },
          "updatedAt": "2017-09-18T20:36:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMDM0ODQyNA=="
        },
        {
          "author": "radovanovic",
          "body": "I can't see anywhere here mentioned, but what lowest version of FreeBSD we are targeting here (I assume at least 10 and later, but maybe 9 as well)?\r\n(I am also little bit confused what discussion should happen on mono@freebsd mailing list, and what here?)",
          "createdAt": "2017-09-21T12:16:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-21T12:16:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTEzODkzMA=="
        },
        {
          "author": "Echo-8-ERA",
          "body": "Well, if Fedora is anything to go by, MS will only support currently supported versions, i.e. 10.3 (10.4 soon) and 11.1.",
          "createdAt": "2017-09-21T12:47:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-21T12:47:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTE0NTg3OQ=="
        },
        {
          "author": "sec",
          "body": "@radovanovic FreeBSD 9 is not supported anymore, 10 will EoL in april 2018, 11 in 2021. From my expierence there shouldn't be any problems with compiling on 11 vs 10 (and even 9 if you want). FreeBSD is developed with backward compatibility in mind.",
          "createdAt": "2017-09-21T12:54:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-21T12:54:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTE0NzU4NQ=="
        },
        {
          "author": "karelz",
          "body": "> @radovanovic I am also little bit confused what discussion should happen on mono@freebsd mailing list, and what here?\r\n\r\nI expected the technical discussions, coordination of work and status over here as this is wider audience than mono@freebsd mailing list. OTOH we don't want to have gazillion of random discussions on one issue, so we might take some specific design discussions into separate issues from this one if they grow above reasonable number of replies.",
          "createdAt": "2017-09-21T16:01:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-21T16:01:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTIwMjU1Mw=="
        },
        {
          "author": "wfurt",
          "body": "I was finally able to run corefx tests on FreeBSD 11.0 (without outerloop tests)  \r\nTotal passed: 144208\r\nTotal failed: 2622\r\nTotal skipped 207\r\n\r\nI will update https://github.com/dotnet/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD with instructions.  I will file specific issues and tag them with with os-freebsd and up-for-grab.\r\nFull scale battle can start. Volunteers needed.  \r\n\r\nAnd yes, I did skip proposed step two. I'll get back to it as well. ",
          "createdAt": "2017-09-27T22:02:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2017-09-28T00:20:33Z",
                "user": "karelz"
              },
              {
                "content": "HEART",
                "createdAt": "2017-09-28T01:31:21Z",
                "user": "ghuntley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-09-28T01:31:24Z",
                "user": "ghuntley"
              },
              {
                "content": "HEART",
                "createdAt": "2017-09-28T04:30:36Z",
                "user": "preetpalS"
              },
              {
                "content": "HEART",
                "createdAt": "2017-09-28T04:54:35Z",
                "user": "RussellHaley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-28T04:54:39Z",
                "user": "RussellHaley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-09-29T13:21:06Z",
                "user": "eerhardt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-10T03:37:53Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2017-10-10T03:37:57Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHOAOHXGw=="
          },
          "updatedAt": "2017-09-27T22:02:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMjY2ODYxOQ=="
        },
        {
          "author": "wfurt",
          "body": "With some work-in-progress changes the current stats look like:\r\nTotal passed: 238892\r\nTotal failed: 58\r\nTotal skipped 1628\r\n\r\nSystem.Runtime.Tests.dll, 1\r\nSystem.Net.Ping.Functional.Tests.dll, 7\r\nSystem.Net.NameResolution.Pal.Tests.dll, 3\r\nSystem.Net.NameResolution.Functional.Tests.dll, 4\r\nSystem.IO.MemoryMappedFiles.Tests.dll, 1\r\nSystem.IO.FileSystem.Tests.dll, 7\r\nSystem.Globalization.Tests.dll, 2\r\nSystem.Drawing.Common.Tests.dll, 31\r\nSystem.Console.Tests.dll, 2\r\n\r\ndotnet/corefx#24538 opened to track broken cups support. ",
          "createdAt": "2017-10-10T04:47:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-10T04:47:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNTM1OTgwMA=="
        },
        {
          "author": "krytarowski",
          "body": "Great progress! Adding NetBSD when having FreeBSD support in-tree should be simple.",
          "createdAt": "2017-10-10T09:43:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-10T09:43:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNTQxOTMxMw=="
        },
        {
          "author": "krytarowski",
          "body": "@wfurt please share E-mail address, I will drop few lines.",
          "createdAt": "2017-10-10T10:08:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-10T10:08:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNTQyNTc3NA=="
        },
        {
          "author": "wfurt",
          "body": "The initial support has been merged to master branch. Build should work as described on WIKI page. \r\nI'm slowly progressing on dotnet/corefx#24386 but that should not hold back most users.  ",
          "createdAt": "2017-10-26T16:52:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-26T16:52:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTcyOTQ5Ng=="
        },
        {
          "author": "krytarowski",
          "body": "Can we already bootstrap .NET on FreeBSD?",
          "createdAt": "2017-10-26T17:07:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-26T17:07:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTczMzg0Mg=="
        },
        {
          "author": "wfurt",
          "body": "I have not tried for a while @krytarowski There was push to update tooling to 2.0 release and I was waiting for that effort to stabilize. I'll give it another try and I'll post update.",
          "createdAt": "2017-10-26T18:49:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-26T18:49:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTc2MjcxNg=="
        },
        {
          "author": "RussellHaley",
          "body": "Hi, so I'm bogged down with the clr managed tests not running. https://pastebin.com/B5KhtKX5\r\n\r\nAny input would be great as that's been an issue for some time. I have also recently run into a build failure on corefx building on Windows(master, Git revision 749194e). https://pastebin.com/JXUySLTY\r\n\r\nI assume that's an intermittent problem but it's slowed me down tonight. \r\n\r\n",
          "createdAt": "2017-12-06T06:57:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-06T06:57:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTU1MjU2MA=="
        },
        {
          "author": "josteink",
          "body": "If you look at the error:\r\n\r\n````\r\ntests/runtest.sh: line 786: ((: i<: syntax error: operand expected (error token is \"<\")\r\n````\r\n\r\nAnd the [offending line of code](https://github.com/dotnet/coreclr/blob/master/tests/runtest.sh#L786):\r\n\r\n````bash\r\nfor (( i=0; i<$maxProcesses; i++ )); do\r\n````\r\n\r\nMy gut feeling would be that `$maxProcesses` is not defined, leading to an incomplete boolean expression:\r\n\r\n````diff\r\n+for (( i=0; i<$maxProcesses; i++ )); do\r\n-for (( i=0; i<; i++ )); do\r\n````\r\n\r\nThis should be fairly testable. And if that is the case, you just have to go hunting backwards to try to find out how you ended up like this.",
          "createdAt": "2017-12-06T07:09:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-06T07:09:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTU1NDQ4MA=="
        },
        {
          "author": "RussellHaley",
          "body": "Thanks for your help! @josteink :) You're correct. Patch is here: https://pastebin.com/d5y9k1tw\r\n\r\nThis allows the tests to run, but I gave up at ~1000 errors all of the same nature:\r\n\r\nFAILED   - JIT/Methodical/casts/iface/_il_dbgiface2/_il_dbgiface2.sh\r\n               BEGIN EXECUTION\r\n               /usr/home/russellh/Git/coreclr/bin/tests/Windows_NT.x64.Debug/Tests/coreoverlay/corerun _il_dbgiface2.exe\r\n               coreclr_initialize failed - status: 0x80004005\r\n               Expected: 100\r\n               Actual: 255\r\n               END EXECUTION - FAILED\r\n",
          "createdAt": "2017-12-06T07:52:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-06T16:32:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTU2MjIxNw=="
        },
        {
          "author": "RussellHaley",
          "body": "Okay, as per the very excellent information from @janvorli, I was running part of my build in release and part of my build in debug. An embarrassing copy/paste mistake. I'm rebuilding now.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/1419\r\n",
          "createdAt": "2017-12-07T05:45:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-07T05:46:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTg2OTM4MQ=="
        },
        {
          "author": "josteink",
          "body": "> Patch is here: https://pastebin.com/d5y9k1tw\r\n\r\nIf you have a patch which fixes a broken build, I would recommend sending it as a pull-request so that it gets fixed for everyone :)",
          "createdAt": "2017-12-07T06:16:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-07T06:16:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTg3MzkxNQ=="
        },
        {
          "author": "RussellHaley",
          "body": "Thank you, I will. I'm still working on getting tests to run though and I wasn't sure what was causing the subsequent error last night.",
          "createdAt": "2017-12-07T07:23:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-07T07:23:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0OTg4NDQwNA=="
        },
        {
          "author": "oliverw",
          "body": "I suppose Freebsd 11 \"pkg install\" support for netcore 2.1 (once released) won't happen, right?",
          "createdAt": "2018-04-04T14:49:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-04-04T14:49:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3ODYyNzMxMQ=="
        },
        {
          "author": "RussellHaley",
          "body": "TLDR; Lots of work has been done, but there needs to be someone to drive it home. Writing the port Makefile is the easy part. \r\n\r\n@wfurt was able to get the CLR and the FX to build using Linux but it was largely untested. I was able to get the 'native' parts to build on FreeBSD but stalled out getting the managed parts to build on Windows (for FreeBSD). The whole thing was a mess of transferring files between operating systems.\r\n\r\nSeparately on the freebsd-mono@freebsd.org mailing list, @dragonsa has imported a binary version of Dot Net Core 1 and all the toolschain (msbuild, nuget etc) from MintOS using Linux emulation. I've been able to use his patches and run some of the tools but never got around to building anything. I'm not sure if these patches have been committed yet; I was in the middle of reviewing them and I changed jobs. I don't have any DotNet in my current role and am ramping on other things right now.\r\n\r\nWhat does all that mean? If someone can verify @dragonsa's patches he can push them the ports tree, then it's technically possible to build core 2 on FreeBSD natively. As you can see, though, there are lots of little parts that need to be brought together and organized. I've dropped the ball on that so someone needs to pick it up. I suggest jumping on the freebsd-mono@freebsd.org mailing list. https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/eresources-mail.html",
          "createdAt": "2018-04-04T18:27:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-04-04T18:38:16Z",
                "user": "oliverw"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-07T19:55:15Z",
                "user": "valpackett"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAWObSA=="
          },
          "updatedAt": "2018-04-04T21:23:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3ODY5OTE1Mw=="
        },
        {
          "author": "oliverw",
          "body": "@russellhadley Thanks for the writeup Russell.",
          "createdAt": "2018-04-04T18:38:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-04-04T18:38:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3ODcwMjQ0OA=="
        },
        {
          "author": "cschuber",
          "body": "Hi,\r\n\r\nDiscussing this with a .NET dev here, I'm willing to assist with the development of a FreeBSD port/package.\r\n\r\nFull disclosure: I'm not a .NET developer however I'm willing to work with whomever to get this into the tree.\r\n\r\n~cy",
          "createdAt": "2018-06-27T04:01:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-06-27T05:45:48Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-06-27T17:30:33Z",
                "user": "DanSmith"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-06-30T07:40:15Z",
                "user": "preetpalS"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-07-02T10:56:58Z",
                "user": "smortex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-07-02T10:56:59Z",
                "user": "smortex"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-07-22T20:23:28Z",
                "user": "driesmp"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOAZkCcA=="
          },
          "updatedAt": "2018-06-27T04:01:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQwMDUzNTc1MQ=="
        },
        {
          "author": "josteink",
          "body": "@cschuber I've been too busy to keep an eye on the current status of things, but as someone who submitted a lot of FreeBSD-patches and managed to get Hello World running around 3 years ago, it would be awesome if we could *finally* see this thing getting properly landed. You have my full support :)",
          "createdAt": "2018-06-27T05:58:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-06-27T05:58:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQwMDU1MjAwNg=="
        },
        {
          "author": null,
          "body": "@cschuber, the current active issues is https://github.com/dotnet/coreclr/issues/18067. Mainly these four features are left https://github.com/dotnet/corefx/issues?q=is:open+label:os-freebsd+label:up-for-grabs+is:issue, among which Filesystem watcher seems to be the most tricky/laborious one https://github.com/dotnet/corefx/issues/2046.",
          "createdAt": "2018-06-27T06:29:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-06-27T06:29:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQwMDU1NzkyMg=="
        },
        {
          "author": "wfurt",
          "body": "Thanks for the offer @cschuber. We are almost at point when it may be possible. \r\nWe've been working recently with @mateusrodrigues on getting .net working on FreeBSD and he is trying to get PowerShell working. List @kasper3 sent are are primarily missing features. I think we can throw PNSP for now. From my prospective most pressing issues are dotnet/corefx#30698 and https://github.com/dotnet/coreclr/issues/18481.  It would be great if anybody from the community can dig into them. I did not run tests recently, but I fear the number of failures went up.\r\nWe should open issue for each new failing group. \r\n\r\nI also start fixing source-build but there are still some challenges ahead. \r\nc# compiler is written in c#. Current .net build uses previous version of .net to produce managed assemblies. It also depends on packages from Nuget. \r\nRight now, we have good enough bootstrap cli that we can be build coreclr, corefx and few other repos on FreeBSD. I did not update building instructions yet to reflect 2.1 changes and source-build.\r\n\r\n\r\n  ",
          "createdAt": "2018-06-27T18:04:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-07-02T10:57:54Z",
                "user": "smortex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-07-14T22:26:28Z",
                "user": "RussellHaley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-07-15T12:21:43Z",
                "user": "driesmp"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAZP83A=="
          },
          "updatedAt": "2018-06-27T18:04:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQwMDc3NzAxMA=="
        },
        {
          "author": "josh-endries",
          "body": "+1 Just a note to say I'm glad this still has some momentum. It's hard to follow with so many moving parts but seems like people are making progress. I created https://github.com/dotnet/coreclr/issues/6115 a while ago but the project I was working on then got put on hold. I really hope it's as easy as `pkg install dotnet && dotnet build` one day (without linux compat).",
          "createdAt": "2018-07-29T13:57:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2018-08-08T14:20:02Z",
                "user": "ghuntley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-08-08T14:20:06Z",
                "user": "ghuntley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-12-30T20:12:54Z",
                "user": "driesmp"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAg9SUw=="
          },
          "updatedAt": "2018-07-29T13:57:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQwODY3OTU3MA=="
        },
        {
          "author": "ma-karai",
          "body": "Also looking forward for this",
          "createdAt": "2018-08-27T09:29:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-08-27T09:29:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQxNjE3MDEzOQ=="
        },
        {
          "author": "wfurt",
          "body": "We got daily builds going now. One can get runtime or sdk here: https://dotnetcli.blob.core.windows.net/dotnet/Runtime/master/dotnet-runtime-latest-freebsd-x64.tar.gz and \r\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-freebsd-x64.tar.gz\r\n\r\nIt is also possible to cross-target e.g. on Linux or Windows one can do `dotnet publish -r freebsd-x64`  and that would create self-contained FreeBSD application.  \r\n\r\nIt is still incomplete and unsupported but it should make it easier for anybody to contribute. \r\nIt would be great if people can give it try, report issues. \r\nAlso this would be good time for final push to close feature gap and fix bugs. \r\n\r\ncc: @mateusrodrigues \r\n\r\n",
          "createdAt": "2018-12-15T18:28:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2018-12-15T19:12:54Z",
                "user": "am11"
              },
              {
                "content": "HEART",
                "createdAt": "2018-12-15T21:55:28Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-16T00:01:24Z",
                "user": "karelz"
              },
              {
                "content": "HEART",
                "createdAt": "2018-12-16T00:01:24Z",
                "user": "karelz"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-16T07:45:42Z",
                "user": "oliverw"
              },
              {
                "content": "HEART",
                "createdAt": "2018-12-16T07:45:43Z",
                "user": "oliverw"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-16T19:49:39Z",
                "user": "mateusrodrigues"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-17T11:52:42Z",
                "user": "preetpalS"
              },
              {
                "content": "HEART",
                "createdAt": "2018-12-21T08:37:08Z",
                "user": "stefanclayster"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-30T20:12:32Z",
                "user": "driesmp"
              },
              {
                "content": "HEART",
                "createdAt": "2019-03-31T09:03:53Z",
                "user": "SommerEngineering"
              },
              {
                "content": "HOORAY",
                "createdAt": "2019-03-31T09:03:55Z",
                "user": "SommerEngineering"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHOAmA7nA=="
          },
          "updatedAt": "2018-12-15T18:28:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzU4ODM1OQ=="
        },
        {
          "author": "stephentoub",
          "body": "Nice job, @wfurt and @bartonjs.",
          "createdAt": "2018-12-15T18:52:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-12-16T00:01:28Z",
                "user": "karelz"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAgdSrg=="
          },
          "updatedAt": "2018-12-15T18:52:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzU4OTkyNw=="
        },
        {
          "author": "josteink",
          "body": "When I proposed my first FreeBSD commits around 2-3 years ago, I didn’t actually *believe* we’d get here, but I certainly wanted to try. \r\n\r\nThis is definitely a big milestone and hopefully will make it easier for new contributors help finish the port. \r\n\r\nBig thanks to everyone who helped us get this far 👍",
          "createdAt": "2018-12-15T21:55:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-15T21:55:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzYwMDU1Mw=="
        },
        {
          "author": "krytarowski",
          "body": "Great progress! I'm still fighting with toolchain (most LLVM projects besides LLDB and LLD are finished) and hardware assisted virtualization for NetBSD (Linux/BSD now starts booting until a VTx fatal exception, simpler OSes like FreeDOS already work).. so I will resume my NetBSD porting, hopefully sooner than later. Better FreeBSD support will help with an easier resume.",
          "createdAt": "2018-12-15T23:40:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-15T23:41:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzYwNTkzOA=="
        },
        {
          "author": "ma-karai",
          "body": "Awesome :)",
          "createdAt": "2018-12-15T23:44:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-15T23:44:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzYwNjExNA=="
        },
        {
          "author": null,
          "body": "We celwbrate drunkness why the ensil bombsrdment??",
          "createdAt": "2018-12-16T00:32:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2018-12-16T07:45:36Z",
                "user": "oliverw"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAgdfig=="
          },
          "updatedAt": "2018-12-16T00:32:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NzYwODM3NA=="
        },
        {
          "author": "mprevot",
          "body": "@krytarowski Can you develop in which ways 'FreeBSD support' can be better ?",
          "createdAt": "2018-12-20T22:35:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-20T22:35:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0OTE1NzY2NA=="
        },
        {
          "author": "wfurt",
          "body": "It would be great if some FreeBSD guru could take look at https://github.com/dotnet/coreclr/issues/22124 I would expect binaries build for 11 to run on 12 but it does not seems to be the case ;(\r\nIt is easy to reproduce with simple app and 12.0 release seems to break something dotnet depends on. ",
          "createdAt": "2019-01-31T18:01:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-01-31T18:01:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTQ0MzgzNw=="
        },
        {
          "author": "RussellHaley",
          "body": "Hi, I'm no guru but we ran across a threading regression in 12-RELEASE in the Lua53 port. \r\nSee here for the original bug: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=235158 \r\nand here for the Base system bug that was identified: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=235211 (note the base system bug identifies code that can be used to reproduce the issue for comparison).\r\n\r\nThe fix for Lua is to link against -pthread, even though there is ZERO requirement from Lua for -pthread.\r\n",
          "createdAt": "2019-01-31T20:38:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-01-31T20:40:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTQ5Nzc3Ng=="
        },
        {
          "author": "wfurt",
          "body": "thanks @RussellHaley. That looks like promising lead. ",
          "createdAt": "2019-01-31T21:16:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-01-31T21:16:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTUwOTMwMA=="
        },
        {
          "author": "RussellHaley",
          "body": "Glad I could help. I'd love to be playing along but I barely have the few hours needed to maintain the Lua port. Keep up the great work!",
          "createdAt": "2019-02-01T00:17:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T00:17:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTU1Nzc5OQ=="
        },
        {
          "author": "josteink",
          "body": "As the one who [fixed the FreeBSD threading implementation in coreclr](https://github.com/dotnet/coreclr/commit/7976ae89dafa9be15d30210d2c56705e524c9d8b), I think pthreads are used pretty consistently all over, because that was what I had to patch up to make the build run.\r\n\r\nThat said, there might be underlying buts and pieces that I never had to touch which uses \"regular\" threads...\r\n\r\nMaybe someone else who knows more about the general implementation can chime in? @janvorli ?",
          "createdAt": "2019-02-01T08:54:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T08:54:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTY1MTIyMQ=="
        },
        {
          "author": "wfurt",
          "body": "This fixes the issue for me:\r\n```\r\n[furt@daemon ~]$ LD_PRELOAD=/usr/lib/libpthread.so ./dotnet-3.x/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010021\r\n Commit:    d5c97b7c2a\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd-x64\r\n Base Path:   /usr/home/furt/dotnet-3.x/sdk/3.0.100-preview-010021/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010021 [/usr/home/furt/dotnet-3.x/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/home/furt/dotnet-3.x/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI did not make any extensive tests but at least I can execute `dotnet` again.  ",
          "createdAt": "2019-02-01T19:38:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T19:38:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg0MjYyMA=="
        },
        {
          "author": "janvorli",
          "body": "Ok, I can see that the dotnet executable is not linked with pthreads for other systems than Linux.\r\nhttps://github.com/dotnet/core-setup/blob/2ef0b64810530961f492c33d37fc7509128e0a9b/src/corehost/cli/exe.cmake#L59-L61\r\n",
          "createdAt": "2019-02-01T20:46:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-02-01T20:53:11Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAino6Q=="
          },
          "updatedAt": "2019-02-01T20:46:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg2MjIxMg=="
        },
        {
          "author": "josteink",
          "body": "Does that mean the answer to fixing this is as simple as it sounds? I.e. as simple as this? https://github.com/josteink/core-setup/commit/25657ba2e181cce401acd7f4bf9d27a08a668470\r\n\r\nIf so, I'll be happy to make it a PR.",
          "createdAt": "2019-02-01T21:55:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T21:55:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg4MTMyOA=="
        },
        {
          "author": "wfurt",
          "body": "Yes I think so. I was waiting for @joperator to confirm. \r\nNot sure if we need \"dl\" as well but that can be resolved when you submit PR @josteink  ",
          "createdAt": "2019-02-01T22:01:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T22:01:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg4Mjg3OA=="
        },
        {
          "author": "josteink",
          "body": "Right. My bad. So more like this then: https://github.com/josteink/core-setup/commit/a08f38e25a98c25f59c8ed8c8567a0cb08b1c1c6\r\n\r\nI've created a PR for it. Let me know if it needs any ammending: https://github.com/dotnet/core-setup/pull/5072",
          "createdAt": "2019-02-01T22:17:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-01T22:17:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg4NzEzMA=="
        },
        {
          "author": "RussellHaley",
          "body": "> Right. My bad. So more like this then: [josteink/core-setup@a08f38e](https://github.com/josteink/core-setup/commit/a08f38e25a98c25f59c8ed8c8567a0cb08b1c1c6)\r\n> \r\n> I've created a PR for it. Let me know if it needs any ammending: [dotnet/core-setup#5072](https://github.com/dotnet/core-setup/pull/5072)\r\n\r\nJust an FYI, it seems this is already patched in the base system: https://reviews.freebsd.org/D18988\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2019-02-02T00:34:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-02T00:34:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1OTkxNDYwOQ=="
        },
        {
          "author": "joperator",
          "body": "Looks like the main issue in [dotnet/coreclr#22124](https://github.com/dotnet/coreclr/issues/22124#issuecomment-460190199) is fixed @wfurt.\r\nI only have a problem when trying to publish a self-contained app on FreeBSD 12.0.",
          "createdAt": "2019-02-04T11:15:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-02-15T00:00:14Z",
                "user": "rawzone"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-06T10:14:12Z",
                "user": "josteink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAmbqIg=="
          },
          "updatedAt": "2019-02-04T11:15:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ2MDIxMTEwOQ=="
        },
        {
          "author": "hjc4869",
          "body": "freebsd-x64 official NuGet packages has been removed since .NET Core 3.0 preview 2 and we were unable to publish apps for FreeBSD since then. Are there any plans to re-enable them in 3.0?",
          "createdAt": "2019-04-06T09:20:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-06T09:20:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDQ4OTAxMg=="
        },
        {
          "author": "karelz",
          "body": "Sadly, we had to de-prioritize FreeBSD bring up (due to various reasons and difficulties in the end-to-end Azure support) and it is not going to be priority in .NET Core 3.0.\r\nWe would love to keep it semi-working at the state where it is now, but we do not have much time to invest now :(.",
          "createdAt": "2019-04-06T17:44:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-06T17:44:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDUyMzM4Mg=="
        },
        {
          "author": "hjc4869",
          "body": "@karelz Thanks for your reply and I understand the prioritized work of .NET Core 3.0. I'll focus on bringing up my apps with FreeBSD Linux emulation then. :)",
          "createdAt": "2019-04-07T00:01:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-07T00:40:31Z",
                "user": "karelz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-12T15:39:02Z",
                "user": "ghuntley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-10T07:44:37Z",
                "user": "ma-karai"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAoZO6g=="
          },
          "updatedAt": "2019-04-07T00:01:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDU0NzA2Ng=="
        },
        {
          "author": "alex-novikov-1990",
          "body": "@hjc4869 Or you can try mono. IIRC, it will support .NET Standard 3.0",
          "createdAt": "2019-04-07T07:17:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-07T07:17:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDU2NTY4NQ=="
        },
        {
          "author": "wfurt",
          "body": "I'm planning to give it another try but as @karelz mentioned it is not priority for 3.0",
          "createdAt": "2019-04-08T04:39:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-08T04:39:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDY4MDgwMw=="
        },
        {
          "author": "hjc4869",
          "body": "@newsash Mono is an acceptable option for me. However I found it difficult to build my project with the mono targets added to existing .NET Core csproj files.\r\n\r\nOn a Linux machine I tried adding net472 to TargetFrameworks and setting the FrameworkPathOverride variable but that did not work well. If I consume an API that is implemented in both mono and .NET Core, but not .NET Framework, it will fail to build with mono. Besides, although mono supports .NET Standard 2.1, I still couldn't add reference to .NET Standard 2.1 dlls in an net472 csproj.\r\n\r\nShould I add a separate csproj and use mono msbuild instead of using dotnet tools, or do you have any suggestions on the problem?",
          "createdAt": "2019-04-18T13:12:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-18T13:12:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4NDUwMTQ2Nw=="
        },
        {
          "author": "nkosi23",
          "body": "Just a quick remark.\r\n\r\nWith mono about to be swallowed by .NET 5 as per the recent announcement [1], providing decent support for FreeBSD has become urgent.\r\n\r\nMono has proven to have really good cross-platform support and can be built without problem from FreeBSD ports. Many shops run their .net loads on FreeBSD since this OS has many unique features. So far, mono has been bridging the gap but with .NET 5 it seems likely that in some near future, mono will be merged into  NET 5 and the FreeBSD community will be totally cut-off from the  .NET ecosystem.\r\n\r\nDotnet should have mature FreeBSD support well before this happens.\r\n\r\nI think Microsoft should officially support FreeBSD at this point and ensure all the dotnet tooling builds on this platform.\r\n\r\n[1]: https://devblogs.microsoft.com/dotnet/introducing-net-5/",
          "createdAt": "2019-05-06T18:08:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-06T18:10:44Z",
                "user": "josteink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-06T18:35:04Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-06T19:00:27Z",
                "user": "preetpalS"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-07T02:48:53Z",
                "user": "doug0162"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-08T06:45:19Z",
                "user": "Echo-8-ERA"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-09T14:29:06Z",
                "user": "jmpri3"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-13T11:14:53Z",
                "user": "zbtnot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-17T12:07:16Z",
                "user": "mvanbaak"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-20T20:23:26Z",
                "user": "driesmp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T06:00:06Z",
                "user": "ma-karai"
              },
              {
                "content": "HEART",
                "createdAt": "2019-05-24T06:00:09Z",
                "user": "ma-karai"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-26T08:34:21Z",
                "user": "ljsnogard"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-27T13:04:22Z",
                "user": "MarkSFrancis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-01T20:19:32Z",
                "user": "sawdustdood"
              },
              {
                "content": "HEART",
                "createdAt": "2019-06-01T22:04:36Z",
                "user": "mbdev87"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-04T05:58:38Z",
                "user": "adityaprasadv1"
              },
              {
                "content": "HEART",
                "createdAt": "2019-06-13T11:33:22Z",
                "user": "ljsnogard"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-19T10:26:21Z",
                "user": "Marlamin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-26T11:19:04Z",
                "user": "bjornbouetsmith"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-12T13:11:34Z",
                "user": "davidchisnall"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-15T18:27:58Z",
                "user": "mheppner"
              },
              {
                "content": "HEART",
                "createdAt": "2019-07-15T18:28:01Z",
                "user": "mheppner"
              },
              {
                "content": "HEART",
                "createdAt": "2019-07-18T11:54:04Z",
                "user": "driesmp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-19T02:16:19Z",
                "user": "rusfearuth"
              },
              {
                "content": "HEART",
                "createdAt": "2019-07-19T02:16:20Z",
                "user": "rusfearuth"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-25T11:12:30Z",
                "user": "matthewblott"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-13T07:02:39Z",
                "user": "onny"
              },
              {
                "content": "HEART",
                "createdAt": "2019-08-13T07:02:40Z",
                "user": "onny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-21T00:07:47Z",
                "user": "amarshall"
              },
              {
                "content": "HEART",
                "createdAt": "2019-09-05T13:00:07Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-18T07:09:03Z",
                "user": "opcod3"
              },
              {
                "content": "HEART",
                "createdAt": "2019-09-18T07:09:08Z",
                "user": "opcod3"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-08T20:13:10Z",
                "user": "remmah"
              },
              {
                "content": "HEART",
                "createdAt": "2019-10-08T20:13:13Z",
                "user": "remmah"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-09T10:09:22Z",
                "user": "marcinsmialek"
              },
              {
                "content": "HEART",
                "createdAt": "2019-10-17T20:37:01Z",
                "user": "laffer1"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-02T09:12:10Z",
                "user": "nerxses"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-02T22:02:40Z",
                "user": "seif"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-04T16:41:05Z",
                "user": "TclasenITVT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-12T19:12:38Z",
                "user": "trasz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-29T10:38:12Z",
                "user": "XVilka"
              },
              {
                "content": "HEART",
                "createdAt": "2020-01-10T18:53:18Z",
                "user": "txVLN"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-12T03:29:10Z",
                "user": "jafin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-27T15:33:19Z",
                "user": "feifei435"
              },
              {
                "content": "HEART",
                "createdAt": "2020-02-13T16:51:17Z",
                "user": "scineram"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-02-13T16:51:19Z",
                "user": "scineram"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-04T22:37:31Z",
                "user": "WillDaSilva"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-20T15:34:08Z",
                "user": "linhvng"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-17T11:27:07Z",
                "user": "manfromarce"
              },
              {
                "content": "HEART",
                "createdAt": "2024-11-29T07:28:15Z",
                "user": "Teddy55Codes"
              }
            ],
            "totalCount": 50,
            "endCursor": "Y3Vyc29yOnYyOpHOD88d1w=="
          },
          "updatedAt": "2019-05-06T18:08:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4OTcxODM2MA=="
        },
        {
          "author": "wfurt",
          "body": "@jasonpugsley put together instructions https://github.com/jasonpugsley/core-sdk/wiki/.Net-Core-3.0.0-for-FreeBSD and @joperator is trying to get source-build working https://github.com/dotnet/source-build/issues/1139\r\n\r\nWe have last ~30 tests failing for corefx. \r\n```\r\nSystem.Diagnostics.Tests.ProcessTests.TestPeakWorkingSet64\r\nSystem.Diagnostics.Tests.ProcessTests.TestPrivateMemorySize\r\nSystem.Diagnostics.Tests.ProcessTests.Kill_ExitedNonChildProcess_DoesNotThrow(killTree: True)\r\nSystem.Diagnostics.Tests.ProcessTests.TotalProcessorTime_PerformLoop_TotalProcessorTimeValid\r\nSystem.Diagnostics.Tests.ProcessTests.Kill_EntireProcessTree_True_EntireTreeTerminated\r\nSystem.Diagnostics.Tests.ProcessTests.TestPeakVirtualMemorySize\r\nSystem.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName\r\nSystem.Diagnostics.Tests.ProcessTests.TestPrivateMemorySize64\r\nSystem.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported\r\nSystem.Diagnostics.Tests.ProcessTests.TestPeakWorkingSet\r\nSystem.Diagnostics.Tests.ProcessTests.TestPeakVirtualMemorySize64\r\nSystem.Diagnostics.Tests.ProcessTests.Kill_ExitedChildProcess_DoesNotThrow(killTree: True)\r\nSystem.Diagnostics.Tests.ProcessTests.Kill_EntireProcessTree_True_CalledOnTreeContainingCallingProcess_ThrowsInvalidOperationException\r\nSystem.IO.Tests.DirectoryInfo_MoveTo.MoveDirectory_FailToMoveLowerCaseDirectoryWhenUpperCaseDirectoryExists\r\nSystem.IO.Tests.FileInfo_Exists.LockedFileExists\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 0, firstLength: 10, secondPosition: 1, secondLength: 2)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 3, secondLength: 5)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 3, secondLength: 4)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 4, secondLength: 5)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 2, secondLength: 6)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 2, secondLength: 4)\r\nSystem.IO.Tests.FileStream_LockUnlock.OverlappingRegionsFromOtherProcess_ThrowsException(fileLength: 10, firstPosition: 3, firstLength: 5, secondPosition: 4, secondLength: 6)\r\nSystem.IO.Tests.Directory_Move.MoveDirectory_FailToMoveLowerCaseDirectoryWhenUpperCaseDirectoryExists\r\nSystem.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(hostName: \\&quot;\\&quot;)\r\nSystem.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntryAsync_HostString_Ok(hostName: \\&quot;\\&quot;)\r\nSystem.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName\r\nSystem.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName\r\nSystem.Net.NetworkInformation.Tests.PingTest.SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix(addressFamily: InterNetwork)\r\nSystem.Net.NetworkInformation.Tests.PingTest.SendPingWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix(addressFamily: InterNetwork)\r\nSystem.Net.Sockets.Tests.DualModeAcceptAsync.AcceptAsyncV4BoundToSpecificV4_Success\r\nSystem.Tests.AppDomainTests.MonitoringIsEnabled\r\nSystem.Tests.GCExtendedTests.GetGCMemoryInfo\r\n```\r\n@am11 is looking at System.Diagnostics.Tests.ProcessTests so failing locking tests seems biggest remaining gap. It would be great if anybody can take look dotnet/corefx#30899. ",
          "createdAt": "2019-11-11T19:56:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-02-16T03:05:49Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA7sOuw=="
          },
          "updatedAt": "2019-11-11T19:56:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU1MjU5MDY5MA=="
        },
        {
          "author": "elfalem",
          "body": "Just wondering if there are any updates on this or if it's abandoned?",
          "createdAt": "2020-11-12T06:22:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-12T06:22:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTg2NjAxOA=="
        },
        {
          "author": "Thefrank",
          "body": "> Just wondering if there are any updates on this or if it's abandoned?\r\n\r\nyou might want to look at https://github.com/dotnet/source-build/issues/1139\r\nI have not tried recently as I wait for dotNET5 final but, as of a few months ago, FreeBSD runtime could only be built as a cross compile on Linux. ASPNet and SDK also required Linux cross compile but only built if the stars aligned (arcade updates or some other automated bot didn't break a dependency) \r\n\r\nedit: and @am11 posted a better write up while I was typing up a late-night ramble. read that and not mine \r\nedit2: forgot punctuation and it looks like final was put out 2 days ago. guess I should get working on that or something",
          "createdAt": "2020-11-12T09:08:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-12T09:19:48Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-12T09:28:19Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-13T00:10:20Z",
                "user": "elfalem"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBWpX-w=="
          },
          "updatedAt": "2020-11-12T09:14:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTk0NTUyNQ=="
        },
        {
          "author": "wfurt",
          "body": "Aside from all the above, I created FreeBSD project in https://github.com/dotnet/runtimelab/ and I'm slowly progressing on getting packages built and published. The goal is to build and publish enough for app to run on FreeBSD and have seed for source-build. ",
          "createdAt": "2020-11-12T17:09:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-11-12T17:42:29Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-12T17:45:26Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-12T19:42:57Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-13T00:11:45Z",
                "user": "elfalem"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-13T05:05:12Z",
                "user": "joperator"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-13T10:07:22Z",
                "user": "onny"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-23T23:53:19Z",
                "user": "backerman"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-11-28T02:27:21Z",
                "user": "avkarenow"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-01T03:48:00Z",
                "user": "zachfi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-01T03:48:16Z",
                "user": "zachfi"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOBYbxww=="
          },
          "updatedAt": "2020-11-12T17:09:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjIxMTcwMg=="
        },
        {
          "author": "jasonpugsley",
          "body": "I thought I'd write a quick update. I finally got all of the planets aligned to build 5.0.0 RTM on FreeBSD. I hadn't kept up since Preview3 and it took a while (and _many_ build attempts) to find the right combination of compatible builds to get a successful 5.0.\r\nI've been able to build PowerShell 7.1.0 with surprisingly few hacks, it works though I haven't tested it thoroughly but it seems like a good test of the SDK.\r\nI've only just built AspNetCore but I haven't tested it at all yet.\r\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  11\r\n OS Platform: FreeBSD\r\n RID:         freebsd.11-x64\r\n Base Path:   /tmp/rtm/sdk/5.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  5.0.100 [/tmp/rtm/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.0 [/tmp/rtm/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [/tmp/rtm/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n$ dotnet new console\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /tmp/test/test.csproj...\r\n  Determining projects to restore...\r\n  Restored /tmp/test/test.csproj (in 106 ms).\r\nRestore succeeded.\r\n\r\n$ dotnet run\r\nHello World!\r\n$\r\n```\r\n\r\n```\r\n$ LANG=en-US ./pwsh\r\nPowerShell 7.1.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /tmp/powershell> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             FreeBSD 11.4-RELEASE FreeBSD 11.4-RELEASE #0 r362094: Fri Jun 12 18:27:15 UTC 2020     root@releng2.nyi.freebsd.org:/usr/obj/usr/src/sys/GE…\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS /tmp/powershell> Get-Host\r\n\r\nName             : ConsoleHost\r\nVersion          : 7.1.0\r\nInstanceId       : fa711f95-926c-47e4-9e0c-dff0f518f825\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\r\nCurrentCulture   : en-US\r\nCurrentUICulture : en-US\r\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n\r\n\r\nPS /tmp/powershell>\r\n```\r\nThe only issue with doing this work manually (i.e. outside of the CI system) is the trouble caused by breaking changes requiring a particular build to be available for the next build to use. It doesn't happen often but it requires a lot of trial and error to find the correct commit. Having the linux cross-build in the CI system should fix that but I haven't looked at that yet. Still it's good to know I can build a complete SDK and then use that SDK to build something else.",
          "createdAt": "2020-12-02T04:09:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-12-02T06:19:07Z",
                "user": "josteink"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-02T06:19:16Z",
                "user": "wfurt"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-02T06:28:23Z",
                "user": "m-barthelemy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-02T07:30:59Z",
                "user": "army1349"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-02T08:01:53Z",
                "user": "backerman"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-02T08:18:21Z",
                "user": "preetpalS"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-02T08:40:32Z",
                "user": "bqstony"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-02T09:13:09Z",
                "user": "onny"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-02T09:13:09Z",
                "user": "onny"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-02T09:13:10Z",
                "user": "onny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-02T09:56:26Z",
                "user": "EgorBo"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-02T10:18:00Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-02T14:44:03Z",
                "user": "petervandivier"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-04T12:07:22Z",
                "user": "thecatkitty"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-04T22:51:44Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-16T21:31:11Z",
                "user": "elfalem"
              }
            ],
            "totalCount": 16,
            "endCursor": "Y3Vyc29yOnYyOpHOBaOnAw=="
          },
          "updatedAt": "2020-12-02T04:09:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNjk3NzAyMw=="
        },
        {
          "author": "RussellHaley",
          "body": "```\r\nrussellh@freebird:/www/winlua_net/htdocs/downloads$ pkg search dotnet\r\nlinux-dotnet-cli-2.0.7         Cross-platform .NET implementation\r\nlinux-dotnet-runtime-2.0.7     Cross-platform .NET implementation\r\nlinux-dotnet-sdk-2.1.201       Cross-platform .NET implementation (Software Development Kit)\r\nlinux-dotnet10-runtime-1.0.11  Cross-platform .NET implementation\r\nlinux-dotnet10-sdk-1.1.9       Cross-platform .NET implementation (Software Development Kit)\r\nlinux-dotnet11-runtime-1.1.8   Cross-platform .NET implementation\r\n```",
          "createdAt": "2020-12-02T06:12:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-02T06:12:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNzAxNjIxMQ=="
        },
        {
          "author": "wfurt",
          "body": "That is good progress @jasonpugsley. I'm  trying to find better answer for the build but I was unable to put in any decent chunk of time in last few month ;(\r\nDid PowerShell give you any grief because of terminfo or did you copy terminal definition from elsewhere?  ",
          "createdAt": "2020-12-02T06:27:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-02T06:27:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNzAyMjI0Nw=="
        },
        {
          "author": "jasonpugsley",
          "body": "I grabbed the terminal definition from my Mac where I was ssh'd from.",
          "createdAt": "2020-12-02T06:43:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-02T06:43:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNzAyOTMyMQ=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley you are way ahead of me. core and sdk build from linux cross freebsd. run fine from the limited testing ive done. neither runtime nor sdk crossbuilts are able to build on freebsd themselves (linux and freebsd are using llvm9 and clang9).\r\n`ld: error: /root/runtime/artifacts/obj/coreclr/FreeBSD.x64.Release/src/dlls/dbgshim/dbgshim.exports:1: unknown directive: V1.0`\r\nill poke at it a bit more if I have more time this weekend and also see if I can atleast get aspnetcore built on linux for freebsd",
          "createdAt": "2020-12-06T05:29:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T05:29:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQ1NzgyMw=="
        },
        {
          "author": "Thefrank",
          "body": "I really need to stop making posts when half asleep.\r\nBuilding of the runtime and sdk completes on linux. \r\nThose binaries run on freebsd (dotnet --info, new console, and run)\r\nThose binaries are unable to create a runtime or sdk from source on freebsd",
          "createdAt": "2020-12-06T18:30:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2020-12-06T18:32:44Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-06T18:32:46Z",
                "user": "am11"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBZCqHA=="
          },
          "updatedAt": "2020-12-06T18:30:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU0MzI2Mg=="
        },
        {
          "author": "emaste",
          "body": "> does this patch make any difference\r\n\r\nI would expect FreeBSD to follow Linux as far as symbol version scripts go, not Darwin. IMO it's more likely that the issue is that there's something GNU-awk specific in generateversionscript.awk",
          "createdAt": "2020-12-06T19:36:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T19:36:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU1MTc3MQ=="
        },
        {
          "author": "Thefrank",
          "body": "patch changed the error:\r\n`ld: error: /root/runtime/artifacts/obj/coreclr/FreeBSD.x64.Release/src/dlls/dbgshim/dbgshim.exports:1: unknown directive: _CreateProcessForLaunch`\r\nif awk version issue:\r\n```\r\nawk --version\r\nawk version 20121220 (FreeBSD)\r\n```",
          "createdAt": "2020-12-06T19:44:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T19:44:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU1MjkzNg=="
        },
        {
          "author": "emaste",
          "body": "If it is easy to experiment, can you try installing the gawk package and change the invocation in the CMake files to gawk?\r\n\r\n",
          "createdAt": "2020-12-06T19:55:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T19:55:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU1NDMzOA=="
        },
        {
          "author": "Thefrank",
          "body": "reverted the patch. installed gawk pkg. \r\ntoo lazy to figure out how the build.sh script passes cmake args as it doesnt immediately make sense so I just symlinked gawk->awk.\r\nsame original error\r\n`ld: error: /root/runtime/artifacts/obj/coreclr/FreeBSD.x64.Release/src/dlls/dbgshim/dbgshim.exports:1: unknown directive: V1.0`\r\n\r\nlate edit: it looks like the binaries on linux did not build correctly:\r\n```\r\n# ./dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.101-servicing.20605.0\r\n Commit:    c3a779b104\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         osx-x64\r\n Base Path:   /root/runtime/.dotnet/sdk/5.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.1\r\n  Commit:  2ee13ec8e5\r\n\r\n.NET SDKs installed:\r\n  5.0.100 [/root/runtime/.dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.NETCore.App 5.0.1 [/root/runtime/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\nmainly the  `RID:         osx-x64` might be causing some issues",
          "createdAt": "2020-12-06T20:39:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T21:05:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU2MDI5OA=="
        },
        {
          "author": "jasonpugsley",
          "body": "@Thefrank regarding the ld error, try this:\r\n\r\n```diff\r\ndiff --git a/eng/native/configurecompiler.cmake b/eng/native/configurecompiler.cmake\r\nindex 006a180fa0a..2a270572532 100644\r\n--- a/eng/native/configurecompiler.cmake\r\n+++ b/eng/native/configurecompiler.cmake\r\n@@ -594,7 +594,7 @@ else (CLR_CMAKE_HOST_WIN32)\r\n         ERROR_QUIET\r\n         OUTPUT_VARIABLE ldVersionOutput)\r\n \r\n-    if(\"${ldVersionOutput}\" MATCHES \"GNU ld\" OR \"${ldVersionOutput}\" MATCHES \"GNU gold\")\r\n+    if(\"${ldVersionOutput}\" MATCHES \"GNU ld\" OR \"${ldVersionOutput}\" MATCHES \"GNU gold\" OR \"${ldVersionOutput}\" MATCHES \"LLD\")\r\n         set(LD_GNU 1)\r\n     elseif(\"${ldVersionOutput}\" MATCHES \"Solaris Link\")\r\n         set(LD_SOLARIS 1)\r\n```\r\nThat will activate the `else` clause in `eng/native/functions.cmake` here:\r\n```cmake\r\nfunction(set_exports_linker_option exports_filename)\r\n    if(LD_GNU OR LD_SOLARIS)\r\n        # Add linker exports file option\r\n        if(LD_SOLARIS)\r\n            set(EXPORTS_LINKER_OPTION -Wl,-M,${exports_filename} PARENT_SCOPE)\r\n        else()\r\n            set(EXPORTS_LINKER_OPTION -Wl,--version-script=${exports_filename} PARENT_SCOPE)\r\n        endif()\r\n    elseif(LD_OSX)\r\n        # Add linker exports file option\r\n        set(EXPORTS_LINKER_OPTION -Wl,-exported_symbols_list,${exports_filename} PARENT_SCOPE)\r\n    endif()\r\nendfunction()\r\n```\r\nTo be quite honest, I'm no linker expert so while this works, I didn't look deeper to see what was actually required/canonical for clang on FreeBSD.",
          "createdAt": "2020-12-06T22:17:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-07T02:48:31Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-17T07:20:43Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBaRLgg=="
          },
          "updatedAt": "2020-12-06T22:17:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU3MzkwNw=="
        },
        {
          "author": "emaste",
          "body": "Ahh, the linker user-agent issue strikes again. LLD's version string includes `(compatible with GNU linkers)` in an attempt to go down the GNU ld path of configure tests but clearly not clever enough for this case :)\r\n\r\nMatching on LLD looks good here even if the `LD_GNU` flag is now somewhat misnamed.\r\n\r\n",
          "createdAt": "2020-12-06T23:26:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T23:26:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU4MzgxNg=="
        },
        {
          "author": "jasonpugsley",
          "body": "Yes it needs more work. The flag name is now confusing. Please don’t anyone try to commit this as-is.\n\n________________________________\nFrom: Ed Maste <notifications@github.com>\nSent: Monday, December 7, 2020 10:26:48 AM\nTo: dotnet/runtime <runtime@noreply.github.com>\nCc: Jason Pugsley <jason.pugsley@gmail.com>; Mention <mention@noreply.github.com>\nSubject: Re: [dotnet/runtime] Support for FreeBSD (#14537)\n\n\nAhh, the linker user-agent issue strikes again. LLD's version string includes (compatible with GNU linkers) in an attempt to go down the GNU ld path of configure tests but clearly not clever enough for this case :)\n\nMatching on LLD looks good here even if the LD_GNU flag is now somewhat misnamed.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/dotnet/runtime/issues/14537#issuecomment-739583816>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AECFDEXKTDFRAX4ZEE6VXZTSTQHLRANCNFSM4TS3XPPA>.\n",
          "createdAt": "2020-12-06T23:31:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-06T23:31:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU4NDYxNQ=="
        },
        {
          "author": "Thefrank",
          "body": "I opted to use https://github.com/dotnet/runtime/pull/45664\r\nClr builds up to Clr.Tools subset then fails with\r\n```\r\n/root/runtime/.dotnet/sdk/5.0.100/Microsoft.Common.CurrentVersion.targets(4818,5): error MSB3030: Could not copy the file \"/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/libjitinterface\" because it was not found. [/root/runtime/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj]\r\n/root/runtime/.dotnet/sdk/5.0.100/Microsoft.Common.CurrentVersion.targets(4818,5): error MSB3030: Could not copy the file \"/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/libclrjit\" because it was not found. [/root/runtime/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj]\r\n```\r\n\r\nsubset \"mono\" and subset \"libs\" complete with no errors",
          "createdAt": "2020-12-07T03:04:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-07T03:04:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTYzNDU2OQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "@Thefrank  It's the second part of this diff you need to fix that issue:\r\n```diff\r\ndiff --git a/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj b/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj\r\nindex 2de5f568214..87242a728f0 100644\r\n--- a/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj\r\n+++ b/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj\r\n@@ -12,7 +12,7 @@\r\n     <OutputPath>$(BinDir)/crossgen2</OutputPath>\r\n     <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>\r\n     <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>\r\n-    <RuntimeIdentifiers>linux-x64;linux-musl-x64;win-x64</RuntimeIdentifiers>\r\n+    <RuntimeIdentifiers>linux-x64;linux-musl-x64;win-x64;freebsd-x64</RuntimeIdentifiers>\r\n     <Configurations>Debug;Release;Checked</Configurations>\r\n   </PropertyGroup>\r\n \r\n@@ -53,6 +53,7 @@\r\n     <LibraryNameExtension Condition=\"$([MSBuild]::IsOsPlatform('WINDOWS'))\">.dll</LibraryNameExtension>\r\n     <LibraryNameExtension Condition=\"$([MSBuild]::IsOsPlatform('LINUX'))\">.so</LibraryNameExtension>\r\n     <LibraryNameExtension Condition=\"$([MSBuild]::IsOsPlatform('OSX'))\">.dylib</LibraryNameExtension>\r\n+    <LibraryNameExtension Condition=\"$([MSBuild]::IsOsPlatform('FREEBSD'))\">.so</LibraryNameExtension>\r\n \r\n     <JitInterfaceLibraryName>$(LibraryNamePrefix)jitinterface$(LibraryNameExtension)</JitInterfaceLibraryName>\r\n   </PropertyGroup>\r\n```\r\nIt might be better added to the LINUX line as an OR in the condition.",
          "createdAt": "2020-12-07T06:49:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-07T18:58:36Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-17T07:20:09Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBaRLUA=="
          },
          "updatedAt": "2020-12-07T06:49:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTcwOTMxNw=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley that did the trick!\r\n`/root/runtime/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj : error NU1101: Unable to find package Microsoft.AspNetCore.App.Runtime.freebsd-x64. No packages exist with this id in source(s):`\r\nI knew I forgot to do something a few days ago! This should be interesting\r\n\r\nedit: without crossgen (aka just second half)\r\n\r\n`./build.sh -c Release -bl:buildlog.binlog`\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:12:05.56\r\n```\r\n\r\nedit last edit on this post I swear:\r\nI know tests can take a while and it does say long running test but this getting out of hand for one test\r\n`System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerResponseTests.AddLongHeader_DoesNotThrow', Elapsed: 00:36:20`",
          "createdAt": "2020-12-07T19:00:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-07T21:57:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDExNTI4Mg=="
        },
        {
          "author": "Thefrank",
          "body": "killed the test after waiting 2hr other tests still had failures\r\n```\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'Microsoft.Extensions.Hosting.Unit.Tests'. Please check /root/runtime/artifacts/bin/Microsoft.Extensions.Hosting.Unit.Tests/net5.0-Release/testResults.xml for details! [/root/runtime/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Microsoft.Extensions.Hosting.Unit.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.NameResolution.Functional.Tests'. Please check /root/runtime/artifacts/bin/System.Net.NameResolution.Functional.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Net.NameResolution/tests/FunctionalTests/System.Net.NameResolution.Functional.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.NetworkInformation.Functional.Tests'. Please check /root/runtime/artifacts/bin/System.Net.NetworkInformation.Functional.Tests/net5.0-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Net.NetworkInformation/tests/FunctionalTests/System.Net.NetworkInformation.Functional.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'Microsoft.VisualBasic.Core.Tests'. Please check /root/runtime/artifacts/bin/Microsoft.VisualBasic.Core.Tests/net5.0-Release/testResults.xml for details! [/root/runtime/src/libraries/Microsoft.VisualBasic.Core/tests/Microsoft.VisualBasic.Core.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Console.Tests'. Please check /root/runtime/artifacts/bin/System.Console.Tests/net5.0-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Console/tests/System.Console.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Runtime.Extensions.Tests'. Please check /root/runtime/artifacts/bin/System.Runtime.Extensions.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Runtime.Extensions/tests/System.Runtime.Extensions.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.Sockets.Tests'. Please check /root/runtime/artifacts/bin/System.Net.Sockets.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Net.Sockets/tests/FunctionalTests/System.Net.Sockets.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.IO.FileSystem.Tests'. Please check /root/runtime/artifacts/bin/System.IO.FileSystem.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.IO.FileSystem/tests/System.IO.FileSystem.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.Ping.Functional.Tests'. Please check /root/runtime/artifacts/bin/System.Net.Ping.Functional.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Net.Ping/tests/FunctionalTests/System.Net.Ping.Functional.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.Requests.Tests'. [/root/runtime/src/libraries/System.Net.Requests/tests/System.Net.Requests.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.WebSockets.Client.Tests'. [/root/runtime/src/libraries/System.Net.WebSockets.Client/tests/System.Net.WebSockets.Client.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Security.Cryptography.X509Certificates.Tests'. Please check /root/runtime/artifacts/bin/System.Security.Cryptography.X509Certificates.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Security.Cryptography.X509Certificates/tests/System.Security.Cryptography.X509Certificates.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.WebClient.Tests'. [/root/runtime/src/libraries/System.Net.WebClient/tests/System.Net.WebClient.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.Security.Tests'. Please check /root/runtime/artifacts/bin/System.Net.Security.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Net.Security/tests/FunctionalTests/System.Net.Security.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Diagnostics.Process.Tests'. Please check /root/runtime/artifacts/bin/System.Diagnostics.Process.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Diagnostics.Process/tests/System.Diagnostics.Process.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Security.Cryptography.Xml.Tests'. [/root/runtime/src/libraries/System.Security.Cryptography.Xml/tests/System.Security.Cryptography.Xml.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Runtime.Tests'. Please check /root/runtime/artifacts/bin/System.Runtime.Tests/net5.0-Unix-Release/testResults.xml for details! [/root/runtime/src/libraries/System.Runtime/tests/System.Runtime.Tests.csproj]\r\n/root/runtime/eng/testing/tests.targets(117,5): error : One or more tests failed while running tests from 'System.Net.HttpListener.Tests'. [/root/runtime/src/libraries/System.Net.HttpListener/tests/System.Net.HttpListener.Tests.csproj]\r\n    0 Warning(s)\r\n    18 Error(s)\r\n\r\nTime Elapsed 02:11:29.07\r\nBuild failed (exit code '1').\r\n```",
          "createdAt": "2020-12-07T23:39:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-07T23:39:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDI0ODMwMQ=="
        },
        {
          "author": "Thefrank",
          "body": "of course it happens now. I need A to build A. Great use of product, terrible use of my sanity\r\n`/root/aspnetcore/src/Tools/dotnet-watch/src/dotnet-watch.csproj : error NU1101: Unable to find package Microsoft.AspNetCore.App.Runtime.freebsd-x64. No packages exist with this id in source(s): darc-pub-dotnet-efcore-494e218, darc-pub-dotnet-runtime-b02e13a, dotnet-eng, dotnet-tools, dotnet31-transport, dotnet5, dotnet5-transport, localstore, nuget.org [/root/aspnetcore/.dotnet/sdk/5.0.100/NuGet.targets]`",
          "createdAt": "2020-12-08T03:13:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-08T03:13:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDM0NTg3Nw=="
        },
        {
          "author": "jasonpugsley",
          "body": "Yes, when I built AspNetCore for 5.0 it had a reference to 3.1.9 so I had to go and build that one too. I ended up building the full 3.1.109 SDK and then I remembered I had a copy of microsoft/azure-pipelines-agent that I'd played with before - it uses netcoreapp3.1 - so I brought it up to date to see if I could get it working.\r\n\r\nWith the FreeBSD agent running locally, I configured the agent and a pipeline at https://dev.azure.com  After a few false starts I got a job to run through to completion - it was able to pull down my test repo at https://github.com/jasonpugsley/freebsd-pipeline-sample and build it. In my project's case, all dependencies were already installed on the agent so the repo and yaml file are very simple. Though simple, it shows with a little more effort we could have working FreeBSD agents for Azure DevOps.\r\n\r\nSo an almost ready .NET SDK, PowerShell, azure-pipelines-agent... We need to get some alpha/beta releases available at some point otherwise we'll struggle to get wider community interest going.\r\n\r\nGetting something reliable into FreeBSD ports might still be a little while off and the repos under dotnet and microsoft aren't the easiest ways to get unofficial builds/packages hosted. Does anyone have any ideas for a somewhat centralised location?\r\n\r\n@RussellHaley what was your intention for   https://github.com/FreeBSD-DotNet\r\n\r\nOther suggestions?",
          "createdAt": "2020-12-08T07:29:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-12-23T01:57:19Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBaxaPQ=="
          },
          "updatedAt": "2020-12-08T08:01:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDQzODEwOQ=="
        },
        {
          "author": "Thefrank",
          "body": "I don't have experience with Azure pipelines so that is something that I will check into when I have some free time later this week/weekend. Hopefully that will make producing some of these more involved items (aspnetcore) easier to produce.",
          "createdAt": "2020-12-09T04:35:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-09T04:35:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTUyMDY5NA=="
        },
        {
          "author": "Thefrank",
          "body": "for the runtime using all of https://github.com/dotnet/runtime/issues/14537#issuecomment-739709317 and a patch to add `-PDBFMT=PORTABLE` to the IlasmFlags everything builds up to Libs.Src where it fails with\r\n```\r\nSegmentation fault\r\n/root/.nuget/packages/microsoft.net.sdk.il/5.0.0-preview.8.20359.4/targets/Microsoft.NET.Sdk.IL.targets(138,5): error MSB3073: The command \"/root/.nuget/packages/runtime.freebsd-x64.microsoft.netcore.ilasm/5.0.1/runtimes/freebsd-x64/native/ilasm -QUIET -NOLOGO -OPTIMIZE -DLL  -DEBUG=OPT -PDBFMT=PORTABLE -INCLUDE=/root/runtime/artifacts/obj/System.Runtime.CompilerServices.Unsafe/netstandard2.0-Release/version/ -OUTPUT=\"/root/runtime/artifacts/obj/System.Runtime.CompilerServices.Unsafe/netstandard2.0-Release/System.Runtime.CompilerServices.Unsafe.dll\" -KEY=\"/root/.nuget/packages/microsoft.dotnet.arcade.sdk/5.0.0-beta.20560.3/tools/snk/MSFT.snk\" System.Runtime.CompilerServices.Unsafe.il\" exited with code 139. [/root/runtime/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj]\r\n```",
          "createdAt": "2020-12-10T03:15:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-10T03:15:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjIwOTEzNg=="
        },
        {
          "author": "jasonpugsley",
          "body": "I haven't looked at 5.0.1 yet but I did have to add this in 5.0.0:\r\n```diff\r\ndiff --git a/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj b/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj\r\nindex 07e9ef8eac8..69f6b4938b2 100644\r\n--- a/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj\r\n+++ b/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj\r\n@@ -9,7 +9,7 @@\r\n     <DocumentationFile>$(MSBuildThisFileDirectory)System.Runtime.CompilerServices.Unsafe.xml</DocumentationFile>\r\n     <ProjectGuid>{04BA3E3C-6979-4792-B19E-C797AD607F42}</ProjectGuid>\r\n     <ExtraMacros Condition=\"'$(TargetFramework)' == '$(NetCoreAppCurrent)' or '$(TargetFramework)' == 'netcoreapp2.0'\">#define netcoreapp</ExtraMacros>\r\n-    <IlasmFlags>$(IlasmFlags) -DEBUG=$(DebugOptimization)</IlasmFlags>\r\n+    <IlasmFlags>$(IlasmFlags)</IlasmFlags>\r\n     <TargetFrameworks>$(NetCoreAppCurrent);netstandard2.0;netcoreapp2.0;netstandard1.0;net45</TargetFrameworks>\r\n     <ExcludeCurrentNetCoreAppFromPackage>true</ExcludeCurrentNetCoreAppFromPackage>\r\n     <CoreAssembly>System.Runtime</CoreAssembly>\r\n@@ -83,4 +83,4 @@ $(ExtraMacros)\r\n       <ILResourceReference Include=\"@(ResolvedMatchingContract)\" />\r\n     </ItemGroup>\r\n   </Target>\r\n-</Project>\r\n\\ No newline at end of file\r\n+</Project>\r\n```\r\nFrom memory, some defaults were changed where flags that were previously ignored are now being taken into account but don't work.",
          "createdAt": "2020-12-10T03:45:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-10T03:45:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjIxOTQxNw=="
        },
        {
          "author": "Thefrank",
          "body": "5.0.1 runtime builds with that (and the linker patch+crossgen2 patch). I think the only consequence of removing the -DEBUG is that it wont generate a pdb which for Release is not really needed (I guess? I think OPTIMIZE still covers that part from DEBUG=OPT but im pretty unfamiliar with it)",
          "createdAt": "2020-12-10T06:10:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-10T06:10:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjI2NTE0OQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "It might be fixed in a different branch but I haven't looked yet. I thought not having debug symbols was something I could live with in order to get it to build. I'll look into it when I have some time (which is always the biggest blocker for me)",
          "createdAt": "2020-12-10T07:34:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-10T07:34:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjMxMTcyMQ=="
        },
        {
          "author": "Thefrank",
          "body": "finally got around to running some of these tests.\r\nruntime tests hang on (innerloop? test) `System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerResponseTests.AddLongHeader_DoesNotThrow'`\r\nsdk has no hangs! `Tests run: 996 — Failures: 187, Skipped: 37, Run time: 2212.671s, Finished: 12/10/2020 22:18:59`\r\nthe bulk of the failures here appear to a) not having a template installed that it needs or b) not having `Microsoft.NETCore.App.Host.freebsd-x64 with version (= 3.1.9)` which somehow was not required for building the sdk but needed for the tests * shrug*\r\nslow progress is still progress!",
          "createdAt": "2020-12-11T23:36:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-12T10:05:11Z",
                "user": "josteink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-15T20:57:35Z",
                "user": "techiedesu"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-17T07:17:40Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBaRKmA=="
          },
          "updatedAt": "2020-12-11T23:36:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzQ4MjA3NA=="
        },
        {
          "author": "Thefrank",
          "body": "Went back and built the full 3.1.11 SDK to feed into the requirements for ASPNetCore 5.0.x.\r\nEverything works in the 3.1.11 leg! ASPNetCore 5.0.x still refuses to build\r\n\r\n`/root/aspnetcore/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1604: Project dependency Microsoft.NETCore.App.Runtime.freebsd-x64 does not contain an inclusive lower bound. Include a lower bound in the dependency version to ensure consistent restore results. [/root/aspnetcore/.dotnet/sdk/5.0.101/NuGet.targets]`\r\n\r\nThis error does not make sense given what I could find on NU1604. The only thing that I can think of is some file/version inconsistency occurred somewhere when building everything else for this.",
          "createdAt": "2020-12-14T01:06:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-14T01:06:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDEwNzU1OQ=="
        },
        {
          "author": "Thefrank",
          "body": "**TL;DR: If this spoils the oat milk in your refrigerator or lets the chickens out of your coop at night don't blame me**\r\n\r\nOk here is the [dotnet sdk for 3.1.11 and 5.0.0 release builds](https://mega.nz/folder/tIpEFSSB#IHx1OjAREnt_Y56PlsKs-g) \r\n\r\nThese will likely be buggy and slow. You must be really desperate or brave to be using these\r\n\r\n\r\n\r\nDisclaimers:\r\n\r\n- **Not for production use** only tested and built under: freebsd 12.2 jail. (dotnet --info, new console, and run project)\r\n- crossgen for some items are not supported\r\n- no debug symbols under runtime5 due some changes made on how flags are handled\r\n- under aspnetcore5 some nodejs items tossed warnings about larger-than-acceptable file sizes\r\n- sdk5 does not package templates for nuget for some reason that is beyond my understanding\r\n- there are still failing tests that appear mostly due to the above running environment (e.g., no ipv6) others due to me not being smart enough to figure out why they are failing\r\n\r\nenjoy! (?)\r\n\r\nedit: **AND MOST IMPORTANTLY:** I would like to thank all of the people that have worked on this project and provided aid! I also just noticed that this issue is over 5 years old...",
          "createdAt": "2020-12-16T21:11:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-12-16T21:13:47Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-16T21:30:07Z",
                "user": "elfalem"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-16T22:12:24Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-16T23:37:29Z",
                "user": "Artiume"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-17T07:17:05Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-17T07:17:11Z",
                "user": "lukeb1961"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-17T08:59:51Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-17T16:16:26Z",
                "user": "swills"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-17T16:16:27Z",
                "user": "swills"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHOBaVMBg=="
          },
          "updatedAt": "2020-12-16T21:46:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzAyNTA0NA=="
        },
        {
          "author": "josteink",
          "body": "@Thefrank As one of the guys who put in a lot of the initial work getting this port started before new family-duties took away my ability to contribute further, I must say I'm positively thrilled beyond what I words can express to see this effort finally getting this close to the finishing line. Thanks you for this!\n\nI also realize this has been a team effort with key people contributing everywhere (in ports, upstream libraries, etc), so thanks to everyone for the effort so far. \n\nThe year of desktop Linux may be a tired joke, but maybe 2021 can be the year of (official) .NET on BSD 🙂\n\n",
          "createdAt": "2020-12-16T21:19:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-12-16T21:33:27Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-17T01:13:56Z",
                "user": "techiedesu"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-12-17T01:14:18Z",
                "user": "techiedesu"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-17T07:16:39Z",
                "user": "lukeb1961"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-12-17T07:21:56Z",
                "user": "lukeb1961"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-12-17T08:43:40Z",
                "user": "bqstony"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-17T09:00:59Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-18T21:29:16Z",
                "user": "onny"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-12-18T21:29:18Z",
                "user": "onny"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-21T17:21:03Z",
                "user": "zbtnot"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOBaoERQ=="
          },
          "updatedAt": "2020-12-16T21:20:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzAzODYwOA=="
        },
        {
          "author": "Thefrank",
          "body": "[dotnet5 runtime](https://github.com/Thefrank/runtime/releases/tag/release/5.0.2) builds with no problems via github actions...and me actually making yml file for it without typos. these are built under Linux and cross built\r\n\r\nI don't think it would be possible at this time for the sdk or aspnetcore to be built in such manner as:\r\n\r\n- those products needs the output from other things and I don't think artifacts from one repo can be used in another\r\n- both sdk and aspnetcore currently require some files to be modifier to make them accept freebsd as a viable build target os\r\n- afaik there are no freebsd images that github provides for a non-cross build",
          "createdAt": "2020-12-18T20:38:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-18T20:38:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODMwNzI4OA=="
        },
        {
          "author": "arrowd",
          "body": "I'm a FreeBSD Ports committer and will happily provide any support wrt. ports. Feel free to CC me when creating a review request on our Phab instance.",
          "createdAt": "2020-12-19T09:37:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-12-19T09:40:52Z",
                "user": "driesmp"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-19T19:22:19Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-20T19:04:48Z",
                "user": "bqstony"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-20T20:14:49Z",
                "user": "onny"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-21T01:05:07Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2020-12-21T17:21:09Z",
                "user": "zbtnot"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOBaoETQ=="
          },
          "updatedAt": "2020-12-19T09:37:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODQ0OTE4MQ=="
        },
        {
          "author": "Thefrank",
          "body": "random useless update. figured out the NU1604 issue when trying to build under linux. it was `--os-name freebsd` that was causing the error to happen. no clue WHY it causes it to happen but that is what was causing it",
          "createdAt": "2020-12-21T05:44:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-23T03:41:21Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBaxxcA=="
          },
          "updatedAt": "2020-12-21T05:44:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODc3MjI0MQ=="
        },
        {
          "author": "Thefrank",
          "body": "added a few things to the same mega link above produced with same sdks:\r\n\r\n`azure-pipelines-agent_freebsd_patch.patch` changes I made to get it to compile under FreeBSD. **_NO IDEA IF THIS WORKS_** because im cheap and azure costs monies... also I dont think it can run on just some random self-hosted bsd jail... and \"just because it compiles doesn't mean it works\"\r\n\r\n`vsts-agent-freebsd-x64-2.179.0.tar.gz` compiled version **_Untested_** because Azure costs the monies and im too cheap for that but this the latest agent afaik\r\n\r\n`Ombiv4.FreeBSD-x64.TEST.tar.gz` Story time! Ombi stopped working on FreeBSD around 2-3 years ago due to software targeting changes, .NET changes and said changes not supporting FreeBSD. Around April I finally got annoyed about FreeBSD host -> Linux VM -> Docker -> Ombi that I ripped it out and looked into what would be required to get Ombi working on FreeBSD again. Here we are. I am currently testing this but it seems stable thus far",
          "createdAt": "2020-12-24T01:20:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-24T02:14:36Z",
                "user": "COF-RNorman"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-24T02:54:28Z",
                "user": "jasonpugsley"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-12-24T02:54:37Z",
                "user": "jasonpugsley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-25T06:18:01Z",
                "user": "MikaelUrankar"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBa7NsQ=="
          },
          "updatedAt": "2020-12-24T01:20:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDY5NDIyMQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "@Thefrank it's good to see you are looking at the azure pipelines agent. Getting some knowledge there will be valuable because it looks like the GitHub actions agent is similar: https://github.com/actions/runner\r\n\r\nI'm also looking into jails to see whether that might be a best practice for FreeBSD when running these agents.\r\n\r\nJust FYI the latest agent version that the server wants to attach to is 2.177.1",
          "createdAt": "2020-12-24T03:17:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-24T03:17:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDcyMDQyOA=="
        },
        {
          "author": "jasonpugsley",
          "body": "Regarding the main purpose of this thread (and by association https://github.com/dotnet/installer/issues/248). I can now build cleanly on FreeBSD a complete .net5 SDK. These are the 3 required repos:\r\ndotnet/runtime\r\ndotnet/aspnetcore\r\ndotnet/installer\r\nI currently have a single code change that is needed in runtime but the remaining changes are just to various config files to enable FreeBSD or choose the correct dependent ancestor versions to build with.\r\n\r\nI'm not saying this is production ready - there are additional tests that need to be fixed and a whole lot of testing - but there is no reason why we can't start working towards automated unofficial builds.\r\n\r\nCan we please get an official statement from the .NET team on whether reenabling daily builds for FreeBSD is likely to happen? (again - I'm not talking about supported official releases - only https://github.com/dotnet/core/blob/master/daily-builds.md) I'm not sure what the alternative would be. Setting up a parallel build system would involve a lot of work.\r\n",
          "createdAt": "2020-12-24T04:02:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-24T06:30:15Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-24T11:38:59Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-25T06:47:24Z",
                "user": "backerman"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-26T07:40:24Z",
                "user": "bqstony"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-29T08:14:43Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOBbEblQ=="
          },
          "updatedAt": "2020-12-24T04:02:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDcyOTcxOA=="
        },
        {
          "author": "Thefrank",
          "body": "> dotnet/installer\r\n\r\nthis...does sdk...much easier than dotnet/sdk and me trying to manually bundle everything\r\n\r\nedit: needs `/p:IncludeAspNetCoreRuntime=true` otherwise it no aspnetcore\r\n\r\nedit: added `jellyfin-web_10.7.0~rc1_freebsd-x64.tar.gz` and `jellyfin-server_10.7.0~rc1_freebsd_x64.tar.gz` to the mega link. This looks like another product that dropped freebsd support because of dotnet dropping freebsd. ok done putting random junk that doesnt apply to getting dotnet freebsd support into this issue i swear!\r\n",
          "createdAt": "2020-12-24T06:09:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-24T07:42:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDc2MTE1Mw=="
        },
        {
          "author": "jasonpugsley",
          "body": "> dotnet/sdk\r\n\r\nThere could be a small piece of work to do in this repo in Build.Tasks to fully enable crossgen and PublishSingleFile but they're by no means required at this point.",
          "createdAt": "2020-12-24T13:46:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-24T13:46:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDg4Nzc1MQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "I guess this is mostly to @Thefrank, I finally cleaned up my changes for azure-pipelines-agent and you might want to take a look https://github.com/jasonpugsley/azure-pipelines-agent/commit/6f6371aeeb41c9dad5a7a390263f9ef8e473457e\r\nIt's really just enough to get things started. All of the existing tests are passing.\r\nFuture work includes FreeBSD documentation and writing installation/service scripts.\r\nThe branch was created from tag v2.179.0. I expect after upstream v2.179.1 is released I'll pull in any changes and then publish a release - hopefully with some useful documentation 😃 ",
          "createdAt": "2020-12-25T10:40:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-12-25T17:17:31Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-29T08:15:27Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBbEbxA=="
          },
          "updatedAt": "2020-12-25T10:40:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTIzMDI1Mg=="
        },
        {
          "author": "Thefrank",
          "body": "nice work @jasonpugsley! my patch was more \"sed and pray\" than actual work hah\r\nI likely wont have time to do much until sunday/monday  but I did signup for that nice 30days of (almost entirely) free azure so hopefully that covers the costs (if any) of me messing around with it.\r\n\r\nedit: ok had time now. self-hosted doesnt cost money whereas microsoft hosted might. Your patch allows for full compile and WORKING execution in my own freebsd jail. \"sed and pray\" didnt work for mine as it didnt include /externals path (node,node10,tee,vso-task-lib). I ended up using 3.1.11 as I didnt have a 3.1.0 sitting around because...um...I am very bad at keeping \"old\" things. Tests using `./src/dev.sh t` and `./src/dev.sh l1` fail with an error `System.IO.FileLoadException: Could not load file or assembly 'System.Text.Json, Version=4.0.1.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. Could not find or load a specific file. (0x80131621)` the version included is 4.700.20.12001 as read by windows. ill look at the test failure later with logging actually on as the problem was likely my tomfoolery with sdk requirement. \r\n\r\nI do have this horribly cropped side-by screenshot of the self hosted agent completing an azure pipelines job! This is something that exactly 0 people would realistically use but it still looks neat\r\n![azpfreebsdselfhosted](https://user-images.githubusercontent.com/1910378/103145862-ad199980-46f5-11eb-898b-1b9c45481757.png)\r\n\r\nInstallation of the pipelines agent is literally `tar xf agentfilething.x.x.x.x.tar.gz` when you using add self-hosted agent in azure devops.\r\nA service script should be pretty easy to setup but it would need some testing to see how well freebsd's daemon does with it. The resultant cmd would be something like `/usr/sbin/daemon -r -f -p ${pidfile_child} -P ${pidfile} whateverthebinaryisnamed` this also assumes the `run.sh` that it uses doesn't do anything complex that is required for a successful launch if it does then the bashisms will have to be removed because afaik rc.d can only sh despite whatever shebang you put in\r\n",
          "createdAt": "2020-12-25T17:28:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-12-26T10:20:26Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-26T16:00:58Z",
                "user": "onny"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-29T08:16:24Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBbEb7Q=="
          },
          "updatedAt": "2020-12-26T05:30:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTI3NDI5OQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "AFAIK any netcoreapp3.1 runtime should include System.Text.Json, I'm not sure why you're getting an error requiring version 4.0.1.2\r\nIf runtime 3.1.11 includes 4.700.20.12001 then that should be just fine.\r\nI'm using runtime 3.1.9. with System.Text.Json version 4.700.19.56404",
          "createdAt": "2020-12-26T08:13:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-26T13:00:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTMzMzk4OA=="
        },
        {
          "author": "Thefrank",
          "body": "Updated mega link with:\r\n\r\n5.0.102 sdk (aka 5.0.1) this includes runtime and aspnetcore both at 5.0.1. runtime still missing symbols due to changes that started in 5.x but are being worked on in main branch. aspnetcore has been an adventure. still getting NU1604 and don't know why but a workaround for it seems to make up for it.\r\n\r\nazure-pipelines-agent with the patches from the amazing @jasonpugsley. I included the patch for it (https://github.com/jasonpugsley/azure-pipelines-agent/commit/6f6371aeeb41c9dad5a7a390263f9ef8e473457e). Still having issues with tests failing due to complaining about specific version System.Text.Json\r\n\r\nmore things to work on when I get some time...and learning how to setup automated builds if possible...as it mostly depends on no NU1604 error on aspnetcore as runtime, sdk, and installer all build fine",
          "createdAt": "2020-12-29T20:16:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-01-02T09:17:18Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBbP0Hw=="
          },
          "updatedAt": "2020-12-29T20:16:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjIyNzU1NQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "I know this is the wrong thread but hopefully the right audience. I've created a release of PowerShell 7.1.0 for FreeBSD built with .NET5 SDK 5.0.101. It may interest some people here.\r\nhttps://github.com/jasonpugsley/PowerShell/releases/tag/v7.1.0.freebsd\r\n",
          "createdAt": "2021-01-02T05:18:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-02T06:28:06Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-02T09:16:55Z",
                "user": "josteink"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-02T14:43:52Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-04T03:07:15Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-04T03:08:16Z",
                "user": "lukeb1961"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-01-04T21:43:04Z",
                "user": "petervandivier"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOBbZaug=="
          },
          "updatedAt": "2021-01-02T05:18:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQzMzU2Nw=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley \r\nTL;DR: Everything looks great so far with no issues other than the one I inflicted on myself. For documentation I suggest adding a note regarding FreeBSD 12 jails requiring `allow_mlock=1` for powershell to work. Finally, running pwsh as login is likely fine (but still discouraged for root) for jails but not for host (afaik `/usr/local/share` is not mounted in single user)\r\nEDIT: you need the pkg `ca_root_nss` or even simple things like `Update-Help` will fail\r\n\r\nLong version:\r\nlooks like you only need `icu libinotify libunwind` for powershell to start. `krb5 openssl` are likely if you want any networking. `lttng-ust` for something? I know dotnet needs it, might as well install it hah\r\nalso under freebsd 12.2-release jail: `Failed to create CoreCLR, HRESULT: 0x8007FF02`\r\noh yeah I forgot the `allow_mlock=1` when making the jail... after fixing that...\r\n```\r\nroot@powershell:~ # /usr/local/share/powershell/pwsh\r\nPowerShell 7.1.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /root>\r\n```\r\nNICE!\r\n\r\nI should have some free time this weekend to play with it a bit more\r\n\r\n> terminfo vs termcap\r\n\r\nhow much of a deep well do you want to go down to find out why one is used over the other? its filled with politics and history and 100% not worth anyone's time!",
          "createdAt": "2021-01-02T06:53:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-02T07:08:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQ0MDYzMA=="
        },
        {
          "author": "jasonpugsley",
          "body": "Thanks for trying it out and giving me some tips!\r\n\r\n> terminfo vs termcap\r\n\r\nThat's where we get back on topic. It's in this very repo https://github.com/dotnet/runtime/blob/master/src/libraries/System.Console/src/System/TermInfo.cs\r\n\r\nI don't know about the politics but there's only terminfo support at this time.",
          "createdAt": "2021-01-02T07:48:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-02T07:48:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQ0NDQxNg=="
        },
        {
          "author": "Thefrank",
          "body": "oh! erm, the politics was more on the AT&T vs BSD side during the System V(?) era and is why termcap is used instead of terminfo. there was likely no politics involved in picking the clearly more widely used terminfo.\r\n\r\nterminfo is newer (1981?) and \"improved\" version of termcap (1978?). BSD-ish systems still use termcap over terminfo afaik but support both and for the purpose of staying on freebsd: https://www.freebsd.org/cgi/man.cgi?query=terminfo and there is always `tic(1)` and `tctest(1)` if you really want to drill down on term stuff",
          "createdAt": "2021-01-02T21:20:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-02T21:20:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzUzMTE2Nw=="
        },
        {
          "author": "janvorli",
          "body": "> `lttng-ust` for something?\r\n\r\nIt is used for event logging and it should be optional IIRC.",
          "createdAt": "2021-01-04T09:41:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-04T09:41:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mzg3MDI1Mw=="
        },
        {
          "author": "jasonpugsley",
          "body": "A little more on terminfo, there is an existing thread https://github.com/dotnet/runtime/issues/23653 discussing the possibility of adding termcap support to the runtime but I think it might be easier to provide user instructions to generate a terminfo database in directory tree layout, that's what I ended up doing, though that might be a bit advanced for part of the audience?\r\n\r\nI don't know how licensing works with the terminfo data but another option could be to provide a \"binary\" pkg of the terminfo tree that installs to /usr/share/terminfo  Eventually, it could be made an install dependency of the Runtime/SDK when it gets delivered in FreeBSD pkg format.\r\n\r\nEdit: Found this so adding here for reference, https://invisible-island.net/ncurses/ncurses.faq.html#terminfo_copying\r\n\r\nNow that I think about it, it shouldn't be a dependency. Not everything is a console app.\r\n\r\nOh, there's already a copy in the FreeBSD source https://github.com/freebsd/freebsd-src/blob/main/contrib/ncurses/misc/terminfo.src",
          "createdAt": "2021-01-05T04:59:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-05T06:41:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDM5NzA5OA=="
        },
        {
          "author": "Thefrank",
          "body": "I know there is an ncurses pkg in FreeBSD but I think it was built \"--with-hashed-db\" and asking people to both build from ports (and edit the makefile) and mix and match ports and pkgs is a big, dangerous ask. im running the runtime tests now (except the HTTPListener which hangs or is missing something) to see if anything fails due to terminfo missing. if somehow nothing fails (or is skipped because of missing terminfo) then I guess distribution of terminfo db with something like powershell should(?) be ok but all of the licensing stuff is way over my head.\r\n\r\nwhile all of these tests run I also need to figure out how to copy 235 \"testResults.html\" from 235 different places into one place and renamed meaningfully but that is a question for google and stackexchange \r\n\r\nedit:\r\nsolves that\r\n```\r\nTermInfo.VerifyInstalledTermInfosParse\r\nDidn't find any terminfo files\\nExpected: True\\nActual:   False\r\n```\r\neverything else in there passed though e.g.,\r\n `TermInfo.TermInfoVerification(termToTest: \\\"Eterm\\\", expectedForeground: \\\"\\\\x1b[30m\\\", expectedBackground: \\\"\\\\x1b[40m\\\", colorValue: 0)`\r\n\r\nedit 2:\r\n13 tests had one or more failures. 22 tests had parts that were skipped. so ill just list tests with failures:\r\n```\r\nSystem.Runtime.Tests.dll\r\nSystem.Diagnostics.Process.Tests.dll\r\nSystem.Console.Tests.dll\r\nSystem.Net.Ping.Functional.Tests.dll\r\nSystem.Runtime.Extensions.Tests.dll\r\nMicrosoft.Extensions.Logging.Console.Tests.dll\r\nSystem.Net.Security.Tests.dll\r\nSystem.Security.Cryptography.X509Certificates.Tests.dll\r\nSystem.Net.NetworkInformation.Functional.Tests.dll\r\nSystem.IO.FileSystem.Tests.dll\r\nSystem.Net.Sockets.Tests.dll\r\nSystem.Net.NameResolution.Functional.Tests.dll\r\nMicrosoft.VisualBasic.Core.Tests.dll\r\n```\r\n",
          "createdAt": "2021-01-05T20:42:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-05T22:39:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDg4NzI0MA=="
        },
        {
          "author": "emaste",
          "body": "> I think it was built \"--with-hashed-db\"\r\n\r\nComing into this a bit late and I don't have all of the background, but is the runtime consuming the terminfo data directly, and that's why `--with-hashed-db` is unworkable?\r\n\r\nI discussed this a bit on a FreeBSD IRC channel and have these notes:\r\n- we have an up-to-date ncurses in the base system for FreeBSD-CURRENT (what will be FreeBSD 13.0 soon), that's the file in contrib/ncurses/... above\r\n- FreeBSD 12 has an older ncurses\r\n- The ncurses package may be removed in the future (assuming the latest version is included in the base system)\r\n",
          "createdAt": "2021-01-05T21:18:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-05T21:18:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDkwNTE2NA=="
        },
        {
          "author": "Thefrank",
          "body": "@emaste @jasonpugsley  I am still looking over the test results for the other hundredish tests under runtime but from `System.Console.Tests` only 1 of the 18 terminfo tests fail (verifying its installation...see my edit above). This was from a 12.2-RELEASE-p2 jail without ncurses pkg installed. It might be the case that only certain packages outside the dotNET runtime environment (e.g., powershell) need terminfo specifically. \r\n\r\nTo answer the question: it does not appear the tests at least consume terminfo directly",
          "createdAt": "2021-01-05T21:32:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-05T21:32:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDkxMTk0Ng=="
        },
        {
          "author": "jasonpugsley",
          "body": "> is the runtime consuming the terminfo data directly\r\n\r\nI think the answer is yes - the entire file is read for a single terminal definition and its contents parsed in managed code. https://github.com/dotnet/runtime/blob/f473665b470a5e23bb161e465b9b8427cbccb466/src/libraries/System.Console/src/System/TermInfo.cs#L240\r\n\r\nTo use the terminfo.db file you'd need to access the Berkeley DB with P/Invoke to libc for dbm_open() etc. and then navigate the indexes to find the terminal definition required.\r\n\r\nI created a package of the terminfo database tree, just for personal use right now, that makes it easy to install/uninstall. From what I can tell from the previous links there shouldn't be any licensing issue with distributing the data.",
          "createdAt": "2021-01-06T00:42:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-06T03:20:57Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-07T06:56:55Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBbrvDg=="
          },
          "updatedAt": "2021-01-06T02:56:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDk5MTAxMw=="
        },
        {
          "author": "wfurt",
          "body": "I would like to echo sentiment from @josteink. It is nice to see this moving from personal project to point where it is somewhat usable for real use. Unfortunately, I was not able contribute much recently, because of various distractions. \r\n\r\nAs far as the build I can try to ask but I'm somewhat skeptical. There is no precedent for building unofficial platforms so the difficulties are more process than technical. \r\nI created project under https://github.com/dotnet/runtimelab and we should be able to get builds and packages from there. But I was not able to drive it to completion so far. @safern helped a lot with hints but there is still some build problems that needs resolution. \r\n\r\nAs far as the console, I would suggest to move technical discussion the #23653 . \r\nI started while back on reading termcap database but I did not get to any stable point. \r\nWe could possibly also put helper function(s) to PAL. \r\n\r\nI think next priority should bet get daily builds - either through (un)official MS runs, Cirrus CI  or runtimelab. I think having some good SDK and packages available is essential so people can build repo as normally as possible and progress on fixes. \r\n  ",
          "createdAt": "2021-01-14T03:05:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T06:25:07Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-15T01:22:11Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-03-22T15:22:12Z",
                "user": "davidchisnall"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBkWSIA=="
          },
          "updatedAt": "2021-01-14T03:05:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTg5NTE2Ng=="
        },
        {
          "author": "jasonpugsley",
          "body": "> I think next priority should bet get daily builds - either through (un)official MS runs, Cirrus CI or runtimelab.\r\n\r\nI don't have any experience in setting up automated builds with the type of complexity .NET has (though the manual process I use has become straightforward) but I can help troubleshoot any setup issues.",
          "createdAt": "2021-01-15T03:44:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-15T03:44:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDYyNTgyOA=="
        },
        {
          "author": "wfurt",
          "body": "@am11 can perhaps help. I'm hoping source-build would get easier _if_ we get some base SDK available,  ",
          "createdAt": "2021-01-15T05:36:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-15T05:36:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDY1Nzk4OA=="
        },
        {
          "author": "Thefrank",
          "body": "likely a stupid question but: \r\npipelines already(?) produces FreeBSD x64 runtime as seen [here](https://dnceng.visualstudio.com/public/_build/latest?definitionId=686&branchName=release/5.0) in totally scattered artifact form, so is it possible to make a working runtime from that? \r\nThe \"releases\" section of the pipelines tab gives me a nice 403 and what I have been able to download from artifacts (the published artifacts not the packaging artifacts) it seems to be mostly intermediary components and binlogs.",
          "createdAt": "2021-01-18T23:46:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T23:46:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjUxNzExNg=="
        },
        {
          "author": "jasonpugsley",
          "body": "Feeling like I've slayed a dragon or something ;) Could someone please verify the attached?\r\n[TestResults.zip](https://github.com/dotnet/runtime/files/5873290/TestResults.zip)\r\n```\r\n...\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:13:45.06\r\n```\r\nThis is only dotnet/runtime so far. Getting closer though. Celebrate all the wins!\r\nStill working on testing dotnet/aspnetcore, dotnet/sdk, and dotnet/installer. Needed to build packages from SDKs 3.1.10 and 3.0.3 for some of the tests which has been a pain. I've noticed tests in these other repos that want SDKs 2.2 and 1.x as well so they'll always fail for FreeBSD but surely that's not a concern(?).\r\nProbably won't get to do anything more until the weekend.",
          "createdAt": "2021-01-26T12:49:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-26T13:31:05Z",
                "user": "army1349"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-26T13:46:53Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-26T15:33:30Z",
                "user": "onny"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-26T15:33:31Z",
                "user": "onny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-26T19:10:03Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-26T19:21:05Z",
                "user": "ljsnogard"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-30T03:08:52Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-30T03:08:54Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-02-05T16:27:35Z",
                "user": "clearscreen"
              },
              {
                "content": "HEART",
                "createdAt": "2021-03-22T15:22:55Z",
                "user": "davidchisnall"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOBkWSoQ=="
          },
          "updatedAt": "2021-01-26T12:49:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzUyMDYwNA=="
        },
        {
          "author": "Thefrank",
          "body": "From what I remember, aspnetcore requires the more number of differing SDKs. I also clearly remember giving up on it because I was too lazy to go back and build 3.1 and 3.0. But seeing as I already had to build 3.1 I will give aspnetcore tests a go this week",
          "createdAt": "2021-01-26T19:25:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T19:25:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc3MjM1MQ=="
        },
        {
          "author": "ta264",
          "body": "I'm trying to build Radarr with this SDK but running into the following issue: \r\n```\r\n/root/git_working/Radarr/src/NzbDrone.Console/Radarr.Console.csproj : error NU1101: Unable to find package Microsoft.AspNetCore.App.Runtime.freebsd-x64. No packages exist with this id in source(s): FluentMigrator, MyFeed, nuget.org, NUnit [/root/git_working/Radarr/src/Radarr.sln]\r\n```\r\nI guess this needs something from aspnetcore not included in your SDK bundle above?",
          "createdAt": "2021-01-26T19:29:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T19:29:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc3NTEzMw=="
        },
        {
          "author": "Thefrank",
          "body": "@ta264 that is a NuGet package. I don't include those but I can add them. I will also include Radarr at some point too but I think it still runs under Mono and shouldnt need dotnet\r\n\r\nedit:\r\nalso please ping me somewhere else (radarr issues?) to keep this already very long issue from getting even more bloated :)",
          "createdAt": "2021-01-26T19:33:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T19:37:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc3NzE0Mg=="
        },
        {
          "author": "ta264",
          "body": "It does but I'm keen to drop mono support ASAP.  Looking into adding a netcore version for BSD to soften the blow.",
          "createdAt": "2021-01-26T19:33:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T19:33:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc3NzUxMA=="
        },
        {
          "author": "Thefrank",
          "body": "aspnetcore5. ive seen worse. woke up, kill quit hanging test. rest finished quickly will look at more in awake-morning not now-morning\r\n\r\n```\r\nBuild FAILED.\r\n\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Testing.Tests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Testing/test/Microsoft.AspNetCore.Testing.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Diagnostics.Tests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Middleware/Diagnostics/test/UnitTests/Microsoft.AspNetCore.Diagnostics.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Identity/EntityFrameworkCore/test/EF.InMemory.Test/Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Identity/EntityFrameworkCore/test/EF.Test/Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Identity.InMemory.Test_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Identity/test/InMemory.Test/Microsoft.AspNetCore.Identity.InMemory.Test.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.NET.Sdk.Razor.IntegrationTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Razor/Microsoft.NET.Sdk.Razor/integrationtests/Microsoft.NET.Sdk.Razor.IntegrationTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Interop.FunctionalTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Servers/Kestrel/test/Interop.FunctionalTests/Interop.FunctionalTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Libuv.FunctionalTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Servers/Kestrel/test/Libuv.FunctionalTests/Libuv.FunctionalTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.SpaServices.Extensions.Tests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Middleware/SpaServices.Extensions/test/Microsoft.AspNetCore.SpaServices.Extensions.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Server.HttpSys.FunctionalTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Servers/HttpSys/test/FunctionalTests/Microsoft.AspNetCore.Server.HttpSys.FunctionalTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.Hosting.WindowsServices.Tests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Hosting/WindowsServices/test/Microsoft.AspNetCore.Hosting.WindowsServices.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/log/Release/Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests_net5.0_x64.log [net5.0|x64] [/root/aspnetcore/src/Servers/Kestrel/Transport.Libuv/test/Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Libuv.BindTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Servers/Kestrel/test/Libuv.BindTests/Libuv.BindTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/MusicStore.Test_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/MusicStore/test/MusicStore.Test/MusicStore.Test.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/ServerComparison.FunctionalTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Servers/test/FunctionalTests/ServerComparison.FunctionalTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/ProjectTemplates.Tests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/ProjectTemplates/test/ProjectTemplates.Tests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/TestResults/Release/Microsoft.AspNetCore.App.UnitTests_net5.0_x64.html [net5.0|x64] [/root/aspnetcore/src/Framework/test/Microsoft.AspNetCore.App.UnitTests.csproj]\r\nXUnit : error : Tests failed: /root/aspnetcore/artifacts/log/Release/Microsoft.AspNetCore.Identity.FunctionalTests_net5.0_x64.log [net5.0|x64] [/root/aspnetcore/src/Identity/test/Identity.FunctionalTests/Microsoft.AspNetCore.Identity.FunctionalTests.csproj]\r\n    0 Warning(s)\r\n    18 Error(s)\r\n\r\nTime Elapsed 02:43:30.15\r\n##vso[task.logissue type=error]Build failed (exit code '1').\r\n```",
          "createdAt": "2021-01-27T09:45:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-27T11:48:42Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBd3img=="
          },
          "updatedAt": "2021-01-27T09:45:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODE2NDY4OQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "aspnetcore got stuck in Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests for me\r\nI also had failures in dotnet-watch.Tests which I'm guessing is problems with libinotify.\r\n\r\nI haven't looked at tests that should be disabled on FreeBSD, nor those that are currently disabled that could be enabled. I'm just trying to get a consistent run in my environment first.",
          "createdAt": "2021-01-27T11:49:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T11:49:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODIzMzA1NA=="
        },
        {
          "author": "Thefrank",
          "body": "Oh, I forgot to mention in past post that I dont have nodejs installed when building aspnetcore the big warning at the top makes me think I don't _really_ need it\r\n\r\nNo problems in dotnet-watch.Tests for me but yeah I had to kill quit Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests.  \r\n\r\nA quick glance at some of these failures.... \r\n`Microsoft.AspNetCore.Identity.FunctionalTests` missing e_sqlite3. This can likely be resolved with a symlink from sqlite3\r\n`Microsoft.AspNetCore.App.UnitTests` failed on ` Microsoft.AspNetCore.SharedFxTests.RuntimeListListsContainsCorrectEntries` due to `Runtime.xml` being missing\r\n`ProjectTemplates.Tests` missing specific versions of templates and also failures with `Connection reset by peer`\r\n`ServerComparison.FunctionalTests` all of the NGINX variants fail with `System.ComponentModel.Win32Exception : No such file or directory` IIS are skipped and Kestrel pass\r\n`MusicStore.Test` same missing e_sqlite3 issue\r\n`Libuv.BindTests` failures here from wrong values being returned. two failures on ThrowsWhen tests...that throw wrong error? I will need to look into this further I dont think I understand these correctly\r\n`Microsoft.AspNetCore.Hosting.WindowsServices.Tests` fails on its only test `AlwaysTestTests.SuccessfulTests.GuaranteedUnquarantinedTest` with `System.AggregateException : One or more errors occurred. (Operation is not supported on this platform.)`\r\n`Microsoft.AspNetCore.Server.HttpSys.FunctionalTests` same as above\r\n`Microsoft.AspNetCore.SpaServices.Extensions.Tests` fails likely because I dont have npm installed\r\n`Libuv.FunctionalTests` bunch of failures from `Connection refused` they all fall under the `(listenOptions: http://127.0.0.1:0)` variant and fail with something like `Connection refused [::1]:62528`\r\n`Interop.FunctionalTests` all but two tests failed. all failures were `System.PlatformNotSupportedException : Operation is not supported on this platform.`\r\n`Microsoft.NET.Sdk.Razor.IntegrationTests` failures (3) when trying to build things for 2.0.7\r\n`Microsoft.AspNetCore.Identity.InMemory.Test` our good friend `libe_sqlite3` strikes again\r\n`Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test` return of the missing `libe_sqlite3`\r\n`Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test` that symlink is looking like a great way to fix a bunch of these libe_sqlite3 issues\r\n`Microsoft.AspNetCore.Diagnostics.Tests` single failure `Microsoft.Extensions.Internal.ExceptionDetailsProviderTest.DisplaysSourceCodeLines_ForRelativePaths(relativePath: \\\"TestFiles\\\\\\\\SourceFile.txt\\\")` NO clue about this one\r\n`Microsoft.AspNetCore.Testing.Tests` more platform not supported failures on platform specific tests\r\n\r\nok so, I guess symlink sqlite file and maybe install nodejs+npm and see what fails after that\r\nmaybe actually enable ipv6 in jail\r\n\r\nTest results for the bored:\r\n[TestResults.zip](https://github.com/dotnet/runtime/files/5882694/TestResults.zip)\r\n",
          "createdAt": "2021-01-27T19:55:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T19:55:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODUzODM1Mw=="
        },
        {
          "author": "Thefrank",
          "body": "so...anyone try building from the release/6.0-preview1 branch? if yes, then do builds with make (or even ninja) use `-j1` instead of actually using all of the cores?\r\n\r\nthe full command it uses is `cmake --build \"/root/runtime/artifacts/obj/coreclr/FreeBSD.x64.Release\" --target install -- -j 1`\r\n\r\nmany hours later...\r\nI guess the actual failure is during Clr:\r\n(Trying to build under FreeBSD not the linux-x64 that it thinks it is)\r\n```\r\nCoreTestAssembly -> /root/runtime/artifacts/bin/CoreTestAssembly/x64/Release/CoreTestAssembly.dll\r\nELF binary type \"0\" not known.\r\n  /tmp/tmp48337fc32bce416fb40458877f4ce3ea.exec.cmd: /root/runtime/.packages/runtime.linux-x64.microsoft.netcore.ilasm/6.0.0-alpha.1.21068.2/runtimes/linux-x64/native/ilasm: Exec format error\r\n/root/runtime/.packages/microsoft.net.sdk.il/6.0.0-alpha.1.21068.2/targets/Microsoft.NET.Sdk.IL.targets(145,5): error MSB3073: The command \"\"/root/runtime/.packages/runtime.linux-x64.microsoft.netcore.ilasm/6.0.0-alpha.1.21068.2/runtimes/linux-x64/native/ilasm\" -QUIET -NOLOGO -OPTIMIZE -DLL  -OUTPUT=\"/root/runtime/artifacts/obj/coreclr/ILTestAssembly/x64/Release/ILTestAssembly.dll\"  Main.il ILDisassembler.il InstanceFieldLayout.il StaticFieldLayout.il VirtualFunctionOverride.il Signature.il MethodImplOverride1.il\" exited with code 126. [/root/runtime/src/coreclr/tools/aot/ILCompiler.TypeSystem.ReadyToRun.Tests/ILTestAssembly/ILTestAssembly.ilproj]\r\n```",
          "createdAt": "2021-02-06T22:14:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-07T06:02:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3NDU1MTQ5Mw=="
        },
        {
          "author": "lukeb1961",
          "body": "are you getting good builds on FreeBSD?  if so, could you spell out the steps in total so I can try too?",
          "createdAt": "2021-02-14T07:28:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-14T07:28:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODc0MDAwOA=="
        },
        {
          "author": "Thefrank",
          "body": "release/5.0 branch (and v5 tags) can be initially cross built. that product can be used natively under FreeBSD to build release/5.0 (and its tags). both cross and native also produces an SDK that is stable (enough) for building other things (@ta264 was able to build the radarr app with crossbuilt dotnet5 and has a good way of cross building dotnet5 for FreeBSD if you need it in your CI/CD toolchain).\r\n\r\nI have had no luck getting anything from 6.0 built (cross or native) but I have not had much time to look further into it since last week.",
          "createdAt": "2021-02-15T03:37:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-15T03:37:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODkxNjU0NA=="
        },
        {
          "author": "wfurt",
          "body": "for all the FreeBSD enthusiast, I'm trying to make a case to make regular FreeBSD builds and publish packages. It would be great if everybody can share their stories and use case for .NET on FreeBSD. If you can, please shoot me email to my GH address. ",
          "createdAt": "2021-02-15T05:30:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2021-02-15T06:45:18Z",
                "user": "holishing"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T06:45:26Z",
                "user": "holishing"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T06:48:50Z",
                "user": "preetpalS"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T08:20:20Z",
                "user": "driesmp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T08:37:44Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T09:16:51Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-16T16:04:12Z",
                "user": "Nimmsis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-18T07:08:59Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-19T21:40:45Z",
                "user": "concussious"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-21T21:58:31Z",
                "user": "frametheanimals"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-24T09:36:47Z",
                "user": "army1349"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T21:22:20Z",
                "user": "Bencici"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-14T01:26:58Z",
                "user": "PaulGWebster"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-07T14:55:15Z",
                "user": "feld"
              }
            ],
            "totalCount": 14,
            "endCursor": "Y3Vyc29yOnYyOpHOB9Z1BA=="
          },
          "updatedAt": "2021-02-15T05:30:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODk1MjM1Ng=="
        },
        {
          "author": "Thefrank",
          "body": "Just to list a few projects off hand: jellyfin (https://github.com/jellyfin/jellyfin), Ombi (https://github.com/Ombi-app/Ombi) Radarr (https://github.com/radarr/radarr) actually most of the *arr programs are looking to migrate into dotnet and would rather not leave the FreeBSD users behind if avoidable, and Azure Pipelines Agent all come to mind. Most of those build with little to no code changes. The exception being the pipelines agent. I poked a few devs on their various discords so hopefully you should hear back personally them at some point.",
          "createdAt": "2021-02-15T09:33:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-02-15T10:05:30Z",
                "user": "driesmp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-15T20:00:12Z",
                "user": "preetpalS"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-19T03:24:10Z",
                "user": "mheppner"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-21T21:45:56Z",
                "user": "frametheanimals"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-27T10:59:22Z",
                "user": "holishing"
              },
              {
                "content": "HEART",
                "createdAt": "2021-02-27T10:59:25Z",
                "user": "holishing"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T21:22:13Z",
                "user": "Bencici"
              },
              {
                "content": "HEART",
                "createdAt": "2021-03-02T21:22:15Z",
                "user": "Bencici"
              },
              {
                "content": "HEART",
                "createdAt": "2021-03-11T13:35:46Z",
                "user": "mvanbaak"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-22T14:44:57Z",
                "user": "Bklyn"
              },
              {
                "content": "HEART",
                "createdAt": "2021-04-22T14:45:01Z",
                "user": "Bklyn"
              },
              {
                "content": "EYES",
                "createdAt": "2021-04-22T14:45:12Z",
                "user": "Bklyn"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-04-22T14:45:15Z",
                "user": "Bklyn"
              }
            ],
            "totalCount": 13,
            "endCursor": "Y3Vyc29yOnYyOpHOBoMv2g=="
          },
          "updatedAt": "2021-02-15T09:33:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTA5MTM3NQ=="
        },
        {
          "author": "joperator",
          "body": "I've also noticed this problem, @Thefrank and therefore created a PR (see above) that contains the necessary adjustments to build and run Azure Pipelines Agent on FreeBSD. Please let me (and perhaps also the azure-pipelines-agent team) know if you're able to build and run this with your cross- and/or native-built .NET SDK.",
          "createdAt": "2021-02-16T12:30:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-16T12:30:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTgwNjcxNQ=="
        },
        {
          "author": "nkosi23",
          "body": "Is there any progress on this? I am so grateful to the people volunteering their time on this, at the same time I can't help but feel frustrated by the way Microsoft has been treating BSDs on that one. Official support still isn't here after 5 years :(\r\n\r\nAt my workplace, we are developing under FreeBSD to use the same environment for development and production (and to leverage an unified set of in-house tooling). Our reward: the mono package has been stuck at version 5.10 for years (which brings all kind of bugs in the csharp extension of vscode) and there is no .NET Core support. ",
          "createdAt": "2021-04-20T17:59:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-20T17:59:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ4NTgzMQ=="
        },
        {
          "author": "Thefrank",
          "body": "dotNET5 currently crossbuilds under Linux to FreeBSD with very little patching. This output can be used to generate a native build of dotNET5 under FreeBSD if desired but require a fair bit more patching. Both native and crossbuilt SDKs produce viable binaries from code (e.g., jellyfin media player and azure pipelines agent)\r\n\r\ndotNET6 (previews) currently crossbuilds under Linux to FreeBSD also but I have not been able to get that output to produce a native build under FreeBSD. Too many things changed that I don't really understand nor currently have the time to look at.",
          "createdAt": "2021-04-20T18:42:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-20T18:42:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUxNDUxNg=="
        },
        {
          "author": "sec",
          "body": "@nkosi23 maybe you could contact @wfurt and share your story, a few post above he wrote he's working on packages?\r\n\r\nBut on the other hand, I feel like this one is doing (again) circle - last instruction I can find are https://github.com/jasonpugsley/installer/wiki/Build-.NET-SDK-3.1.103-for-FreeBSD - maybe this is still valid for 5 or 6, don't know.\r\n\r\nMaybe the problem is, that many people who would like to help/contribute, just don't know how/where to start? I couldn't find any up-to-date steps on how to even start building .net core from scrath on FreeBSD, run the tests and check what's broken and maybe try to fix something?\r\nAlso when this whole issue started, there were few things missing for FreeBSD support - looking at that list, everything is marked as done - so question is, what is still needed for supporting this OS?\r\nI saw that some tests are failing, etc - if you ask me, fine - we can live with that, but at least I would like to have some official way to get .NET Core running, then I can verify on my own.\r\n\r\nAnd to be honest, does things change that between 3, 5 and 6 that the whole build process stopped working?",
          "createdAt": "2021-04-21T08:13:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-21T08:17:36Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-21T13:05:15Z",
                "user": "sopi20"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-22T14:48:36Z",
                "user": "Bklyn"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-27T11:08:31Z",
                "user": "PawelHaracz"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBoskkA=="
          },
          "updatedAt": "2021-04-21T08:37:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzg3MTU3Nw=="
        },
        {
          "author": "arrowd",
          "body": "In my opinion, to move things we need to push both upstream and downstream. As a FreeBSD Ports committer I can help with the latter. However, I lost track in this thread long ago, so my questions are:\r\n\r\n1. What are results of this effort at the moment? Are these results in source forms or binaries?\r\n2. What parts of the result are upstreamable? What should be done to upstream it?\r\n3. What can be done on FreeBSD side to accommodate results? Create a new port/update an existing one?",
          "createdAt": "2021-04-21T08:30:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-04-22T14:48:07Z",
                "user": "Bklyn"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBoMyFw=="
          },
          "updatedAt": "2021-04-21T08:30:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzg4MzM1MA=="
        },
        {
          "author": "wfurt",
          "body": "Hello again FreeBSD friends. It took me while but I'm back with some mixed news. \r\n\r\nI talk to many people and sadly official or semi-official FreeBSD is not going to happen any time soon.\r\nExisting FreeBSD pipeline can stay in place to guard agains build regressions and we may be able to extend it to cover more (like packaging)\r\n\r\nI think it is great to have FreeBSD bits around but that is really not sustainable IMHO. I think we need somebody like @arrowd with Ports skill to drive this to actual FreeBSD port. As @sec recently noticed, documentation is awfully outdated. Following long threads - like this one - is very difficult and does not work over time as things do change.  \r\n\r\n## So here is call for action - voluntairs needed !!!\r\n\r\nWe are in middle of release cycle for few more month. We should be able to contribute and push in any reasonable changes via normal revere process. \r\n\r\n### 1. We need better documentation. \r\nWhile this may seem trivial I think this is major blocker for contributors. I can help with fragments but I'm in no shape to do that myself and to verify existing instructions - I'm way to behind on way too many fronts ;(\r\n\r\n### 2. bootstrap SDK/cli\r\n\r\nNow I can see two ways to go forward:\r\n1. We can set up completely independent system - let say using Cirrus CI as @am11 was suggesting while back. \r\n2. Use [runtimelab](https://github.com/dotnet/runtimelab)\r\n\r\nWhile I also attempted former, I'm no expert there so I'll focus on runtime lab option. \r\nThis may not be widely known as it is somewhat reset but [runtimelab](https://github.com/dotnet/runtimelab) is somewhat shadow clone of runtime meant for experiments. It can take and maintain chains not suitable for upstream/main branch. While most normal fixes may qualify for normal contributions some build aspects may be more hacky as FreeBSD lacks feeds and previous versions. \r\n\r\nThe good part is that this pretty much uses normal build process and it can publish packages and build artifacts. \r\n\r\nThe FreeBSD \"feature\" is already created. I need somebody to help with driving https://github.com/dotnet/runtimelab/pull/136 to completion. \r\n\r\n \r\n### 3. pushing changes to [source-build](https://github.com/dotnet/source-build/issues/1139)\r\nI had meeting with source-build guardiens and that are open to take changes as needed. We may need to work out changes how to feed it SDK from previous build.\r\n\r\n### 4. Work out FreeBSD port package\r\nI put this last but I think this should be ultimate goals. With that, the FreeBSD community would be in shape to to produce consistent builds and apply any changes it wants. While all the previous steps are probably needed, I think we should lay out ground work soon as possible. I think this is essential to be sure the effort is feasible.\r\n\r\n### 5. Fixing FreeBSD specific bugs\r\nThere are not many known outstanding issues. Some - like the Console - may be resolved with FreeBSD changes or there may be known workarounds. \r\n\r\nLet me know if there are questions or suggestion. Signup-here is shoot me email if you have some time to contribute.\r\n ",
          "createdAt": "2021-04-21T17:56:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-04-21T18:00:26Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-04-21T18:03:45Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-04-21T20:34:03Z",
                "user": "onny"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBoFEqg=="
          },
          "updatedAt": "2021-04-21T17:56:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDI0ODg4MQ=="
        },
        {
          "author": "Thefrank",
          "body": "This solves half of 2:\r\n\r\nhttps://github.com/Servarr/dotnet-bsd for Azure (also has been producing packaged SDKs for a while)\r\nhttps://github.com/Thefrank/dotnet-freebsd-crossbuild for Script (Bash)\r\n\r\nsecond half is a large TODO: Build native binaries from output from either of above\r\n\r\nas for 4: a ports package of the already produced SDK should be pretty painless. we have `NO_BUILD=TRUE` for that lol :D",
          "createdAt": "2021-04-21T18:04:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-21T18:09:52Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBoD7Pw=="
          },
          "updatedAt": "2021-04-21T18:04:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDI1NDA4MQ=="
        },
        {
          "author": "am11",
          "body": "> using Cirrus CI\r\n\r\n@wfurt, the benefit for this approach was to run libraries tests on the actual FreeBSD instance in public cloud. Currently running 'all supported' tests is a manual chore, which (AFAICT) we don't carry out very often; so it is hard to gauge the quality of build at a given point in time. The artifacts (binaries, managed assemblies and test assemblies) can still be produced via our existing mcr.microsoft docker image. We would just need to:\r\n\r\n* either setup a blob storage account where runtime's FreeBSD build artifacts are uploaded and set up the retention policy on blobs (e.g. purge it after X hours). Then we can setup CirrusCI test leg to trigger on publish of artifacts, download artifacts, untar and run tests.\r\n* or setup a standalone repo like https://github.com/wfurt/freebsd-bootstrap-cli or https://github.com/am11/CrossRepoCITesting to run the build job on GitHub Actions, upload artifacts on GitHub releases, trigger CirrusCI which downloads from GitHub Artifacts public/deterministic URL and run tests. For that I created a cron action which runs thrice a day which checks out the code from runtime's main branch.\r\n\r\nFirst option requires support from engineering team, second option is something we can manage without help (and it is also a -- comparatively -- low-maintenance solution).\r\n\r\nYou also once mentioned to capture the test results (so we can feed it to Application Insights, to be able to run kusto queries etc.), that can also be facilitated if we get the SAS token of storage where we can push test results from CirrusCI.",
          "createdAt": "2021-04-21T19:16:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-21T19:16:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDI5NjAwNQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "I have some questions.\r\n\r\n1. The dotnet/runtimelab feature/FreeBSD branch looks like it's forked from 5.0. Is this the branch we want to be submitting PRs against? Is the idea to then submit PRs for dotnet/runtime (main, release/5.0,  release/6.0-previewX) as well?\r\n2. To be really useful, as well as dotnet/runtime we really should have dotnet/aspnetcore, both the {installdir}/shared/Microsoft.AspNetCore.App/ files for Framework Dependent running of apps as well as Microsoft.AspNetCore.App.Runtime.freebsd-x64.5.0.4.nupkg for restoring projects. AFAIK there isn't a _lab_ equivalent for aspnetcore. Where would we host the package file and runtime?\r\n3. Once you have 1 & 2, it's not a stretch to add dotnet/installer and then be able to provide the SDK for download. People still need a valid packageSource in $HOME/.nuget/NuGet/NuGet.Config pointing to a location where trusted FreeBSD nuget packages will be hosted.\r\n\r\nI have to admit to spending crazy hours over the last few years manually cobbling together my build process. It works well for me but it's custom so I'm continuously adjusting it as each new release comes out. Dependencies frequently change and I don't always have the necessary prior builds, usually I can substitute other builds but it's non-trivial keeping up. Automation would be great.\r\n\r\nAs an example, here's my full set of changes for runtime for 5.0.4\r\nhttps://github.com/jasonpugsley/runtime/commit/cc43bef7f1322871f2e538d41b8263bf958f40a4\r\n\r\n- **NuGet.config** has my custom set of artefacts required for build and/or test.\r\n- **eng/Versions.props** and **global.json** I haven't kept older RC or Preview builds as I've found 5.0.0 RTM substitutes fine.\r\n- **src/installer/managed/Microsoft.NET.HostModel/Microsoft.NET.HostModel.csproj** netstandard2.0 has no knowledge of FreeBSD, that was added in netcoreapp3.0 - I have no idea how this should be merged without breaking things.\r\n- **src/libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h** I haven't investigated why TRUE/FALSE are not defined. It might be my setup or a missing include.\r\n- I'm using llvm 11 on FreeBSD11.4 so that may affect the build process as well.\r\n- And I have a custom **.dotnet/dotnet-install** to copy my local build items instead of trying to access non-existent copies from the web.\r\n\r\nBut really, it's a small set of changes, some of which could be easily merged now.\r\n\r\nAs I have mentioned before, all of the tests are passing for runtime, but that's because I've made the necessary changes to prior releases and have a stash of them at various versions needed for testing.\r\n\r\nThere is more work to do in aspnetcore to get all tests passing. Notably, there are some Libuv failures but Libuv is deprecated and due to be removed in 6.0 so depending on which version we're targeting it might be time better spent elsewhere.\r\n\r\nWhat's the next step?",
          "createdAt": "2021-04-26T09:01:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-26T11:26:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjY1MDc2Mg=="
        },
        {
          "author": "Thefrank",
          "body": ">  src/libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h I haven't investigated why TRUE/FALSE are not defined. It might be my setup or a missing include.\r\n\r\nfrom what I recall, `libicu` is too new. for runtime try passing this:\r\n`--cmakeargs -DCMAKE_CXX_FLAGS=-DU_DEFINE_FALSE_AND_TRUE=1`\r\n\r\nThis is resolved in dotNET6 previews afaik but was not backported\r\n\r\nedit:\r\nsee https://github.com/dotnet/runtime/issues/47346 and https://github.com/unicode-org/icu/blob/main/docs/userguide/dev/codingguidelines.md#primitive-types\r\n> Traditionally, ICU4C has defined its own FALSE=0 / TRUE=1 macros for use with UBool. Starting with ICU 68 (2020q4), we no longer define these in public header files (unless U_DEFINE_FALSE_AND_TRUE=1), in order to avoid name collisions with code outside ICU defining enum constants and similar with these names.",
          "createdAt": "2021-04-26T10:44:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-04-26T11:12:51Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBoiGpA=="
          },
          "updatedAt": "2021-04-26T10:46:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjcyODc3NQ=="
        },
        {
          "author": "wfurt",
          "body": "The `dotnet/runtimelab` reflects main/master branch at the time when I created the `feature` @jasonpugsley. Since I was not able to get the build going, I did not sync any updates but that can be done before or after the build is working and publishing artifacts. \r\n\r\nI don't necessarily see the `runtimelab` as the end product - more like a seed to feed to FreeBSD port and `source-build`. While having various scripts and docs fragments is very useful, I think we need to focus on full automation. I was under impression that the official port cannot consume bits produced by external personas. \r\n\r\n@am11 also reminded me that having consumable releases is only part. While that is most beneficial to FreeBSD users it would be nice to form of daily builds and test runs. That would be handy for developers and to track overall quality of the port. Since most of the platform code lives in `runtime` I think it would be ok for now to focus only on that repo.  ",
          "createdAt": "2021-04-27T16:54:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-27T16:54:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzc1OTYyNQ=="
        },
        {
          "author": "sec",
          "body": "Trying to native build runtime for dotNET 6.0-preview1 (using dotNET 5.0.202 SDK cross-compiled under Linux).\r\nCommand I've used `./build.sh -subset clr -os FreeBSD /p:CrossgenOutput=false /p:DISABLE_CROSSGEN=True`\r\nNow the clr I think almost compiled, there are some weird errors and the end:\r\n\r\n```  \r\n  [100%] Built target runtimeinfo\r\nInstall the project...\r\n  -- Install configuration: \"DEBUG\"\r\n  Repo successfully built.\r\n  Product binaries are available at /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug\r\n  runincontext -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/runincontext.dll\r\n  ILCompiler.Reflection.ReadyToRun -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/ILCompiler.Reflection.ReadyToRun.dll\r\n  ILCompiler.Diagnostics -> /usr/home/sec/runtime/artifacts/bin/ILCompiler.Diagnostics/x64/Debug/ILCompiler.Diagnostics.dll\r\n  R2RDump -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/R2RDump/R2RDump.dll\r\n  ILCompiler.TypeSystem.ReadyToRun -> /usr/home/sec/runtime/artifacts/bin/ILCompiler.TypeSystem.ReadyToRun/x64/Debug/ILCompiler.TypeSystem.ReadyToRun.dll\r\n  dotnet-pgo -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/dotnet-pgo/dotnet-pgo.dll\r\n  R2RTest -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/R2RTest/R2RTest.dll\r\n  ILCompiler.DependencyAnalysisFramework -> /usr/home/sec/runtime/artifacts/bin/ILCompiler.DependencyAnalysisFramework/x64/Debug/ILCompiler.DependencyAnalysisFramework.dll\r\n  ILCompiler.ReadyToRun -> /usr/home/sec/runtime/artifacts/bin/ILCompiler.ReadyToRun/x64/Debug/ILCompiler.ReadyToRun.dll\r\n  crossgen2 -> /usr/home/sec/runtime/artifacts/bin/coreclr/FreeBSD.x64.Debug/crossgen2/crossgen2.dll\r\n  CoreTestAssembly -> /usr/home/sec/runtime/artifacts/bin/CoreTestAssembly/x64/Debug/CoreTestAssembly.dll\r\nELF binary type \"0\" not known.\r\n  /tmp/tmp06262290b1b448348b21bb0b6cd8965a.exec.cmd: /home/sec/.nuget/packages/runtime.linux-x64.microsoft.netcore.ilasm/6.0.0-alpha.1.21068.2/runtimes/linux-x64/native/ilasm: Exec format error\r\n/home/sec/.nuget/packages/microsoft.net.sdk.il/6.0.0-alpha.1.21068.2/targets/Microsoft.NET.Sdk.IL.targets(145,5): error MSB3073: The command \"\"/home/sec/.nuget/packages/runtime.linux-x64.microsoft.netcore.ilasm/6.0.0-alpha.1.21068.2/runtimes/linux-x64/native/ilasm\" -QUIET -NOLOGO -DLL  -OUTPUT=\"/usr/home/sec/runtime/artifacts/obj/coreclr/ILTestAssembly/x64/Debug/ILTestAssembly.dll\"  Main.il ILDisassembler.il InstanceFieldLayout.il StaticFieldLayout.il VirtualFunctionOverride.il Signature.il MethodImplOverride1.il\" exited with code 126. [/usr/home/sec/runtime/src/coreclr/tools/aot/ILCompiler.TypeSystem.ReadyToRun.Tests/ILTestAssembly/ILTestAssembly.ilproj]\r\n\r\nBuild FAILED.\r\n```\r\nWhy it's using linux runtime for something?\r\n\r\nThen I tried to build `libs`, not it's not that simple - a lot of `error NU1012: Platform version is not present for one or more target frameworks, even though they have specified a platform: net6.0-linux, net6.0-osx, net6.0-freebsd, net6.0-ios, net6.0-tvos, net6.0-browser, net6.0-illumos, net6.0-solaris` errors - how to approach/fix that?\r\n\r\nAfter that I tried the same thing, but with `v5.0.5` tag, this time using clang10 and some changes from \r\n@jasonpugsley https://github.com/jasonpugsley/runtime/commit/cc43bef7f1322871f2e538d41b8263bf958f40a4\r\n\r\nFor clr:\r\n```\r\n\r\n  Product binaries are available at /usr/home/sec/runtim2/artifacts/bin/coreclr/FreeBSD.x64.Debug\r\n  ILCompiler.DependencyAnalysisFramework -> /usr/home/sec/runtim2/artifacts/bin/ILCompiler.DependencyAnalysisFramework/x64/Debug/ILCompiler.DependencyAnalysisFramework.dll\r\n  ILCompiler.TypeSystem.ReadyToRun -> /usr/home/sec/runtim2/artifacts/bin/ILCompiler.TypeSystem.ReadyToRun/x64/Debug/ILCompiler.TypeSystem.ReadyToRun.dll\r\n  ILCompiler.ReadyToRun -> /usr/home/sec/runtim2/artifacts/bin/ILCompiler.ReadyToRun/x64/Debug/ILCompiler.ReadyToRun.dll\r\n/usr/home/sec/dotnet_from_sec_build/sdk/5.0.202/Microsoft.Common.CurrentVersion.targets(4919,5): error MSB3030: Could not copy the file \"/usr/home/sec/runtim2/artifacts/bin/coreclr/FreeBSD.x64.Debug/libjitinterface\" because it was not found. [/usr/home/sec/runtim2/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj]\r\n/usr/home/sec/dotnet_from_sec_build/sdk/5.0.202/Microsoft.Common.CurrentVersion.targets(4919,5): error MSB3030: Could not copy the file \"/usr/home/sec/runtim2/artifacts/bin/coreclr/FreeBSD.x64.Debug/libclrjit\" because it was not found. [/usr/home/sec/runtim2/src/coreclr/src/tools/aot/crossgen2/crossgen2.csproj]\r\n\r\nBuild FAILED.\r\n```\r\nI didn't took all the changes from @jasonpugsley , but I assume that it's fixable.\r\nbut `libs` managed to build without any errors.\r\n",
          "createdAt": "2021-04-28T16:40:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-28T16:40:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyODYwNDk4OQ=="
        },
        {
          "author": "wfurt",
          "body": "It seems like the SDK still feels Linuxy. If running on FreeBSD it should not try to reference any Linux packages or binaries @sec ",
          "createdAt": "2021-04-28T18:09:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-28T18:09:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyODY2ODU5Mw=="
        },
        {
          "author": "Thefrank",
          "body": "dotNET6 previews dont build natively, atleast for me, but I only put  ~6hr in on messing around with it :(\r\n\r\nedit: I will say that I got similar issues with it trying to do linuxy things even after adding conditions for freebsd",
          "createdAt": "2021-04-28T20:51:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-28T21:01:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyODc3MDY4Mw=="
        },
        {
          "author": "sec",
          "body": "`v5.0.5` is compiling natively under FreeBSD, both clr and libs, aspnetcore should also follow without any major problems - so based on that, we can have native sdk, right? It's just a matter of packing all of this into nice package (for which installer repo can be used I think).\r\n\r\nAnyone got any idea how to move to v6, as it's scheduled for November, a lot of things can change between, would be nice to at least have some base build that's working. I tried v6 cross-builds from https://github.com/Servarr/dotnet-bsd/releases, but they give `Segmentation fault (core dumped)` on `dotnet --info` and my Unix skills to debug only showed me this :)\r\n```\r\nsec@vmfreebsd:~/v6 % lldb -- ./dotnet --info\r\n(lldb) target create \"./dotnet\"\r\nCurrent executable set to '/home/sec/v6/dotnet' (x86_64).\r\n(lldb) settings set -- target.run-args  \"--info\"\r\n(lldb) r\r\nProcess 12048 launching\r\nProcess 12048 launched: '/home/sec/v6/dotnet' (x86_64)\r\nProcess 12048 stopped\r\n* thread #1, name = 'dotnet', stop reason = signal SIGSEGV: invalid address (fault address: 0xffffffffffff0002)\r\n    frame #0: 0xffffffffffff0002\r\nerror: Bad address\r\n(lldb) bt\r\n* thread #1, name = 'dotnet', stop reason = signal SIGSEGV: invalid address (fault address: 0xffffffffffff0002)\r\n  * frame #0: 0xffffffffffff0002\r\n    frame #1: 0x0000000803062d28\r\n    frame #2: 0x0000000803062c17\r\n    frame #3: 0x00000008029692e7 libcoreclr.so`___lldb_unnamed_symbol9607$$libcoreclr.so + 124\r\n    frame #4: 0x00000008027c5479 libcoreclr.so`___lldb_unnamed_symbol4461$$libcoreclr.so + 249\r\n    frame #5: 0x00000008027c56f7 libcoreclr.so`___lldb_unnamed_symbol4462$$libcoreclr.so + 327\r\n    frame #6: 0x0000000802740b95 libcoreclr.so`___lldb_unnamed_symbol2815$$libcoreclr.so + 389\r\n    frame #7: 0x000000080274107c libcoreclr.so`___lldb_unnamed_symbol2816$$libcoreclr.so + 716\r\n    frame #8: 0x00000008028196b7 libcoreclr.so`___lldb_unnamed_symbol5644$$libcoreclr.so + 215\r\n    frame #9: 0x0000000803061bdb\r\n    frame #10: 0x00000008029692e7 libcoreclr.so`___lldb_unnamed_symbol9607$$libcoreclr.so + 124\r\n    frame #11: 0x00000008027c5d68 libcoreclr.so`___lldb_unnamed_symbol4463$$libcoreclr.so + 1560\r\n    frame #12: 0x000000080268aaaf libcoreclr.so`___lldb_unnamed_symbol274$$libcoreclr.so + 367\r\n    frame #13: 0x00000008026ca739 libcoreclr.so`___lldb_unnamed_symbol1124$$libcoreclr.so + 633\r\n    frame #14: 0x0000000802673ab3 libcoreclr.so`coreclr_execute_assembly + 227\r\n    frame #15: 0x000000080226e2d3 libhostpolicy.so`___lldb_unnamed_symbol154$$libhostpolicy.so + 1555\r\n    frame #16: 0x000000080226ed6d libhostpolicy.so`corehost_main + 301\r\n    frame #17: 0x0000000802012057 libhostfxr.so`___lldb_unnamed_symbol55$$libhostfxr.so + 1431\r\n    frame #18: 0x00000008020116c2 libhostfxr.so`___lldb_unnamed_symbol54$$libhostfxr.so + 1138\r\n    frame #19: 0x0000000802011017 libhostfxr.so`___lldb_unnamed_symbol53$$libhostfxr.so + 663\r\n    frame #20: 0x000000080200d732 libhostfxr.so`hostfxr_main_startupinfo + 178\r\n    frame #21: 0x000000000102dd0c dotnet`___lldb_unnamed_symbol144$$dotnet + 1420\r\n    frame #22: 0x000000000102df10 dotnet`___lldb_unnamed_symbol145$$dotnet + 144\r\n    frame #23: 0x0000000001024e19 dotnet`___lldb_unnamed_symbol3$$dotnet + 153\r\n```\r\n\r\nCorrect me if I'm wrong, looking at `v6.0.0-preview.1` and this:\r\n```\r\n  <MicrosoftNETCoreAppVersion>6.0.0-alpha.1.20612.4</MicrosoftNETCoreAppVersion>\r\n    <MicrosoftNETCoreDotNetHostVersion>6.0.0-alpha.1.21068.2</MicrosoftNETCoreDotNetHostVersion>\r\n    <MicrosoftNETCoreDotNetHostPolicyVersion>6.0.0-alpha.1.21068.2</MicrosoftNETCoreDotNetHostPolicyVersion>\r\n```\r\nwe would need base SDK at this version to build clr (which builds with v5 with 1 error) and libs (this one complains about missing platform) ?",
          "createdAt": "2021-04-29T08:53:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T08:53:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTA1NzkxOQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "6.0.0-alpha.....  welcome to the merry world version dependencies. I'm sure everyone is tired of me whining about that subject.\r\n\r\nYou could try substituting your 5.0.5 build and see if it works otherwise you'll need to build one or more of those alpha releases. This is a tough gig but keep trying :) Your interest is encouraging.\r\n\r\nWhen I can find some time I will attempt to get going on 6.",
          "createdAt": "2021-04-29T10:33:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T10:33:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTEyMDg1Nw=="
        },
        {
          "author": "Thefrank",
          "body": "@sec I still publish native built SDKs here: https://mega.nz/folder/tIpEFSSB#IHx1OjAREnt_Y56PlsKs-g\r\n\r\nThey arent on GH yet because I havent finished a universal build script for native (like for crossbuild)",
          "createdAt": "2021-04-29T17:41:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T17:41:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTQ2MDA3Mw=="
        },
        {
          "author": "Thefrank",
          "body": "Just as a heads up with preview 4 being released a few days ago...\r\n\r\ncrossbuilds of dotnet still segfault :(\r\nnative builds (using 5 RTM as seed SDK) still fail because it thinks its on linux :(",
          "createdAt": "2021-05-27T18:14:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-27T18:14:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTgzOTg5Mg=="
        },
        {
          "author": "sec",
          "body": "> Just as a heads up with preview 4 being released a few days ago...\r\n> \r\n> crossbuilds of dotnet still segfault :(\r\n> native builds (using 5 RTM as seed SDK) still fail because it thinks its on linux :(\r\n\r\nAnyone familiar with build process/dotnet internals maybe could help on that - if you ask me, that should be something \"small\" to fix, as it's failing at the very end thinking it's linux box :/",
          "createdAt": "2021-05-27T18:36:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-27T18:36:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTg1MzAzMA=="
        },
        {
          "author": "Thefrank",
          "body": "TL;DR: mostly failure\r\n\r\nbest I can do so far with a native build:\r\n\r\n```\r\nroot@dotnet6:~/dotnet6 # ./dotnet --info\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.2.21279.99\r\n  Commit:  3eaf1f316b\r\n\r\n.NET SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET runtimes installed:\r\n  Microsoft.NETCore.App 6.0.0-preview.2.21279.99 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n- preview 2 was the last preview that allowed me to use net5 as a seed sdk so I used it\r\n- I never figured out how to stop it from trying to use the linux `ilasm` so I just replaced the linux ones with the FreeBSD one\r\n- it still generates packages named `linux-x64` (like `runtime.linux-x64.Microsoft.NETCore.ILAsm.6.0.0-preview.2.21279.99.nupkg`) while still making a `dotnet-runtime-6.0.0-preview.2.21279.99-freebsd-x64.tar.gz` likely because it still thinks linux-y\r\n- it ran into issues with not being able to find/download/use IBCMerge so I ended up having to set `/p:EnableNgenOptimization=false`\r\n- mono subset does not build because it fails configure with FreeBSD not being supported\r\n- I can not get aspnetcore or even SDK to build because restore fails with tons of `NU3037` errors (\"The author primary signature validity period has expired.\" or \"The repository countersignature validity period has expired.\") and none of the fixes from https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/ or https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/ work. Restore works fine with other projects but none of them use \"https://pkgs.dev.azure.com/\" im likely missing a cert that was blacklisted/removed/not updated but nothing seems wrong other than the packages fail the verification",
          "createdAt": "2021-05-30T04:41:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-30T04:41:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDkzODg4Mg=="
        },
        {
          "author": "joperator",
          "body": "> I can not get aspnetcore or even SDK to build because restore fails with tons of NU3037 errors (\"The author primary signature validity period has expired.\" or \"The repository countersignature validity period has expired.\")\r\n\r\n@Thefrank:\r\nI was able to fix the NuGet signature issues by adding the following certificate to `/usr/local/openssl/cert.pem`:\r\n```\r\nCertificate:\r\n    Data:\r\n        Version: 3 (0x2)\r\n        Serial Number:\r\n            40:1a:c4:64:21:b3:13:21:03:0e:bb:e4:12:1a:c5:1d\r\n        Signature Algorithm: sha256WithRSAEncryption\r\n        Issuer: C = US, O = \"VeriSign, Inc.\", OU = VeriSign Trust Network, OU = \"(c) 2008 VeriSign, Inc. - For authorized use only\", CN = VeriSign Universal Root Certification Authority\r\n        Validity\r\n            Not Before: Apr  2 00:00:00 2008 GMT\r\n            Not After : Dec  1 23:59:59 2037 GMT\r\n        Subject: C = US, O = \"VeriSign, Inc.\", OU = VeriSign Trust Network, OU = \"(c) 2008 VeriSign, Inc. - For authorized use only\", CN = VeriSign Universal Root Certification Authority\r\n        Subject Public Key Info:\r\n            Public Key Algorithm: rsaEncryption\r\n                RSA Public-Key: (2048 bit)\r\n                Modulus:\r\n                    00:c7:61:37:5e:b1:01:34:db:62:d7:15:9b:ff:58:\r\n                    5a:8c:23:23:d6:60:8e:91:d7:90:98:83:7a:e6:58:\r\n                    19:38:8c:c5:f6:e5:64:85:b4:a2:71:fb:ed:bd:b9:\r\n                    da:cd:4d:00:b4:c8:2d:73:a5:c7:69:71:95:1f:39:\r\n                    3c:b2:44:07:9c:e8:0e:fa:4d:4a:c4:21:df:29:61:\r\n                    8f:32:22:61:82:c5:87:1f:6e:8c:7c:5f:16:20:51:\r\n                    44:d1:70:4f:57:ea:e3:1c:e3:cc:79:ee:58:d8:0e:\r\n                    c2:b3:45:93:c0:2c:e7:9a:17:2b:7b:00:37:7a:41:\r\n                    33:78:e1:33:e2:f3:10:1a:7f:87:2c:be:f6:f5:f7:\r\n                    42:e2:e5:bf:87:62:89:5f:00:4b:df:c5:dd:e4:75:\r\n                    44:32:41:3a:1e:71:6e:69:cb:0b:75:46:08:d1:ca:\r\n                    d2:2b:95:d0:cf:fb:b9:40:6b:64:8c:57:4d:fc:13:\r\n                    11:79:84:ed:5e:54:f6:34:9f:08:01:f3:10:25:06:\r\n                    17:4a:da:f1:1d:7a:66:6b:98:60:66:a4:d9:ef:d2:\r\n                    2e:82:f1:f0:ef:09:ea:44:c9:15:6a:e2:03:6e:33:\r\n                    d3:ac:9f:55:00:c7:f6:08:6a:94:b9:5f:dc:e0:33:\r\n                    f1:84:60:f9:5b:27:11:b4:fc:16:f2:bb:56:6a:80:\r\n                    25:8d\r\n                Exponent: 65537 (0x10001)\r\n        X509v3 extensions:\r\n            X509v3 Basic Constraints: critical\r\n                CA:TRUE\r\n            X509v3 Key Usage: critical\r\n                Certificate Sign, CRL Sign\r\n            1.3.6.1.5.5.7.1.12: \r\n                0_.].[0Y0W0U..image/gif0!0.0...+..............k...j.H.,{..0%.#http://logo.verisign.com/vslogo.gif\r\n            X509v3 Subject Key Identifier: \r\n                B6:77:FA:69:48:47:9F:53:12:D5:C2:EA:07:32:76:07:D1:97:07:19\r\n    Signature Algorithm: sha256WithRSAEncryption\r\n         4a:f8:f8:b0:03:e6:2c:67:7b:e4:94:77:63:cc:6e:4c:f9:7d:\r\n         0e:0d:dc:c8:b9:35:b9:70:4f:63:fa:24:fa:6c:83:8c:47:9d:\r\n         3b:63:f3:9a:f9:76:32:95:91:b1:77:bc:ac:9a:be:b1:e4:31:\r\n         21:c6:81:95:56:5a:0e:b1:c2:d4:b1:a6:59:ac:f1:63:cb:b8:\r\n         4c:1d:59:90:4a:ef:90:16:28:1f:5a:ae:10:fb:81:50:38:0c:\r\n         6c:cc:f1:3d:c3:f5:63:e3:b3:e3:21:c9:24:39:e9:fd:15:66:\r\n         46:f4:1b:11:d0:4d:73:a3:7d:46:f9:3d:ed:a8:5f:62:d4:f1:\r\n         3f:f8:e0:74:57:2b:18:9d:81:b4:c4:28:da:94:97:a5:70:eb:\r\n         ac:1d:be:07:11:f0:d5:db:dd:e5:8c:f0:d5:32:b0:83:e6:57:\r\n         e2:8f:bf:be:a1:aa:bf:3d:1d:b5:d4:38:ea:d7:b0:5c:3a:4f:\r\n         6a:3f:8f:c0:66:6c:63:aa:e9:d9:a4:16:f4:81:d1:95:14:0e:\r\n         7d:cd:95:34:d9:d2:8f:70:73:81:7b:9c:7e:bd:98:61:d8:45:\r\n         87:98:90:c5:eb:86:30:c6:35:bf:f0:ff:c3:55:88:83:4b:ef:\r\n         05:92:06:71:f2:b8:98:93:b7:ec:cd:82:61:f1:38:e6:4f:97:\r\n         98:2a:5a:8d\r\nSHA1 Fingerprint=36:79:CA:35:66:87:72:30:4D:30:A5:FB:87:3B:0F:A7:7B:B7:0D:54\r\n-----BEGIN CERTIFICATE-----\r\nMIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB\r\nvTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\r\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp\r\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W\r\nZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe\r\nFw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX\r\nMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0\r\nIE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y\r\nIGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh\r\nbCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF\r\nAAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF\r\n9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH\r\nH26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H\r\nLL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN\r\n/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT\r\nrJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud\r\nEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw\r\nWTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs\r\nexkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud\r\nDgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4\r\nsAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+\r\nseQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz\r\n4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+\r\nBxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR\r\nlRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3\r\n7M2CYfE45k+XmCpajQ==\r\n-----END CERTIFICATE-----\r\n```\r\nThis article gave me the crucial clue:\r\n[Remove GeoTrust PCA-G2 and VeriSign Universal root certs from NSS](https://bugzilla.mozilla.org/show_bug.cgi?id=1686854)",
          "createdAt": "2021-05-31T07:55:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-31T07:55:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTI4NjkzNg=="
        },
        {
          "author": "Thefrank",
          "body": "@joperator re-adding the removed cert fixed the issue thanks!\r\n\r\n- platform detection(?)\r\n\r\nThis issue is actually to net6 and didn't exist in net5 or with 3.1...\r\nI am still trying to figure out why runtime still thinks its suddenly on Linux during the final part of the coreclr subset.\r\n\r\nmanually building: `src/coreclr/.nuget/` correctly creates freebsd named packages (`runtime.freebsd-x64.Microsoft.NETCore.ILAsm.6.0.0-dev.21281.99.nupkg`) \r\nbuilding with the build script still results in it looking for and trying to produce linux named items.\r\n\r\nthe problem seems to be for only a few items:\r\n```\r\n/root/runtime/src/coreclr/tools/aot/ILCompiler.TypeSystem.ReadyToRun.Tests/ILTestAssembly/ILTestAssembly.ilproj : error NU1603: ILTestAssembly depends on runtime.linux-x64.Microsoft.NETCore.ILAsm (>= 6.0.0-dev.21281.99) but runtime.linux-x64.Microsoft.NETCore.ILAsm 6.0.0-dev.21281.99 was not found. An approximate best match of runtime.linux-x64.Microsoft.NETCore.ILAsm 6.0.0-preview.1.21071.15 was resolved. [/root/runtime/Build.proj]\r\n/root/runtime/src/libraries/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.ilproj : error NU1603: System.Runtime.CompilerServices.Unsafe depends on runtime.linux-x64.Microsoft.NETCore.ILAsm (>= 6.0.0-dev.21281.99) but runtime.linux-x64.Microsoft.NETCore.ILAsm 6.0.0-dev.21281.99 was not found. An approximate best match of runtime.linux-x64.Microsoft.NETCore.ILAsm 6.0.0-preview.1.21071.15 was resolved. [/root/runtime/Build.proj]\r\n```\r\nWhen I get some time to deep-dive it, I will look at the binlog and see if that has any clues\r\n\r\nedit: ok, I guess im an idiot. I never had that set hah!\r\n![image](https://user-images.githubusercontent.com/1910378/120242317-72bea600-c219-11eb-8631-d13cabfafb7b.png)\r\n\r\n- ibcmerge\r\n\r\nif `/p:EnableNgenOptimization=false` is not included in the build then the libs subset fails with a bunch of\r\n`The application to execute does not exist: '/root/runtime/.packages/microsoft.dotnet.ibcmerge/5.0.7-beta.20159.1/tools/netcoreapp2.0/ibcmerge.dll'`) \r\n\r\nI can't find anything that restores that package so im outta ideas on that one :(\r\nmaybe its related to the first issue? I really have no idea\r\n\r\n",
          "createdAt": "2021-05-31T20:58:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-31T21:10:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTY4MDAzMw=="
        },
        {
          "author": "wfurt",
          "body": "I feel there was some freebsd/RID change but I cannot find it ;(\r\nMaybe @ericstj or @safern have better memory than me. ",
          "createdAt": "2021-05-31T22:45:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-31T22:45:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTcwNzExNQ=="
        },
        {
          "author": "josteink",
          "body": "Just shooting blanks, but maybe one of the Jan's can provide some insight here?\r\n\r\ncc: @jkotas or @janvorli ",
          "createdAt": "2021-06-01T06:56:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-01T06:56:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTg3NDAzOQ=="
        },
        {
          "author": "sec",
          "body": "> I feel there was some freebsd/RID change but I cannot find it ;(\r\n> Maybe @ericstj or @safern have better memory than me.\r\n\r\nhttps://github.com/jasonpugsley/runtime/commit/cc43bef7f1322871f2e538d41b8263bf958f40a4 ?\r\n\r\nedit: I've built SDK with those changes and in the end it was still thinking it's \"linux\" in the end.",
          "createdAt": "2021-06-01T10:43:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-01T10:46:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjAyMjgzOQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "I'm just starting to look at net6 preview2.\r\n@Thefrank For a native build, try adding `/p:RuntimeOS=freebsd12` to use the freebsd ilasm instead of linux.\r\nmono has changed quite a lot, a quick hack gets it to compile for me with changes to these two CMakeLists files:\r\n```diff\r\ndiff --git a/src/mono/CMakeLists.txt b/src/mono/CMakeLists.txt\r\nindex b502956fa75..31a3917f1e5 100644\r\n--- a/src/mono/CMakeLists.txt\r\n+++ b/src/mono/CMakeLists.txt\r\n@@ -242,6 +242,9 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\r\n     add_compile_options(/GL) # whole program optimization\r\n     add_link_options(/LTCG)  # link-time code generation\r\n   endif()\r\n+elseif(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\r\n+  set(HOST_FREEBSD 1)\r\n+  add_link_options(-lpthread -lm)\r\n else()\r\n   message(FATAL_ERROR \"Host '${CMAKE_SYSTEM_NAME}' not supported.\")\r\n endif()\r\n@@ -278,6 +281,8 @@ elseif(TARGET_SYSTEM_NAME STREQUAL \"Emscripten\")\r\n   endif()\r\n elseif(TARGET_SYSTEM_NAME STREQUAL \"Windows\")\r\n   set(TARGET_WIN32 1)\r\n+elseif(TARGET_SYSTEM_NAME STREQUAL \"FreeBSD\")\r\n+  set(TARGET_FREEBSD 1)\r\n else()\r\n   message(FATAL_ERROR \"Target '${TARGET_SYSTEM_NAME}' not supported.\")\r\n endif()\r\n@@ -306,7 +311,7 @@ elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"i686\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL\r\n   set(CMAKE_SYSTEM_PROCESSOR \"x86\")\r\n elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\r\n   set(CMAKE_SYSTEM_PROCESSOR \"arm64\")\r\n-elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"x64\")\r\n+elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"x64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"amd64\")\r\n   set(CMAKE_SYSTEM_PROCESSOR \"x86_64\")\r\n endif()\r\n \r\n@@ -341,7 +346,7 @@ elseif(TARGET_ARCH STREQUAL \"i686\" OR TARGET_ARCH STREQUAL \"i386\" OR TARGET_ARCH\r\n   set(TARGET_ARCH \"x86\")\r\n elseif(TARGET_ARCH STREQUAL \"aarch64\" OR TARGET_ARCH STREQUAL \"ARM64\")\r\n   set(TARGET_ARCH \"arm64\")\r\n-elseif(TARGET_ARCH STREQUAL \"AMD64\" OR TARGET_ARCH STREQUAL \"x64\")\r\n+elseif(TARGET_ARCH STREQUAL \"AMD64\" OR TARGET_ARCH STREQUAL \"x64\" OR TARGET_ARCH STREQUAL \"amd64\")\r\n   set(TARGET_ARCH \"x86_64\")\r\n endif()\r\n \r\n@@ -533,6 +538,14 @@ elseif(HOST_LINUX)\r\n elseif(HOST_WIN32)\r\n   set(ICU_FLAGS \"-DTARGET_WINDOWS -DPALEXPORT=EXTERN_C\")\r\n   set(HAVE_SYS_ICU 1)\r\n+elseif(HOST_FREEBSD)\r\n+  include(FindPkgConfig)\r\n+  pkg_check_modules(ICU icu-uc)\r\n+  set(ICU_FLAGS \"-DTARGET_UNIX -DU_DISABLE_RENAMING -Wno-reserved-id-macro -Wno-documentation -Wno-documentation-unknown-command -Wno-switch-enum -Wno-covered-switch-default -Wno-extra-semi-stmt -Wno-unknown-warning-option -Wno-deprecated-declarations\")\r\n+  set(HAVE_SYS_ICU 1)\r\n+  set(HAVE_ALLOCA_H 0)\r\n+  set(HAVE_SYS_SYSCTL_H 1)\r\n+  set(HAVE_SYS_USER_H 1)\r\n else()\r\n   message(FATAL_ERROR \"Unknown host\")\r\n endif()\r\ndiff --git a/src/mono/mono/mini/CMakeLists.txt b/src/mono/mono/mini/CMakeLists.txt\r\nindex 8cc631c28d0..e4911757c49 100644\r\n--- a/src/mono/mono/mini/CMakeLists.txt\r\n+++ b/src/mono/mono/mini/CMakeLists.txt\r\n@@ -244,7 +244,7 @@ set(posix_sources\r\n \r\n if(HOST_DARWIN)\r\n set(os_sources \"${darwin_sources};${posix_sources}\")\r\n-elseif(HOST_LINUX)\r\n+elseif(HOST_LINUX OR HOST_FREEBSD)\r\n set(os_sources \"${posix_sources}\")\r\n elseif(HOST_WIN32)\r\n set(os_sources \"${windows_sources}\")\r\n```\r\nAnd ensure you have pkgconf installed `sudo pkg install devel/pkgconf`\r\nI'll look at the other repos when I have a bit more time.",
          "createdAt": "2021-06-01T14:53:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-01T14:53:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjE5MTU1OQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "It looks like the change to Directory.Build.props in 75d5cc3df4dd is the issue.\r\n\r\nIf we start with `__DistroRid` is freebsd-x64, then follow through the following:\r\n\r\n\r\n```xml\r\n    <_parseDistroRid>$(__DistroRid)</_parseDistroRid>\r\n    <_parseDistroRid Condition=\"'$(_parseDistroRid)' == '' and '$(MSBuildRuntimeType)' == 'core'\">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</_parseDistroRid>\r\n    <_parseDistroRid Condition=\"'$(_parseDistroRid)' == '' and '$(MSBuildRuntimeType)' != 'core'\">win-$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLowerInvariant)</_parseDistroRid>\r\n    <_distroRidIndex>$(_parseDistroRid.LastIndexOfAny(\"-\"))</_distroRidIndex>\r\n\r\n    <_runtimeOS>$(RuntimeOS)</_runtimeOS>\r\n    <_runtimeOS Condition=\"'$(_runtimeOS)' == ''\">$(_parseDistroRid.SubString(0, $(_distroRidIndex)))</_runtimeOS>\r\n\r\n    <!-- _runtimeOS is calculated based on the build system OS, however if building for Browser/iOS/Android we need to let\r\n         the build system to use browser/ios/android as the _runtimeOS for produced package RIDs. -->\r\n    <_runtimeOS Condition=\"'$(TargetsMobile)' == 'true'\">$(TargetOS.ToLowerInvariant())</_runtimeOS>\r\n\r\n    <_runtimeOSVersionIndex>$(_runtimeOS.IndexOfAny(\".-0123456789\"))</_runtimeOSVersionIndex>\r\n    <_runtimeOSFamily Condition=\"'$(_runtimeOSVersionIndex)' != '-1'\">$(_runtimeOS.SubString(0, $(_runtimeOSVersionIndex)))</_runtimeOSFamily>\r\n\r\n    <_portableOS>linux</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'linux-musl'\">linux-musl</_portableOS>\r\n    <_portableOS Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">osx</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOSFamily)' == 'win' or '$(_runtimeOS)' == 'win' or '$(TargetOS)' == 'windows'\">win</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOSFamily)' == 'FreeBSD'\">freebsd</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOSFamily)' == 'illumos'\">illumos</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOSFamily)' == 'Solaris'\">solaris</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'Browser'\">browser</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'maccatalyst'\">maccatalyst</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'ios'\">ios</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'tvos'\">tvos</_portableOS>\r\n    <_portableOS Condition=\"'$(_runtimeOS)' == 'android'\">android</_portableOS>\r\n\r\n    <_runtimeOS Condition=\"$(_runtimeOS.StartsWith('tizen'))\">linux</_runtimeOS>\r\n    <_runtimeOS Condition=\"'$(PortableBuild)' == 'true'\">$(_portableOS)</_runtimeOS>\r\n```\r\nIt looks like `_runtimeOSFamily` does not get a value so `_portableOS` remains as `linux` and gets assigned to `_runtimeOS` at the end.\r\nI think if `__DistroRid` was `freebsd.12-x64` then it would have been OK as `_runtimeOSFamily` would then get set to `freebsd`. Forcing a value for `RuntimeOS` bypasses some of this.\r\nIt's late - I could be wrong :)",
          "createdAt": "2021-06-01T15:42:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-15T09:03:32Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOButxBQ=="
          },
          "updatedAt": "2021-06-01T15:42:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjIzMDIyMw=="
        },
        {
          "author": "ericstj",
          "body": "cc @ViktorHofer \r\n\r\nI haven't dug in, but a few things above that standout.  ILASM is restored during the build process using a RID, it's one of the only tools that is RID specific and required by build (most come with the CLI itself) so check how that restore process works.\r\nIBCMerge applies NGEN optimization data from the perf-lab.  I wouldn't expect that to run for dev builds, nor would I expect it have FreeBSD specific data to merge.  Just make sure that's disabled.\r\n\r\nWe really need to maintain and minimize the number of RID-like parameters our build takes.  I feel like this problem got worse when combining the repos. ",
          "createdAt": "2021-06-01T16:10:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-01T16:10:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjI1MDUzOQ=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley \r\n- `/p:RuntimeOS=freebsd12` does get it to build without trying to grab linux items.\r\n- the diff you posted gets mono to build\r\n- https://github.com/dotnet/runtime/commit/b5e2c5f2a7e9930cb046e40e3c4eef620e5c285e is helpful if you have more than one core as it didnt make it into preview 2\r\n- crossgen still appears to cause crashes in the clr subset\r\n- complete command used `./build.sh -c Release -ci /p:OfficialBuildId=20210601-99 /p:CrossgenOutput=false /p:DISABLE_CROSSGEN=True /p:EnableNgenOptimization=false /p:RuntimeOS=freebsd12 --nodeReuse false`\r\n\r\nthat should (hopefully) build without issue.\r\n\r\nI will look at aspnetcore next which shouldn't require as much work\r\nI am dreading looking into sdk or installer as I will likely end up needing to find a version of net6 that can use net5 as input and produce net6 as an output",
          "createdAt": "2021-06-01T21:51:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-02T01:29:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjQ3MTgxMw=="
        },
        {
          "author": "Thefrank",
          "body": "One day later and thinking fixing the crossbuild issue might be an easier start...\r\n\r\nCrossbuilds from Linux -> FreeBSD seem to be having similar issues as native builds and require `/p:RuntimeOS=freebsd12` into the `docker run` command for the runtime. It runs into the same issues of needing pre-existing nuget packages for IL(A/D)SM and a few other platform specific ones.\r\n\r\neven with that...\r\n\r\nThe build still fails right at the end of the CLR subset:\r\n```\r\n  Product binaries are available at /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release\r\n  runincontext -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/runincontext.dll\r\n  ILCompiler.Diagnostics -> /runtime/artifacts/bin/ILCompiler.Diagnostics/x64/Release/ILCompiler.Diagnostics.dll\r\n  ILCompiler.Reflection.ReadyToRun -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/ILCompiler.Reflection.ReadyToRun.dll\r\n  R2RDump -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/R2RDump/R2RDump.dll\r\n  ILCompiler.TypeSystem.ReadyToRun -> /runtime/artifacts/bin/ILCompiler.TypeSystem.ReadyToRun/x64/Release/ILCompiler.TypeSystem.ReadyToRun.dll\r\n  dotnet-pgo -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/dotnet-pgo/dotnet-pgo.dll\r\n  R2RTest -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/R2RTest/R2RTest.dll\r\n  ILCompiler.DependencyAnalysisFramework -> /runtime/artifacts/bin/ILCompiler.DependencyAnalysisFramework/x64/Release/ILCompiler.DependencyAnalysisFramework.dll\r\n  ILCompiler.ReadyToRun -> /runtime/artifacts/bin/ILCompiler.ReadyToRun/x64/Release/ILCompiler.ReadyToRun.dll\r\n  crossgen2 -> /runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/crossgen2.dll\r\n  CoreTestAssembly -> /runtime/artifacts/bin/CoreTestAssembly/x64/Release/CoreTestAssembly.dll\r\n  /bin/sh: 2: /tmp/tmp6fc1cad6495e4d469cdb8ffa0c71fb18.exec.cmd: /runtime/.packages/runtime.freebsd-x64.microsoft.netcore.ilasm/5.0.6-servicing.21261.99/runtimes/freebsd-x64/native/ilasm: not found\r\n```\r\nI have no idea what the `.exec.cmd` is trying to do but best guess is that it is trying to run a FreeBSD ELF under Linux. The file `/tmp/tmp.exec.cmd` appears to be cleaned up when the build fails as its not in `/tmp` docker's `/tmp` or even the crossrootfs `/tmp`\r\n\r\nAs a side note, the two docker containers listed for FreeBSD are out of date: \r\n- freebsd/11 is 11.3 which is EOL now and all of 11 is going EOL in just a few months\r\n- freebsd/12 is 12.1 is EOL already. currently supported is 12.2\r\n",
          "createdAt": "2021-06-03T00:18:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-03T00:18:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MzQ2NDkyOA=="
        },
        {
          "author": "Thefrank",
          "body": "Another update and it doesn't look good :(\r\n\r\nFirst item:\r\nThe runtime build process fails if doing a full run but has no issues just doing `coreclr` subset first then the rest of the subsets. The crash that I am encountering during a full run is this ugly mess:\r\n```\r\n\r\n/root/runtime/dotnet.sh /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/crossgen2.dll -o:/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/System.Private.CoreLib.dll -r:/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/IL/*.dll --targetarch:x64 -O /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/IL/System.Private.CoreLib.dll\r\nEXEC : error : One or more errors occurred. (External component has thrown an exception.) (External component has thrown an exception.) [/root/runtime/src/coreclr/crossgen-corelib.proj]\r\n  System.AggregateException: One or more errors occurred. (External component has thrown an exception.) (External component has thrown an exception.)\r\n   ---> System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadByName(String libraryName, QCallAssembly callingAssembly, Boolean hasDllImportSearchPathFlag, UInt32 dllImportSearchPathFlag, Boolean throwOnError)\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadLibraryByName(String libraryName, Assembly assembly, Nullable`1 searchPath, Boolean throwOnError)\r\n     at System.Runtime.InteropServices.NativeLibrary.Load(String libraryName, Assembly assembly, Nullable`1 searchPath)\r\n     at Internal.JitInterface.JitConfigProvider.<>c__DisplayClass5_0.<Initialize>b__0(String libName, Assembly assembly, Nullable`1 searchPath)\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadLibraryCallbackStub(String libraryName, Assembly assembly, Boolean hasDllImportSearchPathFlags, UInt32 dllImportSearchPathFlags)\r\n     at Internal.JitInterface.CorInfoImpl.getJit()\r\n     at Internal.JitInterface.CorInfoImpl..ctor()\r\n     at Internal.JitInterface.CorInfoImpl..ctor(ReadyToRunCodegenCompilation compilation)\r\n     at ILCompiler.ReadyToRunCodegenCompilation.<ComputeDependencyNodeDependencies>b__35_1(Thread thread)\r\n     at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValueLocked(TKey key, CreateValueCallback createValueCallback)\r\n     at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)\r\n     at ILCompiler.ReadyToRunCodegenCompilation.<ComputeDependencyNodeDependencies>b__35_0(DependencyNodeCore`1 dependency)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass33_0`2.<ForEachWorker>b__0(Int32 i)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n  --- End of stack trace from previous location ---\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean& yieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica.Execute()\r\n     --- End of inner exception stack trace ---\r\n     at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n  --- End of stack trace from previous location ---\r\n     at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n     at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IList`1 list, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n     at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n     at System.Threading.Tasks.Parallel.ForEach[TSource](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body)\r\n     at ILCompiler.ReadyToRunCodegenCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.ReadyToRunCodegenCompilation.Compile(String outputFile)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n   ---> (Inner Exception #1) System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadByName(String libraryName, QCallAssembly callingAssembly, Boolean hasDllImportSearchPathFlag, UInt32 dllImportSearchPathFlag, Boolean throwOnError)\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadLibraryByName(String libraryName, Assembly assembly, Nullable`1 searchPath, Boolean throwOnError)\r\n     at System.Runtime.InteropServices.NativeLibrary.Load(String libraryName, Assembly assembly, Nullable`1 searchPath)\r\n     at Internal.JitInterface.JitConfigProvider.<>c__DisplayClass5_0.<Initialize>b__0(String libName, Assembly assembly, Nullable`1 searchPath)\r\n     at System.Runtime.InteropServices.NativeLibrary.LoadLibraryCallbackStub(String libraryName, Assembly assembly, Boolean hasDllImportSearchPathFlags, UInt32 dllImportSearchPathFlags)\r\n     at Internal.JitInterface.CorInfoImpl.getJit()\r\n     at Internal.JitInterface.CorInfoImpl..ctor()\r\n     at Internal.JitInterface.CorInfoImpl..ctor(ReadyToRunCodegenCompilation compilation)\r\n     at ILCompiler.ReadyToRunCodegenCompilation.<ComputeDependencyNodeDependencies>b__35_1(Thread thread)\r\n     at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValueLocked(TKey key, CreateValueCallback createValueCallback)\r\n     at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)\r\n     at ILCompiler.ReadyToRunCodegenCompilation.<ComputeDependencyNodeDependencies>b__35_0(DependencyNodeCore`1 dependency)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass33_0`2.<ForEachWorker>b__0(Int32 i)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n  --- End of stack trace from previous location ---\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean& yieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica.Execute()<---\r\n  \r\n/root/runtime/src/coreclr/crossgen-corelib.proj(105,5): error MSB3073: The command \"/root/runtime/dotnet.sh /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/crossgen2.dll -o:/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/System.Private.CoreLib.dll -r:/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/IL/*.dll --targetarch:x64 -O /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/IL/System.Private.CoreLib.dll\" exited with code 1.\r\n\r\n```\r\n\r\nSecond item: \r\nStill getting segfaults from the final product. I have attached the output of `truss -f -H -o trussdotnet.log ./dotnet --info` for someone who has a better understanding of what might be going on.\r\n\r\n[trussdotnet.log](https://github.com/dotnet/runtime/files/6602064/trussdotnet.log)\r\n\r\n\r\nIf I have some free time this weekend I will try an earlier preview/commit and hopefully be able to get a better idea of when this started to fail.\r\n\r\n\r\n-----------------------\r\nedit June 6th 2021:\r\n\r\ngrabbed a random set of runtime+aspnetcore+installer from Dec 8 (date picked at random) from main branch and everything still works! \r\n\r\nSometime between Dec 8 and Feb 17 (preview 1) something broke FreeBSD\r\n\r\n\r\n```root@dotnet6:~/dotnet6test # ../dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-alpha.1.20609.11\r\n Commit:    0f985b1947\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-alpha.1.20609.11/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-alpha.1.20609.11\r\n  Commit:  b65825e27a\r\n\r\n.NET SDKs installed:\r\n  6.0.100-alpha.1.20609.11 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-alpha.1.20609.11 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-alpha.1.20609.11 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nroot@dotnet6:~/dotnet6test # ./bin/Debug/net6.0/freebsd-x64/publish/test\r\nHello World!\r\n```",
          "createdAt": "2021-06-05T05:48:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-07T02:16:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTE4ODc4OA=="
        },
        {
          "author": "sec",
          "body": "@Thefrank I'm not an expert at debuging those kind of stuff, but doing some traces with:\r\n```\r\nexport COREHOST_TRACE=1\r\nexport LD_DEBUG=all\r\n```\r\n\r\nGot me this:\r\n```\r\nLaunch host: /usr/home/sec/net6/dotnet, app: /usr/home/sec/net6/sdk/6.0.100-preview.4.21255.9/dotnet.dll, argc: 1, args: --info,\r\n--- Begin breadcrumb write\r\nDirectory core breadcrumbs [] was not specified or found\r\nFallback directory core breadcrumbs at [opt/corebreadcrumbs] was not found\r\nBreadcrumb store was not obtained... skipping write.\r\n\"_ZNSt3__16threadD1Ev\" in \"libhostpolicy.so\" ==> 0x8013117a0 in \"libc++.so.1\"\r\nreloc_jmpslot: *0x8024a4178 = 0x8013117a0\r\n\"_ZNSt3__119__shared_weak_count14__release_weakEv\" in \"libhostpolicy.so\" ==> 0x801367170 in \"libc++.so.1\"\r\nreloc_jmpslot: *0x8024a4080 = 0x801367170\r\n\"fflush\" in \"libhostpolicy.so\" ==> 0x80159a670 in \"libc.so.7\"\r\nreloc_jmpslot: *0x8024a4340 = 0x80159a670\r\n\"strstr\" in \"libcoreclr.so\" ==> 0x8014c0c10 in \"libc.so.7\"\r\nreloc_jmpslot: *0x802ea8480 = 0x8014c0c10\r\n\"pthread_sigmask\" in \"libcoreclr.so\" ==> 0x80128e640 in \"libthr.so.3\"\r\nreloc_jmpslot: *0x802ea8710 = 0x80128e640\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nCompare this to output of working .net6 build:\r\n```\r\nLaunch host: /usr/home/sec/net6w/dotnet, app: /usr/home/sec/net6w/sdk/6.0.100-alpha.1.20609.11/dotnet.dll, argc: 1, args: --info,\r\n--- Begin breadcrumb write\r\nDirectory core breadcrumbs [] was not specified or found\r\nFallback directory core breadcrumbs at [opt/corebreadcrumbs] was not found\r\nBreadcrumb store was not obtained... skipping write.\r\n\"_ZNSt3__16threadD1Ev\" in \"libhostpolicy.so\" ==> 0x8013117a0 in \"libc++.so.1\"\r\nreloc_jmpslot: *0x8024a2180 = 0x8013117a0\r\n\"_ZNSt3__119__shared_weak_count14__release_weakEv\" in \"libhostpolicy.so\" ==> 0x801367170 in \"libc++.so.1\"\r\nreloc_jmpslot: *0x8024a2080 = 0x801367170\r\n\"fflush\" in \"libhostpolicy.so\" ==> 0x80159a670 in \"libc.so.7\"\r\nreloc_jmpslot: *0x8024a2348 = 0x80159a670\r\n\"strstr\" in \"libcoreclr.so\" ==> 0x8014c0c10 in \"libc.so.7\"\r\nreloc_jmpslot: *0x802e94478 = 0x8014c0c10\r\ndlopen_object name \"/usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so\" fd -1 refobj \"/usr/home/sec/net6w/dotnet\" lo_flags 0x2 mode 0x1\r\nloading \"/usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so\"\r\nIgnoring d_tag 1879048185 = 0x6ffffff9\r\n/usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so valid_hash_sysv 1 valid_hash_gnu 1 dynsymcount 358\r\n  0x8a4c00000 .. 0x8a4e14fff: /usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so\r\n Searching for \"libinotify.so.0\"\r\nlm_find(\"/usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so\", \"/usr/local/lib\")\r\nlmp_find(\"/usr/home/sec/net6w/shared/Microsoft.NETCore.App/6.0.0-alpha.1.20609.11/libSystem.Native.so\")\r\nlmp_find(\"$DEFAULT$\")\r\n  Trying \"/usr/local/lib/libinotify.so.0\"\r\n  Opened \"/usr/local/lib/libinotify.so.0\", fd 27\r\nloading \"/usr/local/lib/libinotify.so.0\"\r\n```\r\n\r\nThat `pthread_sigmask` after 'strstr' looks interesting, as I don't see that call in \"working 6\". Looked for that call and https://github.com/dotnet/runtime/commits/dcef2897eb61012d6e8c2ccc44e72eb7c173e06b/src/libraries/Native/Unix/System.Native/pal_process.c - Dec 8, Dec 18 and Jan 29 (2021) are the latest commits to this file :) Don't know if this is the correct way or hwo to debug this further :(\r\n\r\n@Thefrank are you still crossbuilding v6 under linux using your \"helper\" scripts?",
          "createdAt": "2021-06-07T13:53:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-07T13:53:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTk0OTkzMg=="
        },
        {
          "author": "Thefrank",
          "body": "> @Thefrank are you still crossbuilding v6 under linux using your \"helper\" scripts?\r\n\r\nyes because its easier to use that than not using it and have to apply about a dozen different patches each to runtime and aspnetcore every time I want to test a new build :(\r\n\r\nI grabbed a random commit in runtime+aspnetcore+installer from Jan 8 2021 last night and finally got it finished. \r\nStill no issues:\r\n\r\n```\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-alpha.1.21057.2\r\n Commit:    7b255431d7\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-alpha.1.21057.2/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-alpha.1.21057.2\r\n  Commit:  8872a568f8\r\n\r\n.NET SDKs installed:\r\n  6.0.100-alpha.1.21057.2 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-alpha.1.21057.2 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-alpha.1.21057.2 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI might have some free time mid/end of week to grab something closer to preview 1. I will try something after that commit to `pal_process.c`\r\n\r\n\r\n----------\r\nEdit:\r\n\r\nI am so confused now. This set from Feb 1/2 which appears to be right on the line of the preview 1 -> preview 2 change over does not have issues either. \r\n\r\n```\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.1.21101.2\r\n Commit:    f45c9a08b3\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-preview.1.21101.2/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.2.21101.2\r\n  Commit:  19666d437b\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.1.21101.2 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.2.21101.2 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.2.21101.2 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI guess the upside to my confusion is that the break happened sometime between Feb (preview 1) and March (preview 2)\r\n\r\n----------\r\nEdit\r\n\r\n```\r\nroot@dotnet6:~ # tar xf dotnet-sdk-6.0.100-preview.2.21115.2-freebsd-x64.tar.gz -C dotnet6\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\nSegmentation fault\r\n```\r\n\r\nBetween Feb 1 and Feb 15 so only ~200 commits",
          "createdAt": "2021-06-07T20:37:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-08T08:04:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjI0MDgzNQ=="
        },
        {
          "author": "sec",
          "body": "@Thefrank would you mind sharing steps/scripts that you're using to build v6 previews? After many tries I cannot get them to build in sync. Runtime is fine, but aspnetcore is failing, for ex.:\r\n```\r\n/home/sec/dotnet-freebsd-crossbuild/aspnetcore/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1603: Microsoft.AspNetCore.App.Runtime.freebsd-x64 depends on Microsoft.NETCore.App.Runtime.freebsd-x64 (>= 6.0.0-preview.2.21154.6) but Microsoft.NETCore.App.Runtime.freebsd-x64 6.0.0-preview.2.21154.6 was not found. An approximate best match of Microsoft.NETCore.App.Runtime.freebsd-x64 6.0.0-preview.2.21308.99 was resolved. [/home/sec/dotnet-freebsd-crossbuild/aspnetcore/.dotnet/sdk/6.0.100-preview.2.21118.6/NuGet.targets]\r\n```\r\n\r\nI think I've adjusted your build script for v6 and tried those tags:\r\n```\r\nRUNTIMETAG=v6.0.0-preview.2.21154.6\r\nASPNETTAG=v6.0.0-preview.2.21154.6\r\nINSTALLERTAG=v6.0.100-preview.2.21155.3\r\n```\r\n\r\nIf I could get reproducable, automated build I could help with finding commit that broke the runtime - at least I hope so :)",
          "createdAt": "2021-06-08T20:07:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-08T20:07:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NzA4MzM2Nw=="
        },
        {
          "author": "Thefrank",
          "body": "@sec \r\n\r\nI broke my script apart into three subscripts and even then I still need to manually make adjustments to files inside the `installer` component. Building stuff that does not have a tag is a pain and I get the feeling that building stuff in dev is not really what the dotNET team wants us to be doing lol\r\n\r\nI start with looking at what aspnetcore wants for a runtime requirement, find that day (or a day close it to) and use the `/p:OFFICIALBUILDID=` to force it to the right version. Runtime will build with that as its BuildID everywhere and aspnetcore will accept that. Now, the installer part will require you modify the contents of its `eng/Versions.Props` for the versions of runtime and aspnetcore you built. If you picked an installer at or near the same day as your runtime and aspnetcore you will like only need to modify the minor version and now the major version.\r\n\r\nIf you need a way to back engineer how those buildIDs work you can use this bash script: https://github.com/Servarr/dotnet-bsd/blob/v6/common.sh just feed it an ID (e.g., `v6.0.0-preview.2.21154.6`) and it will spit out a date formatted as `YYYYMMDD.MINORVERSION` that you can use\r\n\r\n--------------\r\nEDIT: between Feb 8 and Feb 15 might be enough to dig through each commit and see if anything pops out as \"this kills FreeBSD\"\r\n\r\n```\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.1.21108.2\r\n Commit:    c3f759a227\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-preview.1.21108.2/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.2.21108.2\r\n  Commit:  7a02164cd0\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.1.21108.2 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.2.21108.2 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.2.21108.2 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nactual commits used as the aspnetcore one doesn't show up anywhere and full hash might be needed in some places:\r\nruntime/commit/7a02164cd0a1944fc9f23d5064eef6561693401f\r\naspnetcore/commit/a78322dc7e9c81bac3aa79c63482a13e7425935a\r\ninstaller/commit/c3f759a227d9fdb630e09055f9f095bb8da9934e\r\n\r\nedit again:\r\nstill no issues up to:\r\nruntime/commit/683fe750d27d77998651f972ee7a76c1c24485fa\r\naspnetcore/commit/c37ee71ca5192b4a8473e2d3d65daad392f29a36\r\ninstaller/commit/5e82b739464cbcc4fe3f2f7fbd6c3130e9756369\r\n\r\nthis bring us down to ~30 commits in runtime. none of them scream \"I break an entire OS\". Hopefully it isn't something like an SDK change that is nuking this :(\r\n\r\nfinal edit until I have an absolute answer but im down to two days (~25 commits from runtime):\r\nruntime/commit/7b36d47aaa52865a0d2293140b014a08f2974f47\r\naspnetcore/commit/e1bda79d87aa712a0b053824b4d31afa2c66cdce\r\ninstaller/commit/9c64b7b297fe0235d09490f0603f4f564df4a329\r\n\r\n-----------\r\n\r\nanswer:\r\nreverting this commit appears to resolve the issue:\r\nhttps://github.com/dotnet/runtime/commit/6055dfa7ecb7628fdb2570d8897e83520f69f280 and previously segfault-ing packages now atleast spit out a `./dotnet --info`\r\n\r\nif this holds for much new builds then a better fix would be to make it `CLR_CMAKE_TARGET_LINUX OR CLR_CMAKE_TARGET_FREEBSD` or maybe a `NOT CLR_CMAKE_TARGET_OSX` as this change from UNIX->LINUX may have bricked all other non-linux, unix builds\r\n\r\nI am going to try builds that are more recent and hopefully get a result in a few hours. Not having an Official CI for FreeBSD feels bad as finding a problem via bisection was painful and slow.\r\n\r\n----------\r\n\r\nthe conclusion: reverting the problematic commit allows preview 2 (built from tag for `runtime` `aspnetcore` and `installer`) to run without segfault. :D",
          "createdAt": "2021-06-08T20:48:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-06-11T12:23:31Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBuW94w=="
          },
          "updatedAt": "2021-06-11T00:19:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NzEyODExNQ=="
        },
        {
          "author": "Thefrank",
          "body": "well, fixed one very out of date preview and the next one (preview 3) also segfaults (even after reverting the problem commit) for a different reason. I am done playing \"find the commit the bricks that this post-build\". Got as far back as Feb 24 in builds (still segfaulting)  before giving up so if anyone else wants to mess with it then, go for it but remember you will need to revert or patch out the problem commit before building.\r\n\r\ntruss and lldb if someone wants to poke it.\r\n[lldbdotnetpreview3.log](https://github.com/dotnet/runtime/files/6641136/lldbdotnetpreview3.log)\r\n[trussdotnetpreview3.log](https://github.com/dotnet/runtime/files/6641137/trussdotnetpreview3.log)\r\n\r\nI quit for now. I simply don't have the time nor patience for this. I will come back to this in a week or so.\r\n\r\nedit: phrasing. less-rage quit and more \"I need a break\"",
          "createdAt": "2021-06-11T22:15:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-12T00:56:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTkzNTgwMg=="
        },
        {
          "author": "Thefrank",
          "body": "preview 5 just got pushed out and it won't even cross-build without changes:\r\n- aspnetcore needs the crossgen2 nupkg output from runtime otherwise restore fails\r\n  - runtime does not generate this as its explicitly turned off\r\n- installer spits out a ton of non-fatal warnings about assembly versions being wrong\r\n- **the finished product still segfaults**\r\n\r\nIf I have time this weekend I will try and figure out the problem commit(s) that caused breakage in preview 3 but \"build until you get a working product\" is a pretty painful method and I lack the knowledge of how to debug this output efficiently which might provide some clues. We also don't have SOS for FreeBSD which makes debugging even more challenging [maybe impossible?]",
          "createdAt": "2021-06-18T07:03:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-18T07:03:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzgwODg5OA=="
        },
        {
          "author": "wfurt",
          "body": "Did you try to build the sos from diagnostic repo? It used to work and if it does not any more, we should try to fix it. I agree that without debugger debugging is hard.",
          "createdAt": "2021-06-18T08:25:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-18T08:25:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2Mzg1ODQ2OA=="
        },
        {
          "author": "Thefrank",
          "body": "@wfurt it does not build for me:\r\n\r\n- `gen-buildsys-clang.sh` does not appear to be able to understand that llvm versions > 9 exist. This is not a huge problem, llvm9->12 are supported under FreeBSD 12\r\n- `LLDB_INCLUDE_DIR` `LLDB_LIB_DIR` need to be set otherwise the configure fails\r\n\r\nmanually making the above changes gets the build to at least start but it still fails with:\r\n```\r\n/root/diagnostics/src/pal/src/misc/sysinfo.cpp:301:10: error: use of undeclared identifier 'sysctlnametomib'\r\n    rc = sysctlnametomib(\"vm.swap_info\", mib, &length);\r\n         ^\r\n/root/diagnostics/src/pal/src/misc/sysinfo.cpp:309:18: error: use of undeclared identifier 'sysctl'\r\n            rc = sysctl(mib, 3, &xsw, &length, NULL, 0);\r\n```\r\n\r\nThere are other annoying (but non-critical) things:\r\n- despite restore succeeding it still reports that it failed with error code 139. using `--ci` seems to override this behavior and the build continues\r\n- it seems to default to llvm 3.9. This is not a problem if 100% building from source or using an older docker/vm but many OSes don't have packages for this due to age.\r\n- `eng/build.sh` doesn't understand that amd64 = x64 as `uname -m` and `uname -p` both return `amd64` on FreeBSD. It thankfully defaults to x64 without needing to change case logic.\r\n- cpu number dectection is wrong for freebsd thus defaulting to `-j 1`. Not much of an issue on a small project\r\n\r\n\r\nI am likely missing something obvious to get this fixed but I am feeling very overwhelmed by everything that needs to be done in order to get anything dotnet6 running under FreeBSD.\r\n",
          "createdAt": "2021-06-18T17:52:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-18T17:52:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDE5MTc4Mg=="
        },
        {
          "author": "wfurt",
          "body": "diagnostics is separate beast. We should contribute changes to make it build again - regardless of runtime. ",
          "createdAt": "2021-06-18T17:55:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-18T17:55:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDE5Mjg0MA=="
        },
        {
          "author": "Thefrank",
          "body": "\r\n @wfurt sadly, it will likely need quite a bit of work if `elfreader` is to be included\r\n\r\n```\r\n[ 78%] Building CXX object src/SOS/dbgutil/CMakeFiles/dbgutil.dir/elfreader.cpp.o\r\n/root/diagnostics/src/SOS/dbgutil/elfreader.cpp:396:33: error: cannot initialize a parameter of type 'void *' with an rvalue of type 'const char *'\r\n                if (!ReadMemory(map.l_name + i, &ch, sizeof(ch))) {\r\n                                ^~~~~~~~~~~~~~\r\n/root/diagnostics/src/SOS/dbgutil/elfreader.h:68:35: note: passing argument to parameter 'address' here\r\n    virtual bool ReadMemory(void* address, void* buffer, size_t size) = 0;\r\n                                  ^\r\n/root/diagnostics/src/SOS/dbgutil/elfreader.cpp:409:21: error: cannot initialize a parameter of type 'uint64_t' (aka 'unsigned long') with an lvalue of type 'caddr_t' (aka 'char *')\r\n        VisitModule(map.l_addr, moduleName);\r\n                    ^~~~~~~~~~\r\n/root/diagnostics/src/SOS/dbgutil/elfreader.h:66:39: note: passing argument to parameter 'baseAddress' here\r\n    virtual void VisitModule(uint64_t baseAddress, std::string& moduleName) { };\r\n                                      ^\r\n2 errors generated.\r\n*** [src/SOS/dbgutil/CMakeFiles/dbgutil.dir/elfreader.cpp.o] Error code 1\r\n```\r\n\r\nThe new wall I am hitting: other OSes define `Link_map` in their `link.h` differently than the Linux kernel does. \r\n\r\nSpoiler: of the six platforms listed, 5 of the 6 are all different from eachother.\r\n\r\n\r\nLinux: https://man7.org/linux/man-pages/man3/dlinfo.3.html \r\nFreeBSD: https://www.freebsd.org/cgi/man.cgi?query=dlinfo&sektion=3 \r\n\r\nand just for insanity if trying to make it multiplatform:\r\nNetBSD: https://man.netbsd.org/dlinfo.3\r\nOpenBSD (dlinfo is not in OpenBSD AFAIK): https://man.openbsd.org/OpenBSD-5.3/link.5\r\n(These two are actually the same!)\r\nIllumos: https://illumos.org/man/3C/dlinfo\r\nSunOS: https://docs.oracle.com/cd/E36784_01/html/E36874/dlinfo-3c.html\r\n\r\n`src/SOS/dbgutil/elfreader.h` and `elfreader.cpp` are very much Linux-only. The rest of `dbgutil` looks rather agnostic, is needed to build the repo, and can build around `elfreader`...so I built around `elfreader` \r\n\r\nFinal output is three files:\r\n```\r\nlibsos.so       \r\nlibsosplugin.so \r\nsosdocsunix.txt\r\n```\r\nVictory?! No.\r\n\r\n```\r\n(lldb) plugin load diagnostics/artifacts/bin/dotnet-sos/Debug/netcoreapp2.1/publish/freebsd.12-x64/libsosplugin.so\r\nerror: this file does not represent a loadable dylib\r\n```\r\n\r\n/HEADDESK/",
          "createdAt": "2021-06-19T03:34:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-19T03:34:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM0ODkxMA=="
        },
        {
          "author": "jasonpugsley",
          "body": "With that last error, make sure lldb is recent and not an older version in your path. I use lldb12 for example. ",
          "createdAt": "2021-06-19T04:37:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-19T04:37:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM1NDI5Mg=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley \r\n\r\nThis should be correct though for lldb10 right?\r\n\r\n```\r\nroot@dotnet6:~ # lldb -v\r\nlldb version 10.0.1 (git@github.com:llvm/llvm-project.git revision llvmorg-10.0.1-0-gef32c611aa2)\r\n  clang revision llvmorg-10.0.1-0-gef32c611aa2\r\n  llvm revision llvmorg-10.0.1-0-gef32c611aa2\r\nroot@dotnet6:~ # objdump -t diagnostics/artifacts/bin/FreeBSD.x64.Debug/libsosplugin.so | grep PluginInitialize\r\n0000000000017db0 g     F .text  000000000000020c              _ZN4lldb16PluginInitializeENS_10SBDebuggerE\r\n```\r\n\r\nedit: it loads under lldb90\r\n```\r\n(lldb) plugin load diagnostics/artifacts/bin/FreeBSD.x64.Debug/libsosplugin.so\r\n(lldb) sos\r\nCould not load '/root/diagnostics/artifacts/bin/FreeBSD.x64.Debug/libsos.so' - /root/diagnostics/artifacts/bin/FreeBSD.x64.Debug/libsos.so: Undefined symbol \"_Z12TryGetSymbolmPKcPm\"\r\n```",
          "createdAt": "2021-06-19T05:14:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-19T05:40:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM1NzU4Ng=="
        },
        {
          "author": "jasonpugsley",
          "body": "Yes, if you’re using the same version you built sos against it should work.",
          "createdAt": "2021-06-19T05:59:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-19T05:59:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM2MTQ1OA=="
        },
        {
          "author": "Thefrank",
          "body": "Oddly enough, the plugin loads fine on llvm 9,10,11 but not the system llvm (aka theoneinthepath). It still can't do anything because it errors out about the same undefined symbol\r\n\r\n```\r\nroot@dotnet6:~ # objdump -t diagnostics/artifacts/bin/FreeBSD.x64.Debug/libsos.so | grep _Z12TryGetSymbolmPKcPm\r\n0000000000000000         *UND*  0000000000000000              _Z12TryGetSymbolmPKcPm\r\n```\r\n\r\nI am getting out of my depth here in how all of this comes together... but I assume that is because my combination of 3.1.10 (old-ish), 5.0.6 (current), and 6-preview-2 (last usable) doesn't contain it? Or is this because I had to exclude `elfreader` because it 100% shows up in `src/SOS/dbgutil/elfreader.cpp` (and a few other places not excluded)? Or something else?\r\n\r\nAny thoughts?",
          "createdAt": "2021-06-19T08:30:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-19T08:30:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM3NTgxNg=="
        },
        {
          "author": "arrowd",
          "body": "Just a note that LLVM llibraries from base are not expected to be used by 3d-party software. All software from Ports use LLVM from Ports.",
          "createdAt": "2021-06-19T08:50:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-19T09:12:04Z",
                "user": "holishing"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBvXgog=="
          },
          "updatedAt": "2021-06-19T08:50:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM3Nzc4MQ=="
        },
        {
          "author": "Thefrank",
          "body": "so, with a \"close enough\" to working SOS for lldb I can finally post some debug info that isn't entirely useless for preview 3; even with symbols and sos I still have no idea whats going on so any help in avoiding bisecting builds for preview 3 would be greatly appreciated!\r\n\r\n[preview3symboled.log](https://github.com/dotnet/runtime/files/6715203/preview3symboled.log)\r\n\r\n\r\nlog includes `clrstack` and `bt`\r\n",
          "createdAt": "2021-06-25T09:39:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-25T09:39:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2ODM3MzIxNw=="
        },
        {
          "author": "janvorli",
          "body": "Is this a checked or release build of the runtime? It seems it is as some arguments are not shown by the debugger. Using a debug build of clr would be much better to debug. Also, disassembly of the crashing method would show where the wrong address comes from.",
          "createdAt": "2021-06-25T13:47:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-25T13:47:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2ODUxMjA0MA=="
        },
        {
          "author": "Thefrank",
          "body": "That was a release build with the dbg files extracted from the .nuget packages and placed next to the libraries that needed them.\r\n\r\nI rebuilt it as Debug its not sigsegv anymore but dropping this on me with sigabrt\r\n`!\"Failed to set permissions on diagnostics IPC socket.\"`\r\n\r\nIt is run as root and the jail this is being run in has SYSVIPCs allowed (these are block by default)\r\nOn the plus side, this looks more to be a \"me\" issue and not a runtime issue\r\n\r\n[preview3debug.txt](https://github.com/dotnet/runtime/files/6718985/preview3debug.txt)\r\n\r\n\r\n",
          "createdAt": "2021-06-25T22:19:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-25T22:19:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2ODg2MTIzOA=="
        },
        {
          "author": "jasonpugsley",
          "body": "The `Failed to set permissions on diagnostics IPC socket` is because FreeBSD (and MacOS) do not support it. See the man page for fchmod.\r\n```\r\nThe fchmod() system call will fail if:\r\n[EINVAL]           The fd argument refers to a socket, not to a file.\r\n```\r\n\r\nLook for the `__APPLE__` ifdefs in `src/coreclr/src/debug/debug-pal/unix/diagnosticsipc.cpp`  and  `src/mono/mono/eventpipe/ds-ipc-posix.c`",
          "createdAt": "2021-06-26T11:43:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-26T11:43:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2ODk4OTIxMw=="
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley I was looking over the `__APPLE__` case and wondering why it avoided so much in that function...and I really shouldve read the WHOLE manpage on that =>.<=\r\nadding freebsd to the apple case in both `src/coreclr/debug/debug-pal/unix/diagnosticsipc.cpp` and `src/native/eventpipe/ds-ipc-posix.c` (mono does not seem to have that file in dotnet6) gets past the IPC issue.\r\n\r\n\r\nback to the debug build\r\n\r\nI can do four back-to-back runs and it will return four different results:\r\n```\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\nAbort\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\nSegmentation fault\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.3.21202.5 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n{0x18a54-0x802fe0690} ASSERT [VIRTUAL] at /runtime/src/coreclr/pal/src/map/virtual.cpp.694: Expression: endAddress <= (SIZE_T)pRight->startBoundary\r\nAbort\r\n```\r\n\r\nI believe I was able to capture in `lldb11` some information on the faulting runs.\r\n\r\n[preview3debug.txt](https://github.com/dotnet/runtime/files/6720838/preview3debug.txt)\r\n",
          "createdAt": "2021-06-27T00:11:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-27T00:12:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2OTA3NzYwNg=="
        },
        {
          "author": "jasonpugsley",
          "body": "I haven't found a blog post, video or tutorial anywhere that explains how to do this type of debugging/crash analysis (beyond the basics). My guess is some kind of memory corruption in the native code but the effects probably occur some time after the bug does its damage. I haven't been able to pinpoint the problem by looking at core dumps.\r\nI've gone back to trying to find interesting changes by doing git diffs but that's a needle-in-a-haystack problem.",
          "createdAt": "2021-06-27T05:09:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-27T05:09:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2OTEwMTYxMA=="
        },
        {
          "author": "ta264",
          "body": "It turns out the issue in the release builds goes away if you revert this SDK commit: https://github.com/dotnet/sdk/commit/9a1e8af8667f9315b5c9a61aae3f5c07d467f37c\r\n\r\nI'm not quite sure why, but otherwise it seems to fail in the constructor for `PerformanceLogEventSource`, see @Thefrank's details here https://github.com/dotnet/runtime/issues/14537#issuecomment-868373217\r\n\r\nWith that reverted, previews 3 and 4 seem to work - you can run `dotnet --info` and also `dotnet new console; dotnet build` and run the output.\r\n\r\nThis commit breaks ASP in preview 5: https://github.com/dotnet/aspnetcore/commit/46b56aa0651100fab5be8933bdc8a11a8d9f800f\r\n\r\nBut adding a condition to this reference https://github.com/dotnet/aspnetcore/commit/46b56aa0651100fab5be8933bdc8a11a8d9f800f#diff-eb8fd31a7971d712606a187ea074d0bd5d6ea85aae5a707107fd998216986ea5R129 fixes the build:\r\n```\r\nCondition=\"'$(CrossgenOutput)' == 'true'\"\r\n```\r\n\r\nThe full azure pipeline is here:\r\nhttps://github.com/Servarr/dotnet-bsd/blob/v6/azure-pipelines.yml\r\n\r\nAnd a build of preview 5 is here:\r\nhttps://github.com/Servarr/dotnet-bsd/releases/tag/v6.0.0-preview.5-78\r\n\r\n",
          "createdAt": "2021-06-29T18:17:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-06-29T18:18:17Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-06-29T18:18:59Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-06-29T18:20:54Z",
                "user": "vborovikov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-29T18:21:00Z",
                "user": "vborovikov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-29T18:21:58Z",
                "user": "sec"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-06-29T18:31:08Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-06-29T23:15:48Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHOBwpRig=="
          },
          "updatedAt": "2021-06-29T18:17:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MDgxMzAwOA=="
        },
        {
          "author": "ta264",
          "body": "Curiously the SDK changes that cause problems in 6.0.100 seem to be present in 5.0.301 without causing issues.  This build works:\r\nhttps://github.com/Servarr/dotnet-bsd/releases/tag/v5.0.7-65\r\n\r\nIt looks like there was some manual work on the merge so maybe that should be double checked by someone that actually knows what they're talking about (i.e. not me)\r\nhttps://github.com/dotnet/sdk/pull/16330\r\n\r\nEither that or it's a symptom of a much deeper issue in the BSD build.",
          "createdAt": "2021-06-29T18:50:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-29T18:50:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MDgzMzc0OA=="
        },
        {
          "author": "janvorli",
          "body": "My wild guess is that that SDK change basically enabled some events and there were no events enabled before, so the eventing got turned on due to that. What I mean is that the eventing was broken forever for FreeBSD, but it was never on before or even tested.",
          "createdAt": "2021-06-29T18:56:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-29T18:56:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MDgzNzA5NA=="
        },
        {
          "author": "Thefrank",
          "body": "Decided to take another pass at Debug for preview 5 with the changes @ta264 made in SDK.\r\nDebug is very slow. So I did not put much time into this thus far:\r\n\r\n10/10 `dotnet --info` works without crashes\r\n3/3 `dotnet new console` crashes with the same error.  (Still investigating this)\r\n\r\n\r\nIn better news, singlefile works on Release in preview 5 too ",
          "createdAt": "2021-06-30T08:04:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T08:04:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTE4NjA0NA=="
        },
        {
          "author": "sec",
          "body": "Nice to see some progress :) I've checked build provided by @ta264 and run some console and mvc app with success.\r\n\r\nGoing back to native build (preview5 using preview5 sdk) on FreeBSD, I was able to build clr subset  with some changes (it still try to use ilasm from linux, but doing replace of the linux binary with FreeBSD one did the trick, along with some changes to crossgen2 to support TargetOS of FreeBSD.\r\n\r\nTrying to build libs subset, resulted in lots of errors like:\r\n`\r\n/usr/home/sec/dotnet6p5/sdk/6.0.100-preview.5.21302.13/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.ImportWorkloads.targets(33,5): error NETSDK1147: To build this project, the following workloads must be installed: microsoft-tvos-sdk-full [/usr/home/sec/runtime/Build.proj]\r\n/usr/home/sec/dotnet6p5/sdk/6.0.100-preview.5.21302.13/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.ImportWorkloads.targets(33,5): error NETSDK1147: To install these workloads, run the following command: dotnet workload install microsoft-tvos-sdk-full [/usr/home/sec/runtime/Build.proj]\r\n`\r\n\r\nmono subset is not supported at all (even after some changes to src/mono/CMakeLists.txt to support both FreeBSD and amd64) it fails:\r\n`\r\nRunning ' cmake --build . --target install --config Release --parallel 1' in '/usr/home/sec/runtime/artifacts/obj/mono/FreeBSD.x64.Release/'\r\n  [  1%] Building C object mono/mini/CMakeFiles/monosgen-objects.dir/__/metadata/w32event-unix.c.o\r\n  In file included from /usr/home/sec/runtime/src/mono/mono/metadata/w32event-unix.c:11:\r\n  In file included from /usr/home/sec/runtime/src/mono/mono/metadata/w32event.h:9:\r\n  In file included from /usr/home/sec/runtime/src/mono/mono/mini/../eglib/glib.h:29:\r\n  /usr/home/sec/runtime/artifacts/obj/mono/FreeBSD.x64.Release/mono/mini/../../mono/eglib/eglib-config.h:36:6: error: invalid token at start of a preprocessor expression\r\n  #if  == 1\r\n       ^\r\n  1 error generated.\r\n  *** [mono/mini/CMakeFiles/monosgen-objects.dir/__/metadata/w32event-unix.c.o] Error code 1\r\n`\r\n\r\nTried using clang 9 and 10 - same effect.\r\n\r\n",
          "createdAt": "2021-06-30T10:50:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T10:50:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTI5NzA5Mw=="
        },
        {
          "author": "Thefrank",
          "body": "@sec does https://github.com/dotnet/runtime/issues/14537#issuecomment-852191559 get p5 building? that should also fix the issues with it thinking its on linux",
          "createdAt": "2021-06-30T16:15:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T16:15:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTU0MDQ5NQ=="
        },
        {
          "author": "sec",
          "body": "@Thefrank Thanks for the tip, I missed that comment when looking at clues (this issue is quite big, maybe we should start putting some of the fixes into some PR's if that's possible?) - starting from scratch, adding this option, build fail at the start as it can't restore `runtime.freebsd-x64.microsoft.netcore.ilasm` (which will be built at the end) - I looked at release provided by @ta264 and didn't saw ilasm in there.\r\n\r\nThe build is running, when done I will recheck clr build with correct runtime provided by first build that will fail at the end :)\r\nThen I will run the mono build with changes suggested by @jasonpugsley and update.\r\n\r\nedit for clr: I don't know how to make/get `runtime.freebsd-x64.microsoft.netcore.ilasm` package. I tried to add local nuget directory, copy the linux one, change the id's and names inside, replace binary, but in the end I get (I assume there's something more inside nupkg, but didn't looked inside):\r\n\r\n`\r\n/home/sec/.nuget/packages/microsoft.net.sdk.il/6.0.0-preview.5.21267.1/targets/Microsoft.NET.Sdk.IL.targets(72,5): error : Package runtime.freebsd-x64.microsoft.netcore.ilasm\\6.0.0-preview.5.21267.1 was not restored [/usr/home/sec/runtime/src/coreclr/tools/aot/ILCompiler.TypeSystem.ReadyToRun.Tests/ILTestAssembly/ILTestAssembly.ilproj]\r\n`\r\n\r\nremoving `/p:RuntimeOS=freebsd12` gets clr to fully build without errors (by replacing ilasm binary in linux package with FreeBSD produced during build). In the end there are `linux` nupkg's :) like `runtime.linux-x64.Microsoft.NETCore.ILAsm.6.0.0-dev.nupkg` - so I assume those should be produced in crossbuild, @ta264 or @Thefrank could you check your pipelines/builds for freebsd ones?\r\n\r\nedit for mono: doing those changes in CMakefile makes mono build without errors also.\r\n\r\nedit for libs: still errors about missing workloads packages, no idea how to approach this.",
          "createdAt": "2021-06-30T16:46:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T19:30:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTU2NzI2OQ=="
        },
        {
          "author": "Thefrank",
          "body": "> edit for clr: I don't know how to make/get runtime.freebsd-x64.microsoft.netcore.ilasm package. \r\n\r\nI rolled forward my 5.0.x ones into early 6 previews then rolled those into the current one. They contain native binaries. so the linux ones wont work on freebsd. I THINK these can be made by the `build-clr` \r\n\r\n> edit for libs: still errors about missing workloads packages, no idea how to approach this.\r\n\r\nIt tells you what you need to do :)\r\nIn the `./.dotnet/` of your runtime git just paste the `dotnet workload install .....` commands and dotnet will install the things it needs. I have no idea why the restore doesn't do this\r\n\r\nlate edit: I am not quite sure WHY it is doing that. I would think that if they are needed then the restore process would get them. Also, we are not building on any of the platforms it wants workloads for. ~~Finally, what the heck is a workload?~~ oh [this](https://github.com/dotnet/designs/blob/main/accepted/2020/workloads/workloads.md)\r\n\r\n\r\nThe main issue I am having is that if I don't pass `-maxcpucount:1` then MSBuild crashes. This seem to be isolated to after p2 as that had no issues with 32 cores\r\n\r\n`MSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"/tmp/\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.`\r\nThere is no such file there :(\r\nor this:\r\n`/root/runtime/eng/common/tools.sh: line 459: 34846 Segmentation fault      \"$_InitializeBuildTool\" \"$@\"`",
          "createdAt": "2021-06-30T20:03:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T22:35:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTY5MDUxMQ=="
        },
        {
          "author": "sec",
          "body": "@Thefrank not like I tried that :)\r\n\r\n```\r\nInstalling pack Microsoft.NET.Runtime.RuntimeConfigParser.Task version 6.0.0-preview.7.21330.11...\r\nWorkload installation failed, rolling back installed packs...\r\nRolling back pack Microsoft.NET.Runtime.RuntimeConfigParser.Task installation...\r\nWorkload installation failed: One or more errors occurred. (microsoft.net.runtime.runtimeconfigparser.task::6.0.0-preview.7.21330.11 is not found in NuGet feeds https://api.nuget.org/v3/index.json;/home/sec/NuGet\",)\r\n```\r\n\r\nNow I see it's trying to install preview.7 (which I can tell, don't exist, so it's true) - how to specify version or why it want preview.7 (sdk is preview 5...)... I looked around in json's and it had preview.7 for some reason :/ rm -rf .dotnet and extract fresh sdk fixed the issue, workloads installed.\r\n\r\nBuild for libs is running, veryyy slow, I will update progress if not fall asleep :) - this should be last bit for runtime build, right?\r\n\r\nAs for `runtime.freebsd-x64.microsoft.netcore.ilasm` - I think this should be produced during CLR build, I'm getting linux one because it think I'm on Linux (I'm not giving the `/p:RuntimeOS=freebsd12` to the build becuase of missing this nupkg  - correct ones should be under `runtime/artifacts/packages/Release/Shipping` when doing crossbuild for FreeBSD under Linux, right? Do you have those produced?\r\n\r\nHave you tried to export MSBUILDDEBUGPATH=/some/other/part - error say, the log may be in there :P\r\n\r\nedit: libs failed with nice error\r\n```\r\n/usr/home/sec/dotnet6p5/sdk-manifests/6.0.100/microsoft.net.sdk.android/WorkloadManifest.targets(2,33): error MSB4236: The SDK 'Microsoft.Android.Sdk' specified could not be found. [/usr/home/sec/runtime/src/libraries/System.Security.Cryptography.OpenSsl/src/System.Security.Cryptography.OpenSsl.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/home/sec/dotnet6p5/sdk-manifests/6.0.100/microsoft.net.sdk.android/WorkloadManifest.targets(2,33): error MSB4236: The SDK 'Microsoft.Android.Sdk' specified could not be found. [/usr/home/sec/runtime/src/libraries/System.Security.Cryptography.OpenSsl/src/System.Security.Cryptography.OpenSsl.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\ntime for sleep.",
          "createdAt": "2021-06-30T22:46:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T23:11:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTc3NDgwNQ=="
        },
        {
          "author": "Thefrank",
          "body": "if you want to avoid the workload stuff completely you can just remove/rename the `./.dotnet/sdk-manifests/`\r\n\r\nand it will build the runtime without issue:\r\n```\r\n[root@dotnet6 ~/runtime]# ./build.sh -c Release --clang11 --portablebuild true -ci --os FreeBSD /p:RuntimeOS=freebsd12 /p:OfficialBuildId=$OFFICIALBUILDID /p:IsEligibleForNgenOptimization=false -maxcpucount:1\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:47:13.03\r\n```\r\n\r\nHowever, I have no idea how much it will impact the final product",
          "createdAt": "2021-07-01T01:30:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-01T01:30:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTg0MDA5MA=="
        },
        {
          "author": "sec",
          "body": "@Thefrank Removing sdk-manifest keep the build going forward, but the missing runtime error show up at the:\r\n```\r\nUnable to find package runtime.freebsd-x64.Microsoft.NETCore.DotNetHost with version (>= 6.0.0-preview.5.21267.1)\r\nUnable to find package runtime.freebsd-x64.Microsoft.NETCore.DotNetHostPolicy with version (>= 6.0.0-preview.5.21267.1)\r\nUnable to find package runtime.freebsd-x64.Microsoft.NETCore.DotNetHostResolver with version (>= 6.0.0-preview.5.21267.1)\r\nUnable to find package runtime.freebsd-x64.Microsoft.NETCore.DotNetAppHost with version (>= 6.0.0-preview.5.21267.1)\r\n```\r\n\r\nSo I went back to crosscompile build and got those created (but ILAsm and ILDAsm were created for linux-x64, will look into this more).\r\n\r\nedit: looks like the ILAsm and ILDAsm are created during native build on bsd box, but the process require a working package in first place (even that ilasm and ildasm binaries are created, so why they are not used during the process? doing \"manual swap\" of linux nupkg with bsd binary did the trick, but that's nasty hack).\r\n\r\nAs for the MSBuild crash, check `dmesg` output - if my case it was crashing becuase of out of memory and swap :) (my VM has only 4GB of RAM allocated and 1GB of swap, adding 4GB to check if it will solve the issue).\r\n\r\nBut seeing you have native build done, it means you must have those mimssing runtime nupkgs, did you manage to get aspnetcore/sdk/installer also compile?",
          "createdAt": "2021-07-01T12:20:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-01T13:33:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MjE5OTYwOA=="
        },
        {
          "author": "Thefrank",
          "body": "@sec the builds are on done in a freebsd jail with no resource quotas attached to them. `dmesg` most recent entries are of `dotnet` throwing either signal 10(!!) or signal 11. This is the first time encountering an issue like this when doing native builds. More confusingly it is not leaving a log or dump anywhere :/\r\n\r\nILAsm/ILDAsm: If the `linux` named ones from crossbuild are indeed actually native freebsd images then it sounds like another RID issue.\r\n\r\nTrying to track down how RIDs are assigned and consumed is a confusing mess.\r\nI hate having to dig through the binlog. The best tool I found is for Windows and called `MSBuild Structured Log Viewer` ",
          "createdAt": "2021-07-01T17:58:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-01T17:58:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MjQ0MjE0NQ=="
        },
        {
          "author": "sec",
          "body": "So I did check for ex. `runtime.linux-x64.Microsoft.NETCore.ILAsm.6.0.0-preview.5.21301.5.nupkg` from crossbuild for FreeBSD - and inside there's a native FreeBSD binary:\r\n```\r\nsec@vmubuntu:~/test$ file runtimes/linux-x64/native/ilasm\r\nruntimes/linux-x64/native/ilasm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 11.3, FreeBSD-style, BuildID[sha1]=1a93e459760a893ac3d63b53938cdde641f72380, stripped\r\n```\r\n\r\nWonder if those are also native for FreeBSD, but named Linux:\r\n```\r\n\r\n-rw-r--r-- 1 root root    711769 Jul  1 11:29 runtime.linux-x64.Microsoft.NETCore.ILAsm.6.0.0-preview.5.21301.5.nupkg\r\n-rw-r--r-- 1 root root    733503 Jul  1 11:29 runtime.linux-x64.Microsoft.NETCore.ILDAsm.6.0.0-preview.5.21301.5.nupkg\r\n-rw-r--r-- 1 root root     41267 Jul  1 11:29 runtime.linux-x64.Microsoft.NETCore.TestHost.6.0.0-preview.5.21301.5.nupkg\r\n-rw-r--r-- 1 root root     23192 Jul  1 11:44 runtime.linux-x64.runtime.native.System.IO.Ports.6.0.0-preview.5.21301.5.nupkg\r\n-rw-r--r-- 1 root root     23194 Jul  1 11:44 runtime.linux-x64.runtime.native.System.IO.Ports.6.0.0-preview.5.21301.5.symbols.nupkg\r\n```\r\n\r\nFunny thing is, native build on FreeBSD produce version of those with proper names :)\r\n",
          "createdAt": "2021-07-01T20:56:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-01T20:56:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MjU0NDMzMg=="
        },
        {
          "author": "Thefrank",
          "body": "finally got around to feeding preview 5 into preview 5 for native build for the rest of the buildchain; aspnetcore, sdk, and installer all build.\r\nit produces a working hello world.\r\n\r\n```\r\n# file /root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest\r\n/root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest: ELF 64-bit LSB pie executable, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 12.2, FreeBSD-style, BuildID[sha1]=e1f88b17a88dafd4f99f87e177b2ac73ff470a6d, stripped\r\n\r\n# /root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest \r\nHello World!\r\n```\r\n\r\nwith a long weekend coming up im not sure if I should be spending it figuring out what changes can be attempted for a pull request or if I should just fireworks",
          "createdAt": "2021-07-02T03:16:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-07-02T05:34:54Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-07-02T06:55:53Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBxA4xg=="
          },
          "updatedAt": "2021-07-02T03:16:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MjY4MjA4MA=="
        },
        {
          "author": "nkosi23",
          "body": "Maybe a pull request will help prevent regressions / random breakages by somehow putting the FreeBSD case in the radar of committers.",
          "createdAt": "2021-07-02T23:14:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-07-03T08:36:38Z",
                "user": "arrowd"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-07-07T08:59:52Z",
                "user": "sec"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBxjIjA=="
          },
          "updatedAt": "2021-07-02T23:14:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MzI5ODgyNg=="
        },
        {
          "author": "sec",
          "body": "> finally got around to feeding preview 5 into preview 5 for native build for the rest of the buildchain; aspnetcore, sdk, and installer all build.\r\n> it produces a working hello world.\r\n> \r\n> ```\r\n> # file /root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest\r\n> /root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest: ELF 64-bit LSB pie executable, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 12.2, FreeBSD-style, BuildID[sha1]=e1f88b17a88dafd4f99f87e177b2ac73ff470a6d, stripped\r\n> \r\n> # /root/installer/artifacts/bin/singlefiletest/Release/net6.0/freebsd-x64/publish/singlefiletest \r\n> Hello World!\r\n> ```\r\n> \r\n> with a long weekend coming up im not sure if I should be spending it figuring out what changes can be attempted for a pull request or if I should just fireworks\r\n\r\nI would also go for PR with changes needed to compile on FreeBSD. Maybe they could go into https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/freebsd-requirements.md - that would help for sure in future.\r\n\r\nAs the bug with generating \"linux\" named nupkg are now fixed, crosscompiling sdk for FreeBSD produce SDK that can be used to fully build native on BSD, right? (taking in mind reverting those bad commits so it won't crash).\r\n\r\nIf you have some notes I can help to organize them and/or verify, so in the end a nice PR would go into main that will make FreeBSD great again :)",
          "createdAt": "2021-07-08T16:21:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-08T16:21:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NjU3NDIzNw=="
        },
        {
          "author": "Thefrank",
          "body": "@sec while not build breaking, the docker images need to be updated with https://github.com/dotnet/arcade/pull/7588 and also we should: remove 11.x branch (EOL in 2 months), bump 12.1 -> 12.2, add 13.0(?). native should add the pkg requirement for `terminfo-db`\r\n\r\nand also...\r\n\r\nI am also still trying to figure out why doing anything multi-core via `dotnet` is causing a segfault resulting in being force to add `-maxcpucount:1` to anything `restore` `build` `publish` or `msbuild`. This seems isolated to net6",
          "createdAt": "2021-07-08T17:40:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-08T17:40:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NjYyMzU1MQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "+1 for using 12.2 going forward. I don't think we need additional build configs, so long as we keep our single lowest supported release inline with FreeBSD official (see Supported FreeBSD releases https://www.freebsd.org/security/#sup).\r\n11.4 will reach EOL before net6 GA, ~~and 13 should be ABI compatible with 12~~.",
          "createdAt": "2021-07-11T01:12:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T09:32:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NzcyNDgyOQ=="
        },
        {
          "author": "rootwyrm",
          "body": "> 13 should be ABI compatible with 12.\r\n\r\nThis is absolutely not true at all. Major to major **guarantees ABI incompatibility**. \r\nNOTHING built on 12.x will work safely on 13.x and vice versa.",
          "createdAt": "2021-07-11T02:25:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-07-11T05:36:32Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOByBpRQ=="
          },
          "updatedAt": "2021-07-11T02:25:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NzczMDkzOQ=="
        },
        {
          "author": "jasonpugsley",
          "body": "I had thought there was an effort to maintain backward compatibility. I guess it is a lot less strict (guaranteed) than I had imagined - that is my misunderstanding. Thanks for the heads-up.\r\nIf there are differences that affect the dotnet runtime then we'd need run-time switches that detect the OS version and make native calls with the correct parameters. Otherwise we couldn't provide a single _portable_ release.\r\nTesting will need to be performed on each supported FreeBSD release to identify these types of breakages.",
          "createdAt": "2021-07-11T09:31:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T09:49:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3Nzc2OTUxMQ=="
        },
        {
          "author": "sec",
          "body": "> > 13 should be ABI compatible with 12.\r\n> \r\n> This is absolutely not true at all. Major to major **guarantees ABI incompatibility**.\r\n> NOTHING built on 12.x will work safely on 13.x and vice versa.\r\n\r\nWhere did you get that info? According to https://wiki.freebsd.org/Glossary#ABI and https://wiki.freebsd.org/Releng/ABI and https://wiki.freebsd.org/BinaryCompatibility - it looks like they at least try, but I couldn't find any info that it's guarantees ABI incompatibility. From my expierence I had several binaries compiles under 11.x which works well under 12.x (I think crosscompile for .NET is done under 11 and works fine under 12 thanks to symbol versioning). If you ask me, targeting 12.x should be fine (as 11 will EOL soon) - but tbh, it we manage to get native build done on 12, then making them work on 11 or 13 should not require much work (or none if lucky).",
          "createdAt": "2021-07-11T11:38:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T11:38:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3Nzc4NDUyOA=="
        },
        {
          "author": "nkosi23",
          "body": "The FreeBSD handbook reads:\r\n\r\n> Generally, installed applications will continue to work without problems after minor version upgrades. Major versions use different Application Binary Interfaces (ABIs), which will break most third-party applications. After a major version upgrade, all installed packages and ports need to be upgraded. Packages can be upgraded using pkg upgrade. To upgrade installed ports, use a utility such as ports-mgmt/portmaster\r\n\r\nhttps://docs.freebsd.org/en/books/handbook/cutting-edge/#freebsdupdate-portsrebuild\r\n\r\nThis is common knowledge for a FreeBSD user: after upgrading the base OS one needs to reinstall all packages (to upgrade them to their package built under the new OS version).\r\n",
          "createdAt": "2021-07-11T12:30:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T12:33:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3Nzc5MTU2MA=="
        },
        {
          "author": "Thefrank",
          "body": "Symbol versioning work great as long as the symbol exists. As a recent example: mono. 11.4 and 12.2 of FreeBSD introduced a new symbol. One of the more common ports (mono) was updated shortly after release and ended up including this symbol. People that were on 11.3 or 12.1 that just rolled their pkgs forward and IGNORED THE WARNING about the kernel differences were met with confusing messages about missing symbols in mono. \r\n\r\nEven minor version bumps can cause issues. I think we have been extremely lucky with the FreeBSD version so far.\r\n\r\nThis needs to get changed too:\r\nhttps://github.com/dotnet/arcade/blob/faeec296ad397aacee16fd69fb3a5d01ad6e6d2e/eng/common/cross/build-rootfs.sh#L293-L295",
          "createdAt": "2021-07-11T17:55:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T20:48:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NzgzODc0OA=="
        },
        {
          "author": "wfurt",
          "body": "We may start with updating the docker build images and moving runtime CI build to 12.  I encountered some of the packaging weirdness when I was trying to get up [runtimelab](https://github.com/dotnet/runtimelab/pull/136) build. Unfortunately I was never able to finish that up.",
          "createdAt": "2021-07-11T21:18:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T21:18:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3Nzg2MzE3Nw=="
        },
        {
          "author": "nkosi23",
          "body": "@Thefrank Maybe subtle ABI incompatibilities may be the cause of the crashes you have been getting with multi-core if the build process retrieves 11.x binaries to run them on 12.x.",
          "createdAt": "2021-07-11T23:00:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-11T23:00:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3Nzg3Mzc1NQ=="
        },
        {
          "author": "Thefrank",
          "body": "net6p6 crossbuilds can be used for making a native net6p6.\r\n\r\nKnown issues found only in net6:\r\n- runtime still requires a revert of 6055dfa7ecb7628fdb2570d8897e83520f69f280\r\n- sdk still requires a revert of 9a1e8af8667f9315b5c9a61aae3f5c07d467f37c \r\n- restore/build in parallel will still segfault unless you are using a single core VM you will need `-maxcpucount:1`\r\n\r\nThe confusing thing is that the runtime commit and the SDK commit seem to both cover some event handling. I would think that turning it off in runtime for FreeBSD (what the commit to runtime accidently ended up doing while fixing macos builds) would not cause the segfaulting that was seen in p2 and later. [I will also admit I don't fully understand everything that is being turned on/off via `FEATURE_EVENTSOURCE_XPLAT`]\r\n\r\nSemi(?) related: is LTTNG really required for building/running? The FreeBSD port of it is 2.9.0 from early 2017 and does not have a maintainer listed",
          "createdAt": "2021-07-15T23:27:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-15T23:27:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg4MTA3MjUyMQ=="
        },
        {
          "author": "sec",
          "body": "> @Thefrank Maybe subtle ABI incompatibilities may be the cause of the crashes you have been getting with multi-core if the build process retrieves 11.x binaries to run them on 12.x.\r\n\r\nDid native build under FreeBSD 13 using crossbuild as starter, then tried to build runtime with native build - still faulting, sometimes it's core dumped, sometimes it's diffrent error, like:\r\n```\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nMicrosoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Node 3 does not have a provider.\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, Boolean isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache) in MSBuild.dll:token 0x600008d+0x5b2\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in MSBuild.dll:token 0x600008a+0x1f5\r\nUnhandled exception: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Node 3 does not have a provider.\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, Boolean isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache) in MSBuild.dll:token 0x600008d+0x5b2\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in MSBuild.dll:token 0x600008a+0x1f5\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args) in MSBuild.dll:token 0x6000086+0x29\r\n   at Microsoft.DotNet.Cli.Utils.MSBuildForwardingAppWithoutLogging.ExecuteInProc(String[] arguments) in Microsoft.DotNet.Cli.Utils.dll:token 0x6000106+0x62\r\nBuild failed with exit code 82. Check errors above.\r\n##vso[task.complete result=Failed;]msbuild execution failed.\r\n```\r\n\r\n",
          "createdAt": "2021-07-17T12:46:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-17T12:46:33Z",
          "id": "IC_kwDODI9FZc40kJ_P"
        },
        {
          "author": "Thefrank",
          "body": "@sec so it looks like the issue is present in all current versions of FreeBSD (11,12,13). Does `-maxcpucount:1` fix the issue?",
          "createdAt": "2021-07-22T00:13:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-22T00:13:06Z",
          "id": "IC_kwDODI9FZc40uZLc"
        },
        {
          "author": "sec",
          "body": "> @sec so it looks like the issue is present in all current versions of FreeBSD (11,12,13). Does `-maxcpucount:1` fix the issue?\r\n\r\nYes, that's the fix to get the native build done all the way up, as you wrote before. Did you do any changes to get the test running? I tried but it fails with:\r\n```\r\nBuild FAILED.\r\n\r\n/usr/home/sec/runtime/.dotnet/sdk/6.0.100-preview.6.21355.2/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(127,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'freebsd-x64'. [/usr/home/sec/runtime/src/installer/tests/Assets/TestProjects/StandaloneApp3x/StandaloneApp3x.csproj]\r\n/usr/home/sec/runtime/.dotnet/sdk/6.0.100-preview.6.21355.2/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(127,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'freebsd-x64'. [/usr/home/sec/runtime/src/installer/tests/Assets/TestProjects/StandaloneApp3x/StandaloneApp3x.csproj]\r\n/usr/home/sec/runtime/.dotnet/sdk/6.0.100-preview.6.21355.2/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(127,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'freebsd-x64'. [/usr/home/sec/runtime/src/installer/tests/Assets/TestProjects/StandaloneApp3x/StandaloneApp3x.csproj]\r\n/usr/home/sec/runtime/.dotnet/sdk/6.0.100-preview.6.21355.2/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(127,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'freebsd-x64'. [/usr/home/sec/runtime/src/installer/tests/Assets/TestProjects/StandaloneApp3x/StandaloneApp3x.csproj]\r\n/usr/home/sec/runtime/src/installer/tests/PrepareTestAssets/PrepareTestAssets.proj(123,5): error MSB4181: The \"MSBuild\" task returned false but did not log an error.\r\n    0 Warning(s)\r\n    5 Error(s)\r\n```\r\neven though SDK is able to create new projects, build and run them?",
          "createdAt": "2021-07-23T09:44:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-23T09:44:20Z",
          "id": "IC_kwDODI9FZc40yALD"
        },
        {
          "author": "Thefrank",
          "body": "@sec try removing the `netcoreapp3.0` in `src/installer/tests/Assets/TestProjects/StandaloneApp3x/StandaloneApp3x.csproj` and make sure that the SDK has a `freebsd-x64` apphost listed under for 3.1",
          "createdAt": "2021-07-23T17:29:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-23T17:29:20Z",
          "id": "IC_kwDODI9FZc40zBUb"
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley would you be willing to make a pull request for the mono native-FreeBSD patch from https://github.com/dotnet/runtime/issues/14537#issuecomment-852191559 ?",
          "createdAt": "2021-08-02T21:12:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-07T06:55:15Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB1egPw=="
          },
          "updatedAt": "2021-08-02T21:12:21Z",
          "id": "IC_kwDODI9FZc41ILeV"
        },
        {
          "author": "jasonpugsley",
          "body": "For those doing the cross-build on Linux, are we expecting mono to be cross-built?\r\n`eng/build.sh -c Debug -cross -os freebsd -ci /p:OfficialBuildId=$(date +%Y%m%d)-99 -subset mono`\r\nwill run (with modifications listed previously), but I've just realised in my setup that it's producing a Linux object.\r\nMy $ROOTFS_DIR is correct.\r\nCan someone please check whether `artifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so` is a FreeBSD or Linux object?",
          "createdAt": "2021-08-09T05:21:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T05:21:39Z",
          "id": "IC_kwDODI9FZc41V_23"
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley from head or from a tag? From head it will build under crossroot (without any patches at all):\r\n```\r\n# file artifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so\r\nartifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=ca6d7a9b531cd864faf3845748080eb21a0000a5, with debug_info, not stripped\r\n\r\n# ldd artifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so\r\n        linux-vdso.so.1 (0x00007ffefe9e3000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f448f60a000)\r\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f448f4bb000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f448f4b5000)\r\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f448f49a000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f448f2a8000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f448fc8d000)\r\n```\r\nOver on native FreeBSD build (with patch):\r\n```\r\n# file artifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so\r\nartifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, with debug_info, not stripped\r\n# ldd artifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so\r\nartifacts/obj/mono/FreeBSD.x64.Debug/out/lib/libcoreclr.so:\r\n        libthr.so.3 => /lib/libthr.so.3 (0x80066b000)\r\n        libm.so.5 => /lib/libm.so.5 (0x800698000)\r\n        libc.so.7 => /lib/libc.so.7 (0x80024e000)\r\n```\r\n\r\nI usually do the crossbuild using the docker image. It seems it gets the same result. Different hash but same linux output",
          "createdAt": "2021-08-09T07:09:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:20:57Z",
          "id": "IC_kwDODI9FZc41WKKJ"
        },
        {
          "author": "jasonpugsley",
          "body": "Thanks @Thefrank   But is that the expected output from the cross-build? It's linking against Linux libraries. Can you copy the `libcoreclr.so` from the cross-build Linux host to a FreeBSD host run `ldd` against it?",
          "createdAt": "2021-08-09T07:36:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:37:20Z",
          "id": "IC_kwDODI9FZc41WNQu"
        },
        {
          "author": "Thefrank",
          "body": "copying `libcoreclr.so` from `artifacts/obj/mono/FreeBSD.x64.Release/out/lib` on the linux box that crossbuilt it and `ldd`\r\n```\r\n# ldd libcoreclr.so \r\nldd: libcoreclr.so: not a FreeBSD ELF shared object\r\n```",
          "createdAt": "2021-08-09T07:45:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:45:48Z",
          "id": "IC_kwDODI9FZc41WOVX"
        },
        {
          "author": "jasonpugsley",
          "body": "I see that as well - but is it a problem or is it expected (correct) for cross-builds?",
          "createdAt": "2021-08-09T07:46:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:46:52Z",
          "id": "IC_kwDODI9FZc41WOcu"
        },
        {
          "author": "jasonpugsley",
          "body": "I just did a cross-build with `-subset Clr+Libs+Host` and all of the shared libraries produced are the same.\r\nSo is `artifacts/bin/coreclr/FreeBSD.x64.Debug/ilasm` but the binary does execute successfully on FreeBSD even though running `ldd` against it only produces output on Linux. I'm confused but cross-building is new to me.",
          "createdAt": "2021-08-09T07:52:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:52:08Z",
          "id": "IC_kwDODI9FZc41WPCe"
        },
        {
          "author": "Thefrank",
          "body": "oh! er, I assume that is the correct output. it does set some sort of RID to CMAKE before starting the build. Also any final output from that should be a mono/,net item (`System.Private.CoreLib.Generators.dll`, `System.Private.CoreLib.dll`)",
          "createdAt": "2021-08-09T07:52:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:52:11Z",
          "id": "IC_kwDODI9FZc41WPDB"
        },
        {
          "author": "jasonpugsley",
          "body": "I'm not confident PR https://github.com/dotnet/runtime/pull/57027 is sufficiently correct (even with the changes you suggested which I haven't updated yet) so I'm feeling like deferring it for now.",
          "createdAt": "2021-08-09T07:57:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T07:57:05Z",
          "id": "IC_kwDODI9FZc41WPn2"
        },
        {
          "author": "Thefrank",
          "body": "actually, the same issue is present in the final product for 5.0.x. 3.1.10 (the newest that I have built) actually looks FreeBSD-y\r\n\r\nedit: 3.1.x was never crossbuilt! :( ",
          "createdAt": "2021-08-09T08:03:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T08:06:56Z",
          "id": "IC_kwDODI9FZc41WQg-"
        },
        {
          "author": "jasonpugsley",
          "body": "What I mean by \"not sufficiently correct\" is (for example) when cross-building on Linux, CMake is finding `alloca.h` which is incorrect for FreeBSD. It should only search in $ROOTFS_DIR so either my setup is incorrect or the cross-build configuration needs further work.\r\nI suspect it's really set up for building Linux ARM on x64 (and similar for Mac) rather than building for a different OS.",
          "createdAt": "2021-08-09T08:21:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T08:23:16Z",
          "id": "IC_kwDODI9FZc41WTA-"
        },
        {
          "author": "Thefrank",
          "body": "The final packaged output from runtime still appears correct(?). I will need to rebuild and run the tests for it.\r\n`readelf` on some of the final `.so` items shows that atleast the header for OS is wrong (`0` instead of `9`) but `brandelf` should fix that and that should also fix `ldd` complaining.\r\n\r\nAs for the mono intermediaries...I will need to look into further when I get up, but yes, if it is trying to use `alloca.h` under FreeBSD it will likely have a bad time.",
          "createdAt": "2021-08-09T08:29:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-09T08:30:16Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB1jl1A=="
          },
          "updatedAt": "2021-08-09T08:29:20Z",
          "id": "IC_kwDODI9FZc41WUNe"
        },
        {
          "author": "jasonpugsley",
          "body": "I have a decent amount of progress to add. Most of the cross-build artefacts are looking good now. This commit has my changes  https://github.com/jasonpugsley/runtime/commit/1092463aa127306973ff1a3256e2f8dee310612a   Feedback appreciated.\r\n\r\nI decided to update clang in my Linux container from 9 to 12. I'm not sure if that helped at all. My crossfs_root is FreeBSD 12.2\r\nAfter a full runtime cross-build, these are the only remaining shared libraries that are still Linux objects:\r\n```\r\nartifacts/bin/externals/net6.0-Debug/linux-x64/libhostfxr.so\r\nartifacts/bin/externals/net6.0-Debug/linux-x64/libnethost.so\r\nartifacts/bin/externals/net6.0-Debug/linux-x64/libhostpolicy.so\r\nartifacts/bin/microsoft.netcore.app.runtime.linux-x64/Debug/runtimes/linux-x64/native/libnethost.so\r\nartifacts/bin/microsoft.netcore.app.runtime.linux-x64/Debug/runtimes/linux-x64/native/libhostfxr.so\r\nartifacts/bin/microsoft.netcore.app.runtime.linux-x64/Debug/runtimes/linux-x64/native/libhostpolicy.so\r\nartifacts/bin/testhost/net6.0-FreeBSD-Debug-x64/host/fxr/6.0.0/libhostfxr.so\r\nartifacts/bin/testhost/net6.0-FreeBSD-Debug-x64/shared/Microsoft.NETCore.App/6.0.0/libhostpolicy.so\r\nartifacts/bin/testhost/net6.0-FreeBSD-Debug-x64/shared/Microsoft.NETCore.App/6.0.0/libnethost.so\r\nartifacts/bin/testhost/net6.0-FreeBSD-Debug-x64/shared/Microsoft.NETCore.App/6.0.0/libhostfxr.so\r\n```\r\nSome of the paths are `linux-x64` but it looks like they might be from restored nuget packages (some of the files match those under .packages).\r\nThat's it for me. Need sleep.\r\n",
          "createdAt": "2021-08-09T16:41:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T16:44:26Z",
          "id": "IC_kwDODI9FZc41XlEi"
        },
        {
          "author": "Thefrank",
          "body": "What is your setup for the linux VM? (distro, packages). I am getting failures on the coreclr part using a crossrootfs (FreeBSD 12.2 or FreeBSD 13.0) built via the arcade script.\r\n\r\n```\r\n  /home/frank/runtime/src/coreclr/debug/daccess/daccess.cpp:7243:38: error: invalid suffix 'x' on integer constant\r\n      *dacTableAddress = baseAddress + DAC_TABLE_RVA;\r\n                                       ^\r\n  /home/frank/runtime/artifacts/obj/coreclr/FreeBSD.x64.Debug/inc/dactablerva.h:1:24: note: expanded from macro 'DAC_TABLE_RVA'\r\n  #define DAC_TABLE_RVA 0x          e25a00\r\n                         ^\r\n  1 error generated.\r\n  make[2]: *** [debug/daccess/CMakeFiles/daccess.dir/build.make:124: debug/daccess/CMakeFiles/daccess.dir/daccess.cpp.o] Error 1\r\n  make[2]: *** Waiting for unfinished jobs....\r\n  make[1]: *** [CMakeFiles/Makefile2:4498: debug/daccess/CMakeFiles/daccess.dir/all] Error 2\r\n  make: *** [Makefile:130: all] Error 2\r\n```\r\n\r\nThe docker image (FreeBSD 12.1) gets a bit further, into mono but still errors out:\r\n```\r\nIn file included from /runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_calendarData.c:8:\r\n  In file included from /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_locale_internal.h:6:\r\n  /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h:22:10: fatal error: 'unicode/ucurr.h' file not found\r\n  #include <unicode/ucurr.h>\r\n           ^~~~~~~~~~~~~~~~~\r\n  1 error generated.\r\n  mono/mini/CMakeFiles/monosgen-objects.dir/build.make:2866: recipe for target 'mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_calendarData.c.o' failed\r\n  make[2]: *** [mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_calendarData.c.o] Error 1\r\n  make[2]: *** Waiting for unfinished jobs....\r\n  [ 80%] Building C object mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_idna.c.o\r\n  In file included from /runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_casing.c:9:\r\n  /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h:22:10: fatal error: 'unicode/ucurr.h' file not found\r\n  #include <unicode/ucurr.h>\r\n           ^~~~~~~~~~~~~~~~~\r\n  1 error generated.\r\n  In file included from /runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_collation.c:11:\r\n  In file included from /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_errors_internal.h:6:\r\n  /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h:22:10: fatal error: 'unicode/ucurr.h' file not found\r\n  #include <unicode/ucurr.h>\r\n           ^~~~~~~~~~~~~~~~~\r\n  make[2]: *** [mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_casing.c.o] Error 1\r\n  mono/mini/CMakeFiles/monosgen-objects.dir/build.make:2880: recipe for target 'mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_casing.c.o' failed\r\n  1 error generated.\r\n  mono/mini/CMakeFiles/monosgen-objects.dir/build.make:2894: recipe for target 'mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_collation.c.o' failed\r\n  make[2]: *** [mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_collation.c.o] Error 1\r\n  In file included from /runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_idna.c:7:\r\n  /runtime/src/mono/mono/mini/../../../libraries/Native/Unix/System.Globalization.Native/pal_icushim_internal.h:22:10: fatal error: 'unicode/ucurr.h' file not found\r\n  #include <unicode/ucurr.h>\r\n           ^~~~~~~~~~~~~~~~~\r\n  1 error generated.\r\n  mono/mini/CMakeFiles/monosgen-objects.dir/build.make:2908: recipe for target 'mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_idna.c.o' failed\r\n  make[2]: *** [mono/mini/CMakeFiles/monosgen-objects.dir/runtime/src/libraries/Native/Unix/System.Globalization.Native/pal_idna.c.o] Error 1\r\n  CMakeFiles/Makefile2:220: recipe for target 'mono/mini/CMakeFiles/monosgen-objects.dir/all' failed\r\n  make[1]: *** [mono/mini/CMakeFiles/monosgen-objects.dir/all] Error 2\r\n  Makefile:135: recipe for target 'all' failed\r\n  make: *** [all] Error 2\r\n/runtime/src/mono/mono.proj(500,5): error MSB3073: The command \"TARGET_BUILD_ARCH=x64 PKG_CONFIG_PATH=/crossrootfs/x64/host/libdata/pkgconfig:/crossrootfs/x64/usr/libdata/pkgconfig:/crossrootfs/x64/usr/local/libdata/pkgconfig cmake --build . --target install --config Debug --parallel 16\" exited with code 2.\r\n```\r\n\r\n",
          "createdAt": "2021-08-09T23:06:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T23:06:13Z",
          "id": "IC_kwDODI9FZc41Yeao"
        },
        {
          "author": "jasonpugsley",
          "body": "I was essentially following this `https://github.com/Thefrank/dotnet-freebsd-crossbuild/blob/main/build.sh`\r\n\r\nThis is the image I'm running `mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-freebsd-12-20210628192839-f13d79e`\r\nVery few changes since startup.\r\n\r\nI did generate my own FreeBSD12.2 crossrootfs\r\n\r\nI'm working off the `main` branch with the changes I linked to.\r\nThis is the command I'm using:\r\n`eng/build.sh -c Debug -cross -os freebsd -ci /p:OfficialBuildId=$(date +%Y%m%d)-99 --clang-12`",
          "createdAt": "2021-08-09T23:34:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T23:34:40Z",
          "id": "IC_kwDODI9FZc41Yhfi"
        },
        {
          "author": "jasonpugsley",
          "body": "It looks like the file you are missing was installed by the package `icu-68.2,1` that I installed on my FreeBSD 12.2 host before generating the crossrootfs from it.\r\n\r\nI'm also using this same 12.2 host to do the native builds.",
          "createdAt": "2021-08-09T23:55:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-09T23:56:39Z",
          "id": "IC_kwDODI9FZc41YjGt"
        },
        {
          "author": "jasonpugsley",
          "body": "Oh wait, I just remembered a change - it's the whole pkg-config thing that I know very little (nothing) about (rather like CMake which I've only just tried to learn about this weekend).\r\n\r\nOn the FreeBSD host,\r\n`/usr/local/libdata/pkgconfig/icu-uc.pc`\r\ncontains\r\n`prefix = /usr/local`\r\n\r\nbut on the Linux host I edited\r\n`/crossrootfs/x64/usr/local/libdata/pkgconfig/icu-uc.pc`\r\nso it now contains\r\n`prefix = /crossrootfs/x64/usr/local`\r\n\r\nSo that along with a couple of the changes in the commit I referenced are hopefully correct to make the pkgconfig part work.\r\nI don't know if we'd be better off essentially _hard coding_ some of these things or if the dynamic discovery is the preferred way.",
          "createdAt": "2021-08-10T00:42:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-10T04:53:36Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB1sdYQ=="
          },
          "updatedAt": "2021-08-10T01:33:11Z",
          "id": "IC_kwDODI9FZc41YnNa"
        },
        {
          "author": "Thefrank",
          "body": "Changing that path fixed the crossrootfs build! It now produces FreeBSD output for mono\r\n\r\nI have no idea how to fix it for the docker build",
          "createdAt": "2021-08-10T05:07:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T05:07:31Z",
          "id": "IC_kwDODI9FZc41Y8xd"
        },
        {
          "author": "jasonpugsley",
          "body": "Can you try building the entire runtime? The changes in the commit should have it producing FreeBSD artifacts for almost everything. Hopefully it works for you as it does for me.",
          "createdAt": "2021-08-10T05:40:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T05:40:47Z",
          "id": "IC_kwDODI9FZc41Y_lZ"
        },
        {
          "author": "jasonpugsley",
          "body": "> I have no idea how to fix it for the docker build\r\n\r\nYeah, this isn't pretty:\r\n`sed -i \"s~prefix = /usr/local~prefix = ${ROOTFS_DIR}/usr/local~\" ${ROOTFS_DIR}/usr/local/libdata/pkgconfig/icu-uc.pc`\r\n\r\nYou'd have to either run it once after the container starts and has access to the crossrootfs volume.\r\nOr do the modification in the crossrootfs before starting the container (which makes more sense for repeated use in subsequent containers).",
          "createdAt": "2021-08-10T06:27:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T06:28:59Z",
          "id": "IC_kwDODI9FZc41ZEVj"
        },
        {
          "author": "Thefrank",
          "body": "still getting the `DAC_TABLE_RVA` related error when using crossrootfs (FreeBSD 12.2 built from Arcade script on Ubuntu 20.04.2). I assume I am missing something it wants but AFAIK I have all the basic build tools installed but also using LLVM11.\r\n\r\nEverything else (mono,libs,host) build fine\r\n\r\nedit: docker containers are also used in the CI for building runtime for FreeBSD",
          "createdAt": "2021-08-10T06:38:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T06:39:13Z",
          "id": "IC_kwDODI9FZc41ZFg4"
        },
        {
          "author": "jasonpugsley",
          "body": "> ```\r\n>   /home/frank/runtime/src/coreclr/debug/daccess/daccess.cpp:7243:38: error: invalid suffix 'x' on integer constant\r\n>       *dacTableAddress = baseAddress + DAC_TABLE_RVA;\r\n>                                        ^\r\n>   /home/frank/runtime/artifacts/obj/coreclr/FreeBSD.x64.Debug/inc/dactablerva.h:1:24: note: expanded from macro 'DAC_TABLE_RVA'\r\n>   #define DAC_TABLE_RVA 0x          e25a00\r\n>                          ^\r\n> ```\r\nAccording to `src/coreclr/pal/tools/gen-dactable-rva.sh` that hex number is meant to be zero padded but in your case it's being padded with spaces. It should be `0x0000000000e25a00`\r\n\r\nThis is what I get in my generated file:\r\n`#define DAC_TABLE_RVA 0x0000000000dde600`\r\n\r\nWhich I think is from this\r\n```\r\nroot@d5281d153a71:/dotnet/runtime# nm -D -P -t x /dotnet/runtime/artifacts/obj/coreclr/FreeBSD.x64.Debug/dlls/mscoree/coreclr/libcoreclr.so|grep g_dacTable\r\ng_dacTable B 0000000000dde600 00000000000002c0\r\n```",
          "createdAt": "2021-08-10T07:20:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T07:30:05Z",
          "id": "IC_kwDODI9FZc41ZLVz"
        },
        {
          "author": "jasonpugsley",
          "body": "Could be some kind of shell interaction. On the Linux container in a bash session:\r\n```\r\nroot@d5281d153a71:/dotnet/runtime# val=\"123\" ; printf \"%016s\\n\" ${val:(${#val} > 16 ? -16 : 0)}\r\n             123\r\n```\r\n\r\nOn the FreeBSD host in a bash session:\r\n```\r\n[build@freebsd12 /mnt/runtime]$ val=\"123\" ; printf \"%016s\\n\" ${val:(${#val} > 16 ? -16 : 0)}\r\n0000000000000123\r\n```\r\n\r\nBut I can't explain why it's working for me in the Linux cross-build.",
          "createdAt": "2021-08-10T07:48:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T07:48:40Z",
          "id": "IC_kwDODI9FZc41ZPaE"
        },
        {
          "author": "Thefrank",
          "body": "This is what `nm` and `grep` returns on my `artifacts/obj/coreclr/FreeBSD.x64.Debug/dlls/mscoree/coreclr/libcoreclr.so`\r\n `g_dacTable B e25980 2c0`\r\nIt does not appear padded.\r\nI can only think its using the wrong `nm` maybe? edit: nope. both return the same results. I have no idea why bash returns spaces there.",
          "createdAt": "2021-08-10T07:50:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:02:33Z",
          "id": "IC_kwDODI9FZc41ZPqQ"
        },
        {
          "author": "jasonpugsley",
          "body": "Mine:\r\n```\r\nroot@d5281d153a71:/dotnet/runtime# nm --version\r\nGNU nm (GNU Binutils for Ubuntu) 2.30\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nThis program is free software; you may redistribute it under the terms of\r\nthe GNU General Public License version 3 or (at your option) any later version.\r\nThis program has absolutely no warranty.\r\n```\r\n\r\n\r\n> But I can't explain why it's working for me in the Linux cross-build.\r\n\r\nProbably because it's already zero padded for me.",
          "createdAt": "2021-08-10T08:03:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:04:46Z",
          "id": "IC_kwDODI9FZc41ZRug"
        },
        {
          "author": "jasonpugsley",
          "body": "Could you check the version of `nm` you're using?",
          "createdAt": "2021-08-10T08:30:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:30:17Z",
          "id": "IC_kwDODI9FZc41ZWSj"
        },
        {
          "author": "Thefrank",
          "body": "`GNU nm (GNU Binutils for Ubuntu) 2.34`\r\nThe one inside the docker container is same as yours 2.30.\r\nand `bash` version just incase its a `printf` thing `GNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu)` im outta ideas and energy ill revisit this in the morning",
          "createdAt": "2021-08-10T08:39:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:39:42Z",
          "id": "IC_kwDODI9FZc41ZXxU"
        },
        {
          "author": "jasonpugsley",
          "body": "Yes I'm no wiser. Bash in my container is `GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)`",
          "createdAt": "2021-08-10T08:46:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:46:47Z",
          "id": "IC_kwDODI9FZc41ZY4v"
        },
        {
          "author": "sec",
          "body": "printf is not bash or shell related - it's part of coreutils on linux?\r\nI've checked the outputs on my bsd boxes, and using %s produce padding zeros (as man said).\r\nBut on linux, man page for printf don't mention anything about padding zeros (some online man have some examples for it).\r\n\r\nCan you try `val=\"123\" ; printf \"%016d\\n\" ${val:(${#val} > 16 ? -16 : 0)}` ?",
          "createdAt": "2021-08-10T08:53:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:53:34Z",
          "id": "IC_kwDODI9FZc41ZZ81"
        },
        {
          "author": "jasonpugsley",
          "body": "And I can't find anywhere where the the actual constant `DAC_TABLE_RVA` is used in the code. Is it even necessary?",
          "createdAt": "2021-08-10T08:54:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T08:54:00Z",
          "id": "IC_kwDODI9FZc41ZaBO"
        },
        {
          "author": "jasonpugsley",
          "body": "> Can you try `val=\"123\" ; printf \"%016d\\n\" ${val:(${#val} > 16 ? -16 : 0)}` ?\r\n\r\nThat does work for base 10. I guess we could change the command to `nm -D -P -t d`\r\n\r\nAnd if `DAC_TABLE_RVA` is needed, does it need to be zero padded?",
          "createdAt": "2021-08-10T09:08:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T09:14:45Z",
          "id": "IC_kwDODI9FZc41ZcYz"
        },
        {
          "author": "jasonpugsley",
          "body": "```C\r\n  /home/frank/runtime/src/coreclr/debug/daccess/daccess.cpp:7243:38: error: invalid suffix 'x' on integer constant\r\n      *dacTableAddress = baseAddress + DAC_TABLE_RVA;\r\n```\r\n@Thefrank already listed the only location and it looks like the padding isn't necessary.",
          "createdAt": "2021-08-10T15:50:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T15:50:04Z",
          "id": "IC_kwDODI9FZc41ab5d"
        },
        {
          "author": "sec",
          "body": "if you ask me, that's just define const, in the end is numeric value, so 0xe25a00 == 0x0000000000000e25a00, right? ;)",
          "createdAt": "2021-08-10T16:31:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T16:31:03Z",
          "id": "IC_kwDODI9FZc41aeDO"
        },
        {
          "author": "Thefrank",
          "body": "| For other conversions, the result is undefined.\r\nfrom `printf(3)` man page under the `0` padding flag. The \"other\" here includes `s`\r\n\r\nhttps://man7.org/linux/man-pages/man3/printf.3.html\r\n\r\n---\r\nAs the official docker containers don't have this issue I am just going to assume it is something wrong/too new/too old/missing/too much/whatever with my build environment and move on hah",
          "createdAt": "2021-08-10T17:30:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-10T17:30:03Z",
          "id": "IC_kwDODI9FZc41apKQ"
        },
        {
          "author": "Thefrank",
          "body": "ok, without needing to edit pkgconfig files. There should be a way via CMake to make sure it is using the correct path.\r\n\r\nI was manually able to edit the CMakeCache.txt for mono and add in the path prefix and got it to build. I will investigate if there is a way to setup the correct \"root\" path via CMakeList.txt when I get some more time later this week unless someone knows the answer offhand :)",
          "createdAt": "2021-08-12T06:16:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-12T06:16:13Z",
          "id": "IC_kwDODI9FZc41fOYJ"
        },
        {
          "author": "jasonpugsley",
          "body": "1.\r\n> ok, without needing to edit pkgconfig files\r\n\r\nSo you're saying remove the requirement for / use of pkgconfig?\r\n\r\n2.\r\nDoes anyone know if the other 3 main repos can cross-build for FreeBSD on Linux?\r\ndotnet/aspnetcore\r\ndotnet/sdk\r\ndotnet/installer\r\n\r\nOf course they'll want to pull down dependent FreeBSD nuget packages that don't exist anywhere yet but I'd like to investigate what steps remain in the build pipelines. Cross-building still looks like the fastest way to getting FreeBSD into the official build system at some point.\r\n\r\n3.\r\nI've got some bits of code that I'd like to contribute soonish. I expect we can all agree that FreeBSD 12.2 is now the release (libc version) that we can code against going forward? I would be interested if anyone has other ideas.",
          "createdAt": "2021-08-12T07:12:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-12T07:12:48Z",
          "id": "IC_kwDODI9FZc41fUzj"
        },
        {
          "author": "ta264",
          "body": "> Does anyone know if the other 3 main repos can cross-build for FreeBSD on Linux?\r\n> dotnet/aspnetcore\r\n> dotnet/sdk\r\n> dotnet/installer\r\n\r\nYes , you can.  I've been doing it here https://github.com/Servarr/dotnet-bsd (`master` for v5 and `v6` for v6)\r\n\r\nAnd publishing the v5 and v6 previews.  These are cross compiled on linux for freebsd.  We have a fair number of users of the v5 packages and no real reported issues.\r\n\r\nI'm only actually building the sdk on the v6 branch since the official one grabbed by `dotnet/installer` works fine for v5 on bsd.  There's a commit that needs reverting for v6preview6.  I still need to figure out the changes in preview7 to get that one to build.",
          "createdAt": "2021-08-12T07:46:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-12T08:00:47Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-13T07:54:33Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-13T09:22:31Z",
                "user": "onny"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB2PXYA=="
          },
          "updatedAt": "2021-08-12T07:46:12Z",
          "id": "IC_kwDODI9FZc41fZMW"
        },
        {
          "author": "Thefrank",
          "body": "give this a try in `runtime/src/mono/CMakeLists.txt`\r\nafter `pkg_check_modules(ICU icu-uc)`\r\n```\r\nset(ICU_PREFIX $ENV{ROOTFS_DIR} CACHE INTERNAL \"\")\r\nset(ICU_INCLUDEDIR $ENV{ROOTFS_DIR}/usr/local/include CACHE INTERNAL \"\")\r\n```\r\n\r\nit should allow the mono part to build without the need for modifying .pc files.\r\nI will note that this is a SUPER hacky of doing it and I am not sure why `pkg-config` does not correctly write in the `ROOTFS_DIR` into the cache.",
          "createdAt": "2021-08-13T01:41:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-13T01:41:03Z",
          "id": "IC_kwDODI9FZc41h9b1"
        },
        {
          "author": "Thefrank",
          "body": "A follow up to my fix:\r\nIt seems like that ICU check also triggers on native builds so the above `set` lines will also trigger on native builds. I will need to find a better fix...it still builds without issue but solution > hacky-fix\r\n\r\nAlso, it seems like `artifacts/obj/mono/FreeBSD.x64.Release/out/lib/libcoreclr.so` is still outputting it as SYSV under crossbuilds. `artifacts/obj/mono/FreeBSD.x64.Release/out/bin/mono-sgen` is FreeBSD though.",
          "createdAt": "2021-08-14T20:59:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-14T20:59:48Z",
          "id": "IC_kwDODI9FZc41lQNE"
        },
        {
          "author": "jasonpugsley",
          "body": "They're both FreeBSD objects in my build (Debug).\r\nCheck that you changed the linker to be lld in `eng/common/cross/toolchain.cmake`\r\n\r\nThen see what cmake is using\r\n```\r\nroot@d5281d153a71:/dotnet/runtime# grep lld artifacts/obj/mono/FreeBSD.x64.Debug/*        \r\nartifacts/obj/mono/FreeBSD.x64.Debug/CMakeCache.txt:CMAKE_EXE_LINKER_FLAGS:STRING=-fuse-ld=lld\r\nartifacts/obj/mono/FreeBSD.x64.Debug/CMakeCache.txt:CMAKE_LINKER:FILEPATH=/usr/lib/llvm-12/bin/ld.lld\r\nartifacts/obj/mono/FreeBSD.x64.Debug/CMakeCache.txt:CMAKE_MODULE_LINKER_FLAGS:STRING=-fuse-ld=lld\r\nartifacts/obj/mono/FreeBSD.x64.Debug/CMakeCache.txt:CMAKE_SHARED_LINKER_FLAGS:STRING=-fuse-ld=lld\r\n```\r\nI expect `CMAKE_SHARED_LINKER_FLAGS` should be in action for this one.\r\n\r\nAlso which version of llvm/clang are you using? Though I don't know if it makes any difference.",
          "createdAt": "2021-08-15T03:12:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-15T03:42:25Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB2XrLA=="
          },
          "updatedAt": "2021-08-15T03:12:33Z",
          "id": "IC_kwDODI9FZc41lXpM"
        },
        {
          "author": "Thefrank",
          "body": "I was missing the changed linker. It now correctly produces FreeBSD `libcoreclr.so` under the official docker container!",
          "createdAt": "2021-08-15T03:43:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-15T03:43:43Z",
          "id": "IC_kwDODI9FZc41lYK8"
        },
        {
          "author": "jasonpugsley",
          "body": "I have refined the ICU section of `src/mono/CMakeLists.txt` a little more so we can remove the pkgconfig dependency.\r\n```cmake\r\nelseif(TARGET_FREEBSD)\r\n  set(ICU_FLAGS \"-DTARGET_UNIX -Wno-deprecated-declarations\")\r\n  set(HAVE_SYS_ICU 1)\r\n  set(ICU_LIBS icuuc icui18n)\r\n  set(ICU_INCLUDEDIR \"${CROSS_ROOTFS}/usr/local/include\")\r\n  set(ICU_LIBDIR \"${CROSS_ROOTFS}/usr/local/lib\")\r\n```\r\n`CROSS_ROOTFS` only has a value during a cross-build.\r\n\r\nAnd I have removed the pkgconfig search directories I added before to `src/mono/mono.proj`  so the addition is now just\r\n```xml\r\n    <!-- x64 FreeBSD cross build options -->\r\n    <ItemGroup Condition=\"'$(TargetsFreeBSD)' == 'true' and '$(MonoCrossDir)' != ''\">\r\n      <_MonoCMakeArgs Include=\"-DCMAKE_TOOLCHAIN_FILE=$([MSBuild]::NormalizePath('$(RepositoryEngineeringDir)', 'common', 'cross', 'toolchain.cmake'))\" />\r\n      <_MonoBuildEnv Include=\"TARGET_BUILD_ARCH=x64\" />\r\n    </ItemGroup>\r\n```\r\n\r\nHere is the full updated commit https://github.com/jasonpugsley/runtime/commit/285f9fd10a89491694fa7edee9f538eec04b9129 Feedback welcome.\r\n\r\nDo we need to discuss the merits of actually using pkgconfig? It seems like overkill when we still have to tell it where to find `icu-uc.pc` - if we don't expect the contents to be anywhere other than `/usr/local/include` and `/usr/local/lib` then we may as well just define them as such.",
          "createdAt": "2021-08-15T06:14:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-15T06:39:06Z",
                "user": "Thefrank"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-08-15T06:43:14Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB2X16Q=="
          },
          "updatedAt": "2021-08-15T06:14:35Z",
          "id": "IC_kwDODI9FZc41la7K"
        },
        {
          "author": "Thefrank",
          "body": "`pkg-config` is on the official docker images. So its there if needed, but other than `icu` I don't see anywhere else it is used for FreeBSD cross or native builds.\r\nThat being said... FreeBSD has `pkgconfig` (?) as a port so we have an option there but here it would needlessly add a single-use dependency for native builds. \r\n\r\nWe don't need `pkg-config` at this time AFAIK and I am for fewer dependencies. ",
          "createdAt": "2021-08-15T06:55:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-15T07:00:35Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB2X3Hw=="
          },
          "updatedAt": "2021-08-15T06:55:01Z",
          "id": "IC_kwDODI9FZc41lbxZ"
        },
        {
          "author": "jasonpugsley",
          "body": "I have updated PR https://github.com/dotnet/runtime/pull/57027 with the cross-build fixes.\r\nUnfortunately the CI setup needs an updated container\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1295235&view=logs&j=ec3fd5a2-f351-5950-0071-711b5e099170&t=3880d11b-8ca5-5554-aa90-2aba6cbb38b7\r\nHow do we fix this?\r\n",
          "createdAt": "2021-08-16T06:22:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-16T06:22:23Z",
          "id": "IC_kwDODI9FZc41mYuA"
        },
        {
          "author": "Thefrank",
          "body": "What is needed? The container it is using is pretty old (early 2020?) and FreeBSD 11.3. It might just need a newer container. The FreeBSD 11 is still 11.3 but the FreeBSD 12 is 12.2.\r\n\r\nI think this is the \"official\" list of current containers\r\n(https://github.com/dotnet/versions/blob/main/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json)",
          "createdAt": "2021-08-16T07:09:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-16T07:09:53Z",
          "id": "IC_kwDODI9FZc41md_7"
        },
        {
          "author": "arrowd",
          "body": "Just FYI, the 11.3 release is EOL is not supported anymore.",
          "createdAt": "2021-08-16T08:47:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-16T08:47:46Z",
          "id": "IC_kwDODI9FZc41msay"
        },
        {
          "author": "jasonpugsley",
          "body": "I updated the PR to use the latest container. It has a crossrootfs from FreeBSD12.1\r\nI'd still like to get a 12.2 crossrootfs in there instead. Does anyone know how that process is managed?\r\n\r\nThe builds are working now but the configuration doesn't have an entry for FreeBSD/mono in `eng/pipelines/runtime.yml`\r\nThe 3 that are already configured were all built successfully.\r\n- CoreCLR Product Build FreeBSD x64 release\r\n- Libraries Build FreeBSD x64 Debug\r\n- Installer Build and Test coreclr FreeBSD_x64 Release\r\n\r\nI'll open an issue to hopefully get FreeBSD added to one or more of the mono sections in `eng/pipelines/runtime.yml`",
          "createdAt": "2021-08-16T10:29:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-16T10:29:03Z",
          "id": "IC_kwDODI9FZc41m8my"
        },
        {
          "author": "jasonpugsley",
          "body": "Issue https://github.com/dotnet/runtime/issues/57487 created. Hopefully PR https://github.com/dotnet/runtime/pull/57027 can be ready to merge soon.\r\n",
          "createdAt": "2021-08-16T10:48:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-08-16T10:52:50Z",
                "user": "XVilka"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-08-16T11:09:18Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB2dBXA=="
          },
          "updatedAt": "2021-08-16T10:48:30Z",
          "id": "IC_kwDODI9FZc41m_K2"
        },
        {
          "author": "jasonpugsley",
          "body": "I don't want to count my chickens, but I'd still like to work towards getting automated FreeBSD dailies built.\r\nMaybe even added here under the **main (6.0.x Runtime)** column\r\nhttps://github.com/dotnet/installer/blob/main/README.md#daily-builds\r\nBut at least have the artifacts hosted with all of the other platforms so we can use them in builds in the downstream repos.\r\n\r\n@Thefrank and I have had success building the complete runtime under Linux, but are we ready to create an issue to start the discussion to add cross-built FreeBSD to the dailies or is there more work to be done first?\r\n\r\nI just want to emphasize, this is only about having daily builds/artifacts generated/published. This is not a request for either official or unofficial support of those builds.",
          "createdAt": "2021-08-17T02:49:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-17T05:32:52Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-17T05:50:40Z",
                "user": "josteink"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-17T08:34:43Z",
                "user": "XVilka"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-17T22:46:43Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-18T11:10:00Z",
                "user": "bqstony"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-22T22:03:06Z",
                "user": "NeLaurynas"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOB3SbVg=="
          },
          "updatedAt": "2021-08-17T03:30:51Z",
          "id": "IC_kwDODI9FZc41pC1p"
        },
        {
          "author": "josteink",
          "body": "I think that sounds like a reasonable request, especially if it can aid further progress for the general porting-progress. \r\n\r\nWho can make it happen?",
          "createdAt": "2021-08-17T05:51:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-17T05:51:43Z",
          "id": "IC_kwDODI9FZc41pRl2"
        },
        {
          "author": "rootwyrm",
          "body": "I'll see if I can take a look at mono sometime this week. I'm still hesitant because there are known bugs - particularly in GC with the shift to CLR-like behavior - that will lead to `panic()` in low memory situations. \r\n\r\nAlso not 100% comfortable with the crossroot because the version of pkg is *way* downrev. And it's going to require some thought as to how to handle vuxml bumps.",
          "createdAt": "2021-08-17T14:13:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-17T14:13:33Z",
          "id": "IC_kwDODI9FZc41qgcD"
        },
        {
          "author": "Thefrank",
          "body": "For daily, AFAIK (and what I remember from trying to build from p6)\r\n\r\n* dotnet/Runtime needs to output a `Crossgen2` nupkg which is used by itself for native builds(?) and Aspnetcore. I was never able to get Perfmap to work which becomes and issue for Aspnetcore so...\r\n* dotnet/Aspnetcore needs to be updated to understand FreeBSD as a valid RID. This is only 2 lines in its `eng/Dependencies.props`. Also because Aspnetcore uses `Perfmap` during crossgen and we don't have that feature (yet) so it will need to be built with ` /p:CrossgenOutput=false`\r\n* dotnet/Installer needs RIDs for FreeBSD added to its `src/redist/targets/GenerateBundledVersions.targets`. It also needs crossgen turned off and does not automagically include Aspnetcore so `/p:OSName=freebsd /p:CrossgenOutput=false  /p:IncludeAspNetCoreRuntime=true` are needed\r\n\r\nOther issues (as of p6):\r\n* `donet` `restore` segfaults on multithread tasks\r\n* dotnet/SDK required a revert mentioned by @ta264 otherwise `dotnet` would segfault. This custom SDK had to be manually added when building the installer. \r\n\r\nBoth of those *MAY* have been related to mono not being produced correctly under crossbuilds but I have not had the time to build a complete package for dotnet6 since p6. I will try to get to it later this week.",
          "createdAt": "2021-08-17T22:48:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-17T22:48:02Z",
          "id": "IC_kwDODI9FZc41r083"
        },
        {
          "author": "jasonpugsley",
          "body": "@rootwyrm I think you've gone further ahead than what I was thinking - sorry if I was unclear.\r\n\r\nAt this stage I'm only suggesting providing daily built artifacts of dotnet/runtime for those of us working on further development and fixes. This isn't intended to be used by potential end-users.\r\n\r\nWe're lucky to have some people dedicated enough to learn how to build the various pieces and host the results for others to download. That includes me - I'm using https://github.com/Servarr/dotnet-bsd/releases for some of my development work and I'd be way behind without it. But it's a lot to expect a few individuals to keep on top of producing these builds - I know there is a lot of work involved.\r\n\r\nThe ability to build a complete SDK natively on FreeBSD is possible today - provided you have an existing SDK at some specified version. Version bumps of the seed SDK happen often on the main branch which is why having a history of the build artifacts published is essential. We don't have that history but we do have the ability to cross-build from Linux (which I've only just started doing) - it works _and_ it should allow us to use the existing dotnet project devops infrastructure to get that history of FreeBSD builds.\r\n\r\nOn a side note, it may not be the daily-builds that get used for feeding back into subsequent builds so where ever I've mentioned daily build just substitute the correct automated build.",
          "createdAt": "2021-08-18T02:27:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-18T02:27:03Z",
          "id": "IC_kwDODI9FZc41sJAb"
        },
        {
          "author": "Thefrank",
          "body": "Following up under the \"issues\" section from my last post:\r\n\r\ndotnet/SDK still needs to the revert the commit otherwise `dotnet` will segfault :(",
          "createdAt": "2021-08-20T00:05:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-20T00:05:20Z",
          "id": "IC_kwDODI9FZc41yH2i"
        },
        {
          "author": "jasonpugsley",
          "body": "> dotnet/SDK still needs to the revert the commit otherwise `dotnet` will segfault :(\r\n\r\nThat commit is all managed code which doesn't seem to have caused problems on other platforms. One notable change is in `src/Cli/dotnet/Program.cs` it pulls in `System.Runtime.InteropServices` to use `Process.GetCurrentProcess().StartTime`\r\nThat's in the runtime repo in `src/libraries/Common/src/Interop/FreeBSD` so I'll hunt around in there.",
          "createdAt": "2021-08-20T03:03:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-20T06:59:57Z",
                "user": "josteink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-22T07:56:59Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB3Q9YA=="
          },
          "updatedAt": "2021-08-20T03:03:18Z",
          "id": "IC_kwDODI9FZc41yXCb"
        },
        {
          "author": "jasonpugsley",
          "body": "@Thefrank When you get a chance to look at this could you try commenting out the free to pBuffer. It looks like that is a bug as the buffer gets returned to the caller and they free it as well. You should be able to remove the revert in dotnet/sdk after that fix.\r\n\r\n```diff\r\ndiff --git a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs\r\nindex bc1920c0156..3f47bb6ebac 100644\r\n--- a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs\r\n+++ b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs\r\n@@ -221,7 +221,7 @@ public unsafe struct kinfo_proc\r\n             }\r\n             finally\r\n             {\r\n-                Marshal.FreeHGlobal((IntPtr)pBuffer);\r\n+                //Marshal.FreeHGlobal((IntPtr)pBuffer);\r\n             }\r\n \r\n             return kinfo;\r\n```\r\n",
          "createdAt": "2021-08-24T23:28:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-25T05:38:40Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB3p9QA=="
          },
          "updatedAt": "2021-08-24T23:28:24Z",
          "id": "IC_kwDODI9FZc418djD"
        },
        {
          "author": "jkotas",
          "body": ">  It looks like that is a bug as the buffer gets returned to the caller and they free it as well.\r\n\r\nYes, it is a bug. I have submitted #58085 to fix it.",
          "createdAt": "2021-08-25T00:25:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-25T00:26:42Z",
                "user": "jasonpugsley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T05:38:33Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB3p9Nw=="
          },
          "updatedAt": "2021-08-25T00:25:45Z",
          "id": "IC_kwDODI9FZc418jAr"
        },
        {
          "author": "arrowd",
          "body": "This PR shouldn't be closed yet, I presume?",
          "createdAt": "2021-08-25T06:59:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T07:50:33Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB3q8ag=="
          },
          "updatedAt": "2021-08-25T06:59:52Z",
          "id": "IC_kwDODI9FZc419NAO"
        },
        {
          "author": "Thefrank",
          "body": "It looks like the bot auto-closed this when the PR in https://github.com/dotnet/runtime/pull/58085 was merged in. This should likely stay open :)",
          "createdAt": "2021-08-25T07:19:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T09:47:19Z",
                "user": "karelz"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB3sG1A=="
          },
          "updatedAt": "2021-08-25T07:19:18Z",
          "id": "IC_kwDODI9FZc419Py5"
        },
        {
          "author": "karelz",
          "body": "Reopening as it was closed by accident as described above ...",
          "createdAt": "2021-08-25T09:47:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-25T09:47:42Z",
          "id": "IC_kwDODI9FZc419ork"
        },
        {
          "author": "jasonpugsley",
          "body": "With the latest fixes + https://github.com/dotnet/runtime/pull/57027 + the fchmod fix for `src/native/eventpipe/ds-ipc-pal-socket.c`, I have cross-built a 7.0.0-dev runtime and merged it into a 7.0.100-dev installer.\r\nThen with a bit of version string editing in the `sdk/7.0.100-dev/Microsoft.NETCoreSdk.BundledVersions.props` file I've then created a directory on a 12.2 host, a nuget.config pointing to my FreeBSD runtime packages, and run `dotnet new console` and `dotnet run` successfully.\r\n\r\n@Thefrank I haven't looked at aspnetcore just yet and it made up a few of the points you had as needing work.\r\nWe shouldn't need perfmap - from what I remember it's very Linux  centric and FreeBSD doesn't have the tools to make use of it. I'll probably take a look at crossgen2 next to see what needs to be done there.\r\n\r\nNow that `main` is targeting .NET 7, does someone know who we can talk to about getting the `freebsd-x64` RID added in the correct places in the `runtime`, `aspnetcore`, `sdk` and `installer` repos?\r\n",
          "createdAt": "2021-08-25T13:31:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-08-27T06:58:31Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-27T13:53:45Z",
                "user": "arkadiuszwojcik"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-29T06:26:28Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-01T03:39:24Z",
                "user": "backerman"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB4j1Mw=="
          },
          "updatedAt": "2021-08-25T13:32:30Z",
          "id": "IC_kwDODI9FZc41-OYk"
        },
        {
          "author": "Thefrank",
          "body": "It looks like https://github.com/dotnet/runtime/pull/58314 bot merge rebroke FreeBSD by undoing changes made to make it work",
          "createdAt": "2021-09-12T12:57:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-12T12:57:18Z",
          "id": "IC_kwDODI9FZc42sfGd"
        },
        {
          "author": "josteink",
          "body": "Good triaging. I’ve mentioned it in the PR itself, but it looks like we might need to follow up with a PR of our own. \r\n\r\nThat said: the FreeBSD-breaking changes seems completely unrelated to all the other changes, so I’m not sure why they were included in the first place, and what risk there are for such changes to be reintroduced later.\r\n\r\nThey really stand out and look pretty weird in the context of that PR IMO. ",
          "createdAt": "2021-09-12T13:51:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-12T13:51:38Z",
          "id": "IC_kwDODI9FZc42shRw"
        },
        {
          "author": "wfurt",
          "body": "The RID should be only in runtime. (and freebsd should be already there). The problem I was facing before is that there are no references to platform specific bits for FreeBSD. \r\nThe 6.0 fires are mostly out and I hope to have some time again. My next two goals are to update FreeBSD leg to cover at least some packaging (we will still not publish but to make sure it works) and to get builds from runtimelabs so there is some automation others can follow. \r\n",
          "createdAt": "2021-09-12T18:13:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-12T18:13:09Z",
          "id": "IC_kwDODI9FZc42sr8g"
        },
        {
          "author": "jasonpugsley",
          "body": "The `installer` repo does need the RID added to the correct RID list in `GenerateBundledVersions.targets`\r\nThe current TFM in main is still 6 so this seems right for now.\r\n\r\n```diff\r\ndiff --git a/src/redist/targets/GenerateBundledVersions.targets b/src/redist/targets/GenerateBundledVersions.targets\r\nindex 21d035d9b..aa2934064 100644\r\n--- a/src/redist/targets/GenerateBundledVersions.targets\r\n+++ b/src/redist/targets/GenerateBundledVersions.targets\r\n@@ -105,6 +105,7 @@\r\n       <Net60AppHostRids Include=\"\r\n           @(Net50AppHostRids);\r\n           osx-arm64;\r\n+          freebsd-x64;\r\n           \"/>\r\n\r\n       <Net60RuntimePackRids Include=\"\r\n@@ -112,6 +113,7 @@\r\n           osx-arm64;\r\n           maccatalyst-x64;\r\n           maccatalyst-arm64;\r\n+          freebsd-x64;\r\n           \" />\r\n\r\n       <!-- In .NET 6 the browser-wasm runtime pack started using the Mono naming pattern -->\r\n```\r\n\r\n\r\nWithout this change you come up against\r\n`NETSDK1084: There is no application host available for the specified RuntimeIdentifier freebsd-x64`",
          "createdAt": "2021-09-13T03:44:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-13T03:44:29Z",
          "id": "IC_kwDODI9FZc42tLdF"
        },
        {
          "author": "josteink",
          "body": "> The `installer` repo does need the RID added to the correct RID list in `GenerateBundledVersions.targets`\r\n\r\nImplemented in a PR here: https://github.com/dotnet/installer/pull/11972\r\n",
          "createdAt": "2021-09-13T06:52:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-13T06:52:12Z",
          "id": "IC_kwDODI9FZc42te4j"
        },
        {
          "author": "Thefrank",
          "body": "Aspnetcore needs RIDs to build for FreeBSD these are under `aspnetcore/eng/Dependencies.props` . The installer would need the RID for FreeBSD+aspnetcore too in `GenerateBundledVersions.targets`. Newest field for that appears to be `AspNetCore50RuntimePackRids `?\r\n\r\nEDIT: It has been a while since I tried with aspnetcore but from what I recall under net60 it also wanted crossgen references / packages which runtime doesn't make for FreeBSD\r\n\r\nEDIT2: Honestly, I would need to investigate what aspnetcore requires more to make sure everything that it needs can be built before requesting RID additions. I will try and get that done this week",
          "createdAt": "2021-09-13T07:27:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-13T07:55:16Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB6A5vA=="
          },
          "updatedAt": "2021-09-13T07:31:15Z",
          "id": "IC_kwDODI9FZc42tk4z"
        },
        {
          "author": "josteink",
          "body": "> Newest field for that appears to be `AspNetCore50RuntimePackRids` ?\r\n\r\nYou actually have a plain, unversioned ` AspNetCoreRuntimePackRids`-element below which depends on this element:\r\n\r\n````xml\r\n      <AspNetCore31RuntimePackRids Include=\"@(AspNetCore30RuntimePackRids)\" />\r\n      <AspNetCore50RuntimePackRids Include=\"@(AspNetCore31RuntimePackRids);linux-musl-arm;win-arm64\" />\r\n      <AspNetCoreRuntimePackRids Include=\"@(AspNetCore50RuntimePackRids);osx-arm64\" />\r\n````\r\n\r\nNot knowing anything about how these are used though, it's hard to tell which one is the appropriate target.",
          "createdAt": "2021-09-13T07:56:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-13T07:56:57Z",
          "id": "IC_kwDODI9FZc42tphV"
        },
        {
          "author": "Thefrank",
          "body": "so, not runtime related, but aspnetcore, this is the diff needed to build aspnetcore HOWEVER there are important notes:\r\n\r\n```\r\ndiff --git a/NuGet.config b/NuGet.config\r\nindex f7375b2fdc..83143214fa 100644\r\n--- a/NuGet.config\r\n+++ b/NuGet.config\r\n@@ -1,4 +1,4 @@\r\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n <configuration>\r\n   <packageSources>\r\n     <clear />\r\n@@ -14,6 +14,7 @@\r\n     <add key=\"dotnet31-transport\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json\" />\r\n     <!-- Used for the Rich Navigation indexing task -->\r\n     <add key=\"richnav\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-buildservices/nuget/v3/index.json\" />\r\n+    <add key=\"local\" value=\"../runtime/artifacts/packages/Release/Shipping\" />\r\n   </packageSources>\r\n   <disabledPackageSources>\r\n     <clear />\r\ndiff --git a/eng/Dependencies.props b/eng/Dependencies.props\r\nindex b0904d2b24..c59b3eb439 100644\r\n--- a/eng/Dependencies.props\r\n+++ b/eng/Dependencies.props\r\n@@ -93,6 +93,7 @@ and are generated based on the last package release.\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.osx-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.osx-arm64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-x64\" />\r\n+    <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.freebsd-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-arm\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-arm64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-x64\" />\r\n@@ -100,6 +101,7 @@ and are generated based on the last package release.\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-arm64\" />\r\n \r\n     <!-- Crossgen2 compiler -->\r\n+    <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.freebsd-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.osx-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.osx-arm64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.linux-musl-x64\" />\r\n```\r\n\r\nThe notes:\r\n- This is for preview 7 tag not `main/HEAD`\r\n- restore can not download runtime packages (because they don't exist) so we need to add the local output from `runtime` as a NuGet source\r\n- runtime does not produce a `Crossgen2` nuget so this error comes up `aspnetcore/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1101: Unable to find package Microsoft.NETCore.App.Crossgen2.freebsd-x64. No packages exist with this id in source(s): dotnet-eng, dotnet-experimental, dotnet-public, dotnet-tools, dotnet31-transport, dotnet5, dotnet5-transport, dotnet6, dotnet6-transport, local, richnav [/home/frank/aspnetcore/.dotnet/sdk/6.0.100-preview.7.21373.23/NuGet.targets]` and the build fails.\r\n- adding freebsd-x64 in `runtime` to the list of crossgen2 outputs allows `runtime` to create a `Crossgen2` NuGet. UNFORTUNEATELY:\r\n- `aspnetcore` appears to use `/PERFMAP` during crossgen. This is not available for the FreeBSD Crossgen2 package and causes the build to fail. This can be worked around by using `/p:CrossgenOutput=false`\r\n- so `aspnetcore/eng/build.sh -c Release -ci --os-name freebsd -pack /p:CrossgenOutput=false /p:OfficialBuildId=$OFFICIALBUILDID` will work but it requires building a package that ends up not being used.\r\n\r\nBut we might have a workaround for local builds!\r\n\r\n------------------------------\r\n\r\nThe workaround for local builds. This should not be made into a PR as it changes how `aspnetcore` needs to be built to get the same, current outputs. (@ta264 figured this out 😄 ):\r\n```\r\ndiff --git a/NuGet.config b/NuGet.config\r\nindex f7375b2fdc..83143214fa 100644\r\n--- a/NuGet.config\r\n+++ b/NuGet.config\r\n@@ -1,4 +1,4 @@\r\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n <configuration>\r\n   <packageSources>\r\n     <clear />\r\n@@ -14,6 +14,7 @@\r\n     <add key=\"dotnet31-transport\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json\" />\r\n     <!-- Used for the Rich Navigation indexing task -->\r\n     <add key=\"richnav\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-buildservices/nuget/v3/index.json\" />\r\n+    <add key=\"local\" value=\"../runtime/artifacts/packages/Release/Shipping\" />\r\n   </packageSources>\r\n   <disabledPackageSources>\r\n     <clear />\r\ndiff --git a/eng/Dependencies.props b/eng/Dependencies.props\r\nindex b0904d2b24..84170f00d2 100644\r\n--- a/eng/Dependencies.props\r\n+++ b/eng/Dependencies.props\r\n@@ -93,6 +93,7 @@ and are generated based on the last package release.\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.osx-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.osx-arm64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-x64\" />\r\n+    <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.freebsd-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-arm\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-arm64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-x64\" />\r\ndiff --git a/src/Components/Web.JS/dist/Release/blazor.webview.js b/src/Components/Web.JS/dist/Release/blazor.webview.js\r\nindex 2ce9e9dd26..085dfb0656 100644\r\nBinary files a/src/Components/Web.JS/dist/Release/blazor.webview.js and b/src/Components/Web.JS/dist/Release/blazor.webview.js differ\r\ndiff --git a/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj b/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj\r\nindex 7d750fac2d..61e05fd812 100644\r\n--- a/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj\r\n+++ b/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj\r\n@@ -137,7 +137,7 @@ This package is an internal implementation of the .NET Core SDK and is not meant\r\n       This package contains the crossgen2 tool. Unfortunately, it doesn't make the tool easy to use.\r\n       $(GeneratePathProperty) and hacks in the _ExpandRuntimePackageRoot target work around the gaps.\r\n     -->\r\n-    <Reference Include=\"Microsoft.NETCore.App.Crossgen2.$(BuildOsName)-$(Crossgen2BuildArchitecture)\"\r\n+    <Reference Condition=\"'$(CrossgenOutput)' == 'true'\" Include=\"Microsoft.NETCore.App.Crossgen2.$(BuildOsName)-$(Crossgen2BuildArchitecture)\"\r\n         ExcludeAssets=\"All\"\r\n         PrivateAssets=\"All\"\r\n         GeneratePathProperty=\"true\" />\r\n```\r\nThis builds with the command: `aspnetcore/eng/build.sh -c Release -ci --os-name freebsd -pack /p:CrossgenOutput=false /p:OfficialBuildId=$OFFICIALBUILDID` without the need of having `runtime` output a package that will go unused.",
          "createdAt": "2021-09-13T22:09:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-13T22:10:17Z",
          "id": "IC_kwDODI9FZc42wPhN"
        },
        {
          "author": "Thefrank",
          "body": "I am not 100% sure the crossgen2 package is actually being generated correctly :(\r\nBinary:\r\n```\r\n$ file crossgen2\r\ncrossgen2: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=01744ac3edbf7e7a47aa2a069ed0c9be4457df00, for GNU/Linux 2.6.32, stripped\r\n```\r\nEverything else is either mono or native FreeBSD\r\n```\r\n$ file libcoreclr.so \r\nlibcoreclr.so: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, BuildID[sha1]=c8e082704590b417e9a5fcd33d1fee5dda10d8ea, stripped\r\n$ file crossgen2.dll\r\ncrossgen2.dll: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows\r\n```\r\nI will look into this further if I get some more free time later this week.",
          "createdAt": "2021-09-14T20:23:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-14T20:23:44Z",
          "id": "IC_kwDODI9FZc42zj9E"
        },
        {
          "author": "Thefrank",
          "body": "in other news, it looks like we have a tag for RC1.\r\nGood news: The illumos fixes made it in :)\r\nbut not the FreeBSD ones :(\r\nThey still need to be manually patched or cherry-picked.\r\nNo issues with a simple test of `dotnet --info` and `dotnet run`\r\n```\r\nroot@dotnet6:~ # ./dotnet6/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-rc.1.21458.32\r\n Commit:    d7c22323c4\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /root/dotnet6/sdk/6.0.100-rc.1.21458.32/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-rc.1.21451.13\r\n  Commit:  d7619cd4b1\r\n\r\n.NET SDKs installed:\r\n  6.0.100-rc.1.21458.32 [/root/dotnet6/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-rc.1.21452.15 [/root/dotnet6/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.1.21451.13 [/root/dotnet6/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n-----------------\r\n```\r\nroot@dotnet6:~/net6test # ../dotnet6/dotnet run net6test\r\nHello, World!\r\n```\r\n\r\nUploading SDK ~shortly~ if people want to use/test it. [HERE](https://github.com/Thefrank/dotnet-freebsd-crossbuild/releases/tag/v6.0.0-rc.1.21451.13)",
          "createdAt": "2021-09-15T02:06:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-09-15T05:10:31Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-15T10:14:32Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB6aP_w=="
          },
          "updatedAt": "2021-09-15T02:19:16Z",
          "id": "IC_kwDODI9FZc420JUe"
        },
        {
          "author": "josteink",
          "body": "> in other news, it looks like we have a tag for RC1.\r\n> Good news: The illumos fixes made it in :)\r\n> but not the FreeBSD ones :(\r\n\r\nNo need for grief. We've already shown we can handle patience.\r\n\r\nWe're making decent progress, and right now it looks like we might land something eventually. As (one of) the guys who initially started this port (for .NET Core 1!!!), just seeing that fills me with great joy :smiley: ",
          "createdAt": "2021-09-15T09:19:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-15T09:19:29Z",
          "id": "IC_kwDODI9FZc4208bH"
        },
        {
          "author": "jasonpugsley",
          "body": "During a build of the runtime repo, crossgen2 is run against `System.Private.CoreLib.dll`. \r\nThe log shows the command being assembled:\r\n`Set Property: CrossGenDllCmd=/dotnet/runtime/dotnet.sh /dotnet/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/crossgen2.dll -o:/dotnet/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/System.Private.CoreLib.dll   ...`\r\nSo it looks like it's using a managed dll (at least when cross-building on Linux - I haven't checked the logs on a FreeBSD build).\r\n\r\nHowever, the nuget package that is generated for crossgen2 uses a binary that gets copied into `/dotnet/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/` (which is just a rebadged apphost) - it's a Linux binary (as @Thefrank pointed out above).\r\nThe log shows `Copying file from \"/dotnet/runtime/artifacts/obj/coreclr/crossgen2/x64/Release/apphost\" to \"/dotnet/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/crossgen2\".`\r\nAnd indeed it is a Linux binary\r\n`# file /dotnet/runtime/artifacts/obj/coreclr/crossgen2/x64/Release/apphost\r\n/dotnet/runtime/artifacts/obj/coreclr/crossgen2/x64/Release/apphost: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=67eb83e2ed9e56bc416a9aae026e2338f079c70a, for GNU/Linux 2.6.32, stripped`\r\n\r\nI can see in the logs, in my case it's originally copying the apphost from the Linux NET SDK that was installed to do the build.\r\n```\r\nUsing \"CreateAppHost\" task from assembly \"/dotnet/runtime/.dotnet/sdk/6.0.100-rc.1.21430.12/Sdks/Microsoft.NET.Sdk/targets/../tools/net6.0/Microsoft.NET.Build.Tasks.dll\".\r\n                   Task \"CreateAppHost\" (TaskId:153)\r\n                     Task Parameter:AppHostSourcePath=/dotnet/runtime/.dotnet/packs/Microsoft.NETCore.App.Host.linux-x64/6.0.0-rc.1.21430.1/runtimes/linux-x64/native/apphost (TaskId:153)\r\n```\r\nSo it seems to use a pre-existing apphost rather than the one that will be generated during the build.\r\nAs a hack you could direct it to use an apphost from an earlier build by adding `/p:AppHostSourcePath=/path_to_existing_binary/apphost` to your build command.\r\nActually after doing this there were no more Linux binaries anywhere under `artifacts/` so it possibly fixes these 3 other tools that I haven't looked at too closely.\r\n```\r\nTask Parameter:AppHostDestinationPath=/dotnet/runtime/artifacts/obj/coreclr/R2RDump/x64/Release/apphost (TaskId:154)\r\nTask Parameter:AppHostDestinationPath=/dotnet/runtime/artifacts/obj/coreclr/dotnet-pgo/x64/Release/apphost (TaskId:146)\r\nTask Parameter:AppHostDestinationPath=/dotnet/runtime/artifacts/obj/coreclr/R2RTest/x64/Release/apphost (TaskId:139)\r\nTask Parameter:AppHostDestinationPath=/dotnet/runtime/artifacts/obj/coreclr/crossgen2/x64/Release/apphost (TaskId:153)\r\n```\r\n\r\n...\r\n\r\nAfter some more investigation I think the direction forward might be more like the following - but don't issue a PR - it will break the existing FreeBSD cross-builds in the PR automation system (ironically).\r\n\r\nWe actually want `PackageRID` in `Directory.Build.props` to be `freebsd-x64`. Currently with a cross-build it's picking up `linux-x64` so we could change that here:\r\n\r\n```diff\r\ndiff --git a/Directory.Build.props b/Directory.Build.props\r\nindex 7a79159f235..4457721ea30 100644\r\n--- a/Directory.Build.props\r\n+++ b/Directory.Build.props\r\n@@ -153,6 +153,7 @@\r\n     <_runtimeOS Condition=\"'$(PortableBuild)' == 'true'\">$(_portableOS)</_runtimeOS>\r\n\r\n     <_packageOS Condition=\"'$(CrossBuild)' == 'true'\">$(_hostOS.ToLowerInvariant)</_packageOS>\r\n+    <_packageOS Condition=\"'$(CrossBuild)' == 'true' and '$(TargetOS)' == 'FreeBSD'\">$(TargetOS.ToLowerInvariant())</_packageOS>\r\n     <_packageOS Condition=\"'$(_packageOS)' == '' and '$(PortableBuild)' == 'true'\">$(_portableOS)</_packageOS>\r\n     <_packageOS Condition=\"'$(_packageOS)' == ''\">$(_runtimeOS)</_packageOS>\r\n   </PropertyGroup>\r\n```\r\n\r\nAfter that change, rather than using the apphost from `/dotnet/runtime/.dotnet/packs/Microsoft.NETCore.App.Host.linux-x64/6.0.0-rc.1.21430.1/runtimes/linux-x64/native/apphost` the build will try to get the `apphost` binary by restoring a nuget package. Of course FreeBSD packages are still not yet published as @wfurt reiterated a few days ago, we're not ready\r\n\r\n> we will still not publish\r\n\r\nIt seems to want to use the same version as the runtime in the SDK the build is using. For example, on `main` right now the Linux SDK that is used is `6.0.100-rc.1.21430.12` and the runtime inside is `6.0.0-rc.1.21430.1` so it wants to restore/download `Microsoft.NETCore.App.Host.freebsd-x64.6.0.0-rc.1.21430.1.nupkg`\r\nSo for now you need to have your own package source containing the version it's looking for.\r\n\r\nA bit messy but,\r\n\r\n> we can handle patience\r\n\r\nIt has been quite a test 🙂",
          "createdAt": "2021-09-15T15:43:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-15T15:43:45Z",
          "id": "IC_kwDODI9FZc422Cw9"
        },
        {
          "author": "jasonpugsley",
          "body": "Actually for @Thefrank and anyone else doing scripted cross-builds, if you force-build the host first you can then use it during the full build in a second step, something like\r\n```\r\n/dotnet/runtime/eng/build.sh -c Release -cross -os FreeBSD -ci /p:OfficialBuildId=$(date +%Y%m%d)-99 -subset Clr.Native+Host.Native\r\n/dotnet/runtime/eng/build.sh -c Release -cross -os FreeBSD -ci /p:OfficialBuildId=$(date +%Y%m%d)-99 /p:AppHostSourcePath=/dotnet/runtime/artifacts/obj/freebsd-x64.Release/apphost/standalone/apphost\r\n```\r\n\r\nMaybe I'm missing something or it's just my setup but I can't see why the build isn't already using the apphost that it's building rather than relying on an external one. Maybe the build order or some other historical dependency created the existing approach.",
          "createdAt": "2021-09-16T02:07:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-09-16T04:05:29Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-16T09:53:50Z",
                "user": "josteink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB6lplQ=="
          },
          "updatedAt": "2021-09-16T03:25:54Z",
          "id": "IC_kwDODI9FZc423f3F"
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley that two-step process did the trick!\r\n```\r\n$ file crossgen2\r\ncrossgen2: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 12.1, FreeBSD-style, BuildID[sha1]=8314e3d90eec3522769e038f2d4670f2f8bee5c5, stripped\r\n```",
          "createdAt": "2021-09-16T04:06:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-09-16T04:32:42Z",
                "user": "jasonpugsley"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-16T09:53:54Z",
                "user": "josteink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB6lpnA=="
          },
          "updatedAt": "2021-09-16T04:06:22Z",
          "id": "IC_kwDODI9FZc423pza"
        },
        {
          "author": "jasonpugsley",
          "body": "I see a new Linux docker image was published last week\r\nhttps://mcr.microsoft.com/v2/dotnet-buildtools/prereqs/tags/list\r\nubuntu-18.04-cross-freebsd-12-20210910194109-f13d79e\r\n\r\nUnfortunately it's still using a 12.1 crossrootfs. How do we get a new one generated with a 12.2 crossrootfs? \r\nI have a patch waiting that uses `pthread_getname_np()` added in 12.2 so I need the image that the PR automation uses to be updated in `eng/pipelines/common/platform-matrix.yml` at the same time",
          "createdAt": "2021-09-16T04:55:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T04:55:53Z",
          "id": "IC_kwDODI9FZc423tuO"
        },
        {
          "author": "wfurt",
          "body": "once the fixes are in 12.2 and publicly available I can flow them to the roots and docker images. ",
          "createdAt": "2021-09-16T05:14:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T05:14:54Z",
          "id": "IC_kwDODI9FZc423vzz"
        },
        {
          "author": "Thefrank",
          "body": "~I thought those were built using: https://github.com/dotnet/arcade/blob/main/eng/common/cross/build-rootfs.sh which is on 12.2 right now (and has been for a couple of months)~\r\nGuess I was wrong. See @wfurt post above",
          "createdAt": "2021-09-16T05:15:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T05:17:00Z",
          "id": "IC_kwDODI9FZc423v60"
        },
        {
          "author": "jasonpugsley",
          "body": "What are the \"fixes in 12.2\" ?",
          "createdAt": "2021-09-16T05:17:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T05:17:47Z",
          "id": "IC_kwDODI9FZc423wGu"
        },
        {
          "author": "wfurt",
          "body": "It does use the the script from arcade. But builds only when needed/requested. Maybe what confuses me is the \"I have a patch waiting\" ...",
          "createdAt": "2021-09-16T05:18:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T05:18:48Z",
          "id": "IC_kwDODI9FZc423wMU"
        },
        {
          "author": "jasonpugsley",
          "body": "Sorry 😀  I meant I want to submit a PR to the runtime repo but it needs the 12.2 crossrootfs as it uses a function that was only added in FreeBSD 12.2. The automated PR pipelines build will (probably) fail otherwise.\r\n\r\nhttps://www.freebsd.org/cgi/man.cgi?query=pthread_setname_np&manpath=FreeBSD+12.2-RELEASE",
          "createdAt": "2021-09-16T05:21:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T06:52:35Z",
          "id": "IC_kwDODI9FZc423wZX"
        },
        {
          "author": "jasonpugsley",
          "body": "I need to get some eyes on #58688  It just does the bare minimum to support FreeBSD by using the same `umask()` approach as `__APPLE__` \r\nI'd really prefer the method outlined in #58689 but I'm not an expert in regards to how secure it is. It looks like it would be \"correct\" at least on the 3 platforms I tested the process on. I'm just not sure how to _prove_ it (if that's necessary), I certainly don't think it's any _less_ secure than the umask() method.",
          "createdAt": "2021-09-16T11:20:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T11:22:58Z",
          "id": "IC_kwDODI9FZc424n8P"
        },
        {
          "author": "rootwyrm",
          "body": "@jasonpugsley reviewed #58688 and LGTM but will need 'officially' blessed. I'll take care of pinging someone on that. That is the correct approach because OSX's code is literally FreeBSD code.\r\n\r\nI'll go into the whole `umask()` on the other issue more in depth if I can find time this evening.",
          "createdAt": "2021-09-16T16:06:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-17T01:33:25Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB6t--g=="
          },
          "updatedAt": "2021-09-16T16:06:47Z",
          "id": "IC_kwDODI9FZc425eNs"
        },
        {
          "author": "josteink",
          "body": "Just in case anyone missed it, all above patches merged and so is the 12.2 crossfs PR 🙂\r\n\r\n@Thefrank: could you run a build?",
          "createdAt": "2021-09-17T20:27:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-17T20:50:46Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-18T02:57:07Z",
                "user": "jasonpugsley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-18T04:11:51Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB638Bw=="
          },
          "updatedAt": "2021-09-17T20:27:33Z",
          "id": "IC_kwDODI9FZc429Y3e"
        },
        {
          "author": "Thefrank",
          "body": "@josteink RC1 tag (w/ cherry-picked FreeBSD patches) builds with the 12.2 cross container without issue. main/HEAD was having issues with nuget restore timing out or tossing me 503s so it took much longer but it also builds fine.",
          "createdAt": "2021-09-18T00:11:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-18T00:40:53Z",
                "user": "vborovikov"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-09-18T07:26:00Z",
                "user": "josteink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB64KXQ=="
          },
          "updatedAt": "2021-09-18T00:11:29Z",
          "id": "IC_kwDODI9FZc429si_"
        },
        {
          "author": "josteink",
          "body": "That's great new @Thefrank. I've tested the SDK you posted earlier and while it runs and reports runtimes and SDKs, I can't get it to actually create a new project.\r\n\r\n````\r\nroot@freebsd12:~/dotnettest # ../dotnet6/dotnet new console\r\nUnhandled exception. System.DllNotFoundException: Unable to load shared library 'libSystem.Native' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Shared object \"liblibSystem.Native\" not found, required by \"dotnet\"\r\n   at System.DateTime.get_UtcNow()\r\n   at System.DateTime.get_Now()\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nAbort (core dumped)\r\n````\r\n\r\nAs you can see it complains about a missing `libSystem.Native` (and `liblibSystem.Native`, two libs!) which it can't find. Is this expected for now? Do I need to set any particular variables to make it run? Just how far have you come? :)",
          "createdAt": "2021-09-18T12:10:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T12:10:36Z",
          "id": "IC_kwDODI9FZc42-K6z"
        },
        {
          "author": "ta264",
          "body": "@josteink This one works for me on freebsd 11:\r\nhttps://github.com/Servarr/dotnet-bsd/releases/tag/v6.0.0-rc.1-95\r\n\r\nMaybe try that one?",
          "createdAt": "2021-09-18T12:14:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T12:14:27Z",
          "id": "IC_kwDODI9FZc42-LBo"
        },
        {
          "author": "sec",
          "body": "> That's great new @Thefrank. I've tested the SDK you posted earlier and while it runs and reports runtimes and SDKs, I can't get it to actually create a new project.\r\n> \r\n> ```\r\n> root@freebsd12:~/dotnettest # ../dotnet6/dotnet new console\r\n> Unhandled exception. System.DllNotFoundException: Unable to load shared library 'libSystem.Native' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Shared object \"liblibSystem.Native\" not found, required by \"dotnet\"\r\n>    at System.DateTime.get_UtcNow()\r\n>    at System.DateTime.get_Now()\r\n>    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n> Abort (core dumped)\r\n> ```\r\n> \r\n> As you can see it complains about a missing `libSystem.Native` (and `liblibSystem.Native`, two libs!) which it can't find. Is this expected for now? Do I need to set any particular variables to make it run? Just how far have you come? :)\r\n\r\nI've just tested @Thefrank build on 12.2 and it works - make sure you have `pkg install libunwind icu libinotify` as those are required and can throw this error - I will check this build under clean 13 just to be sure also :)\r\n\r\nAlso I've been using https://github.com/Servarr/dotnet-bsd/releases/tag/v6.0.0-preview.7-88 to test some of my application - so far the run fine.\r\n\r\nI got some free time now and will try to play with native builds under 12.2 and maybe 13 using those SDK's as bootstrap (I base my work on @ta264 pipeline flow).\r\n\r\nBut if I follow this correctly, we have all we need to have FreeBSD builds or are there any missing bits (like before there was a change to crossgen2 to add few if's to support FreeBSD as supported OS, I believe @jasonpugsley made that PR for 5.x quite a time ago).\r\n\r\nBut... looking at current progress, it should be possisble to create port package, right? (with some quirks like hosting nuget's in local folder, patches, etc., but that's nothing big imo)? :)\r\n",
          "createdAt": "2021-09-18T12:32:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-09-18T12:42:33Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB64nDQ=="
          },
          "updatedAt": "2021-09-18T12:32:34Z",
          "id": "IC_kwDODI9FZc42-Lj_"
        },
        {
          "author": "josteink",
          "body": "> make sure you have `pkg install libunwind icu libinotify` as those are required and can throw this error - I will check this build under clean 13 just to be sure also :)\r\n\r\nThat does it. I was missing `libinotify`. So yeah. I agree this is looking better and better by the day.\r\n\r\n> But... looking at current progress, it should be possisble to create port package, right? (with some quirks like hosting nuget's in local folder, patches, etc., but that's nothing big imo)? :)\r\n\r\nAs for it being ports-ready... I leave that to the \"proper\" FreeBSD folks :smile: ",
          "createdAt": "2021-09-18T13:06:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T13:06:20Z",
          "id": "IC_kwDODI9FZc42-MjH"
        },
        {
          "author": "ta264",
          "body": "@sec I have a version of the azure agent running on freebsd so it would even be possible to automate the freebsd build like I have done the crossbuild as long as you're willing to host the bsd VM somewhere",
          "createdAt": "2021-09-18T14:15:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T14:15:34Z",
          "id": "IC_kwDODI9FZc42-OpC"
        },
        {
          "author": "sec",
          "body": "@ta264 I think I can work something out - email me and/or we can have a chat on irc or somewhere else.\r\nI just don't know if this will bring any value to current status, as it would be great to have those build hosted somewhere \"semi-official\" at least, right?\r\n\r\nWe can crossbuild working SDK and looks like we can native build it also, which is great if you ask me ;)\r\n\r\nedit 1: runtime from main builds without any issues (just added two if's to crossgen2 Program.cs) with simple `./build.sh --clang10`\r\n\r\nedit 2: aspnetcore wasn't so easy, throwing errors about netcoreapp2.1 not supported any more (on 6-rc branch) and then on main:\r\n```\r\nBuild FAILED.\r\n\r\n/usr/home/sec/aspnetcore_main/eng/targets/Npm.Common.targets(79,5): error : in asset size limit: The following asset(s) exceed the recommended size limit (120 KiB). [/usr/home/sec/aspnetcore_main/src/Components/Web.JS/Microsoft.AspNetCore.Components.Web.JS.npmproj]\r\n/usr/home/sec/aspnetcore_main/eng/targets/Npm.Common.targets(79,5): error : in webpack performance recommendations:  [/usr/home/sec/aspnetcore_main/src/Components/Web.JS/Microsoft.AspNetCore.Components.Web.JS.npmproj]\r\n/usr/home/sec/aspnetcore_main/.dotnet/sdk/6.0.100-rc.1.21458.32/Microsoft.Common.CurrentVersion.targets(1784,5): error MSB4181: The \"MSBuild\" task returned false but did not log an error. [/usr/home/sec/aspnetcore_main/src/Components/test/E2ETestMigration/Microsoft.AspNetCore.Components.Migration.E2ETests.csproj]\r\n    0 Warning(s)\r\n    3 Error(s)\r\n```",
          "createdAt": "2021-09-18T14:43:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T19:59:24Z",
          "id": "IC_kwDODI9FZc42-V7R"
        },
        {
          "author": "Thefrank",
          "body": "@sec https://github.com/Thefrank/azure-pipelines-agent-freebsd\r\nIt is from May-ish(?) but I have been using it locally to try and learn Azure DevOPs. It is almost entirely from https://github.com/microsoft/azure-pipelines-agent/pull/3266\r\n\r\nI have run into zero issues with it outside of my own lack of knowledge about DevOPs haha",
          "createdAt": "2021-09-18T17:33:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T17:33:42Z",
          "id": "IC_kwDODI9FZc42-dtD"
        },
        {
          "author": "decke",
          "body": "That is really great news! It sounds like it's time to create a proper FreeBSD port for it now. Is there any up-to-date writeup / recipe / shell script or anything like that which we could use to create a port from it? So far the last attempt was based on 3.0.100 but did not make it over the finish line. https://reviews.freebsd.org/D16707\r\n\r\nThis could still be a good starting point.",
          "createdAt": "2021-09-18T20:18:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T20:19:09Z",
          "id": "IC_kwDODI9FZc42-je8"
        },
        {
          "author": "Thefrank",
          "body": "If the port is NO_BUILD (all of the bundles I make are NO_BUILD) then downloading and packaging the already-produced binary blobs should be pretty easy. For a full source build that will be more tricky",
          "createdAt": "2021-09-18T20:36:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-18T20:36:37Z",
          "id": "IC_kwDODI9FZc42-kB1"
        },
        {
          "author": "decke",
          "body": "Building from source is definitely preferred. Repackaging can be an option if there are official binaries but I think we are not there yet.",
          "createdAt": "2021-09-19T05:52:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-19T06:21:57Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB65yEQ=="
          },
          "updatedAt": "2021-09-19T05:52:28Z",
          "id": "IC_kwDODI9FZc42-wHK"
        },
        {
          "author": "sec",
          "body": "> If the port is NO_BUILD (all of the bundles I make are NO_BUILD) then downloading and packaging the already-produced binary blobs should be pretty easy. For a full source build that will be more tricky\r\n\r\n@decke @Thefrank If we'll get crossbuild'ed SDK for FreeBSD hosted somewhere \"semi-official\", then doing full source build under FreeBSD should be/is  possible (runtime builds fine, sdk builds, aspnetcore build but there are strange errors about size of generated Blazer JS and/or netcore2.1 no longer supported (change to net6.0 fix the error, this one I don't kow how to handle https://github.com/dotnet/aspnetcore/blob/0621c1748eac08dd516edc950559ab7e8308f214/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs#L118), but those should be minor things to fix). Last step is to use installer rep to pack all this (there should not be any problems I assume) - so it's possisble to do full source build under FreeBSD (I will try to do this some time later). Of course with some hacks like `exit 0` at the start of `dotnet-install.sh` as it tries to download 1.x and 2.x runtimes for FreeBSD (I guess for those netcore2.1 app's that I switched to net6.0).\r\n\r\nOn the side note - did anyone have any expierence with https://github.com/dotnet/source-build - looking at release information, this is used by some Linux distro and the flow looks almost like what a port should do :)\r\n\r\nedit: aspnetcore rc-1 builds native, sdk rc-1 build native, runtime rc-1 build native (with 2 cherrypicks, with crossgen2 also, main builds ootb) - all this using @Thefrank rc-1 crossgen build from Linux. Now time for `installer` repo :)\r\n\r\nedit 2: installer repo is throwing me (rest of stacktrace is cut, as it doesn't contain any valueable info either):\r\n```\r\nsec@vm12:~/installer % ./build.sh -r\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  core-sdk-tasks -> /usr/home/sec/installer/artifacts/tasks/bin/core-sdk-tasks/Debug/net6.0/core-sdk-tasks.dll\r\n  redist -> /usr/home/sec/installer/artifacts/bin/redist/Debug/net6.0/redist.dll\r\n/usr/home/sec/installer/src/redist/targets/GenerateLayout.targets(351,5): error MSB4018: The \"DownloadFile\" task failed unexpectedly. [/usr/home/sec/installer/src/redist/redist.csproj]\r\n/usr/home/sec/installer/src/redist/targets/GenerateLayout.targets(351,5): error MSB4018: System.AggregateException: One or more errors occurred. (A task was canceled.) [/usr/home/sec/installer/src/redist/redist.csproj]\r\n/usr/home/sec/installer/src/redist/targets/GenerateLayout.targets(351,5): error MSB4018:  ---> System.Threading.Tasks.TaskCanceledException: A task was canceled. [/usr/home/sec/installer/src/redist/redist.csproj]\r\n/usr/home/sec/installer/src/redist/targets/GenerateLayout.targets(351,5): error MSB4018:    at System.Threading.Tasks.Task.GetExceptions(Boolean includeTaskCanceledExceptions) [/usr/home/sec/installer/src/redist/redist.csproj]\r\n/usr/home/sec/installer/src/redist/targets/GenerateLayout.targets(351,5): error MSB4018:    at Microsoft.DotNet.Arcade.Sdk.DownloadFile.Execute() in /_/src/Microsoft.DotNet.Arcade.Sdk/src/DownloadFile.cs:line 49 [/usr/home/sec/installer/src/redist/redist.csproj]...\r\n```\r\n\r\nlooking inside msbuild binlog doesn't show anything, I don't even know what it's trying to download - any tips how to proceed with this?",
          "createdAt": "2021-09-19T12:32:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-19T14:17:37Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-19T15:55:13Z",
                "user": "josteink"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-19T19:24:53Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB666ow=="
          },
          "updatedAt": "2021-09-19T19:33:13Z",
          "id": "IC_kwDODI9FZc42-7lJ"
        },
        {
          "author": "Thefrank",
          "body": "@sec make sure you are manually copying the outputs from the other builds into `installer` as it is trying to download them. Something like this:\r\n```\r\nmkdir -p installer/artifacts/obj/redist/Release/downloads/\r\ncp runtime/artifacts/packages/Release/Shipping/dotnet-runtime-*-freebsd-x64.tar.gz installer/artifacts/obj/redist/Release/downloads/\r\ncp aspnetcore/artifacts/installers/Release/aspnetcore-runtime-* installer/artifacts/obj/redist/Release/downloads/\r\n```",
          "createdAt": "2021-09-19T19:36:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T19:36:00Z",
          "id": "IC_kwDODI9FZc42_J0-"
        },
        {
          "author": "sec",
          "body": "> @sec make sure you are manually copying the outputs from the other builds into `installer` as it is trying to download them. Something like this:\r\n> \r\n> ```\r\n> mkdir -p installer/artifacts/obj/redist/Release/downloads/\r\n> cp runtime/artifacts/packages/Release/Shipping/dotnet-runtime-*-freebsd-x64.tar.gz installer/artifacts/obj/redist/Release/downloads/\r\n> cp aspnetcore/artifacts/installers/Release/aspnetcore-runtime-* installer/artifacts/obj/redist/Release/downloads/\r\n> ```\r\n\r\nI did all that (I'm following the pipeline used to crossbuild) - without those I had \"normal\" errors that freebsd-runtime was not found (that was for pure run check) etc. - this one is not giving me any error about url etc, what's it's trying to download :/\r\n\r\nedit: OK I got that it's trying to download :)",
          "createdAt": "2021-09-19T19:38:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T19:45:49Z",
          "id": "IC_kwDODI9FZc42_J4Z"
        },
        {
          "author": "wfurt",
          "body": "I was hoping to get the \"semi-official\" builds out of runtimelabs @sec. But I got stuck and I did not have time to push through. On the one, we can also take more changes even if the release/6.0 is closed. ",
          "createdAt": "2021-09-19T19:40:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T19:40:11Z",
          "id": "IC_kwDODI9FZc42_J71"
        },
        {
          "author": "Thefrank",
          "body": "@sec oh! make sure you are using the installer patch. Both me and @ta264 include a `.patch` that needs to be applied.",
          "createdAt": "2021-09-19T19:47:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T19:47:57Z",
          "id": "IC_kwDODI9FZc42_KK1"
        },
        {
          "author": "sec",
          "body": "> @sec oh! make sure you are using the installer patch. Both me and @ta264 include a `.patch` that needs to be applied.\r\n\r\n@Thefrank Yes I have that in mind also, but that patch is disabling crossgen, right? I'm trying to get through all the steps with crossgen enabled (does it make sense?) One question I have about `Microsoft.NETCore.App.Crossgen2.freebsd-x64.6.0.0-rc.1.21451.13.nupkg` - at which stage and where should this be generated? Installer?",
          "createdAt": "2021-09-19T21:54:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T21:54:24Z",
          "id": "IC_kwDODI9FZc42_OL9"
        },
        {
          "author": "Thefrank",
          "body": "Crossgen2 is restored/built in `runtime`. Both `aspnetcore` and `installer` use the package but, afaik, will crashed out when crossbuilding under linux, hence the skipping of USING crossgen",
          "createdAt": "2021-09-19T22:04:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T22:04:26Z",
          "id": "IC_kwDODI9FZc42_OdK"
        },
        {
          "author": "sec",
          "body": "@Thefrank Mhm, but I'm building on FreeBSD using your SDK as input (which have that Crossgen2 nupkg) - runtime was built, but I don't see that nupkg anywhere inside artifacts...\r\n\r\nAs for crossgen crash, it was throwing NotSupportedException under FreeBSD, but adding two if's solved the issue and it's doing crossgen2 fine while runtime build.",
          "createdAt": "2021-09-19T22:08:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-19T22:08:46Z",
          "id": "IC_kwDODI9FZc42_Ol8"
        },
        {
          "author": "Thefrank",
          "body": "```diff\r\ndiff --git a/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj b/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj\r\nindex 4c3c0f82a1a..a463c32e904 100644\r\n--- a/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj\r\n+++ b/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj\r\n@@ -11,7 +11,7 @@\r\n     <ArchiveName>dotnet-crossgen2</ArchiveName>\r\n     <SharedFrameworkHostFileNameOverride>crossgen2</SharedFrameworkHostFileNameOverride>\r\n     <!-- Build this pack for any RID if building from source. Otherwise, only build select RIDs. -->\r\n-    <RuntimeIdentifiers Condition=\"'$(DotNetBuildFromSource)' != 'true'\">linux-x64;linux-musl-x64;linux-arm;linux-musl-arm;linux-arm64;linux-musl-arm64;osx-x64;osx-arm64;win-x64;win-x86;win-arm64;win-arm</RuntimeIdentifiers>\r\n+    <RuntimeIdentifiers Condition=\"'$(DotNetBuildFromSource)' != 'true'\">linux-x64;linux-musl-x64;linux-arm;linux-musl-arm;linux-arm64;linux-musl-arm64;freebsd-x64;osx-x64;osx-arm64;win-x64;win-x86;win-arm64;win-arm</RuntimeIdentifiers>\r\n     <GenerateInstallers>false</GenerateInstallers>\r\n     <GetSharedFrameworkFilesForReadyToRunDependsOn>\r\n         AddRuntimeFilesToPackage;\r\n```\r\nGive that a shot. It should output the Crossgen2 nupkg from `runtime`. a `-subset packs` is where that is generated from what I recall.\r\n\r\nToday I learned I have been posting diffs wrong this whole time lol.",
          "createdAt": "2021-09-19T22:24:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-20T05:13:06Z",
                "user": "sec"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-09-20T05:44:30Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-20T06:12:10Z",
                "user": "lukeb1961"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-09-20T09:13:49Z",
                "user": "josteink"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB69OgQ=="
          },
          "updatedAt": "2021-09-19T22:24:45Z",
          "id": "IC_kwDODI9FZc42_PFf"
        },
        {
          "author": "josteink",
          "body": "It sounds like we're really, finally getting there :smiley: \r\n\r\nSo with a chance of making the most embarrassing public github comment ever.... :cowboy_hat_face:  [Queue up this track, and start sing along](https://www.youtube.com/watch?v=sy0SmulUlHY):\r\n\r\n````\r\nTonight's the night we're gonna make it happen\r\nTonight we'll put all other things aside\r\nWe'll have a good time baby don't you worry\r\nAnd if we're still playin' around, Boy that's just fine\r\n\r\nI'm so excited\r\nAnd I just can't hide it\r\nI'm about to build the port and I think I like it\r\nI'm so excited\r\nAnd I just can't hide it\r\nI know, I know, I know, I know\r\nI'll port you, port you!\r\n````\r\n\r\n:smile: ",
          "createdAt": "2021-09-20T09:21:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-09-20T09:26:28Z",
                "user": "sec"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-20T10:10:36Z",
                "user": "nkosi23"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-21T13:38:22Z",
                "user": "onny"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB7KUdA=="
          },
          "updatedAt": "2021-09-20T09:21:53Z",
          "id": "IC_kwDODI9FZc43ADdu"
        },
        {
          "author": "josteink",
          "body": "> Give that a shot. It should output the Crossgen2 nupkg from `runtime`. a `-subset packs` is where that is generated from what I recall.\r\n\r\nI've just pushed that as a PR. IMO there's no need to maintain such trivially upstreamed fixes outside the main repo.",
          "createdAt": "2021-09-20T09:32:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T09:32:16Z",
          "id": "IC_kwDODI9FZc43AFBI"
        },
        {
          "author": "sec",
          "body": "> > Give that a shot. It should output the Crossgen2 nupkg from `runtime`. a `-subset packs` is where that is generated from what I recall.\r\n> \r\n> I've just pushed that as a PR. IMO there's no need to maintain such trivially upstreamed fixes outside the main repo.\r\n\r\n@josteink Then maybe add this one also (now I also know how):\r\n```diff\r\ndiff --git a/src/coreclr/tools/aot/crossgen2/Program.cs b/src/coreclr/tools/aot/crossgen2/Program.cs\r\nindex afae84f57f6..c690f8979df 100644\r\n--- a/src/coreclr/tools/aot/crossgen2/Program.cs\r\n+++ b/src/coreclr/tools/aot/crossgen2/Program.cs\r\n@@ -54,6 +54,8 @@ public static void ComputeDefaultOptions(out TargetOS os, out TargetArchitecture\r\n                 os = TargetOS.Linux;\r\n             else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))\r\n                 os = TargetOS.OSX;\r\n+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.FreeBSD))\r\n+                os = TargetOS.FreeBSD;\r\n             else\r\n                 throw new NotImplementedException();\r\n\r\n@@ -209,6 +211,8 @@ private void ConfigureTarget()\r\n                     _targetOS = TargetOS.Linux;\r\n                 else if (_commandLineOptions.TargetOS.Equals(\"osx\", StringComparison.OrdinalIgnoreCase))\r\n                     _targetOS = TargetOS.OSX;\r\n+                else if (_commandLineOptions.TargetOS.Equals(\"freebsd\", StringComparison.OrdinalIgnoreCase))\r\n+                    _targetOS = TargetOS.FreeBSD;\r\n                 else\r\n                     throw new CommandLineException(SR.TargetOSUnsupported);\r\n             }\r\n```\r\n\r\nedit: did full build on FreeBSD, runtime, aspnetcore (with some hacks), sdk and installer to produce native SDK yay! :D\r\n\r\nedit 2: console app works, but trying to compile dotnet new mvc app throws:\r\n```\r\n/usr/home/sec/temp/sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Web/Sdk/Sdk.props(28,11): error MSB4236: The SDK 'Microsoft.NET.Sdk.Razor' specified could not be found. [/usr/home/sec/temp/temp.csproj]\r\n```\r\n\r\nedit 3: looking inside SDK it does miss some files that are present in bootstrap sdk :)\r\n\r\nedi 4: ok I'm missing JDK on my machine, maybe this will help getting Razor into SDK, song goes on...",
          "createdAt": "2021-09-20T09:36:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-20T09:41:18Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB69bvA=="
          },
          "updatedAt": "2021-09-20T10:08:05Z",
          "id": "IC_kwDODI9FZc43AFpa"
        },
        {
          "author": "josteink",
          "body": "That patch definitely belongs in the same PR. I've added it and credited you.\r\n\r\nThanks for helping out!",
          "createdAt": "2021-09-20T09:47:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T09:47:56Z",
          "id": "IC_kwDODI9FZc43AHK5"
        },
        {
          "author": "sec",
          "body": "> That patch definitely belongs in the same PR. I've added it and credited you.\r\n> \r\n> Thanks for helping out!\r\n\r\n@josteink That change was proposed by @jasonpugsley I assume, but anyway... I have installer created SDK, but it's missing `Microsoft.NET.Sdk.Razor` by some way. When doing `dotnet new mvc` I'm getting this:\r\n```\r\n/usr/home/sec/temp/sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Web/Sdk/Sdk.props(28,11): error MSB4236: The SDK 'Microsoft.NET.Sdk.Razor' specified could not be found. [/usr/home/sec/temp/temp.csproj]\r\n```\r\n\r\nOutput from crossgen SDK:\r\n```\r\nsec@vm12:~/dotnet % ls sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Razor/\r\nSdk                     source-generators       targets                 tasks                   tools\r\n```\r\n\r\nOutput from SDK I built:\r\n```\r\nsec@vm12:~/temp % ls sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Razor/\r\nsource-generators       tools\r\n```\r\n\r\nWhat's missing in here?\r\n\r\nsec@vm12:~/temp/sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Razor % cp -R /home/sec/sdk/artifacts/bin/Release/Sdks/Microsoft.NET.Sdk.Razor .\r\n\r\n\r\nedit: doing manual copy from `sdk/artifacts/bin/Release/Sdks/Microsoft.NET.Sdk.Razor` into extracted SDK directory `sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Razor` fixes the missing Razor SDK issue, but question is, why it's not included in generated `sdk/artifacts/packages/Release/NonShipping/dotnet-toolset-internal-6.0.100-rc.1.21458.71.zip` (it's the only bit used by `installer` from SDK, so this might be this I assume) ?",
          "createdAt": "2021-09-20T10:51:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T11:51:07Z",
          "id": "IC_kwDODI9FZc43ARnG"
        },
        {
          "author": "jasonpugsley",
          "body": "I'm working on a few small updates in #59339 and one I wanted to highlight was setting the name of the native thread. It might not seem significant until you're trying to debug things and looking at native threads in lldb. It can help to know which thread you're stopped in. It's also visible in `ps` and `top`, an example from top:\r\n```\r\n  PID USERNAME    PRI NICE   SIZE    RES STATE    C   TIME    WCPU COMMAND\r\n66678 root         80    0  2742M   122M CPU7     7   0:03  37.37% dotnet{RequestBuilder thre}\r\n66678 root         40    0  2742M   122M uwait    2   0:01  35.87% dotnet{.NET ThreadPool Wor}\r\n66678 root         52    0  2742M   122M uwait    2   0:00  25.00% dotnet{.NET BGC}\r\n66678 root         52    0  2742M   122M uwait    4   0:00  25.00% dotnet{dotnet}\r\n66678 root         52    0  2742M   122M uwait    7   0:00  13.28% dotnet{RequestBuilder thre}\r\n66678 root         36    0  2742M   122M uwait    6   0:00   6.98% dotnet{.NET ThreadPool Wor}\r\n66678 root         36    0  2742M   122M uwait    4   0:00   6.98% dotnet{.NET ThreadPool Wor}\r\n66678 root         20    0  2742M   122M uwait    1   0:00   1.65% dotnet{.NET Finalizer}\r\n66678 root         28    0  2742M   122M uwait    1   0:00   1.23% dotnet{.NET ThreadPool Wor}\r\n66678 root         28    0  2742M   122M uwait    4   0:00   1.19% dotnet{.NET ThreadPool Wor}\r\n66678 root         20    0  2742M   122M uwait    1   0:00   1.19% dotnet{.NET Tiered Compila}\r\n66678 root         31    0  2742M   122M uwait    5   0:01   0.98% dotnet{.NET ThreadPool Wor}\r\n66678 root         28    0  2742M   122M uwait    1   0:00   0.31% dotnet{.NET ThreadPool Wor}\r\n66678 root         31    0  2742M   122M uwait    5   0:01   0.23% dotnet{.NET ThreadPool Wor}\r\n66678 root         33    0  2742M   122M uwait    6   0:01   0.07% dotnet{dotnet}\r\n66678 root         30    0  2742M   122M kqread   6   0:00   0.04% dotnet{.NET Sockets}\r\n66678 root         29    0  2742M   122M uwait    6   0:00   0.03% dotnet{.NET Long Running T}\r\n66678 root         29    0  2742M   122M uwait    4   0:00   0.03% dotnet{.NET Long Running T}\r\n66678 root         29    0  2742M   122M uwait    1   0:00   0.02% dotnet{.NET Long Running T}\r\n66678 root         28    0  2742M   122M uwait    1   0:00   0.01% dotnet{In-proc Node (Defau}\r\n66678 root         52    0  2742M   122M uwait    3   0:00   0.01% dotnet{.NET ThreadPool Wai}\r\n66678 root         25    0  2742M   122M uwait    5   0:00   0.01% dotnet{.NET ThreadPool Gat}\r\n```\r\nWe only get 19 characters for the thread name in FreeBSD so I hope we're not truncating anything identifying.\r\n\r\nOn the topic of debugging, we need to get updates into the [dotnet/diagnostics](https://github.com/dotnet/diagnostics/) repo. I have my own builds and I know some of you have as well so I'm going to work on that when I get some time. I've hacked at it before to quickly get it working but I need to revisit it and contribute something more polished. We can probably start a thread over there. It suddenly becomes important when you're trying to track down a bug in native code (or even managed code but you usually get useful details when code throws an exception).\r\n\r\nI haven't seen any detailed blogs/videos on using lldb and SOS anywhere, please let me know if you have.",
          "createdAt": "2021-09-20T12:27:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T12:35:41Z",
          "id": "IC_kwDODI9FZc43AhR6"
        },
        {
          "author": "arrowd",
          "body": "> We only get 19 characters for the thread name in FreeBSD so I hope we're not truncating anything identifying.\r\n\r\nThis looks similar to what I have fixed in the Qt library: https://reviews.freebsd.org/D15673\r\n",
          "createdAt": "2021-09-20T13:31:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T13:31:57Z",
          "id": "IC_kwDODI9FZc43AtEl"
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley what needs fixing in diagnostics? I (with the help of @ta264) made fixes to get native building and AFAIK the lldb plugin builds and works fine (not 100% sure as the last time I did anything with it was p5)",
          "createdAt": "2021-09-20T18:20:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T18:20:13Z",
          "id": "IC_kwDODI9FZc43BmtV"
        },
        {
          "author": "jasonpugsley",
          "body": "@Thefrank OK it has been a while since I last checked so that is great if you have already got fixes in!",
          "createdAt": "2021-09-20T23:34:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T23:34:59Z",
          "id": "IC_kwDODI9FZc43CoB8"
        },
        {
          "author": "sec",
          "body": "Regarding that missing SDK error, something weird, after next build, zip file was generated with all needed files :) I will follow that issue in `sdk` repo and try to investigate why sometimes it's missing files even there are no errors / warnings during sdk build...\r\n\r\nOn the other hand, done full native build on 12.2 using crossgen SDK as bootstrap (and it works, the same as the one from Linux, but, c'mon :)). Changes I have for each repo (all of this is based on pipeline done by @ta264 and/or @Thefrank, credits to them):\r\n\r\n#### runtime (command used `./build.sh /p:OfficialBuildId=20210901.13 -ci -c Release`):\r\n- cherry picked two commits from main (main builds without issue)\r\n- crossgen2 changes that @josteink made PR for #59331\r\n- adjust NuGet.config and eng/Versions.props to match/use SDK used\r\n- `exit 0` to .dotnet/dotnet-install.sh :)\r\n\r\n#### aspnetcore (command used `eng/build.sh -ci --os-name freebsd -pack /p:OfficialBuildId=20210902.15 -c Release --all`):\r\n- `exit 0`\r\n- add Runtime and Crossgen2 reference to `eng/Dependencies.props`\r\n```diff\r\ndiff --git a/eng/Dependencies.props b/eng/Dependencies.props\r\nindex b78ad89a9e..43c29cd11d 100644\r\n--- a/eng/Dependencies.props\r\n+++ b/eng/Dependencies.props\r\n@@ -98,6 +98,7 @@ and are generated based on the last package release.\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-arm\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.linux-musl-arm64\" />\r\n+    <LatestPackageReference Include=\"Microsoft.NETCore.App.Runtime.freebsd-x64\" />\r\n\r\n     <!-- Crossgen2 compiler -->\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.osx-x64\" />\r\n@@ -106,6 +107,7 @@ and are generated based on the last package release.\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.linux-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.win-x64\" />\r\n     <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.win-arm64\" />\r\n+    <LatestPackageReference Include=\"Microsoft.NETCore.App.Crossgen2.freebsd-x64\" />\r\n   </ItemGroup>\r\n\r\n   <ItemGroup Label=\".NET team dependencies (Non-source-build)\" Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\r\n```\r\n- help NuGet.config find runtime artifacts\r\n- higher size limit in `webpack.config.js`\r\n```diff\r\ndiff --git a/src/Components/Web.JS/src/webpack.config.js b/src/Components/Web.JS/src/webpack.config.js\r\nindex b0651fa75c..210ff6a433 100644\r\n--- a/src/Components/Web.JS/src/webpack.config.js\r\n+++ b/src/Components/Web.JS/src/webpack.config.js\r\n@@ -18,7 +18,7 @@ module.exports = (env, args) => ({\r\n     },\r\n     output: { path: path.join(__dirname, '/..', '/dist', args.mode == 'development' ? '/Debug' : '/Release'), filename: '[name].js' },\r\n     performance: {\r\n-        maxAssetSize: 122880,\r\n+        maxAssetSize: 245760,\r\n     },\r\n     optimization: {\r\n         sideEffects: true,\r\n\r\n```\r\n- replaced `netcoreapp2.1` with `net6.0` in:\r\n```\r\n        modified:   src/Razor/perf/Microbenchmarks/Microsoft.AspNetCore.Razor.Microbenchmarks.csproj\r\n        modified:   src/Razor/tools/RazorSyntaxGenerator/RazorSyntaxGenerator.csproj\r\n        modified:   src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.csproj\r\n        modified:   src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs\r\n        modified:   src/Tools/GetDocumentInsider/src/GetDocument.Insider.csproj\r\n        modified:   src/Tools/dotnet-getdocument/src/dotnet-getdocument.csproj\r\n```\r\n\r\n#### sdk (command used `./build.sh -ci /p:OfficialBuildId=20210908.71 -c Release` then `./build.sh -pack -ci /p:OfficialBuildId=20210908.71 -c Release`):\r\n- `exit 0`\r\n- looks like first doing build, then pack, don't trigger missing files (or I'm just lucky this time), this needs more digging into...\r\n\r\n#### installer (command used `./build.sh -c Release -ci -pack --runtime-id freebsd-x64 /p:OSName=freebsd /p:OfficialBuildId=20210908.32`):\r\n- `exit 0`\r\n- adjust NuGet.config for artifacts\r\n- add `freebsd-x64` to RIDs in `src/redist/targets/GenerateBundledVersions.targets`\r\n```diff\r\ndiff --git a/src/redist/targets/GenerateBundledVersions.targets b/src/redist/targets/GenerateBundledVersions.targets\r\nindex 21d035d9b..38e46ba5a 100644\r\n--- a/src/redist/targets/GenerateBundledVersions.targets\r\n+++ b/src/redist/targets/GenerateBundledVersions.targets\r\n@@ -88,6 +88,7 @@\r\n           win-arm64;\r\n           win-x64;\r\n           win-x86;\r\n+         freebsd-x64;\r\n           \" />\r\n\r\n       <NetCore31RuntimePackRids Include=\"@(NetCore30RuntimePackRids)\"/>\r\n@@ -164,6 +165,7 @@\r\n         linux-x64;\r\n         linux-arm;\r\n         linux-arm64;\r\n+       freebsd-x64;\r\n         \" />\r\n\r\n       <Net50Crossgen2SupportedRids Include=\"linux-musl-x64;linux-x64;win-x64\" />\r\n@@ -179,6 +181,7 @@\r\n           win-arm;\r\n           win-arm64;\r\n           win-x86;\r\n+         freebsd-x64;\r\n           \" />\r\n\r\n       <Crossgen2SupportedRids Include=\"@(Net60Crossgen2SupportedRids)\" />\r\n```\r\n- either pass `/p:IncludeAspNetCoreRuntimeTrue` or remove condition from `src/redist/targets/SetBuildDefaults.targets`\r\n```diff\r\ndiff --git a/src/redist/targets/SetBuildDefaults.targets b/src/redist/targets/SetBuildDefaults.targets\r\nindex eac457403..f01c618b1 100644\r\n--- a/src/redist/targets/SetBuildDefaults.targets\r\n+++ b/src/redist/targets/SetBuildDefaults.targets\r\n@@ -20,9 +20,6 @@\r\n         AND '$(Rid)' != 'ubuntu.18.04-x64'\">true</IncludeSharedFrameworksForBackwardsCompatibilityTests>-->\r\n       <HighEntropyVA>true</HighEntropyVA>\r\n\r\n-      <!-- There is no asp.net runtime available for freebsd at the moment. Once there is one, we can remove the line below -->\r\n-      <IncludeAspNetCoreRuntime Condition=\" '$(IncludeAspNetCoreRuntime)' == '' AND $(Rid.StartsWith('freebsd'))\">false</IncludeAspNetCoreRuntime>\r\n-\r\n       <!-- Only use asset target fallback that we set (not implicit one to net461). -->\r\n       <!--<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>-->\r\n\r\n```\r\n\r\nAnd that will/should give you native build SDK 👍\r\n\r\nedit: added diff's and note about sdk build",
          "createdAt": "2021-09-21T13:32:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-21T13:40:05Z",
                "user": "onny"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-21T13:48:30Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-21T15:33:20Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-21T15:50:54Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB7MAdQ=="
          },
          "updatedAt": "2021-09-21T14:21:45Z",
          "id": "IC_kwDODI9FZc43EwUc"
        },
        {
          "author": "josteink",
          "body": "Wow. That genuinely sounds very close to a proper source-based port happening!\r\n\r\nI’m curious about the need for those FreeBSD RIDs though. Sounds like there’s something more we could fix upstream, I guess?\r\n\r\n**Edit:** If you can outline what places lacked RIDs I’ll try to get it up streamed and merged 🙂",
          "createdAt": "2021-09-21T13:53:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2021-09-21T14:22:02Z",
                "user": "sec"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7K5ow=="
          },
          "updatedAt": "2021-09-21T13:56:36Z",
          "id": "IC_kwDODI9FZc43E03K"
        },
        {
          "author": "sec",
          "body": "@josteink diff's added.",
          "createdAt": "2021-09-21T14:23:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-21T15:30:11Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7Lwvg=="
          },
          "updatedAt": "2021-09-21T14:23:57Z",
          "id": "IC_kwDODI9FZc43E7y3"
        },
        {
          "author": "sec",
          "body": "In case anyone wants to play around, I've put all of those steps into very simple scripts - https://github.com/sec/dotnet-core-freebsd-source-build - maybe someone wants to make a port of it? :)",
          "createdAt": "2021-09-23T08:44:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-09-23T12:29:35Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-23T13:45:43Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-24T03:37:22Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-24T06:40:38Z",
                "user": "josteink"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB7n0DQ=="
          },
          "updatedAt": "2021-09-23T08:44:42Z",
          "id": "IC_kwDODI9FZc43K8ku"
        },
        {
          "author": "Thefrank",
          "body": "@sec I posted an issue into your repo, other than that item, there were no other complications building RC1 natively. Very nice work!\r\n\r\nAs for a port...unless someone else wants to jump on it, I will wait until 6.0 RTM/Final before building the port. I am still hoping that the items requiring cherry-picking get backported thus avoid patching.",
          "createdAt": "2021-09-24T05:02:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T05:02:50Z",
          "id": "IC_kwDODI9FZc43NvQb"
        },
        {
          "author": "josteink",
          "body": "Should we start a new issue just for the sake of FreeBSD for .NET6 fixes where all fixes required can be tracked?\r\n\r\nIt might be easier for the .net crew to make a judgement on the feasibility and risk if it gets presented in a single coherent issue?\r\n\r\nFrom last time i checked we had the following PRs needing to be cherry picked (all merged):\r\n\r\n* https://github.com/dotnet/installer/pull/11972\r\n* https://github.com/dotnet/runtime/pull/58085\r\n* https://github.com/dotnet/runtime/commit/3e6d492bdf6fbf2d8af3871379f31dcc6e27716b\r\n* https://github.com/dotnet/runtime/pull/59240\r\n* https://github.com/dotnet/runtime/pull/59331 (thanks Frank!)\r\n* https://github.com/dotnet/aspnetcore/pull/36909 (now merged)\r\n* https://github.com/dotnet/sdk/pull/21361 (thanks Sec!)\r\n* https://github.com/dotnet/installer/pull/12120 (thanks Sec!)\r\n\r\nAre there any other commits I've missed?",
          "createdAt": "2021-09-24T05:12:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-24T10:09:34Z",
                "user": "jasonpugsley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-24T16:27:10Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB7s6KA=="
          },
          "updatedAt": "2021-10-30T15:58:11Z",
          "id": "IC_kwDODI9FZc43NwKt"
        },
        {
          "author": "Thefrank",
          "body": "@josteink https://github.com/dotnet/runtime/pull/59331 for crossgen2 in runtime",
          "createdAt": "2021-09-24T06:17:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-24T06:25:09Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7nt4w=="
          },
          "updatedAt": "2021-09-24T06:17:23Z",
          "id": "IC_kwDODI9FZc43N14i"
        },
        {
          "author": "sec",
          "body": "@Thefrank Thanks, fixed that. \r\n@josteink I've also made also two small PR's https://github.com/dotnet/sdk/pull/21361 and https://github.com/dotnet/installer/pull/12120 regarding shebang for scripts, as those are patched on-the-fly also.",
          "createdAt": "2021-09-24T08:37:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-24T08:41:20Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7oyQw=="
          },
          "updatedAt": "2021-09-24T08:37:04Z",
          "id": "IC_kwDODI9FZc43OIMf"
        },
        {
          "author": "josteink",
          "body": "Nice. If I were to suggest anything, it would be to rename those PRs to make it clear the fix is for making the build run on FreeBSD.\r\n\r\n",
          "createdAt": "2021-09-24T08:41:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-24T08:42:37Z",
                "user": "sec"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7oy2A=="
          },
          "updatedAt": "2021-09-24T08:41:32Z",
          "id": "IC_kwDODI9FZc43OI0V"
        },
        {
          "author": "josteink",
          "body": "I see @jasonpugsley  has a somwhat big sizable PR still open: https://github.com/dotnet/runtime/pull/59339\r\n\r\nDo we need this merged for the .net 6 release as well, or is it just a nice to have?",
          "createdAt": "2021-09-24T09:23:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T09:23:40Z",
          "id": "IC_kwDODI9FZc43OPrK"
        },
        {
          "author": "wfurt",
          "body": "It is very unlikely we will be able to get any changes to 6.0 branch. It is mostly locked and requires director level approvals for critical fixes.",
          "createdAt": "2021-09-24T18:38:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T18:38:38Z",
          "id": "IC_kwDODI9FZc43PoNU"
        },
        {
          "author": "josteink",
          "body": "Yeah. I see RC-2 is branched already. And a few of the patches did IMO look “too big” to pass a “can we do this in RC?” filter, making backporting the rest kinda moot. \r\n\r\nOh well. Anyway we did our best. We can still land our changes upstream for main/.net 7 while maintaining a few outside patches for a proper .net6 port in FreeBSD, right?",
          "createdAt": "2021-09-24T18:42:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T18:42:28Z",
          "id": "IC_kwDODI9FZc43PopY"
        },
        {
          "author": "wfurt",
          "body": "Is there chance we can get https://github.com/freebsd/dotnet ??? Or is there any other places where we can maintain the code + syncing from release/6.0 as we need to? It feels like some repository would be better than floating patches. We can also try to get them submitted to source-build - the policy there is much more open. And I'm repeating myself but the https://github.com/dotnet/runtimelab is still possibility.  ",
          "createdAt": "2021-09-24T18:51:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T18:51:04Z",
          "id": "IC_kwDODI9FZc43Ppx1"
        },
        {
          "author": "rwv37",
          "body": "I have no \"real\" contribution to add to all of this. However, I've wanted this sort of thing for a looooooong time, and have been following this thread with great interest, so I'd just like to thank all of you for your efforts on this matter.",
          "createdAt": "2021-09-24T19:06:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T19:06:07Z",
          "id": "IC_kwDODI9FZc43PrxG"
        },
        {
          "author": "Thefrank",
          "body": "Ports for FreeBSD would go into https://github.com/freebsd/freebsd-ports if/when a net6 port lands. \r\nPatches for a port go under `PORTNAME/files/patch-RELATIVEPATH_NAME_OF_FILE_TO_PATCH.EXT`. Ports don't cherry-pick AFAIK.\r\n\r\nFor net5 I was manually applying my custom set of patches. now for net6 (and going forward net7) all of the needed patches are cherry-pickable or, in the case of net7 already merged. \r\n\r\nThat being said, having a centralized location for said patches would be nice for anyone that is not me, @sec, or @ta264 and does not already have a system setup for building. For long-term maintenance, patches absolutely should be in a centralized, publicly accessible, well documented location. source-build seems linux-focused, but I have no really dug into it. runtimelab is a solid choice as the only patches for building an SDK that are required are RIDs added into aspnetcore and installer and `sed` can do that.\r\n\r\nSide note: as there seems to be more demand for it now, I will try and work on ports script for net6 when I get some free time this weekend...unless someone else has already started then please let me know :)",
          "createdAt": "2021-09-24T19:38:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-24T19:38:14Z",
          "id": "IC_kwDODI9FZc43Pv9P"
        },
        {
          "author": "jasonpugsley",
          "body": "I think this is the point where it would be great to agree on a standard installation layout as well.\r\nThe SDK under the default `/usr/share/dotnet` or is somewhere else better?\r\nDo we populate the `/etc/dotnet/install_location` file?\r\nDo we set DOTNET_ROOT and modify PATH during install? What is normally done?\r\nHow do we get around the lack of an authoritative and trusted source of FreeBSD nuget packages available from a feed somewhere? Or do we expect people to do their own source build and store the built .nupkg files in a local cache?\r\nIf we do want a persistent cache for ports-built nupkg files where do they go? `/var/cache/nupkg` ? We'd also need to make a note that people then need to add a line to any nuget.config file, e.g.\r\n```xml\r\n  <packageSources>\r\n    <add key=\"ports-base\" value=\"/var/cache/nupkg\" />\r\n    ...\r\n```\r\n\r\nOf course everyone can do their own thing if they like but 99% of potential consumers of the SDK won't understand how to or why unless it's documented really well. We should come up with sensible defaults for most people so that it \"just works\" out of the box - let's make it really easy for new people to join in.",
          "createdAt": "2021-09-25T02:11:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T02:11:21Z",
          "id": "IC_kwDODI9FZc43QNMR"
        },
        {
          "author": "Thefrank",
          "body": "> The SDK under the default `/usr/share/dotnet` or is somewhere else better?\r\n\r\nDefault for ports is `/usr/local` so in this case `/usr/local/dotnet`. `share` is generally for arch agnostic things.\r\n> Do we populate the /etc/dotnet/install_location file?\r\n\r\nI say yes, this is checked for from things like the lldb plugin and any executable that is not built `self-contained`\r\n> Do we set DOTNET_ROOT and modify PATH during install? What is normally done?\r\n\r\nNot sure on the proper way of doing that but for `dotnet` to be used everywhere it would need to be in PATH\r\n> How do we get around the lack of an authoritative and trusted source of FreeBSD nuget packages available from a feed somewhere?\r\n\r\nWe can't really work around this, but SHA256 everything should help. It will be up to each person to decide if they want to trust the bootstrap+source build process or not.\r\n> If we do want a persistent cache for ports-built nupkg files where do they go? /var/cache/nupkg ?\r\n\r\n`/var/cache` is not ideal as people tend to clean out `cache` items to save space. `/usr/local/nuget` might work, but I really don't have a great idea where it should go otherwise :(\r\n\r\n> We'd also need to make a note that people then need to add a line to any nuget.config file\r\n\r\nWith `dotnet` installed they can use `dotnet nuget add source PATH_TO_/NUGET_FILES --name NAMEFORLOCALSTORE --configfile PATH_TO_/NuGet.config`\r\n\r\n\r\nPort script is slow going, but still going :)\r\n```\r\n  Microsoft.NETCore.DotNetAppHost -> /usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/artifacts/packages/Debug/Shipping/runtime.freebsd-x64.Microsoft.NETCore.DotNetAppHost.6.0.0-dev.nupkg\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:23:11.88\r\n```\r\n",
          "createdAt": "2021-09-25T03:26:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T04:37:07Z",
                "user": "jasonpugsley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T05:00:31Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB7v_uw=="
          },
          "updatedAt": "2021-09-25T03:26:39Z",
          "id": "IC_kwDODI9FZc43QPE9"
        },
        {
          "author": "jasonpugsley",
          "body": "> Default for ports is `/usr/local`\r\n\r\nTo avoid having to change PATH for every user the installer could create a soft link from `/usr/local/dotnet/dotnet` to `/usr/bin/dotnet` if that doesn't break convention.",
          "createdAt": "2021-09-25T04:09:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T04:09:34Z",
          "id": "IC_kwDODI9FZc43QQDy"
        },
        {
          "author": "Thefrank",
          "body": "> create a soft link from /usr/local/dotnet/dotnet to /usr/bin/dotnet if that doesn't break convention.\r\n\r\nThat sounds like a simpler solution. Not sure about it breaking convention but it should not cause issues.\r\n\r\nIn ports news...do the tarballs from the dotnet/runtime not contain sourcelink information? I am getting these errors under `Release` but not `Debug` when using the tarball.\r\n\r\n```\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.build.tasks.git/1.1.0-beta-20206-02/build/Microsoft.Build.Tasks.Git.targets(24,5): error : Unable to locate repository with working directory that contains directory '/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/libraries/System.Private.CoreLib/generators'. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/libraries/System.Private.CoreLib/generators/System.Private.CoreLib.Generators.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.build.tasks.git/1.1.0-beta-20206-02/build/Microsoft.Build.Tasks.Git.targets(47,5): error : Unable to locate repository with working directory that contains directory '/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/libraries/System.Private.CoreLib/generators'. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/libraries/System.Private.CoreLib/generators/System.Private.CoreLib.Generators.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.sourcelink.common/1.1.0-beta-20206-02/build/Microsoft.SourceLink.Common.targets(52,5): error : Source control information is not available - the generated source link is empty. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/libraries/System.Private.CoreLib/generators/System.Private.CoreLib.Generators.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.build.tasks.git/1.1.0-beta-20206-02/build/Microsoft.Build.Tasks.Git.targets(24,5): error : Unable to locate repository with working directory that contains directory '/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/System.Private.CoreLib'. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/System.Private.CoreLib/System.Private.CoreLib.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.build.tasks.git/1.1.0-beta-20206-02/build/Microsoft.Build.Tasks.Git.targets(47,5): error : Unable to locate repository with working directory that contains directory '/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/System.Private.CoreLib'. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/System.Private.CoreLib/System.Private.CoreLib.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.sourcelink.common/1.1.0-beta-20206-02/build/Microsoft.SourceLink.Common.targets(52,5): error : Source control information is not available - the generated source link is empty. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/System.Private.CoreLib/System.Private.CoreLib.csproj]\r\n/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.build.tasks.git/1.1.0-beta-20206-02/build/Microsoft.Build.Tasks.Git.targets(24,5): error : Unable to locate repository with working directory that contains directory '/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr'. [/usr/ports/lang/dotnet6/work/runtime-6.0.0-rc.1.21451.13/src/coreclr/runtime.proj]\r\n```",
          "createdAt": "2021-09-25T05:38:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T05:38:03Z",
          "id": "IC_kwDODI9FZc43QR99"
        },
        {
          "author": "nkosi23",
          "body": "I think it should be /usr/local/bin/dotnet and /usr/local/etc/dotnet. Same for libraries: /usr/local/lib. Everything installed by ports goes under local on FreeBSD, the rest is reserved for the base system. If this convention is broken the port may not be accepted as this is quite a strict rule.",
          "createdAt": "2021-09-25T06:26:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T06:41:35Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T12:28:38Z",
                "user": "vborovikov"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wj-w=="
          },
          "updatedAt": "2021-09-25T06:26:51Z",
          "id": "IC_kwDODI9FZc43QTGa"
        },
        {
          "author": "josteink",
          "body": "Whatever schema we end up with, we should aim to seamlessly support multiple runtimes and  SDKs, like official .net does on Windows and Linux (and Mac?).\r\n\r\n````\r\njostein@thinkpad-t480s:~$ dotnet --list-sdks\r\n3.1.413 [/usr/share/dotnet/sdk]\r\n5.0.401 [/usr/share/dotnet/sdk]\r\njostein@thinkpad-t480s:~$ dotnet --list-runtimes\r\nMicrosoft.AspNetCore.App 3.1.19 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 5.0.10 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 3.1.19 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 5.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n````\r\n\r\nAs such storing everything in folders rooted at `/usr/local/dotnet` might make more sense than designating it into a `dotnet6`-ports specific folder?\r\n\r\n.NET 7 will come sooner or later and when it does, we don’t want our port to have employed folder-conventions which hinders drop-in compatibility 🙂",
          "createdAt": "2021-09-25T07:10:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T07:44:08Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wLdA=="
          },
          "updatedAt": "2021-09-25T07:12:43Z",
          "id": "IC_kwDODI9FZc43QULb"
        },
        {
          "author": "arrowd",
          "body": "> \r\n> \r\n> I think it should be /usr/local/bin/dotnet and /usr/local/etc/dotnet. Same for libraries: /usr/local/lib. Everything installed by ports goes under local on FreeBSD, the rest is reserved for the base system. If this convention is broken the port may not be accepted as this is quite a strict rule.\r\n\r\nNot quite. `devel/llvmXX` ports are installed into `${LOCALBASE}/llvmXX`, and the same goes for OpenJDK ports. This is fine, basically.",
          "createdAt": "2021-09-25T07:57:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T07:57:46Z",
          "id": "IC_kwDODI9FZc43QfuV"
        },
        {
          "author": "arrowd",
          "body": "> \r\n> \r\n> Is there chance we can get https://github.com/freebsd/dotnet ???\r\n\r\nI have pinged our gitlords on that matter.",
          "createdAt": "2021-09-25T07:58:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-09-25T07:58:58Z",
                "user": "jasonpugsley"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-25T08:28:26Z",
                "user": "josteink"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-25T09:48:04Z",
                "user": "onny"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-09-25T13:46:04Z",
                "user": "driesmp"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wrHQ=="
          },
          "updatedAt": "2021-09-25T07:58:41Z",
          "id": "IC_kwDODI9FZc43Qf-w"
        },
        {
          "author": "arrowd",
          "body": "> > If we do want a persistent cache for ports-built nupkg files where do they go? /var/cache/nupkg ?\r\n> \r\n> `/var/cache` is not ideal as people tend to clean out `cache` items to save space. `/usr/local/nuget` might work, but I really don't have a great idea where it should go otherwise :(\r\n\r\nThe native FreeBSD package manager stores its cache in `/var/db/pkg`. I think, `/var/db/nuget` would be the most adequate idea.",
          "createdAt": "2021-09-25T08:00:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T10:50:06Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wagQ=="
          },
          "updatedAt": "2021-09-25T08:00:09Z",
          "id": "IC_kwDODI9FZc43QgYs"
        },
        {
          "author": "jasonpugsley",
          "body": "I don't want to suggest that the SDK is production-ready on FreeBSD, so that point needs to be made clear to anyone using the port. Let's not take any negative feedback for something we know is not finished. We've only recently got to the stage where we can reliably build all of the pieces.\r\nI do think it would be valuable to get something in front of a wider audience - hopefully people who can provide the type of information we need to debug problems.\r\n\r\nSo to add a couple more things to the list:\r\n- we need to let people know this is probably beta quality and we still have development/fixes/testing ahead of us\r\n- we need to direct people to the correct place to provide feedback so that we don't miss it\r\n\r\nI say beta quality purely as a guess - I don't actually know everything that doesn't work today, it's also been a while since I've tried to make use of aspnetcore. Has anyone managed to get all of the unit tests running successfully in each repo?",
          "createdAt": "2021-09-25T08:32:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T08:33:00Z",
          "id": "IC_kwDODI9FZc43Qj74"
        },
        {
          "author": "arrowd",
          "body": "What should be done about `lang/mono` port? Is it deprecated by your work, or is it a completely different thing?",
          "createdAt": "2021-09-25T09:03:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T09:03:41Z",
          "id": "IC_kwDODI9FZc43Qkw7"
        },
        {
          "author": "josteink",
          "body": "> What should be done about `lang/mono` port? Is it deprecated by your work, or is it a completely different thing?\r\n\r\nIt’s serves a different need and runs “legacy” .net framework IL-code binaries. ",
          "createdAt": "2021-09-25T09:47:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T09:47:16Z",
          "id": "IC_kwDODI9FZc43Ql7z"
        },
        {
          "author": "nkosi23",
          "body": "> > I think it should be /usr/local/bin/dotnet and /usr/local/etc/dotnet. Same for libraries: /usr/local/lib. Everything installed by ports goes under local on FreeBSD, the rest is reserved for the base system. If this convention is broken the port may not be accepted as this is quite a strict rule.\r\n> \r\n> Not quite. `devel/llvmXX` ports are installed into `${LOCALBASE}/llvmXX`, and the same goes for OpenJDK ports. This is fine, basically.\r\n\r\nThanks @arrowd, sorry I should have made clearer that I didn't mean to comment on the numbering part! I just wanted to point that everything should be under local.",
          "createdAt": "2021-09-25T10:49:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T10:49:23Z",
          "id": "IC_kwDODI9FZc43QnkP"
        },
        {
          "author": "nkosi23",
          "body": "> > What should be done about `lang/mono` port? Is it deprecated by your work, or is it a completely different thing?\r\n> \r\n> It’s serves a different need and runs “legacy” .net framework IL-code binaries.\r\n\r\nIndeed, I can testify that we use the mono port in our business to run our web applications, this is a different tooling. Even our new projects still use mono, and I do not think we will even consider migrating to dotnet before to 2-5 years after the port stabilizes (mainly for fear of breaking something). There is also some cool tooling like the C# REPL that do not have .NET Core equivalents (yet).\r\n\r\nLooking forward to when the msbuild port will be updated because right now the mono6.8 port does not include a compiler so we're stuck on the mono 5.10 port. This is personally what leads me to watching the present effort with so much passion. The .NET development story on FreeBSD is a bit miserable right now, but I am getting out of the scope of this ticket.",
          "createdAt": "2021-09-25T11:02:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T11:09:52Z",
          "id": "IC_kwDODI9FZc43Qn8g"
        },
        {
          "author": "arrowd",
          "body": "> Looking forward to when the msbuild port will be updated because right now the mono6.8 port does not include a compiler so we're stuck on the mono 5.10 port. \r\n\r\nSorry for hijacking the thread, but what exactly prevents `lang/mono` from being updated to the latest version?",
          "createdAt": "2021-09-25T11:13:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T11:13:11Z",
          "id": "IC_kwDODI9FZc43QoON"
        },
        {
          "author": "nkosi23",
          "body": "@arrowd I am not sure exactly why the mono port is not being updated with every new release of upstream. I know that [there was this longstanding ticket](https://reviews.freebsd.org/D23300), followed by [this more recent ticket](https://reviews.freebsd.org/rP557880) that resulted in the current mono6.8 port (lacking an updated version of msbuild). Edit: To put things in context, upstream latest version is mono 6.12.",
          "createdAt": "2021-09-25T11:18:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T11:32:00Z",
          "id": "IC_kwDODI9FZc43QoXM"
        },
        {
          "author": "rootwyrm",
          "body": "> \r\n> \r\n> > Looking forward to when the msbuild port will be updated because right now the mono6.8 port does not include a compiler so we're stuck on the mono 5.10 port.\r\n> \r\n> Sorry for hijacking the thread, but what exactly prevents `lang/mono` from being updated to the latest version?\r\n\r\nHonestly? Politics and outright hostility from core@ and portmgr@ - we literally had to force it down throats last time. And neither I or Mark are interested in dealing with it again. (What he committed is my work, with my explicit approval.)\r\n\r\nThe only change that will be made to the Mono ports any time this decade will be to kill all of them with VuXML, because everything in there is currently vulnerable to a remote code exploit. I haven't had the energy or interest in dealing with the same people blocking updates also fighting removal.\r\n\r\nedit: Also, the current upstream is 6.12.0.122. Not 6.12. All other versions contain the aforementioned vulnerability. 122 doesn't even remotely pass unit testing.",
          "createdAt": "2021-09-25T12:25:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T12:34:56Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wkhQ=="
          },
          "updatedAt": "2021-09-25T12:28:01Z",
          "id": "IC_kwDODI9FZc43QqMC"
        },
        {
          "author": "arrowd",
          "body": "> \r\n> Honestly? Politics and outright hostility from core@ and portmgr@ - we literally had to force it down throats last time. And neither I or Mark are interested in dealing with it again. (What he committed is my work, with my explicit approval.)\r\n> \r\n\r\nAnd what was the rationale for that hostility? This sounds quite unusual for core@\r\n\r\n> The only change that will be made to the Mono ports any time this decade will be to kill all of them with VuXML, because everything in there is currently vulnerable to a remote code exploit. I haven't had the energy or interest in dealing with the same people blocking updates also fighting removal.\r\n> \r\n> edit: Also, the current upstream is 6.12.0.122. Not 6.12. All other versions contain the aforementioned vulnerability. 122 doesn't even remotely pass unit testing.\r\n\r\nThat's a pity. I skimmed through mono bug reports on our bugzilla and want to deal with low hanging fruits like PR 255709, but can't spearhead the whole initiative. Maybe we can work out something together?",
          "createdAt": "2021-09-25T12:35:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-25T13:39:52Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB7wqkQ=="
          },
          "updatedAt": "2021-09-25T12:35:26Z",
          "id": "IC_kwDODI9FZc43Qqci"
        },
        {
          "author": "arrowd",
          "body": "@wfurt et all, the FreeBSD gitlords said that `freebsd/dotnet` repository is doable. I need a list of GitHub usernames that will be allowed to push there.",
          "createdAt": "2021-09-25T13:30:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T13:30:54Z",
          "id": "IC_kwDODI9FZc43QsCi"
        },
        {
          "author": "emaste",
          "body": "> Politics and outright hostility from core@ and portmgr@\r\n\r\nI have to say as a member of FreeBSD core@ I have no idea what this is about, and very much want to see `lang/mono` kept up to date.\r\n\r\nHowever, this dotnet issue is not the place for this discussion - please move it to FreeBSD mailing lists, core@, or if there's some reason you're not comfortable doing those I am happy to try to sort it out if you mail me directly.",
          "createdAt": "2021-09-25T14:37:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T14:37:28Z",
          "id": "IC_kwDODI9FZc43QuKr"
        },
        {
          "author": "sec",
          "body": "> @wfurt et all, the FreeBSD gitlords said that `freebsd/dotnet` repository is doable. I need a list of GitHub usernames that will be allowed to push there.\r\n\r\n@arrowd  Nice! What's the plan with that repo? Will it contain runtime/aspnet/sdk/installer forks all inside one repo or only scripts/patches/port/etc? \r\n\r\nAlso if I may suggest something, is to move this discussion to some place that will be easier to read/follow? And to keep this issue FreeBSD and .NET Core related :)",
          "createdAt": "2021-09-25T15:38:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T15:38:58Z",
          "id": "IC_kwDODI9FZc43QwKR"
        },
        {
          "author": "arrowd",
          "body": "\r\n> \r\n> @arrowd Nice! What's the plan with that repo? Will it contain runtime/aspnet/sdk/installer forks all inside one repo or only scripts/patches/port/etc?\r\n\r\nIt is up to you, guys. The `freebsd/chromium` repo contains only a port and is probably used as an overlay for the vanilla Ports tree. Chromium maintainers might share their workflow on how do they deal with 1000 (literally) patches in `files/` subdir. If you settle down the process, then I believe the right approach is to have a repo for the port, not actual forks.\r\n\r\n> \r\n> Also if I may suggest something, is to move this discussion to some place that will be easier to read/follow? And to keep this issue FreeBSD and .NET Core related :)\r\n\r\nSure, but where to? Amongst the persistent chats we have Discord (https://discord.gg/Gtsu7hJM) or we can use FreeBSD Bugzilla, or Forum.",
          "createdAt": "2021-09-25T15:50:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T15:50:47Z",
          "id": "IC_kwDODI9FZc43Qwhe"
        },
        {
          "author": "josteink",
          "body": "> And I'm repeating myself but the https://github.com/dotnet/runtimelab is still possibility.  \n\nI see this option has been somewhat ignored, but I'm curious. \n\nWhat does it offer over a separate FreeBSD-owned namespace/organisation?\n\nA higher level of attention from MS? Bigger chance of getting mainlined? Official .net CI-resources?\n\nAny help clarifying what this option actually offers might be enlightening to more people than just me 🙂",
          "createdAt": "2021-09-25T16:40:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T16:40:03Z",
          "id": "IC_kwDODI9FZc43Qyxp"
        },
        {
          "author": "sec",
          "body": "> > And I'm repeating myself but the https://github.com/dotnet/runtimelab is still possibility.\r\n> \r\n> I see this option has been somewhat ignored, but I'm curious.\r\n> \r\n> What does it offer over a separate FreeBSD-owned namespace/organisation?\r\n> \r\n> A higher level of attention from MS? Bigger chance of getting mainlined? Official .net CI-resources?\r\n> \r\n> Any help clarifying what this option actually offers might be enlightening to more people than just me 🙂\r\n\r\nFor me, this is also fine :) Just that we'll need also aspnetcore, sdk, installer and/or something else - I have no idea :) I'm just thinking what would be best/easiest option to maintan/contribute to. We can have patches/port in place and try to merge those changes into upstream, for ex.. So that we won't need to keep track of the same things in 2 diffrent places for everything.\r\n\r\nIn the end, all we all want is a simple and nice `make install` to have `/usr/local/dotnet` on our boxes :)",
          "createdAt": "2021-09-25T18:27:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-25T18:27:23Z",
          "id": "IC_kwDODI9FZc43Q2bH"
        },
        {
          "author": "josteink",
          "body": "> I'm just thinking what would be best/easiest option to maintan/contribute to. We can have patches/port in place and try to merge those changes into upstream, for ex.. So that we won't need to keep track of the same things in 2 diffrent places for everything.\r\n\r\nAbsolutely. My personal experience is kinda conflicting at this point:\r\n\r\n* having to maintain a “ports” repo with patch-files will be much more cumbersome to work with than “real” GitHub repos with proper PRs, diffs, etc. \r\n* maintaining a long term (permanent?) fork has costs associated with staying up to date with upstream patches, and chances of conflicts from upstream (which isn’t aware of our divergences) are much more likely to occur.  I’ve never run a fork where the maintenance-cost didn’t grow over time.\r\n\r\nTo me the absolutely ideal would be upstream everything we can to official repos to prevent the needs for (too many) patches or forked repos. \r\n\r\nIf that means that the FreeBSD first dotnet6 port would be based on some appropriately chosen commit from `main` rather than `release/6.0`, I still think that would be better than either of those two options. \r\n\r\n> In the end, all we all want is a simple and nice make install to have /usr/local/dotnet on our boxes :)\r\n\r\nAgreed. And having a FreeBSD-owned port-building only repo (with minimal patches, if required) is IMO the least troublesome way to get there. \r\n\r\nWhat do you guys think? Anyone with different experiences or opinions?",
          "createdAt": "2021-09-25T18:38:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-25T18:58:22Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-26T02:25:33Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB7xlLQ=="
          },
          "updatedAt": "2021-09-25T18:50:45Z",
          "id": "IC_kwDODI9FZc43Q2yE"
        },
        {
          "author": "jasonpugsley",
          "body": "Just a note that #59339 has merged to main so once you rebase to latest it will remove the freebsd.11 RID and it also makes use of `pthread_getthreadid_np()` which is an API added in FreeBSD 12.2.\r\n\r\nSo going forward, builds that use main as-is need to be built on 12.2 (or later). We did discuss this briefly a couple of months back (going to 12.2) and no-one voiced any concerns at the time so hopefully this doesn't break anyone's workflow - sorry if it does.\r\n\r\nThe CI builds on main are already using the 12.2 crossrootfs.\r\nMany thanks to @wfurt getting these pieces in place.",
          "createdAt": "2021-09-26T05:52:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-26T08:19:15Z",
                "user": "josteink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-26T08:43:58Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-26T11:57:27Z",
                "user": "onny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-26T18:25:19Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB7y9rg=="
          },
          "updatedAt": "2021-09-26T05:52:24Z",
          "id": "IC_kwDODI9FZc43RImh"
        },
        {
          "author": "josteink",
          "body": "> @wfurt et all, the FreeBSD gitlords said that `freebsd/dotnet` repository is doable. I need a list of GitHub usernames that will be allowed to push there.\r\n\r\nI’m not a FreeBSD committer or in other ways associated with the FreeBSD project, but I’ve been with this port since the start, so it would be nice to be on this list at least 🙂\r\n\r\nFor the overall I think just looking at who has been putting work in this thread recently would be a reasonable start. Or are there other criteria’s that must be let, since this might end up being an official FreeBSD-port?",
          "createdAt": "2021-09-26T07:43:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-26T07:45:35Z",
          "id": "IC_kwDODI9FZc43RL13"
        },
        {
          "author": "Thefrank",
          "body": "oh wow. miss a day, miss a year it seems.\r\n\r\nI can easily make the changes to the port I am trying to make but...\r\n\r\nShould I even continue? I am still no closer in figuring out why the tarballs from the dotnet repos won't build. Using `git` to clone/checkout the repos works, but it moves from making a `distinfo` with a few hashed files to one with a massive repo of files. An alternative would be for it to just grab a bunch of scripts (e.g., the very nice system @sec has) but that seems to defeat the purpose of using the ports system at all. (I am already using a custom `post-extract`, `do-patch`, and `do-build` haha)\r\n\r\nSo at this point would this now be better left to the FreeBSD ports team?",
          "createdAt": "2021-09-26T18:32:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-26T18:32:47Z",
          "id": "IC_kwDODI9FZc43Rj0k"
        },
        {
          "author": "arrowd",
          "body": "@Thefrank Can you share your port work?",
          "createdAt": "2021-09-26T19:19:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-26T19:19:28Z",
          "id": "IC_kwDODI9FZc43RlZV"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd I assume you are asking for the `Makefile`? If yes: https://gist.github.com/Thefrank/703b9a5159174b6b94e4efb81aabab0a \r\n\r\nAll of my other packages were `NO_BUILD` so I am guessing its something I am doing wrong there.",
          "createdAt": "2021-09-26T20:12:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-26T20:12:32Z",
          "id": "IC_kwDODI9FZc43RnDu"
        },
        {
          "author": "arrowd",
          "body": "> @arrowd I assume you are asking for the `Makefile`?\r\n\r\nI meant the whole port, with patch files from `files/` dir, for instance.",
          "createdAt": "2021-09-27T11:53:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T11:53:53Z",
          "id": "IC_kwDODI9FZc43TRdo"
        },
        {
          "author": "Thefrank",
          "body": "> I meant the whole port, with patch files from `files/` dir, for instance.\r\n\r\nThe same ones, unmodified from: https://github.com/sec/dotnet-core-freebsd-source-build/tree/main/patches my local `Makefile` has a comment about that but I guess I uploaded an older version >.<\r\n\r\nNow, if you need the `work` dir, thats a different story and I will need to find a good place to upload that",
          "createdAt": "2021-09-27T17:12:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T17:12:24Z",
          "id": "IC_kwDODI9FZc43UWzd"
        },
        {
          "author": "arrowd",
          "body": "OK, I'll try to come up with a port[s].",
          "createdAt": "2021-09-27T17:34:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-09-27T17:40:20Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-27T17:44:31Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-27T17:51:16Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB77y0A=="
          },
          "updatedAt": "2021-09-27T17:34:47Z",
          "id": "IC_kwDODI9FZc43Uaz6"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd thanks! I was getting hung up on the sourcelink errors that seems to only happen with the repo tarballs",
          "createdAt": "2021-09-27T17:57:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T17:57:31Z",
          "id": "IC_kwDODI9FZc43Uexb"
        },
        {
          "author": "arrowd",
          "body": "I'm getting\r\n\r\n> Failed to create CoreCLR, HRESULT: 0x8007FF02\r\n\r\nWhen running `dotnet new` in the jail. This seems to be related to [1], as I clearly see that mlock fails with EPERM. At the same time, the command works outside the jail. Any hints?\r\n\r\n[1] https://github.com/dotnet/runtime/issues/44417#issuecomment-726966389",
          "createdAt": "2021-09-27T18:12:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:12:58Z",
          "id": "IC_kwDODI9FZc43UnLR"
        },
        {
          "author": "ta264",
          "body": "You need to enable mlock for the jail",
          "createdAt": "2021-09-27T18:19:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:19:26Z",
          "id": "IC_kwDODI9FZc43UoXM"
        },
        {
          "author": "arrowd",
          "body": "OK, moved forward a bit. Now I'm getting\r\n\r\n```\r\n   Determining projects to restore...\r\n/wrkdirs/usr/ports/devel/dotnet6-runtime/work/runtime-6.0.0-rc.1.21451.13/.packages/microsoft.dotnet.arcade.sdk/6.0.0-beta.21427.6/tools/Tools.proj : error NU3037: Package 'MicroBuild.Core 0.2.0' from source 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json': The repository primary signature validity period has expired.\r\n```\r\n\r\nThis is because networking is not available during build stage. We need to some-how pre-seed all required files at the `fetch` stage. Is anyone aware how to do it properly? Is this somehow related to NuGet?",
          "createdAt": "2021-09-27T18:31:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:31:37Z",
          "id": "IC_kwDODI9FZc43UqeU"
        },
        {
          "author": "Thefrank",
          "body": "is `ca-root-nss` installed? that error is cert related",
          "createdAt": "2021-09-27T18:32:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:32:48Z",
          "id": "IC_kwDODI9FZc43UqrH"
        },
        {
          "author": "arrowd",
          "body": "Like I said, downloading something during the build is not an option. All distfiles should be listed in `distinfo` and be downloaded by the port framework. I'm starting to think that it'd be extremely hard to create a proper port for .NET, as it downloads a lot of stuff under the hood.\r\n\r\nI'll look more into it, anyways.",
          "createdAt": "2021-09-27T18:47:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:47:57Z",
          "id": "IC_kwDODI9FZc43UtHZ"
        },
        {
          "author": "jkotas",
          "body": "> We need to some-how pre-seed all required files at the fetch stage. Is anyone aware how to do it properly? Is this somehow related to NuGet?\r\n\r\n\"source build\" mode is designed to do exactly this.  https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-1/#source-build has some more details.",
          "createdAt": "2021-09-27T18:53:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:53:15Z",
          "id": "IC_kwDODI9FZc43Ut8B"
        },
        {
          "author": "Thefrank",
          "body": "ah! If that is the case, I was doing it wrong then by having networking turned on in the ports jail :(\r\n\r\n@jkotas Should we be moving some focus over to https://github.com/dotnet/source-build if we need an offline build?",
          "createdAt": "2021-09-27T18:56:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:56:23Z",
          "id": "IC_kwDODI9FZc43UubF"
        },
        {
          "author": "jkotas",
          "body": "> Should we be moving some focus over to https://github.com/dotnet/source-build if we need an offline build?\r\n\r\nYep.",
          "createdAt": "2021-09-27T18:59:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T18:59:51Z",
          "id": "IC_kwDODI9FZc43Uu9S"
        },
        {
          "author": "josteink",
          "body": "> > Should we be moving some focus over to https://github.com/dotnet/source-build if we need an offline build?\r\n> \r\n> Yep.\r\n\r\nIn which case there is an almost equally old thread on the subject 😅\r\n\r\nhttps://github.com/dotnet/source-build/issues/1139",
          "createdAt": "2021-09-27T19:09:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T19:09:16Z",
          "id": "IC_kwDODI9FZc43Uw2J"
        },
        {
          "author": "wfurt",
          "body": "To go back question from @sec:\r\nIt feels like the runtimelabs can be good place to keep focus on the bootstrap runtime. Perhaps with cross-compilation. The repo can produce builds and it would be easiest IMHO to get attention of core .NET team and infrastructure people. \r\n\r\nIn ideal case the \"normal\" repos would be just buildable - but I don't think it is the case and it feels it is too late to get changes for 6.0. So we either need alternative repo(s) or go with patching approach. \r\n\r\nsource-build was designed for cases like this but again I'm not sure it is ready. As minimum it can still take some changes as well as it can work with patches. (and was designed to support off-line as well) ",
          "createdAt": "2021-09-27T19:35:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T19:35:48Z",
          "id": "IC_kwDODI9FZc43U1WC"
        },
        {
          "author": "sec",
          "body": "@wfurt If you ask me, it's fine if we don't get all changes into 6.0 - would be nice, but we can streamline those changes for next release and live with patches needed to build SDK but...\r\n\r\nEven now, with patches, we can't do \"normal\" builds, as we don't have previous SDK's and \r\n\r\n> > We need to some-how pre-seed all required files at the fetch stage. Is anyone aware how to do it properly? Is this somehow related to NuGet?\r\n> \r\n> \"source build\" mode is designed to do exactly this. https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-1/#source-build has some more details.\r\n\r\n@jkotas Do you maybe have more information about that or know something more? I've looked at that, but that doesn't have 6.0 in yet and trying to run main branch under FreeBSD complete without any errors after few minutes. And there are few Nuget's under artifacts dir, but I don't think it's the full runtime/sdk :)\r\n\r\n@wfurt Even if we don't get all patches into 6.0, I get it, fine, we can post-patch on the fly, but all the build chain is built around getting a lot of things from \"internet\" and those bits for FreeBSD are missing, which cause trouble inside build scripts. For ex. I was trying to run runtime tests, but they failed becuase I had local source added in NuGet.config :( (or maybe I'm doing something wrong, there's also no clear documentation about the whole build chain and most of the things are either suggested by other people or learned hard way by looking at scripts etc.).\r\n\r\nIf we can have SDK, crosscompiled under Linux, for FreeBSD, that will match Linux/etc. versions and those will be hosted (it can be runtimelabs if you ask me) - that would be great place for people to start using it :)\r\n\r\nFor `source-build` - imo that would be ideal solution, if it could build from source and supported side-patches - then we have everything in place - just not the source-build itself from what I see (maybe I'm wrong, I hope) :)\r\n\r\nMaybe this was asked before - but why FreeBSD can't be put inside official CI pipeline to produce FreeBSD SDK (crosscompiled under Linux) and be published along the Linux one? I know it's not supported and some things may not work, but if it's stated clearly, then it shouldn't be a problem and it can help us a lot during build phase as some local hacks won't be required ?\r\n\r\n@arrowd That `The repository primary signature validity period has expired.` - are you getting this under 14-CURRENT? I just got issue created with the same error for the scripts I've put up to build SDK under FreeBSD. Weird thing is, it under normal build, without any jail, with normal network connectivity (unless something major changed in 14 that's causing this).\r\n\r\nAll this work put around getting this done is great - thanks everyone - I hope we can keep it up :)",
          "createdAt": "2021-09-27T22:18:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T22:18:42Z",
          "id": "IC_kwDODI9FZc43VZpm"
        },
        {
          "author": "jkotas",
          "body": "> @jkotas Do you maybe have more information about that or know something more?\r\n\r\nFor .NET 6, https://github.com/dotnet/source-build/blob/main/README.md says that the main entrypoint of the source build is in the dotnet/installer repo, and dotnet/source-build just contains some supporting tools.\r\n\r\n> We need to some-how pre-seed all required files at the fetch stage. \r\n\r\nI think dotnet/runtimelab cross-compiled build combined with an existing SDK would give you what you need to pre-seed.",
          "createdAt": "2021-09-27T23:02:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-27T23:02:25Z",
          "id": "IC_kwDODI9FZc43VmWr"
        },
        {
          "author": "arrowd",
          "body": "> For .NET 6, https://github.com/dotnet/source-build/blob/main/README.md says that the main entrypoint of the source build is in the dotnet/installer repo, and dotnet/source-build just contains some supporting tools.\r\n\r\nI played with `dotnet/installer` a bit and found out that it still downloads stuff during the build. I was expecting that this `source-build` thing will provide a way to pre-fetch all distribution files required to build .NET. Am I mistaken?",
          "createdAt": "2021-09-28T12:08:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-28T12:08:48Z",
          "id": "IC_kwDODI9FZc43YVxE"
        },
        {
          "author": "jkotas",
          "body": "https://github.com/dotnet/source-build/tree/main/Documentation/planning/arcade-powered-source-build explains how this is supposed to work. The build in `dotnet/installer` should produce a source build artifact that has the sources collected from the different repos. The source build artifact should be buildable offline.",
          "createdAt": "2021-09-28T15:12:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-28T15:12:02Z",
          "id": "IC_kwDODI9FZc43ZF0Y"
        },
        {
          "author": "arrowd",
          "body": "> https://github.com/dotnet/source-build/tree/main/Documentation/planning/arcade-powered-source-build explains how this is supposed to work. The build in `dotnet/installer` should produce a source build artifact that has the sources collected from the different repos. The source build artifact should be buildable offline.\r\n\r\nThanks for the explanation! So, I'm on the right track.\r\n\r\nI put the first version of the port for `dotnet/installer` into https://github.com/arrowd/dotnet-ports\r\nLet's converge on that.",
          "createdAt": "2021-09-28T15:51:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-28T17:13:31Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-28T17:51:15Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB8H6oA=="
          },
          "updatedAt": "2021-09-28T15:51:08Z",
          "id": "IC_kwDODI9FZc43ZNz_"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd thanks for finishing the port! I could never get past the source-link build failures >.<",
          "createdAt": "2021-09-28T17:54:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-28T17:56:57Z",
          "id": "IC_kwDODI9FZc43ZufR"
        },
        {
          "author": "arrowd",
          "body": "It is actually quite far from being finished and I was hoping for your help.",
          "createdAt": "2021-09-28T18:16:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-28T18:16:47Z",
          "id": "IC_kwDODI9FZc43Zyi_"
        },
        {
          "author": "arrowd",
          "body": "What is required for removing the `echo 'exit 0' > install-dotnet.sh` hack? The bootstrap should be uploaded somewhere?",
          "createdAt": "2021-09-29T14:29:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T14:29:58Z",
          "id": "IC_kwDODI9FZc43cjk-"
        },
        {
          "author": "sec",
          "body": "> What is required for removing the `echo 'exit 0' > install-dotnet.sh` hack? The bootstrap should be uploaded somewhere?\r\n\r\nEither adjust SDK version inside `global.json` if it's used or as you said - upload SDK into `official` place from where it's trying to fetch",
          "createdAt": "2021-09-29T14:39:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T14:39:19Z",
          "id": "IC_kwDODI9FZc43clri"
        },
        {
          "author": "arrowd",
          "body": "Maybe someone of you, guys, look into that? Right now I'm blocked by following error:\r\n\r\n```\r\nwrkdirs/usr/ports/lang/dotnet6-installer/work/installer-6.0.100-rc.1.21458.32/src/redist/targets/GenerateLayout.targets(351,5): error : Download from all targets failed. List of attempted targets: https://dotnetcli.blob.core.windows.net/dotnet/Runtime/6.0.0-rc.1.21451.13/dotnet-runtime-6.0.0-rc.1.21451.13-freebsd-x64.tar.gz [/wrkdirs/usr/ports/lang/dotnet6-installer/work/installer-6.0.100-rc.1.21458.32/src/redist/redist.csproj]\r\n/wrkdirs/usr/ports/lang/dotnet6-installer/work/installer-6.0.100-rc.1.21458.32/src/redist/targets/GenerateLayout.targets(351,5): error : Failed to download file using addresses in Uri and/or Uris. [/wrkdirs/usr/ports/lang/dotnet6-installer/work/installer-6.0.100-rc.1.21458.32/src/redist/redist.csproj]\r\n```\r\n\r\nI believe, uploading the bootstrap to the \"official\" place should fix it. Is it feasible, or we'll have to find another way around?",
          "createdAt": "2021-09-29T14:48:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T14:48:24Z",
          "id": "IC_kwDODI9FZc43cnqe"
        },
        {
          "author": "sec",
          "body": ":) There's no official support for FreeBSD, that's why we have this issue :)\r\nTo get around that, you need to create local directory, put those required nupkg's inside and add this as source to `NuGet.config` (look at the scripts/patches we have already, it will add something like `<add name=\"somename\" value=\"/path/to/dir\" />`)",
          "createdAt": "2021-09-29T14:54:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T14:54:59Z",
          "id": "IC_kwDODI9FZc43cpHF"
        },
        {
          "author": "arrowd",
          "body": "What nupkg's? The error log doesn't seem to mention any packages.",
          "createdAt": "2021-09-29T14:57:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T14:57:40Z",
          "id": "IC_kwDODI9FZc43cptw"
        },
        {
          "author": "sec",
          "body": "Oh sorry my bad - take a look at https://github.com/sec/dotnet-core-freebsd-source-build/blob/main/build_installer.sh - we feed those by hand into installer - I was thinking that source-build could/should be able to do that, but it's not working on FreeBSD and/or for 6.0 yet or I just don't know how to use it properly.\r\n\r\nFrom my expierence, to build installer, you need to have runtime, aspnetcore and SDK built before it can be packed into working releaseable SDK.",
          "createdAt": "2021-09-29T15:04:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T15:05:28Z",
          "id": "IC_kwDODI9FZc43crMd"
        },
        {
          "author": "arrowd",
          "body": "> From my expierence, to build installer, you need to have runtime, aspnetcore and SDK built before it can be packed into working releaseable SDK.\r\n\r\nHuh. Then what `installer` is, exactly? It just repacks three build artifacts into a single artifact?",
          "createdAt": "2021-09-29T15:16:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T15:16:59Z",
          "id": "IC_kwDODI9FZc43cuCM"
        },
        {
          "author": "sec",
          "body": "I think, in general, yes. Only change for FreeBSD is that we don't have binaries upload/supported officialy, that's why we \"feed\" them by hand into it :)\r\n\r\nBut again, reading about `https://github.com/dotnet/source-build` - this looks like exactly what we're doing, but in official way - but again, I can't get it to work with 6.0-rc1 (used main branch, it just complete without error and doing anything, there's an issue https://github.com/dotnet/source-build/issues/1139) and FreeBSD.\r\n\r\nSo if you're focusing on using `installer` to build SDK - we already done that and you can take a look at the scripts that I've put together and patches based on that work :)\r\n\r\nedit: I may be wrong about the `installer` :)",
          "createdAt": "2021-09-29T15:20:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T15:20:28Z",
          "id": "IC_kwDODI9FZc43cuvH"
        },
        {
          "author": "Thefrank",
          "body": "`installer` only needs, currently, a platform+arch specific `runtime` and `aspnetcore` under `freebsd-x64` earlier net6 previews we build SDK to work around a double-free bug. This has since been resolved.\r\n\r\nI won't have time to look into source-build until later this week but from I recall [now over a year ago!] it was pretty linux specific which is why my initial (incorrect?) route with the port was to bootstrap + local build.",
          "createdAt": "2021-09-29T16:58:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T16:58:12Z",
          "id": "IC_kwDODI9FZc43dCj1"
        },
        {
          "author": "wfurt",
          "body": "I did another try on the runtimelab https://github.com/dotnet/runtimelab/pull/1607\r\nThat produced https://dev.azure.com/dnceng/public/_build/results?buildId=1394367&view=artifacts&pathAsName=false&type=publishedArtifacts \r\n\r\nwhere one can get the FreeBSD bits, packages and  packages/Release/Shipping//dotnet-runtime-6.0.0-ci-freebsd-x64.tar.gz is essentially runtime drop-in.\r\nIt would be great if somebody from the community can give it try and report outcome. Some files still have \"linux\" in them but the binaries are FreeBSD AFAIK\r\n\r\nThis process also produced *test_assets_FreeBSD* and that should be sufficient to execute tests without building or SDK. \r\n\r\n\r\nSince this is not the \"official\" build we can perhaps extend the pipeline to rebuild SDK without crossgen and package it together (or play trick and disable R2R) ",
          "createdAt": "2021-09-30T06:11:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T06:11:20Z",
          "id": "IC_kwDODI9FZc43ex1X"
        },
        {
          "author": "wfurt",
          "body": "one more note that I did not cherry-pick any main branch fixes. I can certainly do that as well to avoid patching. ",
          "createdAt": "2021-09-30T06:15:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T06:15:13Z",
          "id": "IC_kwDODI9FZc43eyX7"
        },
        {
          "author": "Thefrank",
          "body": "zip -> tar.gz -> 1.74GB...what...I was just heading to bed when you posted that so I might be tired anyways\r\nsomeone else will likely be able to look into more before but just checking the CoreCLR tarball:\r\n```\r\ncorerun:                                    ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 11.3, FreeBSD-style, BuildID[sha1]=c8a7eb6637498e12ae3414ef5350b5c42d6d2d71, stripped\r\ncorerun.dbg:                                ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter *empty*, for FreeBSD 11.3, FreeBSD-style, BuildID[sha1]=c8a7eb6637498e12ae3414ef5350b5c42d6d2d71, with debug_info, not stripped\r\nilasm:                                      ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 11.3, FreeBSD-style, BuildID[sha1]=52e8d0b4f1b101ce16f5965bcd325e681709b5a7, stripped\r\nilasm.dbg:                                  ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter *empty*, for FreeBSD 11.3, FreeBSD-style, BuildID[sha1]=52e8d0b4f1b101ce16f5965bcd325e681709b5a7, with debug_info, not stripped\r\n```\r\nThey atleast execute. I will need build something for `corerun` to test it\r\nit looks like its using the old build environment for FreeBSD 11.3 to build. Crossgen2 is wrong in CoreCLR tarball, libraries_bin tar ball does not include a crossgen2 pack :(\r\n```\r\ncrossgen2:                                  ELF 64-bit LSB pie executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=67eb83e2ed9e56bc416a9aae026e2338f079c70a, for GNU/Linux 2.6.32, stripped\r\n```\r\nthe `*.so` from libraries_bin `/bin/XXXXX/net6.0-FreeBSD-Release-x64/` are not FreeBSD libraries. The first part looks OK but `ldd` doesn't like it. it MIGHT be fixable with `brandelf` and changing to FreeBSD\r\n```\r\nroot@dotnet6:~/cibuild/libbin/bin/native/net6.0-FreeBSD-Release-x64 # readelf -d libSystem.Globalization.Native.so\r\n\r\nDynamic section at offset 0xed70 contains 25 entries:\r\n  Tag                Type                  Name/Value\r\n 0x0000000000000001 NEEDED               Shared library: [libdl.so.1]\r\n 0x0000000000000001 NEEDED               Shared library: [libc.so.7]\r\n 0x000000000000000e SONAME               Library soname: [libSystem.Globalization.Native.so]\r\n{SNIP}\r\nroot@dotnet6:~/cibuild/libbin/bin/native/net6.0-FreeBSD-Release-x64 # ldd libSystem.Globalization.Native.so\r\nldd: libSystem.Globalization.Native.so: not a FreeBSD ELF shared object\r\n```\r\nThe actual tarball for the runtime looks fine even if the .so files still have the same wrong ELF ABI issue.",
          "createdAt": "2021-09-30T07:00:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T07:00:01Z",
          "id": "IC_kwDODI9FZc43fCdp"
        },
        {
          "author": "wfurt",
          "body": "Thanks for quick check @Thefrank. I think I'll need to cherry-pick some more changes from main.",
          "createdAt": "2021-09-30T07:04:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T07:04:05Z",
          "id": "IC_kwDODI9FZc43fDz_"
        },
        {
          "author": "josteink",
          "body": "For those out of the loop, `runtimelabs` now has a `feature/FreeBSD` branch, courtesy of @wfurt :\n\nhttps://github.com/dotnet/runtimelab/pull/1609",
          "createdAt": "2021-09-30T16:06:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T16:06:47Z",
          "id": "IC_kwDODI9FZc43hPVa"
        },
        {
          "author": "wfurt",
          "body": "With the fixes I can combine it with Linux SDK (COMPlus_ReadyToRun=0 & COMPlus_ZapDisable=1) and run \"dotnet new console\". actual \"dotnet run\" failed so I probably need to also progress publishing packages as @jkotas suggested and perhaps apply more fixes to the SDK\r\n```\r\n[furt@daemon /tmp/bsd]$ ~/dotnet-6.0/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-rtm.21479.37\r\n Commit:    a18eacdcd8\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /usr/home/furt/dotnet-6.0/sdk/6.0.100-rtm.21479.37/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-ci\r\n  Commit:  e625d786d3\r\n\r\n.NET SDKs installed:\r\n  6.0.100-rtm.21479.37 [/usr/home/furt/dotnet-6.0/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.NETCore.App 6.0.0-ci [/usr/home/furt/dotnet-6.0/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rtm.21479.7 [/usr/home/furt/dotnet-6.0/shared/Microsoft.NETCore.App]\r\n```",
          "createdAt": "2021-09-30T20:29:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T20:29:36Z",
          "id": "IC_kwDODI9FZc43h7nW"
        },
        {
          "author": "Thefrank",
          "body": "wait. what. we have an RTM build now for net6?!\r\n@wfurt what failures were you getting? AFAIK: `SDK` needs nothing patched, `aspnetcore` only needs RIDs added and only for building for it and `installer` only needs RIDs and only for building/publishing.",
          "createdAt": "2021-09-30T22:36:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T22:36:51Z",
          "id": "IC_kwDODI9FZc43iWTC"
        },
        {
          "author": "wfurt",
          "body": "That build is essentially runtime/release/6.0 + few patches. Since RC2 is out, I think that may become RPM @Thefrank . \r\nThe runtime is cross-compiled on Linux and SDK is vanilla Linux/OSX. \r\nTo make that work I play tricks with versions. (and I did not modify NuGet config)\r\n\r\n```\r\n[furt@daemon /tmp/test]$ /tmp/sdk/dotnet build\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21460-01+8f208e609 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n/tmp/sdk/sdk/6.0.100-rc.1.21463.6/Roslyn/Microsoft.CSharp.Core.targets(75,5): error : It was not possible to find any compatible framework version [/tmp/test/test.csproj]\r\n/tmp/sdk/sdk/6.0.100-rc.1.21463.6/Roslyn/Microsoft.CSharp.Core.targets(75,5): error : The framework 'Microsoft.NETCore.App', version '6.0.0-rc.1.21451.13' (x64) was not found. [/tmp/test/test.csproj]\r\n/tmp/sdk/sdk/6.0.100-rc.1.21463.6/Roslyn/Microsoft.CSharp.Core.targets(75,5): error :   - The following frameworks were found: [/tmp/test/test.csproj]\r\n/tmp/sdk/sdk/6.0.100-rc.1.21463.6/Roslyn/Microsoft.CSharp.Core.targets(75,5): error :       6.0.0-ci at [/tmp/sdk/shared/Microsoft.NETCore.App] [/tmp/test/test.csproj]\r\n```\r\nmay goal here is to get to point when we can produce bootstrap SDK in some sustainable way. ",
          "createdAt": "2021-09-30T22:48:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-30T22:48:31Z",
          "id": "IC_kwDODI9FZc43iXX0"
        },
        {
          "author": "jasonpugsley",
          "body": "Can someone please review this set of changes to `dotnet/sdk` ? I would usually make these changes when playing with the `sdk` repo because they _looked_ necessary. If they are then I should really submit a PR 😁\r\n\r\n```diff\r\ndiff --git a/src/Layout/redist/targets/GetRuntimeInformation.targets b/src/Layout/redist/targets/GetRuntimeInformation.targets\r\nindex 1f47ee85a7..1cc1fac23b 100644\r\n--- a/src/Layout/redist/targets/GetRuntimeInformation.targets\r\n+++ b/src/Layout/redist/targets/GetRuntimeInformation.targets\r\n@@ -8,2 +8,3 @@\r\n       <OSName Condition=\" '$(OSName)' == '' AND $([MSBuild]::IsOSPlatform('OSX')) \">osx</OSName>\r\n+      <OSName Condition=\" '$(OSName)' == '' AND $([MSBuild]::IsOSPlatform('FreeBSD')) \">freebsd</OSName>\r\n       <OSName Condition=\" '$(OSName)' == '' \">linux</OSName>\r\ndiff --git a/src/Tasks/Microsoft.NET.Build.Tasks/GenerateBundle.cs b/src/Tasks/Microsoft.NET.Build.Tasks/GenerateBundle.cs\r\nindex 276beea68f..3ed2625525 100644\r\n--- a/src/Tasks/Microsoft.NET.Build.Tasks/GenerateBundle.cs\r\n+++ b/src/Tasks/Microsoft.NET.Build.Tasks/GenerateBundle.cs\r\n@@ -41,3 +41,4 @@ protected override void ExecuteCore()\r\n             OSPlatform targetOS = RuntimeIdentifier.StartsWith(\"win\") ? OSPlatform.Windows :\r\n-                                  RuntimeIdentifier.StartsWith(\"osx\") ? OSPlatform.OSX : OSPlatform.Linux;\r\n+                                  RuntimeIdentifier.StartsWith(\"osx\") ? OSPlatform.OSX :\r\n+                                  RuntimeIdentifier.StartsWith(\"freebsd\") ? OSPlatform.FreeBSD : OSPlatform.Linux;\r\n\r\ndiff --git a/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs b/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs\r\nindex b31e645cd4..7b397b49fa 100644\r\n--- a/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs\r\n+++ b/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs\r\n@@ -147,2 +147,3 @@ private bool ValidateCrossgen2Support()\r\n             {\r\n+                \"freebsd\" => \"freebsd\",\r\n                 \"linux\" => \"linux\",\r\n@@ -336,2 +337,13 @@ private bool GetCrossgenComponentsPaths()\r\n             }\r\n+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Create(\"FREEBSD\")))\r\n+            {\r\n+                // Only x64 supported for FreeBSD\r\n+                if (_targetArchitecture != Architecture.X64 || RuntimeInformation.OSArchitecture != Architecture.X64)\r\n+                {\r\n+                    return false;\r\n+                }\r\n+\r\n+                _crossgenTool.ToolPath = Path.Combine(_crossgenTool.PackagePath, \"tools\", \"crossgen\");\r\n+                _crossgenTool.ClrJitPath = Path.Combine(_crossgenTool.PackagePath, \"runtimes\", _targetRuntimeIdentifier, \"native\", \"libclrjit.so\");\r\n+            }\r\n             else\r\n@@ -364,2 +376,6 @@ private bool GetCrossgen2ComponentsPaths(bool version5)\r\n             }\r\n+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Create(\"FREEBSD\")))\r\n+            {\r\n+                toolFileName = \"crossgen2\";\r\n+            }\r\n             else\r\ndiff --git a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ComposeStore.targets b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ComposeStore.targets\r\nindex 696395c2cd..70856a62ce 100644\r\n--- a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ComposeStore.targets\r\n+++ b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ComposeStore.targets\r\n@@ -253,4 +253,4 @@ Copyright (c) .NET Foundation. All rights reserved.\r\n     <PropertyGroup Condition=\"'$(CreateProfilingSymbols)' == ''\">\r\n-      <!-- There is no support for profiling symbols on OSX -->\r\n-      <CreateProfilingSymbols Condition=\"$(RuntimeIdentifier.StartsWith('osx'))\">false</CreateProfilingSymbols>\r\n+      <!-- There is no support for profiling symbols on OSX or FreeBSD -->\r\n+      <CreateProfilingSymbols Condition=\"$(RuntimeIdentifier.StartsWith('osx')) or $(RuntimeIdentifier.StartsWith('freebsd'))\">false</CreateProfilingSymbols>\r\n       <CreateProfilingSymbols Condition=\"'$(CreateProfilingSymbols)' == ''\">true</CreateProfilingSymbols>\r\n```",
          "createdAt": "2021-10-01T04:02:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T04:02:34Z",
          "id": "IC_kwDODI9FZc43i1HI"
        },
        {
          "author": "jasonpugsley",
          "body": "Actually I don't think we even build the old `crossgen` binary anymore so I think I can retire my change in `GetCrossgenComponentsPaths()` now.",
          "createdAt": "2021-10-01T04:15:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T04:15:15Z",
          "id": "IC_kwDODI9FZc43i2li"
        },
        {
          "author": "Thefrank",
          "body": "@jasonpugsley I do something similar with `dotnet/runtime` (I think @sec did this too, not 100% sure) as a way to handle crossgen2 production and r2r. I never really looked at `SDK` because after net3.1 it never really needed to be built [whatever `dotnet/installer` grabbed worked well enough]. Does it need to be in both places? What would the advantage be of having it in `dotnet/sdk` vs `dotnet/runtime`?\r\n\r\nedit: crossgen1 is dead for net7 afaik. dunno if its even in net6",
          "createdAt": "2021-10-01T04:15:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-01T04:26:35Z",
                "user": "jasonpugsley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8jeWg=="
          },
          "updatedAt": "2021-10-01T04:15:56Z",
          "id": "IC_kwDODI9FZc43i2l-"
        },
        {
          "author": "jasonpugsley",
          "body": "Yeah, so much has changed on the journey from 3.0 to 6.0 and I haven't kept up with these dependency changes. I was hoping someone else might know 😂\r\nI would think `Microsoft.NET.Build.Tasks` should have knowledge of FreeBSD & crossgen2 though.",
          "createdAt": "2021-10-01T04:18:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T04:18:34Z",
          "id": "IC_kwDODI9FZc43i26B"
        },
        {
          "author": "josteink",
          "body": "> Since RC2 is out\r\n\r\nIt is? :open_mouth:  In that case, somebody needs to tell the MS web team :smile: \r\n\r\nhttps://dotnet.microsoft.com/download/dotnet/6.0",
          "createdAt": "2021-10-01T06:42:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T06:42:17Z",
          "id": "IC_kwDODI9FZc43jHlv"
        },
        {
          "author": "jasonpugsley",
          "body": "We are still not using crossgen here\r\nhttps://github.com/dotnet/runtime/blob/4963df91bdde00f6ce169b0e267a678e4e7aa221/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.props#L10-L11\r\nand here\r\nhttps://github.com/dotnet/runtime/blob/4963df91bdde00f6ce169b0e267a678e4e7aa221/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj#L21-L22\r\nWe might need to be in this list too.\r\nhttps://github.com/dotnet/runtime/blob/4963df91bdde00f6ce169b0e267a678e4e7aa221/src/coreclr/tools/aot/crossgen2/CommandLineOptions.cs#L192\r\n\r\nAnd there could also be some changes to the cross-build as I suggested here https://github.com/dotnet/runtime/pull/59331#issuecomment-922949883 to get Linux to use `--targetos:freebsd`\r\n\r\nI haven't set all this up to test and figure out dependencies so it would be fantastic to have someone from the internal team advise us here. It would be good if we can make all of the necessary changes in the correct repos at the same time or in the correct order so the CI build isn't affected.",
          "createdAt": "2021-10-01T06:57:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T06:57:31Z",
          "id": "IC_kwDODI9FZc43jJXr"
        },
        {
          "author": "josteink",
          "body": "> We are still not using crossgen here\r\n> \r\n> and here\r\n\r\nThat looks interesting. If we are sure all the other bits should be working as they should,  could try to disable those in runtimelabs and see what happens.\r\n\r\nIdeally we should have a FreeBSD CI-build somewhere... So we can actually see if something breaks. Is that something which would be hard to setup?\r\n\r\n**Edit:** I guess I have my own question answered right here: https://dnceng.visualstudio.com/public/_build?definitionId=841&_a=summary&repositoryFilter=370&branchFilter=128037\r\n\r\nIt doesn't actually build for FreeBSD though... But at least it's  :heavy_check_mark: green :smile: !\r\n\r\n> We might need to be in this list too.\r\n> \r\n> https://github.com/dotnet/runtime/blob/4963df91bdde00f6ce169b0e267a678e4e7aa221/src/coreclr/tools/aot/crossgen2/CommandLineOptions.cs#L192\r\n>\r\n> And there could also be some changes to the cross-build as I suggested here [#59331 (comment)](https://github.com/dotnet/runtime/pull/59331#issuecomment-922949883) to get Linux to use `--targetos:freebsd`\r\n\r\nAs I mentioned in that thread, that only seems to affect the command-line arguments presented to the user when they ask for help. That array doesn't seem to be used anywhere else in the code, and as such, not having `--targetos:freebsd` presented as an option, does not prevent it from actually being usable/working if supplied as a parameter.\r\n\r\n",
          "createdAt": "2021-10-01T07:05:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T08:33:58Z",
          "id": "IC_kwDODI9FZc43jKmk"
        },
        {
          "author": "jasonpugsley",
          "body": "ignore - posted too early",
          "createdAt": "2021-10-01T07:13:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T07:15:15Z",
          "id": "IC_kwDODI9FZc43jLx0"
        },
        {
          "author": "josteink",
          "body": "> Yes but I think we need --targetos:freebsd for cross-build from Linux so I think it needs to be in the list of valid OS's.\r\n\r\nI'm saying it doesn't. That variable is literally block-scoped in a section of the code whose only task is printing out usage-instructions to the people invoking the command incorrectly or with a `-h` argument. It cannot affect any code outside that block. It's literally not possible.\r\n\r\nIt is not at all used during actual parsing of command line parameters supplied to the the program.",
          "createdAt": "2021-10-01T07:15:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T07:16:30Z",
          "id": "IC_kwDODI9FZc43jMHD"
        },
        {
          "author": "jasonpugsley",
          "body": "This is what I meant to post. `_commandLineOptions.TargetOS.Equals(\"freebsd\"`\r\nhttps://github.com/dotnet/runtime/blob/4963df91bdde00f6ce169b0e267a678e4e7aa221/src/coreclr/tools/aot/crossgen2/Program.cs#L207-L219\r\n\r\nEdit: I guess I'm confused, if `freebsd` isn't in the list of valid OS's then how can you pass it in as a commandline option? I guess I need to read this in more detail 😁",
          "createdAt": "2021-10-01T07:18:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T07:25:10Z",
          "id": "IC_kwDODI9FZc43jMhf"
        },
        {
          "author": "jasonpugsley",
          "body": "Ok, I see what you mean. LOL. I had thought it was doing validation of the commandline as well. Thanks!",
          "createdAt": "2021-10-01T07:38:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-01T07:40:29Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8kmzg=="
          },
          "updatedAt": "2021-10-01T07:38:54Z",
          "id": "IC_kwDODI9FZc43jPgS"
        },
        {
          "author": "josteink",
          "body": "To be clear the code you quoted from `Program.cs` is the *actual* code validating the command-line arguments, and as you can see... FreeBSD is indeed a valid option there :smile: ",
          "createdAt": "2021-10-01T07:41:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T07:41:18Z",
          "id": "IC_kwDODI9FZc43jP1T"
        },
        {
          "author": "sec",
          "body": "I may be wrong, but after adding https://github.com/dotnet/runtime/commit/3c63559029276fea97633ea6115bcb9acb2cffe2 crossgen2 was producing valid output  (at least under FreeBSD during native compile) - before that it was throwing that exception - I say turn it on and let's see -:P",
          "createdAt": "2021-10-01T07:43:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T07:44:07Z",
          "id": "IC_kwDODI9FZc43jQL8"
        },
        {
          "author": "josteink",
          "body": "What's the worst that can happen? :laughing: \r\n\r\nhttps://github.com/dotnet/runtime/pull/59853",
          "createdAt": "2021-10-01T07:58:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-01T08:13:18Z",
                "user": "sec"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8k6MQ=="
          },
          "updatedAt": "2021-10-01T07:58:49Z",
          "id": "IC_kwDODI9FZc43jU7E"
        },
        {
          "author": "jasonpugsley",
          "body": "Well the worst happened 😂\r\nhttps://github.com/dotnet/runtime/pull/59853/checks?check_run_id=3765096339\r\n`/root/runtime/artifacts/bin/Crossgen2Tasks/Debug/net6.0/Microsoft.NET.CrossGen.targets(463,5): error : (NETCORE_ENGINEERING_TELEMETRY=Build) Error: Unable to load shared library 'jitinterface_x64' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libjitinterface_x64: cannot open shared object file: No such file or directory`\r\n\r\nThis is like a jigsaw puzzle",
          "createdAt": "2021-10-01T08:52:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2021-10-01T09:53:05Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8l1jQ=="
          },
          "updatedAt": "2021-10-01T08:52:11Z",
          "id": "IC_kwDODI9FZc43jeHc"
        },
        {
          "author": "jasonpugsley",
          "body": "I think Linux is trying to use the just-built FreeBSD binary instead of using it's own crossgen2 restored from a feed.",
          "createdAt": "2021-10-01T08:53:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-01T08:53:50Z",
          "id": "IC_kwDODI9FZc43jeWA"
        },
        {
          "author": "Thefrank",
          "body": "I swear I am the only person not in a Europe timezone in this thread haha.\r\nI have news however! You can totally shoehorn the build process into the ports system. This falls more  under the \"500 Don'ts\" and none of the \"10 Do's\" (reference: https://www.youtube.com/watch?v=NRvaR4fqrYY)\r\n```\r\nAppHost.Bundle.Tests -> /usr/ports/lang/dotnet6/work/runtime/artifacts/bin/AppHost.Bundle.Tests/Release/net6.0/AppHost.Bundle.Tests.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:31:40.67\r\n```\r\nI still can't figure out why the source tarballs don't build but the `git clone` / `git checkout` works fine. I should have more time this weekend to look into how source build does a completely offline build.\r\n\r\nEdit: It does make a viable SDK\r\n```\r\nroot@radport:/usr/ports/lang/dotnet6/work/installer/artifacts/packages/Release/Shipping/test # ./dotnet run --project=./newtest/newtest.csproj\r\nHello, World!\r\n```",
          "createdAt": "2021-10-01T21:57:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-02T00:28:21Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-02T03:50:27Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-02T03:56:23Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB8sp3A=="
          },
          "updatedAt": "2021-10-02T00:26:43Z",
          "id": "IC_kwDODI9FZc43llfX"
        },
        {
          "author": "wfurt",
          "body": "BTW any thoughts on https://github.com/dotnet/runtime/issues/3320 ? \r\nSeems like we need now at least 12.2 so it feels like it would be nice if the `dotnet --info` shows more than just `12`. \r\nIf we don't care, we should probably close it. ",
          "createdAt": "2021-10-02T00:29:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T00:29:47Z",
          "id": "IC_kwDODI9FZc43lw3l"
        },
        {
          "author": "Thefrank",
          "body": "It matters quite a bit actually. As for example, something built under 12.1 is not guaranteed to work on 12.2. Symbol versioning can usually handle it, but the symbol has to exist.",
          "createdAt": "2021-10-02T00:49:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T00:49:55Z",
          "id": "IC_kwDODI9FZc43lxsx"
        },
        {
          "author": "wfurt",
          "body": "I feel it may be then something to take for 6.0 as it may be more difficult later. I can take a look next week unless somebody want to jump in. But I'm out for the weekend with no tech & internet.",
          "createdAt": "2021-10-02T01:44:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T01:44:47Z",
          "id": "IC_kwDODI9FZc43l0ES"
        },
        {
          "author": "Thefrank",
          "body": "@wfurt none of the FreeBSD commits made the cutoff date for 6.0 so we cherry-pick or patch for them. It will be just another thing (but very welcome thing!) to patch :)\r\n\r\nProgress for source build: `/p:ArcadeBuildFromSource=true` can be passed to any of the repo's `./build.sh` to trigger a source build. This is an amazing toggle! This would work for the ports system, but it hits some snags: \r\n- it still uses `git clone` to clone the repo \r\n -issue? @arrowd pointed out that networking is unavailable(?) during the `do-build` phase. I have my ports system in a standard jail and not a `poudriere` jail so I have not experienced this.  This is a show-stopper if the official ports system runs under the same system.\r\n- it clones from main repo and does not appear to have a way of applying patches for net6 (yet?)\r\n  - there are a ton of patches for net5: https://github.com/dotnet/source-build/tree/release/5.0/patches\r\n- it runs into the same problem of wanting to download the SDK from an official source via the `dotnet-install.sh` script\r\n\r\nSo, the later two issues might able work-aroundable. Unsure of the first issue as I have no experience with the `poudriere` system",
          "createdAt": "2021-10-02T02:14:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T02:14:18Z",
          "id": "IC_kwDODI9FZc43l1e8"
        },
        {
          "author": "nkosi23",
          "body": "Regarding the first issue of needing network access during build, it is actually possible for the ports team to enable network access for some packages at build-time using the ALLOW_NETWORKING_PACKAGES configuration variable of poudriere [as per the documentation of poudriere](https://github.com/freebsd/poudriere/blob/5ca4ed748084c10d69f4073c0504a5444e0cf580/src/etc/poudriere.conf.sample#L166) . Since we know that networking access is already allowed by the official port build system for make fetch, this is a viable option that the ports team should accept.\r\n\r\nTo be sure I am not a port committer and have zero influence over there, but I'd guess they may already have whitelisted some packages and you can hardly have an upstream more trustworthy than Microsoft.",
          "createdAt": "2021-10-02T04:15:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-02T14:19:51Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8tkEg=="
          },
          "updatedAt": "2021-10-02T04:18:40Z",
          "id": "IC_kwDODI9FZc43l4pY"
        },
        {
          "author": "nkosi23",
          "body": "I have tried running the prebuilt binaries in the @Thefrank's MEGA folder and the latest release from Servarr/dotnet-bsd but I get this [cannot open libhostfxr.so error for both](https://github.com/Servarr/dotnet-bsd/issues/7) (I use FreeBSD 12.2). Does anyone have a zip archive with everything working out-of-the-box? I'm trying to get the ball rolling asap to develop a blazor app for a client. Also I'd love to have some explanation on where the NuGet packages (NETCore.App.Host, NETCore.App.Runtime and ASPNetCore.App.Runtime) are supposed to be put.",
          "createdAt": "2021-10-02T20:24:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T20:25:14Z",
          "id": "IC_kwDODI9FZc43maQD"
        },
        {
          "author": "Thefrank",
          "body": "@nkosi23 don't use the stuff from the MEGA it is super out of date this is is current: https://github.com/Thefrank/dotnet-freebsd-crossbuild that being said it sounds like you are missing dependencies for it (icu, libinotify, libunwind, libiconv, are the bare minimum AFAIK. for network: ca_root_nss, openssl, krb5 need to be included). The NuGet packages can go anywhere you want to place them but you will need to tell your NuGet where that place is :)",
          "createdAt": "2021-10-02T21:18:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-10-02T21:33:19Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB8uPbw=="
          },
          "updatedAt": "2021-10-02T21:21:38Z",
          "id": "IC_kwDODI9FZc43mbu0"
        },
        {
          "author": "nkosi23",
          "body": "@Thefrank Are you able to restore NuGet packages? I have been able to get the SDK working thanks to your help and @sec's assistance, but after creating a project template NuGet restore fails with [this issue](https://github.com/Servarr/dotnet-bsd/issues/8).\r\n\r\n> Package 'Microsoft.Extensions.Logging 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamping certificate is not trusted by the trust provider.\r\n>   Package 'Microsoft.Extensions.Logging 5.0.0' from source 'https://api.nuget.org/v3/index.json': \r\n>   Signature type: Repository\r\n>   Package 'Microsoft.Extensions.Logging 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Subject Name: CN=NuGet.org Repository by Microsoft, O=NuGet.org Repository by Microsoft, L=Redmond, S=Washington, C=US\r\n>   Package 'Microsoft.Extensions.Logging 5.0.0' from source 'https://api.nuget.org/v3/index.json':   SHA256 hash: 0E5F38F57DC1BCC806D8494F4F90FBCEDD988B46760709CBEEC6F4219AA6157D\r\n>   Package 'Microsoft.Extensions.Logging 5.0.0' from source 'https://api.nuget.org/v3/index.json':   **Valid from: 4/10/2018 2:00:00 AM to 4/14/2021 2:00:00 PM**\r\n\r\nThis error is produced for all packages needing to be restored.",
          "createdAt": "2021-10-02T22:11:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T22:29:59Z",
          "id": "IC_kwDODI9FZc43mc_U"
        },
        {
          "author": "Thefrank",
          "body": "@nkosi23 try this: https://github.com/dotnet/runtime/issues/14537#issuecomment-851286936 the cert that it wants to use is expired also make sure that ca_root_nss is up to date",
          "createdAt": "2021-10-02T22:34:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T23:06:38Z",
          "id": "IC_kwDODI9FZc43mdeS"
        },
        {
          "author": "nkosi23",
          "body": "@Thefrank Thanks for the pointers! \r\n\r\nUnfortunately, the link you posted to the comment does not work I'm afraid (I even tried to load all comments first before clicking the link but with no success). \r\n\r\nAs far as ca_root_nss, I have already installed and upgraded all the dependencies you mentioned in your previous post (including ca_root_nss) :/",
          "createdAt": "2021-10-02T22:55:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T22:57:54Z",
          "id": "IC_kwDODI9FZc43md5w"
        },
        {
          "author": "Thefrank",
          "body": "Try it again, not sure how that extra \"6\" got in there",
          "createdAt": "2021-10-02T23:07:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T23:07:13Z",
          "id": "IC_kwDODI9FZc43meKE"
        },
        {
          "author": "nkosi23",
          "body": "@Thefrank Adding the certificate manually fixed it!!! Thanks a lot!",
          "createdAt": "2021-10-02T23:12:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-02T23:12:38Z",
          "id": "IC_kwDODI9FZc43meRC"
        },
        {
          "author": "Thefrank",
          "body": "~To anyone else making a native build (@sec maybe others?): Are you having problems with the final SDK tarball? Mine is wrong.~\r\n\r\n~`sdk/SDKVERSION/FSharp/` contains two folders that are out of place: `GNUSparseFile.0` (containing `FSharp.Compiler.Service.dll`) and `PaxHeader` (containing a `FSharp.Compiler.Service.dll`).~\r\n\r\n~This does not happen with the crossbuilt one. I am not sure what is causing this but `GNUtar` and `bsdtar` might be different enough to cause this (again, I have no idea HOW though)~\r\n\r\nEDIT: jail, not `tar` or installer issue.",
          "createdAt": "2021-10-04T02:48:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T09:22:50Z",
          "id": "IC_kwDODI9FZc43nfwh"
        },
        {
          "author": "sec",
          "body": "@Thefrank How did you found out the issue? I was comparing file list of official SDK vs the one that I built and they were the same (only missing two files were some dev cert's, but I ignored that), but looking for the file:\r\n```\r\nsec@vm12:~/build1 % find . -name FSharp.Compiler.Service.dll\r\n./sdk/6.0.100-rc.1.21458.32/FSharp/FSharp.Compiler.Service.dll\r\n\r\nsec@vm12:~/build1 % tar tf ../dotnet-core-freebsd-source-build/installer/artifacts/packages/Release/Shipping/dotnet-sdk-6.0.100-rc.1.21458.32-freebsd-x64.tar.gz | grep 'FSharp.Compiler.Service.dll'\r\n./sdk/6.0.100-rc.1.21458.32/FSharp/FSharp.Compiler.Service.dll\r\n```\r\n\r\nBuild done on 12.2",
          "createdAt": "2021-10-04T08:40:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T08:41:46Z",
          "id": "IC_kwDODI9FZc43oJTs"
        },
        {
          "author": "Thefrank",
          "body": "welp, im up late anyways so...\r\n\r\n@sec the actual issue (thankfully) seems unrelated to `tar` or the tarball itself, maybe the jail? \r\nUnpacking the tarball in the jail (12.2) where I built it creates those odd items (e.g.,`GNUSparseFile.0`)\r\nUnpacking the tarball in fresh jail (12.2) and the behavior and structure are correct. No odd items.\r\nUnpacking the tarball in WINDOWS has the same odd behavior with both 7zip and Winrar.\r\n\r\nThe only thing that I can think of now is that the jail I used to build the native SDK has been upgraded a number of times over the years to keep it current maybe something broke there.\r\nThis is also where I stop troubleshooting the issue and just make a new jail. \r\nI also don't really care why Windows programs can't unpack a 20 to 40 year old file format correctly.",
          "createdAt": "2021-10-04T09:21:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T09:21:56Z",
          "id": "IC_kwDODI9FZc43oRQk"
        },
        {
          "author": "arrowd",
          "body": "> The only thing that I can think of now is that the jail I used to build the native SDK has been upgraded a number of times over the years to keep it current maybe something broke there.\r\n\r\nThis is why I followed Ports-based approach. By building with Poudriere it is ensured that the jail is always pristine. Unfortunately, I got carried out by different things for a while.",
          "createdAt": "2021-10-04T10:02:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T10:02:31Z",
          "id": "IC_kwDODI9FZc43oYKL"
        },
        {
          "author": "sec",
          "body": "@Thefrank what the `tar --version` in jail give? You know, that starting with some build of Windows, you also have tar by default? I checked and it's `bsdtar` :) ",
          "createdAt": "2021-10-04T18:28:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T18:28:38Z",
          "id": "IC_kwDODI9FZc43p8vu"
        },
        {
          "author": "Thefrank",
          "body": "@sec:\r\nwindows bsdtar: no issues\r\nwindows 7zip: wrong\r\nwindows winrar: wrong\r\nfreebsd bsdtar old_port_jail_I_nuked_last_night: wrong\r\nfreebsd bsdtar any_new_jail_from_10_to_12.2: no issues\r\nlinux gnutar: no issues\r\n\r\nproblem resolved with nuke. note to self going forward: exhaust /ALL/ options first",
          "createdAt": "2021-10-04T21:05:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-04T21:05:24Z",
          "id": "IC_kwDODI9FZc43qXy0"
        },
        {
          "author": "nkosi23",
          "body": "I've been trying set up a .NET 5 development environment for FreeBSD (which is one of the goals of this port - people also use FreeBSD for development).\r\n\r\nI've been using vscode and omnisharp as a daily driver to build applications targeting mono (net4xx) for over a year now (with some patch work needed since the official csharp extension tries to download platform dependent omnisharp binaries that do not exist on their server for freebsd, so I had to build a custom version of the extension bypassing the download stage for freebsd).\r\n\r\nNow as far as .NET 5 is concerned, [the minimum mono version required by omnisharp to use the .NET 5 Sdk is mono 6.10](https://www.strathweb.com/2020/03/net-5-preview-support-in-omnisharp-and-c-extension-for-vs-code/) but we do not have that in the ports tree (last version in the ports tree is mono 6.8). I have just opened a ticket to track the porting effort for mono6.12 in the mono repo, so this is a call to anyone already having a work in progress for a mono 6.10 or 6.12 port to [please raise your hands in that issue](https://github.com/mono/mono/issues/21236). The contribution could be as simple as documenting the build strategy followed by the current mono5.1 and mono6.8 ports.\r\n\r\nI am posting this here as many people having skin in the .NET-on-FreeBSD game are watching this issue (and it is closely related to the present work). \r\n\r\nFor those familiar with FreeBSD but not familiar with .NET development, Omnisharp is the language server providing IDE features for .NET projects, and it uses mono behind the scenes and has a hard dependency on mono >= 6.10 for .NET 5 support. So if we port .NET 5 without upgrading mono, there will be no developer environment available on FreeBSD. With the present port of dotnet, building projects works fine, however without omnisharp there is no proper development environment to develop applications on FreeBSD. \r\n\r\nBeyond preventing FreeBSD users from developing on .NET using FreeBSD, this situation also creates a requirement to have a linux machine having a proper development environment to port dotnet applications to FreeBSD (sometimes patches are non-trivial), which is neither practical or sustainable (and would limit the usefulness of the .NET 5 port). Even for trivial patches, it is more convenient to have an IDE to test a patch.\r\n\r\nI'd suggest discussing the mono porting effort in the issue I have linked above to avoid hijacking this thread.",
          "createdAt": "2021-10-05T21:22:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-05T22:33:58Z",
          "id": "IC_kwDODI9FZc43uOQA"
        },
        {
          "author": "feld",
          "body": "Holy 🤯 I can't believe progress is finally happening in the mono/dotNet world for FreeBSD.\r\n\r\n> for all the FreeBSD enthusiast, I'm trying to make a case to make regular FreeBSD builds and publish packages. It would be great if everybody can share their stories and use case for .NET on FreeBSD. If you can, please shoot me email to my GH address.\r\n\r\nI know of one company using a very complex FreeBSD environment for running malware analysis and Mono is a key component for this.\r\n\r\n> To be sure I am not a port committer and have zero influence over there, but I'd guess they may already have whitelisted some packages and you can hardly have an upstream more trustworthy than Microsoft.\r\n\r\nI'm not super active anymore but the reason for disallowing networking is for security and build reproducibility. If Microsoft ever changes something with those files being fetched at build time it creates a huge issue; equally, if Microsoft's infra is ever compromised and those payloads are tampered with we'll never know. FreeBSD has actually detected malware infected tarballs on compromised mirrors before due to our strict checksumming of all build artifacts. I can't speak to the current policy around permitting some ports to have networking access.\r\n\r\nCreating the Mono port and getting it into the FreeBSD ports tree is the easy part. If it builds easily, even with a a lot of cherry picked patches, we can get it published.",
          "createdAt": "2021-10-07T15:23:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-07T15:23:30Z",
          "id": "IC_kwDODI9FZc435zWe"
        },
        {
          "author": "wfurt",
          "body": "with more help from @safern, we got packages published for freebsd \r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=dotnet-experimental\r\n(put freebsd to filter field)\r\nMatching runtime is published to Azure blob https://dev.azure.com/dnceng/_apis/resources/Containers/8402840/BlobArtifacts?itemPath=BlobArtifacts%2Fdotnet-runtime-6.0.0-fbsd.21506.2-freebsd-x64.tar.gz\r\n\r\nThat can be consumed on FreeBSD as well it once again allows to build FreeBSD apps on other (supported) OSes.\r\nTo do that, first add entry to `NuGet.Config`\r\n```\r\n<add key=\"dotnet-labs\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json\" />\r\n``` \r\n\r\nThan on Linux (and other supported OS)\r\n```\r\nfurt@ubu20:/tmp/foo$ dotnet new console\r\nfurt@ubu20:/tmp/foo$ dotnet publish -r freebsd-x64\r\nfurt@ubu20:/tmp/foo$ file /tmp/foo/bin/Debug/net6.0/freebsd-x64/publish/foo\r\n/tmp/foo/bin/Debug/net6.0/freebsd-x64/publish/foo: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 12.2, FreeBSD-style, BuildID[sha1]=9c75655afa10ef04762735ffdb4b42619935e596, stripped\r\n```\r\n\r\nwell, almost. There are still few hoops to jump through:\r\nSince the build numbers are disjoined with official builds it looks for wrong one. I fixed this with adding \r\n`<RuntimeFrameworkVersion>6.0.0-fbsd.21506.2</RuntimeFrameworkVersion>` to my `*.csproj`.\r\n\r\nThe other problem is that the official SDK does not have FreeBSD RID. That can be done via text processing on `Microsoft.NETCoreSdk.BundledVersions.props` -> `s/osx-x64/freebsd-x64` and removing reference to `Microsoft.AspNetCore.App`\r\n\r\nI'm thinking about incorporating https://github.com/Thefrank/dotnet-freebsd-crossbuild to the build Pipeline and publish whole FreeBSD SDK to Azure blob storage. That would produce usable semi-official SDK.\r\nThis is conceptually very similar, the difference is that people can consume packages directly from NuGet. (and symbols for debug)\r\nAny thoughts on that @Thefrank ?\r\n\r\nBTW are there any changes we need for `source-build`? I know we can probably handle things via patches but that is hassle IMHO. Is there anything blocking the port work at the moment? I tried to skim through the conversation above but I may miss something. \r\n\r\n",
          "createdAt": "2021-10-07T23:06:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-10-08T00:55:51Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-10-08T03:24:13Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB9fWbQ=="
          },
          "updatedAt": "2021-10-07T23:06:39Z",
          "id": "IC_kwDODI9FZc437Aqc"
        },
        {
          "author": "Thefrank",
          "body": "@wfurt If you want a nice build pipeline that is already Azure check out @ta264's amazing work here: https://github.com/Servarr/dotnet-bsd/. If you still want to use my script after seeing that then that is up to you ;)\r\nBasically:\r\n- My repo -> all-in-one crossbuild script for people that want a local copy or want to tinker around\r\n- @ta264 -> AzureDEVOPs crossbuild setup for those that need it in their build pipeline or want more automation\r\n- @sec -> collection of scripts that do the heavy lifting involved in native generation of the SDK; this honestly looks like a good starting point for diehard source-build people using FreeBSD\r\n\r\nNo wrong answers on what to pick just depends on usage case really.\r\n\r\nEDIT: `source-build`... not 100% sure what is needed there, but from when I last glanced at it 1) linux-centric, but seems to have some support for oither OSes 2) doesn't have anything for net6 3) does not appear to have a 100% offline build path",
          "createdAt": "2021-10-07T23:17:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-07T23:24:38Z",
          "id": "IC_kwDODI9FZc437BzV"
        },
        {
          "author": "Thefrank",
          "body": "well, so we have RC2 tags in most places now, but no RC2 in https://dotnetcli.azureedge.net/dotnet/Runtime/\r\n```\r\ndotnet-install: Downloading primary link https://dotnetcli.azureedge.net/dotnet/Runtime/6.0.0-rc.2.21480.5/dotnet-runtime-6.0.0-rc.2.21480.5-linux-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: The resource at https://dotnetcli.azureedge.net/dotnet/Runtime/6.0.0-rc.2.21480.5/dotnet-runtime-6.0.0-rc.2.21480.5-linux-x64.tar.gz is not available.\r\n```\r\nso currently, only Runtime can be built. I will wait a day or so and try again",
          "createdAt": "2021-10-10T00:08:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-10T00:08:03Z",
          "id": "IC_kwDODI9FZc43_cvq"
        },
        {
          "author": "sec",
          "body": "> well, so we have RC2 tags in most places now, but no RC2 in https://dotnetcli.azureedge.net/dotnet/Runtime/\r\n> \r\n> ```\r\n> dotnet-install: Downloading primary link https://dotnetcli.azureedge.net/dotnet/Runtime/6.0.0-rc.2.21480.5/dotnet-runtime-6.0.0-rc.2.21480.5-linux-x64.tar.gz\r\n> curl: (22) The requested URL returned error: 404 \r\n> dotnet-install: The resource at https://dotnetcli.azureedge.net/dotnet/Runtime/6.0.0-rc.2.21480.5/dotnet-runtime-6.0.0-rc.2.21480.5-linux-x64.tar.gz is not available.\r\n> ```\r\n> \r\n> so currently, only Runtime can be built. I will wait a day or so and try again\r\n\r\nSo I tried to build rc-2, under FreeBSD, using rc-1 as bootstrap :)\r\nruntime went fine (with the same patches as for rc-1), then tried aspnetcore, failed with:\r\n```\r\n/usr/home/sec/dotnet-core-freebsd-source-build/aspnetcore/src/Identity/UI/src/Microsoft.AspNetCore.Identity.UI.csproj(96,70): error MSB4064: The \"PackagePathPrefix\" parameter is not supported by the \"GenerateStaticWebAsssetsPropsFile\" task loaded from assembly: Microsoft.NET.Sdk.Razor.Tasks, Version=6.0.4.45871, Culture=neutral, PublicKeyToken=31bf3856ad364e35 from the path: /usr/home/sec/dotnet-core-freebsd-source-build/aspnetcore/.dotnet/sdk/6.0.100-rc.1.21458.32/Sdks/Microsoft.NET.Sdk.Razor/tasks/net6.0/Microsoft.NET.Sdk.Razor.Tasks.dll. Verify that the parameter exists on the task, the <UsingTask> points to the correct assembly, and it is a settable public instance property.\r\n/usr/home/sec/dotnet-core-freebsd-source-build/aspnetcore/src/Identity/UI/src/Microsoft.AspNetCore.Identity.UI.csproj(96,5): error MSB4063: The \"GenerateStaticWebAsssetsPropsFile\" task could not be initialized with its input parameters.\r\n```\r\n\r\nI was thinking, might be related to fact, that aspnetcore, wants rc-2 to build and I give rc-1. So I tried to build installer repo (skipped local SDK repo build, as it contains no patches, so I assume it's not needed, as the files it needs can be downloaded by installer repo), but this one also want to download rc-2, but I tried with rc-1 and failed with strange error:\r\n```\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj : error NU1102: Unable to find package Microsoft.NET.Workload.Mono.ToolChain.Manifest-6.0.100 with version (= 6.0.0-rc.2.21480.5) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/Microsoft.DotNet.Cli.sln]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj : error NU1102:   - Found 756 version(s) in dotnet6 [ Nearest version: 6.0.0-rtm.21470.18 ] [/usr/home/sec/dotnet-core-freebsd-source-build/installer/Microsoft.DotNet.Cli.sln]\r\n```\r\n\r\nI see that nupkg is available, so downloading it by hand, next error was about missing `https://dotnetcli.blob.core.windows.net/dotnet/Sdk/6.0.100-rc.2.21505.11/dotnet-toolset-internal-6.0.100-rc.2.21505.11.zip`\r\n\r\nThis looks like SDK output, that I wanted to skip :) git checkout and getting it to build, also failed:\r\n```\r\n  Writing file: /usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/redist/Release/net6.0/vstest.console.runtimeconfig.json\r\n  ArgumentsReflector -> /usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/ArgumentForwarding.Tests/Release/\r\n  6.0.100-rc.1.21458.32\r\n  It was not possible to find any compatible framework version\r\n  The framework 'Microsoft.NETCore.App', version '6.0.0-rtm.21472.13' (x64) was not found.\r\n    - The following frameworks were found:\r\n        6.0.0-rc.1.21451.13 at [/usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/redist/Release/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n  You can resolve the problem by installing the specified framework and/or SDK.\r\n\r\n  The specified framework can be found at:\r\n    - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=6.0.0-rtm.21472.13&arch=x64&rid=freebsd.12-x64\r\n/usr/home/sec/dotnet-core-freebsd-source-build/sdk/src/Layout/redist/targets/OverlaySdkOnLKG.targets(63,5): error MSB3073: The command \"/usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/redist/Release/dotnet/dotnet new\" exited with code 150. [/usr/home/sec/dotnet-core-freebsd-source-build/sdk/src/Layout/redist/redist.csproj]\r\n##vso[task.logissue type=error;sourcepath=/usr/home/sec/dotnet-core-freebsd-source-build/sdk/src/Layout/redist/targets/OverlaySdkOnLKG.targets;linenumber=63;columnnumber=5;code=MSB3073;](NETCORE_ENGINEERING_TELEMETRY=Build) The command \"/usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/redist/Release/dotnet/dotnet new\" exited with code 150.\r\n\r\nBuild FAILED.\r\n\r\n/usr/home/sec/dotnet-core-freebsd-source-build/sdk/src/Layout/redist/targets/OverlaySdkOnLKG.targets(63,5): error MSB3073: The command \"/usr/home/sec/dotnet-core-freebsd-source-build/sdk/artifacts/bin/redist/Release/dotnet/dotnet new\" exited with code 150. [/usr/home/sec/dotnet-core-freebsd-source-build/sdk/src/Layout/redist/redist.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\nWhy it's looking for rtm?\r\n\r\nIf FreeBSD can't make it, I did the SDK build under Linux, which downloaded rtm runtime fine (which branch is this? can't see any 6.0-rtm) and prodcded needed zip file... with `rtm` in name :) This is fine, rename to rc-2 and next error was about again some missing nuget (Microsoft.DotNet.Common.ProjectTemplates.6.0, no rc-2, want rtm. why? rc-2 is available at nuget.org), downloaded by hand, build again please.\r\n\r\nIt failed with bunch of weird errors (related to crossgen if you ask me):\r\n```\r\nBuild FAILED.\r\n\r\n       \"/usr/home/sec/dotnet-core-freebsd-source-build/installer/.nuget/packages/microsoft.dotnet.arcade.sdk/6.0.0-beta.21473.5/tools/Build.proj\" (default target) (1) ->\r\n       \"/usr/home/sec/dotnet-core-freebsd-source-build/installer/Microsoft.DotNet.Cli.sln\" (Build;Pack target) (3:2) ->\r\n       \"/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj\" (default target) (4:6) ->\r\n       (CrossgenLayout target) ->\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error : Unhandled exception. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception. [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadByName(String libraryName, QCallAssembly callingAssembly, Boolean hasDllImportSearchPathFlag, UInt32 dllImportSearchPathFlag, Boolean throwOnError) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadLibraryByName(String libraryName, Assembly assembly, Nullable`1 searchPath, Boolean throwOnError) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.Load(String libraryName, Assembly assembly, Nullable`1 searchPath) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at Internal.JitInterface.JitConfigProvider.<>c__DisplayClass5_0.<Initialize>b__0(String libName, Assembly assembly, Nullable`1 searchPath) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadLibraryCallbackStub(String libraryName, Assembly assembly, Boolean hasDllImportSearchPathFlags, UInt32 dllImportSearchPathFlags) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at Internal.JitInterface.CorInfoImpl.AllocException(String message, Int32 messageLength) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at Internal.JitInterface.CorInfoImpl.AllocException(Exception ex) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN* pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n\r\n    0 Warning(s)\r\n    9 Error(s)\r\n```\r\n\r\nThat's not good, I think (that part was working fine with rc-1 with crossgen enabled) - no idea how to debug this - I can provide output log or something if anyone is interested.\r\nLooking at stacktrace, it's trying to load some library, which is not found (or maybe name is wrong) - any way to trace that call somehow?\r\n\r\nRunning build again with crossgen disabled (`/p:CrossgenOutput=false`), produced SDK artifact - feeding that to aspnetcore - build done without errors.\r\nPutting that into installer, to rebuild with aspnetcore included and:\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-rc.2.21505.57\r\n Commit:    ab39070116\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd.12-x64\r\n Base Path:   /usr/home/sec/abc/sdk/6.0.100-rc.2.21505.57/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-rc.2.21480.5\r\n  Commit:  6b11d64e7e\r\n\r\n.NET SDKs installed:\r\n  6.0.100-rc.2.21505.57 [/usr/home/sec/abc/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-rc.2.21480.10 [/usr/home/sec/abc/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.2.21480.5 [/usr/home/sec/abc/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n`dotnew new mvc` and `dotnet run` works fine :)\r\n\r\nInitial plan was to spent half an hour with rc-2, but that took a little bit longer :)\r\n\r\nIs rc-2 not ready, yet, to be build?\r\nWhy some of the repos/scripts are looking for rtm packages?\r\nUsing output from runtime and bootstrap SDK, can SDK be built (I think it should, looking at how it's done under Linux logs)?\r\nMaybe some of the error I hit, were becuase of my `exit 0` hack at dotnet-install.sh? :)",
          "createdAt": "2021-10-12T19:22:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-12T19:22:51Z",
          "id": "IC_kwDODI9FZc44G7KH"
        },
        {
          "author": "Thefrank",
          "body": "rc-2 is not actually fully published. I was unable to even start a crossbuild due to missing runtime (same aspnetcore stage failure). I THINK we should see either an RC2 or RTM shortly.\r\n\r\nOne day later edit: NOW we have full RC2 tags...installer doesn't build though. `Unable to find package Microsoft.NET.Workload.Mono.ToolChain.Manifest-6.0.100 with version (= 6.0.0-rc.2.21480.5)` `Found 760 version(s) in dotnet6 [ Nearest version: 6.0.0-rtm.21470.18 ]`\r\nEven later edit: `https://globalcdn.nuget.org/packages/microsoft.net.workload.mono.toolchain.manifest-6.0.100.6.0.0-rc.2.21480.5.nupkg` has the missing nuget pkg. Now all that is missing is `dotnet-toolset-internal-6.0.100-rc.2.21505.11.zip`\r\n\r\nfinal(?) edit: sdk@v6.0.100-rc.2.21505.11 outputs `6.0.100-rtm.21505.11` so building the SDK to get the missing zip is out. I guess ill wait for it to eventually show up at `https://dotnetcli.blob.core.windows.net/dotnet/Sdk/6.0.100-rc.2.21505.11/dotnet-toolset-internal-6.0.100-rc.2.21505.11.zip`\r\n\r\nmeh, got creative with the `dotnet-toolset-internal` numbering. YOLO: https://github.com/Thefrank/dotnet-freebsd-crossbuild/releases/tag/v6.0.100-rc.2.21505.57",
          "createdAt": "2021-10-12T19:34:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-14T01:52:14Z",
          "id": "IC_kwDODI9FZc44HAFX"
        },
        {
          "author": "sec",
          "body": "If anyone care, I got some time and updated my native build scripts/info for rc-2 and also did successful native build under FreeBSD 13 :) (also with crossgen enabled, it didn't produced the errors I got before, wonder why, maybe becuase this time I built SDK under FreeBSD and not under Linux).",
          "createdAt": "2021-10-28T12:56:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-28T17:04:22Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-29T06:25:43Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-30T07:42:34Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCAiJ7A=="
          },
          "updatedAt": "2021-10-28T12:58:33Z",
          "id": "IC_kwDODI9FZc442hnw"
        },
        {
          "author": "lukeb1961",
          "body": "anybody new, the above is [this](https://github.com/sec/dotnet-core-freebsd-source-build) \r\nJust did a clean 13 ISO and built/installed dotnet using sec's scripts. Worked perfectly.",
          "createdAt": "2021-10-30T06:11:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-30T06:12:36Z",
          "id": "IC_kwDODI9FZc447ooh"
        },
        {
          "author": "Thefrank",
          "body": "We should be getting RTM/GA in about a week and that should give us a good idea of what patches will be needed for the lifetime of net6",
          "createdAt": "2021-10-30T07:55:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-30T08:30:19Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCAiOUA=="
          },
          "updatedAt": "2021-10-30T07:55:13Z",
          "id": "IC_kwDODI9FZc447rdx"
        },
        {
          "author": "josteink",
          "body": "In other news, the last remaining patches and PRs have been merged upstream!\r\n\r\nWhile late for 6.0 RTM it still means that starting with .net 7.0 we could in theory be getting an official release? At least we’re a lot closer to that than we’ve ever been before 🤠",
          "createdAt": "2021-10-30T16:09:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-10-30T16:45:21Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2021-10-31T05:54:04Z",
                "user": "ghuntley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-11-01T02:30:56Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2021-11-02T09:45:22Z",
                "user": "sec"
              },
              {
                "content": "HEART",
                "createdAt": "2021-11-02T20:43:44Z",
                "user": "michael-o"
              },
              {
                "content": "HEART",
                "createdAt": "2021-11-10T02:23:05Z",
                "user": "softworkz"
              },
              {
                "content": "HEART",
                "createdAt": "2021-11-14T20:38:03Z",
                "user": "dpen2000"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHOCCc0Zg=="
          },
          "updatedAt": "2021-10-30T16:09:21Z",
          "id": "IC_kwDODI9FZc448jlx"
        },
        {
          "author": "lukeb1961",
          "body": "PS /root> $IsFreeBSD\r\nTrue\r\nPS /root> $PSversionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.10\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.10-137-g00d39fa4d5f562f3ee03df7f0d0355501eb1af4a\r\nOS                             FreeBSD 13.0-RELEASE FreeBSD 13.0-RELEASE #0 releng/13.0-n244733-ea31abc261f: Fri Apr  9 04:24:09 UTC 2021     root@releng1.nyi.fre…\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nWooHoo!",
          "createdAt": "2021-11-03T23:14:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2021-11-04T02:23:36Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-11-04T05:34:08Z",
                "user": "josteink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCBH2lA=="
          },
          "updatedAt": "2021-11-03T23:14:26Z",
          "id": "IC_kwDODI9FZc45PMm8"
        },
        {
          "author": "Thefrank",
          "body": "tags are early for RTM so: https://github.com/Thefrank/dotnet-freebsd-crossbuild/releases/tag/v6.0.100-rtm.21527.11\r\nnative: EDIT: looks like @sec beat me to it :)",
          "createdAt": "2021-11-05T02:05:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-05T23:39:41Z",
          "id": "IC_kwDODI9FZc45UGYi"
        },
        {
          "author": "josteink",
          "body": "> tags are early for RTM so: https://github.com/Thefrank/dotnet-freebsd-crossbuild/releases/tag/v6.0.100-rtm.21527.11 native: SOON(ish) will edit when up\r\n\r\nTested and works. Nice! :smiley: ",
          "createdAt": "2021-11-05T07:37:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-05T07:37:01Z",
          "id": "IC_kwDODI9FZc45Uh8q"
        },
        {
          "author": "sec",
          "body": "@Thefrank I noticed you have some extra changes in patches for runtime - are those already in PR's for main or something new (ex. https://github.com/Thefrank/dotnet-freebsd-crossbuild/blob/16c9ccad8c4073af230be2e6d1894b8f2843da12/patches/patch_runtimeRTM.patch#L59) ?",
          "createdAt": "2021-11-05T10:46:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-05T10:46:30Z",
          "id": "IC_kwDODI9FZc45U8zx"
        },
        {
          "author": "Thefrank",
          "body": "@sec oh! those are rolled forward from net5. they were to workaround...something that I don't remember. They are likely safe to be removed. The eventpipe stuff is unbreak IPC issues (mostly debug builds or using dotnet/diagnostics). You can yank that too if you are not planning on using either.",
          "createdAt": "2021-11-05T17:11:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-05T17:11:42Z",
          "id": "IC_kwDODI9FZc45WAP5"
        },
        {
          "author": "lukeb1961",
          "body": "this appears to also happen on FreeBSD 13\r\nhttps://github.com/dotnet/runtime/issues/34879 \r\nrunning powershell Test-Connection 127.0.0.1 fail as root, but works as normal user.\r\nIt will need two trivial fixes to the csproj.\r\ndotnet\\runtime\\src\\libraries\\System.Net.Ping\\src\\System.Net.Ping.csproj\r\n\r\n$(NetCoreAppCurrent)-FreeBSD;\r\n\r\n or '$(TargetsFreeBSD)' == 'true'",
          "createdAt": "2021-11-07T22:08:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-04T19:22:50Z",
                "user": "NN---"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFPlMA=="
          },
          "updatedAt": "2021-11-18T23:16:07Z",
          "id": "IC_kwDODI9FZc45YXh2"
        },
        {
          "author": "sec",
          "body": "I see that SDK and Installer repo's RTM tags got wiped - weird - tried to native build and again getting some weird errors like:\r\n```\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error : Error: One or more errors occurred. (External component has thrown an exception.) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error : System.AggregateException: One or more errors occurred. (External component has thrown an exception.) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :  ---> System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception. [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n         /usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadByName(String libraryName, QCallAssembly callingAssembly, Boolean hasDllImportSearchPathFlag, UInt32 dllImportSearchPathFlag, Boolean throwOnError) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n```\r\neven when adding `/p:CrossgenOutput=false` to parameters doesn't help - will try with Debug build to find out something more.\r\n\r\nAlso trying to build SDK, fail out-of-the-box with error that cannot find stable version of `Microsoft.Build.NuGetSdkResolver (>= 6.0.0)` :/\r\n\r\nOn the other hand, I also tried to perform source-build and got to a point, where it failed becuase runtimes <3.0 were missing for FreeBSD and that doesn't sounds good.\r\n\r\nBuild done under clean 13, will try 12 later.",
          "createdAt": "2021-11-12T18:17:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-12T18:18:10Z",
          "id": "IC_kwDODI9FZc45qCOn"
        },
        {
          "author": "Thefrank",
          "body": "Tags seem OK from GH's end:\r\nhttps://github.com/dotnet/sdk/tree/v6.0.100\r\nhttps://github.com/dotnet/installer/tree/v6.0.100\r\nAs of 6 days ago, native built fine (under FreeBSD 12.2): https://github.com/Thefrank/dotnet-freebsd-native-binaries/releases/tag/v6.0.100-rtm.21527.11",
          "createdAt": "2021-11-12T19:53:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-12T19:53:49Z",
          "id": "IC_kwDODI9FZc45qddW"
        },
        {
          "author": "sec",
          "body": "That was RTM, there were tags\r\n```\r\nINSTALLERTAG=\"v6.0.100-rtm.21527.11\"\r\nSDKTAG=\"v6.0.100-rtm.21527.8\"\r\n```\r\n\r\nand that build fine under FreeBSD - now those tags are gone.\r\nAlso SDK don't even build under Linux with the same error about missing nuget (`Unable to find a stable package Microsoft.Build.NuGetSdkResolver with version (>= 6.0.0) [/home/linux/sdk/sdk.sln]`) - so something must have changed.\r\n\r\nEDIT: no issues under 12.3-RC1, when doing native build under 13\r\n```\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error : Error: One or more errors occurred. (External component has thrown an exception.) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error : System.AggregateException: One or more errors occurred. (External component has thrown an exception.) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :  ---> System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception. [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadByName(String libraryName, QCallAssembly callingAssembly, Boolean hasDllImportSearchPathFlag, UInt32 dllImportSearchPathFlag, Boolean throwOnError) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.LoadLibraryByName(String libraryName, Assembly assembly, Nullable`1 searchPath, Boolean throwOnError) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/targets/Crossgen.targets(140,5): error :    at System.Runtime.InteropServices.NativeLibrary.Load(String libraryName, Assembly assembly, Nullable`1 searchPath) [/usr/home/sec/dotnet-core-freebsd-source-build/installer/src/redist/redist.csproj]\r\n```\r\n\r\nedit 2: after few tries, it builds under 13 without error, I think I'll go sleep...",
          "createdAt": "2021-11-12T20:18:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-12T23:39:09Z",
          "id": "IC_kwDODI9FZc45qoRO"
        },
        {
          "author": "Thefrank",
          "body": "@sec I can confirm that SDK fails with the same error. Restore errors are usually on Microsoft's end (something missing/removed from a feed) and will typically resolve after a day or so. \r\n```\r\n2021-11-13T00:16:15.6794761Z /usr/home/azureagent/vsts/_work/3/s/sdk/src/Layout/redist/redist.csproj : error NU1103: Unable to find a stable package Microsoft.Build.NuGetSdkResolver with version (>= 6.0.0) [/usr/home/azureagent/vsts/_work/3/s/sdk/sdk.sln]\r\n2021-11-13T00:16:15.6801490Z /usr/home/azureagent/vsts/_work/3/s/sdk/src/Layout/redist/redist.csproj : error NU1103:   - Found 72 version(s) in dotnet-tools [ Nearest version: 6.1.0-preview.1.16 ] [/usr/home/azureagent/vsts/_work/3/s/sdk/sdk.sln]\r\n2021-11-13T00:16:15.6807829Z /usr/home/azureagent/vsts/_work/3/s/sdk/src/Layout/redist/redist.csproj : error NU1103:   - Found 3 version(s) in dotnet-public [ Nearest version: 5.11.0-rc.10 ] [/usr/home/azureagent/vsts/_work/3/s/sdk/sdk.sln]\r\n```\r\nAll of the other feeds it looks at have 0 matches.\r\nSDK might be skippable if the `internal` SDK that installer uses is available by feed or download\r\n\r\nedit: SDK is skippable atleast for `v6.0.100`. I did not hit the same failure in `installer` under FreeBSD 12.2.",
          "createdAt": "2021-11-13T00:52:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-13T02:35:18Z",
          "id": "IC_kwDODI9FZc45rqrb"
        },
        {
          "author": "sec",
          "body": "@Thefrank Yes, the SDK can be skipped (as long there's that ZIP available, true), that's just something that pop up. \r\nAs for this weird `SEHException` I did another 2 clean build runs under 13 - first failed, clean, second success - maybe it's bad download somewhere along they way (or some nasty bug that trigger sometimes) - hard to tell as I have no idea how to debug clr). Also tried to build under 14-CURRENT, no problems.",
          "createdAt": "2021-11-13T11:24:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-13T11:24:14Z",
          "id": "IC_kwDODI9FZc45s1Fm"
        },
        {
          "author": "Thefrank",
          "body": "@sec dotnet/diagnostics builds under FreeBSD (as of preview 5). If you run into problems, I can take a look at it and/or upload a binary package",
          "createdAt": "2021-11-13T19:46:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-13T19:46:43Z",
          "id": "IC_kwDODI9FZc45tG_h"
        },
        {
          "author": "Thefrank",
          "body": "I don't think that `dotnet publish` with `--self-contained true /p:PublishSingleFile=true` works correctly under FreeBSD right now. I will note that the default shell here is `csh` but the same behavior exists in `sh` and `bash` so I don't think its shell related\r\n`dotnet new mvc -o testmvc/` then \r\n`dotnet publish testmvc/testmvc.csproj -r freebsd-x64 --self-contained true /p:PublishSingleFile=true`\r\n\r\nNOT WORKING:\r\n```sh\r\nroot@building:~ # pwd\r\n/root\r\nroot@building:~ # ./testmvc/bin/Debug/net6.0/freebsd-x64/publish/testmvc \r\n{SEVERAL MINUTES LATER}\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[62]\r\n      User profile is available. Using '/root/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5000\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /root/\r\n```\r\nWORKING:\r\n```sh\r\nroot@building:~/testmvc/bin/Debug/net6.0/freebsd-x64/publish # pwd\r\n/root/testmvc/bin/Debug/net6.0/freebsd-x64/publish\t  \r\nroot@building:~/testmvc/bin/Debug/net6.0/freebsd-x64/publish # ./testmvc \r\n{IMMEDIATELY}\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5000\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: https://localhost:5001\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /root/testmvc/bin/Debug/net6.0/freebsd-x64/publish/\r\n```\r\n\r\nReal-world example: Ombi (https://github.com/Ombi-app/Ombi)\r\nWorks if called like `./Ombi`\r\nFails if called like `./some/path/Ombi`\r\n\r\nEDIT: more details\r\n- FreeBSD 12.2\r\n- Jail (also 12.2)\r\n- dotNET6.0RTM SDK",
          "createdAt": "2021-11-21T22:30:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-21T22:38:34Z",
          "id": "IC_kwDODI9FZc46G-9V"
        },
        {
          "author": "sec",
          "body": "@Thefrank Hm - what doesn't work exactly? I've checked on my machine and it launches fine - content dir is taken from current directory - but I've check that and it's the same also on Windows. \r\n\r\nBut...\r\nLaunching from random home directory with some files around:\r\n```\r\nUnhandled exception. System.IO.IOException: Too many open files in system : '/usr/home/sec/dotnet6rtm/sdk/6.0.100/Sdks/Microsoft.NET.Sdk/analyzers'\r\n```\r\nFrom `/tmp`:\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\nFatal error while logging another fatal error.\r\n```\r\n\r\nThose error are throw almost immediately btw.",
          "createdAt": "2021-11-22T18:40:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-22T18:41:38Z",
          "id": "IC_kwDODI9FZc46Kbuu"
        },
        {
          "author": "Thefrank",
          "body": "@sec I wouldve sworn the behavior was different under 3.1 or 5 but after testing with both it seems to be the same. So it DOES work as expected.\r\n\r\nMoving on...tests! \r\ndid a build from main @ https://github.com/dotnet/runtime/commit/09cd9c2cfd21f7e830269ee7cd64ea11cbe47a1d\r\nI had failures in 14(!) different test groups. I have included in both HTML and XML the results from groups that had failures.\r\n\r\nI am not familiar enough with what is being tested so I am unsure how to approach these. Are there items that can be disabled? Are things missing from the test environment (e.g., settings inside the jail) that need to be turned on? The tests are correct the failures show something is actually broken?\r\n\r\n```\r\nMicrosoft.VisualBasic.Core.Tests\r\nSystem.Diagnostics.Process.Tests\r\nSystem.IO.FileSystem.DisabledFileLocking.Tests\r\nSystem.IO.FileSystem.Tests\r\nSystem.Net.NameResolution.Functional.Tests\r\nSystem.Net.NetworkInformation.Functional.Tests\r\nSystem.Net.Ping.Functional.Tests\r\nSystem.Net.Security.Tests\r\nSystem.Net.Sockets.Tests\r\nSystem.Runtime.Extensions.Tests\r\nSystem.Runtime.Tests\r\nSystem.Security.Cryptography.X509Certificates.Tests\r\n```\r\nThese reported failures but did not produce any results files. For the second one, I had to SIGINT the second one as it seemed to hang after several hours:\r\n```\r\nSystem.Collections.Immutable.Tests\r\nSystem.Net.HttpListener.Tests\r\n```\r\n[Failures.zip](https://github.com/dotnet/runtime/files/7645446/Failures.zip)\r\n\r\n\r\n",
          "createdAt": "2021-12-02T22:27:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-02T22:27:33Z",
          "id": "IC_kwDODI9FZc46trWH"
        },
        {
          "author": "wfurt",
          "body": "I briefly look at networking/security failures and it seems like some mix of test adjustments, environmental differences and maybe some product bugs/gaps. \r\nNot that some tests are not 100% so you _may_ get different failures on re-run. We will need to go group by group and make fixes. None of the failure look too critical but it would certainly be nice to get clean runs. ",
          "createdAt": "2021-12-02T23:51:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-02T23:51:06Z",
          "id": "IC_kwDODI9FZc46t1lt"
        },
        {
          "author": "lukeb1961",
          "body": "Tomas I know the ping stuff needs fixing for FreeBSD and I think it was you fixed it for OSX? ",
          "createdAt": "2021-12-04T03:41:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-04T03:41:30Z",
          "id": "IC_kwDODI9FZc46xI2h"
        },
        {
          "author": "wfurt",
          "body": "probably me or @filipnavara ",
          "createdAt": "2021-12-06T21:51:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-06T21:51:46Z",
          "id": "IC_kwDODI9FZc462Hxc"
        },
        {
          "author": "filipnavara",
          "body": "Not sure what to do about the Pings. Two of the tests fail on this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/27226f631ff5e6019b7da78d350636a6e964aa3c/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.RawSocket.cs#L83-L91\r\n\r\nOn macOS it takes the first (alternative) code path where an IP header is included in the packet to prevent the OS from splitting it. All other OSes take the standard `DontFragment` path that doesn't seem to be supported on any *BSD derivatives. The question is whether there's an equivalent functionality available on FreeBSD and if yes, how is it exposed and how should it be exposed in .NET.\r\n\r\nCursory search seems to suggest that `IP_HDRINCL` is supported on FreeBSD so you may want to try changing this:\r\nhttps://github.com/dotnet/runtime/blob/27226f631ff5e6019b7da78d350636a6e964aa3c/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs#L18\r\nto `private static bool SendIpHeader => OperatingSystem.IsFreeBSD();`",
          "createdAt": "2021-12-06T22:08:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T01:42:52Z",
                "user": "wfurt"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFpwbA=="
          },
          "updatedAt": "2021-12-06T22:14:50Z",
          "id": "IC_kwDODI9FZc462LDF"
        },
        {
          "author": "wfurt",
          "body": "yes, that should do the trick  (readonly?) AFAIK.\r\nBTW I was not aware of the `IsFreeBSD()`. We are making it to public .NET namespace!",
          "createdAt": "2021-12-08T01:47:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-12-08T06:40:40Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFrRoA=="
          },
          "updatedAt": "2021-12-08T01:47:35Z",
          "id": "IC_kwDODI9FZc466hir"
        },
        {
          "author": "Thefrank",
          "body": "ok so I used this\r\n```diff\r\ndiff --git a/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs b/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs\r\nindex 3897853f6d8..987d0462d70 100644\r\n--- a/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs\r\n+++ b/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs\r\n@@ -15,7 +15,7 @@ namespace System.Net.NetworkInformation\r\n {\r\n     public partial class Ping\r\n     {\r\n-        private static bool SendIpHeader => false;\r\n+        private static bool SendIpHeader => OperatingSystem.IsFreeBSD();\r\n         private static bool NeedsConnect => OperatingSystem.IsLinux();\r\n         private static bool SupportsDualMode => true;\r\n```\r\nand rebuilt and tested from HEAD@20f994c0457bcd1e2f54aa02da17290d7fc48b29 using `./build.sh -c Release -test -ci /p:OFFICIALBUILDID=20211212.99 -subset Clr+Mono+Host+Libs+Libs.Tests+Packs.Product+Packs.Installers`\r\n\r\nThe `System.Net.Ping.Functional.Tests` still has the same two failures but now with a different error: `Invalid argument`\r\n\r\nI also found the test that was stalling: `System.Net.Tests.HttpListenerResponseTests.AddLongHeader_DoesNotThrow`\r\n\r\n(Test results as xml too lazy to rerun for html too)\r\n[FailuresFBSD.zip](https://github.com/dotnet/runtime/files/7700801/FailuresFBSD.zip)\r\n\r\n",
          "createdAt": "2021-12-13T03:32:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-13T03:32:59Z",
          "id": "IC_kwDODI9FZc47IeyR"
        },
        {
          "author": "Thefrank",
          "body": "This was discovered over here: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=259194#c13 and am posting it here for better attention\r\n\r\n---\r\n\r\nNot sure if bug or just quirk of dotNET vs Mono but for networking inside a jail sockets appear to be opened via:\r\n`socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP` on dotNET\r\n`socket(PF_INET,SOCK_STREAM,IPPROTO_TCP)` on Mono\r\n\r\nOn jails without ipv6 and neither a) VNET or b) `ip6=inherit` jail setting this causes `ERR#43 'Protocol not supported'`",
          "createdAt": "2021-12-18T20:26:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-12-18T21:13:29Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCHMlBA=="
          },
          "updatedAt": "2021-12-18T20:26:57Z",
          "id": "IC_kwDODI9FZc47cUqP"
        },
        {
          "author": "wfurt",
          "body": "We would use DualMode socket if available and prefer IPv6 over v4. Can you check what `Socket.OSSupportsIPv6` gives you @Thefrank ? \r\nYou _can_ force IPv4 only via AppContext or environmental variable but perhaps we should fix the detection. \r\n",
          "createdAt": "2021-12-19T01:19:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-19T01:19:56Z",
          "id": "IC_kwDODI9FZc47ccLw"
        },
        {
          "author": "Thefrank",
          "body": "@wfurt \r\n\r\nHere is what I did\r\n\r\nCode:\r\n```C#\r\nusing System;\r\nusing System.Net.Sockets;\r\n\r\nnamespace SocketsApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"IPV4/IPV6Supported: {Socket.OSSupportsIPv4}/{Socket.OSSupportsIPv6}\");\r\n            using (var s = new Socket(SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                Console.WriteLine(\"Created a socket with default IPV6 address family and dual mode.\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\njail settings: ip4=new, ip6=disable, vnet=0, dhcp=0, bpf=0\r\n(things like ping will now fail, no ip address assigned)\r\n```\r\nIPV4/IPV6Supported: True/True\r\nUnhandled exception. System.Net.Sockets.SocketException (43): Protocol not supported\r\n   at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n   at System.Net.Sockets.Socket..ctor(SocketType socketType, ProtocolType protocolType)\r\n   at SocketsApp.Program.Main(String[] args) in /root/test/sockets/Program.cs:line 12\r\n```\r\n\r\n---\r\n\r\nsettings: ip4.addr=bge0|192.168.0.33 ip4.saddrsel=1 ip4=new ip6.saddrsel=1 ip6=disable\r\n(this like ping will now work only on ipv4; vnet, dhcp, and bpf are still off)\r\n```\r\nIPV4/IPV6Supported: True/True\r\nUnhandled exception. System.Net.Sockets.SocketException (43): Protocol not supported\r\n   at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n   at System.Net.Sockets.Socket..ctor(SocketType socketType, ProtocolType protocolType)\r\n   at SocketsApp.Program.Main(String[] args) in /root/test/sockets/Program.cs:line 12\r\n```\r\n\r\n---\r\nsettings: ip4.addr=bge0|192.168.0.33 ip4.saddrsel=1 ip4=new ip6.saddrsel=1 ip6=inherit\r\n```\r\nIPV4/IPV6Supported: True/True\r\nCreated a socket with default IPV6 address family and dual mode.\r\n```",
          "createdAt": "2021-12-19T05:57:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-19T05:57:59Z",
          "id": "IC_kwDODI9FZc47ch7n"
        },
        {
          "author": "wfurt",
          "body": "Look at this @Thefrank https://github.com/dotnet/runtime/blob/067aa165d97372f3e281786801d014fccea8b12c/src/libraries/Common/src/System/Net/SocketProtocolSupportPal.Unix.cs#L12-L18\r\n\r\nEither the UDP vs TCP gives different answer or there is something wrong with the comparison. \r\nMay be the `Protocol not supported` vs expected `Address not supported`.\r\nWhen you call the `Socket.OSSupportsIPv6` you should see the socket creation with `truss`. \r\n\r\nIf this returns correct value, rest should just work:\r\n\r\nhttps://github.com/dotnet/runtime/blob/7213976bceee360ceeb68b336aaed90c204fd3b7/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L71-L78",
          "createdAt": "2021-12-19T06:12:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-19T06:12:16Z",
          "id": "IC_kwDODI9FZc47ciRl"
        },
        {
          "author": "Thefrank",
          "body": "noipv6 has ip6=disable\r\nwithipv6 has ip6=inherit\r\ntruss: `truss -f -a -e -d -H -o trussSETTING.txt dotnet run sockets.csproj`\r\n\r\nI am not 100% sure what I am looking for and can post the full files if it would help\r\n\r\n `grep -n _UDP trussnoipv6.txt`\r\n(nothing)\r\n `grep -n _TCP trussnoipv6.txt`\r\n```\r\n26304:68172 101622: 10.233220243 socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP) ERR#43 'Protocol not supported'\r\n131541:68235 101426: 39.887566370 socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP) ERR#43 'Protocol not supported'\r\n```\r\n\r\n---\r\n\r\n`grep -n _UDP trusswithipv6.txt`\r\n\r\n``` \r\n18692:64454 103079: 7.077819899 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n18698:64454 103079: 7.078828254 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n18703:64454 103079: 7.079609574 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n18709:64454 103079: 7.080491424 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n18726:64454 103079: 7.083228350 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n18734:64454 103079: 7.084670330 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 164 (0xa4)\r\n26222:64454 104112: 9.518065890 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n26232:64454 104112: 9.519896346 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n26242:64454 104112: 9.521671339 socket(PF_INET6,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n26254:64454 104112: 9.523788113 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n26268:64454 104112: 9.526302193 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n26280:64454 104112: 9.528268629 socket(PF_INET,SOCK_DGRAM|SOCK_CLOEXEC,IPPROTO_UDP) = 195 (0xc3)\r\n```\r\n`grep -n _TCP trusswithipv6.txt`\r\n\r\n```\r\n15511:64454 103979: 5.110656824 socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP) = 158 (0x9e)\r\n15665:64454 103979: 5.151981368 setsockopt(158,IPPROTO_TCP,TCP_NODELAY,0x7fffdf1b4b1c,4) = 0 (0x0)\r\n25919:64454 102985: 9.456559688 socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP) = 194 (0xc2)\r\n25922:64454 102985: 9.457178634 setsockopt(194,IPPROTO_TCP,TCP_NODELAY,0x7fffdf5f7b1c,4) = 0 (0x0)\r\n138122:64547 100975: 41.356666195 socket(PF_INET6,SOCK_STREAM|SOCK_CLOEXEC,IPPROTO_TCP) = 40 (0x28)\r\n```",
          "createdAt": "2021-12-19T08:31:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-19T08:31:59Z",
          "id": "IC_kwDODI9FZc47clrH"
        },
        {
          "author": "wfurt",
          "body": "I finally dump my 11.3 and got new 13.0 VM. I'll look into it @Thefrank. It seems like everything is quite now so it may be good time. (as well as to look at some of the failing tests) ",
          "createdAt": "2021-12-22T07:47:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-12-24T05:50:05Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCH0pfQ=="
          },
          "updatedAt": "2021-12-22T07:47:22Z",
          "id": "IC_kwDODI9FZc47kPj7"
        },
        {
          "author": "rmszc81",
          "body": "Hello beloved friends,\r\nfirst, thanks for the great work to make this possible.\r\n\r\nAs a veteran .NET developer and a veteran/newbie in FreeBSD (well, almost 10 years without touch FreeBSD), I decided to give a try to the packages that I found it here https://github.com/Servarr/dotnet-bsd (kindly provided by @Servarr).\r\n\r\nExtraction was quite fine, I look in Ubuntu to see where I should extract and I saw that /usr/share/dotnet was the best fit.\r\n\r\nThen, I saw in linux that there's a symbolic link at /usr/bin/dotnet that points to /usr/share/dotnet/dotnet and I replicated this too.\r\n\r\nI even compared the file list between .net 6 in ubuntu with the freebsd version of this package and all the files are present (except those ones that belongs to linux natively).\r\n\r\nmy first try? run ```dotnet``` without any parameters and bingo, it works.\r\n\r\nthen, I decided to be more aggressive and run ```dotnet --info``` and boom! Failed to load a library!\r\n\r\ndetails below:\r\n\r\n```\r\nroot@freebsd13:~ # dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n```\r\n\r\n```\r\nroot@freebsd13:~ # dotnet --info\r\nFailed to load /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.1/libcoreclr.so, error: Shared object \"libunwind-x86_64.so.8\" not found, required by \"libcoreclr.so\"\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nthen I checked for corresponding packages:\r\n\r\n```\r\nroot@freebsd13:~ # pkg search libunwind\r\nlibunwind-20201110             Generic stack unwinding library\r\nlinux-c7-libunwind-1.2         Generic stack unwinding library (Linux CentOS 7.9.2009)\r\n```\r\n\r\nhere's my system info:\r\n\r\n```\r\nroot@freebsd13:~ # uname -a\r\nFreeBSD freebsd13.local 13.0-RELEASE-p4 FreeBSD 13.0-RELEASE-p4 #0: Tue Aug 24 07:33:27 UTC 2021     root@amd64-builder.daemonology.net:/usr/obj/usr/src/amd64.amd64/sys/GENERIC  amd64\r\n```\r\n\r\nam I missing something?\r\nThank you very much!",
          "createdAt": "2022-01-05T16:02:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T16:02:05Z",
          "id": "IC_kwDODI9FZc479CF0"
        },
        {
          "author": "josteink",
          "body": "Is libunwind actually installed?\r\n\r\nIf so, it might be that dotnet has been linked against libunwind as provided by ports (since dotnet will be a port) rather than the system-provided pkg?\r\n\r\nWorth a shot?",
          "createdAt": "2022-01-05T16:45:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T16:45:03Z",
          "id": "IC_kwDODI9FZc479K62"
        },
        {
          "author": "Thefrank",
          "body": "@rmszc81 `pkg install libunwind icu` are required\r\nedit: `pkg install krb5 terminfo-db openssl` are optional\r\n\r\nEDIT: missed `libinotify` under required",
          "createdAt": "2022-01-05T16:45:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T06:40:23Z",
          "id": "IC_kwDODI9FZc479K8N"
        },
        {
          "author": "wfurt",
          "body": "I'm wondering if we should add note to https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/freebsd-requirements.md for people who just want to run it. We obviously missing official instructions and since there is package we don't have automatic dependency tracking.",
          "createdAt": "2022-01-05T18:44:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T18:44:15Z",
          "id": "IC_kwDODI9FZc479h7s"
        },
        {
          "author": "rmszc81",
          "body": "Alright, I installed the packages as suggested by @Thefrank and @wfurt but I guess that maybe there's an issue with @Servarr packages (I'll try @Thefrank packages later to see the results).\r\n\r\nHere's the results:\r\n\r\n```\r\nroot@freebsd13:~ # pkg install libunwind icu\r\nUpdating FreeBSD repository catalogue...\r\nFetching packagesite.pkg: 100%    6 MiB   1.1MB/s    00:06\r\nProcessing entries: 100%\r\nFreeBSD repository update completed. 31328 packages processed.\r\nAll repositories are up to date.\r\nThe following 2 package(s) will be affected (of 0 checked):\r\n\r\nNew packages to be INSTALLED:\r\n        icu: 70.1_1,1\r\n        libunwind: 20201110\r\n\r\nNumber of packages to be installed: 2\r\n\r\nThe process will require 51 MiB more space.\r\n11 MiB to be downloaded.\r\n\r\nProceed with this action? [y/N]: y\r\n[1/2] Fetching libunwind-20201110.pkg: 100%  127 KiB 130.0kB/s    00:01\r\n[2/2] Fetching icu-70.1_1,1.pkg: 100%   11 MiB   1.9MB/s    00:06\r\nChecking integrity... done (0 conflicting)\r\n[1/2] Installing libunwind-20201110...\r\n[1/2] Extracting libunwind-20201110: 100%\r\n[2/2] Installing icu-70.1_1,1...\r\n[2/2] Extracting icu-70.1_1,1: 100%\r\nroot@freebsd13:~ # dotnet --info\r\nUnhandled exception. System.DllNotFoundException: Unable to load shared library 'libSystem.Native' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Shared object \"liblibSystem.Native\" not found, required by \"dotnet\"\r\n   at System.DateTime.get_UtcNow()\r\n   at System.DateTime.get_Now()\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nAbort (core dumped)\r\n```\r\n\r\nCurious thing is, if you run ```dotnet --list-sdks``` or ```dotnet --list-runtimes``` it works like a charm.\r\n\r\nAfter I test @Thefrank packages, I'll report.\r\nThank you very much!",
          "createdAt": "2022-01-06T05:53:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T05:53:40Z",
          "id": "IC_kwDODI9FZc47-vy4"
        },
        {
          "author": "rmszc81",
          "body": "Update:\r\nI installed the packages as it was suggested by ```sudo pkg install --yes libunwind icu libinotify lttng-ust krb5 cmake openssl ninja``` and it works!\r\n\r\nBtw, the package ```lttng-ust``` is not available for FreeBSD 13 (quarterly) as Jan 6th, 2022. :(\r\n\r\nResults below:\r\n\r\n```\r\nroot@freebsd13:~ # dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nroot@freebsd13:~ # dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.101\r\n Commit:    ef49f6213a\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  13\r\n OS Platform: FreeBSD\r\n RID:         freebsd.13-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.1\r\n  Commit:  3a25a7f1cc\r\n\r\n.NET SDKs installed:\r\n  6.0.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nFrom now on, I'll put some applications to the ```fire test``` and see how they behave.\r\n\r\nOnce again, thank you very much!",
          "createdAt": "2022-01-06T06:06:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T06:06:39Z",
          "id": "IC_kwDODI9FZc47-w99"
        },
        {
          "author": "Thefrank",
          "body": "`libinotify` THIS! I forgot about this one but actually remember it in the PR! This is actually required. dotNET under FreeBSD uses this shim for kqueue->inotify. dotNET uses kqueue in OSX and this is something I would like to see happen for FreeBSD...eventually\r\n`lttng-ust` is only needed for debugging and only a very old version of it exists in ports. I am not 100% sure but I think updates to `liburcu` break it under AMD64 which might be why its no longer in ports for AMD64.\r\n`cmake` is only needed if...using cmake (e.g. actually building the SDK)\r\n`ninja` is only needed if building with it directly (e.g. actually building the SDK)",
          "createdAt": "2022-01-06T06:39:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-06T08:04:32Z",
                "user": "rmszc81"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCIx_ow=="
          },
          "updatedAt": "2022-01-06T06:39:35Z",
          "id": "IC_kwDODI9FZc47-0Da"
        },
        {
          "author": "rmszc81",
          "body": "Hello everyone again,\r\nAfter some testing, I get some results and here we go:\r\n\r\nFor simple applications, that has no need for any nuget package, everything goes fine (as I saw until now):\r\n**running as normal user, not root**\r\n\r\n```\r\nroot@freebsd13:/home/dev # dotnet new console --name HelloWorld\r\nThe template \"Console App\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /home/dev/HelloWorld/HelloWorld.csproj...\r\n  Determining projects to restore...\r\n  Restored /home/dev/HelloWorld/HelloWorld.csproj (in 240 ms).\r\nRestore succeeded.\r\n\r\nroot@freebsd13:/home/dev # cd HelloWorld/\r\nroot@freebsd13:/home/dev/HelloWorld # dotnet build && dotnet run\r\nMicrosoft (R) Build Engine version 17.0.0+c9eb9dd64 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  HelloWorld -> /home/dev/HelloWorld/bin/Debug/net6.0/HelloWorld.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.66\r\nHello, World!\r\nroot@freebsd13:/home/dev/HelloWorld #\r\n```\r\n\r\nUntil here, fine, but then, I tried to build an assembly (.dll) that I wrote for one of my applications. Background is, it's a simple dll that contains some small cryptographic routines. Results are:\r\n\r\n```\r\nroot@freebsd13:/home/dev/CsChain/Support # dotnet build\r\nMicrosoft (R) Build Engine version 17.0.0+c9eb9dd64 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':\r\n  Signature type: Author\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':\r\n  Signature type: Author\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   SHA256 hash: 3F9001EA83C560D712C24CF213C3D312CB3BFF51EE89435D3430BD06B5D0EECE\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   SHA256 hash: 3F9001EA83C560D712C24CF213C3D312CB3BFF51EE89435D3430BD06B5D0EECE\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Valid from: 02/26/2018 07:00:00 to 01/27/2021 19:00:00\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Valid from: 02/26/2018 07:00:00 to 01/27/2021 19:00:00\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamping certificate is not trusted by the trust provider.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamping certificate is not trusted by the trust provider.\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':\r\n  Signature type: Repository\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':\r\n  Signature type: Repository\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Subject Name: CN=NuGet.org Repository by Microsoft, O=NuGet.org Repository by Microsoft, L=Redmond, S=Washington, C=US\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   SHA256 hash: 0E5F38F57DC1BCC806D8494F4F90FBCEDD988B46760709CBEEC6F4219AA6157D\r\n  Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Valid from: 04/10/2018 07:00:00 to 04/14/2021 19:00:00\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature validity period has expired.\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Subject Name: CN=NuGet.org Repository by Microsoft, O=NuGet.org Repository by Microsoft, L=Redmond, S=Washington, C=US\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   SHA256 hash: 0E5F38F57DC1BCC806D8494F4F90FBCEDD988B46760709CBEEC6F4219AA6157D\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature's timestamping certificate is not trusted by the trust provider.\r\n  Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json':   Valid from: 04/10/2018 07:00:00 to 04/14/2021 19:00:00\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature's timestamping certificate is not trusted by the trust provider.\r\n  Failed to restore /home/dev/CsChain/Support/Support.csproj (in 996 ms).\r\n\r\nBuild FAILED.\r\n\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamping certificate is not trusted by the trust provider.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamping certificate is not trusted by the trust provider.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Formats.Asn1 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature's timestamping certificate is not trusted by the trust provider.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3037: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature validity period has expired.\r\n/home/dev/CsChain/Support/Support.csproj : error NU3028: Package 'System.Security.Cryptography.Cng 5.0.0' from source 'https://api.nuget.org/v3/index.json': The repository countersignature's timestamping certificate is not trusted by the trust provider.\r\n    0 Warning(s)\r\n    8 Error(s)\r\n\r\nTime Elapsed 00:00:02.67\r\nroot@freebsd13:/home/dev/CsChain/Support #\r\n```\r\n\r\nAfter that, I started to dig deeper into this issue and I got this guy here https://github.com/dotnet/core/issues/6595 but still, no clue where to go from here.\r\n\r\nLong story short, basically every nuget package that I tried to restore, I got similar results and the only difference that I saw so far were is the certificate range expiration period, like this one ```Valid from: 02/26/2018 07:00:00 to 01/27/2021 19:00:00```.\r\n\r\nIf I can solve this by myself, I'll report here.\r\n\r\nThanks again.",
          "createdAt": "2022-01-06T08:15:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T08:15:19Z",
          "id": "IC_kwDODI9FZc47--id"
        },
        {
          "author": "josteink",
          "body": "> For simple applications, that has no need for any nuget package, everything goes fine (as I saw until now):\r\n**running as normal user, not root**\r\n\r\nMaybe I'm not following, but from what I can tell... You are running as root, aren't you?\r\n\r\n> root@freebsd13:/home/dev #\r\n\r\nAm I missing something? :smile: ",
          "createdAt": "2022-01-06T08:21:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T08:21:45Z",
          "id": "IC_kwDODI9FZc47-_Xe"
        },
        {
          "author": "Thefrank",
          "body": "`pkg install ca_root_nss`\r\nyou MIGHT have to manually add/remove/unblacklist some certs if that doesn't work",
          "createdAt": "2022-01-06T08:32:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T08:32:23Z",
          "id": "IC_kwDODI9FZc47_A7V"
        },
        {
          "author": "filipnavara",
          "body": "FWIW the official .NET builds on macOS and Linux still have signing validation disabled now after the last certificate expiration/switch.",
          "createdAt": "2022-01-06T08:47:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T08:47:46Z",
          "id": "IC_kwDODI9FZc47_DEk"
        },
        {
          "author": "rmszc81",
          "body": "@josteink yes, I'm sorry, running as root, forgive my mistake.\r\n@Thefrank the package ```ca_root_nss``` is installed, results are same. About add/remote/unblacklist, I'm trying, :P\r\n@filipnavara yes, after some research I saw that, the symantec issues, right?\r\n\r\nThank you.",
          "createdAt": "2022-01-06T09:22:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T09:22:14Z",
          "id": "IC_kwDODI9FZc47_IRa"
        },
        {
          "author": "joperator",
          "body": "> FWIW the official .NET builds on macOS and Linux still have signing validation disabled now after the last certificate expiration/switch.\r\n\r\nI just created [#4389](https://github.com/NuGet/NuGet.Client/pull/4389) to disable this on FreeBSD as well.\r\n\r\n@rmszc81 Until the PR is completed and the new version is referenced by `dotnet`, you can use [this workaround](https://github.com/dotnet/runtime/issues/14537#issuecomment-851286936) for now.",
          "createdAt": "2022-01-06T10:00:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-06T10:03:35Z",
                "user": "filipnavara"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-06T11:21:05Z",
                "user": "rmszc81"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-08T05:50:12Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCJD0MQ=="
          },
          "updatedAt": "2022-01-06T10:00:31Z",
          "id": "IC_kwDODI9FZc47_OtZ"
        },
        {
          "author": "rmszc81",
          "body": "hello gentlemen, \r\n\r\n@joperator I confirm that the workaround provided by the link https://github.com/dotnet/runtime/issues/14537#issuecomment-851286936 solves this issue.\r\n\r\nI'll be waiting for the PR to be completed as soon as you guys can to test it! \r\n\r\nfor now, I'll keep playing with my apps and system the way it is.\r\n\r\nThanks a lot!",
          "createdAt": "2022-01-06T13:44:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T13:44:33Z",
          "id": "IC_kwDODI9FZc47_4qZ"
        },
        {
          "author": "wfurt",
          "body": "it seems like `lttng-ust` package is gone (failing to build) so runtime is failing to build for me on fresh FreeBSD 13. \r\nShould we change \r\nhttps://github.com/dotnet/runtime/blob/bc7f6c27546c8f01fb7c1714fae034a8dd742a4c/src/coreclr/pal/src/eventprovider/CMakeLists.txt#L3-L7\r\n\r\nor is there some different tracing mechanism on FreeBSD? ",
          "createdAt": "2022-01-08T05:33:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T05:33:52Z",
          "id": "IC_kwDODI9FZc48Ey_9"
        },
        {
          "author": "Thefrank",
          "body": "@wfurt DTrace is the preferred tracing system for FreeBSD\r\n\r\n`lttng-ust`: I am not 100% sure but I think updates to `liburcu` break it under AMD64 which might be why its no longer in ports for AMD64.",
          "createdAt": "2022-01-08T05:52:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T05:52:45Z",
          "id": "IC_kwDODI9FZc48Ezbx"
        },
        {
          "author": "wfurt",
          "body": "Hmm. that should be same/similar to macOS, right? Do we have tracing for macOS/iOS @jkotas @janvorli (or plan to do it at some point) ",
          "createdAt": "2022-01-08T06:04:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T06:04:19Z",
          "id": "IC_kwDODI9FZc48Ezus"
        },
        {
          "author": "wfurt",
          "body": "Some Ping tests should be fixed  by #63531 in direction @filipnavara suggested. Rest looks like regression described in #63530. ",
          "createdAt": "2022-01-08T07:18:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T07:18:03Z",
          "id": "IC_kwDODI9FZc48E1iO"
        },
        {
          "author": "jkotas",
          "body": " We do not have integration with OS provided tracing on macOS/iOS. The only tracing available on macOS/iOS is .NET-specific EventPipe. I think it would be fine for FreeBSD to be on the same plan.",
          "createdAt": "2022-01-08T16:53:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T16:53:48Z",
          "id": "IC_kwDODI9FZc48FcZ-"
        },
        {
          "author": "wfurt",
          "body": "I put up fix for the jail @Thefrank. As I suspected there was problem with availability detection. It should be easy to port to 6.0 if anybody cares and we want to make it more compatible with jail. ",
          "createdAt": "2022-01-10T05:10:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-10T10:50:52Z",
                "user": "josteink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCJK1dQ=="
          },
          "updatedAt": "2022-01-10T05:10:57Z",
          "id": "IC_kwDODI9FZc48HTvb"
        },
        {
          "author": "joperator",
          "body": "@rmszc81 Package signature verification will be disabled on FreeBSD as soon as a new version of the [NuGet.Common](https://www.nuget.org/packages/NuGet.Common) package is pushed and referenced by the [dotnet/sdk](https://github.com/dotnet/sdk/blob/59fdbdc5d3bde5b6fbe4a6be08d0775377b6da1f/src/Cli/Microsoft.DotNet.Configurer/Microsoft.DotNet.Configurer.csproj#L19). (probably in .NET 6.0.3)\r\n\r\n@wfurt There are still open PRs to add support for FreeBSD to the [microsoft/azure-pipelines-agent](https://github.com/microsoft/azure-pipelines-agent) and the [microsoft/azure-pipelines-task-lib](https://github.com/microsoft/azure-pipelines-task-lib). It would be nice if these also get merged soon so that the community can benefit from self-hosted Azure Pipelines Agents on FreeBSD as well. [PR799](https://github.com/microsoft/azure-pipelines-task-lib/pull/799) in particular required only a few changes and in [PR3266](https://github.com/microsoft/azure-pipelines-agent/pull/3266) most changes were made just to extend the platform checks for Linux to FreeBSD.",
          "createdAt": "2022-01-21T09:09:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-21T09:09:37Z",
          "id": "IC_kwDODI9FZc48skeg"
        },
        {
          "author": "wfurt",
          "body": "I put up PR to stabilize following sets:\r\n- System.Net.HttpListener.Tests\r\n- System.Net.NetworkInformation.Functional.Tests\r\n- System.Net.Security.Tests\r\n- System.Net.Sockets.Tests\r\n\r\nnothing major, mostly small adjustments. I opened #64416 to track the fact the we don't have code to get listening sockets. Open for grabs for anybody who has time. ",
          "createdAt": "2022-01-28T02:13:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-28T02:13:05Z",
          "id": "IC_kwDODI9FZc49Bj9W"
        },
        {
          "author": "wfurt",
          "body": "And I'm aware of the pending changes @joperator but both are out of my direct reach. I also did not make any progress on the fix in the closed source. I'll se what I can. ",
          "createdAt": "2022-01-28T02:19:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-28T06:12:41Z",
                "user": "joperator"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCL_aKQ=="
          },
          "updatedAt": "2022-01-28T02:19:02Z",
          "id": "IC_kwDODI9FZc49Bkl0"
        },
        {
          "author": "wfurt",
          "body": "On separate note, I notices that at least one FreeBSD package is moving from mono to core. I was trying to read past post but I could not figure out how close are we to have official port for at least the runtime. Is there anybody looking at it? ",
          "createdAt": "2022-01-28T02:21:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-28T02:21:01Z",
          "id": "IC_kwDODI9FZc49Bk1o"
        },
        {
          "author": "Thefrank",
          "body": "@wfurt radarr and prowlarr are in ports as \"NO_BUILD\" and basically as temporary until a buildable dotNET SDK ends up in ports (then it will be required to be source buildable)  @mvanbaak has done a great job of getting that transition done and taking over port ownership of those two ports!\r\n\r\nFor dotNET SDK to land in ports it needs to be buildable from source and offline from any phase outside of \"fetch\". I don't have the time right now to look into what all would be needed to fixup the dotnet/source-build to get it working under FreeBSD but from a quick glance back in net5.0 days it would be non-trivial",
          "createdAt": "2022-01-28T06:40:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-28T09:37:58Z",
                "user": "mvanbaak"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCMBCNA=="
          },
          "updatedAt": "2022-01-28T06:40:13Z",
          "id": "IC_kwDODI9FZc49B_Cv"
        },
        {
          "author": "wfurt",
          "body": "Why don't we lay out obstacles/expectations on https://github.com/dotnet/source-build/issues/1139 ? \r\nI think Linux community and the source-build made some progress and we should be creative in looking for help elsewhere.  ",
          "createdAt": "2022-01-28T06:50:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-28T06:50:17Z",
          "id": "IC_kwDODI9FZc49CAJW"
        },
        {
          "author": "Zamana",
          "body": "Hello!\r\n\r\nI'm sorry if this question doesn't belong to this discussion. Anyway...\r\n\r\nAfter \"installing\" the pre-built dotnet binaries from TheFrank and the additional packages \"libunwind icu libinotify ninja\", some errors was gone, but now I'm facing this one when I try to run Radarr4 (pre-built binary package too):\r\n\r\n```\r\nroot@radarr4:/usr/local/share/Radarr # ./Radarr\r\n[Info] Bootstrap: Starting Radarr - /usr/local/share/Radarr/Radarr - Version 4.0.4.5922\r\n[Debug] Bootstrap: Console selected\r\n[Debug] Microsoft.Extensions.Hosting.Internal.Host: Hosting starting\r\n\r\n\r\n[Fatal] ConsoleApp: EPIC FAIL!\r\n\r\n[v4.0.4.5922] System.DllNotFoundException: Unable to load shared library 'MonoPosixHelper' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Shared object \"libMonoPosixHelper\" not found, required by \"Radarr\"\r\n(...)\r\n```\r\nQuestion: is Mono still needed? Because they say in the changelog that \"cc57272 New: Drop Mono Support\"\r\n\r\n",
          "createdAt": "2022-02-02T15:12:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T15:12:51Z",
          "id": "IC_kwDODI9FZc49RqnN"
        },
        {
          "author": "rmszc81",
          "body": "Hello @Zamana, you're right, this space is not related to the question that you have made a moment ago. But still, btw, we can't say much about 3rd party libraries. I think you should check if this 3rd party library has a nuget package and if it uses .net standard or even, it's compatible to .net 6. Maybe this library has tie dependencies with another packages? You can use https://github.com/icsharpcode/ILSpy/releases to take a look inside the component to discover how it was made if you can't find the sources anywhere. From what I saw in the error message, it seems to me that the component tries to load another library/assembly by reflection?",
          "createdAt": "2022-02-02T15:36:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-02T15:43:03Z",
                "user": "Zamana"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCMvauA=="
          },
          "updatedAt": "2022-02-02T15:37:50Z",
          "id": "IC_kwDODI9FZc49RwnV"
        },
        {
          "author": "Zamana",
          "body": "Thanks for the reply and sorry for the question.\r\n\r\nAnyway, I asked for help at Discord and discovered that I can use the package from FreeBSD repository. I only needed to change from \"quartely\" to \"latest\" in /etc/pkg/FreeBSD.conf and voila: the radarr4 was there.\r\n\r\nThank you very much.",
          "createdAt": "2022-02-02T15:44:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T15:44:52Z",
          "id": "IC_kwDODI9FZc49Ry6w"
        },
        {
          "author": "rmszc81",
          "body": "@Zamana, very glad to hear that your question had a solution. In case you have any issues related to .net in freebsd, framework related, please let us know. Thank you very much ^^",
          "createdAt": "2022-02-03T02:43:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-07T21:16:38Z",
                "user": "Zamana"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCNePdg=="
          },
          "updatedAt": "2022-02-03T02:43:00Z",
          "id": "IC_kwDODI9FZc49Tm34"
        },
        {
          "author": "Thefrank",
          "body": "How does the CI here do tests? I am getting lost on the \"templates all the way down\" part. I would like to get something setup locally to see if any regressions occur. It appears that tests are currently not run for FreeBSD.",
          "createdAt": "2022-02-04T01:59:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T01:59:44Z",
          "id": "IC_kwDODI9FZc49Xf1i"
        },
        {
          "author": "wfurt",
          "body": "CI is complicated. Each test sets runs separately dispatched though distributed queues. And there is scheduler to manage and dispatch tasks and put results to database and updated GH. \r\nI was thinking about this while back and I think best would be to run all tests from top and then write some logic to scrape testResults.xml files. This is not great with hanging tests so it would need to be time-boxed somehow. Internal system can timeout each individual set and if we get lucky also collect dump for investigation. ",
          "createdAt": "2022-02-04T02:15:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T02:15:33Z",
          "id": "IC_kwDODI9FZc49Xhhl"
        },
        {
          "author": "Thefrank",
          "body": "Building the whole SDK natively using Azure pipelines, at least from tags, is rather easy via bootstrap: runtime+patches -> aspnetcore -> SDK (only if missing in NuGet) -> Installer. Whole thing finishes in about 90min under my self-hosted environment.\r\n\r\nTests...these use something called \"SendToHelix\" which I guess is the complex distribution queue system that @wfurt mentioned and appears to be a bespoke solution for Runtime. Azure DevOPs has support for `dotnet test` but not for \"SendToHelix\" nor the massive amount of batch tests activated when building the runtime with `-test` as `PublishTestResults` task uploads nothing leaving me to manually fish the testResults.xml files out of the jail manually. As of 8b9416581ed4db6e283bb8a0eb410994ad390f82 there are no hanging tests so the whole job does not need to be terminated because of timeout.",
          "createdAt": "2022-02-04T03:39:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T03:39:13Z",
          "id": "IC_kwDODI9FZc49XpD0"
        },
        {
          "author": "wfurt",
          "body": "` find artifacts/ -name testResults.xml | xargs grep 'result=\"Fail\"'` should be close enough. Not quite pretty but it _should_ come out empty if we pass everything. ",
          "createdAt": "2022-02-04T05:06:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T05:06:45Z",
          "id": "IC_kwDODI9FZc49XwJg"
        },
        {
          "author": "wfurt",
          "body": "Is math on FreeBSD less precise than Linux & macOS???\r\n```\r\n    Microsoft.VisualBasic.Tests.FileSystemTests.CurDir_Drive [SKIP]\r\n        Condition(s) not met: \"IsWindows\"\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 48, Pmt: -570, PV: 24270, FV: 0, Due: BegOfPeriod, Guess: 0.10000000000000001, expected: 0.0052240164339990847, relativePrecision: 0) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.005224016433999 (rounded from 0.005224016433999085)\r\n        Actual:   0.005224016434 (rounded from 0.005224016433999741)\r\n        Stack Trace:\r\n          /usr/home/furt/github/wfurt-runtime/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs(260,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expected, Int32 relativePrecision)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: -0.0080000000000000002, NPer: 31, Pmt: 2000, FV: 0, Due: EndOfPeriod, expected: -70684.64967009431, relativePrecision: -5) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -70684.6496700943 (rounded from -70684.64967009431)\r\n        Actual:   -70684.6496700944 (rounded from -70684.64967009435)\r\n        Stack Trace:\r\n          /usr/home/furt/github/wfurt-runtime/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs(241,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expected, Int32 relativePrecision)\r\n    Finished:    Microsoft.NETCore.Platforms.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n```\r\n\r\nI want to make sure before proceeding with\r\n```diff  \r\n-- a/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs\r\n+++ b/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs\r\n@@ -13,7 +13,7 @@ public class FinancialTests\r\n\r\n         // The accuracy to which we can validate some numeric test cases depends on the platform.\r\n         private static readonly int s_precision = IsArmOrArm64OrAlpine ? 12 :\r\n-            (PlatformDetection.IsBrowser || PlatformDetection.IsNetFramework) ? 14 : 15;\r\n+            (PlatformDetection.IsBrowser || PlatformDetection.IsNetFramework || PlatformDetection.IsFreeBSD) ? 14 : 15;\r\n```",
          "createdAt": "2022-02-04T08:50:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T08:51:19Z",
          "id": "IC_kwDODI9FZc49YQq5"
        },
        {
          "author": "arrowd",
          "body": "I remember some talks on the mailing list recently. What FreeBSD version are you running this on?",
          "createdAt": "2022-02-04T08:55:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T08:55:34Z",
          "id": "IC_kwDODI9FZc49YRad"
        },
        {
          "author": "wfurt",
          "body": "13.0-RELEASE",
          "createdAt": "2022-02-04T08:57:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T08:57:56Z",
          "id": "IC_kwDODI9FZc49YR0J"
        },
        {
          "author": "emaste",
          "body": "Is FinancialTests.cs available somewhere?",
          "createdAt": "2022-02-04T16:55:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T16:55:06Z",
          "id": "IC_kwDODI9FZc49Zx4M"
        },
        {
          "author": "josteink",
          "body": "Not sure. It seems it might be FinancialTests.vb (that is Visual Basic.Net), and has been having issues before for Windows 10 on Arm64: https://github.com/dotnet/runtime/issues/30573\r\n\r\n**Edit:** it’s .cs, and has been having other issues before too: https://github.com/dotnet/runtime/issues/30220",
          "createdAt": "2022-02-04T17:00:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T17:08:03Z",
          "id": "IC_kwDODI9FZc49Zy8q"
        },
        {
          "author": "josteink",
          "body": "Found it!\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs",
          "createdAt": "2022-02-04T17:07:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T17:07:23Z",
          "id": "IC_kwDODI9FZc49Z0bh"
        },
        {
          "author": "rootwyrm",
          "body": "@wfurt https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs\r\n\r\nThis is a new failure, *not* an existing failure. Failure is occurring in `Microsoft.VisualBasic.Tests.FinancialTests.Rate` [Found here.](https://github.com/dotnet/runtime/blob/0a3531e83f1632a590223cd93f055cf566a3a0e1/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs#L251) \r\n\r\nRate I could maybe chalk up to truncation (it's the only one that far right of the decimal.) PV's odd. `Rate: -0.0080000000000000002, NPer: 31, Pmt: 2000, FV: 0, Due: EndOfPeriod` doesn't look right to me, but I'm not intimately familiar with this test. But it definitely does not look right compared to other tests; it looks like it's supposed to be `0.00166666666666667`.\r\n\r\n@cston would be the go-to person for this set of tests I believe. ",
          "createdAt": "2022-02-04T17:26:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T17:26:31Z",
          "id": "IC_kwDODI9FZc49Z41w"
        },
        {
          "author": "Thefrank",
          "body": "ive been seeing a single test failure in [FinancialTests.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.VisualBasic.Core/tests/FinancialTests.cs) for a long time (net5 I think?),  @rootwyrm is right, this is a new one",
          "createdAt": "2022-02-04T17:49:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-04T17:49:00Z",
          "id": "IC_kwDODI9FZc49Z9Ds"
        },
        {
          "author": "wfurt",
          "body": "GCMemoryInfo.MemoryLoadBytes is not implemented on FreeBSD https://github.com/dotnet/runtime/issues/64935 is open to all FreeBSD hackers. I put up  #64937 to disable the test. With that, `System.Runtime` gives clean test run.\r\nI have few more other fixes pending but not ready as PR yet. Nothing major so far.  ",
          "createdAt": "2022-02-07T20:38:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-07T20:38:39Z",
          "id": "IC_kwDODI9FZc49gYPv"
        },
        {
          "author": "sec",
          "body": "As I saw there's .NET 7 Preview 1, I took some hours to try to compile it under FreeBSD :) Thinking it will as simple as v6, it wasn't :)\r\nBut in the end, I've managed to end up with working SDK, fully done under FreeBSD (with one step under Linux, to combine runtime/aspnetcore into SDK, as new installer wanted .NET 7 and I only had v6 SDK) - using 6.0.102 as bootstrap.\r\nNice thing, from what I've checked, all the patches I was using are already in preview-1 branches of all repo's :)\r\nMake sure to match correct build id's when building repo.\r\n\r\nThen I took that v7 and tried to compile it again, fully under FreeBSD:\r\n\r\n### runtime\r\nFew warnings as errors (like struct name in lower ascii) - this can be handled with `--warnAsError false`\r\nBut in the end, runtime failed with very nice stacktrace - https://gist.github.com/sec/5f0c4a4df0771432bd422e4f23f6a19b - tried adding `-maxcpucount:1 /p:maxcpucount=1` - no go - **any tips how to debug this or get some more info? There's core dump, but I don't know how to even start investigating this**?\r\ngoing back to compile using pure 6.0.102 - success. EDIT: looks like same issue with 6.0.102... BUT:\r\n\r\nFunny thing - adding `-v d` to build script, makes the errors go away.\r\n\r\n### aspnetcore\r\nThis one required some patching - mostly \"Fix formatting\" which could be handled by warnAsError but anyway...\r\nDuring build there were random fails with `cannot copy file, used by another process` - also when doing build under Linux I hit those - adding `-maxcpucount:1 /p:maxcpucount=1` fixed those. Note that those only happen when using v7 as bootstrap.\r\nWhen using v6 I ended up with only one error, unable to load System.Runtime 7.0.0.0 on one task - so I assume it needs v7. Don't know if those random errors are something new in v7 or I'm just lucky :)\r\n\r\n### installer\r\nFeeding runtime and aspnetcore outputs produced working SDK.\r\n\r\nAs runtime compile fine (even crosscompile from Linux) - having FreeBSD included in semi/official builds would be nice, as going from v6 to v7-preview.1 wasn't nice expierence. I saw there was `alpha` build along the way, but as I see no tag for it, I don't even want to think how to build this - same go for fully offline source-build :(",
          "createdAt": "2022-02-21T23:45:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2022-02-23T07:22:43Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCP8eCw=="
          },
          "updatedAt": "2022-02-21T23:45:22Z",
          "id": "IC_kwDODI9FZc4-bJB5"
        },
        {
          "author": "Thefrank",
          "body": "ive been building nightly (cron midnight) runtime and havent had any issues with it when bootstrapping via 6.0 under FreeBSD 12.2. I know @ta264 got a net7 preview 1 building/working via crossbuild\r\n\r\nIf i get some time, I will try and see how much of challenge getting an SDK up will be",
          "createdAt": "2022-02-22T02:19:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-22T02:19:45Z",
          "id": "IC_kwDODI9FZc4-bX0a"
        },
        {
          "author": "wfurt",
          "body": "While this may be highly inconvenient, I feel `source-build` e.g. https://github.com/dotnet/source-build/issues/1139 is the _only_ one way out of the dark tunnel e.g. leading to official FreeBSD port. While I was focusing on runtime test failures recently, it would be great of anybody can give `source-build' try so we can get that working as well.   ",
          "createdAt": "2022-02-24T07:38:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T07:38:47Z",
          "id": "IC_kwDODI9FZc4-jz_i"
        },
        {
          "author": "arrowd",
          "body": "So is it `source-build` or `installer` that should be looked into?",
          "createdAt": "2022-02-24T07:42:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T07:42:23Z",
          "id": "IC_kwDODI9FZc4-j0f2"
        },
        {
          "author": "sec",
          "body": "You start with `installer`, it's using `source-build` during the process. But for the process, we also need SDK to bootstrap (can be crosscompiled, but it needs to \"be\"). I was giving a try some time ago with `source-build` - it was failing due to lack of .NET 3/5 SDK during the process - I believe it can be patched to use 6/7 all the way (just like we're currently building SDK on FreeBSD using bootstrap) - question is, what this will change, if there's still no \"official\" build to start with?\r\n\r\nEven if we get `source-build` to work, getting this into ports should be quite easy, but the bootstrap SDK need to be trusted to start with, right?",
          "createdAt": "2022-02-24T07:56:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T07:56:30Z",
          "id": "IC_kwDODI9FZc4-j2hF"
        },
        {
          "author": "arrowd",
          "body": "> Even if we get `source-build` to work, getting this into ports should be quite easy, but the bootstrap SDK need to be trusted to start with, right?\r\n\r\nYes, but it shouldn't necessarily come from upstream. I'm producing bootstrap packages for the Haskell compiler, so it is trusted enough if a FreeBSD committer prepares it.",
          "createdAt": "2022-02-24T08:02:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-24T08:03:04Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-24T08:09:29Z",
                "user": "driesmp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-24T12:43:24Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCQMt-A=="
          },
          "updatedAt": "2022-02-24T08:02:35Z",
          "id": "IC_kwDODI9FZc4-j3eY"
        },
        {
          "author": "wfurt",
          "body": "right @sec. This is what I was hoping to fix with https://github.com/dotnet/runtimelab/tree/feature/FreeBSD\r\ne.g. to have \"good enough\" trusted code to feed the real build process. \r\nIf there is better alternative I'd be happy to abandon it. ",
          "createdAt": "2022-02-24T08:04:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T08:04:28Z",
          "id": "IC_kwDODI9FZc4-j3z5"
        },
        {
          "author": "sec",
          "body": "Looking at current state of v7 - only patches needed to build are those to use v6/v7 as bootstrap (ex, https://github.com/sec/dotnet-core-freebsd-source-build/tree/v7/patches) and some `glue` logic. As for patches, those should be easy to put into `source-build`, but for glue logic - I have no idea :)",
          "createdAt": "2022-02-24T08:16:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T08:16:23Z",
          "id": "IC_kwDODI9FZc4-j5zj"
        },
        {
          "author": "wfurt",
          "body": "I have no idea either @sec. But why don't we try to work it out via https://github.com/dotnet/source-build/issues/1139? \r\nWe have decent confidence that .NET `runtime` _can_ function on FreeBSD in many cases.\r\nI could be wrong but it feels like we are ought to wrestle the build issues down. ",
          "createdAt": "2022-02-24T08:33:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-24T08:34:57Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-24T10:11:58Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCQLUpw=="
          },
          "updatedAt": "2022-02-24T08:33:08Z",
          "id": "IC_kwDODI9FZc4-j8zC"
        },
        {
          "author": "jkotas",
          "body": "> Looking at current state of v7 - only patches needed to build are those to use v6/v7 as bootstrap\r\n\r\nIt is unlikely you will be able to use v6 to bootstrap v7 once it is done. There are typically enough significant changes made in given .NET release to make bootstrapping on previous version non-feasible.",
          "createdAt": "2022-02-24T16:23:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-24T16:23:00Z",
          "id": "IC_kwDODI9FZc4-lirU"
        },
        {
          "author": "Thefrank",
          "body": "Soooo...it is possible to get azure to process the results from runtime's build+test \r\n![Screenshot 2022-03-06 234125](https://user-images.githubusercontent.com/1910378/156981699-c14cf7ea-d219-4677-9651-13998b487d96.png)\r\n\r\nThis makes the nightly a bit more useful now :D\r\n",
          "createdAt": "2022-03-07T06:49:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-03-07T07:43:29Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-11T23:25:59Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCSn1TA=="
          },
          "updatedAt": "2022-03-07T06:49:29Z",
          "id": "IC_kwDODI9FZc4_MhWc"
        },
        {
          "author": "Thefrank",
          "body": "What is the best way of providing the results from these builds? \r\n\r\nIt is currently in a private devops+GH repo and the results seem more useful as presented by azure's analytics than by the XMLs it spits out. \r\n\r\nWhile people don't seem clamoring for nightly test results I would like a way of providing them to those that want them but would rather not just open everything up publicly because im pretty sure I misconfigured something at some point hah",
          "createdAt": "2022-03-16T19:58:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-16T19:58:05Z",
          "id": "IC_kwDODI9FZc4_wC0P"
        },
        {
          "author": "wfurt",
          "body": "I see generally two use cases: 1) track improvements over time and 2) guard agains regressions or have some way how to set when it was introduced.  Until we have better semi-official build I feel keeping this in private repro is OK. As this thread is getting pretty long, it would be nice to have some better landing page with latest info.",
          "createdAt": "2022-03-18T01:23:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-18T01:23:53Z",
          "id": "IC_kwDODI9FZc4_5Fvo"
        },
        {
          "author": "Thefrank",
          "body": "With almost a month of \"nightly\" builds. Here is a general look at the tests (tap to enlarge):\r\n\r\n![image](https://user-images.githubusercontent.com/1910378/162131843-8e944b95-39e6-462a-960d-ce0dfac257c5.png)\r\n\r\n\r\nDays with zero results are because the build hit the 120min failsafe. There were due to the same hanging test each time:\r\n\r\n`System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.SendMailAsync_CanBeCanceled_CancellationToken', Elapsed: 01:26:28`\r\n\r\nTests with intermittent failures: \r\n![image](https://user-images.githubusercontent.com/1910378/162132467-f2d7b91f-9a4e-445c-9d58-cfc25da86637.png)\r\n\r\n\r\nTests that always fail: There are too many individual ones to show in a screenshot and does it copy/paste well from the site\r\n\r\n**so if you are the type of person that likes this sort of stuff then PLEASE let me know so I can add you on to the azure devops repo.** \r\n\r\nBefore the end of the month I will be moving the jail used to build this either to 12.3 or 13.1. Thoughts? Either way the results for 12.2 might not be valid after that point ;)",
          "createdAt": "2022-04-07T06:23:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-17T15:55:04Z",
                "user": "ma499"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-22T04:19:05Z",
                "user": "Szeraax"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-04T11:32:10Z",
                "user": "marcinsmialek"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-18T11:54:04Z",
                "user": "akhramov"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOCdbgxg=="
          },
          "updatedAt": "2022-04-07T06:23:53Z",
          "id": "IC_kwDODI9FZc5BCUBq"
        },
        {
          "author": "wfurt",
          "body": "Thanks @Thefrank for sharing. There are some flaky networking tests in main but the set you posted seems different. It would be interesting to look at the failures to see if that is something truly FreeBSD specific or if it is just timing difference. It seems like some failures are 20+ so we should look at them first.  ",
          "createdAt": "2022-04-11T16:15:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-17T02:43:53Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-22T04:19:04Z",
                "user": "Szeraax"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-04T11:32:06Z",
                "user": "marcinsmialek"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-16T20:08:16Z",
                "user": "leandroscardua"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOCdEpLA=="
          },
          "updatedAt": "2022-04-11T16:15:43Z",
          "id": "IC_kwDODI9FZc5BSFkz"
        },
        {
          "author": "nkosi23",
          "body": "It looked like we had plenty of time before us just after we missed the .NET 6 release but now I am worried we may end up missing the .NET 7 release as well :laughing:  \r\n\r\nWhat would be a summary of the items that must be completed at this point to get this effort in a ready state? Maybe this will make it easier for people to contribute based on their technical abilities. \r\n\r\nWhile the binaries from @Thefrank and @Servarr do the job, dotnet is huge and continually catching up with things being broken upstream will be too much of a burden for them. For sustainability we really need to land some degree of official support upstream before we all lack the time and motivation to hunt down commits when something breaks in a nasty manner.",
          "createdAt": "2022-05-29T18:37:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-29T18:37:28Z",
          "id": "IC_kwDODI9FZc5D-rEZ"
        },
        {
          "author": "sporkman",
          "body": "I'm a FreeBSD sysadmin (not a programmer) and at home I do have a bit of a lab and also use all the \"*arr\" stuff regularly. I have a fair amount of space/resources on my esxi box to be able to spin up whatever would be helpful, and also have a few colo'd boxes that I could setup jails for developers who need a FreeBSD environment to work in.",
          "createdAt": "2022-05-29T20:34:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-05-29T21:33:37Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2022-05-29T23:56:34Z",
                "user": "greggyb"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCfJ-sQ=="
          },
          "updatedAt": "2022-05-29T20:34:59Z",
          "id": "IC_kwDODI9FZc5D-vX3"
        },
        {
          "author": "Thefrank",
          "body": "Crossbuilds build (without patches) as of net7p4. That tag will build a full SDK too.\r\n\r\nAs for just runtime...\r\n\r\nNative builds build (without patches) as of [checks CI] 5ecaae992806a2d422157a095a63efb467365f54. failures started after that (but before?) d0d7c30bbf19bae9d70343e6bb7d641dfb4e6848. The downside of only doing nightly builds means I have some bisecting to do at some point.\r\n\r\nNow it throws this during restore:\r\n\r\n`.dotnet/sdk/6.0.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(90,5): error NETSDK1094: (NETCORE_ENGINEERING_TELEMETRY=Restore) Unable to optimize assemblies for performance: a valid runtime package was not found. Either set the PublishReadyToRun property to false, or use a supported runtime identifier when publishing.`",
          "createdAt": "2022-05-30T03:51:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-30T03:51:49Z",
          "id": "IC_kwDODI9FZc5D_SJK"
        },
        {
          "author": "ta264",
          "body": "I think I ran into this building for linux-x86. I think you need to use this sed line to remove a config line:\r\n<https://github.com/Servarr/dotnet-linux-x86/blob/4bdff1ee85a1adddda0eea570218d799f84c169c/azure-pipelines.yml#L77>",
          "createdAt": "2022-05-30T05:42:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-30T05:42:34Z",
          "id": "IC_kwDODI9FZc5D_gsc"
        },
        {
          "author": "sec",
          "body": "Hi,\r\nI did native build of net7p4 runtime and aspnet under FreeBSD without major patches (just bunch of versions change to match bootstrapped SDK etc. + aspnet patches to match SDK version in some projects as we don't have previous SDK's) and got working SDK (will put it into release in few mins).\r\n\r\nedit: release up.",
          "createdAt": "2022-06-02T10:13:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-07T08:20:29Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCgh44Q=="
          },
          "updatedAt": "2022-06-02T10:21:39Z",
          "id": "IC_kwDODI9FZc5EOpDw"
        },
        {
          "author": "Thefrank",
          "body": "my issue is not building from tags (p4 from tag builds natively with only minor version patches). \r\nIt turns out starting with the above listed commit, net7 will no longer build with net6 as bootstrap. you need SDK >= net7p3. The valid package thing while initially misleading to me did end me up in the right place.",
          "createdAt": "2022-06-06T21:12:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-06T21:12:02Z",
          "id": "IC_kwDODI9FZc5EbBza"
        },
        {
          "author": "nkosi23",
          "body": "At this point what does Microsoft expect from this effort to provide official FreeBSD support? In which state do we need to take things? A **specific and official** target like: setting up a working Azure pipeline with such and such bootstrapping would be helpful. \r\n\r\nI've been feeling that we are lacking sort of a goalpost here, but i've just realized that this clarity should, must and can only be provided by the core team. The hard work or getting things to build with clean patches has been done, at this point the core team needs to step up their commitment to this effort, at the very list by providing clear goalposts, and championing this thread (ie. being more involved in these discussions) to guide us until we take things where they need us to take them. Otherwise we'll go around in circles with no clear goal and visibility.\r\n\r\nThe SDK and runtime are already able to be built in various ways, I think at this point the core team should provide us a specific list of outstanding items that they need to see completed (if there is any), **and  commit** to supporting FreeBSD once these items are met. There is only so much the community can do without upstream commitment and I think we may have reached this limit.",
          "createdAt": "2022-06-08T09:17:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2022-06-08T11:04:29Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-08T11:31:22Z",
                "user": "vborovikov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-08T11:52:35Z",
                "user": "RokeJulianLockhart"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-09T23:13:54Z",
                "user": "ma499"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOChJoiQ=="
          },
          "updatedAt": "2022-06-08T09:17:30Z",
          "id": "IC_kwDODI9FZc5EhpKa"
        },
        {
          "author": "jkotas",
          "body": "Microsoft does not have plans to provide Microsoft built and supported FreeBSD .NET runtime binaries in foreseeable future. I am sorry I know that this is not what you wanted to hear.\r\n\r\nMy suggested goal posts for this effort are:\r\n1. System that creates bootstrap CLI for FreeBSD that matches recent .NET runtime. It can use a combination of cross-compilation of dotnet/runtime repro and reusing managed binaries built for other OS for everything else. It may be a good idea to snap to preview, rc and release labels to avoid chasing issues that have nothing to do with FreeBSD.\r\n2. Official FreeBSD port based on https://github.com/dotnet/source-build/ that uses bootstrap CLI created in previous step.\r\n3. System that runs tests on FreeBSD, and process to distribute and fix FreeBSD-specific issues found by this system. https://github.com/dotnet/runtime/issues/14537#issuecomment-1091125354 looks close. If you would like to, you can use dotnet/runtime repo to file the FreeBSD specific issues. There is a bunch of them already: https://github.com/dotnet/runtime/issues?q=is%3Aissue+is%3Aopen+label%3Aos-FreeBSD .",
          "createdAt": "2022-06-08T15:55:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2022-06-09T23:14:03Z",
                "user": "ma499"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOChJolw=="
          },
          "updatedAt": "2022-06-08T15:55:19Z",
          "id": "IC_kwDODI9FZc5EjSY4"
        },
        {
          "author": "arrowd",
          "body": "As before, I can look into\r\n\r\n> 2. Official FreeBSD port\r\n\r\nif I'm provided that CLI thing, or whatever else is needed.",
          "createdAt": "2022-06-08T16:26:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-08T16:26:49Z",
          "id": "IC_kwDODI9FZc5EjalM"
        },
        {
          "author": "DDHF22",
          "body": "> Microsoft does not have plans to provide Microsoft built and supported FreeBSD .NET runtime binaries in foreseeable future. I am sorry I know that this is not what you wanted to hear.\r\n\r\nI'm not sure if this is a proper channel to ask, but as you stated the above,  I try asking:\r\n\r\n- What is the rationale behind the decision ? Is FreeBSD to small, is the BSD license a problem, ... ? We are a lot of people that would love to run PowerShell on FreeBSD and for that .NET is a prerequisite. \r\n\r\n- Is there a general - maybe loose - guideline to which OS'es MS support ?\r\n\r\nAlso as I understand Azure is supporting FreeBSD VM's so I guess PWSH/.NET would come handy for administrative purposes :-)\r\n\r\nThanks\r\nClaus",
          "createdAt": "2022-06-10T12:47:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T12:55:24Z",
          "id": "IC_kwDODI9FZc5Erw0f"
        },
        {
          "author": "jkotas",
          "body": "> What is the rationale behind the decision? Is FreeBSD to small, is the BSD license a problem, ... ?\r\n\r\nOpportunity cost. We believe that the Microsoft .NET team time is better spent elsewhere. FreeBSD being relatively small compared to Linux is a factor. BSD license is not a problem at all.\r\n\r\nWe have ongoing investment in making it easier to build custom .NET distros. https://github.com/orgs/dotnet/teams/distro-maintainers is a discussion channel dedicated to this topic.",
          "createdAt": "2022-06-10T14:46:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-10T14:49:10Z",
                "user": "DDHF22"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-10T18:02:35Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-12T22:43:53Z",
                "user": "RokeJulianLockhart"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOChZ0pA=="
          },
          "updatedAt": "2022-06-10T14:46:44Z",
          "id": "IC_kwDODI9FZc5EsN55"
        },
        {
          "author": "DDHF22",
          "body": "Thanks for the answer!\r\n\r\n>https://github.com/orgs/dotnet/teams/distro-maintainers\r\n\r\nGives 404 !\r\n\r\nhttps://github.com/orgs/dotnet/teams redirects to https://github.com/dotnet\r\n\r\n??",
          "createdAt": "2022-06-10T16:13:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T16:14:26Z",
          "id": "IC_kwDODI9FZc5Esh1m"
        },
        {
          "author": "filipnavara",
          "body": "> Thanks for the answer!\r\n> \r\n> > https://github.com/orgs/dotnet/teams/distro-maintainers\r\n> \r\n> Gives 404 !\r\n\r\nThat's access rights issue. It exists and I can access it but I do have some additional right within the dotnet org. (cc @richlander)",
          "createdAt": "2022-06-10T16:18:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T16:19:16Z",
          "id": "IC_kwDODI9FZc5Esi1x"
        },
        {
          "author": "DDHF22",
          "body": ">That's access rights issue. \r\n\r\nGet it!\r\nIs there another URL or is that an internal forum only.",
          "createdAt": "2022-06-10T16:22:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T16:22:42Z",
          "id": "IC_kwDODI9FZc5EsjsN"
        },
        {
          "author": "richlander",
          "body": "I'm looking into this. I created this team (and some others).\r\n\r\nThe goal is two-part:\r\n\r\n- Enable a single place for folks to have conversations on specific topics. Issues don't have good groupings. Teams have a discussion feature, which is really nice.\r\n- Push as much internal conversation at MS from Teams/Mail to GH.\r\n\r\nI didn't realize how the GH teams permissions model works. There is zero desire to make them exclusive. I'm asking for some guidance from GH on how to proceed.\r\n\r\n",
          "createdAt": "2022-06-10T18:02:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-12T22:44:24Z",
                "user": "RokeJulianLockhart"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOChZ0rw=="
          },
          "updatedAt": "2022-06-10T18:02:11Z",
          "id": "IC_kwDODI9FZc5Es2UE"
        },
        {
          "author": "Thefrank",
          "body": "If there is no official support for FreeBSD does that mean that FreeBSD will be getting removed from runtime CI system? If it is not getting removed can we get some of the missing segments added in (e.g., https://github.com/dotnet/runtime/issues/57487 -> https://github.com/dotnet/runtime/pull/69715 PR waiting for merge)?\r\n\r\nThe \"Helix\" system used for tests seems bespoke and it does not appear that the community would be able to add FreeBSD to it.\r\n\r\nAs for tests, I have self-hosted pipeline setup that currently does a build+test run daily. I need still need to find the time to make sure I have everything setup correctly to make safe for public use but in the mean time if anyone wants access to it, drop me an email!\r\n\r\n",
          "createdAt": "2022-06-10T18:27:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T18:27:39Z",
          "id": "IC_kwDODI9FZc5Es6_i"
        },
        {
          "author": "jkotas",
          "body": "> If there is no official support for FreeBSD does that mean that FreeBSD will be getting removed from runtime CI system?\r\n\r\nFreeBSD build is not getting removed from the runtime CI system. We do support community targets by building them in CI to catch build breaks. You can find number of lanes in the CI that are building targets that do not have official Microsoft support, FreeBSD is not the only one. We are paying for this level of validation as a service to the .NET runtime community.\r\n\r\n> The \"Helix\" system used for tests seems bespoke and it does not appear that the community would be able to add FreeBSD to it.\r\n\r\nThere is a lot of tests running on each PR and in more extensive rolling validation. Adding a new OS to this validation system is non-trivial cost both in infrastructure (a lot of machines) and human labor (analyzing the results, fixing the issues found). It is more than we (Microsoft) are willing to pay as a service to the community.\r\n\r\n> As for tests, I have self-hosted pipeline setup that currently does a build+test run daily.\r\n\r\nSounds great! Thank you for setting it up.",
          "createdAt": "2022-06-10T20:31:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-12T22:45:03Z",
                "user": "RokeJulianLockhart"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOChZ0vQ=="
          },
          "updatedAt": "2022-06-10T20:31:51Z",
          "id": "IC_kwDODI9FZc5EtRPg"
        },
        {
          "author": "sec",
          "body": "@jkotas \r\n> 2. Official FreeBSD port based on https://github.com/dotnet/source-build/ that uses bootstrap CLI created in previous step.\r\n\r\nThat's not possible (not the last time I've checked), as (without extra patches) this require not only 6.x (and looks like in newest also 7 preview) but previous sets of SDK's (like 3.x), BUT ALSO there's also some minor problems with doing that (like it's expecting sed to be gnu-sed). Should we push effort in this area to have builds some using https://github.com/dotnet/installer ?\r\n\r\n@arrowd \r\n> > 2. Official FreeBSD port\r\n> \r\n> if I'm provided that CLI thing, or whatever else is needed.\r\n\r\nWe have the bootstrapped (or even native build) SDK, that we can use. But it's not official. And using that, you can build SDK. Look above :)\r\n\r\nI agree with @nkosi23 - I feel like we're moving in circle :)\r\n\r\n",
          "createdAt": "2022-06-13T15:22:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-13T15:22:49Z",
          "id": "IC_kwDODI9FZc5EyZH8"
        },
        {
          "author": "jkotas",
          "body": "> That's not possible (not the last time I've checked), as (without extra patches) this require not only 6.x (and looks like in newest also 7 preview) but previous sets of SDK's (like 3.x)\r\n\r\nSource build only needs bootstrapper SDK that matches the current version. For example, .NET 7 source build will need .NET 7 bootstrapper SDK only. Where do you see the dependencies on previous set of SDK's (like 3.x)?\r\n\r\n> BUT ALSO there's also some minor problems with doing that (like it's expecting sed to be gnu-sed).\r\n\r\nWe will be happy to accept patches for issues like this.",
          "createdAt": "2022-06-13T15:29:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-13T16:18:17Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-14T22:24:54Z",
                "user": "RokeJulianLockhart"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCh2hNQ=="
          },
          "updatedAt": "2022-06-13T15:29:55Z",
          "id": "IC_kwDODI9FZc5EybFW"
        },
        {
          "author": "wfurt",
          "body": "I also feel we should focus on source-build and contribute to it as we see need. And separate the problem of bootstrap from the \"official\" binaries. ",
          "createdAt": "2022-06-13T16:20:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-13T16:20:18Z",
          "id": "IC_kwDODI9FZc5EyoUx"
        },
        {
          "author": "sec",
          "body": "Unless I'm doing something wrong, but with https://github.com/dotnet/installer/tree/v7.0.100-preview.4.22252.9, it require `7.0.100-preview.2.22153.17` - extracting this by hand into `.dotnet` and running `./build.sh /p:ArcadeBuildTarball=true /p:TarballDir=/home/root/sources` it fails with:\r\n```\r\ndotnet-install: Attempting to download using primary link https://dotnetcli.azureedge.net/dotnet/Runtime/2.1.0/dotnet-runtime-2.1.0-freebsd-x64.tar.gz\r\n```\r\n\r\nAnd this runtime is required (I belive) during aspnet build - which can be handled by current runtime - I'm using this patch https://github.com/sec/dotnet-core-freebsd-source-build/blob/7.0.100-preview.4/patches/aspnetcore.patch while doing my native builds to get around that.\r\n\r\nBut getting back to `installer`, we can go past that by adding simple `exit 0` inside install script and it will go ahead and create tarball. Now with the tarball we should be able to `./prep.sh --bootstrap` and `./build.sh` according to instructions.\r\n\r\nNow that prep step, will download some private artifcats and then fail because of missing runtime/sdk for FreeBSD, we can run it again (first extract custom SDK into .dotnet) and it will download/repack something.\r\n\r\nMoving to build, we can use custom SDK for building ex. `./build.sh --with-sdk /root/installer/.dotnet`. Doing that (first I've replaced bsd sed with gnu-sed system-wide :)) I even tried with `--with-packages` giving feed as full SDK output from native build, it failed with:\r\n```\r\nRegularExpressions.4.3.1.csproj : error NU1102: Unable to find package System.Runtime.Extensions with version (>= 4.3.1)\r\n    /usr/home/root/sources/src/source-build-reference-packages.3147e7ae7ba3ba499d4a2d18c8a4d89bab6769d0/artifacts/source-build/self/src/src/referencePackages/src/system.text.regularexpressions/4.3.1/System.Text.RegularExpressions.4.3.1.csproj : error NU1102:   - Found 2 version(s) in previously-source-built [ Nearest version: 4.3.0 ]\r\n```\r\n\r\nFunny thing is, inside `global.json` there's a `7.0.100-preview.3.22179.4` used, extracting that inside `.dotnet` and running `build.sh` fails with:\r\n```\r\n  /usr/home/root/sources/Directory.Build.props(9,3): error : Unable to find package Microsoft.DotNet.Arcade.Sdk. No packages exist with this id in source(s): nuget.org\r\n\r\n\r\n\"/usr/home/root/sources/build.proj\" (default target) (1) ->\r\n  /usr/home/root/sources/Directory.Build.props(9,78): error MSB4236: The SDK 'Microsoft.DotNet.Arcade.Sdk' specified could not be found. [/usr/home/root/sources/build.proj]\r\n```\r\n\r\nAnd this is where I have no clue where/how to proced.\r\n\r\n\r\n",
          "createdAt": "2022-06-13T16:54:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-13T16:54:35Z",
          "id": "IC_kwDODI9FZc5EyxGu"
        },
        {
          "author": "jkotas",
          "body": "> ./build.sh /p:ArcadeBuildTarball=true /p:TarballDir=/home/root/sources\r\n\r\nBuilding the source tarball (step 1) only works on Linux today. The remaining steps should work on FreeBSD (with bootstrap SDK, maybe with some small patches).\r\n\r\nI would recommend running the step 1 on Linux, verifying that you can do the build from the source tarball produced by step 1 on Linux, and then trying to build the source tarball on FreeBSD.\r\n\r\nWe should really have the source tarball produced by step 1 published somewhere anybody can download it. We plan to fix that in .NET 8.",
          "createdAt": "2022-06-13T20:26:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-13T20:26:41Z",
          "id": "IC_kwDODI9FZc5Ezqsc"
        },
        {
          "author": "sec",
          "body": "Tried to fully build under Linux and in the end it failed with the same error... looks like some packages are not downloaded during tarball creation. Opened https://github.com/dotnet/installer/issues/13963 for this.",
          "createdAt": "2022-06-14T10:14:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-14T13:54:45Z",
                "user": "wfurt"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOChvjiA=="
          },
          "updatedAt": "2022-06-14T10:14:50Z",
          "id": "IC_kwDODI9FZc5E18Vw"
        },
        {
          "author": "sec",
          "body": "Looks like source-build is not ready yet for newest releases and old one is broken, so building it even on Linux is not that easy as it looks like :) Good that native builds of each repo still works. One thing I noticed is that, with `preview.5` Crossgen2 package is no longer generated (due to https://github.com/dotnet/runtime/pull/67636/files#diff-115c40d5f6cdfb8ebea1490c13581e76b60c3430cbf13f45c270fc5ec383daffR7) - so this one needs custom patch when building.\r\n\r\n@jkotas  Maybe this was asked and/or answered before - but would it be possible to have crosscompiled SDK for FreeBSD be build and/or hosted somewhere official by Microsoft? What would be needed to make this happen?",
          "createdAt": "2022-06-20T11:30:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-20T11:30:00Z",
          "id": "IC_kwDODI9FZc5FKT4A"
        },
        {
          "author": "jkotas",
          "body": "> @jkotas Maybe this was asked and/or answered before - but would it be possible to have crosscompiled SDK for FreeBSD be build and/or hosted somewhere official by Microsoft? What would be needed to make this happen?\r\n\r\nThe best answer that I have for that is FreeBSD project in https://github.com/dotnet/runtimelab. It is not exactly official build, but it is at least no running under somebody's personal account.\r\n\r\nruntimelab projects are forks of dotnet/runtime and the CI for each project can be customized. It should be possible to make it produce crosscompiled SDK by patching runtime in Linux .NET SDK with live built binaries as I have suggested in https://github.com/dotnet/runtime/issues/14537#issuecomment-1150101048. \r\n\r\n@wfurt setup the runtime FreeBSD project in runtimelab, but did not have a chance to make it work.",
          "createdAt": "2022-06-20T12:23:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-20T19:55:02Z",
                "user": "RokeJulianLockhart"
              },
              {
                "content": "HEART",
                "createdAt": "2022-06-21T00:56:15Z",
                "user": "ghuntley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCixmWg=="
          },
          "updatedAt": "2022-06-20T12:23:14Z",
          "id": "IC_kwDODI9FZc5FKggJ"
        },
        {
          "author": "wfurt",
          "body": "I can certainly put some more effort into it. It mostly died because of lack of attention. The commit bar is much lower so we can even take changes not suitable for official codebase.",
          "createdAt": "2022-06-21T09:07:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-21T09:07:09Z",
          "id": "IC_kwDODI9FZc5FOqsX"
        },
        {
          "author": "sec",
          "body": "On the bright side - I was able to perform source-build of latest supported tag 6.0.x (there were some weird errors during the process, but was able to finish). In the end, SDK didn't worked because it was looking for `freebsd.13-x64` and not `freebsd.x64` runtime - but I guess I didn't patched something enough or SDK was quite old (as doing the same build but using raw repositories works well). Anyway...\r\n\r\nDoes anyone could point me to some (up-to-date) docs regarding adding new RID and doing cross compilation (so I will get past `error NETSDK1083: The specified RuntimeIdentifier 'freebsd-arm64' is not recognized` when trying to build) ?\r\nI've found some docs, but looking and trying them is not up-to-date as it looks.\r\n\r\nI would like to get freebsd-arm64 - correct me if I'm wrong, it should be something like, for `runtime` repo only atm:\r\n- add new RIDs to some files inside repo\r\n- prepare crossrootfs (I saw how it's done for freebsd inside arcade scripts for amd64, I can follow the same for arm64)\r\n- under freebsd host perform `-arch arm64 -cross` build using already working SDK\r\n\r\nWill that work or it's not that simple?",
          "createdAt": "2022-06-22T13:30:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T13:30:29Z",
          "id": "IC_kwDODI9FZc5FU4Qw"
        },
        {
          "author": "wfurt",
          "body": "search for anything related to portable build. That one should choose RID without specific version. \r\nFor the arm64, I assume that is only for FreeBSD 13 and above? I think we can get it into main for 7.x",
          "createdAt": "2022-06-22T13:35:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T13:35:07Z",
          "id": "IC_kwDODI9FZc5FU5jO"
        },
        {
          "author": "sec",
          "body": "Yes, it should go for 13 as it's Tier 1 supported.\r\nTried `--portablebuild`` option, only diffrence is that `freebsd.13-arm64` vs `freebsd-arm64` unknown rid message :) will look/dive deeper I think :)",
          "createdAt": "2022-06-22T13:58:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T13:58:38Z",
          "id": "IC_kwDODI9FZc5FVAg8"
        },
        {
          "author": "wfurt",
          "body": "The portable was meant for `freebsd.13-x64` to move to `freebsd-x64`. Arm64 will need some more work. ",
          "createdAt": "2022-06-22T14:10:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T14:10:15Z",
          "id": "IC_kwDODI9FZc5FVEyS"
        },
        {
          "author": "josteink",
          "body": "> I would like to get freebsd-arm64 - correct me if I'm wrong, it should be something like, for `runtime` repo only atm:\r\n\r\nYou may have to add some manual CPU register-mapping for FreeBSD ARM deep down in HAL too. \r\n\r\nAt least I had to add those for FreeBSD x64 back in the days. \r\n\r\nIt’s just forcing the compiler though. It will let you know some things are missing. \r\n\r\n**Edit:** Link to relevant commit: https://github.com/dotnet/runtime/commit/3b6f09cdc36e55dd71e37dfde94a7695a274921a",
          "createdAt": "2022-06-22T14:39:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T14:46:41Z",
          "id": "IC_kwDODI9FZc5FVOSx"
        },
        {
          "author": "sec",
          "body": "What I'm asking is where to start, such a simple thing (I think) as adding new RID to existing SDK, well, it's not that simple.\r\n\r\nI have found https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/guide-for-porting.md, it says `Add a new target architecture to the build environment, and make it build.` :)",
          "createdAt": "2022-06-22T16:00:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T16:00:22Z",
          "id": "IC_kwDODI9FZc5FVpnD"
        },
        {
          "author": "jkotas",
          "body": "The place to add new RIDs is https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props#L181 and rebuild the json files in this directory.",
          "createdAt": "2022-06-22T16:12:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T16:12:43Z",
          "id": "IC_kwDODI9FZc5FVuYH"
        },
        {
          "author": "sec",
          "body": "Ok, I got to the point, that failed with:\r\n```\r\n  -- Detecting CXX compile features - done\r\n  CMake Error at /root/runtime/eng/native/configuretools.cmake:37 (message):\r\n    Unable to find toolchain executable.  Name: objcopy, Prefix:\r\n    aarch64-freebsd-.\r\n```\r\n\r\nHad to change toolchain to `aarch64-freebsd` in `eng/common/cross/toolchain.cmake` , made sysroot with FreeBSD13/aarch64 with all needed libraries/headers (I think). I'm not an expert on this topic, maybe some hints on how to go further? If this is not a right place to ask, where's the best place to ask for help with that subject?",
          "createdAt": "2022-06-22T18:46:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-22T18:46:00Z",
          "id": "IC_kwDODI9FZc5FWVmX"
        },
        {
          "author": "Thefrank",
          "body": "From what I remember, FreeBSD cross compiles are done using clang and setting a triple (e.g., `x86_64-unknown-freebsd12`). \r\n\r\n~~So something like `armv7a-unknown-freebsd13` might work~~ NOPE!\r\n\r\nActually found a better list: https://llvm.org/doxygen/Triple_8h_source.html\r\n\r\nso `aarch64-portbld-freebsd13.0` should be the \"more correct\" way if you wanted portable under FreeBSD 13.0 with `aarch64`. `arm64` is also supported. You can get a general idea of the supports with `llc --version`\r\n\r\nedit2:\r\nthe `toolchain.cmake` seems to think that anything `arm64` will be something linux-y:\r\n\r\n```\r\nfrank@buildbot:~/runtime$ ROOTFS_DIR=/home/frank/arcade/.tools/rootfs/aarch64/ ./src/coreclr/build-runtime.sh -arm64 -debug clang12 -cross -os FreeBSD\r\nCommencing CoreCLR Repo build\r\n__DistroRid: freebsd-arm64\r\nSetting up directories for build\r\nChecking prerequisites...\r\nCommencing build of \"install\" target in \"CoreCLR component\" for FreeBSD.arm64.Debug in /home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug\r\nInvoking \"/home/frank/runtime/eng/native/gen-buildsys.sh\" \"/home/frank/runtime/src/coreclr\" \"/home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug\" arm64 clang12 Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DFEATURE_DISTRO_AGNOSTIC_SSL=1 \r\n~/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug ~/runtime\r\nNot searching for unused variables given on the command line.\r\nloading initial cache file /home/frank/runtime/eng/native/tryrun.cmake\r\n-- The C compiler identification is Clang 12.0.0\r\n-- The CXX compiler identification is Clang 12.0.0\r\n-- Check for working C compiler: /usr/bin/clang-12\r\n-- Check for working C compiler: /usr/bin/clang-12 -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/clang++-12\r\n-- Check for working CXX compiler: /usr/bin/clang++-12 -- broken\r\nCMake Error at /usr/share/cmake-3.16/Modules/CMakeTestCXXCompiler.cmake:53 (message):\r\n  The C++ compiler\r\n\r\n    \"/usr/bin/clang++-12\"\r\n\r\n  is not able to compile a simple test program.\r\n\r\n  It fails with the following output:\r\n\r\n    Change Dir: /home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug/CMakeFiles/CMakeTmp\r\n    \r\n    Run Build Command(s):/usr/bin/make cmTC_38d79/fast && /usr/bin/make -f CMakeFiles/cmTC_38d79.dir/build.make CMakeFiles/cmTC_38d79.dir/build\r\n    make[1]: Entering directory '/home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug/CMakeFiles/CMakeTmp'\r\n    Building CXX object CMakeFiles/cmTC_38d79.dir/testCXXCompiler.cxx.o\r\n    /usr/bin/clang++-12 --target=aarch64-freebsd --sysroot=/home/frank/arcade/.tools/rootfs/aarch64/     -o CMakeFiles/cmTC_38d79.dir/testCXXCompiler.cxx.o -c /home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug/CMakeFiles/CMakeTmp/testCXXCompiler.cxx\r\n    Linking CXX executable cmTC_38d79\r\n    /usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_38d79.dir/link.txt --verbose=1\r\n    /usr/bin/clang++-12 --target=aarch64-freebsd --sysroot=/home/frank/arcade/.tools/rootfs/aarch64/      -fuse-ld=lld -fuse-ld=lld  CMakeFiles/cmTC_38d79.dir/testCXXCompiler.cxx.o  -o cmTC_38d79 \r\n    ld.lld: error: unable to find library -lstdc++\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    make[1]: *** [CMakeFiles/cmTC_38d79.dir/build.make:87: cmTC_38d79] Error 1\r\n    make[1]: Leaving directory '/home/frank/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug/CMakeFiles/CMakeTmp'\r\n    make: *** [Makefile:121: cmTC_38d79/fast] Error 2\r\n ```\r\n",
          "createdAt": "2022-06-22T19:35:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-23T01:26:17Z",
          "id": "IC_kwDODI9FZc5FWf4V"
        },
        {
          "author": "sec",
          "body": "I managed to get past those error, by doing changes in CMake files to find correct binaries (no idea why it work ok, when not doing cross compile, looks like magic to me), managed to start the build, but quick fail\r\n```\r\n  [  2%] Building CXX object pal/src/CMakeFiles/coreclrpal.dir/cruntime/misc.cpp.o\r\n  In file included from /root/runtime/src/coreclr/pal/src/cruntime/misc.cpp:34:\r\n  In file included from /usr/local/llvm10/lib/clang/10.0.1/include/xmmintrin.h:13:\r\n  /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h:33:5: error: use of undeclared identifier '__builtin_ia32_emms'; did you mean '__builtin_isless'?\r\n      __builtin_ia32_emms();\r\n      ^\r\n  /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h:33:5: note: '__builtin_isless' declared here\r\n  /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h:33:25: error: too few arguments to function call, expected 2, have 0\r\n      __builtin_ia32_emms();\r\n                          ^\r\n  /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h:50:19: error: use of undeclared identifier '__builtin_ia32_vec_init_v2si'\r\n      return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);\r\n                    ^\r\n  /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h:67:12: error: use of undeclared identifier '__builtin_ia32_vec_ext_v2si'\r\n```\r\n\r\nI don't think this file should be included as `ia32` is not `aarch64` - maybe I've messed up with cmakelist files... hard to tell.\r\n\r\n@Thefrank to get pass ```ld.lld: error: unable to find library -lstdc++``` you need `llvm10` on the rootfs and extract full FreeBSD base system - the script from arcade used to build fs for that is IMHO not up-to-date or it works diffrently undex Linux.\r\n\r\nSo it looks like doing cross compile on FreeBSD host is not that easy - wodner if trying to do cross compile on Linux host to FreeBSD-aarch64 would be possible ? :)\r\n\r\nedit: nope, error under Linux host are the same.",
          "createdAt": "2022-06-23T13:10:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-23T14:56:23Z",
          "id": "IC_kwDODI9FZc5FZzGF"
        },
        {
          "author": "Thefrank",
          "body": "The crossroot stuff from arcade is what is used for docker image creation for crossbuilds. it can be manually used on something like Linux to make a crossrootfs (via `build-rootfs.sh`) that is usable for a crossbuild if not using docker. What issues exist with it or what areas can be improved? It has been generating images for docker for 1+yr with only the need to update either the base images or pkgs that it uses. I have also used it on AMD64 Ubuntu to make AMD64 FreeBSD dotnet builds both with and without docker. ",
          "createdAt": "2022-06-23T23:10:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-23T23:10:55Z",
          "id": "IC_kwDODI9FZc5FcHfF"
        },
        {
          "author": "sec",
          "body": "Maybe it's not crossfs issue, but maybe something in cmakefiles then. Looks like it's including x86_64 header file `xmmintrin.h` (as host is amd64) and compile fail. I think build assume that FreeBSD is always amd64 and when doing crosscompile... Maybe someone expierenced with configure flow would be able to give some hints?\r\n\r\n@Thefrank you think you could try to target FreeBSD-arm64 from your working env?\r\n\r\nBy doing some simple changes (like don't set HOST_AMD64 and set HOST_ARM64), under FreeBSD-arm64 machine I got to the point:\r\n```\r\n[  4%] Building C object libs-native/System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/usr/home/sec/runtime/src/native/external/brotli/enc/encode.c.o\r\n[  4%] Linking CXX static library libcoreclrminipal.a\r\n[  4%] Building CXX object pal/src/CMakeFiles/coreclrpal.dir/debug/debug.cpp.o\r\nIn file included from /usr/home/sec/runtime/src/coreclr/pal/src/debug/debug.cpp:32:\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:450:1: error: unknown type name 'fpsimd_context'\r\nfpsimd_context* GetNativeSigSimdContext(native_context_t *mc)\r\n^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:456:9: error: unknown type name 'fpsimd_context'\r\n        fpsimd_context* fp = reinterpret_cast<fpsimd_context *>(&mc->uc_mcontext.__reserved[size]);\r\n        ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:456:47: error: unknown type name 'fpsimd_context'\r\n        fpsimd_context* fp = reinterpret_cast<fpsimd_context *>(&mc->uc_mcontext.__reserved[size]);\r\n                                              ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:456:82: error: no member named '__reserved' in '__mcontext'\r\n        fpsimd_context* fp = reinterpret_cast<fpsimd_context *>(&mc->uc_mcontext.__reserved[size]);\r\n                                                                 ~~~~~~~~~~~~~~~ ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:458:30: error: use of undeclared identifier 'FPSIMD_MAGIC'\r\n        if(fp->head.magic == FPSIMD_MAGIC)\r\n                             ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:460:46: error: use of undeclared identifier 'fpsimd_context'\r\n            _ASSERTE(fp->head.size >= sizeof(fpsimd_context));\r\n                                             ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:461:69: error: no member named '__reserved' in '__mcontext'\r\n            _ASSERTE(size + fp->head.size <= sizeof(mc->uc_mcontext.__reserved));\r\n                                                    ~~~~~~~~~~~~~~~ ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/dbgmsg.h:362:35: note: expanded from macro '_ASSERTE'\r\n#define _ASSERTE(expr) do { if (!(expr)) { ASSERT(\"Expression: \" #expr \"\\n\"); } } while(0)\r\n                                  ^~~~\r\nIn file included from /usr/home/sec/runtime/src/coreclr/pal/src/debug/debug.cpp:32:\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:472:28: error: use of undeclared identifier 'fpsimd_context'\r\n    } while (size + sizeof(fpsimd_context) <= sizeof(mc->uc_mcontext.__reserved));\r\n                           ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:472:70: error: no member named '__reserved' in '__mcontext'\r\n    } while (size + sizeof(fpsimd_context) <= sizeof(mc->uc_mcontext.__reserved));\r\n                                                     ~~~~~~~~~~~~~~~ ^\r\n/usr/home/sec/runtime/src/coreclr/pal/src/include/pal/context.h:480:7: error: unknown type name 'fpsimd_context'\r\nconst fpsimd_context* GetConstNativeSigSimdContext(const native_context_t *mc)\r\n      ^\r\n10 errors generated.\r\n--- pal/src/CMakeFiles/coreclrpal.dir/debug/debug.cpp.o ---\r\n*** [pal/src/CMakeFiles/coreclrpal.dir/debug/debug.cpp.o] Error code 1\r\n\r\nmake[2]: stopped in /usr/home/sec/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug\r\n*** [all] Error code 6\r\n\r\nmake: stopped in /usr/home/sec/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug\r\n1 error\r\n\r\nmake: stopped in /usr/home/sec/runtime/artifacts/obj/coreclr/FreeBSD.arm64.Debug\r\n~/runtime\r\nFailed to build \"CoreCLR component\".\r\n```\r\n\r\nI also have access to Linux-arm64 box - I can share access to either FreeBSD or Linux one under arm if someone is willing to take a look :)",
          "createdAt": "2022-06-24T14:24:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-24T14:24:49Z",
          "id": "IC_kwDODI9FZc5FehJo"
        },
        {
          "author": "janvorli",
          "body": "During crossbuild, nothing target specific should be included or linked from the host OS, all OS headers and libraries should be coming from the rootfs. So seeing the /usr/local/llvm10/lib/clang/10.0.1/include/mmintrin.h seems to indicate that somehow the ROOTFS_DIR is ignored.",
          "createdAt": "2022-06-24T17:05:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-24T17:05:24Z",
          "id": "IC_kwDODI9FZc5FfC1p"
        },
        {
          "author": "Thefrank",
          "body": "Finally got around to moving to FreeBSD 13.1 for native building and I am running into an issue when building the mono leg:\r\n\r\n```\r\n  FAILED: mono/mini/CMakeFiles/monosgen-objects.dir/__/utils/mono-proclib.c.o \r\n  /usr/local/bin/clang11 -DHAVE_CONFIG_H -DMONO_DLL_EXPORT -I/root/runtime/artifacts/obj -I/root/runtime/src/native -I/root/runtime/artifacts/obj/mono/FreeBSD.x64.Release/mono/mini -I/root/runtime/artifacts/obj/mono/FreeBSD.x64.Release/mono/mini/../.. -I/root/runtime/artifacts/obj/mono/FreeBSD.x64.Release/mono/mini/../../mono/eglib -I/root/runtime/src/mono/mono/mini/../.. -I/root/runtime/src/mono/mono/mini/.. -I/root/runtime/src/mono/mono/mini/../eglib -I/root/runtime/src/mono/mono/mini/../sgen -I/root/runtime/src/mono/mono/mini/../eventpipe -I/root/runtime/artifacts/obj/mono/FreeBSD.x64.Release/mono/mini/eventpipe -I/root/runtime/src/native/public/. -std=gnu99 -fno-strict-aliasing -fwrapv -Wall -Wunused -Wmissing-declarations -Wpointer-arith -Wno-cast-qual -Wwrite-strings -Wno-switch -Wno-switch-enum -Wno-unused-value -Wno-attributes -Wno-format-zero-length -Wno-unused-function -Qunused-arguments -Wno-tautological-compare -Wno-parentheses-equality -Wno-self-assign -Wno-return-stack-address -Wno-constant-logical-operand -Wno-zero-length-array -Wno-asm-operand-widths -Wmissing-prototypes -Wstrict-prototypes -Wnested-externs -Werror=return-type -Werror=implicit-function-declaration -Werror=incompatible-pointer-types -O3 -DNDEBUG   -g -fPIC -fvisibility=hidden -ffp-contract=off -MD -MT mono/mini/CMakeFiles/monosgen-objects.dir/__/utils/mono-proclib.c.o -MF mono/mini/CMakeFiles/monosgen-objects.dir/__/utils/mono-proclib.c.o.d -o mono/mini/CMakeFiles/monosgen-objects.dir/__/utils/mono-proclib.c.o -c /root/runtime/src/mono/mono/utils/mono-proclib.c\r\n  /root/runtime/src/mono/mono/utils/mono-proclib.c:48:1: error: expected identifier or '('\r\n  CPU_COUNT(cpu_set_t *set)\r\n  ^\r\n  /usr/include/sys/cpuset.h:74:26: note: expanded from macro 'CPU_COUNT'\r\n  #define CPU_COUNT(p)                    ((int)__BIT_COUNT(CPU_SETSIZE, p))\r\n                                            ^\r\n  /root/runtime/src/mono/mono/utils/mono-proclib.c:48:1: error: expected ')'\r\n  /usr/include/sys/cpuset.h:74:26: note: expanded from macro 'CPU_COUNT'\r\n  #define CPU_COUNT(p)                    ((int)__BIT_COUNT(CPU_SETSIZE, p))\r\n                                            ^\r\n  /root/runtime/src/mono/mono/utils/mono-proclib.c:48:1: note: to match this '('\r\n  /usr/include/sys/cpuset.h:74:25: note: expanded from macro 'CPU_COUNT'\r\n  #define CPU_COUNT(p)                    ((int)__BIT_COUNT(CPU_SETSIZE, p))\r\n                                           ^\r\n  /root/runtime/src/mono/mono/utils/mono-proclib.c:48:1: error: expected ')'\r\n  CPU_COUNT(cpu_set_t *set)\r\n  ^\r\n  /usr/include/sys/cpuset.h:74:30: note: expanded from macro 'CPU_COUNT'\r\n  #define CPU_COUNT(p)                    ((int)__BIT_COUNT(CPU_SETSIZE, p))\r\n                                                ^\r\n  /usr/include/sys/bitset.h:264:28: note: expanded from macro '__BIT_COUNT'\r\n  #define __BIT_COUNT(_s, p) __extension__ ({                             \\\r\n                             ^\r\n  /root/runtime/src/mono/mono/utils/mono-proclib.c:48:1: note: to match this '('\r\n  /usr/include/sys/cpuset.h:74:24: note: expanded from macro 'CPU_COUNT'\r\n  #define CPU_COUNT(p)                    ((int)__BIT_COUNT(CPU_SETSIZE, p))\r\n                                          ^\r\n  3 errors generated.\r\n```\r\n\r\nRolling back the packages do not resolve this (only zlib and python38->python39 were version + ABI changes most others were just ABI changes).\r\nRolling back to 12.2 did resolve it. \r\n\r\nI was able to find 3 changes in the configure process between 12.2 and 13.1 and I have pulled these from the azure pipelines logs:\r\n\r\n12.2:\r\n```\r\n2022-08-08T00:15:24.9485810Z   -- Looking for sched_getaffinity\r\n2022-08-08T00:15:25.3873200Z   -- Looking for sched_getaffinity - not found\r\n2022-08-08T00:15:25.3874555Z   -- Looking for sched_setaffinity\r\n2022-08-08T00:15:25.8602945Z   -- Looking for sched_setaffinity - not found\r\n...\r\n2022-08-08T00:15:56.4249284Z   -- Looking for CLOCK_MONOTONIC_COARSE\r\n2022-08-08T00:15:56.6468075Z   -- Looking for CLOCK_MONOTONIC_COARSE - not found\r\n```\r\n\r\n13.1:\r\n```\r\n2022-08-09T01:51:47.2459090Z   -- Looking for sched_getaffinity\r\n2022-08-09T01:51:47.7116356Z   -- Looking for sched_getaffinity - found\r\n2022-08-09T01:51:47.7120029Z   -- Looking for sched_setaffinity\r\n2022-08-09T01:51:48.1731162Z   -- Looking for sched_setaffinity - found\r\n\r\n2022-08-09T01:52:20.2033954Z   -- Looking for CLOCK_MONOTONIC_COARSE\r\n2022-08-09T01:52:20.6793736Z   -- Looking for CLOCK_MONOTONIC_COARSE - found\r\n```\r\n\r\n(un?)interestingly similar configure changes appear during the coreclr leg but don't cause failures there. It finds: `sched_getaffinity` `sched_setaffinity` `sched_getcpu` `HAVE_STAT_NSEC` `ucol_clone` and `HAVE_CLOCK_MONOTONIC_COARSE`\r\n\r\nraw logs available upon request :)",
          "createdAt": "2022-08-09T20:19:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-09T20:19:45Z",
          "id": "IC_kwDODI9FZc5IHJgR"
        },
        {
          "author": "arrowd",
          "body": "`sched_setaffinity` et al were added in FreeBSD 13.1, but this doesn't explain the error you're getting. Can you provide some context from `mono-proclib.c`?",
          "createdAt": "2022-08-09T20:45:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-09T20:45:25Z",
          "id": "IC_kwDODI9FZc5IHSfS"
        },
        {
          "author": "sec",
          "body": "@Thefrank @arrowd  I hit the same while building newest preview, it's caused by wrong detection of CPU_COUNT, simple fix for that:\r\n```diff\r\ndiff --git a/src/mono/cmake/configure.cmake b/src/mono/cmake/configure.cmake\r\nindex 51cb315d6dc..f2c7258dadb 100644\r\n--- a/src/mono/cmake/configure.cmake\r\n+++ b/src/mono/cmake/configure.cmake\r\n@@ -156,7 +156,7 @@ check_c_source_compiles(\r\n   #include <sched.h>\r\n   int main(void)\r\n   {\r\n-    CPU_COUNT((void *) 0);\r\n+    CPU_COUNT((cpuset_t *) 0);\r\n     return 0;\r\n   }\r\n   \"\r\n```\r\n\r\nI was about to fill PR for that with doing Linux tests first, but got caught by work and didn't have time yet. Going one step further, newest asp.net core preview fails with\r\n```\r\n/mnt/resource/sec/dotnet-core-freebsd-source-build/aspnetcore/.dotnet/sdk/7.0.100-preview.5.22307.18/Sdks/Microsoft.NET.Sdk.Razor/targets/Microsoft.NET.Sdk.Razor.StaticWebAssets.Pack.targets(205,5): error : Manifest file at '/mnt/resource/sec/dotnet-core-freebsd-source-build/aspnetcore/artifacts/obj/Microsoft.AspNetCore.Components.Authorization/Release/net7.0/staticwebassets.pack.json' not found. [/mnt/resource/sec/dotnet-core-freebsd-source-build/aspnetcore/src/Components/Authorization/src/Microsoft.AspNetCore.Components.Authorization.csproj]\r\n```\r\nwithout any other errors - maybe you also got to this point?\r\n\r\nedit:\r\ngot around that by doing SDK first with current bits and some silence of one warning - native builds of newest v6 and v7 preview uploaded into releases :)\r\n\r\nfor v6 [this patch](https://github.com/sec/dotnet-core-freebsd-source-build/blob/main/patches/runtime_mono_configure.patch) was needed to get around CPU_COUNT error.",
          "createdAt": "2022-08-10T06:52:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-10T21:55:57Z",
          "id": "IC_kwDODI9FZc5IIspS"
        },
        {
          "author": "Thefrank",
          "body": "@sec that resolved the build issue under FreeBSD 13.1!\r\n\r\nCrossbuilding the newest preview works with no patching when using the freebsd 12 docker. ill look over the 13 and native builds in the next day or so\r\n\r\nedit: there is no freebsd-13-x64 docker only freebsd-12-x64 and freebsd-13-arm64",
          "createdAt": "2022-08-10T23:16:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-10T23:22:47Z",
          "id": "IC_kwDODI9FZc5INFlt"
        },
        {
          "author": "sec",
          "body": "@Thefrank Native builds are find (did latest v6 and v7 preview) under 13. I think doing cross using 12 docker should be fine - question is, as RC is almost here (I saw binaries are there) - as there are few minor patches needed for native build (don't know if those are needed also when doing crosscompile) - maybe we should make a plan to publish v7 on https://github.com/dotnet/runtimelab/ - making proper port based on those semi-official should be then easier (and let's hope the source-build can be used for offline build).",
          "createdAt": "2022-08-11T18:42:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-09-02T23:46:23Z",
                "user": "dmitrykruglov"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-09-02T23:46:30Z",
                "user": "dmitrykruglov"
              },
              {
                "content": "HEART",
                "createdAt": "2023-02-02T11:52:06Z",
                "user": "scineram"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-02-02T11:52:15Z",
                "user": "scineram"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOC1Tzgw=="
          },
          "updatedAt": "2022-08-11T18:42:59Z",
          "id": "IC_kwDODI9FZc5IQyTy"
        },
        {
          "author": "wfurt",
          "body": "I should be able to help with the runtime lab hopefully next week. I'm under the fire at the moment for 7.0 ",
          "createdAt": "2022-08-11T20:26:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-11T20:26:38Z",
          "id": "IC_kwDODI9FZc5IRK7j"
        },
        {
          "author": "Thefrank",
          "body": "For those trying to build net6 with newer docker images and getting ICU failures during the build I have backported the commit in net7+ that covers the `ucol_safeClone` / `ucol_clone`  issue (`ucol_setVariableTop` / `ucol_setMaxVariable` looks like its already covered). It can be found here: https://github.com/Thefrank/dotnet-freebsd-crossbuild/blob/main/patches/runtime_backport_icunet7_to_net6.patch please let me know if I missed anything :)\r\n\r\nWhich brings me to net3.1, namely CoreCLR. Various things still need it and I am running into two issues with building it: 1) its detection of HAVE_SET_MAX_VARIABLE and HAVE_UCOL_CLONE always fail (the same jail builds and detects those items correctly under net6 and main/ref/HEAD) and 2) there appears to have been a major overhaul of the ICU stuff between 3.1 and later versions making backporting much less simple.",
          "createdAt": "2022-09-09T21:39:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-09T21:39:50Z",
          "id": "IC_kwDODI9FZc5KDxPB"
        },
        {
          "author": "Thefrank",
          "body": "Had a bit of free time. Wanted to see if NativeAOT+FreeBSD was an easy addon using instructions from here: https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/nativeaot.md\r\n\r\nObjWriter from https://github.com/dotnet/llvm-project/tree/objwriter/12.x \r\n- This builds with no patches!\r\n- It does not seem to care about WHICH version of llvm/clang it uses\r\n- It does not make NuGet packages without patches as it assumes anythingUNIX = Linux\r\n- Tests don't seem available? I may have missed something\r\n- Everything \"runs\" so onward!\r\n\r\nRuntime from fda2fee723fef1c2c0b776978dfc26a90c72784e\r\n- Patches mostly adding FreeBSD to the lists of allowed for NativeAOT\r\n- One FreeBSD specific patch to address `clang` outside of system being named `clang##`. We don't want to be using system clang just the ports version(s)\r\n- `./build.sh Clr+Mono+Host+Libs+Packs -c Release -ci --os FreeBSD /p:OfficialBuildID=20221019.99`\r\n  - Fails in Clr leg with an error stating that ReadyToRun is not supported on this platform\r\n  - grep'ing around found nothing that appears to be directly blocking it so...\r\n- ./build.sh Clr+Mono+Host+Libs+Packs -c Release -ci --os FreeBSD /p:OfficialBuildID=20221019.99 /p:PublishReadyToRun=false\r\n  - Makes it all the way to Packs leg before failure\r\n```\r\n  ILCompiler.ReadyToRun -> /root/runtime/artifacts/bin/ILCompiler.ReadyToRun/x64/Release/ILCompiler.ReadyToRun.dll\r\n  crossgen2 -> /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/freebsd-x64/crossgen2.dll\r\n  Generating native code\r\nld : error : undefined symbol: inotify_init1 [/root/runtime/src/coreclr/tools/aot/crossgen2/crossgen2.csproj]\r\n##vso[task.logissue type=error;sourcepath=ld;linenumber=0;columnnumber=0;code=;](NETCORE_ENGINEERING_TELEMETRY=Build) undefined symbol: inotify_init1\r\n  >>> referenced by pal_io.c:1388 (/root/runtime/src/native/libs/System.Native/pal_io.c:1388)\r\n  >>>               pal_io.c.o:(SystemNative_INotifyInit) in archive /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Native.a\r\n  \r\nld : error : undefined symbol: inotify_add_watch [/root/runtime/src/coreclr/tools/aot/crossgen2/crossgen2.csproj]\r\n##vso[task.logissue type=error;sourcepath=ld;linenumber=0;columnnumber=0;code=;](NETCORE_ENGINEERING_TELEMETRY=Build) undefined symbol: inotify_add_watch\r\n  >>> referenced by pal_io.c:1404 (/root/runtime/src/native/libs/System.Native/pal_io.c:1404)\r\n  >>>               pal_io.c.o:(SystemNative_INotifyAddWatch) in archive /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Native.a\r\n  \r\nld : error : undefined symbol: inotify_rm_watch [/root/runtime/src/coreclr/tools/aot/crossgen2/crossgen2.csproj]\r\n##vso[task.logissue type=error;sourcepath=ld;linenumber=0;columnnumber=0;code=;](NETCORE_ENGINEERING_TELEMETRY=Build) undefined symbol: inotify_rm_watch\r\n  >>> referenced by pal_io.c:1418 (/root/runtime/src/native/libs/System.Native/pal_io.c:1418)\r\n  >>>               pal_io.c.o:(SystemNative_INotifyRemoveWatch) in archive /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Native.a\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/root/runtime/src/coreclr/tools/aot/crossgen2/crossgen2.csproj]\r\n##vso[task.logissue type=error;sourcepath=clang;linenumber=0;columnnumber=0;code=;](NETCORE_ENGINEERING_TELEMETRY=Build) linker command failed with exit code 1 (use -v to see invocation)\r\n/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/build/Microsoft.NETCore.Native.targets(346,5): error MSB3073: The command \"\"clang11\" \"/root/runtime/artifacts/obj/coreclr/crossgen2/x64/Release/freebsd-x64/native/crossgen2.o\" -o \"/root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/crossgen2/freebsd-x64/native/crossgen2\" /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/aotsdk/libbootstrapper.a /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/aotsdk/libRuntime.ServerGC.a /root/runtime/artifacts/bin/coreclr/FreeBSD.x64.Release/aotsdk/libstdc++compat.a /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Native.a /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Globalization.Native.a /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.IO.Compression.Native.a /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Net.Security.Native.a /root/runtime/artifacts/bin/microsoft.netcore.app.runtime.freebsd-x64/Release/runtimes/freebsd-x64/native/libSystem.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--build-id=sha1 -Wl,--as-needed -pthread -ldl -lm -lz -lrt -pie -Wl,-z,relro -Wl,-z,now -Wl,--discard-all -Wl,--gc-sections\" exited with code 1. [/root/runtime/src/coreclr/tools/aot/crossgen2/crossgen2.csproj]\r\n```\r\nStory time\r\nOn FreeBSD, dotNET uses `libinotify` ,a shim from ports, instead of the native kqueue. From what I recall at the time (but can no longer find the discussion of) it was done this way as it would be easier than adding kqueue support. OSX uses a very similar (but not exact copy of FreeBSD's kqueue system).\r\nEnd of story time\r\n\r\nAs a port, `libinotify` lives in `/usr/local/lib/`, its required for building and the build made it this far with no warnings/errors so I am not sure what the linker's issue is with the undefined symbol.",
          "createdAt": "2022-10-20T23:13:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-20T23:13:44Z",
          "id": "IC_kwDODI9FZc5Mqs4X"
        },
        {
          "author": "arrowd",
          "body": "The problem is that on Linux these `inotify_*` functions are in libc, so no extra linker flags are required. Most projects just check for `inotify.h` header and if it is found use it. On FreeBSD we also need to pass `-L/usr/local/lib -linotify` to the linker.",
          "createdAt": "2022-10-21T06:58:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-21T06:59:29Z",
          "id": "IC_kwDODI9FZc5Mrwsh"
        },
        {
          "author": "sec",
          "body": "@Thefrank What to patch to get `AsmOffsets.cs` - I'm getting error about this file not being found :)",
          "createdAt": "2022-10-21T07:46:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-21T07:46:30Z",
          "id": "IC_kwDODI9FZc5Mr8Z3"
        },
        {
          "author": "Thefrank",
          "body": "@sec I pushed my local tinkering here: https://github.com/Thefrank/runtime/tree/fbsdaot",
          "createdAt": "2022-10-21T08:46:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-21T08:46:41Z",
          "id": "IC_kwDODI9FZc5MsM6A"
        },
        {
          "author": "sec",
          "body": "@Thefrank after running failed command with added `-L/usr/local/lib -linotify`, doing change in `src/installer/managed/Microsoft.NET.HostModel/Microsoft.NET.HostModel.csproj` to update TargetFramework to `net6.0` (netstandard don't have FreeBSD in OSPlatform, which produced error during build) and adding `/p:SkipInstallerBuild=true` got me to\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```",
          "createdAt": "2022-10-21T14:49:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-22T23:39:14Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCuUaxQ=="
          },
          "updatedAt": "2022-10-21T14:49:44Z",
          "id": "IC_kwDODI9FZc5Mtylw"
        },
        {
          "author": "Thefrank",
          "body": "@sec newest commits should address the installer issue. It was something that I also wanted to work on. linker and hostmodel things are addressed too.\r\n\r\n(rant about aspnetcore needing more depends to build correctly. im looking at you grpc)\r\n\r\nOne full SDK build later:\r\nwell, \"it works\"\r\n- does not strip for some reason so it still produces a 14MB hello world. this might be related to... V\r\n- all of my changes to ILCompiler stuff seems to reverted/overwritten during the building of the aspnetcore or installer. These had to be manually changed...again.\r\n\r\nWhere does \"Microsoft.DotNet.ILCompiler\" actually live?\r\n\r\nEDIT: both `llvm-objcopy` and `strip` produce much smaller files.\r\n```\r\n-rwxr-xr-x  1 root  wheel  14232776 Oct 22 15:09 naot*\r\n-rwxr-xr-x  1 root  wheel   3959504 Oct 22 15:12 naotllvm*\r\n-rwxr-xr-x  1 root  wheel   3959736 Oct 22 15:15 naotstrip*\r\n```",
          "createdAt": "2022-10-22T13:05:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-22T23:39:25Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCuUaxg=="
          },
          "updatedAt": "2022-10-22T21:17:13Z",
          "id": "IC_kwDODI9FZc5Mwgym"
        },
        {
          "author": "Thefrank",
          "body": "Ok a bit of a followup:\r\n- `Microsoft.DotNet.ILCompiler` comes from runtime. SDK imports/updates from runtime which explains why it looked like my changes were missed/reverted. A new SDK would need to be built with the changes included.\r\n- ObjWriter and JITTools come from: https://github.com/dotnet/llvm-project/tree/objwriter/12.x\r\n  - This is not a small repo even when cloning just that branch. \r\n  - It requires frequent rebuilds mostly just to bump the OfficialBuildID\r\n- I would like to open a PR to get some of this started however...\r\n---\r\n- Currently, FreeBSD stuff gets manually added into official (or where available \"supported\") RID hardcoded lists all over the place (e.g., old-coreclr, old-corefx, runtime, aspnetcore) and eventually ends up in final product (e.g., https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.osplatform?view=netcore-3.0)\r\n  - This is also inconsistent. Repos like AzurePipelinesAgent (https://github.com/microsoft/azure-pipelines-agent/pull/3266), AzurePipelinesTaskLib (https://github.com/microsoft/azure-pipelines-task-lib/pull/799) , and Powershell (this had a PR, but I can't find it anymore) all have PRs that have been waiting on an action (merge or decline). Installer had an RID entry added for `freebsd-x64` but got reverted as it might cause confusion as to if freebsd-x64 was an officially supported or not. [my 2c: this was the right call]\r\n- There is an interesting middle-ground that might be coming up: https://github.com/dotnet/sdk/pull/28495 which would allow for using non-officially support RIDs for PublishAOT via passing a `SkipAotSupportedRidCheck`.\r\n---\r\nOption 1: Keep doing what we are doing: Open PR that adds freebsd-x64 and needed code to the NativeAOT list\r\nOption 2: Wait until SDK PR gets merged, and if needed later open PR that addresses anything that `SkipAotSupportedRidCheck` does not cover\r\nOption 3: I am open to suggestions :)\r\n\r\nFinally, some lingering questions:\r\n\r\nWould it be possible to add a FreeBSD to: https://github.com/dotnet/llvm-project/blob/objwriter/12.x/eng/azure-pipelines.yml? For a Microsoft provided/built Objwriter/JITTools. We have docker images for cross building FreeBSD runtime and the yml already does cross builds for a few platforms. In any case, the repo does not take PRs or Issues so I am not sure how to go about getting that added.\r\n\r\nNot-related-to-runtime-but-to-dotnet: How often do things like GRPC updates get merged into aspnetcore? aspnetcore is not buildable without a hacky-work around and the solution https://github.com/grpc/grpc/pull/30411 was recently merged. This addresses an issue that FreeBSD (and musl(?) linux): has in that `protoc` and `grpc_LANGUAGE_plugin` are not included in the NuGet (GRPC.Tools) but are available on our system.",
          "createdAt": "2022-10-25T23:16:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-28T04:03:32Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-23T18:28:06Z",
                "user": "pandrewhk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-31T23:52:25Z",
                "user": "jhgorse"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCx9Vng=="
          },
          "updatedAt": "2022-10-25T23:16:47Z",
          "id": "IC_kwDODI9FZc5M9rnF"
        },
        {
          "author": "arrowd",
          "body": "Options 1 and 2 aren't really mutually exclusive, right? Both of these make sense.\r\n\r\nI'd also like to get back on the Ports side. @Thefrank do you think things are ready to make another attempt on making a port?",
          "createdAt": "2022-10-28T05:49:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T05:49:25Z",
          "id": "IC_kwDODI9FZc5NKGOd"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd The options aren't necessarily mutually exclusive. \"1\" is likely ready to go soonish as I want to rebase vs current head and see what tests are available.  \"2\" is more of a wait-and-see then send PR. Everything FreeBSD on dotNET will ALWAYS run into the issue of NuGet going \"HALP I CANT FIND THESE ITEMS IN NUGET REPO\"\r\n\r\nAs for Ports...\r\n\r\nTests:\r\n\r\nThere are still test failures in the runtime. The \"Build THEN Test\" set of tests has been free of failures since net5 but these are a more of a \"product does not burn your house down\" smaller set of tests. The \"Build AND Test\" set of tests has failures of which some are environment [e.g., I don't have IPV6 in my build jail] and some are more concerning [e.g., file locks, dual stack IPV4/IPV6 detection]. Finally there are CoreCLR PAL tests which seem to only be run if building exclusively the `clr.paltests` subset and manually running the result; it has been more than year but these were passing lastime\r\n\r\nSource-Build:\r\n\r\nAs of net7-RC2 source-build SHOULD be doable for FreeBSD but I was not able to fully run it as: it wanted a few different runtimes, none of those were in the standard SDKs, and I don't have time to chase down which commit was associated with which runtime it wanted. \r\nThe `Makefile` might be a bit of a headache to get setup but everything after the source-build's initial download should run smoothly. The other approach would to have a pre-generated source-build tarball to download and build.\r\nWhen net7 goes final I will look into this more.",
          "createdAt": "2022-10-28T22:12:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T22:12:05Z",
          "id": "IC_kwDODI9FZc5NOBeK"
        },
        {
          "author": "Thefrank",
          "body": "Source-Build update:\r\n```\r\n...\r\n      -- Installing: /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/bin/freebsd.13-x64.Release/corehost/libnethost.so\r\n      -- Installing: /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/bin/freebsd.13-x64.Release/corehost/libnethost.a\r\n...\r\n\r\n\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error : Error when creating nuget lib package from /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/packages/Release/specs/runtime.freebsd-x64.Microsoft.NETCore.DotNetAppHost.nuspec. NuGet.Packaging.Core.PackagingException: File not found: '/root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/bin/freebsd-x64.Release/corehost/libnethost.so'. [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) in /root/sourcebuild/src/arcade/artifacts/source-build/self/src/src/Microsoft.DotNet.Build.Tasks.Packaging/src/NuGetPack.cs:line 261 [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error : Error when creating nuget packed package from /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/packages/Release/specs/runtime.freebsd-x64.Microsoft.NETCore.DotNetAppHost.nuspec. NuGet.Packaging.Core.PackagingException: File not found: '/root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/bin/freebsd-x64.Release/corehost/libnethost.so'. [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude) [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files) [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    /root/sourcebuild/src/runtime/artifacts/source-build/self/package-cache/microsoft.dotnet.build.tasks.packaging/7.0.0-beta.22462.6/build/Packaging.targets(1261,5): error :    at Microsoft.DotNet.Build.Tasks.Packaging.NuGetPack.Pack(String nuspecPath, String nupkgPath, Manifest manifest, Boolean packSymbols) in /root/sourcebuild/src/arcade/artifacts/source-build/self/src/src/Microsoft.DotNet.Build.Tasks.Packaging/src/NuGetPack.cs:line 261 [/root/sourcebuild/src/runtime/artifacts/source-build/self/src/src/installer/pkg/projects/Microsoft.NETCore.DotNetAppHost/Microsoft.NETCore.DotNetAppHost.pkgproj]\r\n    \r\n    Build FAILED.\r\n```\r\nNot sure why its installing into one place and trying to package from another. FreeBSD has been a generic `freebsd-x64` it would be nice to use `freebsdMAJOR.MINOR-x64` as there can be breaking ABI changes between versions but as it stands right now the former should be correct \r\n\r\nSome of this is NOT quick either:\r\n```\r\n  638029490832343924:   30       0.001s     7.596s \r\n  638029490832355946:   25       7898.875s     7906.471s\r\n```\r\n```\r\nTime Elapsed 02:23:44.58\r\n```\r\n\r\nEDIT day later: Command issued during runtime part:\r\n```\r\n./build.sh  --arch x64 --configuration Release --allconfigurations --verbosity minimal --nodereuse false --warnAsError false /p:PackageRid=freebsd-x64 /p:NoPgoOptimize=true /p:KeepNativeSymbols=true /p:RuntimeOS=freebsd /p:PortableBuild=false /p:BuildDebPackage=false /p:EnableNgenOptimization=false /p:EnablePackageValidation=false /p:ArcadeInnerBuildFromSource=true /p:DotNetBuildFromSource=true /p:RepoRoot=/root/sourcebuild/src/runtime/artifacts/source-build/self/src/ /p:ArtifactsDir=/root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/ /bl:/root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/sourcebuild.binlog /p:ContinuousIntegrationBuild=true /p:SourceBuildOutputDir=/root/sourcebuild/src/runtime/artifacts/source-build/ /p:SourceBuiltBlobFeedDir= /p:EnableSourceControlManagerQueries=false /p:EnableSourceLink=false /p:DeterministicSourcePaths=false /p:DotNetBuildOffline=true /p:DotNetPackageVersionPropsPath=/root/sourcebuild/artifacts/obj/x64/Release/PackageVersions.props\r\n```\r\n\"Install \"CoreCLR component\"\"\r\n```\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for FreeBSD.x64.Release in /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/obj/coreclr/FreeBSD.x64.Release\r\n```\r\n\"Install \"installer component\"\"\r\n```\r\n  Commencing build of \"install\" target in \"installer component\" for FreeBSD.x64.Release in /root/sourcebuild/src/runtime/artifacts/source-build/self/src/artifacts/obj/freebsd.13-x64.Release\r\n```\r\n\r\nSo...is the bug; it building non-portable? putting files into two different named RIDs? Something else that I missed? I can post the binlog if that will help\r\n",
          "createdAt": "2022-11-02T04:05:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-02T23:17:36Z",
          "id": "IC_kwDODI9FZc5NdVil"
        },
        {
          "author": "Thefrank",
          "body": "In the past two weeks I noticed a number of my nightly build+test runs are failing due to timeouts (120min) during the build. Past builds (including running tests) were ~1hr. The most recent build that completed, after removing timeouts, took a little over 3hr. The log does not show anything \"expensive\" over a hand-full of minutes and the server does not show its under heavy load so I am not sure what is going on here.\r\n\r\nThoughts?\r\n\r\nBinlog is 63MB so I uploaded it here: https://we.tl/t-sQzh1hvzv8",
          "createdAt": "2022-11-08T22:11:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-08T22:11:27Z",
          "id": "IC_kwDODI9FZc5N9OGd"
        },
        {
          "author": "Thefrank",
          "body": "Month later update(s)!\r\n\r\n- The current thinking on the slowness of using the SDK: Something changed between FreeBSD 12->13 that is causing things like `dotnet exec` and `msbuild` to max out at 100% WCPU vs ~2200%WCPU on the same 32 core (2x CPU) system. Thread: https://github.com/sec/dotnet-core-freebsd-source-build/issues/15\r\n  - This also might explain the very slow building of the source-build\r\n- My nightly test runs are now public: https://github.com/Thefrank/freebsd-dotnet-runtime-nightly\r\n  - If you need expanded access to the repo, please let know so I can add your account\r\n- NativeAOT branch will lag behind main; JITTools/ObjWriter update much faster than I expected requiring frequent rebasing on my branch and frequent rebuilding on the llvm-12 branch\r\n- Nothing else, enjoy the holidays all!",
          "createdAt": "2022-12-18T22:53:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-19T09:45:18Z",
                "user": "paxter"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-19T10:08:47Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-21T20:42:27Z",
                "user": "sec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-23T18:26:01Z",
                "user": "pandrewhk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-26T20:19:54Z",
                "user": "akhramov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-29T21:00:39Z",
                "user": "epsilontheta"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-14T00:28:22Z",
                "user": "avkarenow"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-20T13:43:59Z",
                "user": "davidvedvick"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-30T20:02:23Z",
                "user": "dch"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-30T23:01:37Z",
                "user": "Nimce"
              },
              {
                "content": "HEART",
                "createdAt": "2023-02-16T10:29:45Z",
                "user": "juliekoubova"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-28T17:39:48Z",
                "user": "sarog"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHOC266cg=="
          },
          "updatedAt": "2022-12-18T22:53:33Z",
          "id": "IC_kwDODI9FZc5Q4JCI"
        },
        {
          "author": "dch",
          "body": "@arrowd there is interest in a port of this, yes :-)",
          "createdAt": "2023-01-30T20:02:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-30T20:02:53Z",
          "id": "IC_kwDODI9FZc5T_4Ur"
        },
        {
          "author": "arrowd",
          "body": "Of course there is, but we need \"Source-build\" to get started on this.",
          "createdAt": "2023-01-30T20:11:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-30T20:11:32Z",
          "id": "IC_kwDODI9FZc5T_7Kh"
        },
        {
          "author": "Thefrank",
          "body": "Month(ish) later update(s)! \r\n- ARM64 support merged in! (by @sec) -> https://github.com/dotnet/runtime/commit/4ece8f0e73c72271b3e4afa95bfeb7d28ec50869 \r\n  - Not in runtime's CI AFAIK\r\n  - Should natively build fine\r\n- NativeAOT support merged in! -> https://github.com/dotnet/runtime/commit/70e1072edc6c1a399f77a4de7de84045193f1409\r\n  - as Microsoft does not maintain any FreeBSD images this requires externally built-by-you objwriter https://github.com/dotnet/llvm-project/tree/objwriter/12.x . Also, you will have to add (or overwrite a different platform's) `objwriter` line in the `Versions.props` file\r\n  - no ARM64 for this yet\r\n  - no cross-os NativeAOT generation for the runtime yet so all of this is only a problem for people building runtime natively\r\n- Not much movement on figuring out https://github.com/sec/dotnet-core-freebsd-source-build/issues/15 . Still no idea why it appears to only use 100% of a single core on FreeBSD13 when FreeBSD12 is fine.\r\n- Runtime tests are still built nightly as long as: sdk, ilasm/ildasm. or objwriter don't need to be rebuilt\r\n  - ~90 failures across 12 suites of tests. AZP limits to 1k test results per file so there might actually be more.\r\n  - any help squashing some of these last failures would be welcome\r\n  - anyone wanting elevated access to the pipeline/repo should contact me to be added\r\n- source-build appears to be moving to https://github.com/dotnet/dotnet . Issues are still to be opened at https://github.com/dotnet/source-build for now\r\n   - as of [0febf0c1601bbfb1dccfd157f96fa81897a3235f](https://github.com/dotnet/dotnet/commit/0febf0c1601bbfb1dccfd157f96fa81897a3235f) it gets as far as trying to restore runtime packages/projects, fails at `LibraryImportGenerator`, throws 12 warnings and another 378 errors. So yes, the repo is still experimental and WIP. The build will likely failure further in as the last time I tried to `--portablebuild false` for anything `FreeBSD`  in the main runtime it errored out. \r\n\r\nThis concludes the wall of bullet points. Have a great new year all!",
          "createdAt": "2023-01-31T06:11:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-31T07:44:31Z",
                "user": "nanaya"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-31T12:13:18Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-31T17:23:52Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-01T18:49:52Z",
                "user": "army1349"
              },
              {
                "content": "HEART",
                "createdAt": "2023-02-16T10:29:33Z",
                "user": "juliekoubova"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOC2L4Aw=="
          },
          "updatedAt": "2023-01-31T06:11:44Z",
          "id": "IC_kwDODI9FZc5UCDbV"
        },
        {
          "author": "sec",
          "body": "Small update for ARM64 - with small changes from https://github.com/dotnet/runtime/pull/81397 runtime/sdk also builds/works there (checked crossgen). Native build is in progress, objwriter compile also fine and hack-packed into nuget, will update/edit on new info. Need some spare time to setup CI for that somewhere/somehow :D\r\n\r\nedit: native build under arm64 fails with\r\n```\r\n/mnt/sec/runtime/eng/restore/docs.targets(39,5): error MSB3021: Unable to copy file \"/home/sec/.nuget/packages/microsoft.private.intellisense/7.0.0-preview-20221010.1/IntellisenseFiles/net/1033/Microsoft.CSharp.xml\" to \"/mnt/sec/runtime/artifacts/bin/docs/Microsoft.CSharp.xml\". The resource string \"Copy.LinklibraryFailedPrefix\" for the \"Copy\" task cannot be found. Confirm that the resource name \"Copy.LinklibraryFailedPrefix\" is correctly spelled, and the resource exists in the task's assembly. [/mnt/sec/runtime/Build.proj]\r\n```\r\n\r\nedit 2: with https://github.com/dotnet/runtime/pull/81510 native build under arm64 builds without errors. No idea why those copy errors are there, but to get past them I made those changes (looks related to msbuild itself):\r\n```diff\r\ndiff --git a/eng/restore/docs.targets b/eng/restore/docs.targets\r\nindex 764bc5bbefb..414327afdac 100644\r\n--- a/eng/restore/docs.targets\r\n+++ b/eng/restore/docs.targets\r\n@@ -39,8 +39,8 @@\r\n     <Copy SourceFiles=\"@(DocFile)\"\r\n           DestinationFiles=\"$(XmlDocDir)\\%(SubFolder)%(FileName)%(Extension)\"\r\n           SkipUnchangedFiles=\"true\"\r\n-          UseHardlinksIfPossible=\"true\" />\r\n\r\n+          UseHardlinksIfPossible=\"false\" />\r\n   </Target>\r\n\r\n </Project>\r\ndiff --git a/eng/restore/optimizationData.targets b/eng/restore/optimizationData.targets\r\nindex 207992d2e89..230b552915d 100644\r\n--- a/eng/restore/optimizationData.targets\r\n+++ b/eng/restore/optimizationData.targets\r\n@@ -43,7 +43,7 @@\r\n     <Copy SourceFiles=\"@(_optimizationMibcFile)\"\r\n           DestinationFiles=\"@(_optimizationMibcFile->'$(MibcOptimizationDataDir)%(SubdirectoryName)/%(RecursiveDir)%(Filename)%(Extension)')\"\r\n           SkipUnchangedFiles=\"true\"\r\n-          UseHardlinksIfPossible=\"true\" />\r\n+          UseHardlinksIfPossible=\"false\" />\r\n\r\n   </Target>\r\n </Project>\r\n```\r\nand added extra `/p:BinPlaceUseHardlinksIfPossible=false` to the build script.",
          "createdAt": "2023-01-31T11:05:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2023-01-31T12:24:14Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-01-31T16:03:30Z",
                "user": "greggyb"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-01-31T17:23:59Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-02-01T14:50:06Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOC1O2UA=="
          },
          "updatedAt": "2023-02-01T22:46:08Z",
          "id": "IC_kwDODI9FZc5UDVyq"
        },
        {
          "author": "arrowd",
          "body": "It is great to see FreeBSD PRs merged in. Your work is really appreciated.",
          "createdAt": "2023-01-31T12:05:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-31T17:24:05Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-03T01:52:08Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-07T19:46:53Z",
                "user": "innovoix"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-16T10:29:26Z",
                "user": "juliekoubova"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-12T20:02:35Z",
                "user": "aepot"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOC3qC7g=="
          },
          "updatedAt": "2023-01-31T12:05:39Z",
          "id": "IC_kwDODI9FZc5UDnRP"
        },
        {
          "author": "sec",
          "body": "As 8.0-preview.1 is here, trying to get native build done under FreeBSD x64 (arm64 was first and went ok)\r\n```\r\n  Repo successfully built.\r\n  Product binaries are available at /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release\r\n  runincontext -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/runincontext.dll\r\n  tieringtest -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/tieringtest.dll\r\n  ILCompiler.Reflection.ReadyToRun -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/ILCompiler.Reflection.ReadyToRun.dll\r\n  ILCompiler.TypeSystem -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.TypeSystem/x64/Release/ILCompiler.TypeSystem.dll\r\n  ILCompiler.Diagnostics -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.Diagnostics/x64/Release/ILCompiler.Diagnostics.dll\r\n  R2RDump -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/R2RDump/R2RDump.dll\r\n  dotnet-pgo -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/dotnet-pgo/dotnet-pgo.dll\r\n  repro -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/repro/x64/Release/repro.dll\r\n  R2RTest -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/R2RTest/R2RTest.dll\r\n  ILCompiler.DependencyAnalysisFramework -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.DependencyAnalysisFramework/x64/Release/ILCompiler.DependencyAnalysisFramework.dll\r\n  ILCompiler.ReadyToRun -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.ReadyToRun/x64/Release/ILCompiler.ReadyToRun.dll\r\n  crossgen2 -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/crossgen2/crossgen2.dll\r\n  ILCompiler.Build.Tasks -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/ilc-published/netstandard/ILCompiler.Build.Tasks.dll\r\n  ILCompiler.MetadataTransform -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.MetadataTransform/x64/Release/ILCompiler.MetadataTransform.dll\r\n  ILCompiler.Compiler -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.Compiler/x64/Release/ILCompiler.Compiler.dll\r\n  ILCompiler.RyuJit -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/ILCompiler.RyuJit/x64/Release/ILCompiler.RyuJit.dll\r\n  ILCompiler -> /mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/artifacts/bin/coreclr/freebsd.x64.Release/ilc/ilc.dll\r\n/mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/.dotnet/sdk/8.0.100-alpha.1.23061.8/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Publish.targets(303,5): error NETSDK1095: Optimizing assemblies for performance is not supported for the selected target platform or architecture. Please verify you are using a supported runtime identifier, or set the PublishReadyToRun property to false. [/mnt/resource/sec/dotnet-core-freebsd-source-build/runtime/src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj]\r\n#\r\n```\r\n\r\nLooks like `ResolveReadyToRunCompilers` task is failing on us. Looking at [it's source](https://github.com/dotnet/sdk/blob/v8.0.100-preview.1.23114.32/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs) - it makes sense, as there's no freebsd handle code inside.\r\n\r\nBUT - there were no such error with 7.x and the source is almost the same. Why it's went fine on arm64, was the fact it was skipped (from runtime/src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj):\r\n```\r\n    <!-- Don't R2R on ARM64 machines because ARM64 crossgen2 that comes with .NET SDK <= 7.0 Preview 7 crashes.-->\r\n    <PublishReadyToRun Condition=\"'$(BuildArchitecture)' != 'arm64'\">true</PublishReadyToRun>\r\n```\r\n\r\nI did a [quick patch](https://github.com/sec/dotnet-core-freebsd-source-build/blob/v8/patches8/sdk_preview1.patch) and tested this to work (atm only under FreeBSD arm64, but should be fine on x64 too, will test soon when doing native build) - sad part is that, this require to also do a sdk repo build, then installer and then rebuild runtime etc.).\r\n\r\nWeird thing is, @Thefrank - I did a check with your build of `8.0.100-alpha.1.23061.8` under freebsd-x64 and it got the same error during build (or with simple dotnet publish with readytorun) - but your nightly builds are not failing at this one - why? :)",
          "createdAt": "2023-02-27T00:38:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-27T00:38:47Z",
          "id": "IC_kwDODI9FZc5WKOam"
        },
        {
          "author": "Thefrank",
          "body": "@sec I was too lazy to fix and rebuild the SDK AND runtime as they share the same code and it needs to be manually kept insync from what the readme implies (https://github.com/dotnet/runtime/tree/main/src/tasks/Crossgen2Tasks). So i just disabled publishreadytorun\r\nhttps://github.com/Thefrank/freebsd-dotnet-runtime-nightly/blob/58d8fa67cd9f37d8abfe747c3c1e5ebddd821724/azure-pipelines.yml#L215\r\n\r\nYou can submit that PR to both runtime and SDK if you want. don't remove the net472 targetframework. if you need ideas on how to work around that framework not containing freebsd as an OS you can look at https://github.com/dotnet/runtime/blob/main/src/installer/managed/Microsoft.NET.HostModel/Bundle/TargetInfo.cs for, hopefully, an acceptable solution.",
          "createdAt": "2023-02-27T03:06:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-27T03:06:26Z",
          "id": "IC_kwDODI9FZc5WKm7g"
        },
        {
          "author": "akoeplinger",
          "body": "@sec FYI the `Copy.LinklibraryFailedPrefix` issue from msbuild was fixed with https://github.com/dotnet/msbuild/pull/8532",
          "createdAt": "2023-03-13T12:02:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-13T13:20:26Z",
                "user": "sec"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC3sqxw=="
          },
          "updatedAt": "2023-03-13T12:02:27Z",
          "id": "IC_kwDODI9FZc5XYaBu"
        },
        {
          "author": "Thefrank",
          "body": "Update time!\r\nNot much news is good news I suppose:\r\n\r\nNuGet Feeds:\r\nI have taken the time to setup a NuGet feed that contains the output from crossbuilt builds for FreeBSD 12.  The azure feed will be limited to only the most recent outputs (because I am too cheap to pay for storage) and the github feed requires any github account (because github gives unlimited public storage). Details are in my crossbuild repo for those interested! (edit: @sec has a feed that includes ARM64 builds so check that out too!)\r\n\r\nSource-Build:\r\nGood news! As of net8p2 it pretty close to building without issue. Those issues currently are:\r\n- the `--source-feed` does not seem to allow me to add the feed for my NuGet packages\r\n- As for right now, the repo seems hard-coded for linux, linux-rids, and centos8\r\n- additional parameters passed into the build via `--` seem to be ignored\r\n- because of the first three items, after running `./prep.sh` you need to manually add in all the `freebsd` items you need \r\n- runs without error until runtime when it hits `NETSDK1095` as the current SDK does not support this for FreeBSD. (@sec were you able to make progress upstreaming a patch for this?)\r\n\r\nPR/WIP/Misc items:\r\n- Initial work to get dotnet's fork of llvm-project tools for FreeBSD to be built under Linux/CI; these are for llvm14: https://github.com/Thefrank/llvm-project/tree/freebsd\r\n- Change default AspNetCoreRuntime behavior in installer: https://github.com/dotnet/installer/pull/14817\r\n- Fix build failures in Powershell-Native lib: https://github.com/PowerShell/PowerShell-Native/pull/92\r\n- https://github.com/sec/dotnet-core-freebsd-source-build/issues/15 : Still no idea on this one other than SIGINFO saying its only using one thread. I should have some time in the near future to sit down and really learn `truss` and `ktrace` to get a better handle of this issue.\r\n\r\nThis concludes the non-april fool's update!",
          "createdAt": "2023-04-01T22:22:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-02T09:39:26Z",
                "user": "paxter"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-02T18:46:59Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-05T02:06:30Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOC5P8cQ=="
          },
          "updatedAt": "2023-04-02T15:44:22Z",
          "id": "IC_kwDODI9FZc5Y_4wo"
        },
        {
          "author": "sec",
          "body": "@Thefrank nice, I had opposite of free time, but maye this will change soon :) As for NETSDK1095, I have the patch ready, just need to clean it up a little and will publish PR in next few days I hope. btw. I also started to host private feed, but I used GH pages for that (hope they don't mind), mainly output from SDK builds (also with arm64 artifacts). Haven't had time to try source build, but getting this to work would be nice, as it would skip all the custom steps used in building, so getting port build should be one step closer then.\r\n\r\nDo you have any start point for sec/dotnet-core-freebsd-source-build#15 - as for me this looks something inside `msbuild`, having some kind of short repro binary/script/steps would be good start point trying to narrow down the issue.",
          "createdAt": "2023-04-02T11:45:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-04-04T15:28:16Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2023-04-05T02:06:27Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOC5P8bQ=="
          },
          "updatedAt": "2023-04-02T11:45:39Z",
          "id": "IC_kwDODI9FZc5ZAhbc"
        },
        {
          "author": "wfurt",
          "body": "Note that in 8.x .NET is switching to new build model - at least for Linux. \r\nIt may not be practical to jump on it quite yet but I would suggest reading https://github.com/dotnet/announcements/issues/241\r\n\r\nIt _should_ make it easier IMHO to make builds in long run. \r\n",
          "createdAt": "2023-04-07T01:59:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-07T01:59:52Z",
          "id": "IC_kwDODI9FZc5ZZcpX"
        },
        {
          "author": "Thefrank",
          "body": "update for net8p3: source-build via dotnet repo still fails in the same spot. still needs https://github.com/dotnet/runtime/pull/84250 (and its SDK matching PR). I will also try and apply that PR to build an SDK and see if that is enough to get it to build or if there are other items needing attention further in the build",
          "createdAt": "2023-04-17T05:43:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-17T05:43:08Z",
          "id": "IC_kwDODI9FZc5aC_0P"
        },
        {
          "author": "sec",
          "body": "Small note to anyone doing tests under 13.2 - ASLR is enabled now by default and I have signals that dotnet is crashing becuase of that (haven't had time yet to test/confirm this) - just a shout out.",
          "createdAt": "2023-04-17T08:44:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-17T08:44:07Z",
          "id": "IC_kwDODI9FZc5aDyYP"
        },
        {
          "author": "joperator",
          "body": "> Small note to anyone doing tests under 13.2 - ASLR is enabled now by default and I have signals that dotnet is crashing becuase of that (haven't had time yet to test/confirm this) - just a shout out.\r\n\r\n@sec \r\nI encounter the same problem under FreeBSD 13.2 and can confirm that it's because of ASLR.\r\n\r\nI've found potentially similar issues with #9759 and #9899, which also seem to be about ASLR, but on Debian. @janvorli seems to be the expert on this topic. Do you have any idea how to fix this problem on FreeBSD as well?\r\n\r\nPerhaps the following additional information and the stack trace from the core dump will help you. It was created when `dotnet build` was run for a default Console App _.csproj_ to create a framework-dependent executable for FreeBSD.\r\n\r\n```\r\nSystem info (uname -a):\r\n    FreeBSD 13.2-RELEASE FreeBSD 13.2-RELEASE amd64\r\n\r\n.NET info (dotnet --info):\r\n    .NET SDK:\r\n     Version:   7.0.202-dev\r\n     Commit:    ac4af6c928\r\n\r\n    Runtime Environment:\r\n     OS Name:     FreeBSD\r\n     OS Version:  13\r\n     OS Platform: FreeBSD\r\n     RID:         freebsd.13-x64\r\n     Base Path:   /usr/local/share/dotnet/sdk/7.0.202-dev/\r\n\r\n    Host:\r\n      Version:      7.0.4\r\n      Architecture: x64\r\n      Commit:       N/A\r\n\r\n    .NET SDKs installed:\r\n      7.0.202-dev [/usr/local/share/dotnet/sdk]\r\n\r\n    .NET runtimes installed:\r\n      Microsoft.AspNetCore.App 7.0.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n      Microsoft.NETCore.App 7.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n    Other architectures found:\r\n      None\r\n\r\n    Environment variables:\r\n      Not set\r\n\r\n    global.json file:\r\n      Not found\r\n\r\n    Learn more:\r\n      https://aka.ms/dotnet/info\r\n\r\n    Download .NET:\r\n      https://aka.ms/dotnet/download\r\n\r\nError details:\r\n    Fatal error. Internal CLR error. (0x80131506)\r\n       at System.Net.Sockets.Socket.DoConnect(System.Net.EndPoint, System.Net.Internals.SocketAddress)\r\n       at System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\r\n       at System.IO.Pipes.NamedPipeClientStream.TryConnect(Int32, System.Threading.CancellationToken)\r\n       at System.IO.Pipes.NamedPipeClientStream.ConnectInternal(Int32, System.Threading.CancellationToken, Int32)\r\n       at System.IO.Pipes.NamedPipeClientStream+<>c.<ConnectAsync>b__21_0(System.Object)\r\n       at System.Threading.Tasks.Task.InnerInvoke()\r\n       at System.Threading.Tasks.Task+<>c.<.cctor>b__273_0(System.Object)\r\n       at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n       at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n       at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n       at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n       at System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(System.Object, System.Threading.Thread)\r\n       at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n       at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n       at System.Threading.Thread+StartHelper.RunWorker()\r\n       at System.Threading.Thread+StartHelper.Run()\r\n       at System.Threading.Thread.StartCallback()\r\n    Abort trap (core dumped)\r\n\r\nStack trace (lldb -> bt):\r\n    * thread #1, name = '.NET ThreadPool Wor', stop reason = signal SIGABRT\r\n      * frame #0: 0x00001ee7b3bf563a libc.so.7`memfd_create + 58\r\n        frame #1: 0x00001ee7b3c1de39 libc.so.7`strtod_l + 297\r\n        frame #2: 0x00001ee7ba4a543b libcoreclr.so`::PROCAbort(signal=<unavailable>) at process.cpp:2685:5\r\n        frame #3: 0x00001ee7ba4a5370 libcoreclr.so`PROCEndProcess(hProcess=<unavailable>, uExitCode=<unavailable>, bTerminateUnconditionally=<unavailable>) at process.cpp:1342:13\r\n        frame #4: 0x00001ee7ba184239 libcoreclr.so`EEPolicy::HandleFatalError(exitCode=<unavailable>, address=<unavailable>, pszMessage=<unavailable>, pExceptionInfo=<unavailable>, errorSource=<unavailable>, argExceptionString=<unavailable>) at eepolicy.cpp:796:9\r\n        frame #5: 0x00001ee7ba0fdb9f libcoreclr.so`Thread::VirtualUnwindToFirstManagedCallFrame(pContext=0x00001f28f6548f80) at stackwalk.cpp:751:13\r\n        frame #6: 0x00001ee7ba265eb5 libcoreclr.so`DispatchManagedException(ex=0x00001f28f6549590, isHardwareException=<unavailable>) at exceptionhandling.cpp:4789:21\r\n        frame #7: 0x00001ee7ba1b72d9 libcoreclr.so`IL_Throw(obj=<unavailable>) at jithelpers.cpp:4031:5\r\n        frame #8: 0x00001ee7c0a99c79 System.Net.Sockets.Socket.DoConnect(System.Net.EndPoint, System.Net.Internals.SocketAddress)\r\n        frame #9: 0x00001ee7c0a98b23 System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\r\n        frame #10: 0x00001ee7c0a95813 System.IO.Pipes.NamedPipeClientStream.TryConnect(Int32, System.Threading.CancellationToken)\r\n        frame #11: 0x00001ee7c0a9544f System.IO.Pipes.NamedPipeClientStream.ConnectInternal(Int32, System.Threading.CancellationToken, Int32)\r\n        frame #12: 0x00001ee7c0a9534a System.IO.Pipes.NamedPipeClientStream+<>c.<ConnectAsync>b__21_0(System.Object)\r\n        frame #13: 0x00001ee7bf61d19b System.Threading.Tasks.Task.InnerInvoke()\r\n        frame #14: 0x00001ee7beff2cd4 System.Threading.Tasks.Task+<>c.<.cctor>b__273_0(System.Object)\r\n        frame #15: 0x00001ee7beff2a3f System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n        frame #16: 0x00001ee7beff1e6e System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n        frame #17: 0x00001ee7beff184f System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n        frame #18: 0x00001ee7beff1350 System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n        frame #19: 0x00001ee7beff11ed System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(System.Object, System.Threading.Thread)\r\n        frame #20: 0x00001ee7befee229 System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n        frame #21: 0x00001ee7befec9ae System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n        frame #22: 0x00001ee7befec20f System.Threading.Thread+StartHelper.RunWorker()\r\n        frame #23: 0x00001ee7befec0bb System.Threading.Thread+StartHelper.Run()\r\n        frame #24: 0x00001ee7befebfd6 System.Threading.Thread.StartCallback()\r\n        frame #25: 0x00001ee7ba31bda7 libcoreclr.so`CallDescrWorkerInternal at unixasmmacrosamd64.inc:835\r\n        frame #26: 0x00001ee7ba148ea8 libcoreclr.so`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:67:5\r\n        frame #27: 0x00001ee7ba148e49 libcoreclr.so`DispatchCallSimple(pSrc=<unavailable>, numStackSlotsToCopy=<unavailable>, pTargetAddress=<unavailable>, dwDispatchCallSimpleFlags=<unavailable>) at callhelpers.cpp:218:9\r\n        frame #28: 0x00001ee7ba1610e5 libcoreclr.so`ThreadNative::KickOffThread_Worker(ptr=<unavailable>) at comsynchronizable.cpp:157:5\r\n        frame #29: 0x00001ee7ba1113db libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=<unavailable>) at threads.cpp:7298:5\r\n        frame #30: 0x00001ee7ba1113d9 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:7342:9\r\n        frame #31: 0x00001ee7ba111393 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(this=<unavailable>, pParam=<unavailable>)::$_6::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::'lambda'(Param*)::operator()(Param*) const at threads.cpp:7500:13\r\n        frame #32: 0x00001ee7ba111393 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:7502:9\r\n        frame #33: 0x00001ee7ba111324 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=0x00001f28f6549f08) at threads.cpp:7526:5\r\n        frame #34: 0x00001ee7ba1119df libcoreclr.so`ManagedThreadBase::KickOff(void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransition(pTarget=<unavailable>, args=<unavailable>, filterType=ManagedThread)(void*), void*, UnhandledExceptionLocation) at threads.cpp:7546:5\r\n        frame #35: 0x00001ee7ba1119c7 libcoreclr.so`ManagedThreadBase::KickOff(pTarget=<unavailable>, args=<unavailable>)(void*), void*) at threads.cpp:7581:5\r\n        frame #36: 0x00001ee7ba1611ba libcoreclr.so`ThreadNative::KickOffThread(pass=0x00001ee7b4747c00) at comsynchronizable.cpp:228:9\r\n        frame #37: 0x00001ee7ba4a9cf8 libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00001ee7b477d400) at thread.cpp:1829:16\r\n        frame #38: 0x00001ee7b222bbaa libthr.so.3`pthread_detach + 154\r\n```",
          "createdAt": "2023-04-17T09:20:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-17T09:20:16Z",
          "id": "IC_kwDODI9FZc5aD_o5"
        },
        {
          "author": "janvorli",
          "body": "@joperator thank you for pinging me on this. The issues you have linked are not related to the issue above, as they were happening around the stack overflow situations, the ASLR making the stack overflow more likely to happen in the cases reported in those issues.\r\nIn the current case, it looks like we are hitting this:\r\nhttps://github.com/dotnet/runtime/blob/e121d77db3dbf7e1196cccea1fb250be5038419a/src/coreclr/vm/stackwalk.cpp#L747-L752\r\n\r\nThat means that the libunwind (`unw_step` function) has failed to unwind a native frame for some reason. It is hard to guess why that would be related to ASLR. But we might get some insight into that if we knew which frame was being unwound. If you can dump the `CONTEXT` pointed to by the `pContext` at the frame of `Thread::VirtualUnwindToFirstManagedCallFrame`, it would show the Rsp / Rip that it has attempted to unwind when it failed.",
          "createdAt": "2023-04-17T13:50:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-17T13:50:29Z",
          "id": "IC_kwDODI9FZc5aFgDC"
        },
        {
          "author": "joperator",
          "body": "I'm not sure what these _Rsp_ and _Rip_ are, but maybe they'll help you, @janvorli:\r\n\r\n```\r\n(lldb) thread select 1\r\n* thread #1, name = '.NET ThreadPool Wor', stop reason = signal SIGABRT\r\n    frame #0: 0x00001ee7b3bf563a libc.so.7`memfd_create + 58\r\nlibc.so.7`memfd_create:\r\n->  0x1ee7b3bf563a <+58>: cmpl   $0xfffffeff, %eax         ; imm = 0xFFFFFEFF\r\n    0x1ee7b3bf563f <+63>: jbe    0x13565f                  ; <+95>\r\n    0x1ee7b3bf5641 <+65>: testl  $0x3fffff8, %r13d         ; imm = 0x3FFFFF8\r\n    0x1ee7b3bf5648 <+72>: jne    0x13565f                  ; <+95>\r\n(lldb) frame select 5\r\nframe #5: 0x00001ee7ba0fdb9f libcoreclr.so`Thread::VirtualUnwindToFirstManagedCallFrame(pContext=0x00001f28f6548f80) at stackwalk.cpp:751:13\r\n(lldb) frame variable\r\n(CONTEXT *) pContext = 0x00001f28f6548f80\r\n(PCODE) uControlPc = <variable not available>\r\n\r\n(BOOL) success = <variable not available>\r\n\r\n(lldb) po ((CONTEXT *) 0x00001f28f6548f80)->Rsp\r\n34260791891072\r\n\r\n(lldb) po ((CONTEXT *) 0x00001f28f6548f80)->Rip\r\n33980608639705\r\n```\r\n\r\nFrom my humble knowledge of it, I'd guess that these numbers need to be converted to hex:\r\n\r\n```\r\nRsp: 34260791891072 -> 0x00001f28f6549480\r\nRip: 33980608639705 -> 0x00001ee7ba1b72d9\r\n```\r\n\r\nI don't know what to do with the _Rsp_, but the value of _Rip_ equals `frame #7` in the above [stack trace](https://github.com/dotnet/runtime/issues/14537#issuecomment-1510996537):\r\n\r\n```\r\nframe #7: 0x00001ee7ba1b72d9 libcoreclr.so`IL_Throw(obj=<unavailable>) at jithelpers.cpp:4031:5\r\n```",
          "createdAt": "2023-04-18T09:04:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-18T09:04:56Z",
          "id": "IC_kwDODI9FZc5aKmJw"
        },
        {
          "author": "janvorli",
          "body": "Rsp is the stack pointer register and Rip is the instruction pointer. So it was trying to unwind the IL_Throw native function and failed for some reason. That's quite strange, the libunwind should be able to do that just fine. That sounds like a problem in the libunwind. IIRC, we use the libunwind from FreeBSD instead of our own copy of it. We can try to build runtime with our copy of libunwind on FreeBSD too and see if that fixes the problem. If it does, we could check what's different in our copy that makes it work. \r\nYou can give it a try by changing the following line:\r\nhttps://github.com/dotnet/runtime/blob/9672d82ffa42e00ab052aa6af5c10e25c5b35b86/src/coreclr/pal/src/CMakeLists.txt#L3\r\n\r\nto \r\n```cmake\r\nset(CLR_CMAKE_USE_SYSTEM_LIBUNWIND 0)\r\n```",
          "createdAt": "2023-04-18T12:43:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-18T12:43:11Z",
          "id": "IC_kwDODI9FZc5aL1dY"
        },
        {
          "author": "Thefrank",
          "body": "The version of `libunwind` that is used right now is the ports version \r\n\r\n[Partial speculation on reasoning: either older versions of FreeBSD (10 and earlier) did not have a usable system `libunwind` for building coreclr/corefx/runtime or by FreeBSD convention a \"system\" library was not used as a \"ports\" library existed and we were building something for \"ports\" not \"system\". I do not know why the in-tree `libunwind` was not used either]\r\n\r\nThe ports version is based on https://github.com/libunwind/libunwind with some cherry-picked changes plus a few patches that have not been upstreamed yet; found [here](https://github.com/freebsd/freebsd-ports/tree/main/devel/libunwind/files). I am unsure of what the system `libunwind` is now but I want to say LLVM's `libunwind`",
          "createdAt": "2023-04-18T16:41:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-18T16:41:12Z",
          "id": "IC_kwDODI9FZc5aNeu-"
        },
        {
          "author": "emaste",
          "body": "For the FreeBSD base system I imported LLVM libunwind and enabled it for arm64 at first in https://github.com/freebsd/freebsd-src/commit/b80f3546a8da40a0fe47415c8b6e107b21007684 (for FreeBSD 11.0 IIRC) and other architectures later on. This is after the creation of this #14537 issue.\r\n\r\n",
          "createdAt": "2023-04-18T17:19:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-18T17:19:32Z",
          "id": "IC_kwDODI9FZc5aNsA0"
        },
        {
          "author": "joperator",
          "body": "@janvorli\r\n`dotnet` really doesn't seem to crash anymore with `set(CLR_CMAKE_USE_SYSTEM_LIBUNWIND 0)`.",
          "createdAt": "2023-04-19T14:00:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-19T14:00:18Z",
          "id": "IC_kwDODI9FZc5aSdna"
        },
        {
          "author": "sec",
          "body": "@joperator Could you provide more details on repro steps (from which \"source\" did you get SDK, does it crash on every run, etc.). I've been playign around on fresh 13.2 install with both v7 and v8p1/p3 and couldn't get it to crash? `libunwind` was installed from ports for both the build machine (13.1) and runtime machine (13.2).",
          "createdAt": "2023-04-19T14:02:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-19T14:02:58Z",
          "id": "IC_kwDODI9FZc5aSeuu"
        },
        {
          "author": "joperator",
          "body": "@sec\r\nI've cross-built the runtime and SDK on Ubuntu for FreeBSD myself.\r\nDepending on the hardware, it crashes on FreeBSD 13.2 and later every 50 to 2000 runs with this test script in a loop:\r\n\r\n```sh\r\n#!/bin/sh\r\n\r\nset -e\r\nset -u\r\n\r\ncleanup() {\r\n\trm -rf \"${tmpdir-}\"\r\n}\r\ntrap cleanup INT TERM EXIT\r\ntmpdir=\"$(mktemp -d)\"\r\n\r\ndotnet new console --name test --output \"${tmpdir}\" --no-restore\r\ndotnet build \"${tmpdir}/test.csproj\" --configuration Release -p:AppendTargetFrameworkToOutputPath=false -p:UseAppHost=false\r\ndotnet \"${tmpdir}/bin/Release/test.dll\" | grep \"Hello, World!\"\r\n```\r\n\r\nI also noticed that cross-built [uses FreeBSD 12.3-RELEASE](https://github.com/dotnet/runtime/blob/4fe223ffb49fe94fa60519e80d41b4aa83617409/eng/common/cross/build-rootfs.sh#L73), which [reached its EoL on March 31, 2023](https://www.freebsd.org/security/unsupported/), and therefore is no longer available on the [FreeBSD.org download server](https://download.freebsd.org/ftp/releases). Perhaps the FreeBSD version for this should be updated and the [FreeBSD.org FTP archive server](http://ftp-archive.freebsd.org/pub/FreeBSD-Archive/old-releases) should be used instead to download _base.txz_, since unlike on the _FreeBSD.org download server_, unsupported FreeBSD versions are not deleted here and thus old build pipelines continue to work. What do you think about this, @janvorli?",
          "createdAt": "2023-04-20T08:33:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-20T08:33:28Z",
          "id": "IC_kwDODI9FZc5aW2D1"
        },
        {
          "author": "Thefrank",
          "body": "@joperator https://github.com/dotnet/arcade/pull/13247 + https://github.com/dotnet/arcade/pull/13249 \r\n\r\nsource build update! Using the patches from https://github.com/dotnet/sdk/pull/31581 and https://github.com/dotnet/runtime/pull/84250 to build a new net8p3, source build from https://github.com/dotnet/dotnet/commit/21d05f64e14dfb9b3856eb4e6bc96f56c10ac92b builds until aspnetcore! That stage fails with \r\n```\r\nBuild FAILED.\r\n    \r\n    /root/dotnet/src/aspnetcore/artifacts/source-build/self/src/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1102: Unable to find package Microsoft.NETCore.App.Crossgen2.linux-x64 with version (>= 8.0.0-preview.4.23221.1) [/root/dotnet/.dotnet/sdk/8.0.100-preview.3.23178.7/NuGet.targets]\r\n    /root/dotnet/src/aspnetcore/artifacts/source-build/self/src/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1102:   - Found 1 version(s) in previously-source-built [ Nearest version: 8.0.0-preview.3.23174.8 ] [/root/dotnet/.dotnet/sdk/8.0.100-preview.3.23178.7/NuGet.targets]\r\n    /root/dotnet/src/aspnetcore/artifacts/source-build/self/src/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1102:   - Found 0 version(s) in source-built [/root/dotnet/.dotnet/sdk/8.0.100-preview.3.23178.7/NuGet.targets]\r\n    /root/dotnet/src/aspnetcore/artifacts/source-build/self/src/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1102:   - Found 0 version(s) in prebuilt [/root/dotnet/.dotnet/sdk/8.0.100-preview.3.23178.7/NuGet.targets]\r\n    /root/dotnet/src/aspnetcore/artifacts/source-build/self/src/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj : error NU1102:   - Found 0 version(s) in reference-packages [/root/dotnet/.dotnet/sdk/8.0.100-preview.3.23178.7/NuGet.targets]\r\n        0 Warning(s)\r\n        1 Error(s)\r\n```\r\n\r\nWe pass `--os-name FreeBSD` to aspnetcore's `build.sh` when building under FreeBSD otherwise it exhibits similar (but not the same) behavior: all will be Linux. \r\nI as of yet, have been able to figure how to pass parameters through the build system let alone to a single stage.\r\nI suppose the best solution would fix wherever the platform detection is failing in aspnetcore. The current work-around is fine as long as it can be passed in to the stage.\r\n\r\nconsole of failed stage included:\r\n[err.log](https://github.com/dotnet/runtime/files/11300083/err.log)\r\n\r\nEDIT: opened issue+matching PR to fix aspnetcore. \r\nNext issue is 'nuget-client' failing:\r\n```\r\n  git config --global protocol.file.allow always\r\n  MSBuild version 17.6.0-preview-23174-01+e7de13307 for .NET\r\n  Some command line switches were read from the auto-response file \"MSBuild.rsp\". To disable this file, use the \"-noAutoResponse\" switch.\r\n  \r\n  [SourceBuiltSdkResolver] Looking for SDK Microsoft.DotNet.Arcade.Sdk. Detected config(s) in env: 'ARCADE' for 'Microsoft.DotNet.Arcade.Sdk/8.0.0-beta.23220.2' at '/root/dotnet/artifacts/source-built-sdks/Microsoft.DotNet.Arcade.Sdk/'\r\n  [SourceBuiltSdkResolver] Overriding Microsoft.DotNet.Arcade.Sdk with 'ARCADE'\r\n  [SourceBuiltSdkResolver] Looking for SDK Microsoft.DotNet.Arcade.Sdk. Detected config(s) in env: 'ARCADE' for 'Microsoft.DotNet.Arcade.Sdk/8.0.0-beta.23220.2' at '/root/dotnet/artifacts/source-built-sdks/Microsoft.DotNet.Arcade.Sdk/'\r\n  [SourceBuiltSdkResolver] Overriding Microsoft.DotNet.Arcade.Sdk with 'ARCADE'\r\n    Check for patches in /root/dotnet/src/nuget-client/eng/source-build/../../eng/source-build-patches/*.patch\r\n  EXEC : error : NuGet.Config: No such file or directory [/root/dotnet/src/nuget-client/eng/source-build/source-build.proj]\r\n  /root/dotnet/src/nuget-client/eng/source-build/source-build.proj(59,5): error MSB3073: The command \"git --work-tree=/root/dotnet/src/nuget-client/eng/source-build/../../ apply --ignore-whitespace --whitespace=nowarn --unsafe-paths \"/root/dotnet/src/nuget-client/eng/source-build-patches/0001-Rename-NuGet.Config-to-NuGet.config-to-account-for-a.patch\"\" exited with code 1.\r\n  \r\n  Build FAILED.\r\n  \r\n  EXEC : error : NuGet.Config: No such file or directory [/root/dotnet/src/nuget-client/eng/source-build/source-build.proj]\r\n  /root/dotnet/src/nuget-client/eng/source-build/source-build.proj(59,5): error MSB3073: The command \"git --work-tree=/root/dotnet/src/nuget-client/eng/source-build/../../ apply --ignore-whitespace --whitespace=nowarn --unsafe-paths \"/root/dotnet/src/nuget-client/eng/source-build-patches/0001-Rename-NuGet.Config-to-NuGet.config-to-account-for-a.patch\"\" exited with code 1.\r\n      0 Warning(s)\r\n      2 Error(s)\r\n  ```\r\ndiff shows the file was deleted not renamed:\r\n```\r\ndiff --git a/src/nuget-client/NuGet.Config b/src/nuget-client/NuGet.Config\r\ndeleted file mode 100644\r\nindex 2ded9f6bca..0000000000\r\n--- a/src/nuget-client/NuGet.Config\r\n+++ /dev/null`\r\n```\r\nrestoring the file with `git checkout ...` allowed the build finish.",
          "createdAt": "2023-04-22T02:48:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-24T09:59:03Z",
                "user": "joperator"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-27T06:19:15Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-18T12:50:49Z",
                "user": "davidvedvick"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODBCGsQ=="
          },
          "updatedAt": "2023-04-23T00:35:16Z",
          "id": "IC_kwDODI9FZc5agi4N"
        },
        {
          "author": "Thefrank",
          "body": "As we are now in RC1 in main I think it is time for another update!\r\n\r\n- PRs that still need merge/someone to look at before net8 cutoff:\r\n  - https://github.com/dotnet/sdk/pull/31581 syncs SDK with already merged runtime PR\r\n  - https://github.com/dotnet/installer/pull/14817 removes extra `/p:IncludeAspNetCoreRuntime=false` from installer.\r\n\r\nSource builds via dotnet/dotnet complete with the above patches applied and 1 extra case covering the nuget file covered in https://github.com/dotnet/runtime/issues/14537#issuecomment-1518480909. Smoke tests have failures relating to a missing aspnetcore...which I hope will be resolved with the installer patch.\r\n\r\n- Other interesting happenings:\r\n  - https://github.com/dotnet/llvm-project/pull/439 \r\n  - Work on native FreeBSD support for above https://github.com/Thefrank/llvm-project/tree/fbsd this is done but I would like to roll forward my crossbuild support when I get the time. It mostly requires some CMake settings but also extensive testing to make sure it doesn't break other things\r\n  - Work on Powershell for FreeBSD https://github.com/Thefrank/PowerShell/tree/freebsd this is mostly done but still requires a merge of https://github.com/PowerShell/PowerShell-Native/pull/92 and platform support added to the PSPester\r\n  - @joperator work on Azurepipelines PR has reached it's two year birthday https://github.com/microsoft/azure-pipelines-agent/pull/3266 (rejoice or despair!)\r\n    - It also needs https://github.com/microsoft/azure-pipelines-task-lib/pull/799\r\n\r\nEDIT: My most recent crossbuild missed a patch to add `KnownILCompilerPack` which looks like it changed (https://github.com/dotnet/installer/pull/16545). It is being rebuilt now",
          "createdAt": "2023-07-24T19:45:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-07-24T23:28:22Z",
                "user": "innovoix"
              },
              {
                "content": "HEART",
                "createdAt": "2023-07-26T10:06:32Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-17T05:16:34Z",
                "user": "preetpalS"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODM3Oyw=="
          },
          "updatedAt": "2023-07-24T23:23:54Z",
          "id": "IC_kwDODI9FZc5iQjq8"
        },
        {
          "author": "akoeplinger",
          "body": "@Thefrank the changes in https://github.com/Thefrank/llvm-project/tree/fbsd look good to me so I'm happy to accept them into an upstream PR.",
          "createdAt": "2023-07-27T09:39:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-07-27T09:50:39Z",
                "user": "leandroscardua"
              },
              {
                "content": "HEART",
                "createdAt": "2023-07-28T02:43:18Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-01T15:03:08Z",
                "user": "tstrausbaugh-dev"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-27T09:41:23Z",
                "user": "ghishadow"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-17T05:16:24Z",
                "user": "preetpalS"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODM3Oww=="
          },
          "updatedAt": "2023-07-27T09:39:21Z",
          "id": "IC_kwDODI9FZc5iisWL"
        },
        {
          "author": "emaste",
          "body": "> the changes in https://github.com/Thefrank/llvm-project/tree/fbsd look good to me so I'm happy to accept them into an upstream PR\r\n\r\nFor the benefit of anyone else coming across this issue and wondering about the current state, I found https://github.com/dotnet/llvm-project/pull/457, which is merged.\r\n\r\nLooking at the above comments I see https://github.com/PowerShell/PowerShell-Native/pull/92 is still open (since March 2, but has not received any feedback) (and https://github.com/microsoft/azure-pipelines-task-lib/pull/799 is also still open with no feedback).",
          "createdAt": "2023-10-10T22:07:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-11T05:15:36Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-11T07:37:55Z",
                "user": "mmarinchenko"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-11T13:30:00Z",
                "user": "zbtnot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-11T15:17:08Z",
                "user": "arsatiki"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-12T08:47:13Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T13:49:40Z",
                "user": "akhramov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T23:26:58Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T05:16:53Z",
                "user": "preetpalS"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHODM3O1Q=="
          },
          "updatedAt": "2023-10-10T22:07:18Z",
          "id": "IC_kwDODI9FZc5or44q"
        },
        {
          "author": "Thefrank",
          "body": "Quick note here: dotNET8 will sourcebuild provided prebuilt RC2 packages under FreeBSD 12.4. I have included steps, required packages, and some notes about issues I ran into [here](https://github.com/Thefrank/freebsd-dotnet-sourcebuild).\r\n",
          "createdAt": "2023-11-16T03:41:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-11-16T07:55:27Z",
                "user": "sec"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-16T10:11:04Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-16T16:52:58Z",
                "user": "innovoix"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T18:04:16Z",
                "user": "army1349"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T20:03:40Z",
                "user": "wfurt"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-16T23:26:52Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T05:16:04Z",
                "user": "preetpalS"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T17:55:14Z",
                "user": "mmarinchenko"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-17T20:31:17Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T03:40:34Z",
                "user": "ghishadow"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-18T03:40:36Z",
                "user": "ghishadow"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-18T14:52:10Z",
                "user": "josteink"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHODM-QRw=="
          },
          "updatedAt": "2023-11-16T03:41:27Z",
          "id": "IC_kwDODI9FZc5sG4KX"
        },
        {
          "author": "sec",
          "body": "I've built both `x64` and `arm64` from VMR native under 13.2. @arrowd this is now port-able to make if you ask me :)",
          "createdAt": "2023-11-16T20:02:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T20:03:38Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T20:11:34Z",
                "user": "emaste"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T20:57:54Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T23:26:46Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T05:15:52Z",
                "user": "preetpalS"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T17:55:17Z",
                "user": "mmarinchenko"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-17T20:31:15Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T03:40:44Z",
                "user": "ghishadow"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T14:52:06Z",
                "user": "josteink"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHODM-QRg=="
          },
          "updatedAt": "2023-11-16T20:02:30Z",
          "id": "IC_kwDODI9FZc5sMjNt"
        },
        {
          "author": "arrowd",
          "body": "This sounds awesome! I was out of loop for the whole .NET on FreeBSD story, so can you fill me in? To start I need\r\n\r\n1. The bootstrap binaries for FreeBSD 13 (FreeBSD 12 is going EoL next month)\r\n2. The process to regenerate these binaries.\r\n\r\nAfter streamlining the bootstrap process in the Ports workflow we can then continue towards full .NET port.\r\n\r\nP.S. And thanks for all the work you and other people have done on this matter!",
          "createdAt": "2023-11-18T13:34:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T14:52:36Z",
                "user": "josteink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T15:38:56Z",
                "user": "mmarinchenko"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T15:45:15Z",
                "user": "ghishadow"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T16:05:05Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODM-W2w=="
          },
          "updatedAt": "2023-11-18T13:34:56Z",
          "id": "IC_kwDODI9FZc5sVQX3"
        },
        {
          "author": "Thefrank",
          "body": "> This sounds awesome! I was out of loop for the whole .NET on FreeBSD story, so can you fill me in? To start I need\r\n> \r\n>     1. The bootstrap binaries for FreeBSD 13 (FreeBSD 12 is going EoL next month)\r\n> \r\n>     2. The process to regenerate these binaries.\r\n> \r\n> \r\n> After streamlining the bootstrap process in the Ports workflow we can then continue towards full .NET port.\r\n> \r\n> P.S. And thanks for all the work you and other people have done on this matter!\r\n\r\n---\r\n\r\n@arrowd \r\n\r\nhttps://github.com/Thefrank/freebsd-dotnet-sourcebuild/issues/1#issuecomment-1814065722\r\n\r\nTo make it less train-of-throught:\r\n\r\n- If you are starting from nothing, crossbuild RC1 using either a 12.4 or 13.2 rootfs for the arch you want. Currently only x86-64 and ARM64 are supported. AFAIK this can not be done in the ports system as it requires an internet connection for NuGets. If you already have a working SDK from either [mine ](https://github.com/Thefrank/dotnet-freebsd-crossbuild)or @sec [repository](https://github.com/sec/dotnet-core-freebsd-source-build) you can skip this.\r\n- Build RC2 using dotNET's [VMR ](https://github.com/dotnet/dotnet/)and RC1 SDK. I have provided instructions, notes on issues, and any additional patches [here](https://github.com/Thefrank/freebsd-dotnet-sourcebuild). This might be doable in the ports system with a custom `fetch` stage\r\n- Build RTM (aka v8.0.100) using dotNET's VMR and the outputs from RC2 (or my previously sourcebuilt tarball and SDK). This should be doable in the ports as you can either clone and repo and fetch a items. I have not tested using the source tarball from VMR's releases but it should also work.\r\n\r\n---\r\n\r\nIf I have some free time in the next few days I will make a `Private.SourceBuilt.Artifacts` for FreeBSD 13.2 x86-64 and upload that too...assuming @sec does not beat me to it ;) ",
          "createdAt": "2023-11-18T17:56:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-21T05:17:41Z",
                "user": "mmarinchenko"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODNLJyQ=="
          },
          "updatedAt": "2023-11-18T17:56:47Z",
          "id": "IC_kwDODI9FZc5sVh8z"
        },
        {
          "author": "sec",
          "body": "@Thefrank @arrowd \r\nI did the build under 13.2 - you can find artifacts for both x64 and arm64 in Releases - there are also all PrivateBuilt ones.\r\nAs x64 went without any problems, I did have some hacks with arm64, but I think becuase my RC numbers were different somehow that expected, but anyway, to build from source:\r\n- as going RC1->RC2->VMR full cycle take some time, maybe you can use 8.0.100 SDK and artifacts to build 8.0.100 from VMR\r\n- or you can try using RC2 SDK and artifacts build on 12 under 13, maybe those will work :)\r\n- follow @Thefrank guide, there are 2 patches from what I saw for x64\r\n- for arm64 I can do the checking of you will come up with port, there will be 1 or 2 extra patch needed specific for arm64 - those are inside my repo, but I can adjust them for VMR when time will come :)\r\n\r\nImportant note for using dotnet using 13.2 - sometimes it can crash becuase of ASLR that's enabled by default now, so you will have to `elfctl -e +noaslr dotnet` on binary after extracting SDK.\r\n\r\nreleases here: https://github.com/sec/dotnet-core-freebsd-source-build/releases/tag/8.0.100-vmr",
          "createdAt": "2023-11-20T11:42:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-21T01:26:14Z",
                "user": "vborovikov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-21T08:55:48Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODNMVyg=="
          },
          "updatedAt": "2023-11-20T11:42:58Z",
          "id": "IC_kwDODI9FZc5sah0-"
        },
        {
          "author": "Thefrank",
          "body": "As we now have a signed and hashed [announcement ](https://www.freebsd.org/releases/14.0R/announce/)for 14.0, I have added sourcebuilt bootstrap packages for [FreeBSD 14 x64](https://github.com/Thefrank/freebsd-dotnet-sourcebuild/releases/tag/v8.0.100-FreeBSD14x64) to sourcebuild Net8\r\n\r\nEDIT: TODO: Upstream FreeBSD 14-specific build patch and OpenSSL3 support. ",
          "createdAt": "2023-11-21T04:03:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-21T05:17:56Z",
                "user": "mmarinchenko"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-21T08:47:47Z",
                "user": "army1349"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODNMRig=="
          },
          "updatedAt": "2023-11-21T05:48:48Z",
          "id": "IC_kwDODI9FZc5sfh6l"
        },
        {
          "author": "joperator",
          "body": "> Important note for using dotnet using 13.2 - sometimes it can crash becuase of ASLR that's enabled by default now, so you will have to `elfctl -e +noaslr dotnet` on binary after extracting SDK.\r\n\r\n@sec\r\nIs it the same crash as described [here](https://github.com/dotnet/runtime/issues/14537#issuecomment-1510996537)? If so, I was able to fix it with [this workaround](https://github.com/dotnet/runtime/issues/14537#issuecomment-1513051992).",
          "createdAt": "2023-11-21T10:35:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-21T10:35:37Z",
          "id": "IC_kwDODI9FZc5shPrN"
        },
        {
          "author": "sec",
          "body": "@joperator looks like this was connected with `libunwind`, on one of my build machine I was using package from 2021 :) updating that one to latest one `20230730` looks like fixed the issue. @Thefrank check your libunwind, using latest shouldn't crash dotnet with aslr enabled...\r\n\r\nedit: nope, still getting\r\n```\r\n    Fatal error. Internal CLR error. (0x80131506)\r\n    Abort trap (core dumped)\r\n...\r\nCore file '/home/sec/dotnet-dotnet/src/source-build-reference-packages/artifacts/source-build/self/src/dotnet.core' (x86_64) was loaded.\r\n(lldb) bt\r\n* thread #1, name = '.NET TP Worker', stop reason = signal SIGABRT\r\n  * frame #0: 0x0000362fa100e86a\r\n    frame #1: 0x0000362fa0f86f54\r\n```\r\n\r\nedit 2: disabling aslr solves the crashes\r\n\r\nedit 3: VMR build under 14, no issues, external openssl package was needed, becuase of RTM used from 13.2, even that 14 have openssl3 in base, but RTM from 14 works without external openssl package, I assume it's using the one from system :)",
          "createdAt": "2023-11-21T16:39:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-21T18:29:48Z",
          "id": "IC_kwDODI9FZc5sjnof"
        },
        {
          "author": "Thefrank",
          "body": "> edit 3: VMR build under 14, no issues, external openssl package was needed, becuase of RTM used from 13.2, even that 14 have openssl3 in base, but RTM from 14 works without external openssl package, I assume it's using the one from system :)\r\n\r\nIt should not work from base OpenSSL(?) When building, runtime [uses](https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/native/libs/System.Security.Cryptography.Native/extra_libs.cmake#L26) `find_package` and the [shim](https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/native/libs/System.Security.Cryptography.Native/opensslshim.c#L119) does not look for the .30 named SO\r\n",
          "createdAt": "2023-11-21T23:20:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-21T23:20:27Z",
          "id": "IC_kwDODI9FZc5slzsu"
        },
        {
          "author": "sec",
          "body": "Well, it works, confirmed with `truss` that it loads `.so.30` and also lines `-- Found OpenSSL: /usr/lib/libcrypto.so (found version \"3.0.12\")` in logs :) Maybe because `/usr/lib/libcrypto.so -> ../../lib/libcrypto.so.30` and `/usr/lib/libssl.so -> libssl.so.30` out-of-the-box on fresh base system.",
          "createdAt": "2023-11-22T09:28:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-22T09:28:07Z",
          "id": "IC_kwDODI9FZc5sn59J"
        },
        {
          "author": "Thefrank",
          "body": "I think I see what is going on\r\n`libSystem.Security.Cryptography.Native.OpenSsl.so`\r\nIs it linked against `libdl` and `libthr`+`libc` or `libcrypto` and `libssl` with `libc`? `-DFEATURE_DISTRO_AGNOSTIC_SSL=1` should link against `libdl` otherwise the two crypto libraries. the VMR should link against `libcrypto` and `libssl` as VMR builds are not portable. A \"normal\" build of runtime either as crossbuild or native should have -DFEATURE_DISTRO_AGNOSTIC_SSL=1 whereas VMR should have that explicitly set at 0",
          "createdAt": "2023-11-22T13:34:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-22T13:34:19Z",
          "id": "IC_kwDODI9FZc5spXIW"
        },
        {
          "author": "rmszc81",
          "body": "I know it's not much related to the topic, but I keep wondering if one day we're going to see a port of this in the FreeBSD ecosystem or even the pre-built packages. I saw that there are some efforts to create a port but, it seems dead by now.",
          "createdAt": "2023-11-26T13:10:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-26T13:10:49Z",
          "id": "IC_kwDODI9FZc5s4ncD"
        },
        {
          "author": "Thefrank",
          "body": "@rmszc81 I am currently working on a) OpenSSL3 support for VMR and b) port (Makefile and patches) for FreeBSD 14.0. I hope to have it done before the end of week for people to test",
          "createdAt": "2023-11-26T23:40:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-27T02:17:03Z",
                "user": "rwv37"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-27T06:25:04Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-27T15:34:14Z",
                "user": "driesmp"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-12-01T02:38:49Z",
                "user": "rmszc81"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-12-13T08:11:14Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODPaJEA=="
          },
          "updatedAt": "2023-11-26T23:40:25Z",
          "id": "IC_kwDODI9FZc5s5OYf"
        },
        {
          "author": "rmszc81",
          "body": "@Thefrank o.O\r\noh my, seriously bro? that's mother-fucking-amazing!\r\nit's like a xmas gift, lol.\r\nI thought what I'd never see the day!\r\nPlease let us know when it's ready right from the oven.\r\nI'd love to test it.",
          "createdAt": "2023-11-27T01:08:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-27T01:08:27Z",
          "id": "IC_kwDODI9FZc5s5YfI"
        },
        {
          "author": "Thefrank",
          "body": "port files -> \"Works on my VMs\" -> https://github.com/Thefrank/freebsd-dotnet-sourcebuild/tree/main/PortWIP\r\n\r\nFeedback welcome but post in repo to keep this topic, um, on topic.\r\n\r\nWIP+still a mess. \r\n\r\n`README.md` is long. \"General Thoughts\" at bottom can be safely ignored. It is mostly rants.",
          "createdAt": "2023-12-04T03:58:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-12-04T07:55:49Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2023-12-13T08:11:25Z",
                "user": "ghishadow"
              },
              {
                "content": "HEART",
                "createdAt": "2023-12-20T16:13:56Z",
                "user": "DNS"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODQM9FA=="
          },
          "updatedAt": "2023-12-04T03:58:03Z",
          "id": "IC_kwDODI9FZc5tip6o"
        },
        {
          "author": "arrowd",
          "body": "@Thefrank your take on the port got me really speed up. I reused most of your work and came up with this: https://github.com/freebsd/freebsd-ports/compare/main...arrowd:freebsd-ports:dotnet\r\n\r\nHowever, building it on 15-CURRENT in the jail results in the following error:\r\n\r\n```\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error : Fatal error. Internal CLR error. (0x80131506) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build) Fatal error. Internal CLR error. (0x80131506)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(Internal.TypeSystem.ExceptionStringID, System.String) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(Internal.TypeSystem.ExceptionStringID, System.String)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.ResolutionFailure.Throw() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.ResolutionFailure.Throw()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaModule.GetObject(System.Reflection.Metadata.EntityHandle, Internal.TypeSystem.NotFoundBehavior) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaModule.GetObject(System.Reflection.Metadata.EntityHandle, Internal.TypeSystem.NotFoundBehavior)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ResolveHandle(System.Reflection.Metadata.EntityHandle) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ResolveHandle(System.Reflection.Metadata.EntityHandle)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseTypeImpl(System.Reflection.Metadata.SignatureTypeCode) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseTypeImpl(System.Reflection.Metadata.SignatureTypeCode)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(System.Reflection.Metadata.SignatureTypeCode) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(System.Reflection.Metadata.SignatureTypeCode)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseTypeImpl(System.Reflection.Metadata.SignatureTypeCode) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseTypeImpl(System.Reflection.Metadata.SignatureTypeCode)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(System.Reflection.Metadata.SignatureTypeCode) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(System.Reflection.Metadata.SignatureTypeCode)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature(Internal.TypeSystem.EmbeddedSignatureData[] ByRef) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature(Internal.TypeSystem.EmbeddedSignatureData[%5D ByRef)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at Internal.TypeSystem.Ecma.EcmaField.InitializeFieldType() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at Internal.TypeSystem.Ecma.EcmaField.InitializeFieldType()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker+<ValidateTypeWorker>d__10.MoveNext() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker+<ValidateTypeWorker>d__10.MoveNext()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker+<ValidateTypeWorker>d__10, ILCompiler.ReadyToRun, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null]](<ValidateTypeWorker>d__10 ByRef) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker+<ValidateTypeWorker>d__10, ILCompiler.ReadyToRun, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null%5D%5D(<ValidateTypeWorker>d__10 ByRef)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker.ValidateTypeWorker(Internal.TypeSystem.Ecma.EcmaType) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at ILCompiler.DependencyAnalysis.ReadyToRun.TypeValidationChecker.ValidateTypeWorker(Internal.TypeSystem.Ecma.EcmaType)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e%5D%5D.InnerInvoke()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n    /wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets(180,5): error :    at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/redist.csproj]\r\n    ##vso[task.logissue type=error;sourcepath=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/src/installer/artifacts/source-build/self/src/src/redist/targets/Crossgen.targets;linenumber=180;columnnumber=5;code=;](NETCORE_ENGINEERING_TELEMETRY=Build)    at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n    \r\n    Build FAILED.\r\n```\r\n\r\nInteresetingly, re-running `make` results in everything being compiled correctly.\r\n\r\nDo you have an idea what's wrong?",
          "createdAt": "2023-12-20T20:59:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-20T20:59:56Z",
          "id": "IC_kwDODI9FZc5vK6PW"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd someone else ran into that issue in that same spot; installer step. I never had the time to dig into it but my thoughts:\r\n\r\n- IL methods issue that was resolved in net8RC2 still somehow broken for FreeBSD. Unlikely despite the error code being the same.\r\n- GC issue. Maybe? If you are also using my patches, one of them includes a backport that touches the GC in runtime. Does removing it resolve the issue?\r\n- ASLR issue. Are the ELFs flagged correctly?\r\n\r\nEDIT: forgot to mention, current `Makefile` is out of date. Newer one fixes issues with running in poudriere jail and redoes some of the `DEPENDS` and `USES`. Just waiting on a PR from the person that made the suggestions so they get proper credit",
          "createdAt": "2023-12-20T22:46:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-20T22:58:40Z",
          "id": "IC_kwDODI9FZc5vLVaO"
        },
        {
          "author": "sec",
          "body": "For me this looks like ASLR things, make sure binaries are flagged. Also sometimes there are some zombie dotnet processes left after build/failed build - worth checking if there aren't any and/or stop them before new build.",
          "createdAt": "2023-12-22T07:59:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T08:03:53Z",
          "id": "IC_kwDODI9FZc5vTab6"
        },
        {
          "author": "arrowd",
          "body": "> ASLR issue. Are the ELFs flagged correctly?\r\n\r\nI just noticed that I'm already doing `${ELFCTL} -e +noaslr ${WRKSRC}/.dotnet/dotnet` so ASLR shoudn't affect this. THis is unfortunate. I'll look into the GC patch then.",
          "createdAt": "2023-12-22T08:38:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T08:38:29Z",
          "id": "IC_kwDODI9FZc5vTjCh"
        },
        {
          "author": "DDHF22",
          "body": "Hi\r\n\r\nI’ve been standing very interested and applauding on the side since this project started as I unfortunately don’t have the skillset to help ☹\r\nAt this stage I would like to ask: How far are we from Powershell/.NET can run on a FreeBSD installable from a pack or from ports ?\r\n\r\nThanks\r\nClaus\r\n\r\nFrom: Thefrank ***@***.***>\r\nSent: Wednesday, 20 December 2023 23.46\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Claus Bruun ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] Support for FreeBSD (#14537)\r\n\r\n\r\n@arrowd<https://github.com/arrowd> someone else ran into that issue in that same spot; installer step. I never had the time to dig into it but my thoughts:\r\n\r\n  *   IL methods issue that was resolved in net8RC2 still somehow broken for FreeBSD. Unlikely despite the error code being the same.\r\n  *   GC issue. Maybe? If you are also using my patches, one of them includes a backport that touches the GC in runtime. Does removing it resolve the issue?\r\n  *   ASLR issue. Are the ELFs flagged correctly?\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/runtime/issues/14537#issuecomment-1865242254>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AALCZ7CSAXIH2KXIUKFXB23YKNTEFAVCNFSM4TS3XPPKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCOBWGUZDIMRSGU2A>.\r\nYou are receiving this because you commented.Message ID: ***@***.******@***.***>>\r\n",
          "createdAt": "2023-12-22T14:04:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T14:04:28Z",
          "id": "IC_kwDODI9FZc5vUzme"
        },
        {
          "author": "arrowd",
          "body": "The .NET port is being worked on. It is close to being finished.",
          "createdAt": "2023-12-22T14:06:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T14:06:12Z",
          "id": "IC_kwDODI9FZc5vU0Fk"
        },
        {
          "author": "luizfbicalho",
          "body": "> The .NET port is being worked on. It is close to being finished.\r\n\r\nIs this a full microsoft support? are there plans for a release date? or a version that will be released?",
          "createdAt": "2023-12-22T14:09:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T14:09:39Z",
          "id": "IC_kwDODI9FZc5vU09L"
        },
        {
          "author": "arrowd",
          "body": "@Thefrank \r\n\r\n> GC issue. Maybe? If you are also using my patches, one of them includes a backport that touches the GC in runtime. Does removing it resolve the issue?\r\n\r\nI'm carrying builds without GC patches at the moment. Meanwhile I looked at the patch and now I wonder why it uses those 3 sysctls instead of `hw.physmem`. On my system I have\r\n\r\n```\r\nvm.stats.vm.v_inactive_count: 254870\r\nvm.stats.vm.v_laundry_count: 0\r\nvm.stats.vm.v_free_count: 2978408\r\n```\r\n\r\nwhich results in `(254870+2978408)*4096 = 13243506688`.\r\n\r\nAt the same time, FreeBSD also has\r\n\r\n```\r\nhw.availpages: 3578339\r\nhw.physmem: 14656876544\r\n```\r\n\r\nNote that `hw.availpages * 4096 = hw.physmem`.\r\n\r\nNow, judging from the function name `GetAvailablePhysicalMemory()` and from what the Linux case does, I believe it is sufficient to just return `hw.physmem` value?",
          "createdAt": "2023-12-22T16:30:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T16:30:44Z",
          "id": "IC_kwDODI9FZc5vVXqs"
        },
        {
          "author": "Thefrank",
          "body": "@luizfbicalho I build Powershell for FreeBSD and there is one major known [issue](https://github.com/Thefrank/freebsd-port-sooners/issues/18) that you should know about before using. The repo also contains Powershell if you want to try it, but it is not production ready which is why I do not generate a pkg for it.\r\nAs for full Microsoft support? Currently, no. dotNET is community supported for FreeBSD. Microsoft has been nice enough to include FreeBSD and other community supported platforms in the runtime CI to make sure things don't break and employees/members have generously given their time to look over code submitted by community members. Runtime still has ~110 test failures out of 100k+. For comparison: Azure Pipeline Agents has 3 out ~850, Powershell has 2 across various test suites, and Jellyfin has 0. \r\n\r\n@arrowd commit is [here](https://github.com/dotnet/runtime/pull/91524) with my reasoning for the calculations which are based on the discussion [here](https://github.com/dotnet/runtime/issues/64935). I don't mind being wrong; I just want things working :)",
          "createdAt": "2023-12-22T17:26:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-12-22T18:01:42Z",
                "user": "am11"
              },
              {
                "content": "HEART",
                "createdAt": "2023-12-22T22:37:46Z",
                "user": "jkotas"
              },
              {
                "content": "HEART",
                "createdAt": "2023-12-23T01:13:54Z",
                "user": "danmoseley"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-01T04:18:58Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODQ6fFw=="
          },
          "updatedAt": "2023-12-22T17:26:47Z",
          "id": "IC_kwDODI9FZc5vVjSt"
        },
        {
          "author": "arrowd",
          "body": "Ok, the `Fatal error. Internal CLR error. (0x80131506)` problem still shows up even without the GC patch. Let's hope it won't show up on the FreeBSD package building cluster.\r\n\r\nAnother problem I met (though only once):\r\n\r\n```\r\n...\r\n      SOURCE_BUILT_SDK_DIR_ARCADE=/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/artifacts/source-built-sdks/Microsoft.DotNet.Arcade.Sdk/\r\n  [17:08:53.64] Building 'dotnet'...done\r\n  DirSize After Building dotnet\r\n  Filesystem                                   Size    Used   Avail Capacity  Mounted on\r\n  zroot/poudriere/jails/sbreeze-default-ref    409G     20G    389G     5%    /\r\n  DirSize After CleanupRepo dotnet\r\n  Filesystem                                   Size    Used   Avail Capacity  Mounted on\r\n  zroot/poudriere/jails/sbreeze-default-ref    409G     20G    389G     5%    /\r\n  Finding project directories...\r\n  Writing package usage data...\r\n  Writing package usage data... done. Took 00:00:03.0769078\r\n  Packaged all symbols in '/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/artifacts/x64/Release/dotnet-symbols-all-8.0.100-rtm.23551.1-freebsd.15-x64.tar.gz'\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018: The \"CreateSdkSymbolsLayout\" task failed unexpectedly.\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018: System.IO.IOException: Too many open files : '/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/artifacts/tmp/Release/Symbols/runtime/obj/Microsoft.NETCore.App.Runtime/Release/net8.0/freebsd-x64/symbols/System.Reflection.pdb'\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at System.IO.File.OpenRead(String path)\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.CreateSdkSymbolsLayout.IndexAllSymbols()\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.CreateSdkSymbolsLayout.Execute()\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n```\r\n\r\nIt probably can be amended by raising some system limits, but I'm not sure which exactly.",
          "createdAt": "2023-12-22T19:12:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T19:12:10Z",
          "id": "IC_kwDODI9FZc5vV3I1"
        },
        {
          "author": "janvorli",
          "body": "The error says \"Too many open files\", so isn't it the open files limit that needs to be bumped?",
          "createdAt": "2023-12-22T20:05:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-22T20:05:19Z",
          "id": "IC_kwDODI9FZc5vV_DR"
        },
        {
          "author": "nkosi23",
          "body": "> The error says \"Too many open files\", so isn't it the open files limit that needs to be bumped?\r\n\r\nYeah, looks like it may be related to the zombie dotnet processes after failed builds mentioned by someone else in this thread",
          "createdAt": "2023-12-23T07:19:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-23T07:19:16Z",
          "id": "IC_kwDODI9FZc5vWude"
        },
        {
          "author": "arrowd",
          "body": "The final version of the port is at  https://github.com/arrowd/freebsd-ports/tree/dotnet \r\n\r\nIt still fails sometimes due to either \"Internal CLR error. (0x80131506)\" or \"Too many open files\" errors. I'm now running builds with `MAKE_JOBS_UNSAFE=yes` to see if these errors may be gone.\r\n\r\nI'll now work towards getting it into FreeBSD Ports tree. Everyone are invited to try out the port for themselves.",
          "createdAt": "2023-12-24T13:07:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2023-12-24T17:48:12Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-12-25T05:32:10Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-12-25T07:46:21Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-12-27T03:32:39Z",
                "user": "Thefrank"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-12-27T09:37:57Z",
                "user": "sec"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-01T04:19:37Z",
                "user": "ghishadow"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-02T12:06:12Z",
                "user": "BasixKOR"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-03T14:36:49Z",
                "user": "lakako"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHODRIQSg=="
          },
          "updatedAt": "2023-12-24T13:07:18Z",
          "id": "IC_kwDODI9FZc5vX0Bo"
        },
        {
          "author": "mvanbaak",
          "body": "> I'll now work towards getting it into FreeBSD Ports tree. Everyone are invited to try out the port for themselves.\r\n\r\nsmall headsup, I needed 2 patches to the port I got from thefrank, both can be found here (I did not have time to send in pull requests, feel free to use the patches the way you like it)\r\nhttps://gitlab.com/mvanbaak/freebsd-ports/-/commit/3eaa632b172a0eb4c004c553add315717bc2ba1e\r\nhttps://gitlab.com/mvanbaak/freebsd-ports/-/commit/97b8ce2660f8b1029211f1fbe556452e77bf1612",
          "createdAt": "2023-12-26T19:52:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2023-12-27T03:32:44Z",
                "user": "Thefrank"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-12-27T09:37:52Z",
                "user": "sec"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-01-01T04:19:45Z",
                "user": "ghishadow"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-01T04:19:47Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODQ6fJA=="
          },
          "updatedAt": "2023-12-26T19:52:06Z",
          "id": "IC_kwDODI9FZc5vcgIV"
        },
        {
          "author": "arrowd",
          "body": "While some work is being done on the Ports infrastructure side, I'm trying to debug the \"Internal CLR error. (0x80131506)\"  problem that sometimes breaks the build. The error code corresponds to `COR_E_EXECUTIONENGINE` error, which is thrown from many places in the code. Anyone knows how do I go about enabling additional messages during the build or maybe enabling assertions (`ASSERTE()`) in the runtime code?",
          "createdAt": "2024-01-05T10:38:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T10:38:17Z",
          "id": "IC_kwDODI9FZc5v9wrv"
        },
        {
          "author": "arrowd",
          "body": "Digging through MSBuild project files I found `RuntimeConfiguration` property. I set it to \"Debug\" and now waiting for the build to complete, which hopefully will give me more information during crashes.",
          "createdAt": "2024-01-05T11:20:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T11:20:59Z",
          "id": "IC_kwDODI9FZc5v99DK"
        },
        {
          "author": "jkotas",
          "body": "> COR_E_EXECUTIONENGINE error\r\n\r\nCore dumps are the way to debug these errors. Either enable system crash dumps via `ulimit -c unlimited` or enable .NET internal crash dumps by [setting `DOTNET_DbgEnableMiniDump=1` in the environment](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/collect-dumps-crash). The latter option requires a working createdump tool - https://github.com/dotnet/runtime/tree/main/src/coreclr/debug/createdump.)",
          "createdAt": "2024-01-05T13:01:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-05T13:03:43Z",
                "user": "arrowd"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-05T13:52:45Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODRX4zw=="
          },
          "updatedAt": "2024-01-05T13:01:34Z",
          "id": "IC_kwDODI9FZc5v-Zfi"
        },
        {
          "author": "arrowd",
          "body": "Thanks you @jkotas it got me straight to the problematic line: https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/stackwalk.cpp#L752\r\n\r\n@Thefrank @sec Does this ring a bell? I'll keep digging, but any input would be appreciated.",
          "createdAt": "2024-01-05T18:46:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T18:46:43Z",
          "id": "IC_kwDODI9FZc5wAQcF"
        },
        {
          "author": "jkotas",
          "body": "> the problematic line: https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/stackwalk.cpp#L752\r\n\r\n`PAL_VirtualUnwind` is a wrapper over libunwind. This points at problem with libunwind that was discussed multiple times in this issue. Find the thread that it tried to unwind and look into why unwinding failed.",
          "createdAt": "2024-01-05T18:51:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T18:51:15Z",
          "id": "IC_kwDODI9FZc5wARyV"
        },
        {
          "author": "sec",
          "body": "Hm. I've been hitting weird libunwind issues, but on arm64 (and those were fixed also). On my boxes I've been using libunwind compiled by source from latest main branch. @arrowd do you use libunwind from packages latest one?",
          "createdAt": "2024-01-05T18:59:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T18:59:01Z",
          "id": "IC_kwDODI9FZc5wATzp"
        },
        {
          "author": "arrowd",
          "body": "Yes, `libunwind-20230730`.",
          "createdAt": "2024-01-05T19:00:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T19:00:19Z",
          "id": "IC_kwDODI9FZc5wAUG_"
        },
        {
          "author": "arrowd",
          "body": "I see the release candidate of `libunwind` received a lot of FreeBSD-related fixes. I'll try building the dotnet part against it.",
          "createdAt": "2024-01-05T19:35:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T19:35:28Z",
          "id": "IC_kwDODI9FZc5wAdai"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd the `libunwind` rc1 should have all the FreeBSD x86_64, i386, and aarch64 fixes included. AFAIK only aarch64 fixes/additions are required for successfully building/running dotNET there but @sec would have a better idea on that arch.",
          "createdAt": "2024-01-05T20:52:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T20:52:08Z",
          "id": "IC_kwDODI9FZc5wAvrJ"
        },
        {
          "author": "arrowd",
          "body": "Yes, with `libunwind-1.8.0rc` the `COR_E_EXECUTIONENGINE` problem is gone. Hooray! Although we'll have to wait for a release.\r\n\r\nThe last build failure I sometimes hit is\r\n\r\n```\r\n  Packaged all symbols in '/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/artifacts/x64/Release/dotnet-symbols-all-8.0.100-rtm.23551.1-freebsd.13-x64.tar.gz'\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018: The \"CreateSdkSymbolsLayout\" task failed unexpectedly.\r\n/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/build.proj(123,5): error MSB4018: System.IO.IOException: Too many open files : '/wrkdirs/usr/ports/lang/dotnet/work/dotnet-8.0.0/artifacts/tmp/Release/Symbols/runtime/obj/Microsoft.NETCore.App.Runtime/Release/net8.0/freebsd-x64/symbols/Microsoft.CSharp.pdb'\r\n```\r\n\r\nIt seems to be generating `dotnet-symbols-all-8.0.100-rtm.23551.1-freebsd.13-x64.tar.gz` file, which is then not included in the package and thus discarded. I wonder if there is way to prevent the build process from generating it?",
          "createdAt": "2024-01-06T15:03:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-06T15:03:37Z",
          "id": "IC_kwDODI9FZc5wCkoe"
        },
        {
          "author": "Thefrank",
          "body": "Both `dotnet-symbols-all-NETVERSION-OS.MAJOR-ARCH.tar.gz` and `dotnet-symbols-sdk-NETVERSION-OS.MAJOR-ARCH.tar.gz` should be in the final output even if they are unused by the user: they just contain *.pdb files and the sdk itself already contains symbols embedded in binaries and libraries.\r\n\r\nIf you have a desire to remove these from the output you can find that task here: https://github.com/dotnet/dotnet/blob/40e7f014ff784457efffa58074549735e30772ae/build.proj#L7",
          "createdAt": "2024-01-06T19:13:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-06T19:13:48Z",
          "id": "IC_kwDODI9FZc5wC1Vt"
        },
        {
          "author": "sec",
          "body": "@arrowd I've never hit `Too many open files`, but I've been building on my boxes without any limits - have you checked/tried to raise those limits? Like `login.conf` and `openfiles` and/or `maxproc` for the build user?\r\n\r\nWorth to check sysctl like `kern.maxfiles` and `kern.maxfilesperproc`",
          "createdAt": "2024-01-07T12:31:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-07T12:31:48Z",
          "id": "IC_kwDODI9FZc5wDzxU"
        },
        {
          "author": "arrowd",
          "body": "@Thefrank Again your pointer turns out to be very helpful. I patched out targets that create PDB tarballs and it both fixed the error and shortened the build. I'm still a bit confused why these tarballs are generated in the first place if they end up being unused. Anyways, my patch is here https://github.com/freebsd/freebsd-ports/commit/cc9dd5149cc0166e2ae145cef48a911e4a5b51a7\r\n\r\nIn the mean time, necessary changes were pushed to poudriere-devel.",
          "createdAt": "2024-01-08T17:28:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-08T17:28:17Z",
          "id": "IC_kwDODI9FZc5wJcvz"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd AFAIK, the PDB files are used during debugging for the managed code parts. The PDBs are also likely on the microsoft symbol server...if you are a windbg user.\r\n\r\nDuring a source build, all of the native stuff has symbols embedded. These can be `strip`'d to take the SDK down to ~300M. All of the `.dll` files appear to have external .pdb for them. \"Normal\" cross-compile or native-compile take all of the symbols and put them into their own tarballs by default: `dotnet-runtime-symbols-freebsd-x64-8.0.0.tar.gz` VMR lacks any symbols for .so files and binaries where a native compile would have those too as .dbg files.\r\n\r\n`dotnet-symbols-sdk-*` is layout like the SDK so you should be able to just extract it on top the SDK to get all of the symbols side-by-side with their libraries. `dotnet-symbols-all-*`: I have no idea where this would be used.",
          "createdAt": "2024-01-08T18:51:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-08T18:51:03Z",
          "id": "IC_kwDODI9FZc5wJ5qd"
        },
        {
          "author": "lukeb1961",
          "body": "@arrowd fyi today I grabbed your https://github.com/arrowd/freebsd-ports/tree/dotnet\r\nand built the port on a clean new 14 release. no errors. Initial testing is good.",
          "createdAt": "2024-01-17T01:05:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2024-01-17T05:52:56Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-25T06:17:48Z",
                "user": "ghishadow"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T19:26:40Z",
                "user": "gtewallace"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODUiTsQ=="
          },
          "updatedAt": "2024-01-17T01:05:47Z",
          "id": "IC_kwDODI9FZc5w79zX"
        },
        {
          "author": "Thefrank",
          "body": "`libunwind` 1.8 has been [released](https://github.com/libunwind/libunwind/releases/tag/v1.8.0). This hopefully resolves any unwinding issues that remain\r\n\r\nThere is already a request to bump the version in ports: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=276346",
          "createdAt": "2024-01-18T01:17:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-01-18T07:03:53Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-25T06:18:03Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODUBPlQ=="
          },
          "updatedAt": "2024-01-18T01:17:40Z",
          "id": "IC_kwDODI9FZc5xGw1W"
        },
        {
          "author": "arrowd",
          "body": "The port has landed as `lang/dotnet`. Thanks everyone involved.",
          "createdAt": "2024-01-29T09:34:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T09:36:47Z",
                "user": "josteink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T09:42:26Z",
                "user": "Kreeblah"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T09:42:36Z",
                "user": "Kreeblah"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T09:55:16Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T09:55:24Z",
                "user": "SchaichAlonso"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T09:56:01Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T10:19:20Z",
                "user": "arsatiki"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T10:19:36Z",
                "user": "arsatiki"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T11:15:08Z",
                "user": "vborovikov"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T11:15:10Z",
                "user": "vborovikov"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T12:02:00Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T12:15:10Z",
                "user": "jasonpugsley"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T12:51:47Z",
                "user": "janvorli"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T14:57:13Z",
                "user": "richlander"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T15:46:16Z",
                "user": "jkotas"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T15:46:19Z",
                "user": "jkotas"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T16:26:20Z",
                "user": "baronfel"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T18:07:01Z",
                "user": "jonsagara"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-29T18:38:20Z",
                "user": "army1349"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-29T20:02:27Z",
                "user": "rwv37"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T21:32:18Z",
                "user": "wfurt"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T21:59:36Z",
                "user": "sjorge"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T21:59:38Z",
                "user": "sjorge"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-29T23:21:42Z",
                "user": "sporkman"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-30T03:33:39Z",
                "user": "shkit"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-01-30T14:04:11Z",
                "user": "mheppner"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-02-02T02:56:19Z",
                "user": "dpen2000"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-02-03T13:31:41Z",
                "user": "preetpalS"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-04T01:46:30Z",
                "user": "AustinWise"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-02-04T01:46:31Z",
                "user": "AustinWise"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-04T01:46:31Z",
                "user": "AustinWise"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-02-06T07:17:55Z",
                "user": "lbartoletti"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-08T00:11:02Z",
                "user": "lukeb1961"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-11-29T07:43:20Z",
                "user": "Teddy55Codes"
              }
            ],
            "totalCount": 34,
            "endCursor": "Y3Vyc29yOnYyOpHOD88kJw=="
          },
          "updatedAt": "2024-01-29T09:34:05Z",
          "id": "IC_kwDODI9FZc5yGezQ"
        },
        {
          "author": "josteink",
          "body": "Holy macaroni! That's amazing news!\r\n\r\nI remember back ... 9 years ago? when I thought this would simply be a small job of forcing the compiler until it ran, with a Jeremy Clarkson like confidence saying \"How hard can it be?\"\r\n\r\nI must admit I've lost confidence since then, seeing this thread just getting longer and longer and longer without every really \"getting there\".\r\n\r\nThank SO much to everyone involved who took my initial patches and made them into something which can finally be useful for everyone ❤️\r\n\r\nEspecially @arrowd , @Thefrank, @sec who relentlessly kept on pushing, and also big thanks to the staff on Microsofts end, supporting this endeavour all the way through ( @janvorli , @jkotas , and possibly more!)\r\n\r\nI'm absolutely thrilled to see this landed 😄 ",
          "createdAt": "2024-01-29T09:41:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-01-29T10:09:46Z",
                "user": "akoeplinger"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T10:19:33Z",
                "user": "arsatiki"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T11:15:23Z",
                "user": "vborovikov"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T12:02:42Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T12:51:43Z",
                "user": "janvorli"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T17:10:00Z",
                "user": "adamsitnik"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-29T18:39:18Z",
                "user": "army1349"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T19:27:09Z",
                "user": "gtewallace"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T21:32:57Z",
                "user": "wfurt"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-30T10:04:12Z",
                "user": "sec"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-30T14:04:14Z",
                "user": "mheppner"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-03T13:31:33Z",
                "user": "preetpalS"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-08T00:11:18Z",
                "user": "lukeb1961"
              },
              {
                "content": "HEART",
                "createdAt": "2024-11-29T07:44:05Z",
                "user": "Teddy55Codes"
              }
            ],
            "totalCount": 14,
            "endCursor": "Y3Vyc29yOnYyOpHOD88kZQ=="
          },
          "updatedAt": "2024-01-29T09:41:59Z",
          "id": "IC_kwDODI9FZc5yGiG6"
        },
        {
          "author": "luizfbicalho",
          "body": "Nice, do you have a schedule to launch this release? ",
          "createdAt": "2024-01-29T11:51:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T11:51:55Z",
          "id": "IC_kwDODI9FZc5yHYGm"
        },
        {
          "author": "richlander",
          "body": "Congratulations! This is a huge accomplishment and a great example of a collaborative community project. Slow and steady wins the race. .NET in FreeBSD should unlock a lot of scenarios for folks.",
          "createdAt": "2024-01-29T15:16:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T15:16:10Z",
          "id": "IC_kwDODI9FZc5yIyKB"
        },
        {
          "author": "DDHF22",
          "body": "Indeed, a great successful project !\r\nThis was the obstacle that blocked PowerShell on FreeBSD – I hope that will be picked up soon!\r\n\r\n\r\nFrom: Rich Lander ***@***.***>\r\nSent: Monday, 29 January 2024 16.16\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Claus Bruun ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] Support for FreeBSD (#14537)\r\n\r\n\r\nCongratulations! This is a huge accomplishment and a great example of a collaborative community project. Slow and steady wins the race. .NET in FreeBSD should unlock a lot of scenarios for folks.\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/runtime/issues/14537#issuecomment-1914905217>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AALCZ7GYXUXOEA2WNDWWLZLYQ64MTAVCNFSM4TS3XPPKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCOJRGQ4TANJSGE3Q>.\r\nYou are receiving this because you commented.Message ID: ***@***.******@***.***>>\r\n",
          "createdAt": "2024-01-29T16:02:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T16:02:51Z",
          "id": "IC_kwDODI9FZc5yJNvV"
        },
        {
          "author": "Thefrank",
          "body": "@DDHF22 It is now hidden behind the \"cut\" of displayed messages in this issue but I have a number of PRs out to get pwsh working under FreeBSD. There is an older version of pwsh in binary form that people are welcome to try but that has one rather major [issue](https://github.com/Thefrank/freebsd-port-sooners/issues/18) that I am working through.\r\n\r\nOther things people might have interest in using: \r\n- [Azure Pipeline Agent](https://github.com/microsoft/azure-pipelines-agent/pull/3266). I have been using this since the PR was made. @joperator has done an amazing job maintaining this PR for 3 years now.\r\n- [Jellyfin](https://github.com/Thefrank/jellyfin-server-freebsd/). This is already in ports as binary-only and upstream support is unlikely to change as the team is rightly waiting for official Microsoft support. It requires no patching to build but is two different items bundled into one package making it awkward to handle.\r\n- *arr programs. [Sonarr](https://sonarr.tv/) and similar are also in ports and like Jellyfin are binary-only. They use NET6 so it will likely not switch to building from code until a move to NET8.\r\n",
          "createdAt": "2024-01-29T18:17:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T18:17:06Z",
          "id": "IC_kwDODI9FZc5yKT30"
        },
        {
          "author": "rwv37",
          "body": "First, this is so great. Thank you all!\r\n\r\nSecond, I'm sorry for the ignorant question, but: How do I use this? Specifically, I do _not_ use a GUI on FreeBSD (and I would prefer to stay that way), so VSCode's out of the question. I do my .NET development on a Windows machine, using Visual Studio (not VSCode), and I'd prefer to stay that way, too.\r\n\r\nSo, do I somehow cross-compile for FreeBSD from VS on Windows, then move the binaries over to the FreeBSD machine? Or do I move the source code, and then compile it directly from the command line via msbuild or whatever (sorry, been a while since I've used the command line to compile .NET stuff)?",
          "createdAt": "2024-01-29T20:10:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T20:10:26Z",
          "id": "IC_kwDODI9FZc5yK9yq"
        },
        {
          "author": "josteink",
          "body": "> First, this is so great. Thank you all!\n> \n> \n> \n> Second, I'm sorry for the ignorant question, but: How do I use this? Specifically, I do _not_ use a GUI on FreeBSD (and I would prefer to stay that way), so VSCode's out of the question. I do my .NET development on a Windows machine, using Visual Studio (not VSCode), and I'd prefer to stay that way, too.\n> \n> \n> \n> So, do I somehow cross-compile for FreeBSD from VS on Windows, then move the binaries over to the FreeBSD machine? Or do I move the source code, and then compile it directly from the command line via msbuild or whatever (sorry, been a while since I've used the command line to compile .NET stuff)?\n\nYou can probably use both options:\n\n- edit on FreeBSD (for instance in Emacs) and build using dotnet CLI provided by the .net sdk\n- edit in VSCode locally with ssh-remote against FreeBSD host. \n\nI'm sure there's other options too, but I'm honestly not sure about the current state of cross-compilation.\n\nI don't think FreeBSD is a valid cross-build target available in the \"official\" .net build provided by MS. At least not yet. ",
          "createdAt": "2024-01-29T20:53:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-29T22:12:06Z",
                "user": "rwv37"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUjkUA=="
          },
          "updatedAt": "2024-01-29T20:55:42Z",
          "id": "IC_kwDODI9FZc5yLOns"
        },
        {
          "author": "Thefrank",
          "body": "@rwv37 to build on what @josteink said:\r\n\r\n- Unless it has changed in the past year-ish, VSCode can not connect to / remote build on FreeBSD because it is not Windows/OSX/Linux. VS can do this via \"Cross Platform\" in the options menu. It is more involved than using WSL with VS but still doable. I will add the disclaimer that I have only used this feature for CMake/CTest.\r\n- The official installer still lacks `freebsd-x64` as a valid target. NuGet repos still lack anything for any FreeBSD RIDs. Under Windows/OSX/Linux you will need to edit `Microsoft.NETCoreSdk.BundledVersions.props` in the SDK to include cases for `freebsd-x64` and you will have to manually add in the missing NuGet files into your local cache.\r\n- The ports version of dotnet currently does not support AARCH64. @sec has done a great job of not only getting AARCH64 support in but also [maintains](https://github.com/sec/dotnet-core-freebsd-source-build) an SDK for it. The same caveats from above also apply here. ",
          "createdAt": "2024-01-29T21:14:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-29T22:12:11Z",
                "user": "rwv37"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUjkWA=="
          },
          "updatedAt": "2024-01-29T21:14:28Z",
          "id": "IC_kwDODI9FZc5yLXgz"
        },
        {
          "author": "wfurt",
          "body": "> I remember back ... 9 years ago?\r\n\r\n1.0\r\nhttps://github.com/dotnet/corefx/pull/2021\r\n2.1\r\nhttps://github.com/wfurt/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD/\r\n3.x\r\nhttps://github.com/wfurt/corefx/wiki/Building-.NET-Core-3.x-on-FreeBSD\r\n\r\nand then most functional changes during 5.x and 6.x\r\nI'm glad that the community was able to push the builds over the finishing line as I was unable to put much effort into it recently. Maybe I'll write saga one day for memories. \r\n",
          "createdAt": "2024-01-29T21:45:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-01-29T21:53:11Z",
                "user": "filipnavara"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-29T22:06:05Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-30T00:21:38Z",
                "user": "richlander"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-30T01:38:09Z",
                "user": "danmoseley"
              },
              {
                "content": "LAUGH",
                "createdAt": "2024-02-08T11:09:22Z",
                "user": "sec"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODV_x-Q=="
          },
          "updatedAt": "2024-01-29T21:45:42Z",
          "id": "IC_kwDODI9FZc5yLihn"
        },
        {
          "author": "rmszc81",
          "body": "Honestly, I have to congratulate everyone involved in this journey. Finally, the .NET Framework will be able to be used on a decent operating system like FreeBSD. It was a dream for me to be able to use the .NET framework on the operating system I trust, and that has become a reality. Truly, my heartfelt congratulations for the excellent work.\r\n\r\nLast night (GMT +7), I tried to install .NET 8 on a completely new installation and was unsuccessful, even using the \"latest\" packages. Even after the commands: pkg update, pkg upgrade, freebsd-update fetch install, the lang/dotnet package was not available, nor was the ports lang/dotnet. Is there something wrong that I am doing or something that I missed? Thank you all, good luck, and success!",
          "createdAt": "2024-01-30T01:14:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-30T01:14:45Z",
          "id": "IC_kwDODI9FZc5yMfe6"
        },
        {
          "author": "emaste",
          "body": "> the lang/dotnet package was not available\r\n\r\nPackages are built on a ~weekly cadence. The package should be available before this time next week (assuming that the build is successful).\r\n\r\nIf you clone a ports tree from git (https://github.com/freebsd/freebsd-ports/)  you'll see the lang/dotnet directory.\r\n",
          "createdAt": "2024-01-30T01:41:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-30T01:41:11Z",
          "id": "IC_kwDODI9FZc5yMmu-"
        },
        {
          "author": "arsatiki",
          "body": "> * Unless it has changed in the past year-ish, VSCode can not connect to / remote build on FreeBSD because it is not Windows/OSX/Linux. VS can do this via \"Cross Platform\" in the options menu. It is more involved than using WSL with VS but still doable. I will add the disclaimer that I have only used this feature for CMake/CTest.\r\n\r\nI managed to get it working by installing the Linux compatibility layer and then configuring SSH like this:\r\n\r\n```\r\nHost z-linux\r\n  HostName 10.0.0.xx\r\n  User xxx\r\n  SetEnv PATH=\"/compat/linux/usr/sbin:/compat/linux/usr/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\"\r\n  RemoteCommand /compat/linux/bin/bash\r\n  RequestTTY force\r\n\r\n```\r\n",
          "createdAt": "2024-01-30T07:37:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-30T07:37:01Z",
          "id": "IC_kwDODI9FZc5yN3sI"
        },
        {
          "author": "sec",
          "body": "Two words: Well done!\r\n\r\n@rwv37 if you're still collecting info, then doing simple `dotnet publish` and then getting what's inside `bin\\Release\\net8.0\\publish` into FreeBSD box, you should be able to run produced binaries using SDK. Ex. Create new `abc` MVC project and publish, copy output to FreeBSD box and then `dotnet abc.dll`.\r\n\r\nIf your code don't use any 3rd party libs that don't like FreeBSD, you should be fine. Or get the sources there and compile/publish directly on FreeBSD box or use tips from above :)\r\n\r\nI will try to gather some time and check/upstream any needed changes for AARCH64 and play around with @arrowd port to add support also for that, as libunwind got new release with needed fixes for this arch.\r\n\r\n\r\n",
          "createdAt": "2024-01-30T10:04:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-31T01:02:07Z",
                "user": "rwv37"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-08T00:10:31Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-14T18:34:27Z",
                "user": "gtewallace"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODWxREA=="
          },
          "updatedAt": "2024-01-30T10:04:00Z",
          "id": "IC_kwDODI9FZc5yOz1q"
        },
        {
          "author": "arrowd",
          "body": "> I will try to gather some time and check/upstream any needed changes for AARCH64 and play around with @arrowd port to add support also for that, as libunwind got new release with needed fixes for this arch.\r\n\r\nThat'd be great. You basically just need to arrange files needed for bootstrap in the same way as port expects it for amd64.",
          "createdAt": "2024-01-30T10:10:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-30T10:10:45Z",
          "id": "IC_kwDODI9FZc5yO32G"
        },
        {
          "author": "akoeplinger",
          "body": "> Under Windows/OSX/Linux you will need to edit Microsoft.NETCoreSdk.BundledVersions.props in the SDK to include cases for freebsd-x64\r\n\r\nUpstreaming these changes to GenerateBundledVersions.targets in the dotnet/installer repo should be fine.",
          "createdAt": "2024-01-30T11:44:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-30T11:44:17Z",
          "id": "IC_kwDODI9FZc5yPf6V"
        },
        {
          "author": "gtewallace",
          "body": "Hello from the FreeBSD Foundation. \r\n\r\nI wanted to drop a quick note in here to express my immense gratitude to the engineers who have made this happen. \r\n\r\nAs folks here know, support for .NET in FreeBSD, while of course key to running .Net apps, has a cascading impact on the ability for the FreeBSD community to merge patches into open source projects that use GitHub Actions and for enterprises and vendors with FreeBSD-based systems to efficiently use Azure Pipelines.\r\n\r\nLooking to next steps, I’m very interested in people’s thoughts on: \r\n\r\n1. Best ways to maintain this work. Are there ways we can ensure that as future releases of .NET make their way out, FreeBSD checks can be automated so we can ensure efficient, uninterrupted support?\r\n2. How we can build on this work to ensure support for FreeBSD in GH Actions and Azure Pipelines?\r\n3. What can the Foundation do to help?\r\n\r\nThank you again!\r\n\r\nGreg\r\ngreg at freebsdfoundation dot org",
          "createdAt": "2024-02-16T20:33:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-02-16T20:47:35Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-16T22:29:50Z",
                "user": "deepy"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-17T03:57:47Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-19T23:46:39Z",
                "user": "jarendt"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODXZzQg=="
          },
          "updatedAt": "2024-02-16T20:33:36Z",
          "id": "IC_kwDODI9FZc50L98v"
        },
        {
          "author": "Thefrank",
          "body": "@gtewallace  I am not an enterprise or enterprise user so this feedback might not be as useful.\r\n\r\nWarning for readers: This will be on the verbose side.\r\n\r\n\r\n>     1. Best ways to maintain this work. Are there ways we can ensure that as future releases of .NET make their way out, FreeBSD checks can be automated so we can ensure efficient, uninterrupted support?\r\n\r\nLet me break this question down a bit\r\n\r\nBuilding!\r\n---\r\n\r\nBreakages\r\n\r\nFrom personal experience direct build breakage comes either from this repo or from missing NuGets from the Installer repo when generating portable builds. These are both rare. \r\n\r\nRuntime:\r\nThe checks system on this repo already has a check for crossbuilding FreeBSD-x64 13.2 so PRs are unlikely to break it. A FreeBSD-ARM64 check would be nice along with matching FreeBSD 14.0 checks. As an example, FreeBSD 14.0 is different enough that additional [patching](https://github.com/freebsd/freebsd-ports/blob/main/lang/dotnet/files/patch-src_runtime_src_native_libs_System.Native_pal__networkstatistics.c) is required for it to build. Adding in FreeBSD-ARM64 should be an easy ask as it was likely missed when that arch was added but duplicating the number of FreeBSD checks by adding in 14.0 version might be harder.\r\n\r\nInstaller:\r\nThis is mostly an annoyance. Installer issues are also uncommon and I have only encountered it twice: once about [18 months](https://github.com/dotnet/installer/issues/14784) ago and again with the [most recent](https://github.com/dotnet/installer/issues/18656) release. This issue only breaks automated builds. Instead of just increasing some numbers in a YAML file and letting everything build I now need to either divine the commit of the missing NuGet from the repo it came and build that or patch a number of files to accept a \"best guess\" on what the correct version would be. This only hits portable builds as the VMR (should) have all of the needed packages before building starts.\r\n\r\nThe VMR\r\n\r\nThe FreeBSD port uses the [VMR](https://github.com/dotnet/dotnet/). This is the suggested way of building net8 or higher from source. FreeBSD can not use the VMR nor [source-build](https://github.com/dotnet/source-build/) repo for earlier versions (e.g. net6 and net7) which are still in support so the options here are either crossbuilding or native building SDKs from repo tags. \r\n\r\nMost (all?) patches that are needed to build the VMR are either already merged or in PRs. This won't help net8 versions of the VMR/port but it will mean future versions require fewer if any patches.\r\n\r\nTesting!\r\n---\r\n\r\nMicrosoft has an [extensive](https://helix.dot.net/) system for testing. FreeBSD is not a part of that system.\r\n\r\nFor a while I did nightly a build+test of the runtime but gave up as keeping up with minor version changes of the components needed became too much. Running a complete set of tests took more than 1hr on my (rather old) setup.\r\n\r\nThe VMR has smoke tests but those are Linux/OSX based. It should be rather easy to add cases/exceptions for FreeBSD but getting that to work in the port system might be challenging. \r\n\r\nHelp with regular testing would be great but I don't even know where to begin with this.\r\n\r\n---\r\n\r\n> \r\n>     2. How we can build on this work to ensure support for FreeBSD in GH Actions and Azure Pipelines?\r\n> \r\n\r\nThis question might be better suited for large-scale users of those products but here is my side\r\n\r\nGH Actions/runners:\r\n---\r\n\r\nActions:\r\nMost dotNET actions can not be used because they require some amount of external support. As an example actions/setup-dotnet needs the dotnet install scripts to know about FreeBSD and have a location on the internet (or locally) to download the SDK and install it. There might be room for making a FreeBSD specific action for using dotnet but that is beyond my expertise.\r\n\r\nRunners:\r\nThe at-face-value reasoning for the lack of GH runners is due to maintenance concerns. \r\nExternal OS contributions are not accepted as this must be done in-house.\r\n\r\n[Issue](https://github.com/actions/runner/issues/385)\r\n[Discussion](https://github.com/actions/runner-images/discussions/7109)\r\n\r\nThe work-around for this is a VM-in-VM solution. This is less than ideal but still an alternative.\r\n\r\nAZP:\r\n---\r\n\r\nThis actually works!...after patching...and unwise patching.\r\n[Patch 1](https://github.com/microsoft/azure-pipelines-agent/pull/3266). \r\n[Patch 2](https://github.com/microsoft/azure-pipelines-task-lib/pull/799). External lib\r\n`DownloadBuildArtifacts` [Issue](https://github.com/microsoft/azure-pipelines-agent/pull/3266#issuecomment-945365880). This requires patching a closed source file from Microsoft Azure DevOps Server which resolves the issue but is...unwise.\r\n\r\nI have used this on FreeBSD 12.x and also works on 13.2 and 14.0\r\n\r\nOther tools/tooling?\r\n---\r\n\r\nThings that you can `dotnet tool install xxxxx` don't know about FreeBSD so FreeBSD will need to be added to those projects if they accept PRs for community supported platforms.\r\n\r\nSupport in the port system would be nice too but the number of ports that use dotNET, I can count on one hand. For now, I am skeptical of dedicating resources to get this setup.\r\n\r\n\r\nFinally, most of this wider adoption depends on FreeBSD becoming an officially supported platform for dotNET. \r\nI feel that is too heavy of a lift for the time being.\r\nThis might change quickly as users can `pkg install dotnet` and start using it on FreeBSD. \r\nStarting in net9-preview3(?) the SDK will see FreeBSD-x64 and FreeBSD-arm64 as valid targets. Which should also help.",
          "createdAt": "2024-02-17T03:57:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-02-17T07:01:29Z",
                "user": "nkosi23"
              },
              {
                "content": "HEART",
                "createdAt": "2024-02-17T13:40:16Z",
                "user": "gtewallace"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODXJA1w=="
          },
          "updatedAt": "2024-02-17T03:57:39Z",
          "id": "IC_kwDODI9FZc50NQ7i"
        },
        {
          "author": "nkosi23",
          "body": "> What can the Foundation do to help?\r\n\r\nEngaging with Microsoft at a corporate level (product managers, etc...) to make the case that supporting FreeBSD officially would be worth their time (widespread use in server environments, pillar of Unix-like OSes so will facilitate support to a wide range of OSes, etc...). Explore how the foundation could help them streamline this integration.\r\n\r\nThe items listed by @Thefrank highlight an interesting reality: at this point the remaining challenge / missing bit is adoption by community and ecosystem tools, but this will not happen unless FreeBSD is officially supported. This is sort of a chicken-and-egg problem. I feel the community has done its reasonable part by aligning solutions for the core technical stuff, but that it wouldn't be productive to require the community to solve non-technical corporate problems by hacking around (patching closed-source binaries, begging inclusion in Nugget feeds, lobbying projects to support a platform not officially supported etc...).\r\n\r\nSo I feel a productive action the FreeBSD foundation could take is engage with the corporates at Microsoft to try to convince them to meet the community halfway on this one.",
          "createdAt": "2024-02-17T07:15:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-02-17T13:40:45Z",
                "user": "gtewallace"
              },
              {
                "content": "EYES",
                "createdAt": "2024-02-17T13:40:51Z",
                "user": "gtewallace"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-19T08:42:17Z",
                "user": "sec"
              },
              {
                "content": "HEART",
                "createdAt": "2024-03-12T09:30:00Z",
                "user": "Teddy55Codes"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T21:24:33Z",
                "user": "sjsepan3"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODjSqLw=="
          },
          "updatedAt": "2024-02-17T07:19:09Z",
          "id": "IC_kwDODI9FZc50ONNk"
        },
        {
          "author": "sec",
          "body": "On the other hand, as there's 9 preview1 - any \"official\" way to get there from VMR and 8 SDK or will we have to go through getting alpha 9 first - this is gonna be a bumpy road again.\r\n\r\nI've already tried doing crossbuilds without any problems, but for VMR we need `Private.SourceBuilt.Artifacts` which I don't know how to build either from crossbuilds or from repo's directly. With crossbuild SDK I could go with each repo one by one, but that's bumpy road, as there's a lot of missing nugets/versions to match by hand etc.",
          "createdAt": "2024-02-20T08:20:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-20T08:20:36Z",
          "id": "IC_kwDODI9FZc50cvFb"
        },
        {
          "author": "arrowd",
          "body": "I was under impression that we can just use the port to build 9 using artefacts from 8 and this will give us artifacts for 9. Am I wrong about that?",
          "createdAt": "2024-02-20T08:27:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-20T08:27:36Z",
          "id": "IC_kwDODI9FZc50cxni"
        },
        {
          "author": "sec",
          "body": "Reading [this](https://github.com/dotnet/source-build/discussions/4132) state that `Each major release of .NET requires [bootstrapping](https://github.com/dotnet/source-build/blob/main/Documentation/bootstrapping-guidelines.md). You will not be able to build 9.0 with an 8.0 SDK/artifacts.` and I can say it's true, becuase I tried :)",
          "createdAt": "2024-02-20T08:33:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "CONFUSED",
                "createdAt": "2024-02-20T08:45:44Z",
                "user": "arrowd"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODXdDjQ=="
          },
          "updatedAt": "2024-02-20T08:33:06Z",
          "id": "IC_kwDODI9FZc50czsa"
        },
        {
          "author": "arrowd",
          "body": "This is extremely sad and annoying. This means that I wouldn't be able to maintain the port myself without you guys. Anyone willing to take the maintainership?",
          "createdAt": "2024-02-20T14:26:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-20T14:26:11Z",
          "id": "IC_kwDODI9FZc50fLCk"
        },
        {
          "author": "sec",
          "body": "For now 8 build fine, even .1 and .2 releases can be build from the same port without any changes (you can bump the port to 8.0.2 btw). As for 9, I need to figure out myself how to bootstrap/build this properly first...",
          "createdAt": "2024-02-20T14:37:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-20T14:37:02Z",
          "id": "IC_kwDODI9FZc50fQiU"
        },
        {
          "author": "joperator",
          "body": "> I've already tried doing crossbuilds without any problems, but for VMR we need Private.SourceBuilt.Artifacts which I don't know how to build either from crossbuilds or from repo's directly.\r\n\r\nThis is exactly the problem that @sec has already addressed: Cross-building new major versions has become relatively easy in the meantime and I've already done this for .NET 6, 7 and 8. However, this approach isn't suitable for maintaining a FreeBSD _dotnet_ port. But as the [Makefile](https://github.com/freebsd/freebsd-ports/blob/d3af6c1c0caa1585dc88e07c6981f5ce1b817ec8/lang/dotnet/Makefile#L46) indicates, @arrowd has already created a .NET 8 version of `Private.SourceBuilt.Artifacts` for FreeBSD and successfully used it with the VMR. It would be really nice to know how to get there, as I've also no idea how to do that.",
          "createdAt": "2024-02-21T08:16:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-21T08:16:37Z",
          "id": "IC_kwDODI9FZc50l9Ob"
        },
        {
          "author": "arrowd",
          "body": "> But as the [Makefile](https://github.com/freebsd/freebsd-ports/blob/d3af6c1c0caa1585dc88e07c6981f5ce1b817ec8/lang/dotnet/Makefile#L46) indicates, @arrowd has already created a .NET 8 version of `Private.SourceBuilt.Artifacts` for FreeBSD and successfully used it with the VMR. It would be really nice to know how to get there, as I've also no idea how to do that.\r\n\r\nThese are created from the ports build results by running `make bootstrap-makesum` after the build finishes: https://github.com/freebsd/freebsd-ports/blob/d3af6c1c0caa1585dc88e07c6981f5ce1b817ec8/lang/dotnet/Makefile#L105\r\n\r\nArtifacts are actually created by the build itself, I only compute checksums and reupload archives.",
          "createdAt": "2024-02-21T08:28:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-21T10:02:08Z",
                "user": "joperator"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODXoSYg=="
          },
          "updatedAt": "2024-02-21T08:28:22Z",
          "id": "IC_kwDODI9FZc50mBjd"
        },
        {
          "author": "sec",
          "body": "> > But as the [Makefile](https://github.com/freebsd/freebsd-ports/blob/d3af6c1c0caa1585dc88e07c6981f5ce1b817ec8/lang/dotnet/Makefile#L46) indicates, @arrowd has already created a .NET 8 version of `Private.SourceBuilt.Artifacts` for FreeBSD and successfully used it with the VMR. It would be really nice to know how to get there, as I've also no idea how to do that.\r\n> \r\n> These are created from the ports build results by running `make bootstrap-makesum` after the build finishes: https://github.com/freebsd/freebsd-ports/blob/d3af6c1c0caa1585dc88e07c6981f5ce1b817ec8/lang/dotnet/Makefile#L105\r\n> \r\n> Artifacts are actually created by the build itself, I only compute checksums and reupload archives.\r\n\r\nYes, the question was rather to maybe someone from .net team and/or someone who maybe know something about this part - as those artifcats are created as product of VMR build - if those could be created/automated from each repo build somehow etc.\r\n\r\nI will try to find some time and go through docs etc. trying to produce those artifacts for v9, as getting crossbuild SDK is relative easy right now - then those can be used to easily use port to build 9.",
          "createdAt": "2024-02-21T09:20:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-21T10:02:13Z",
                "user": "joperator"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODXoSbA=="
          },
          "updatedAt": "2024-02-21T09:20:18Z",
          "id": "IC_kwDODI9FZc50mXW-"
        },
        {
          "author": "sec",
          "body": "I was able to bootstrap 9 for both x64 and arm64, [reading helps](https://github.com/dotnet/source-build/blob/main/Documentation/bootstrapping-guidelines.md#building-on-a-supported-platform-using-rid-known-to-net) and understand what you read helps even more :)\r\n\r\nThe steps that were needed, for future as I will mostly forget:\r\n1. Cross-compile `runtime`, `aspnetcore` and `installer` under Linux, to FreeBSD. First check what SDK version is needed to compile from VMR. All 3 commits/versions should match, the key is to select the right commit:\r\n- output from `dotnet --info` will give you SDK commit and Host (runtime) commit\r\n- for aspnet core commit, grep strings from any of dll's from Linux SDK (ex. `strings shared/Microsoft.AspNetCore.App/9.0.0-alpha.1.24061.8/Microsoft.AspNetCore.dll|grep -i commit`)\r\n- checkout those 3 commits, generate OfficialBuildId ([look here](https://github.com/sec/dotnet-core-freebsd-source-build/blob/v8/common.sh))\r\n- apply needed patches (the ones from the port for correct tree, either 8 or 9)\r\n- for `installer` **one extra change is needed**, otherwise it will fail to generate - https://github.com/dotnet/installer/commit/9ba09a779b94db43fd64ee16c14a8b14b0bc900e - don't know if it make sense to upstream this? @Thefrank I believe this one came from you at some point while ago, what do you think?\r\n- cross-compile is a walk in the park, you need to create rootfs, pass correct parameters and copy output from previous result into new repo to have success build, etc. (I have helper scripts for that in my repo somewhere)\r\n- this should produce working SDK under FreeBSD\r\n\r\n2. Download VMR under Linux, correct tag, run `./prep.sh` - it will download SDK and `Private.SourceBuilt.Artifacts.9.0.100-alpha.1.24067.1.centos.8-x64.tar.gz` - just example\r\n- now you need to insert FreeBSD specific runtimes into this package\r\n- for example\r\n```\r\nMicrosoft.AspNetCore.App.Runtime.freebsd-arm64.9.0.0-alpha.1.24061.8.nupkg\r\nMicrosoft.NETCore.App.Crossgen2.freebsd-arm64.9.0.0-alpha.1.24061.26.nupkg\r\nMicrosoft.NETCore.App.Host.freebsd-arm64.9.0.0-alpha.1.24061.26.nupkg\r\nMicrosoft.NETCore.App.Runtime.freebsd-arm64.9.0.0-alpha.1.24061.26.nupkg\r\nruntime.freebsd-arm64.Microsoft.DotNet.ILCompiler.9.0.0-alpha.1.24061.26.nupkg\r\nruntime.freebsd-arm64.Microsoft.NETCore.DotNetAppHost.9.0.0-alpha.1.24061.26.nupkg\r\nruntime.freebsd-arm64.Microsoft.NETCore.ILAsm.9.0.0-alpha.1.24061.26.nupkg\r\nruntime.freebsd-arm64.Microsoft.NETCore.ILDAsm.9.0.0-alpha.1.24061.26.nupkg\r\nruntime.freebsd-arm64.Microsoft.NETCore.TestHost.9.0.0-alpha.1.24061.26.nupkg\r\n```\r\nthose should be under `artifacts/packages/Release/Shipping` and `artifacts/packages/Release/NonShipping` either from `runtime` or `aspnetcore` build.\r\n3. Now you will have working SDK and matching artifacts\r\n4. I took existing port and made slight changes for `9.preview.1` - commits should be here https://github.com/sec/freebsd-ports/tree/dotnet9\r\n5. Copy SDK and artifacts into `ports/distfiles/dotnet` with names (replace `x64` with `arm64` if needed) that will match port:\r\n- dotnet-sdk-9.0.100-freebsd-x64.tar.gz\r\n- Private.SourceBuilt.Artifacts.9.0.100-alpha.1.24067.1.freebsd.13-x64.tar.gz\r\n6. Then `make NO_CHECKSUM=1` should work\r\n7. **I hit one error, with missing Nuget** for `System.CommandLine` - I just edited `work/dotnet-9.0.0-preview.1.24080.9/src/nuget-client/Directory.Packages.props`, line 11, changed version to `2.0.0-beta4.24060.1` (the one from artifacts) - hope this is just temp error :)\r\n8. And there it is - https://github.com/sec/dotnet-core-freebsd-source-build/releases/tag/9.0.0-preview.1-vmr - `9.0.100-preview.1` for `x64` and `arm64`\r\n9. Next preview builds of 9, should be easy, just bump number of VMR tag and it should work - we'll see\r\n10. Now I just need to finally get some even more time and read/figure out how to run runtime/aspnet tests - if any1 already done that, with step-by-step for dummies, please share :) (I was following docs some some time ago, but it was failing with lot of weird errors)\r\n11. Also rerunning the same builds, but using this native SDK as bootstrap - just replace 2 files and re-run - after next next free time - or wait for preview.2 :)\r\n\r\n@arrowd - as you are port master - do you think it will make sense to also have `dotnet9` flavor of the port - is it possible to have common base with 8 and 9 (9 require almost no patches, for preview.1 there are few, but most of them are already upstreamed and I hope they will be included in later previews). If yes, then some changes are needed to match naming for `rtm` and `preview` build, as it fail at finishing port build, just cosmetic changes if you ask me, but I'm not an expert.\r\n\r\nHaving both SDK and Private.SourceBuilt.Artifacts should be all needed to build new versions of SDK, both for 8 (I've already done builds for 8.0.1 and 8.0.2 just by bumping numbers in Makefile on my machines) and 9 (time will tell).\r\n\r\n@joperator That's how I got those :)",
          "createdAt": "2024-02-21T23:56:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-22T00:56:49Z",
                "user": "gtewallace"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-28T10:28:53Z",
                "user": "Martinfx"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODjgXeQ=="
          },
          "updatedAt": "2024-02-21T23:56:15Z",
          "id": "IC_kwDODI9FZc50utJ_"
        },
        {
          "author": "arrowd",
          "body": "> @arrowd - as you are port master - do you think it will make sense to also have dotnet9 flavor of the port - is it possible to have common base with 8 and 9 (9 require almost no patches, for preview.1 there are few, but most of them are already upstreamed and I hope they will be included in later previews).\r\n\r\nYes, absolutely. Just like we have several LLVM's in Ports, in the same way we can have several .NET's. We indeed should structure these ports to have some common base - this is achieved by so-called `master/slave` ports.\r\n\r\nAs I know nothing of .NET - which version should be default? Or even there should be no default at all? In other words, should we have `lang/dotnetX`, `lang/dotnetY`, etc rather than `lang/dotnetX`, `lang/dotnetY` and `lang/dotnet`?\r\n\r\n>  If yes, then some changes are needed to match naming for rtm and preview build, as it fail at finishing port build, just cosmetic changes if you ask me, but I'm not an expert.\r\n\r\nYep, I had a feeling that I was doing something wrong in all that versioning.\r\n\r\nP.S.\r\n\r\n> Then make NO_CHECKSUM=1 should work\r\n\r\nYou can use `make makesum` to regenerate the `distinfo`.",
          "createdAt": "2024-02-22T06:03:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-22T06:03:07Z",
          "id": "IC_kwDODI9FZc50wFk2"
        },
        {
          "author": "Thefrank",
          "body": "@sec 's workflow is the better way of approaching too-new dotNET versions. \r\n\r\n- I opted to use the ports framework for the VMR build and Microsoft's docker containers with AZP for the cross-builds. Both methods work. Pick whatever you are more familiar. I am lazy and look for automation where possible.\r\n- Cross builds are easy. We have tags and the linux sdk usually has `runtime`, `sdk` or `installer`, and `aspnetcore` commits if you want to fish them for native builds they usually work :D\r\n- I still manually make a patch like https://github.com/dotnet/installer/commit/9ba09a779b94db43fd64ee16c14a8b14b0bc900e so it will bundle the correct items. Mine are with RID injection for older [dotNET](https://github.com/Thefrank/dotnet-freebsd-crossbuild/blob/main/patches/patch_installernet7.patch) versions too but hardly a requirement. I never upstreamed the linux packaging workaround because I thought it too hacky and did not know if it would break packaging elsewhere\r\n- For ports 8.0.100's output can be used for 8.0.101 and that can be used for 8.0.102...etc. AFAIK VMR will stick with .1xx SDKs. We already have 8.0.20x tags elsewhere for portable builds. \r\n- The (official) port also handles the hosting of the artifacts needed instead of using some random GH. FreeBSD hosting is much more trusted than \"trust me, this repo is fine\". Replicating `prep.sh` via ports Makefile was a fun exercise but added far to much bloat to what could be reduced down to a few manually added items and alternative file hosting. I am still bad at `awk`\r\n\r\n---\r\n\r\n- [dotnet/installer](https://github.com/dotnet/installer/tree/main/src/SourceBuild/content) is the repo that generates `Private.SourceBuilt.Artifacts` but only when source building. Some recent changes should allow for source builds that are crossbuilds to use a portable RID. \r\n- If you just need reference packages then https://github.com/dotnet/source-build-reference-packages works but it will require a working SDK\r\n\r\n---\r\n\r\n- OpenSSL3 support for FreeBSD is still pending in PR\r\n- Build fix for FreeBSD 14 still needs to be made PRable. The official port already uses it as-is.\r\n- That should(?) cover it for NET9... Outside of test failures.\r\n- I still need to set my nightly build+test system back up and get back to working on test failures\r\n- I still need to clean up and publish my \"95%-brain-off cross-build YML\". Not sure who else would use this but hey.",
          "createdAt": "2024-02-22T06:06:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-22T06:06:30Z",
          "id": "IC_kwDODI9FZc50wGe2"
        },
        {
          "author": "joperator",
          "body": "@sec I haven't tried it yet, but your instructions sound very promising to me. Thank you very much for investigating this.\r\n\r\n@arrowd I used your `dotnet` package to build and test the Azure Pipelines Agent with my [adjustments](https://github.com/microsoft/azure-pipelines-agent/pull/3266) and it just worked immediately! So, as soon as they are merged and find their way into an [official release of the azure-pipelines-agent](https://github.com/microsoft/azure-pipelines-agent/releases), we can provide a port for it. One problem could be that building .NET apps is often heavily dependent on NuGet packages. In the FreeBSD ports collection, these must therefore be restored in advance of the actual build, which isn't always trivial.\r\n\r\n> As I know nothing of .NET - which version should be default? Or even there should be no default at all? In other words, should we have lang/dotnetX, lang/dotnetY, etc rather than lang/dotnetX, lang/dotnetY and lang/dotnet?\r\n\r\nWe should definitely have a `lang/dotnetX` port for each major version of .NET. I think a default `lang/dotnet` meta port pointing to the latest version would also be useful, as this also seems to be the case on Linux. I'm not an expert on this, but perhaps someone from Microsoft will share the design decisions for the package infrastructure on Linux so we can decide if they're suitable for FreeBSD as well?\r\nI'd even go one step further and provide separate ports for Runtime, ASP.NET, SDK and so on, as this is also done on Linux. With `lang/dotnetX` in `BUILD_DEPENDS` I guess it should be no problem to create them.",
          "createdAt": "2024-02-22T07:07:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-22T07:07:25Z",
          "id": "IC_kwDODI9FZc50wWMT"
        },
        {
          "author": "arrowd",
          "body": "> One problem could be that building .NET apps is often heavily dependent on NuGet packages. In the FreeBSD ports collection, these must therefore be restored in advance of the actual build, which isn't always trivial.\r\n\r\nThe important thing here is that all files required for the build should be fetched beforehand. The port should stop accessing network right after `make fetch` stage. This becomes a problem for some languages which is usually solved by\r\n\r\n1. Adding a way to infer all the dependencies from the initial distfile.\r\n2. Implementing a way to download all the dependencies separately and to hook them into the build.\r\n\r\nFor example, rust ports have a special `CARGO_CRATES` knob listing all Rust packages that are required for building the port. This knob is auto-generated by code from `Mk/Uses/cargo.mk`. The values from this knob are then used to populate `MASTER_SITES` and `DISTFILES` and to fill `distinfo`. Then during `make extract` all these pre-fetched packages gets extracted together with the port itself.\r\n\r\nI guess, we'll need to come up with same machinery for ports that use .NET? Are NuGet package hosted on some centralized CDN where we can fetch them by direct URL?",
          "createdAt": "2024-02-22T07:20:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-22T07:20:59Z",
          "id": "IC_kwDODI9FZc50wZ2m"
        },
        {
          "author": "joperator",
          "body": "> Are NuGet package hosted on some centralized CDN where we can fetch them by direct URL?\r\n\r\nFor NuGet packages there is [nuget.org](https://www.nuget.org/), which [appears to be a CDN](https://github.com/NuGet/Announcements/issues/60), where you can also download them by URL. However, NuGet allows the specification of other so-called packages sources, which is done, for example, in the [NuGet.Config files of azure-pipelines-agent](https://github.com/microsoft/azure-pipelines-agent/blob/master/src/NuGet.Config).",
          "createdAt": "2024-02-22T07:55:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-22T07:55:11Z",
          "id": "IC_kwDODI9FZc50wkKD"
        },
        {
          "author": "rmszc81",
          "body": "Hello guys, first, thank you so much for your effort. It's great to see this finally happen.\r\n\r\nToday, I decided to move some of my personal .NET 8 projects to FreeBSD 14, inside a jail, of course, and then, I got 2 problems:\r\n\r\n1st, it was necessary to set `allow.mlock=1` to the jail configuration. otherwise, it wasn't possible even to run a `dotnet new` command. problem solved.\r\n\r\nthen, 2nd, now I'm facing the following issue when I'm running `dotnet publish -c Release -o /app/bin`:\r\n\r\n`error NU1101: Unable to find package Microsoft.NETCore.App.Host.freebsd-x64. No packages exist with this id in source(s): nuget.org`\r\n\r\nany idea?\r\n\r\nOnce again, thanks a lot.\r\nBest!\r\n\r\n@rmszc81",
          "createdAt": "2024-03-05T11:11:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T11:11:14Z",
          "id": "IC_kwDODI9FZc517clv"
        },
        {
          "author": "sec",
          "body": "@rmszc81 First problem is just the way it is, you have to do it.\r\n\r\nFor the second part, you have two choices:\r\n- either create local directory, download those nuget's (either from port build output or from mine's or @Thefrank releases) and add that directory as nuget source. You can do that per project or `.nuget/NuGet/NuGet.Config`\r\n- second option is to use private nuget feed with those, as we don't have nothing \"semi-official\", for example I'm maintaining my own feed with outputs both for x64 and arm64 - check the info/link in here https://github.com/sec/dotnet-freebsd-nuget-feed\r\n- you can albo build dotnet from ports, it will generate `Private.SourceBuilt.Artifacts` which should also contain all the needed nuget's (or you can use the one that's bootstraping dotnet port build, just `make fetch` should get them, then extract that to local dir and reference in nuget.config).",
          "createdAt": "2024-03-05T11:25:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T11:25:48Z",
          "id": "IC_kwDODI9FZc517ik8"
        },
        {
          "author": "nkosi23",
          "body": "@sec Interesting! Since the NuGet packages are generated when building the port, would it be a good idea to add this custom NuGet feed automatically as a post-install script of the package? \r\n\r\nWe could for example copy the relevant packages under Private.SourceBuilt.Artifacts to a location such as: /usr/local/dotnet/nuget and create the .nuget/NuGet/NuGet.Config file pointing to this directory ",
          "createdAt": "2024-03-05T11:50:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T11:50:08Z",
          "id": "IC_kwDODI9FZc517suD"
        },
        {
          "author": "sec",
          "body": "That's good idea, we could copy FreeBSD specific nuget's after build and add pkg-message informing user to reference this directory in nuget.config - @arrowd what do you think?",
          "createdAt": "2024-03-05T12:16:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T12:16:08Z",
          "id": "IC_kwDODI9FZc5174d5"
        },
        {
          "author": "akoeplinger",
          "body": "Normally these packages are in the `packs` folder in the sdk root when source-building .NET for Linux distros. I think that doesn't happen for non-source-build but you can put them there.",
          "createdAt": "2024-03-05T12:26:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T12:28:15Z",
          "id": "IC_kwDODI9FZc517_Xh"
        },
        {
          "author": "arrowd",
          "body": "Sounds good. @sec can you make a patch for the port yourself? It should be too hard and you seem to already know what and where to put stuff.",
          "createdAt": "2024-03-05T12:29:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T12:29:14Z",
          "id": "IC_kwDODI9FZc518Am0"
        },
        {
          "author": "akoeplinger",
          "body": "Or set BundleRuntimePacks=true:  https://github.com/dotnet/installer/blob/75494d3ada6624c411116d4c6e52daaf49154ee7/src/redist/redist.csproj#L9",
          "createdAt": "2024-03-05T12:29:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T12:29:54Z",
          "id": "IC_kwDODI9FZc518ArV"
        },
        {
          "author": "rmszc81",
          "body": "Hello everyone! \r\n\r\nMy solution was to run `make fetch` (as suggested by @sec), then, I extracted the contents of the artifacts package into `/var/cache/nuget` and added this directory to my `Nuget.config` file configuration.\r\n\r\nSo far, so good, the project was built, published to `/app/bin` inside the jail but, now I have a problem with the encrypted `SQLite` database, aka `sqlcipher` that says that some `.so` files are missing. And well, they are, lol.\r\n\r\nAs this problem is not related to the .NET framework, I'll go after the solution in the appropriated place. Besides, as my app has support to `Postgres` as well, not having `sqlcipher` is not an issue at all.\r\n\r\nAnyway, I'd like to say thanks again to @sec, @nkosi23, @akoeplinger and @arrowd for the support. I went through all the links and I found a lot of cool stuff.\r\n\r\nSee you guys around.\r\nBest!\r\n\r\n@rmszc81 ",
          "createdAt": "2024-03-05T14:12:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T14:12:19Z",
          "id": "IC_kwDODI9FZc518xff"
        },
        {
          "author": "sec",
          "body": "As for SQLite, it's old known issue (https://github.com/ericsink/SQLitePCL.raw/issues/176) - simplest you can do is to either create symbolic link `e_sqlite3.so` in `/usr/local/lib` to your SQLite version.",
          "createdAt": "2024-03-05T15:20:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-05T15:20:01Z",
          "id": "IC_kwDODI9FZc519WO3"
        },
        {
          "author": "rmszc81",
          "body": "hello @sec,\r\nin this case, it's the `e_sqlcipher.so`.\r\n\r\nI'll have a look on this in another time. But thanks anyway, you helped a lot already ^^",
          "createdAt": "2024-03-06T01:21:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-06T01:21:41Z",
          "id": "IC_kwDODI9FZc52Awrb"
        },
        {
          "author": "sec",
          "body": "Well... As building 8.0.3 was no problem... Then `9.preview-2` to build from VMR require `9.preview-2` (just few versions behind, using preview-1 doesn't work), I really don't get it...",
          "createdAt": "2024-03-14T17:11:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-14T17:11:11Z",
          "id": "IC_kwDODI9FZc53FjV7"
        },
        {
          "author": "davidchisnall",
          "body": "> 1st, it was necessary to set allow.mlock=1 to the jail configuration. otherwise, it wasn't possible even to run a dotnet new command. problem solved.\r\n\r\nIf I remember correctly, the `mlock` call is there to provide support for the asymmetric lock, which requires executing a full barrier on other threads.  This is implemented on FreeBSD by updating a page mapping that must be guaranteed to trigger IPIs.\r\n\r\nFreeBSD 13.3 and 14 both include a Linux-compatible `membarrier`, and so the fallback code should no longer be required.  This should remove the need for `mlock`.\r\n\r\nUnfortunately, even though this work was sponsored by the FreeBSD Foundation, it landed without an accompanying man page so you have to poke at the headers and the git history to know that it's there (@emaste, perhaps the Foundation could also sponsor the docs?).\r\n\r\nNote that, unfortunately, you can't use the header to detect the features that are supported because the header provides a full set of the Linux `#define`s but the kernel implements only a subset.  I believe the subset is sufficient for .NET.",
          "createdAt": "2024-04-05T10:05:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-05T10:33:43Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-05T14:20:09Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-14T16:07:28Z",
                "user": "TimexPeachtree"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-28T10:29:02Z",
                "user": "Martinfx"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-24T08:34:19Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODm23oQ=="
          },
          "updatedAt": "2024-04-05T10:05:48Z",
          "id": "IC_kwDODI9FZc55jsdV"
        },
        {
          "author": "Thefrank",
          "body": "So as the SDK does not accept \"General Support\" via issues...\r\n\r\nHow is the installer built now that the Installer repo is gone for all versions of dotNET? The SDK has always come across as \"magic\" to me.\r\n\r\nFrom the old installer repo:\r\nThe RID was patched in `GenerateBundledVersions.targets` and if crossbuilding a patch was made to [GetRuntimeInformation.targets](https://github.com/dotnet/installer/blob/v6.0.422/src/redist/targets/GetRuntimeInformation.targets) so that it would include the targeted OS items instead of the host OS items. The former is gone entirely (how are supported RIDs generated?) and the later was trimmed down to a few lines, removing the FreeBSD reference entirely. Right now, I am just looking at dotNET6 but I assume this is similar across all in-support versions.",
          "createdAt": "2024-06-13T02:04:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-13T02:04:26Z",
          "id": "IC_kwDODI9FZc6A_0m-"
        },
        {
          "author": "jkotas",
          "body": "> Installer repo is gone for all versions of dotNET? \r\n\r\nThe branches for shipped version of .NET are still there and in use. ",
          "createdAt": "2024-06-13T03:02:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-06-13T06:02:44Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODlfvMA=="
          },
          "updatedAt": "2024-06-13T03:02:43Z",
          "id": "IC_kwDODI9FZc6BABlb"
        },
        {
          "author": "Thefrank",
          "body": "ah! I see my mistake. I was tracking SDK branches until a new one would come up, then follow that: 6.0.1xx -> 6.0.2xx -> etc. I was looking for a 6.0.423 which does not exist. From the core repo I see it only lists a 6.0.1xx branch for the SDK and there is a [6.0.131](https://github.com/dotnet/installer/tree/v6.0.131) in the installer repo even though it is unlisted in core. I will give this a shot!\r\n\r\npointy hat squarely on me here.",
          "createdAt": "2024-06-13T03:25:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-13T03:25:25Z",
          "id": "IC_kwDODI9FZc6BAGiB"
        },
        {
          "author": "TheBrambleShark",
          "body": "Can we update the OP with what's left of the to-do list on this? I'm definitely interested in contributing if I can, especially considering that I personally want to see BSD support. There was a post here which aggregated a to-do list, but it has everything completed.",
          "createdAt": "2024-06-15T18:17:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T18:23:25Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T18:43:25Z",
                "user": "michael-o"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T19:40:11Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-24T08:35:02Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODm23-Q=="
          },
          "updatedAt": "2024-06-15T18:17:48Z",
          "id": "IC_kwDODI9FZc6BXrS8"
        },
        {
          "author": "Thefrank",
          "body": "@Foxtrek64 \r\n\r\nA quick summary of https://github.com/dotnet/runtime/labels/os-freebsd\r\n\r\nDocumentation:\r\nhttps://github.com/dotnet/runtime/issues/31238 \r\n- Mostly updates to these: https://github.com/search?q=repo%3Adotnet%2Fruntime%20freebsd%20path%3A.md&type=code to make sure instructions are clear and still usable.\r\n- We have `dotnet` in pkg and is buildable via the ports system\r\n\r\nImplementation: \r\nhttps://github.com/dotnet/runtime/issues/3320\r\n- Major.Minor is a bit more important as FreeBSD ABI changes can impact `dotnet`\r\n\r\nhttps://github.com/dotnet/runtime/issues/26633\r\n- We use `libinotify` shim instead of native kqueue. \r\n- This would remove a dependency but I am not sure how much faster / better it would be as neither libinotify nor kqueue are designed for monitoring large number of files; this hits mediaplayers and backup tools built with dotnet.\r\n- Something \"better\" would need to come from the FreeBSD side. \r\n\r\nhttps://github.com/dotnet/runtime/issues/10519\r\n- Not sure on this one. I think this is more FreeBSD issue than dotnet issue? We don't have `libthr2` on FreeBSD\r\n\r\nhttps://github.com/dotnet/runtime/issues/8544\r\n- This covers all non-windows builds\r\n\r\n---\r\nNo issue but mentioned:\r\n\r\nhttps://github.com/dotnet/runtime/issues/14537#issuecomment-2039400277\r\n- FreeBSD has a clean-room implementation of  `membarrier`\r\n- Might not be 100% compatible with linux but better(?) than requiring `mlock` in jails: a setting that is rarely used and commonly forgotten when setting up a jail for a dotnet app.\r\n- Overview: https://www.freebsd.org/status/report-2021-10-2021-12/membarrier-rseq/\r\n\r\n---\r\n\r\nPending PRs:\r\n\r\nhttps://github.com/dotnet/runtime/pull/103187\r\n- Checks system uses a FreeBSD 13 based image so this was missed.\r\n\r\n---\r\n\r\nOthers I missed?",
          "createdAt": "2024-06-15T19:40:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T20:04:26Z",
                "user": "michael-o"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T21:25:35Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-15T23:12:08Z",
                "user": "TheBrambleShark"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-06-15T23:13:50Z",
                "user": "TheBrambleShark"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-16T11:01:13Z",
                "user": "0xfeeddeadbeef"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-17T17:02:06Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-24T08:35:09Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHODm24EQ=="
          },
          "updatedAt": "2024-06-15T19:40:23Z",
          "id": "IC_kwDODI9FZc6BYKSt"
        },
        {
          "author": "Thefrank",
          "body": "WALL OF STUFF WARNING\r\n---\r\ndotNET9 preview 5 cross compiles from linux with two small caveats:\r\n- `GetRuntimeInformation.targets` patch needed to be reapplied to the new file location. Native builds do not need this. AFAIK native builds require no patching currently!\r\n- `ILCompiler` made by runtime still contains Linux ELFs despite being labeled for `freebsd-x64`\r\n\r\n\r\n`/p:BundleRuntimePacks=true` seems to work.  The packs path contains the runtime and aspnetcore for FreeBSD as mostly symlinks.\r\n `/p:BundleNativeAotCompiler=true` is not in preview 5 and hopefully will operate like `BundleRuntimePacks`\r\n\r\n```\r\nfrank@freebsd:~/sdktest $ uname -a\r\nFreeBSD freebsd 14.1-RELEASE FreeBSD 14.1-RELEASE releng/14.1-n267679-10e31f0946d8 GENERIC amd64\r\n---- Built using the CBL Mariner image with FreeBSD 13.2 crossrootfs\r\n\r\nfrank@freebsd:~/sdktest $ ./dotnet --info\r\n.NET SDK:\r\n Version:           9.0.100-preview.5.24307.3\r\n Commit:            35b2c21ea6\r\n Workload version:  9.0.100-manifests.6407b7e4\r\n MSBuild version:   17.11.0-preview-24279-02+b963c24ef\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  14\r\n OS Platform: FreeBSD\r\n RID:         freebsd-x64\r\n Base Path:   /home/frank/sdktest/sdk/9.0.100-preview.5.24307.3/\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      9.0.0-preview.5.24306.7\r\n  Architecture: x64\r\n  Commit:       a5cc707d97\r\n\r\n.NET SDKs installed:\r\n  9.0.100-preview.5.24307.3 [/home/frank/sdktest/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 9.0.0-preview.5.24306.11 [/home/frank/sdktest/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 9.0.0-preview.5.24306.7 [/home/frank/sdktest/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n\r\n----\r\n\r\nfrank@freebsd:~/sdktest $ dotnet publish -r freebsd-x64 console/console.csproj /p:PublishAot=true\r\n-sh: dotnet: not found\r\nfrank@freebsd:~/sdktest $ ./dotnet publish -r freebsd-x64 console/console.csproj /p:PublishAot=true\r\n    /home/frank/sdktest/console/console.csproj : error NU1101: Unable to find package runtime.freebsd-x64.Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): nuget.org\r\n    /home/frank/sdktest/console/console.csproj : error NU1101: Unable to find package runtime.freebsd-x64.Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): nuget.org\r\n\r\n---\r\n\r\nRestore failed with 2 error(s) in 3.6s\r\nfrank@freebsd:~/sdktest $ ./dotnet publish -r freebsd-x64 console/console.csproj /p:PublishReadyToRun=true\r\n    /home/frank/sdktest/console/console.csproj : error NU1101: Unable to find package Microsoft.NETCore.App.Crossgen2.freebsd-x64. No packages exist with this id in source(s): nuget.org\r\n\r\nRestore failed with 1 error(s) in 3.9s\r\n```\r\nneither of these work without external NuGet packages. \r\nhttps://reviews.freebsd.org/D44561 might be the better solution if items like crossgen2 and ilc are not able to be added outside of source building\r\n\r\n`Crossgen2` NuGet correctly contains FreeBSD ELFs:\r\n\r\n```\r\n$file crossgen2 \r\ncrossgen2: ELF 64-bit LSB pie executable, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 13.2, FreeBSD-style, BuildID[sha1]=54a7f1c2a4752435c2cffd15eeb959f609966907, stripped\r\n```\r\n\r\n`ILCompiler` does not: it contains a mix of FreeBSD libraries and Linux ELFs\r\n```\r\n$ ./ * | xargs file\r\n./:                                           directory\r\n./ILCompiler.RyuJit.pdb:                      Microsoft Roslyn C# debugging symbols version 1.0\r\n./libclrjit_unix_x64_x64.so:                  ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=66177aebc4ab51f16fe1e6a5faa90a7ade09b674, stripped\r\n./libclrjit_win_x86_x64.so:                   ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=79ecdf1053497bde0393928dee1a727bc6b6b6a1, stripped\r\n./libclrjit_universal_arm_x64.so:             ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=b15d888e793cca18b6dd42b3b672f7144fbe45ec, stripped\r\n./libjitinterface_x64.so:                     ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=02a2d4a17bcbd0ff35f3caca9252853f95529a3c, stripped\r\n./ILCompiler.TypeSystem.pdb:                  Microsoft Roslyn C# debugging symbols version 1.0\r\n./ILCompiler.DependencyAnalysisFramework.pdb: Microsoft Roslyn C# debugging symbols version 1.0\r\n./ILCompiler.Compiler.pdb:                    Microsoft Roslyn C# debugging symbols version 1.0\r\n./libclrjit_universal_arm64_x64.so:           ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=0b476dc684291af72ab673b77dccbbf7f386cbf8, stripped\r\n./libclrjit_win_x64_x64.so:                   ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, for FreeBSD 13.2, BuildID[sha1]=a58827fd1b7ac68612408fa5e13c7db9091938a2, stripped\r\n./ilc.pdb:                                    Microsoft Roslyn C# debugging symbols version 1.0\r\n./ilc:                                        ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=41cb9e347020ad19b6402190528b968b6850c46f, stripped\r\n```\r\n\r\nOther than Linux ELFs in FreeBSD packs everything is going smooth from the cross compile side for .net 9\r\n\r\n---\r\n\r\nEDIT: 4 day later update\r\n\r\nUsing the most recent net9 preview tag, `TargetOS=linux` only appears three places in the binlog that are after Evaluation.  All three are from ILCompiler.cspoj : The first seems to come as a return from [ResolveReadyToRunCompilers](https://github.com/dotnet/runtime/blob/v9.0.0-preview.5.24306.7/src/tasks/Crossgen2Tasks/ResolveReadyToRunCompilers.cs) and the other two (_PrepareForReadyToRunCompilation) and (_CreateR2RImages) use it. Should this be blocked from https://github.com/dotnet/runtime/blob/a5cc707d976a14495462c9c492a921ff0927b8f5/src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj#L17 or error out from https://github.com/dotnet/runtime/blob/a5cc707d976a14495462c9c492a921ff0927b8f5/src/tasks/Crossgen2Tasks/ResolveReadyToRunCompilers.cs#L116-L120\r\n\r\nThere is no \"Property reassignment\" note in the binlog when this happens.\r\n\r\nAFAIK Cross-OS is not supported for R2R or AOT when targeting FreeBSD. The Crossgen2 project seems to honor this as it skips this part during packaging: https://github.com/dotnet/runtime/blob/a5cc707d976a14495462c9c492a921ff0927b8f5/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj#L52-L53 and we still get a FreeBSD ELF from out of it.\r\n\r\nI will try and work over this a bit more in the coming days and open an actual issue for this instead of burying it in an edit of a long post.",
          "createdAt": "2024-06-29T21:55:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-29T22:02:50Z",
                "user": "michael-o"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-29T22:25:26Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-30T02:02:48Z",
                "user": "TheBrambleShark"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-30T06:47:08Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-01T06:26:11Z",
                "user": "lakako"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-02T02:28:17Z",
                "user": "ghishadow"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-03T23:31:49Z",
                "user": "adamfk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-09T03:13:13Z",
                "user": "cewatts"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-09T04:42:51Z",
                "user": "lukeb1961"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-12T06:18:18Z",
                "user": "mmarinchenko"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHODpdX1Q=="
          },
          "updatedAt": "2024-07-04T08:05:23Z",
          "id": "IC_kwDODI9FZc6DCDmq"
        },
        {
          "author": "sec",
          "body": "@Thefrank did you cross compile from VMR or from the repo's (runtime, aspnetcore and sdk (as it now contains installer)) ?",
          "createdAt": "2024-07-11T14:01:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-11T14:01:00Z",
          "id": "IC_kwDODI9FZc6EgJgw"
        },
        {
          "author": "Thefrank",
          "body": "@sec AFAIK you can not use VMR for cross compile, but I have never actually tried. I will give it a shot for the most recently published tags.\r\nFor net6, 7, and 8 I use installer tracking the .1xx branches. VMR does this too. For net9 I am using SDK because installer simply does not have any tags past preview 4. \r\n\r\nSummary of wall and issue:\r\nCross compiles for versions that use ILCompiler (i.e. 8 and 9) are less useful due to https://github.com/dotnet/runtime/issues/104497. You will be unable to use the ILCompiler to bootstrap or for AOT as ILCompiler contains incorrect ELFs. There are some possible solutions for this listed in the linked thread but for now the only options are: native VMR (non-portable), native build via each repo (portable), `pkg install dotnet8` (\"non-portable\"*, missing ILCompiler, Crossgen2, and other NuGets until https://reviews.freebsd.org/D44561 lands). For most people the `pkg install` method should be more than enough. Those looking to bootstrap will have to wait :)\r\n\r\nedit: There is a typo in the tag for this repo: https://github.com/dotnet/runtime/releases/tag/9.0.0-preview.6.24327.7 <- all other tags both here and in other repos contain a leading `v`: https://github.com/dotnet/aspnetcore/releases/tag/v9.0.0-preview.6.24328.4",
          "createdAt": "2024-07-11T15:16:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-12T00:33:27Z",
          "id": "IC_kwDODI9FZc6Eg5YL"
        },
        {
          "author": "logiclrd",
          "body": "I installed .NET 8.0.6 using `pkg` on a 14.1-RELEASE system and it's working pretty well. But, core host stubs don't work:\r\n```\r\nYou must install .NET to run this application.\r\n\r\nApp: /srv/DQD.RealTimeBackup/DQD.RealTimeBackup.Web\r\nArchitecture: x64\r\nApp host version: 8.0.6\r\n.NET location: Not found\r\n\r\nLearn more:\r\nhttps://aka.ms/dotnet/app-launch-failed\r\n\r\nDownload the .NET runtime:\r\nhttps://aka.ms/dotnet-core-applaunch?missing_runtime=true&arch=x64&rid=freebsd-x64&os=freebsd.14&apphost_version=8.0.6\r\n```\r\nThe application can be run by explicitly launching `dotnet DQD.RealTimeBackup.Web.dll`.\r\n\r\nI've tracked this down to the default install location, per `pal.unix.cpp`, being `/usr/share/dotnet`, but the actual install location used by the package being `/usr/local/dotnet`.\r\n\r\nIf `/usr/local/dotnet` is put into `/etc/dotnet/install_location` then the problem goes away.",
          "createdAt": "2024-09-10T19:55:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-10T19:55:38Z",
          "id": "IC_kwDODI9FZc6LlozT"
        },
        {
          "author": "Thefrank",
          "body": "@logiclrd should be fixed in net9 https://github.com/dotnet/runtime/pull/100731 and with this https://reviews.freebsd.org/D44560\r\n",
          "createdAt": "2024-09-10T20:03:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-10T20:03:11Z",
          "id": "IC_kwDODI9FZc6LlrxP"
        },
        {
          "author": "logiclrd",
          "body": "@Thefrank Thanks for the reply :-) I took a look at that PR and I don't think it'll fix the problem at the runtime level. The FreeBSD-specific logic it adds still looks in `/usr/share/dotnet`, and that's not where `pkg install dotnet` put it. But, it looks like D44560 will do what I suggested, putting the path into `/etc/dotnet/install_location`. :-)\r\n\r\nI don't know how to read Differential (that looks like what it's called?). Does being in that list mean it's already a part of the codebase? It says `Needs Review`, that doesn't mean it's unmerged though, like, say, an open PR on GitHub? When does it take effect??",
          "createdAt": "2024-09-10T22:38:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-10T22:38:53Z",
          "id": "IC_kwDODI9FZc6LnF0O"
        },
        {
          "author": "Thefrank",
          "body": "@logiclrd That differential is has not been commited. If/when that happens, it will be closed and it will have a commit attached to it in the \"Details\" section. \r\n\r\nIf you are using your own ports base, you can make the change locally by downloading, (\"Download Raw Diff\" on the sidebar), applying (via git), and then rebuilding the port. Unless you already maintain a local ports tree, I suggest waiting and continuing to use the workaround when needed.",
          "createdAt": "2024-09-11T00:04:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-11T00:49:22Z",
                "user": "logiclrd"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODxwYAQ=="
          },
          "updatedAt": "2024-09-11T00:04:17Z",
          "id": "IC_kwDODI9FZc6LnaHb"
        },
        {
          "author": "logiclrd",
          "body": "@Thefrank Maybe .NET 9 installs to a different path than .NET 8...\r\n\r\nhttps://github.com/dotnet/runtime/pull/100731/files#diff-b2bd8511e88327d8f146bc460e79182cc6826e2b90039dffc4f5f89c5467d12aR608\r\n```\r\n        recv->assign(_X(\"/usr/local/share/dotnet\"));\r\n```\r\n\r\nbut:\r\n```\r\nroot@laliari:/ # uname -a\r\nFreeBSD laliari.logiclrd.cx 14.1-RELEASE FreeBSD 14.1-RELEASE releng/14.1-n267679-10e31f0946d8 GENERIC amd64\r\nroot@laliari:/ # dotnet --version\r\n8.0.106\r\nroot@laliari:/ # which dotnet\r\n/usr/local/bin/dotnet\r\nroot@laliari:/ # ls /usr/local/share/dotnet\r\nls: /usr/local/share/dotnet: No such file or directory\r\nroot@laliari:/ # \r\n```\r\nThis was done with simply `pkg install dotnet` on 14.1-RELEASE.",
          "createdAt": "2024-09-11T00:58:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-11T00:58:51Z",
          "id": "IC_kwDODI9FZc6LnmUv"
        },
        {
          "author": "Thefrank",
          "body": "@logiclrd net8 will not contain that fix unless it is manually added via patch from the port maintainer and/or D44560. net9 as of preview 6 does contain the fix.\r\n\r\nthe pkg makes a symlink between the binary location and is why `which` finds it in `/usr/local/bin/dotnet`\r\nhttps://github.com/freebsd/freebsd-ports/blob/f8aa1411e9a7aeb48bef86f02e0da44acdad82fb/lang/dotnet/Makefile#L107\r\nIt also uses `${PREFIX}` which is typically `${LOCALBASE}` and that is usually `/usr/local` (more info [here](https://docs.freebsd.org/en/books/porters-handbook/testing/#porting-prefix))\r\nI expect the install location in the port to change so that it reflects the changes in the PR. \r\n\r\nThere is currently no net9 pkg",
          "createdAt": "2024-09-11T04:00:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-11T07:10:35Z",
                "user": "logiclrd"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODxyPig=="
          },
          "updatedAt": "2024-09-11T04:00:47Z",
          "id": "IC_kwDODI9FZc6LoNFM"
        },
        {
          "author": "logiclrd",
          "body": "@Thefrank I see that it is a symlink, but it is a symlink to `/usr/local/dotnet/dotnet` -- still no `share` in the mix.",
          "createdAt": "2024-09-11T14:58:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-11T14:58:10Z",
          "id": "IC_kwDODI9FZc6LtWSF"
        },
        {
          "author": "sec",
          "body": "The fix is not yet into port that install dotnet from pkg. you can set `DOTNET_ROOT` to `/usr/local/dotnet` for your user/session for ex. to have it resolved until now.",
          "createdAt": "2024-09-11T15:14:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-11T15:14:58Z",
          "id": "IC_kwDODI9FZc6LtgfJ"
        },
        {
          "author": "arrowd",
          "body": "Taking an opportunity to remind that a proper port maintainer would be great to have.\r\nI can do review and gate changes in, but I don't have time to fully maintain the port.",
          "createdAt": "2024-09-11T15:25:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-11T15:25:29Z",
          "id": "IC_kwDODI9FZc6Ltm5Y"
        },
        {
          "author": "greggyb",
          "body": "I have never maintained a port for any system, and the build process here is a bit beyond me.\r\n\r\nNevertheless, I am happy to help or take on maintainership with some guidance. We target dotnet on FreeBSD, so this is important to have and worth dedicating work hours to.\r\n\r\nGiven my ignorance mentioned above, would it be worthwhile for me to pursue this?",
          "createdAt": "2024-09-11T15:59:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-11T15:59:06Z",
          "id": "IC_kwDODI9FZc6Lt5zm"
        },
        {
          "author": "nkosi23",
          "body": "@greggyb If you want a brutal crash course on port maintenance and enjoy complex technical challenges, you can take a shot but be prepared for a lot of learning...\r\n\r\nIn all honestly I do not think that maintaining the dotnet port is beginner-friendly. Beyond getting around understanding the port system, you also need to be able to debug and fix stuff TheFrank and sec style when things break deep into the  the build process because of upstream changes.\r\n\r\nI've personally struggled to create a port for the ydb database despite the fact that it essentially can be built as is on Unix, just understanding the port system is a task on its own. If you add to this the complexity of building dotnet, it could be overwhelming. \r\n\r\nThat being said, I've heard about folks who maintain hundreds of ports like it's a walk in the park. So maybe I'm just not wired for this but you very well may be.\r\n\r\nJust my 2 cents!",
          "createdAt": "2024-09-12T15:44:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-12T17:46:21Z",
                "user": "paxter"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODyCUPA=="
          },
          "updatedAt": "2024-09-12T15:44:29Z",
          "id": "IC_kwDODI9FZc6L3v27"
        },
        {
          "author": "Thefrank",
          "body": "For everyone that does not watch Github releases: NET9 is now out!",
          "createdAt": "2024-11-13T05:51:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-11-13T06:17:23Z",
                "user": "nkosi23"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-13T09:07:14Z",
                "user": "ohaucke"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-13T13:52:14Z",
                "user": "wfurt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-14T13:13:47Z",
                "user": "ghishadow"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOD64KUQ=="
          },
          "updatedAt": "2024-11-13T05:51:22Z",
          "id": "IC_kwDODI9FZc6TXqvq"
        },
        {
          "author": "sec",
          "body": "> For everyone that does not watch Github releases: NET9 is now out!\n\nYes, I tried to build it, but getting `401 (Unauthorized)` while building aspnet core repo on restore stage from `internal`/`dnceng` sources, haven't had time to read if something changed in build process, yet :)\n\nedit: just removing them works and also putting `<NuGetAudit>false</NuGetAudit>` into `aspnetcore/Directory.Build.props` might help :)",
          "createdAt": "2024-11-14T08:56:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-14T09:30:03Z",
          "id": "IC_kwDODI9FZc6TkStu"
        },
        {
          "author": "Thefrank",
          "body": "> > For everyone that does not watch Github releases: NET9 is now out!\n> \n> Yes, I tried to build it, but getting `401 (Unauthorized)` while building aspnet core repo on restore stage from `internal`/`dnceng` sources, haven't had time to read if something changed in build process, yet :)\n \n@sec \n`sed -i.ORI '/\\/dnceng\\/internal\\//d' YOUR/REPO/PATH/NuGet.config`\n\nI always use that because internal feeds tend to float into the Nuget.config from time to time",
          "createdAt": "2024-11-14T09:01:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-14T09:05:15Z",
          "id": "IC_kwDODI9FZc6TkVMH"
        },
        {
          "author": "DDHF22",
          "body": "Hi\r\n\r\nI lost track of all the great work you are doing on this.\r\n\r\nHow can I the simplest way get in on an installed FreeBSD ?\r\nIs there a pack or do I need to compile from source or something in between ?\r\n\r\nAlso, what is the state of the Powershell port (which is my need) - whats the story here ?\r\n\r\nThanks\r\nClaus\r\n\r\nFrom: Thefrank ***@***.***>\r\nSent: Thursday, 14 November 2024 10.02\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Claus Bruun ***@***.***>; Mention ***@***.***>\r\nSubject: Re: [dotnet/runtime] Support for FreeBSD (#14537)\r\n\r\n\r\nFor everyone that does not watch Github releases: NET9 is now out!\r\n\r\nYes, I tried to build it, but getting 401 (Unauthorized) while building aspnet core repo on restore stage from internal/dnceng sources, haven't had time to read if something changed in build process, yet :)\r\n\r\n@sec<https://github.com/sec>\r\nsed -i.ORI '/\\/dnceng\\/internal\\//d' YOUR/RUNTIME/PATH/NuGet.config\r\n\r\nI always use that because internal feeds tend to float into the Nuget.config from time to time\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/runtime/issues/14537#issuecomment-2475774727>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AALCZ7BOOK3M7WZWCRL2KYT2ARRH5AVCNFSM4TS3XPPKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TENBXGU3TONBXGI3Q>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>\r\n",
          "createdAt": "2024-11-14T09:57:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-14T09:57:38Z",
          "id": "IC_kwDODI9FZc6Tkzgb"
        },
        {
          "author": "sec",
          "body": "You can just `pkg install dotnet` to get v8 (maybe not latest version, but getting newest to ports should be just matter of bumping version in Makefile). For v9 - getting this into ports could *also* be easy, when we get VMR build working - for now, I've been doing manual builds from each repo, as it was preview/rc - I will try to get some time and work on getting VMR build for v9 as it's \"out\" now and then maybe we could get this into ports with help of @arrowd :)\n\nFor powershell builds - I think the newest update is here - https://github.com/sec/dotnet-core-freebsd-source-build/issues/26#issuecomment-2380663064 - but I might be wrong, if yes, someone please correct me.\n\nedit: also if you like v9 builds, I just have them finished, uploading in minutes.\n\nedit 2: https://github.com/sec/dotnet-core-freebsd-source-build/releases/tag/9.0.100-native",
          "createdAt": "2024-11-14T10:13:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-11-14T17:40:15Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD661cQ=="
          },
          "updatedAt": "2024-11-14T10:38:56Z",
          "id": "IC_kwDODI9FZc6Tk-bD"
        },
        {
          "author": "sec",
          "body": "Quick tried to hack port for v9, using VMR build, quick stop on runtime with:\n```\n/usr/home/sec/freebsd-ports/lang/dotnet9/work/dotnet-9.0.0/src/runtime/src/native/libs/System.IO.Compression.Native/entrypoints.c:8:10: fatal error: 'brotli/decode.h' file not found\n```\n\ndoing runtime build with `/p:PortableBuild=false` directly from repo is fine and also I'm sure I have `/usr/local/include/brotli/decode.h` :)\nAny hints where to start looking, could this be as simple as some cmake not picking dir for include?",
          "createdAt": "2024-11-18T09:53:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T09:53:04Z",
          "id": "IC_kwDODI9FZc6T92Fm"
        },
        {
          "author": "arrowd",
          "body": "Make sure you have both `brotli` and `pkgconf` installed.",
          "createdAt": "2024-11-18T10:14:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T10:14:48Z",
          "id": "IC_kwDODI9FZc6T-JjX"
        },
        {
          "author": "sec",
          "body": "> Make sure you have both `brotli` and `pkgconf` installed.\n\nI have both. As stated, doing manual build is fine. Adding `include_directories(/usr/local/include)` inside `src/runtime/src/native/libs/System.IO.Compression.Native/CMakeLists.txt` makes the build of runtime pass. So this must be something when doing build from VMR vs manual frop the repo itself.",
          "createdAt": "2024-11-18T10:51:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T10:51:04Z",
          "id": "IC_kwDODI9FZc6T-pN9"
        },
        {
          "author": "arrowd",
          "body": "I wonder if this `if` block doesn't get executed: https://github.com/dotnet/runtime/blob/main/src/native/libs/System.IO.Compression.Native/extra_libs.cmake#L23\nFor Ports usage we strive to use as much system-provided dependencies as possible, so `CLR_CMAKE_USE_SYSTEM_BROTLI` should definitely be set to `ON` somehow.",
          "createdAt": "2024-11-18T10:56:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T10:56:35Z",
          "id": "IC_kwDODI9FZc6T-tEg"
        },
        {
          "author": "sec",
          "body": "@arrowd It should be executed, as I've put include dir under another check - you can check the patch under the port linked for v9. Why it fails in this case only and need this special hack, is something that maybe someone else could point/help where/what to check/look for. I didn't had time yet to go throug binlog or rest of the logs...\n\nAnyway, here's working dotnet9 port - https://github.com/sec/freebsd-ports/tree/dotnet8011/lang/dotnet9 - I've tested the builds under 13 and 14 x64 and 13.3 arm64 (with my patched libunwind, I think, can't be sure for 100% that port libunwind will work or crash at some point, I think I have old 1.8.1 release with aarch64 support and without race condition bug that causing crossgen2/ilc to fail sometimes).\n\nIt's using bootstrap SDK and artifacts from my previous builds - are all uploaded into GH.\n\nOne note, plist was created under x64 and doing `make package` under arm64 failed with:\n```\npkg-static: Unable to access file /mnt/sec/freebsd-ports/lang/dotnet9/work/stage/usr/local/dotnet/packs/runtime.freebsd.13-arm64.Microsoft.DotNet.ILCompiler/9.0.0/sdk/libRuntime.VxsortDisabled.a:No such file or directory\npkg-static: Unable to access file /mnt/sec/freebsd-ports/lang/dotnet9/work/stage/usr/local/dotnet/packs/runtime.freebsd.13-arm64.Microsoft.DotNet.ILCompiler/9.0.0/sdk/libRuntime.VxsortEnabled.a:No such file or directory\n```\nso I've removed them from plist - anyone know if those are needed for x64 and not for arm64? :)",
          "createdAt": "2024-11-18T14:36:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T14:46:49Z",
          "id": "IC_kwDODI9FZc6UAy0X"
        },
        {
          "author": "Thefrank",
          "body": "> One note, plist was created under x64 and doing make package under arm64 failed with:\n\n> VxsortDisabled\n\nThis is for NativeAOT on AMD64 only.\nhttps://github.com/dotnet/runtime/blob/9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3/src/coreclr/nativeaot/Runtime/Full/CMakeLists.txt#L44\nhttps://github.com/dotnet/runtime/blob/9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3/src/installer/pkg/sfx/Microsoft.NETCore.App/Directory.Build.props#L145\n\nOn the plus side, it looks like VMR automatically includes runtime packs and ILC inside the SDK so there is no need to manually install the NuGets for them or force them into the portable SDK. I think that only leaves Crossgen2 as \"missing\" NuGets",
          "createdAt": "2024-11-18T17:16:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T17:16:59Z",
          "id": "IC_kwDODI9FZc6UCWd-"
        },
        {
          "author": "arrowd",
          "body": "> It's using bootstrap SDK and artifacts from my previous builds - are all uploaded into GH.\n\n@sec Is bootstrap itself compiled on FreeBSD 13?\n\n> This is for NativeAOT on AMD64 only.\n\n@Thefrank thanks for explanations, I will adjust the plist accordingly.",
          "createdAt": "2024-11-18T18:29:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T18:29:26Z",
          "id": "IC_kwDODI9FZc6UC_rf"
        },
        {
          "author": "sec",
          "body": "> [@sec](https://github.com/sec) Is bootstrap itself compiled on FreeBSD 13?\n\n@arrowd Yes the SDK bootstrap was compiled under 13, from each repo by hand. Artifacts I just downloaded Linux one and I've put rc-2 nugets inside so that VMR would pick them up during build.\n\n\n> [@Thefrank](https://github.com/Thefrank) thanks for explanations, I will adjust the plist accordingly.\n\n@Thefrank thanks for info. @arrowd thanks also, I've just read manual page for doing plist dynamic/optional - but nice to read by example from someone more expierenced :)\n\n",
          "createdAt": "2024-11-18T19:18:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-18T19:18:09Z",
          "id": "IC_kwDODI9FZc6UDWLr"
        },
        {
          "author": "arrowd",
          "body": "I've pushed the .NET 9 update to Ports. Many thanks to @sec for doing all the hard work.",
          "createdAt": "2024-11-19T19:50:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2024-11-19T21:08:32Z",
                "user": "sec"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-11-19T21:11:59Z",
                "user": "nkosi23"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-11-19T21:29:19Z",
                "user": "Thefrank"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-11-19T21:29:22Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOD7nVLA=="
          },
          "updatedAt": "2024-11-19T19:50:00Z",
          "id": "IC_kwDODI9FZc6UNrLQ"
        },
        {
          "author": "sec",
          "body": "> I've pushed the .NET 9 update to Ports. Many thanks to [@sec](https://github.com/sec) for doing all the hard work.\n\nNice, thanks. I saw that you made better patch for `patch-src_runtime_src_native_libs_System.IO.Compression.Native_CMakeLists.txt` - plans to up-stream that or it's already done?",
          "createdAt": "2024-11-19T21:12:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-19T21:12:26Z",
          "id": "IC_kwDODI9FZc6UOP6H"
        },
        {
          "author": "Thefrank",
          "body": "Just a heads up for people building with only lang/dotnet about how version selection works: \nhttps://learn.microsoft.com/en-us/dotnet/core/versions/selection\nand `global.json` \nhttps://learn.microsoft.com/en-us/dotnet/core/tools/global-json#rollforward\n\nnet8 will no longer be available so change your projects accordingly",
          "createdAt": "2024-11-19T21:44:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-19T21:44:09Z",
          "id": "IC_kwDODI9FZc6UOcVq"
        },
        {
          "author": "rwv37",
          "body": "I just updated all my ports, including ``lang/dotnet``, and now when I try to run something (which had been working) I get this:\n\n```\n# dotnet ~bob/net8.0/Rwv37.FreeBSD.VestertopianPortsBuilder.Cli.dll hail\nYou must install or update .NET to run this application.\n\nApp: /home/bob/net8.0/Rwv37.FreeBSD.VestertopianPortsBuilder.Cli.dll\nArchitecture: x64\nFramework: 'Microsoft.NETCore.App', version '8.0.0' (x64)\n.NET location: /usr/local/dotnet/\n\nThe following frameworks were found:\n  9.0.0 at [/usr/local/dotnet/shared/Microsoft.NETCore.App]\n\nLearn more:\nhttps://aka.ms/dotnet/app-launch-failed\n\nTo install missing framework, download:\nhttps://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=8.0.0&arch=x64&rid=freebsd.14-x64&os=freebsd.14\n```\n\nI have not yet looked into this closely, but I'm guessing it might have something to do with what @Thefrank wrote about \"version selection\"? The linked documents are not immediately clear to me.\n\nIn any case, a couple things:\n\n1. Is this (or _these_, if my issue and the issue @Thefrank mentioned are different) something that should perhaps go into ``/usr/ports/UPDATING``?\n\n2. The download mentioned in the error message does not seem to exist. I'm guessing the message is generated on the fly by Microsoft, and it just assumes that whatever the machine's OS is, there _must_ be a download for it. But for FreeBSD, there's not.\n\nI guess I'm going to just recompile the DLL for 9.0, and see what happens.",
          "createdAt": "2024-11-20T02:09:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T02:09:15Z",
          "id": "IC_kwDODI9FZc6UP0F5"
        },
        {
          "author": "rwv37",
          "body": "> I guess I'm going to just recompile the DLL for 9.0, and see what happens.\n\nSeems to work. Thank you!\n",
          "createdAt": "2024-11-20T02:48:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T02:48:01Z",
          "id": "IC_kwDODI9FZc6UQCOe"
        },
        {
          "author": "Thefrank",
          "body": "@rwv37 FreeBSD ports currently only contains `lang/dotnet` which is now net9. Anything that was not self-contained for net8 will need to be rebuilt for net9. \nFreeBSD ports does not have a great way of handling side-by-side installations of things in a way that dotNET would like to see them.\n\n> Is this (or these, if my issue and the issue @Thefrank mentioned are different) something that should perhaps go into /usr/ports/UPDATING?\n\nIt might be a good idea to have some message about projects that were not self-contained needing to be rebuilt for net9. \n\n> The download mentioned in the error message does not seem to exist. I'm guessing the message is generated on the fly by Microsoft, and it just assumes that whatever the machine's OS is, there must be a download for it. But for FreeBSD, there's not.\n\nThis is automagically generated by dotNET when it can not find a runtime/SDK that it requires. This may change later, but there will not be official FreeBSD support for the foreseeable future. The error message will remain somewhat confusing as there is no way to (easily) install an SDK other than the one provided by ports.",
          "createdAt": "2024-11-20T03:17:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-20T22:23:32Z",
                "user": "rwv37"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD70Xcw=="
          },
          "updatedAt": "2024-11-20T03:17:17Z",
          "id": "IC_kwDODI9FZc6UQJfe"
        },
        {
          "author": "arrowd",
          "body": "> I saw that you made better patch for patch-src_runtime_src_native_libs_System.IO.Compression.Native_CMakeLists.txt - plans to up-stream that or it's already done?\n\nNot at the moment, it'd be great if you do this.\n\n> FreeBSD ports currently only contains lang/dotnet which is now net9.\n\n.NET 8 is now in `lang/dotnet8` port.\n\n>  FreeBSD ports does not have a great way of handling side-by-side installations of things in a way that dotNET would like to see them.\n\nWe can as well strive for that. I guess, we need to strip `lang/dotnet8` so that it installs only some parts of its current pkg-plist?",
          "createdAt": "2024-11-20T06:13:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T06:13:31Z",
          "id": "IC_kwDODI9FZc6URYut"
        },
        {
          "author": "Thefrank",
          "body": "> .NET 8 is now in lang/dotnet8 port.\n\nThat is great news! I missed that when I glanced over the ports.\n\n> We can as well strive for that. I guess, we need to strip lang/dotnet8 so that it installs only some parts of its current pkg-plist?\n\nThere are likely only 3 files that will trip up `pkg check -s` due to them being changed or overwritten:\n`dotnet` the actual binary\n`LICENSE.txt` if it changed between net8 and net9\n`ThirdPartyNotices.txt` ditto and the most likely one to change.\n\nEverything else gets put into versioned sub-directories by default.\nI am not sure how this would be handled by ports. \nIf someone only installs dotnet8 because it is LTS then not having the `dotnet` binary is an issue. What if someone installs net8 then net9? How would(should?) `pkg check` handle this? Do people/cron use `pkg check` anymore?",
          "createdAt": "2024-11-20T06:53:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T06:53:30Z",
          "id": "IC_kwDODI9FZc6URm6J"
        },
        {
          "author": "arrowd",
          "body": "With GHC (a Haskell compiler) I solved it the following way:\n\n- The latest and greatest port is called `lang/ghc` and installs both `ghc` and `ghc-X.Y.Z` executables.\n- Previous versions are called `lang/ghcXY` and install only `ghc-X.Y.Z` executables.\n- This is possible, however, because Haskell tooling knows to search not only for `ghc`, but also `ghc-X.Y.Z`.\n\nWhat we can do for dotnet is:\n- The latest and greatest `lang/dotnet` installs the `dotnet` executable.\n- Previous versions do not.\n- If user needs previous .NET, he'd have to install both latest and previous version.",
          "createdAt": "2024-11-20T07:04:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-20T07:38:18Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD7sTlA=="
          },
          "updatedAt": "2024-11-20T07:04:54Z",
          "id": "IC_kwDODI9FZc6URt6z"
        },
        {
          "author": "sec",
          "body": "Don't know if that's possible in ports handling, but I think the best options would be to:\n- have ability to install both dotnet and dotnet8\n- shared files from dotnet should have precedence\n- when dotnet is installed, dotnet8 shared files would be skipped\n- when dotnet8 is installed, installing dotnet would overwrite shared files\n\nWe need to have `dotnet` binary with only dotnet or dotnet9 present in there :)",
          "createdAt": "2024-11-20T10:55:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T10:55:47Z",
          "id": "IC_kwDODI9FZc6UT9bd"
        },
        {
          "author": "jkotas",
          "body": "> shared files\n\nhttps://learn.microsoft.com/en-us/dotnet/core/distribution-packaging#recommended-packages is the recommended dotnet package structure that avoids issues with overwriting shared files. Would it be feasible to follow this package structure on FreeBSD as well?",
          "createdAt": "2024-11-20T15:10:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T15:10:49Z",
          "id": "IC_kwDODI9FZc6UWK1y"
        },
        {
          "author": "arrowd",
          "body": "> shared files from dotnet should have precedence\n\nNo, that's not possible with `pkg`. If two packages install the same file, they can't be coinstalled.\n",
          "createdAt": "2024-11-20T18:09:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T18:09:44Z",
          "id": "IC_kwDODI9FZc6UXvWU"
        },
        {
          "author": "greggyb",
          "body": "Edit after the fact:\nI didn't read first and basically described a stripped down version of what the packaging link shared above suggests. Just read that.\nhttps://learn.microsoft.com/en-us/dotnet/core/distribution-packaging#recommended-packages\n---end edit---\n\nI am not certain on the stuff below so please fact-check me.\n\nMicrosoft publishes both a \"Dotnet SDK\" and a \"Dotnet Runtime\" (technically multiple). In their topology, the SDK includes the runtimes.\n\n~The `dotnet` binary is the interface to the SDK CLI.~\n\n~Would it be possible to distribute a set of packages:~\n~- Dotnet SDK: `dotnet` binary (built AOT compiled for FreeBSD?); always the current release of the latest version~\n~- Dotnet Runtime Full: \\*Runtime6, \\*Runtime8, *Runtime9 (all supported versions: 3 years for LTS and 18 months for standard releases); default to include all runtimes under DotnetRuntimeX, optional to install separate runtimes:~\n    ~- .NET Runtime (6, 8, 9)~\n    ~- ASP.NET Runtime (6, 8, 9)~\n    ~- .NET Desktop Runtime (6, 8, 9)~\n\n~Basically, instead of following Microsoft and including everything when the SDK is installed, include no runtimes in the SDK package.~\n\n~This would allow for installation as follows:~\n\n```sh\n# pkg install dotnet-sdk # not very useful yet\n# pkg install dotnet-runtime8 # now can develop and run targeting dotnet8, incl ASP.NET and Desktop runtimes\n# pkg install dotnet-core-runtime9 # now can additionally develop and run console apps targeting dotnet9, but not ASP.NET or Desktop\n```\n\n~This would prevent a scenario where the package \"dotnet\" is upgraded from 8->9 and causes applications built for 8 to no longer run (the situation @rwv37 was in upthread). Instead, installing \"dotnet-runtime8\" would ensure that the required runtime files for dotnet8-targeted applications are always present until the operator manually runs `pkg remove dotnet-runtime8`. When a new version of the runtime is released, then an operator can opt into the new runtime.~\n\nI am assuming, here, that the `dotnet` SDK CLI can be built without a dependency on a system-provided dotnet runtime.\nIf that is not the case, then I think the approach below could work:\n\n- Package \"dotnet\" includes no version number; includes SDK and all runtimes.\n- Packages \"dotnetX\" include the version number, and include everything but the files which would be conflicting (the latest, currently dotnet9 would have full overlap (less conflicting files) with the unversioned \"dotnet\" package)\n- dotnet-runtime... as described in the prior scheme.\n\nThis would still provide the guarantee that if someone explicitly installs dotnetX (or runtimes), that they would never lose that in the course of a `pkg upgrade`.",
          "createdAt": "2024-11-20T19:27:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T00:08:30Z",
          "id": "IC_kwDODI9FZc6UYPWJ"
        },
        {
          "author": "jkotas",
          "body": "> The dotnet binary is the interface to the SDK CLI.\n\ndotnet binary is the interface to both the runtime and SDK. dotnet binary, runtime, ASP.NET, no SDK is very typical deployment configuration for .NET cloud apps. ",
          "createdAt": "2024-11-20T19:46:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-11-20T19:47:09Z",
                "user": "greggyb"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD7zTHQ=="
          },
          "updatedAt": "2024-11-20T19:46:07Z",
          "id": "IC_kwDODI9FZc6UYXLU"
        },
        {
          "author": "greggyb",
          "body": "Thank you for the clarification there. Given that, it seems my first suggestion is no good, but I think the second path I laid out still makes sense in terms of packaging within the constraints of FreeBSD's `pkg` infrastructure described upthread.\n\nThoughts?",
          "createdAt": "2024-11-20T19:48:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T19:48:49Z",
          "id": "IC_kwDODI9FZc6UYYSQ"
        },
        {
          "author": "jkotas",
          "body": "> Thoughts?\n\nIt looks like a subset of the scheme described at https://learn.microsoft.com/en-us/dotnet/core/distribution-packaging#recommended-packages (with different names). Is there a good reason for inventing your own scheme for FreeBSD instead of just using the same scheme as Linux? ",
          "createdAt": "2024-11-20T20:08:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T20:08:18Z",
          "id": "IC_kwDODI9FZc6UYgEU"
        },
        {
          "author": "nkosi23",
          "body": "@jkotas my understanding is that the scheme you link to is actually being used by the FreeBSD port, the only problem is with the dotnet binary file, since all versions of .net install it to the same path while it is not possible to install 2 FreeBSD packages that would try to install a file to the same path. \n\nThus the solution proposed by @arrowd which looks like a simple and elegant way to address the issue.\n\nAlternatively, we could also have dotnetX and dotnetX-lib ports where the lib ports do not have the executable.\n",
          "createdAt": "2024-11-20T20:26:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T20:33:56Z",
          "id": "IC_kwDODI9FZc6UYnV_"
        },
        {
          "author": "jkotas",
          "body": "> my understanding is that the scheme you link to is actually being used by the FreeBSD port,\n\nThe Linux scheme addresses the problem with shared file by `dotnet-host` package that has no version number and that is always built from the latest .NET version available. How is `dotnet-host` package built in the FreeBSD port?",
          "createdAt": "2024-11-20T20:42:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T20:42:41Z",
          "id": "IC_kwDODI9FZc6UYtZ1"
        },
        {
          "author": "nkosi23",
          "body": "@jkotas Oh I didn't realize that there is the disk layout but also a recommended way to structure packages. I only meant that the disk layout is being followed by the port. However in terms of packaging, everything is included in a single package for time being from what I can see. \n\nAs for why, I have to let others answer, but I guess it's just a matter of the initial effort was focused on getting a basic port ready which was already a challenging task in itself. And if it wasn't for the issue with the dotnet exec, it wasn't necessarily clear that breaking down the port into multiple packages would bring something to the table.\n\nI am not sure how difficult it would be to break the port into multiple packages. Maybe the port system has a feature to facilitate creating multiple packages from the same build. Otherwise the task could be time consuming.",
          "createdAt": "2024-11-20T21:21:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-20T21:29:50Z",
          "id": "IC_kwDODI9FZc6UY8AP"
        },
        {
          "author": "greggyb",
          "body": "> Is there a good reason for inventing your own scheme for FreeBSD instead of just using the same scheme as Linux?\n\nProbably not. To speak only for myself and no one else, I was responding from ignorance without researching enough (or reading the link you had shared before I posted). I saw the issue described upthread about a bump to the single dotnet package for FreeBSD breaking deployed applications and the constraint about packages with conflicting files. I then went straight to brainstorming (again without referencing your link), not really thinking about the fact that this is probably solved by several Linux distributions already.\n\nIt's heartening to me, though, that I came up with an outline that matches that current best practice, at least in the broad strokes (:",
          "createdAt": "2024-11-20T23:32:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-21T04:57:17Z",
                "user": "jkotas"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD72fkg=="
          },
          "updatedAt": "2024-11-20T23:32:12Z",
          "id": "IC_kwDODI9FZc6UZplM"
        },
        {
          "author": "sec",
          "body": "So to make this simply visible, idea is to have:\n`dotnet-host` port that will build and install  `dotnet`, `LICENSE.txt` and `ThirdPartyNotices.txt` from `dotnet9` output\n`dotnet8` - this will be as is, just won't include those 3 files\n`dotnet9` - same as 8, without those 3 files\n`dotnet` will just point to `dotnet9`\n\n`pkg install dotnet8` will install dotnet-host + dotnet8\n`pkg install dotnet9` will install dotnet-host + dotnet9\n\ninstalling only `dotnet-host` doesn't make sense alone, right?\n\n@arrowd that should be doable using ports, right?\n\n",
          "createdAt": "2024-11-21T08:45:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T09:22:58Z",
          "id": "IC_kwDODI9FZc6UcHtI"
        },
        {
          "author": "nkosi23",
          "body": "@sec shouldn't `dotnet`  be a metapackage installing both the latest and greatest version (here `dotnet9`) and `dotnet-host` ? otherwise dotnet-host never actually gets installed, when running either dotnet or dotnetX",
          "createdAt": "2024-11-21T09:20:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T09:21:16Z",
          "id": "IC_kwDODI9FZc6Ucbmn"
        },
        {
          "author": "sec",
          "body": "> [@sec](https://github.com/sec) shouldn't `dotnet` be a metapackage installing both the latest and greatest version (here `dotnet9`) and `dotnet-host` ? otherwise dotnet-host never actually gets installed, when running either dotnet or dotnetX\n\nTrue, that's why I wrote `pkg install dotnet9 will install dotnet-host + 9` and `dotnet (port) will just point to dotnet9` - I had in mind what you asked :)\n\n",
          "createdAt": "2024-11-21T09:22:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-21T09:41:27Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD74u6w=="
          },
          "updatedAt": "2024-11-21T09:22:33Z",
          "id": "IC_kwDODI9FZc6UccsL"
        },
        {
          "author": "arrowd",
          "body": "Right now each port's build produces a single package. This means that if we are to have `dotnet` and `dotnet-host`, we'd need to build the whole thing twice.\n\nThe ability to produce multiple packages from a single build is provided by a feature called subpackages, which is currently only partially implemented. I'd wait for a full subpackages support in Ports first, before implementing the decomposition you're proposing.\n\nFor now I think we should just make dotnet8 and dotnet coinstallable by removing conflicting files.",
          "createdAt": "2024-11-21T09:26:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-21T10:28:22Z",
                "user": "nkosi23"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD75M9g=="
          },
          "updatedAt": "2024-11-21T09:26:58Z",
          "id": "IC_kwDODI9FZc6UcjTt"
        },
        {
          "author": "sec",
          "body": "Fair, so how would you see having those 3 files coinstallable? We can't remove them from dotnet8 port and install only with dotnet9, as not having dotnet binary will make it useless.",
          "createdAt": "2024-11-21T11:42:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T11:42:39Z",
          "id": "IC_kwDODI9FZc6UeBG9"
        },
        {
          "author": "greggyb",
          "body": "In an attempt to summarize and provide some decision-points:\n\nIt seems like we agree in this thread that there is a correct long-term solution, summarized in @sec's https://github.com/dotnet/runtime/issues/14537#issuecomment-2490399560\n\nWith today's `pkg` infrastructure, this is achievable by building the latest release (currently dotnet9) twice: once to provide the `dotnet` executable in package `dotnet-host` and once to provide all the rest (runtime, etc...) in `dotnet9` package. Older versions, e.g. `dotnet8` would be built once and not include the `dotnet` executable. This is undesirable due to building `dotnet9` twice.\n\nThere is a future feature in `pkg`, subpackages, that should support the decomposition into versioned `dotnetX`s and an unversioned `dotnet-host`. It may be valid to defer `dotnet-host` as a package until subpackages are available.\n\nThus we are left with a decision between several candidates for a sub-optimal short-term approaches:\n\nA. Adopt the long-term package topology today at extra cost: Build `dotnet9` twice: extra cost for build time and burden on package build infra.\nB.  Adopt a short-term package topology that does not include `dotnet-host`, but *does* support multiple different versions of `dotnetX` installed alongside one another.\nC. Adopt a short-term package topology that does not include `dotnet-host` and *does not* support multiple parallel installations of `dotnetX`, i.e., `dotnet8` and `dotnet9` are mutually exclusive of one another; each provides `dotnet` and other conflicting files.\n\nI think this covers the short-term approaches discussed, modulo some naming conventions.\n\nSome important questions that arise here:\n\n1. Just how bad is option (A) above?\n    If it's not that much of a burden, I'd argue that it is best to implement the long-term topology today so we don't have a breaking change in the future.\n2. How close are subpackages?\n3. Can we confirm that subpackages do, in fact, enable the topology described above as the long-term solution?\n4. If (B), how to implement that?\n    I'd propose that we build the latest to include the `dotnet` executable and other conflicting files; then older versions have a dependency on the newer one. I am sure that there are other reasonable implementations, though.\n5. Is C acceptable?\n    For me, personally, yes, and jails can probably cover any use cases I'd have for both.",
          "createdAt": "2024-11-21T17:46:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T17:46:05Z",
          "id": "IC_kwDODI9FZc6Uhy4D"
        },
        {
          "author": "Thefrank",
          "body": "I think `dotnet-host` is just from `/src/native/corehost` which does not require dotNET to build.\n\n(assuming I am correct) in runtime `src/native/corehost/build.sh -ci` should be enough and just needs just CMake and Clang/GCC.",
          "createdAt": "2024-11-21T17:59:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-11-21T18:03:14Z",
                "user": "greggyb"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD79r3g=="
          },
          "updatedAt": "2024-11-21T17:59:28Z",
          "id": "IC_kwDODI9FZc6Uh55J"
        },
        {
          "author": "sec",
          "body": "> I think `dotnet-host` is just from `/src/native/corehost` which does not require dotNET to build.\n> \n> (assuming I am correct) in runtime `src/native/corehost/build.sh -ci` should be enough and just needs just CMake and Clang/GCC.\n\nexactly, building just `dotnet` binary can be done directly from `runtime` repo and it should be quite fast. Dunno about 2 other txt files, maybe those could be just extracted from somewhere or fetched and included in port. then we`ll just need to exclude those 3 files from both dotnet8 and dotnet(9) and add dep on dotnet-host.",
          "createdAt": "2024-11-21T18:02:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-21T18:03:12Z",
                "user": "Thefrank"
              },
              {
                "content": "HEART",
                "createdAt": "2024-11-21T18:03:29Z",
                "user": "greggyb"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-21T18:05:23Z",
                "user": "filipnavara"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOD79stg=="
          },
          "updatedAt": "2024-11-21T18:02:33Z",
          "id": "IC_kwDODI9FZc6Uh7aa"
        },
        {
          "author": "arrowd",
          "body": "> We can't remove them from dotnet8 port and install only with dotnet9, as not having dotnet binary will make it useless.\n\nWhy useless? `dotnet8` would serve as an addon to `dotnet` that enables version 8 SDK. This is basically the plan B:\n\n> B. Adopt a short-term package topology that does not include dotnet-host, but does support multiple different versions of dotnetX installed alongside one another.\n\nI'd go for it as it looks optimal in time/gains terms. However,\n\n> building just dotnet binary can be done directly from runtime repo and it should be quite fast. \n\nalso sounds good, but does upstream expect it to be built and packaged this way? I know nothing of .NET ecosystem and was thinking that the only supported way to build all this stuff is VMR.",
          "createdAt": "2024-11-21T19:00:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T19:00:26Z",
          "id": "IC_kwDODI9FZc6UiWuv"
        },
        {
          "author": "Thefrank",
          "body": "> only supported way to build all this stuff is VMR\n\nVMR is the only way to offline/sourcebuild. This is the only way for ports to build dotNET without a great deal of extra work.\n\nOnline builds can be done via each repo and pulled together at the SDK for a binary package. This a good way to get a bootstrap binary if none is available. This still requires some amount of juggling outputs into inputs but at this point is rather painless.\n\nVery few things build without a working dotNET SDK; the `host` is one of them. Some other items in coreclr are another. \n\nedit: `src/native/corehost/build.sh -ci` builds in ~1min on a single core on my machine.",
          "createdAt": "2024-11-21T19:38:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T19:43:16Z",
          "id": "IC_kwDODI9FZc6UioA4"
        },
        {
          "author": "arrowd",
          "body": "I think we should stop using this issue as a chat. How about migrating into Matrix or Discord? I can try arranging a room on the FreeBSD Matrix Dev server. ",
          "createdAt": "2024-11-21T19:54:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T19:54:40Z",
          "id": "IC_kwDODI9FZc6UiwUv"
        },
        {
          "author": "sec",
          "body": "> I think we should stop using this issue as a chat. How about migrating into Matrix or Discord? I can try arranging a room on the FreeBSD Matrix Dev server.\n\nMakes sense :) Fine with Discord or Libera also.",
          "createdAt": "2024-11-21T20:05:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T20:05:29Z",
          "id": "IC_kwDODI9FZc6Ui1bH"
        },
        {
          "author": "arrowd",
          "body": "Please join https://matrix.to/#/!RzOryqYAIqxaAmbYDE:matrix-dev.freebsd.org?via=matrix-dev.freebsd.org \nor by room ID `!RzOryqYAIqxaAmbYDE:matrix-dev.freebsd.org`",
          "createdAt": "2024-11-21T20:35:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-21T20:44:50Z",
          "id": "IC_kwDODI9FZc6UjOQm"
        },
        {
          "author": "sec",
          "body": "Does anyone know, if it's possible to include extra nupkg's that get bundled with vmr build under `library-packs` output directory? Could be nice to include those with SDK itself, so no extra steps would be needed? I know it can be one in 1 line after port builds - just wondering if there's something already done?",
          "createdAt": "2024-11-22T09:42:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-22T09:42:11Z",
          "id": "IC_kwDODI9FZc6UnVme"
        },
        {
          "author": "Thefrank",
          "body": "@sec The VMR should already bundle runtime packs and ILC into the SDK. This leaves just the Crossgen2 NuGet. AFAIK there is no way to bundle it automatically.",
          "createdAt": "2024-11-22T14:50:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-22T14:50:40Z",
          "id": "IC_kwDODI9FZc6Upm-9"
        },
        {
          "author": "sec",
          "body": "@arrowd @Thefrank I've made dotnet-host port and made changes for 8/9. I've tried install/build with dotnet. dotnet8 running in the background - I assume it will fail to install side-by-side, as there are some more packs in both releases.\n\nI've did quick add, to include all *freebsd* nupkg into library-packs (even some of those are already in there) - we could handpick Crossgen2 for example, but maybe having them all, won't hurt?\n\nedit: here's the link :P https://github.com/sec/freebsd-ports/commit/785055f9a54c7cb5047d526d9d85681cbfa058b9",
          "createdAt": "2024-11-23T20:28:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-23T20:29:09Z",
          "id": "IC_kwDODI9FZc6UwIib"
        },
        {
          "author": "richlander",
          "body": "Just an idea ... I wonder if it would be useful to create one tracking issue per .NET version for FreeBSD, with top-level status and links to downloads/docs in the top-level comment.\n\nThis issue has >1000 comments. I am guessing this hurts discoverability.\n\nCertainly, the FreeBSD project is not limited to just this issue!\n\nRelated and good news ... A couple of us have been chatting with the FreeBSD Foundation folks about doing a post on the .NET Blog. It would be great if there were more fine grained issues to link to from content like that.\n\nIt is a testament to all this effort that all the foundational work is done and moving to a more operational mode is even an option.\n\nCongrats on the accomplishments! It is amazing to me that we have a dialogue going with the FreeBSD foundation. This project is what has that made possible.",
          "createdAt": "2024-11-24T18:51:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2024-11-24T20:01:38Z",
                "user": "TheBrambleShark"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-11-24T20:01:40Z",
                "user": "TheBrambleShark"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-11-24T20:21:57Z",
                "user": "nkosi23"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-11-24T20:26:00Z",
                "user": "Teddy55Codes"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-11-24T20:26:00Z",
                "user": "Teddy55Codes"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-11-24T20:40:39Z",
                "user": "Thefrank"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-24T22:29:43Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-25T15:09:12Z",
                "user": "ohaucke"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-12-08T19:34:48Z",
                "user": "AntonSmolkov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-16T22:34:20Z",
                "user": "backerman"
              },
              {
                "content": "HOORAY",
                "createdAt": "2025-05-03T15:13:37Z",
                "user": "dpen2000"
              },
              {
                "content": "HEART",
                "createdAt": "2025-07-12T14:44:23Z",
                "user": "NatUni"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHOEaWXnQ=="
          },
          "updatedAt": "2024-11-24T18:51:03Z",
          "id": "IC_kwDODI9FZc6UyINb"
        },
        {
          "author": "jkotas",
          "body": "> I've did quick add, to include all freebsd nupkg into library-packs\n\nYou should omit Microsoft.NETCore.TestHost. It is a non-shipping package that is only meant to be used for low-level tests in dotnet/runtime repo.",
          "createdAt": "2024-11-24T22:29:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-24T22:29:38Z",
          "id": "IC_kwDODI9FZc6UyjI4"
        },
        {
          "author": "shkit",
          "body": "I try to use .Net 9, I encounter this issue.\n```\n% dotnet build -c Release\n...\n    /usr/.../xxx.csproj : error NU1101: Unable to find package Microsoft.NETCore.App.Host.freebsd-x64. No packages exist with this id in source(s): /usr/local/dotnet/library-packs, nuget.org\n\nRestore failed with 1 error(s) in 8.2s\n```\nAccording to \"dotnet --info\", RID is \"freebsd.14-x64\". Therefore package name should be \"Microsoft.NETCore.App.Host.freebsd.14-x64\", I think.\n\nI cannot know whether I should modify my project or this is issue for dotnet.\n(Searching in my project, \"freebsd-x64\" is not found. Where this comes from?)\nAny ideas?\n\nThanks,",
          "createdAt": "2024-12-06T03:17:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-06T03:17:29Z",
          "id": "IC_kwDODI9FZc6WUzMg"
        },
        {
          "author": "arrowd",
          "body": "Does this fix your issue?\n\nhttps://cgit.freebsd.org/ports/commit/?id=2fdec3a6a41cbc8af23648fb9300cb921d0583a7",
          "createdAt": "2024-12-06T05:14:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-06T05:14:28Z",
          "id": "IC_kwDODI9FZc6WVSKe"
        },
        {
          "author": "Thefrank",
          "body": "@arrowd Please remove `Microsoft.NETCore.TestHost` as the SDK will never use it.",
          "createdAt": "2024-12-06T05:31:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-06T05:31:01Z",
          "id": "IC_kwDODI9FZc6WVVyz"
        },
        {
          "author": "arrowd",
          "body": "Already done in a different commit.",
          "createdAt": "2024-12-06T05:35:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-12-06T05:36:32Z",
                "user": "Thefrank"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD90cbQ=="
          },
          "updatedAt": "2024-12-06T05:35:14Z",
          "id": "IC_kwDODI9FZc6WVWuf"
        },
        {
          "author": "shkit",
          "body": "> Does this fix your issue?\n> \n> https://cgit.freebsd.org/ports/commit/?id=2fdec3a6a41cbc8af23648fb9300cb921d0583a7\n\nSorry, my TargetFramework tag in .csproj is still \"net8.0\".\nChange tag content and build succeeds.\n\nThanks,",
          "createdAt": "2024-12-06T08:49:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-06T08:49:34Z",
          "id": "IC_kwDODI9FZc6WWt6L"
        },
        {
          "author": "lukeb1961",
          "body": "How/when will there be Official support for .Net on FreeBSD?\n",
          "createdAt": "2025-04-01T03:41:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-04-01T05:54:18Z",
                "user": "Teddy55Codes"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-07T19:04:58Z",
                "user": "JaggerJo"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEVy1jw=="
          },
          "updatedAt": "2025-04-01T03:41:44Z",
          "id": "IC_kwDODI9FZc6k_Iv1"
        },
        {
          "author": "logiclrd",
          "body": "> How/when will there be Official support for .Net on FreeBSD?\n\nI run a server I wrote in C# on a FreeBSD machine. It works beautifully :-)  The stub executable works fine too.\n\n```\nlogiclrd@laliari:~ % uname -a\nFreeBSD laliari.logiclrd.cx 14.1-RELEASE FreeBSD 14.1-RELEASE releng/14.1-n267679-10e31f0946d8 GENERIC amd64\nlogiclrd@laliari:~ % pkg info | grep dotnet\ndotnet-8.0.6                   Open-source developer platform and a cross-platform runtime for cloud, mobile, desktop, and IoT apps\nlogiclrd@laliari:~ % service dqd_realtimebackup_web status\ndqd_realtimebackup_web is running as pid 886.\nlogiclrd@laliari:~ % ps aux | grep 886\nroot       886  0.0  2.4 273114492 48452 v0- I    14Mar25     1:36.89 /srv/DQD.RealTimeBackup/DQD.RealTimeBackup.Web (DQD.RealTimeBackup.)\nlogiclrd 93048  0.0  0.0       432   264  1  R+   10:27       0:00.00 grep 886\nogiclrd@laliari:~ % file /srv/DQD.RealTimeBackup/DQD.RealTimeBackup.Web\n/srv/DQD.RealTimeBackup/DQD.RealTimeBackup.Web: ELF 64-bit LSB pie executable, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 14.0 (1400097), FreeBSD-style, BuildID[sha1]=6259c56f428c5cda458f37919063c43bcc8e966d, stripped\nlogiclrd@laliari:~ % \n```\n\nI don't know if it's _official_ support, but it seems comprehensive and responsive.\n\nhttps://wiki.freebsd.org/.NET",
          "createdAt": "2025-04-01T15:32:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2025-04-01T15:35:46Z",
                "user": "Teddy55Codes"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-04-01T16:06:12Z",
                "user": "nkosi23"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-04-02T07:49:18Z",
                "user": "michael-o"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-04-03T14:34:59Z",
                "user": "TheBrambleShark"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOEMyIWg=="
          },
          "updatedAt": "2025-04-01T15:32:13Z",
          "id": "IC_kwDODI9FZc6lF2Qk"
        },
        {
          "author": "lukeb1961",
          "body": "We don't get PowerShell supporting FreeBSD, even though the changes are trivial, because \"Not Officially Supported\".\n",
          "createdAt": "2025-04-14T05:23:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-14T05:23:43Z",
          "id": "IC_kwDODI9FZc6m7FTs"
        },
        {
          "author": "arrowd",
          "body": "@lukeb1961 https://www.freshports.org/shells/powershell",
          "createdAt": "2025-04-14T05:28:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-14T05:28:19Z",
          "id": "IC_kwDODI9FZc6m7GuZ"
        }
      ],
      "totalCount": 866,
      "endCursor": "Y3Vyc29yOnYyOpHOBsoP6A=="
    },
    "url": "https://github.com/dotnet/runtime/issues/14537",
    "title": "Support for FreeBSD"
  },
  {
    "author": "davkean",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2015-08-05T05:54:58Z",
    "body": "## Updates\r\n- **Update 1**: Removed reference to assemblyQualifiedNameWithinTypeArgument, which was left over from previous iterations.\r\n- **Update 2**: Disallowed raw \"]\" completely in assembly name identifiers to simplify spec. These now have to be escaped regardless whether the assembly name appears in a generic type argument or not.\r\n- **Update 3**: Merged assembly names and type names into single format.\r\n- **Update 4**: Clarified difference between SerString and the canonical form. Misread the spec.\r\n## Rationale\r\n\r\nThis is a proposal that attempts to fully specify _reflection-notation_ serialized types for inclusion in [ECMA-335](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf) (referred onwards as \"the CLI\").\r\n\r\nIn metadata, when a type is persisted as the value of a fixed or named argument, such as in the following code block, it is serialized in a _SerString_ in its canonical form.\r\n\r\n``` C#\r\n    [Export(typeof(ILogger))]\r\n```\r\n\r\nSerString and the canonical form are documented like so (see **_II.23.3 Custom attributes**_)\r\n\r\n> - If the parameter kind is string, (middle line in above diagram) then the blob contains a SerString – a PackedLen count of bytes, followed by the UTF8 characters.  If the string is null, its PackedLen has the value 0xFF (with no following characters).  If the string is empty (“”), then PackedLen has the value 0x00 (with no following characters).\r\n> - If the parameter kind is System.Type, (also, the middle line in above diagram) its value is stored as a SerString (as defined in the previous paragraph), representing its canonical name.  The canonical name is its full type name, followed optionally by the assembly where it is defined, its version, culture and public-key-token.  If the assembly name is omitted, the CLI looks first in the current assembly, and then in the system library (mscorlib); in these two special cases, it is permitted to omit the assembly-name, version, culture and public-key-token. \r\n\r\nThe last paragraph is under specified and does not provide enough information for metadata readers or other inspectors to consume and interpret this canonical form.\r\n\r\nThe documentation for [Type.GetType](https://msdn.microsoft.com/en-us/library/w3f99sx1%28v=vs.110%29.aspx) also has an attempt to document a similar format, but it also falls short. Also while nothing in the CLI or on MSDN indicate a relationship between canonical name and the type name you pass to Reflection's Type.GetType, they are clearly related.\r\n\r\nBased on this I've attempted to write up the grammar that makes up these formats into a single format. Note, I've used a custom form of _BNF_ (Backus-Naur Form), if that puts an unpleasant taste in your mouth, I'm sorry in advance. :)\r\n\r\nMy hope is first to work towards an agreement on the format, and then move onto figuring out how to actually represent and document this within the CLI itself (that's where I hope @CarolEidt comes in).\r\n## Proposed Format\r\n\r\nFormat of an _full type name_ or _assembly-qualified name_ in \"reflection-notation\"\r\n\r\n```\r\n The key is as follows: \r\n\r\n      Symbol:     <name> \r\n      Optional:   [<name>] \r\n      Literal:    \",\" \r\n      Or:         <pointer> \r\n                  <array> \r\n\r\n  <format> ::= \r\n      <assemblyQualifiedName> \r\n      <fullName> \r\n\r\n  <assemblyQualifiedName> ::= \r\n      <fullName> \",\" <assemblyName> \r\n\r\n  <fullName> ::=  \r\n      <declaringTypeName>[<nestedTypeNames>][<genericTypeArguments>][<pointerOrArray>][<byReference>]\r\n\r\n  <declaringTypeName> ::= \r\n      <simpleTypeName> \r\n\r\n  <nestedTypeNames> ::= \r\n      [<nestedTypeNames>] \"+\" <nestedTypeName> \r\n\r\n  <nestedTypeName> ::= \r\n      <simpleTypeName> \r\n\r\n  <simpleTypeName> ::= \r\n      [<whitespace>] <identifier> \r\n\r\n  <genericTypeArguments> ::= \r\n      \"[\" <genericTypeArgumentsList> \"]\" \r\n\r\n  <genericTypeArgumentsList> ::= \r\n      [<genericTypeArgumentsList> \",\"] <genericTypeArgument> \r\n\r\n  <genericTypeArgument> ::= \r\n      <genericTypeArgumentFullName> \r\n      <genericTypeArgumentAssemblyQualifiedName> \r\n\r\n  <genericTypeArgumentFullName> ::= \r\n      <fullName> \r\n\r\n  <genericTypeArgumentAssemblyQualifiedName> ::= \r\n      \"[\" <assemblyQualifiedName> \"]\" \r\n\r\n  <pointerOrArray> ::= \r\n      [<pointerOrArray>]<pointer> \r\n      [<pointerOrArray>]<array> \r\n\r\n  <byReference> ::=  \r\n      \"&\" \r\n\r\n  <pointer> ::=  \r\n      \"*\" \r\n\r\n  <array> ::= \r\n      <szArray> \r\n      <singleDimensionalArray> \r\n      <multiDimensionalArray>  \r\n\r\n  <szArray> ::= \r\n      \"[]\" \r\n\r\n  <singleDimensionalArray> ::= \r\n      \"[*]\" \r\n\r\n  <multiDimensionalArray> ::= \r\n      \"[\" <arrayDimensionSeparator> \"]\" \r\n\r\n  <arrayDimensionSeparator> ::=  \r\n      [<arrayDimensionSeparator>] \",\" \r\n\r\n  <identifier> ::= \r\n      [<identifier>]<identifierChar> \r\n      [<identifier>]<escapedChar> \r\n\r\n  <identifierChar> ::= \r\n      any unicode character except <delimiter> \r\n\r\n  <escapedChar> ::= \r\n      \"\\\" <delimiter> \r\n\r\n  <whitespace> ::= \r\n      [<whitespace>] \" \" \r\n\r\n  <delimiter> ::= \r\n      \"*\" \r\n      \"[\" \r\n      \"]\" \r\n      \",\"  \r\n      \"\\\" \r\n      \"&\" \r\n      \"+\" \r\n\r\n  <assemblyName> ::= \r\n      <name>[<components>] \r\n\r\n  <name> ::= \r\n      [<whitespace>] <identifierOrQuotedIdentifier> [<whitespace>] \r\n\r\n  <components> ::= \r\n      [<components>]<component> \r\n\r\n  <component> ::= \r\n      \",\" <componentName> \"=\" <componentValue> \r\n\r\n  <componentName> ::= \r\n      <identifierOrQuotedIdentifier> \r\n\r\n  <componentValue> ::= \r\n      \"\"\"\" \r\n      <identifierOrQuotedIdentifier> \r\n\r\n  <identifierOrQuotedIdentifier> ::= \r\n      <identifier> \r\n      \"\"\" <quotedIdentifier> \"\"\" \r\n\r\n  <identifier> ::= \r\n      [<identifier>]<identifierChar> \r\n      [<identifier>]<escapedChar> \r\n\r\n  <quotedIdentifier> ::= \r\n      [<quotedIdentifier>]<quotedIdentifierChar> \r\n      [<quotedIdentifier>]<escapedChar> \r\n\r\n  <quotedIdentifierChar> ::= \r\n      any unicode character except \"\"\" \r\n\r\n  <identifierChar> ::= \r\n      any unicode character except <delimiter> \r\n\r\n  <escapedChar> ::= \r\n      \"\\\" <delimiter> \r\n\r\n  <whitespace> ::= \r\n      [<whitespace>] \" \" \r\n\r\n  <delimiter> ::= \r\n      \",\" \r\n      \"=\" \r\n      \"\"\" \r\n      \"\\\" \r\n      \"]\"\r\n```\r\n## Notes\r\n\r\nI've written an implementation of a [decoder](https://github.com/dotnet/corefx/tree/dev/metadata/src/System.Reflection.Metadata/src/System/Reflection/Metadata/Decoding/TypeNameParsing) of the above format for inclusion as part of System.Reflection.Metadata, 1.2.\r\n## Questions\r\n1. What do we do about types that are valid and can appear in metadata, but are not currently represented either by reflection or ildasm with a texture equivalent? For example, function pointers or modifiers? What does C++/CLI even persist when I pass long::typeid or (const int*)::typeid as the value of a fixed or named argument? Should we disallow them?\r\n2. ~~Reflection has lots of corner case issues and inconsistences around on how it handles certain things, such as trailing chars and unclosed quotes. What should we do about them? Should we mimic this in the spec? Or should we just spec the format to be a little tighter and treat these as inconsistences as a quirk of Type.GetType?~~\r\n   We've decided not to mimic these quirks. Writers will be held to the above format, readers can choose to allow more.\r\n",
    "number": 4416,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-03-27T04:15:24Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "davkean",
          "body": "tag @CarolEidt @nguerrera @tmat @AlekseyTs.\n",
          "createdAt": "2015-08-05T05:56:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T05:56:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNzg4MDc1Nw=="
        },
        {
          "author": "davkean",
          "body": "Also @AnthonyDGreen as it was mentioned he's looked into this before.\n",
          "createdAt": "2015-08-05T06:13:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T06:13:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyNzg4NDYxOA=="
        },
        {
          "author": "AnthonyDGreen",
          "body": "In Roslyn we considered this as a readable persistable text format for SymbolId that could be used to specify any symbol. But the reflection/ILDASM format as I recall doesn't have a format for properties and events. Though I think it would be trivial to extend the format to support them.\n",
          "createdAt": "2015-08-05T15:20:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T15:20:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODAzNDMyNA=="
        },
        {
          "author": "tmat",
          "body": "@davkean Re Q2: Reflection inconsistencies should be treated as quirks, imo. The spec should be based on writers, not readers. Writers are in this case the compilers. If there is something that the reader can read but it's never produced by a writer we care about (and thus invalid if we base the spec on the writers we care about) then that's just a quirk of the reader.\n",
          "createdAt": "2015-08-05T15:57:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T15:57:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA0ODgwOA=="
        },
        {
          "author": "nguerrera",
          "body": "+1 to @tmat re Q2.\n\nSome first thoughts...\n1. I suggest that we use the same notation as the spec uses for ILAsm syntax.\n2. The whole \"(within generic type argument)\" handling is hard to decipher: e.g.\n   - assemblyQualified and assemblyQualifiedNameWithinTypeArgument look the same\n   - Why is there both identifierChar with \"(within generic type argument)\" and identifierCharWithinTypeArgument, and why are they different?\n",
          "createdAt": "2015-08-05T16:21:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T16:21:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA1Njk3NA=="
        },
        {
          "author": "davkean",
          "body": "1. As far as I can tell, ILAsm doesn't have a syntax - they cop out, basically, they have a mode where you pass an opaque string and they'll take it and just shove it in without any validation.\n2. Good catch - I changed the way this was represented (I used to branch for type names within generic type arguments) and didn't fix up all the places.\n",
          "createdAt": "2015-08-05T16:28:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T16:28:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA1OTQyMg=="
        },
        {
          "author": "nguerrera",
          "body": "Re (1) : I mean the grammar notation in Ecma 335 where it describes the syntax of the IL assembly language.\n",
          "createdAt": "2015-08-05T16:29:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T16:30:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA2MDIwMg=="
        },
        {
          "author": "nguerrera",
          "body": "Further clarification, I meant my (1) not Q1 in proposal, i.e. use the same notation as how ILAsm syntax is specified.\n\nAlso, I believe 'SerString' in the spec refers to how any such string (including string attribute values, not just type attribute values) is encoded as bytes. The spec doesn't seem to refer to give the type representation a name. It just has underspecified description in the second paragraph.\n\nFinally, re: the \"within generic type arguments\" confusion, if this is just about the handling of '[' in assembly name components, I suggest we either ban it globally or require it to be escaped globally.\n",
          "createdAt": "2015-08-05T17:08:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T17:30:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA3MzE2MQ=="
        },
        {
          "author": "davkean",
          "body": "@nguerrera All good feedback, have simplified the generic type arguments assembly name confusion; always now treat ']' as a delimiter. Clarified difference between SerString and the canonical form of the type name, misread the spec. Will look at doing the same notation as ILAsm.\n",
          "createdAt": "2015-08-05T17:29:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-08-05T17:29:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyODA4NDI4Mg=="
        },
        {
          "author": "MichalStrehovsky",
          "body": "Some quick observations about the captured grammar rules:\n- `<identifier>`, `<identifierChar>`, `<escapedChar>`, `<whitespace>`, and `<delimiter>` are defined twice, with different definitions.\n- There's an inconsistency in the `<fullName>` definition where on one hand it makes sure that the syntax doesn't allow invalid combination with ByRefs (e.g. a ByRef as an element of an array), but on the other it allows invalid combinations of pointers and arrays (e.g. an unmanaged pointer to an array). Why not ban that in the syntax too?\n",
          "createdAt": "2016-09-26T04:53:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-26T04:53:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTQ3OTA4Nw=="
        },
        {
          "author": "MSDN-WhiteKnight",
          "body": ">What does C++/CLI even persist when I pass long::typeid\r\n\r\n`[MyAttr(long::typeid)]` in C++/CLI is compiled into the following IL\r\n\r\n```\r\n  .custom instance void MyAttrAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 59 53 79 73 74 65 6D 2E 49 6E 74 33 32 2C   // ..YSystem.Int32,\r\n                                                                                20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69   //  mscorlib, Versi\r\n                                                                                6F 6E 3D 34 2E 30 2E 30 2E 30 2C 20 43 75 6C 74   // on=4.0.0.0, Cult\r\n                                                                                75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62   // ure=neutral, Pub\r\n                                                                                6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61   // licKeyToken=b77a\r\n                                                                                35 63 35 36 31 39 33 34 65 30 38 39 00 00 )       // 5c561934e089..\r\n```\r\n>(const int*)::typeid\r\n\r\nThis is invalid syntax (error C2059: syntax error : 'typeid'). But if we workaround like this:\r\n\r\n```\r\ntypedef const int* PCONSTINT;\r\n[MyAttr(PCONSTINT::typeid)]\r\n```\r\nThe resulting IL is:\r\n\r\n```\r\n.custom instance void MyAttrAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 5A 53 79 73 74 65 6D 2E 49 6E 74 33 32 2A   // ..ZSystem.Int32*\r\n\t\t2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73   // , mscorlib, Vers\r\n\t\t69 6F 6E 3D 34 2E 30 2E 30 2E 30 2C 20 43 75 6C   // ion=4.0.0.0, Cul\r\n\t\t74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75   // ture=neutral, Pu\r\n\t\t62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37   // blicKeyToken=b77\r\n\t\t61 35 63 35 36 31 39 33 34 65 30 38 39 00 00 )    // a5c561934e089..\r\n```\r\n\r\nSo the C++/CLI compiler does not preserve modifiers or C++-specific types when serializing attribute typeid arguments. It just stores the closest managed type that corresponds to the passed type.",
          "createdAt": "2021-08-17T04:56:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-17T04:56:52Z",
          "id": "IC_kwDODI9FZc41pM32"
        },
        {
          "author": "MichalStrehovsky",
          "body": "Thanks for checking it @MSDN-WhiteKnight! It corresponds to what I would expect to see. Modifiers pretty much don't matter outside signature matching.\r\n\r\nThey e.g. don't impact the LDTOKEN instruction either. Here is one of our tests checking that LDTOKEN of a type and LDTOKEN of a type with a modifier in it produce the same handle:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ead035b1774e91b871929b74a00726b6b9d23025/src/tests/reflection/ldtoken/modifiers.il#L12-L19\r\n\r\nAdding representation of modifiers to the SerString format wouldn't likely result in meaningful improvement (I would expect the reflection stack to return types without the modifiers to match what LDTOKEN does - because both of these essentially map to the C# `typeof`).",
          "createdAt": "2021-08-17T05:04:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-17T05:04:14Z",
          "id": "IC_kwDODI9FZc41pNhC"
        }
      ],
      "totalCount": 12,
      "endCursor": "Y3Vyc29yOnYyOpHONaTYQg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/4416",
    "title": "[Proposal] ECMA-335 specification for \"reflection-notation\" serialized type names"
  },
  {
    "author": null,
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer",
      "code-fixer"
    ],
    "createdAt": "2015-11-21T16:39:50Z",
    "body": "**Title:** Overload operator equals on overloading add and subtract\n\n**Description:**\n\nA public or protected type implements the addition or subtraction operators without implementing the equality operator.\n\n**Dependency:** None\n\n**Notes:**\n",
    "number": 64647,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-11T11:44:56Z",
          "user": "Frulfump"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHODDotUg=="
    },
    "updatedAt": "2022-03-29T18:47:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "buyaa-n",
          "body": "[Triage]: The rule makes sense to us, moving to runtime for further discussion. \r\n\r\nCC @carlossanlop ",
          "createdAt": "2022-02-01T21:56:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-01T22:03:32Z",
          "id": "IC_kwDODI9FZc49O7wi"
        },
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-02-01T21:56:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-01T21:56:46Z",
          "id": "IC_kwDODI9FZc49O7zP"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n**Title:** Overload operator equals on overloading add and subtract\n\n**Description:**\n\nA public or protected type implements the addition or subtraction operators without implementing the equality operator.\n\n**Dependency:** None\n\n**Notes:**\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lgolding</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`api-suggestion`, `area-System.Runtime`, `untriaged`, `code-analyzer`, `code-fixer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-02-01T21:59:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-01T21:59:59Z",
          "id": "IC_kwDODI9FZc49O8Va"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n**Title:** Overload operator equals on overloading add and subtract\n\n**Description:**\n\nA public or protected type implements the addition or subtraction operators without implementing the equality operator.\n\n**Dependency:** None\n\n**Notes:**\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lgolding</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`api-suggestion`, `area-Meta`, `untriaged`, `code-analyzer`, `code-fixer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-02-14T21:49:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-14T21:49:45Z",
          "id": "IC_kwDODI9FZc499xaY"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOPfcWmA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/64647",
    "title": "Port FxCop rule CA1013: OverloadOperatorEqualsOnOverloadingAddAndSubtract"
  },
  {
    "author": "TehWardy",
    "labels": [
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2015-12-19T14:26:55Z",
    "body": "Bear with me, I know there's a heavy expectation here ...\n\nIn todays world of computing its commonly accepted that the GPU is better suited to some tasks with a high level of threading or parallelism.\n\nI have been building applications a lot lately that need to be executed as scheduled tasks because the cpu code would take several minutes to process what could be done on the gpu in little more than a couple of seconds.\nSuch scenarios might include but are not limited to ... \n- complex reporting scenarios in many business applications\n- financial applications that use things like lap cubes and have large 3D sets of data\n- 3D sets of data that need simple functions to compute each item in the set\n\nIn order to take advantage of the monster available in most computers that is the GPU I have to do a whole ton of tasks like ...\n- pull in DX or OpenGL \n- learn those API's \n- learn HLSL \n- learn how to compile HLSL code\n- and so on ... \n  ... the list of things to do is endless just to get even the most basic access to that computing power.\n\nWhat i'm proposing here is not a full blown open source DX / rendering API implementation but simply the ability to execute some code on the GPU from within C#.\n\nAs An example:\nI would love to be able to do something like this in C# and have roslyn work out the details for me ...\n\n```\n// and here's what I would like to write in C# and have roslyn figure out for me\n// threadRef would always be passed and would be a framework defined object\n// myArgs would be an object of my definition that would be passed in to each thread\nGPUTask<TResult> Compute<T, TResult>(ThreadRef threadRef, T myArgs)\n{\n    float result;\n     ...\n     return result;\n}\n```\n\nThe impact on my productivity would be insane here, it also means I can use all the of the resources available on my server not just that little CPU with its tiny number of cores.\nI can see scenarios in industries like finance, making really good use of this as its a neat way to compute large \n\nTo call it we could use something like a link extension perhaps ...\n\n```\nT list = GetList<T>();\nvar result = await list.GPUEach(Compute, i); //returns a Task<IEnumerable<T>>\n```\n\nEach item in the list would then be given to a thread on the gpu to execute.\nI suspect there would need to be some rules around the type of code that could be executed (e.g no daft things like EF calls or cmplex types where you call methods on them in the compute function but the roslyn compiler is really smart and i'm sure with some really simple rules we could throw a compile time exception to say \"this function is runnable on the gpu\" or similar.\n",
    "number": 77609,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-11-23T04:07:28Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "svick",
          "body": "Have you tried any of the existing approaches that allow you to program GPUs from C#? (Some that I found after a quick search: [CUDAfy.NET](https://cudafy.codeplex.com/), [GpuLinq](https://github.com/nessos/GpuLinq/), [Alea GPU](http://www.quantalea.com/).) Were those insufficient for your needs?\n",
          "createdAt": "2015-12-19T15:01:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-19T18:06:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyMzA="
        },
        {
          "author": "TehWardy",
          "body": "Neat, didn't know others had already done this type of thing. \nI was actually thinking it might be cool just to have it as a core feature that C# was a language that could be executed on both platforms, more so since more platforms is the current aim generally speaking anyway for C# and Roslyn.\n",
          "createdAt": "2015-12-19T15:52:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-19T15:52:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyMzQ="
        },
        {
          "author": "gafter",
          "body": "I'm not sure what this has to do with Roslyn. Are you asking for _language_ support?\n",
          "createdAt": "2015-12-20T03:41:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-20T03:41:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyMzU="
        },
        {
          "author": "TehWardy",
          "body": "@gafter: \nI don't really know where things need to happen but my guess is that there would need to be support in the compiler to take a chunk of one of the other Roslyn supported languages and compile it to HLSL / OpenCL and wrap it in some mechanism that allows it to be called in the normal way I call c# methods.\n\nWhat i guess this means to roslyn is that (with some rules / constraints) C# methods could be compiled in to HLSL or OpenCL functions that can be executed on the gpu (probably needing a new library that takes advantage of this new functionality in the compiler). \n\nThe net result:\nI write C#, the compiler worries about getting it to run on my GPU, and my code makes the most of all of my system resources not just that CPU.\n",
          "createdAt": "2015-12-20T11:04:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-21T20:05:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyMzk="
        },
        {
          "author": "dsaf",
          "body": "Even the SIMD support is still not ready :( http://blogs.msdn.com/b/dotnet/archive/2014/05/13/update-to-simd-support.aspx\n",
          "createdAt": "2015-12-20T23:06:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-20T23:08:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNDI="
        },
        {
          "author": "dsaf",
          "body": "@TehWardy re-post here:\n\nhttps://github.com/dotnet/coreclr\nhttps://github.com/dotnet/corefx\nhttps://github.com/dotnet/corefxlab\n",
          "createdAt": "2015-12-20T23:10:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-20T23:10:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNDU="
        },
        {
          "author": "benaadams",
          "body": "> Even the SIMD support is still not ready :(\n\n@dsaf Not sure what you mean? Its been mainstream ever since RyuJIT x64 and 4.6 went RTM in July\n",
          "createdAt": "2015-12-20T23:18:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-20T23:18:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNDc="
        },
        {
          "author": "sharwell",
          "body": "I'd love to expand https://github.com/tunnelvisionlabs/NOpenCL to include this type of functionality.\n\nI've considered two primary approaches:\n1. Create a Roslyn-based compile-time translator that reads C# methods (e.g. static methods which have a particular attribute applied to them) and converts it to OpenCL code which might look [like this](https://github.com/tunnelvisionlabs/NOpenCL/blob/master/NOpenCL.Test/Intel/Optimization.cs#L210-L224). The converted code could then get embedded as a resource, and a C# wrapper could be compiled that callers can use instead of the original method to automatically run the GPU code on supported systems or the C# implementation on others.\n2. Create a runtime disassembler for CIL that performs operation similar to the previous approach, but does so at runtime.\n",
          "createdAt": "2015-12-20T23:58:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-20T23:58:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNTM="
        },
        {
          "author": "dsaf",
          "body": "@benaadams sorry, you are right! http://www.nuget.org/packages/System.Numerics.Vectors\n",
          "createdAt": "2015-12-21T12:00:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2015-12-21T12:00:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNTg="
        },
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-10-28T19:31:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T19:31:50Z",
          "id": "IC_kwDODI9FZc5NNeNs"
        },
        {
          "author": "TehWardy",
          "body": "@sharwell NOpenCL looks cool :) and if it's possible to be done entirely transparently to the caller other than a simple attribute on a method that's an even better bonus. \n",
          "createdAt": "2016-04-13T09:25:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-04-13T09:25:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNjM="
        },
        {
          "author": "aL3891",
          "body": "I also think this would be really cool but not really a language feature in it self, _however_ it does kind of tie in to roslyn since this would be a really cool application of the proposed code generation from nugets as well as the replace/original keywords that are proposed (#5561 and dotnet/roslyn#5292.)\n\nUsing those features, a library could look for an attribute and then generate the code to actually run the method on the gpu.\n",
          "createdAt": "2016-04-14T15:09:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-04-14T15:09:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNjg="
        },
        {
          "author": "JeWaVe",
          "body": "[disclaimer : I work for altimesh]\r\nJust for you to know there are proprietary compilers doing that for you. \r\n\r\nYou can have a look at our community product (free) [Hybridizer](http://www.altimesh.com/hybridizer-essentials/) for example, and our [SDK on github](https://github.com/altimesh/hybridizer-basic-samples/tree/master/HybridizerBasicSamples). \r\n\r\nIn addition, our full product can [target simd](http://www.altimesh.com/c-sharp-to-simd-numerics-vector-and-hybridizer/) hardware from the same code. \r\n\r\nFor the sake of completeness, our main competitors are [cudafy ](https://cudafy.codeplex.com/)(not updated for a long time), and [aleaGPU](http://www.aleagpu.com/release/3_0_3/doc/). ",
          "createdAt": "2017-10-19T14:43:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-19T14:43:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNzI="
        },
        {
          "author": "kaby76",
          "body": "I have been writing a free and open source compiler for CIL/C# to NVIDIA GPUs for the last two years, called [Campy](http://campynet.com/). It is under development and still has a way to go. (I can only do so much, but I'm an unemployed compiler developer.) It currently supports value/ref types, virtual functions, new, strings, arrays, collections, generics, Net Framework/Core/Standard, Windows/Ubuntu, minimal support for debugging in VS. It's based off of LLVM 7.0 (for debugging support), CUDA 9. The runtime is based off of DotNetAnywhere and highly modified with CUDA. I didn't use Corefx/Coreclr because a lot of native code would have to be modified, and it's such a moving target. If you do add support for targeting a GPU, there are a lot of issues, e.g., identifying what to compile to GPU, data structure copy issues, memory management of reference types for a SIMT model, exceptions (CUDA does not support C++ exception handling), files (there are no files on a GPU, and no way to call the CPU from GPU), etc.",
          "createdAt": "2018-08-12T17:19:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-09-13T03:49:08Z",
                "user": "dcuccia"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-16T01:15:45Z",
                "user": "GaryHuan9"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCuryyg=="
          },
          "updatedAt": "2018-08-12T17:19:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDEyOTUzNzcyNzc="
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nBear with me, I know there's a heavy expectation here ...\n\nIn todays world of computing its commonly accepted that the GPU is better suited to some tasks with a high level of threading or parallelism.\n\nI have been building applications a lot lately that need to be executed as scheduled tasks because the cpu code would take several minutes to process what could be done on the gpu in little more than a couple of seconds.\nSuch scenarios might include but are not limited to ... \n- complex reporting scenarios in many business applications\n- financial applications that use things like lap cubes and have large 3D sets of data\n- 3D sets of data that need simple functions to compute each item in the set\n\nIn order to take advantage of the monster available in most computers that is the GPU I have to do a whole ton of tasks like ...\n- pull in DX or OpenGL \n- learn those API's \n- learn HLSL \n- learn how to compile HLSL code\n- and so on ... \n  ... the list of things to do is endless just to get even the most basic access to that computing power.\n\nWhat i'm proposing here is not a full blown open source DX / rendering API implementation but simply the ability to execute some code on the GPU from within C#.\n\nAs An example:\nI would love to be able to do something like this in C# and have roslyn work out the details for me ...\n\n```\n// and here's what I would like to write in C# and have roslyn figure out for me\n// threadRef would always be passed and would be a framework defined object\n// myArgs would be an object of my definition that would be passed in to each thread\nGPUTask<TResult> Compute<T, TResult>(ThreadRef threadRef, T myArgs)\n{\n    float result;\n     ...\n     return result;\n}\n```\n\nThe impact on my productivity would be insane here, it also means I can use all the of the resources available on my server not just that little CPU with its tiny number of cores.\nI can see scenarios in industries like finance, making really good use of this as its a neat way to compute large \n\nTo call it we could use something like a link extension perhaps ...\n\n```\nT list = GetList<T>();\nvar result = await list.GPUEach(Compute, i); //returns a Task<IEnumerable<T>>\n```\n\nEach item in the list would then be given to a thread on the gpu to execute.\nI suspect there would need to be some rules around the type of code that could be executed (e.g no daft things like EF calls or cmplex types where you call methods on them in the compute function but the roslyn compiler is really smart and i'm sure with some really simple rules we could throw a compile time exception to say \"this function is runnable on the gpu\" or similar.\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>TehWardy</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `discussion`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-10-30T18:47:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-30T18:47:37Z",
          "id": "IC_kwDODI9FZc5NRFr6"
        }
      ],
      "totalCount": 15,
      "endCursor": "Y3Vyc29yOnYyOpHOTURa-g=="
    },
    "url": "https://github.com/dotnet/runtime/issues/77609",
    "title": "Proposal: GPU Execution of C# functions"
  },
  {
    "author": "mattwarren",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2016-09-07T11:26:42Z",
    "body": "### Background\n\nI came across this idea after seeing that Java has implemented it, see [JEP 254](http://openjdk.java.net/jeps/254) for the full details, plus this [InfoQ article](http://www.infoq.com/news/2016/02/compact-strings-Java-JDK9) for some extra info.\n\nI'm aware of the CoreFX Labs effort to implement [a UTF-8 string library](https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Utf8), but this proposal doesn't require using a different library, it changes the implementation of all strings in the CoreCLR (a bit ambitious I know!!)\n\nNote: this optimisation work because many types of strings in web-based applications can actually be encoded as `ASCII` or `ISO-8859-1 (Latin-1)`, for instance URLs, HTTP Headers, etc. So even with internationalised applications there are still some possible savings.\n### Implementation\n\nOne way of implementing this is to change the [internal string layout](https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/mscorlib/src/System/String.cs#L50-L56) to the following, with an extra `m_type` field:\n\n``` cpp\npublic sealed class String : IComparable, ICloneable, IConvertible, IEnumerable\n    , IComparable<String>, IEnumerable<char>, IEquatable<String>\n{\n    [NonSerialized]private int  m_stringLength;\n    [NonSerialized]private byte m_type;\n    [NonSerialized]private char m_firstChar;\n    ....\n```\n\nAssuming that there are no padding implications for adding a field like this? \n\nAnother approach is to have an abstract `String` base class and then use either a `UTF16` or `Latin1` implementation via virtual dispatch, but this may have performance implications.\n\nThen the (pseudo) code for the equals method become:\n\n```\npublic boolean Equals(string other) \n{\n    if (this.type != other.type)\n       return false;\n    if (type == LATIN1)\n        return StringLatin1.Equals(this, other);\n    else \n        return StringLatinUTF16.Equals(this, other);\n}\n```\n\nObviously I know this is not a small undertaking, it would require changes to the `String` and `StringBuilder` classes, plus several others. Also the JIT or intrinsics would have to be involved to ensure that all the methods that requires an extra `if (type == LATIN1)` check are as fast as possible (length, indexOf, etc).\n### Advantages\n1. less memory usage overall (as-per @davidfowl [\"At the top of every ASP.NET  profile… strings! \"](https://twitter.com/davidfowl/status/767585518854938625)) \n2. strings become more cache-friendly, which _may_ give better performance\n### Disadvantages\n1. Breaks COM or P/Invoke interop that relies on the current string format\n2. If very few strings in the application are `ASCII` or `ISO-8859-1 (Latin-1)` this will have an overhead for no gain.\n3. Probably something else I haven't thought about ;-)\n### Research\n\nThis feature is not worth doing if it doesn't actually save space for common types of .NET applications. So that this can be measured I wrote [HeapStringAnalyser](https://github.com/mattwarren/HeapStringAnalyser) that makes use of CLR MD (see [Analysing .NET Memory Dumps with CLR MD](http://mattwarren.org/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/#analysing-string-usage) for more info), @nickcraver from Stack Overflow was kind enough to run my tool and one of [their memory dumps](https://gist.github.com/NickCraver/a5e8e307702f92d343f8ec86e71646e6) and it gave the following output:\n\n```\n...\n\nOverall 30,703,367 \"System.String\" objects take up 4,320,235,704 bytes (4,120.10 MB)\nOf this underlying byte arrays (as Unicode) take up 3,521,948,162 bytes (3,358.79 MB)\nRemaining data (object headers, other fields, etc) is 798,287,542 bytes (761.31 MB), at 26 bytes per object\n\nActual Encoding that the \"System.String\" could be stored as (with corresponding data size)\n    3,347,868,352 bytes are ASCII\n        5,078,902 bytes are ISO-8859-1 (Latin-1)\n      169,000,908 bytes are Unicode (UTF-16)\nTotal: 3,521,948,162 bytes (expected: 3,521,948,162)\n\nCompression Summary:\n    1,676,473,627 bytes Compressed (to ISO-8859-1 (Latin-1))\n      169,000,908 bytes Uncompressed (as Unicode/UTF-16)\n       30,703,367 bytes EXTRA to enable compression (one byte field, per \"System.String\" object)\nTotal: 1,876,177,902 bytes, compared to 3,521,948,162 before compression\n```\n\nIn this case the `String` data could be compressed from **~3,358 MB** down to **~1,789 MB**, a pretty impressive saving! But this test would have to be repeated on a far wider range of apps to see if the memory savings are repeated.\n\n**Update:** there's a really thorough write-up by @evincarofautumn who's [actually implemented this suggestion](http://www.mono-project.com/docs/advanced/runtime/docs/ascii-strings/) against the Mono code-base\n",
    "number": 6612,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-07T11:33:51Z",
          "user": "adamsitnik"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-07T12:04:38Z",
          "user": "benaadams"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-07T12:06:24Z",
          "user": "NickCraver"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-07T12:07:13Z",
          "user": "dVakulen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-08T09:42:15Z",
          "user": "clarkis117"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-08T09:42:18Z",
          "user": "clarkis117"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-08T10:07:11Z",
          "user": "AndreyAkinshin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-08T11:04:03Z",
          "user": "mchechulnikov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-08T14:08:51Z",
          "user": "controlflow"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-12T17:23:34Z",
          "user": "whoisj"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-12T17:23:34Z",
          "user": "whoisj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-19T15:53:15Z",
          "user": "rs38"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-19T16:01:13Z",
          "user": "svick"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-19T18:32:19Z",
          "user": "nietras"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-20T08:07:44Z",
          "user": "ErazerBrecht"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-20T11:13:00Z",
          "user": "h0useRus"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-20T13:04:25Z",
          "user": "stevehansen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-21T02:17:35Z",
          "user": "HFadeel"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-21T04:41:08Z",
          "user": "mkjeff"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-21T19:16:59Z",
          "user": "paulomorgado"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-21T19:17:02Z",
          "user": "paulomorgado"
        },
        {
          "content": "HEART",
          "createdAt": "2016-09-21T20:44:45Z",
          "user": "joshfree"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-09-23T21:40:14Z",
          "user": "rkeithhill"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-10-01T09:30:32Z",
          "user": "cocowalla"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2016-10-13T20:25:27Z",
          "user": "stephenmcd1"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-13T12:37:33Z",
          "user": "RickyLin"
        },
        {
          "content": "HEART",
          "createdAt": "2017-02-13T12:37:41Z",
          "user": "RickyLin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-27T19:50:57Z",
          "user": "fiigii"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-05-11T20:53:27Z",
          "user": "maniero"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-06-07T12:28:52Z",
          "user": "ThatRendle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-09-16T11:51:02Z",
          "user": "tupunco"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-09-27T00:05:37Z",
          "user": "snboisen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-11-10T18:09:08Z",
          "user": "ascendedguard"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-02-10T06:43:43Z",
          "user": "jbreiding"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-03-26T10:08:22Z",
          "user": "lillo42"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-04-25T11:22:41Z",
          "user": "scottgal"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-04-25T13:41:24Z",
          "user": "Meligy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-05-19T15:08:21Z",
          "user": "Nirmal4G"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-06-03T12:40:47Z",
          "user": "ryanelian"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-09-18T15:06:15Z",
          "user": "71"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-01-15T12:11:55Z",
          "user": "popcatalin81"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-03-13T03:39:11Z",
          "user": "kekyo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-05-29T09:10:51Z",
          "user": "xiangzhai"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-25T07:12:39Z",
          "user": "avsorokin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-04T18:29:10Z",
          "user": "YZahringer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-06T12:07:51Z",
          "user": "Athari"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-01T21:13:00Z",
          "user": "kronic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-24T01:20:32Z",
          "user": "Spavid04"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-30T20:28:31Z",
          "user": "Bouke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-17T18:14:40Z",
          "user": "sfiruch"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-12T09:20:53Z",
          "user": "0xfeeddeadbeef"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-31T16:09:49Z",
          "user": "LifeIsStrange"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-28T11:58:58Z",
          "user": "BoundedChenn31"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-28T12:03:38Z",
          "user": "karb0f0s"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-14T20:05:11Z",
          "user": "sgf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-28T13:57:40Z",
          "user": "mahara"
        }
      ],
      "totalCount": 56,
      "endCursor": "Y3Vyc29yOnYyOpHOAEC2Pg=="
    },
    "updatedAt": "2024-12-26T02:56:15Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "benaadams",
          "body": "Was updated to Ascii rather than ISO-8859-1 in  [RFC 7230 3.2.4. Field Parsing](https://tools.ietf.org/html/rfc7230#section-3.2.4). \n\nLatin-1 conflicts with Utf8 whereas Ascii is compatible (so you can cross detect between the two)\n",
          "createdAt": "2016-09-07T12:04:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-07T12:15:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTI1OTQ4NA=="
        },
        {
          "author": "benaadams",
          "body": "Interestingly the current string format does already have an [IsAscii flag](https://github.com/dotnet/coreclr/blob/255cb7355da9cbfda84bdd09e388ef660eddffe3/src/classlibnative/bcltype/stringnative.cpp#L228-L249) on it \n\nThough it considers `'` and `-` to [not be Ascii](https://github.com/dotnet/coreclr/blob/57b3450f4d232cd53d3b9a0f6566806d73fa4156/src/vm/object.cpp#L2385-L2422) :frowning: \n\nHowever changing the string to be 8-bit rather than 16-bit based on this flag would likely break `fixed` statements on strings without special handling (and passing to pinvoke etc)\n",
          "createdAt": "2016-09-07T12:38:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-07T12:38:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTI2NzIyNA=="
        },
        {
          "author": "akoeplinger",
          "body": "ASCII Strings is something that @evincarofautumn experimented with a lot for Mono: the proposal is here http://www.mono-project.com/docs/advanced/runtime/docs/ascii-strings/ (and a few more details in the [mono-devel list thread](https://lists.dot.net/pipermail/mono-devel-list/2016-July/043744.html) about it)\n\nI'm sure he can go into great details about the pros/cons 😄 \n",
          "createdAt": "2016-09-07T13:13:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-07T13:17:04Z",
                "user": "mattwarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-05-25T16:54:07Z",
                "user": "yahorsi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-03T17:09:58Z",
                "user": "markusschaber"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-19T14:52:17Z",
                "user": "Mike-E-angelo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-15T12:12:49Z",
                "user": "popcatalin81"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-17T14:47:07Z",
                "user": "kasthack"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-14T20:05:38Z",
                "user": "sgf"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHODlvXFA=="
          },
          "updatedAt": "2016-09-07T13:16:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTI3NTk2MA=="
        },
        {
          "author": "mattwarren",
          "body": "> However changing the string to be 8-bit rather than 16-bit based on this flag would likely break `fixed` statements on strings without special handling (and passing to pinvoke etc)\n\nHmm, I didn't think about compatibility with code that uses `fixed` against strings, yeah that's a problem. Looks like the mono experiment solved it by [disabling `fixed` on strings](http://www.mono-project.com/docs/advanced/runtime/docs/ascii-strings/#getting-there-disabling-fixed-on-strings).\n",
          "createdAt": "2016-09-07T13:21:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-07T13:21:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTI3ODExNg=="
        },
        {
          "author": "benaadams",
          "body": "> Looks like the mono experiment solved it by disabling fixed on strings.\n\nCould always stackalloc length \\* 2 bytes for fixed start then copy and widen with `_mm_unpacklo_epi8` & `_mm_unpackhi_epi8` then compress back at fixed closed. Would be slow though...\n\nOr allow both fixed byte\\* and fixed char*\n",
          "createdAt": "2016-09-07T13:37:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-07T13:52:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTI4MjY5NA=="
        },
        {
          "author": "fanoI",
          "body": "Why use ASCII instead of Latin 1 for the 1 byte version? Latin1 will permit to use one byte for a lot of accented characters of Western Europe as 'è', 'ò', 'ù'...\n\nCould have sense to have a third type at this point for UTF32 in the case of strings containing characters that could not represented in UTF16 (Chinese characters, Klingon, Emoticons, ...) if not resorting to the kludge of use surrogate pairs (that are not really supported in .NET[1])? Probably it would not accomplish a lot of compression in this case but the implementation could be more correct.\n\n[1] De facto .NET String are really UCS2 not UTF16.\n",
          "createdAt": "2016-09-08T07:33:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "CONFUSED",
                "createdAt": "2017-10-19T13:48:15Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAOfEXw=="
          },
          "updatedAt": "2016-09-08T07:34:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTUxNzA1OQ=="
        },
        {
          "author": "benaadams",
          "body": "> Why use ASCII instead of Latin 1 \n\nASCII and UTF8 are compatible; Latin 1 and UTF8 are not so require conversions between the two. \n\nUTF8 is just as compact for the non-accented characters and is current the general interchange format, so using Latin 1 would add conversion load, and allocation to and from UTF8; whereas ASCII requires no conversion.\n\nAlso using Latin 1 in places where only ASCII is allowed (http headers etc) adds a validation step to and from. There are fast ASCII algorithms that don't apply to Latin 1, e.g case insentive compare (ignore a single bit), upper and lower casing (flip a bit) etc.\n\ne.g. If a string is known to be ASCII (1 byte per char) it requires no validation steps and its bytes can be used directly, and conversion to UTF8 is instant, as its bytes are @already also UTF8.\n",
          "createdAt": "2016-09-08T07:41:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T08:46:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTUxODYxOQ=="
        },
        {
          "author": "migueldeicaza",
          "body": "The reason Mono has disabled fixed on strings is purely to help us locate the code paths that have fixed in as many places as possible and upgrade the code.\n\nThe idea is to perform a copy of the data on demand if necessary when a \"fixed\" that has not been upgraded is found, preserving compatibility at the expense of a string copy.\n",
          "createdAt": "2016-09-08T10:43:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T10:43:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU2MDMyMA=="
        },
        {
          "author": "migueldeicaza",
          "body": "I once also tried to make the case that .net was ucs2 and not UTF16 in front of the whole ECMA committee, only to find out that I was wrong :-)\n\nhttp://www.unicode.org/faq/utf_bom.html#utf16-11\n",
          "createdAt": "2016-09-08T10:46:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2016-09-08T11:01:56Z",
                "user": "mattwarren"
              },
              {
                "content": "LAUGH",
                "createdAt": "2016-09-08T11:02:54Z",
                "user": "HansOlavS"
              },
              {
                "content": "LAUGH",
                "createdAt": "2016-09-26T17:39:11Z",
                "user": "pentp"
              },
              {
                "content": "LAUGH",
                "createdAt": "2017-05-12T00:02:15Z",
                "user": "ssg"
              },
              {
                "content": "LAUGH",
                "createdAt": "2017-09-26T20:48:13Z",
                "user": "0xced"
              },
              {
                "content": "LAUGH",
                "createdAt": "2017-10-19T13:48:03Z",
                "user": "markusschaber"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-15T12:15:00Z",
                "user": "popcatalin81"
              },
              {
                "content": "LAUGH",
                "createdAt": "2020-11-19T19:19:09Z",
                "user": "PathogenDavid"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOBXZoSw=="
          },
          "updatedAt": "2016-09-08T10:46:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU2MDk0Ng=="
        },
        {
          "author": "HansOlavS",
          "body": "@benaadams, I live in Europe and we use Latin-1. Consider the cultural impact of using Latin-1 from my European perspective. For the US ASCII might seem like a slam dunk, but if you think about this with European eyes it's not.\n\nCould a compiler-switch be a good middleground? Use ASCII as default, but open up for Latin1...\n",
          "createdAt": "2016-09-08T11:02:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2017-09-27T00:12:43Z",
                "user": "snboisen"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2018-04-26T10:44:40Z",
                "user": "NinoFloris"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2019-09-13T15:38:37Z",
                "user": "antiufo"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2020-04-25T07:17:05Z",
                "user": "avsorokin"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2021-05-17T18:16:43Z",
                "user": "sfiruch"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-15T18:43:34Z",
                "user": "Genbox"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOCYTUhg=="
          },
          "updatedAt": "2016-09-08T11:02:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU2NDExMw=="
        },
        {
          "author": "benaadams",
          "body": "@HansOlavS I don't think Latin-1 would be great; I'm not thinking of it from a US perspective (I live in Europe also); more from high throughput interchange formats.\n- String is the correct format for Windows p/invoke, platform internationalisation and UI display.\n- ASCII is the correct format for a lot of protocols with their limited command set and dislike of getting involved with network byte order and endianness (and a straight subset of String with char narrowing).\n- UTF8 is now the general standard for most text; both a direct superset of ASCII and endianness free, as well as having a straight forward [vector route to UTF16](https://woboq.com/blog/utf-8-processing-using-simd.html).\n\nLatin-1 (ISO-8859-1) is also a superset of ASCII but requires conversion to and from String, UTF8 and Windows native. Only 6% of webpages use ISO-8859-1. It also doesn't actually cover all [European lanugages](https://en.wikipedia.org/wiki/ISO/IEC_8859-1#Languages_commonly_supported_but_with_incomplete_coverage) as well as [ISO-8859 having 16 variants](https://en.wikipedia.org/wiki/ISO/IEC_8859#Table) for the fuller coverage. \n\nRelated you need to be using ISO-8859-7 (Latin/Greek), ISO-8859-15 (Latin-9) or ISO-8859-16 (Fantasy mix) to include the Euro symbol € as its not included in Latin-1.\n\nThe Latin formats don't have the quick processing properties of ASCII e.g. case-intensive compare, uppercasing, lowercasing, and require character translation look ups; so at best become a slightly more compressed format with but with translation penalties.\n\nIt might be worth having a string8byte opaque intermediate format; that supports string items such as indexOf, split, etc, then requires translation to String, UTF8 and ASCII (for subset validation). \n\nHowever, I'm not sure that provides a great advantage over using `Span<byte>` or `btye[]` and the `Encoder` namespace?\n",
          "createdAt": "2016-09-08T12:20:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-17T12:36:51Z",
                "user": "bbarry"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-21T19:57:02Z",
                "user": "paulomorgado"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T17:42:23Z",
                "user": "pentp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-27T00:12:56Z",
                "user": "snboisen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-19T13:49:49Z",
                "user": "markusschaber"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-04-30T20:19:10Z",
                "user": "altso"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-25T07:17:03Z",
                "user": "avsorokin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-28T14:05:04Z",
                "user": "mahara"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOEcLX8A=="
          },
          "updatedAt": "2016-09-08T12:31:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU3OTc5MA=="
        },
        {
          "author": "HansOlavS",
          "body": "Disclaimer: this is way out of my league... ;)\n\nI get that ASCII aligns neatly with a lot of low-level protocols (like HTTP), but my concern was memory footprint and reduction when loading up my .NET app that contains a lot of Latin-1 compatible strings. It would be super-nice to have those stored as 8-bit chars in-memory instead of the 16-bits .NET now uses.\n\nIf you're familiar with Delphi (Anders Hejlsbergs predecessor to C#) it had 'string' (which was ANSI string, depending on your computers localization settings or whatever) and 'widestring' which was unicode (not sure of the actual encoding).\n\nActually, my very first reaction to C# and .NET (reading a C# book back in 2002) was that all strings were \"unicode\" and 16-bits. I thought that was a strange choice regarding memory consumption.\n",
          "createdAt": "2016-09-08T13:02:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2018-05-19T15:11:05Z",
                "user": "Mike-E-angelo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-15T12:15:52Z",
                "user": "popcatalin81"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAhl9Dw=="
          },
          "updatedAt": "2016-09-08T13:02:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU4OTkwNA=="
        },
        {
          "author": "HansOlavS",
          "body": "And regarding special cases like €, I don't care as that is an edge-case and I'm happy to have it stored in UTF16.\n",
          "createdAt": "2016-09-08T13:04:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T13:04:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU5MDQxMg=="
        },
        {
          "author": "migueldeicaza",
          "body": "ASCII has other benefits, when marshaling out to UTF8 it requires no processing.  It is a direct copy.  \n\nAnything th\n",
          "createdAt": "2016-09-08T13:13:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T13:13:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU5Mjc1MA=="
        },
        {
          "author": "migueldeicaza",
          "body": "Anything that uses the top bit would prevent this optimization from working.   The was one of the reasons for Mono's work to use ascii\n",
          "createdAt": "2016-09-08T13:14:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T13:14:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU5Mjk4OQ=="
        },
        {
          "author": "HansOlavS",
          "body": "I get the ASCII->UTF8 compatibility and marshaling and p/invoke and such. I guess I'm still a bit uneasy with .NET's decision to have all strings in memory as 16-bits UTF16 and miss the old days in Delphi where I could have ANSI (Latin-1) string and widestring and make a conscious decision on where to use what. But maybe this concern is totally beside the point in this thread and I misunderstood.\n",
          "createdAt": "2016-09-08T13:20:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T13:20:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTU5NDcxMg=="
        },
        {
          "author": "fanoI",
          "body": "For Latin1 I intended the \"proper\" implementation done by Microsoft: https://en.wikipedia.org/wiki/Windows-1252.\n\nThe opened issue is talking to compress the strings and waste half of a bytes to be compatible with ASCII does not make sense to me. To check if a Latin1 string is a valid ASCII character you could not simple check if its byte is < 127?\n\nA part from Java, Python has doing a similar thing to the one I was thinking:\nhttp://legacy.python.org/dev/peps/pep-0393/\n\ncharacters that are not representable is UCS2 would use UCS4 (4 Byte).\n\nIf we were interested to be compatible with UTF8 we could use UTF8 directly but it is not the most compact representation: a lot of simple characters as 'è' become 3 bytes, the more complex could become 6 bytes long!\n\nI was pretty sure that characters between 128 and 255 were the same between Latin1 and UTF16 I am wrong?\n",
          "createdAt": "2016-09-08T16:43:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T16:43:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTY2MDU5OQ=="
        },
        {
          "author": "zabulus",
          "body": "Why don't use separate type?\n",
          "createdAt": "2016-09-08T18:41:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-26T15:24:56Z",
                "user": "NickStrupat"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOANqPCA=="
          },
          "updatedAt": "2016-09-09T12:21:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTY5NzM0OA=="
        },
        {
          "author": "evincarofautumn",
          "body": "@HansOlavS It would be possible to use Latin-1 as the compact encoding. Scanning would be just as fast because the second Unicode block (U+0080–U+00FF) corresponds to the upper range of Latin-1, as @fanol rightly pointed out. We could also do some clever hacks with the range U+0080–U+009F, which contains rarely used control characters; for example, encoding € as U+0091 (“Private Use 1”).\n\nSome ASCII-only optimisations would no longer work. Marshalling would require an extra scan per string. And since Latin-1 has incomplete coverage for many languages, it might not make much of a difference; we should measure real-world apps.\n\nI don’t like that this optimisation privileges some languages over others, but frankly it’s because the character encodings are already biased.\n\n@zabulus All the existing APIs are using `String`, so if we change the representation of `String` then existing code will benefit without modification, as long as it’s not using `unsafe`/`fixed`. If we add a new type, only new code will be able to take advantage of the optimisation.\n",
          "createdAt": "2016-09-08T19:24:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T19:24:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTcxMTIwNw=="
        },
        {
          "author": "mattwarren",
          "body": "@zabulus \n\n> Wh(y) don't use separate type?\n\nSure you can use a separate type, that's what the [UTF-8 string library](https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Utf8) is trying to achieve.\n\nHowever this proposal was to see if something more wide-ranging and more deeply embedded in the CLR would be possible. With the side-effect that you don't have to make any code-changes to use it.\n",
          "createdAt": "2016-09-08T19:33:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-08T19:33:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTcxMzU3MQ=="
        },
        {
          "author": "zabulus",
          "body": "> @zabulus All the existing APIs are using String, so if we change the representation of String then existing code will benefit without modification, as long as it’s not using unsafe/fixed. If we add a new type, only new code will be able to take advantage of the optimisation.\n\nI see one more concern about such strings, except `unsafe/fixed` is about marshaling such strings with P/Invoke. Specially in case using the new strings in W(ide) versions of Win32 API. \n",
          "createdAt": "2016-09-09T12:23:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-09T12:26:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTg5ODEwMA=="
        },
        {
          "author": "fanoI",
          "body": "As Latin1 is a subset of UTF16 the marshalling code if should convert to a C/C++ wstring would simply duplicate any byte adding a 0 before it, probably one could made the thing faster using SSE intrinsic.\nIf I'm not wrong the algorith that there work for the ASCII part of an UTF8 string would work to convert a Latin1 string to UFT16 too:\nhttps://woboq.com/blog/utf-8-processing-using-simd.html\n\nIt is obvious that in some cases this implementation will have performance cost it depends if it is more important to use less memory or to be faster...\n",
          "createdAt": "2016-09-09T16:09:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-09T16:10:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTk1OTc0Mg=="
        },
        {
          "author": "benaadams",
          "body": "> For Latin1 I intended the \"proper\" implementation done by Microsoft: https://en.wikipedia.org/wiki/Windows-1252.\n> \n> I was pretty sure that characters between 128 and 255 were the same between Latin1 and UTF16 I am wrong?\n\nCharacters 128 - 159 differ between the Windows-1252 variant and UTF16\n\n> To check if a Latin1 string is a valid ASCII character you could not simple check if its byte is < 127\n\nThen additionally in the fast path algorithms you need to do a validation check, per character, which makes them less fast path... (can't use a straight int, long, vector bitwise or)\n",
          "createdAt": "2016-09-09T16:26:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-09T16:28:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NTk2NDc0OQ=="
        },
        {
          "author": "mattwarren",
          "body": "Sorry, I guess I didn't actually ask any questions when I proposed this. I guess I'm wondering:\n1. Has something like this been considered before, are there fundamental reasons why it can't be or won't be done in the CLR?\n2. If not, is this something that would be considered in the future or are things like [System.Text.Utf8](https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Utf8) the recommended solution?\n",
          "createdAt": "2016-09-09T21:43:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-09T21:43:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjA0ODk5NA=="
        },
        {
          "author": "evincarofautumn",
          "body": "@fanol Right, marshalling to UTF-16 would still be cheap. You could do it with ~2 instructions for each 8 bytes of input (`movq` + `punpcklbw`). UTF-8 would be slightly more involved.\n\n@mattwarren Around the time we had [a discusson on mono-devel-list](http://mono.1490590.n4.nabble.com/ASCII-Strings-Proposal-td4668256.html) about my proposal, some MS people (@vancem) indicated that they’ve thought about doing this in the past. The objections were mainly that it’s a large, invasive change (we don’t want to break stability & backward compatibility) and the `get_OffsetToStringData` API used internally by `fixed` is less than ideal.\n",
          "createdAt": "2016-09-09T23:27:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-09T23:27:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjA2NzY1NQ=="
        },
        {
          "author": "mattwarren",
          "body": "> Around the time we had [a discusson on mono-devel-list](http://mono.1490590.n4.nabble.com/ASCII-Strings-Proposal-td4668256.html) about my proposal, some MS people (@vancem) indicated that they’ve thought about doing this in the past. The objections were mainly that it’s a large, invasive change (we don’t want to break stability & backward compatibility) and the `get_OffsetToStringData` API used internally by `fixed` is less than ideal.\n\n@evincarofautumn that's interesting to know, thanks\n",
          "createdAt": "2016-09-09T23:41:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-12T09:34:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjA2OTUyMg=="
        },
        {
          "author": "benaadams",
          "body": "> Right, marshalling to UTF-16 would still be cheap. You could do it with ~2 instructions for each 8 bytes of input (movq + punpcklbw). \n\nThough not for the  Windows-1252 variant due to the conflict in characters 128 - 159 \n",
          "createdAt": "2016-09-10T06:29:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-10T06:29:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjA5Mzg4OQ=="
        },
        {
          "author": "fanoI",
          "body": "OK the Microsoft version of Latin1 while more clever in the use of the only 255 characters is not adapt because it is not a subset of UTF16 while the real Latin1 is https://en.wikipedia.org/wiki/ISO/IEC_8859-1 so it is this that should be used. Patience for '€' and other characters in the block 128 - 159 strings containing them will be not compressible.\n",
          "createdAt": "2016-09-10T18:48:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-10T18:48:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjEyODg1MA=="
        },
        {
          "author": "vancem",
          "body": "To answer @mattwarren question on whether changing the internal representation of a string has been considered before, the short answer is YES.  In fact it has been a pet desire of mine for probably over a decade now.    What was clear now and has held true for quite sometime is that\n\nTypical apps have 20% of their GC heap as strings. \nMost of the 16 bit characters have 0 in their upper byte.  Thus you can save 10% of typical heaps by encoding in various ways that eliminate these pointless upper bytes.   \n\nNow the first issue you have is while this saves GC heap size, it is not guaranteed to have a SPEED improvement.  Lets just assume that the new representation is equally good at everything, but half the size.     For things that fit in cache with the bigger size, you probably will get very little speed improvement.    We know from work comparing 32 vs 64 bit applications, that the GC heap expands by 1.6X when you got to 64 bit (pointers are bigger), and that results in a 10-15% performance loss.   Thus we can compute that changing the representation of strings is likely to save 10% of the GC heap and thus is likely to save about 1.5 to 2.5% throughput.   This is significant, but not dramatic.    Keep in mind this assumes that all operations are equal.  \n\nNow it turns out that all operations are NOT equal, and thankfully the advantage is toward the NEW layout (if done well) most of the time.   We know that the most common operations on strings include\n\nComparision\nCopy/Substring\nIndexOf\nHashing\n\nThe good news is that for all of these operations, are SCANS and thus if the encodings are SHORTER they are FASTER (fewer iterations).   This bodes well.   \n\nWhat are the disadvantages:   As you might suspect compatibility is the big issue.   There are two basic issues\n1. Interop  - on the boundary from managed to native code (where native code needs UTF16), a copy will need to be made.    In general this is not a huge deal as interop has its own overheads and we already have logic for doing this copy if needed.    However we do expect that there will be some scenarios where interop with string marshaling will be important.   We are effectively trading off this scenario (which I believe is OK for the general case, but there WILL be some set of less-than-happy customers (they will lose out))\n2. The C# Fixed operator on strings.  This is a thornier issue.  There are two aspects.  First is correctness, and the second is performance.    You an try to 'solve' the correctness issue by making a copy of the string when you do a 'fixed'  Obviously this makes perf bad (and typically the whole point of fixed is perf) but at least is correct.  It turns out that this is not as easy as you would like because we don't actually have an 'operation' which takes a string and returns its first character.   Instead, we have a declared offset that IL compilers used to do the arithmetic themselves.   Because IL code generators may generat this code in many ways, this makes it potentially hard (in the limit impossible) to figure out when to make the copy.  \n\nSo the real thorny issue is this issue of 'fixed'.  I believe the semantics of it are solvable (first going forward you introduce a real operator, and for compat you simply recognize certain patterns that are emitted by our existing compilers and simply fail on the others.   \n\nHowever this only solves the correctness issue.   The perf issue is still there.   Most likely you solve this by introducing a string iterator, and ask people to move to it, and/or use JIT optimization to allow some patterns to simply work well (e.g. foreach over the string using integer indexes).   \n\nBecause this is not perfect, we are likely to allow some compat flag where you can ask to keep things the old way (UTF16) for those who have performance issues because of it.   \n\nThis probably requires a bit of an audit of where 'fixed' is being used and determining just how bad the proposed solution above is, so we can determine what the guidance will be for replacing 'fixed' in the important cases at least.  \n\nBut you can see the broad outline above:   Changing strings will have a 10% improvement for most GC heap sizes and is likely to yield a 1.5-2.5% throughput improvement, and maybe more (because the code was heavy in string operations that benefit from the new format), but there will definately be peopel who are impacted (those using fixed, and those with hot interop paths passing strings)   The main challenge is dealing with fixed, but there is also frankly at least a few man-months of simply dealing with the places in the runtime where we took a dependency on the layout of string (in the runtime, interop, and things like stringbuilder, and all the uses of 'fixed' in corefx).  \n\nThus it IS doable, but it is at least moderately expensive (man months), and the payoff is non-trvial but not huge.    \n\nGiven that, I think the next steps would be to do a good inventory of where 'fixed' is used and design the mitigations (we will make an string iterator class?, exactly what compile magic will we have? ...).   Also having microfbenchmarks  for important cases of 'fixed' (before and after optimization), as well as a microbenchmark for interop would be useful.   \n\nFinally, I note that all of this just lets us CHOOSE what representation we want.   We actually have ALOT of flexibility on exactly what the representation is.  My recommendation is that allow that to be flexible (it does not have to be UTF8 or ascii with a type code.   I am actually partial to at runtime fixed Huffman compression (which allows it to work well on Chinese).   However I lets set that aside for right now.  We can start with one of the suggestions above and change to something else later with basically no impact.     \n\n' \n",
          "createdAt": "2016-09-12T17:16:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-13T10:58:07Z",
                "user": "mattwarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-13T11:23:13Z",
                "user": "adamsitnik"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-14T09:19:28Z",
                "user": "LetMeCodeThis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-16T16:40:24Z",
                "user": "codekaizen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-19T15:23:28Z",
                "user": "AndreyAkinshin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-19T16:20:29Z",
                "user": "svick"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-19T18:35:37Z",
                "user": "nietras"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-20T08:09:53Z",
                "user": "ErazerBrecht"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-21T20:14:08Z",
                "user": "paulomorgado"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-23T08:47:25Z",
                "user": "khellang"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T18:17:21Z",
                "user": "pentp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-11T11:24:14Z",
                "user": "wrbst"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-27T00:31:06Z",
                "user": "snboisen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-17T10:13:26Z",
                "user": "markusschaber"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-26T00:58:38Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 15,
            "endCursor": "Y3Vyc29yOnYyOpHOEAMmXQ=="
          },
          "updatedAt": "2016-09-12T17:16:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjQyMDc2NQ=="
        },
        {
          "author": "whoisj",
          "body": "I would love, love, love it if `string` were synonymous with `IString<T> where T : byte or char or uint or similar` and not `String`, that would allow custom implementations of `IString` such as `StringUtf8`, `StringAscii`, `StringUtf16`, etc. Of course use of p/invoke would require the signature o use the correct implementation of `IString`.\n\nI for one would love to see [utf 8 everywhere](http://utf8everywhere.org/).\n",
          "createdAt": "2016-09-12T17:20:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-19T16:19:13Z",
                "user": "Mike-E-angelo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-26T00:58:45Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEAMmbQ=="
          },
          "updatedAt": "2016-09-12T17:24:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjQyMjI5Mg=="
        },
        {
          "author": "whoisj",
          "body": "> The C# Fixed operator on strings\n\nUm, developers **should not** assume that characters are the size of a `char` anyways, as UTF-16 supports multiple `char` characters. In fact, I'd say changing to the suggested model would help developers avoid a whole class of bugs due to very poor assumptions.\n\nAs for `unsafe` operations, the underlying array should remain accessible regardless of the impl, otherwise we will be throwing an immense amount of performance optimization out with the bath water.\n",
          "createdAt": "2016-09-12T17:23:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-12T17:23:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjQyMzQwNg=="
        },
        {
          "author": "benaadams",
          "body": "> Given that, I think the next steps would be to do a good inventory of where 'fixed' is used and design the mitigations\n\nUsing wider types `long*` on x64 and `int*` on x86 and `Vector<ushort>` over strings; which would also perform faster if the string was a more compact type.\n\n> Um, developers should not assume that characters are the size of a char anyways, as UTF-16 supports multiple char characters.\n\nNormally a validate to ascii is a step with a fallback to using the Encoding namespace that accepts `char*` when not ascii. Equally there is a pressure to keep ascii as byte[] for as long as possible for the performance, but then there is no interop with any function that accepts strings so the type must be widened at some point and converted to string.\n\nAn example of widening with validation is the unrolled [AsciiUtilities.TryGetAsciiString](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/AsciiUtilities.cs#L8-L77) is Kestrel internals.\n",
          "createdAt": "2016-09-12T17:48:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-12T17:48:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NjQzMTQ0OQ=="
        },
        {
          "author": "mattwarren",
          "body": "@vancem thanks for taking the time to answer my query so comprehensively! There's a lot of trade-offs I hadn't even considered, particularly around the impact on `fixed` code.\n\nIt's nice to know that someone has been thinking about this and that it may, someday, make it's way into the CLR\n\n>  but there is also frankly at least a few man-months of simply dealing with the places in the runtime where we took a dependency on the layout of string (in the runtime, interop, and things like stringbuilder, and all the uses of 'fixed' in corefx).\n\nYeah I can image, for fun I modified a version of the CoreCLR source, so that `String` had the following layout:\n\n``` cs\npublic sealed class String \n{\n    private int  m_stringLength;\n    private byte m_type;\n    private char m_firstChar;\n    ....\n```\n\nI struggled to get a \"hello world\" app to run, I  got stuck fixing `StringBuilder`. The main problem is that when `String` is broken, nothing works, you don't even get meaningful error messages because they rely on `String` and/or `StringBuilder` working!\n",
          "createdAt": "2016-09-14T09:06:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-16T16:41:34Z",
                "user": "codekaizen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-17T12:45:25Z",
                "user": "bbarry"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOADdEiQ=="
          },
          "updatedAt": "2016-09-14T09:06:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0Njk1MTMyNA=="
        },
        {
          "author": "evincarofautumn",
          "body": "A systemic change like this has to be done _very_ incrementally to retain any ability to debug the inevitable failures. It’s a difficult and disruptive feature to implement. But, if I might be so bold, it’s our responsibility as systems programmers and programming language implementors to do exactly this kind of hard work for the sake of others. I can’t name an industry in which an improvement of 10% on a highly valued metric would be considered marginal.\n",
          "createdAt": "2016-09-14T09:51:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-14T10:03:04Z",
                "user": "mattwarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-14T14:31:09Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-21T07:57:38Z",
                "user": "ctolkien"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-27T00:34:41Z",
                "user": "snboisen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-26T00:59:38Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOEAMmsA=="
          },
          "updatedAt": "2016-09-14T09:51:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0Njk2MjQ3Mw=="
        },
        {
          "author": "jkotas",
          "body": "> A systemic change like this has to be done very incrementally\n\nAbsolutely agree. A very good first step would be to design and implement alternative expansion of `fixed` statement for strings that is compatible with this scheme.\n",
          "createdAt": "2016-09-14T14:34:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-19T18:41:20Z",
                "user": "nietras"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-25T02:37:56Z",
                "user": "clarkis117"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-10-17T09:41:56Z",
                "user": "mattwarren"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAEGcbQ=="
          },
          "updatedAt": "2016-09-14T14:34:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzAzMzEzOA=="
        },
        {
          "author": "vancem",
          "body": "Yes, the first steps are to fix the string abstraction so that it is 'complete' (that is there is only a modest amount of code that depends on its layout.  That includes dealing with a scheme for dealing with 'fixed' on strings and fixing up runtime/class library code to use the new abstractions.   Note that this work does NOT break anything and can be done incrementally.   After that abstraction is in place, we are in a much better place to actually change the internal format.  \n",
          "createdAt": "2016-09-14T17:44:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-14T17:44:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzA5NjQ5NA=="
        },
        {
          "author": "benaadams",
          "body": "A slight wrinkle with `fixed` expansion is: if a 8 bit string; was changed to a 16 bit string during the time when it was `fixed` (by writing to the high bytes) it would need reallocating as a 16 bit string when leaving the fixed statement.\n",
          "createdAt": "2016-09-14T22:14:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-14T22:14:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzE3MzM3Nw=="
        },
        {
          "author": "vancem",
          "body": "My expectation of how 'fixed' works is that it unconditionally copies the string data into an array of char and points it at that.   The original data is never modified.    You are not allowed to modify string data in using the pointer a 'fixed' statement gives you (thankfully).   \n",
          "createdAt": "2016-09-14T22:49:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-14T22:49:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzE4MDY2Mw=="
        },
        {
          "author": "benaadams",
          "body": "> You are not allowed to modify string data in using the pointer a 'fixed' statement gives you (thankfully).\n\nYou can currently; its a pointer to the data with no copy - else fixed would be very slow (doesn't mean you should though).\n\nObviously trouble lies that way if the string has ever been used as its flags such as `isAscii` which is lazily evalated would go out of sync; or has been passed to anything or is an embedded/interned string when it will all go to hell...\n",
          "createdAt": "2016-09-14T23:14:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-14T23:17:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzE4NTYwNg=="
        },
        {
          "author": "vancem",
          "body": "While as you say, preventing the mutation of strings using the 'fixed' is not enforced, it is illegal (large parts of the system assume that strings are read-only. including the security system.      If we found anyone doing this (within or outside Microsoft), we would tell them to fix their code.\n\nThere is also a limit to what we will do for compatibility's sake.   Fixing legitimate uses of relatively rare but useful feature is one thing, making broken code work is another.   \n\nWe should not spend effort trying to make the mutation of string case work.   The problem is bad enough without it, and we will always have the 'compat hammer' of allowing users with evil code to use the old string layout (globally).     \n",
          "createdAt": "2016-09-15T16:51:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-16T16:43:05Z",
                "user": "codekaizen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-19T16:25:28Z",
                "user": "svick"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-20T12:10:17Z",
                "user": "jnm2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-08T19:11:09Z",
                "user": "airbreather"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-21T07:58:52Z",
                "user": "ctolkien"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-27T00:37:26Z",
                "user": "snboisen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-17T10:16:26Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHOAQlTtQ=="
          },
          "updatedAt": "2016-09-15T16:51:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzM4NTI3NA=="
        },
        {
          "author": "benaadams",
          "body": "> we will always have the 'compat hammer' of allowing users with evil code to use the old string layout (globally).\n\nSeems fair :smile: And if you are doing it for speed you will likely change you code to work with the new way. Probably would want a string with a `byte*` ctor for stackalloc.\n",
          "createdAt": "2016-09-15T16:56:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-15T16:56:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0NzM4NjY2MQ=="
        },
        {
          "author": "paulomorgado",
          "body": "Will there be explicit conversions between types in the new `string`? `string.AsAscii()`? `string.AsUtf8()`? `string.AsUtf16()`?\n\nIs there a way to know what the type the string is? `string.IsAscii()`? `string.IsUtf8()`? `string.IsUtf16()`?\n\nI don't think `char` can be one or two bytes depending where it came from. Will there be a `string.ToByteArray()`?\n",
          "createdAt": "2016-09-21T20:26:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-21T20:26:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0ODczMjQzMA=="
        },
        {
          "author": "svick",
          "body": "@paulomorgado I think the idea here is to change the implementation details of `string`, not the public interface. I don't see why would you need any of those methods (except maybe for debugging, to ensure some specific string is compact).\n\nAnd `char` is always two bytes, so for example, the indexer would be implemented something like this pseudocode:\n\n``` c#\npublic char this[int index]\n{\n    get\n    {\n        if (type == LATIN1)\n            return (char)bytePointer[index];\n        else \n            return charPointer[index];\n    }\n}\n```\n\nConverting `string` to a byte array can already be done using `Encoding.ASCII.GetBytes()`. I imagine that method would be optimized to just create a copy of the underlying byte array, when applicable.\n",
          "createdAt": "2016-09-21T22:04:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-21T22:04:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0ODc1NjY3OQ=="
        },
        {
          "author": "paulomorgado",
          "body": "@svick, I understood that and I think that's a good idea because it, as usual, will benefit already built applications.\n\nHowever, if the change is made, future code might rely on knowing the difference.\n\nWeb APIs will almost exclusively use UTF-8 (and ASCII for some parts). On the other hand, Windows APIs will use UTF-16. What about mixed applications like Windows applications that use web APIs?\n\nLet's take a feed reader Windows application as an example. All communications with the feed providers will use UTF-8, but all presentation will use UTF-16. Instead of relying on the runtime/framework to do the conversion, the Windows application developer might decide to handle all strings as UTF-16 (because that's what Windows uses) while the developer of the web API might choose to use UTF-8 strings (because that's what the web uses).\n\nIs this such an odd or unusual scenario?\n",
          "createdAt": "2016-09-21T23:18:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-21T23:18:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0ODc3MTIwMA=="
        },
        {
          "author": "vancem",
          "body": "At least initially we would completely hide internal details of the representation from the client of string (thus it will not know if how the string is encoded).   This proposal at least initially would be no NOT have multiple representations but to uniformly use UTF8 internally.   Now maybe we would take that next step (of having multiple possible representations) but first thing first.  First we make it so that we don't HAVE to be UTF16.\n",
          "createdAt": "2016-09-21T23:26:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-21T23:36:46Z",
                "user": "paulomorgado"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-22T03:27:41Z",
                "user": "benaadams"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-22T06:05:50Z",
                "user": "ig-sinicyn"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-19T14:07:20Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAOfHgQ=="
          },
          "updatedAt": "2016-09-21T23:26:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0ODc3MjUxNA=="
        },
        {
          "author": "fanoI",
          "body": "No the thread proposal was not to use UTF-8 that would 3 bytes for a lot of characters that in UFT-16 would be represented with 2 but to use ASCII or Latin1 when possible using 1 byte and to use UTF-16 (2 byte) for anything else.\n\nIf not what we achieve using UTF-8?\n1. A lot of trivial string will occupy more memory that what they do now\n2. Operator [] is never a simply operation\n3. Conversion to Char (that will remain UTF-16) will be never trivial\n",
          "createdAt": "2016-09-23T16:00:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-23T16:01:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTIzMjE0Nw=="
        },
        {
          "author": "jamesqo",
          "body": "@vancem You mention:\n\n> My expectation of how 'fixed' works is that it unconditionally copies the string data into an array of char and points it at that.\n\nI though the whole point of the fixed statement was for better performance, e.g. eliding range checks in hot paths. Copying the entire string to a new char array each time would seem to go against that.\n",
          "createdAt": "2016-09-24T02:36:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T16:47:57Z",
                "user": "whoisj"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T18:22:29Z",
                "user": "pentp"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOADpIdg=="
          },
          "updatedAt": "2016-09-24T02:36:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTM0MDIyNw=="
        },
        {
          "author": "jamesqo",
          "body": "I know I'm a little bit late to the party, but here are my thoughts as someone who has written code for `String`:\n1. This would slow down existing codepaths that convert from other UTF-16 types to String. For example, the `string(char[])` constructor would get a lot slower.\n2. It would require reworking most or all of the Encoding implementations, and double the amount of code for String. Subtle bugs could show up in the UTF-16 implementation of methods, and they would be harder to spot.\n3. Even if there are memory savings from introducing this change, it may still slow down CPU-bound code that processes strings because of an additional switch on `m_type`. This may also prevent String methods from being inlined, or if they are it will introduce more jitted code bloat.\n\nI generally agree, though, that the memory savings we can gain from UTF-8 strings are desirable. But perhaps we should take a look in the other direction:\n- Make UTF-8 strings easier to use. We can add built-in compiler support so people can just write\n\n``` cs\nvar utf8 = u8\"Hello, world!\";\n```\n\nto get the memory benefits.\n- Make Utf8String a built-in type in mscorlib, so people don't have to reference an external library.\n\nApps that benefit significantly from using UTF-8 strings in string processing code can do so, the rest of the time they can stick to UTF-16.\n",
          "createdAt": "2016-09-24T03:03:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-24T09:39:33Z",
                "user": "ig-sinicyn"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T18:23:45Z",
                "user": "pentp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-05-23T09:55:38Z",
                "user": "irwiss"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-23T06:04:36Z",
                "user": "HFadeel"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAQzHVg=="
          },
          "updatedAt": "2016-09-24T03:03:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTM0MTQwMQ=="
        },
        {
          "author": "ig-sinicyn",
          "body": "@jamesqo\n\n+1. And one more moment. Corefxlab has a low-memory solution for dynamic string construction: [System.Text.Formatting](https://github.com/dotnet/corefxlab/wiki/System.Text.Formatting).\nNote that this one covers not only memory consumption for the final strings but allocations and overall performance on operations over strings too (which is much ore important for generic web site/service app).\n\n I don't think there's a reason to keep both. \n",
          "createdAt": "2016-09-24T09:59:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-24T09:59:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTM1NjY4MA=="
        },
        {
          "author": "svick",
          "body": "@jamesqo I'm not sure using `Utf8String` would help much:\n\nRegarding the number of conversions:\n- If you have `char[]`, then you have to convert whether you're using compact `string` or `Utf8String`.\n- If you using a library that takes a `string`, then you have to convert if you're using `Utf8String`, but not if you're using compact `string`.\n\nAs for the amount of code, a lot of that additional code would still be required even with `Utf8String`, just maybe placed somewhere else.\n",
          "createdAt": "2016-09-24T12:14:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-24T15:59:11Z",
                "user": "jnm2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-27T20:20:57Z",
                "user": "evincarofautumn"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-26T01:02:22Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOEAMnLQ=="
          },
          "updatedAt": "2016-09-24T12:14:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTM2MTc5Nw=="
        },
        {
          "author": "jamesqo",
          "body": "> If you have char[], then you have to convert whether you're using compact string or Utf8String.\n\nYes; I was saying if you have a `char[]` today you want to convert to a string, or vice versa, you don't have to perform any conversions between encodings. The proposed change would make existing code that calls `string(char[])`, `ToCharArray`, `CopyTo`, etc. much slower since we can no longer just memcpy the characters.\n",
          "createdAt": "2016-09-24T20:06:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-24T20:06:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTM4NDc0NQ=="
        },
        {
          "author": "bbowyersmyth",
          "body": "If `new string('\\0', length)` continued to return a UTF-16 structured string then that would handle most of the fixed modifications in the system, and probably elsewhere. That doesn't help with ptr increments needing to be `byte` instead of `ushort` on compact strings though.\n\nCompact strings are not a clear win due to the expense of determining if you can create one or not. If dollars are being spent on string I would vote to put them all on UTF-8 rather than the pursuit of better ASCII. They solve the memory issue as well as serialization.\n",
          "createdAt": "2016-09-25T06:16:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-25T06:16:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTQwNTEwOQ=="
        },
        {
          "author": "benaadams",
          "body": "> The proposed change would make existing code that calls `string(char[])` ...\n\nJust create a UTF-16 string for that and use current paths\n",
          "createdAt": "2016-09-25T17:47:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-25T17:47:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTQzNTI5OA=="
        },
        {
          "author": "whoisj",
          "body": "> I though the whole point of the fixed statement was for better performance, e.g. eliding range checks in hot paths. Copying the entire string to a new char array each time would seem to go against that.\n\nYes please. If C# started performing `memcpy` every time I needed a pointer on a `string`, I'd be forced back into \"use native for strings\" model; and while I do love my C, I do found strings something C handles rather poorly (compared to a memory managed language like C#).\n\nAs somebody who is forced into reading and writing UTF8 constantly for compat with Linux binaries, I use UTF8  **A LOT**: I really love 😍 the idea that C# could treat as arbitrarily encoded strings as first class citizens. I'm also a huge believer in [UTF8  everywhere](http://utf8everywhere.org/), if for no other reason than a frighteningly large proportion of developers believe that indexing a `char[]` is akin to indexing a UTF16 encoded `string` (hint they're not).\n\nLastly, there are several important scenarios where having a `fixed (char* ptr = mystring)` is necessary, for both read and write because performance is critical. Let's just consider directory diving for a second:\n\nAllocating a rather largish string up front (say `string buffer = new string('\\0', 4096)`; yes, yes the Windows shell is limited to 255 useful chars), passing the pointer up and own the stack, modifying the value as necessary, and then just using it as a buffer to pass to p/invoke is far preferable to allocating thousands of temporary string objects and just absolutely abusing the heap, garbage collector, and my send of right vs. wrong.\n\nIs there someplace I can official register my opinion that \"`fixed` should **never copy**\"?\n",
          "createdAt": "2016-09-26T17:03:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-26T18:26:51Z",
                "user": "pentp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-19T14:12:37Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAOfIMA=="
          },
          "updatedAt": "2016-09-26T17:03:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTYzMTQzOQ=="
        },
        {
          "author": "whoisj",
          "body": "@ig-sinicyn \n\n> I don't think there's a reason to keep both.\n\nWell, there's the whole Windows compatibility thing. NetFx, on Windows, calls into the Win32 API **a lot** and having to convert to and from `wchar_t` values at every call site would get prohibitively expensive. Ideally, the developer would know which strings are expected to interact with externals which require `wchar_t` and have access to the necessary formats internally, thus minimizing the number of encoding operations performed.\n",
          "createdAt": "2016-09-26T17:06:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-26T17:06:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTYzMjMzMQ=="
        },
        {
          "author": "ig-sinicyn",
          "body": "@whoisj sorry, my previous comment was unclear definitely.\n\nMy point is, if there are good old utf16 strings _and_ there is a specialized library for high-throughput utf8 string construction, why do we need ascii strings at all?\n",
          "createdAt": "2016-09-26T17:37:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-26T17:37:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTY0MDYxMw=="
        },
        {
          "author": "jamesqo",
          "body": "@benaadams `CopyTo`, `ToCharArray` would still suffer for ASCII data. Also I don't know how many strings are created from `char*` or `char[]`, but I'm guessing that just using UTF-16 for all of those would significantly diminish the memory savings from this change.\n",
          "createdAt": "2016-09-26T21:14:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-26T21:14:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTY5OTY2NQ=="
        },
        {
          "author": "whoisj",
          "body": "> why do we need ascii strings at all?\n\nBecause ascii is not encoded beyond byte value equals character. While UTF8 can, and does, correctly encoded compatible ancii characters it also encodes beyond and there are occasions when you need to know that the ascii value is simply that: the ascii value.\n\nAlso, many consoles still rely on [ANSI VT100](http://www.termsys.demon.co.uk/vtansi.htm) strings for colorized output, and having an `Encoding.ASCII` value which performs no value checking or assertions would allow for efficient VT100 usage.\n",
          "createdAt": "2016-09-27T19:57:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-27T19:57:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTk3OTYxNw=="
        },
        {
          "author": "whoisj",
          "body": "@jamesqo I complete agree. However, `string.ToCharArray` isn't very safe as there are many code points outside of the 16-bit range. You should never assume that `char` is a character. Honestly, `char` should likely be a 24-bit type (Unicode is a 20-bit standard after all).\n",
          "createdAt": "2016-09-27T20:00:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-27T20:00:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTk4MDUzNg=="
        },
        {
          "author": "evincarofautumn",
          "body": "To clarify some points here:\n- Strings are immutable; if you’re writing into a string, you’re invoking undefined behavior.\n- The Unicode range needs (almost) 21 bits (0–10FFFF), but even a fixed-width encoding like UTF-32 (where 1 code point = 1 code unit) doesn’t make indexing magically correct, because code points aren’t characters. “UTF-24” would be deathly slow due to misalignment.\n- VT100 codes are representable in regular ASCII. (I’m not sure if you meant to imply they’re not.)\n- This is not a very expensive optimisation; you pay a small CPU cost to compress and decompress strings as needed, and you get a fairly large memory savings. And presumably it would be opt-in.\n- My implementation in Mono doesn’t cause `fixed` to perform a copy—but I had to go and manually patch a bunch of code to either be encoding-aware or use a new encoding-agnostic API. Copying is the only safe option for managing the transition. This is charity, basically; we could just say “unsafe code is unsafe, end of story” and break people’s code freely, but we try not to.\n",
          "createdAt": "2016-09-27T21:03:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-28T05:37:52Z",
                "user": "ig-sinicyn"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2016-09-28T16:04:00Z",
                "user": "whoisj"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-08T19:16:55Z",
                "user": "airbreather"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-02-03T15:25:57Z",
                "user": "mattwarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-27T00:50:34Z",
                "user": "snboisen"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOANrg_A=="
          },
          "updatedAt": "2016-09-27T21:03:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI0OTk5ODA3NQ=="
        },
        {
          "author": "whoisj",
          "body": "> Strings are immutable; if you’re writing into a string, you’re invoking undefined behavior.\n\nIf you're writing to string you \"do not own\" then I agree, otherwise it should be considered unsafe necessary evil. I regularly have to `byte* utf8str = stackalloc byte[strlen];` or similar currently. \n\n> “UTF-24” would be deathly slow due to misalignment.\n\nYes, yes it would. Hence the existence of UTF32, which is a significant memory waster. 😉 \n\n> VT100 codes are representable in regular ASCII. (I’m not sure if you meant to imply they’re not.)\n\nI did not.\n\n> This is not a very expensive optimisation; you pay a small CPU cost to compress and decompress strings as needed, and you get a fairly large memory savings. And presumably it would be opt-in.\n\nI do not disagree, as I've stated I'm all for UTF8 everywhere. However, I'm still of the belief that 16-bits in insufficient for a `char` and having constant time index operators on `string` is basically recommending writing errors for many developers.\n\n> Copying is the only safe option for managing the transition. This is charity, basically; we could just say “unsafe code is unsafe, end of story” and break people’s code freely, but we try not to.\n\nSure. Under the assumption that C# is for part-time developers or developers who care nothing about performance; but then why bother even considering UTF8 strings? Personally, I believe C# needs to get more focused on performance, or at least offer better avenues for developers to write performance critical code in C#.\n\nMaking an operator like `fixed` suddenly perform a `memcpy` of an arbitrarily large allocation seems like a trap and not a feature at all. We should always consider the edge cases here: the 2 GiB string and single `char` string when deciding language features.\n",
          "createdAt": "2016-09-28T16:11:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-28T16:11:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1MDIxNTg5OA=="
        },
        {
          "author": "benaadams",
          "body": "Currently strings are `\\0` terminated if that was same for `byte[]` strings then you could do `fixed byte*` or `fixed char*` for both as the terminator would round its size up to the nearest char if it was odd number and be an ignored overflow (as now) if it was an even number; so both would be safe (though you would have to know type when indexing on the pointer; to know what `Length` means)\n",
          "createdAt": "2016-09-28T16:32:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-09-28T16:33:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1MDIyMTc3Nw=="
        },
        {
          "author": "richardtallent",
          "body": "I'm not such a fan of mucking around in the internals of String, and would be more inclined to support a separate type where compact strings are desirable, with easy conversion back and forth and a compatible interface (e.g., create a common IString interface).\n\nFor the internal implementation of this new type, I would suggest breaking up the string value into runs of 8-bit and 16-bit substrings and storing them in an array of structs, where each struct contains a flag (to determine the number of bytes per character) and a byte array. E.g.:\n\n``` C#\nstruct CompactSubstring {\n   bool IsTwoByte;\n   byte[] Value;\n}\n\npublic class CompactString : IString {\n  CompactSubstring[] substrings;\n}\n```\n\n(Twists on the implementation could involve using a linked list of substrings, or using a String for the 2-byte substrings--lots of pros and cons, I think the above approach would be fastest to copy in memory.)\n\nThis would be nearly as compact as UTF-8 for 7-bit ASCII, and potentially _more_ compact than UTF-8 for strings with characters > 127. It would avoid issues that UTF-8 presents with common methods like Substring, while not being limited strictly to ASCII values.\n\nOperations could be optimized for the 1-byte substrings, improving performance over String for the same values. Some operations could even be faster. For example, if you call IndexOf() for high-order character, it could skip past all 1-byte substrings during the search.\n\nThe implementation could establish a minimum number of characters before it creates a 1-byte substring, which would avoid potential higher overhead when a string flips back and forth between low and high characters.\n",
          "createdAt": "2016-10-13T07:11:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-10-13T07:12:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1MzQzMjk0Nw=="
        },
        {
          "author": "whoisj",
          "body": "> breaking up the string value into runs of 8-bit and 16-bit substrings\n\nAnd breaking with every standard convention on text encoding established, pretty much everywhere? How about interop with native stacks which are expecting `null` terminated runs of encoded bits?\n\nPersonally, I'd love to see C# support 4 kinds of strings: ascii, utf-8, utf-16, and utf-32 strings for maximum compatibility with pretty much every native stack that exists. Everything else is just having fun with structures to be different.\n",
          "createdAt": "2016-10-13T14:07:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-10-13T14:07:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1MzUyMzUyMQ=="
        },
        {
          "author": "richardtallent",
          "body": "@whoisj, as I saw it, the original question was related to how strings are _stored_ in memory (especially related to caching), not so much about how they are passed around.\n\nWhether we use a traditional encoding (as you're suggesting) or a data structure (as I'm suggesting), translation to and from a normal UCS-2 representation would be needed for most native calls, would they not? (I don't deal with a lot of interop, so I plead ignorance on how string values are usually passed to native libraries on various platforms.)\n\nI think the structured approach could result in faster conversions than converting traditional  encodings, because the converter would be able to work with _regions_ of characters (i.e., each of a known width) rather than having to convert one character at a time (as would be required with, say, UTF-8).\n\nWhat I'm suggesting would also be a new, fully-optional type that wouldn't require rewiring the dark innards of System.String.\n",
          "createdAt": "2016-10-13T23:19:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-10-13T23:19:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1MzY2NzIwOQ=="
        },
        {
          "author": "svick",
          "body": "@richardtallent \n\n> What I'm suggesting would also be a new, fully-optional type that wouldn't require rewiring the dark innards of System.String.\n\nSee https://github.com/dotnet/coreclr/issues/7083#issuecomment-245713571 for why changing `string` instead of creating a new type might be preferable.\n",
          "createdAt": "2016-10-14T13:02:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2016-10-14T13:02:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI1Mzc5MzI1Mg=="
        },
        {
          "author": "danmoseley",
          "body": "I've added this to our list of potential post 2.0 investments - this is potentially a BIG one though and it's certainly not going to get a yay/nay right here in this issue. This remains in future and on our radar.",
          "createdAt": "2017-03-06T17:34:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-06T17:39:25Z",
                "user": "mattwarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-06T18:35:50Z",
                "user": "fiigii"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-07T08:58:41Z",
                "user": "davidfowl"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-04T08:10:42Z",
                "user": "fanoI"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-15T22:15:42Z",
                "user": "airbreather"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOA1LzHA=="
          },
          "updatedAt": "2017-03-06T17:47:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4NDQ3MDYyNg=="
        },
        {
          "author": "fanoI",
          "body": "I'm asking myself but to make more compact the String type the problem does not lie in the Char type in reality? It would be possible to encode Char in UTF-8?\r\n\r\nDoing this we get:\r\n\r\n1. ASCII character occupy effectively 1 Byte\r\n2. Latin1 characters (as 'è') will occupy 2 Bytes\r\n3. It will permit to express characters that now are not accepted as '丽' (0xf0afa080)\r\n4. String does not change will remains the array of Characters that is now the fact that Char is now encoded in UTF-8 could be considered an implementation detail (fixed char * buf = str will continue to work without doing copy, string encoding conversion will be equally fast it should not make any difference between doing UFT-16 ---> CP437 and UFT-8 --> CP437, a for on a string will work without surprises yet if the string contains weird characters as '丽')\r\n\r\nHow to express this new Char in the way that effectively occupies really 1 Byte, 2 Byte, 3 Byte... as the character code is? A stack allocated array could do this?\r\n\r\n```cs\r\nstruct Char\r\n{\r\n        Char value;\r\n        fixed Byte data[]; // this imply that fixed could used in \"safe\" context\r\n\r\n        // Used by compiler to create a Char literal\r\n        unsafe public Char (byte *data, int len) \r\n        {\r\n                this.data = stackalloc(len);\r\n                this.data = data;\r\n        }\r\n}\r\n```\r\n\r\nProbably there is a motivation because no one has taken this route (Java, Pithon) and instead changed the String to not be an array of characters anymore.",
          "createdAt": "2017-04-12T09:35:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T09:35:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzUyNTA0NA=="
        },
        {
          "author": "fanoI",
          "body": "On second though the field 'data' could be declared as ``Span<byte>`` so we have safe code and the effect of it to have size 1 byte, 2 bytes, 3 bytes or 4 bytes as needed for the Char represented.",
          "createdAt": "2017-04-12T15:31:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T15:45:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzYxNjAyMA=="
        },
        {
          "author": "jnm2",
          "body": "@fanoI I do not believe the CLR has a facility for two instances of the same type to be different sizes. And we definitely wouldn't want to use indirection to the heap.",
          "createdAt": "2017-04-12T16:40:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T16:42:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzYzNzUwNw=="
        },
        {
          "author": "whoisj",
          "body": "Use of `Span<byte>` seems to be most creative solution. 😄 \r\n\r\nPerhaps we'll need to make `char` 32-bits like it is in many Linux projects. :persevere:",
          "createdAt": "2017-04-12T17:11:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T17:11:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzY0NjEzNA=="
        },
        {
          "author": "mikedn",
          "body": "> How to express this new Char in the way that effectively occupies really 1 Byte, 2 Byte, 3 Byte... as the character code is? A stack allocated array could do this?\r\n\r\nWell, it's quite simple: you don't. If changing `char` was actually a possibility then the only reasonable option would be to make it 4 bytes in size so it can actually represent a code point.\r\n\r\nAnyway, any attempt at changing the `String` encoding in such a way that chars are no longer fixed size is doomed to fail.",
          "createdAt": "2017-04-12T17:54:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-12T17:55:21Z",
                "user": "jamesqo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-19T14:25:57Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAOfJ4A=="
          },
          "updatedAt": "2017-04-12T17:54:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzY1NzYyMw=="
        },
        {
          "author": "fanoI",
          "body": "If I understood well how a Span works effectively lives in the stack and could have any size is this correct?\r\nI'm unsure if a ``Span<byte> = { 0xf0, 0xaf, 0xa0, 0x80 }`` will really occupy 4 bytes into the stack or if there is overhead.\r\n\r\n@whoisj making Char 4 byte will be not be useful for this proposal to make String more compacts they will become more larges indeed and for interop / unsafe scenario seems clear that the useful property of .Net that a String is simply an array of Char should be maintained (fixed should never copy!).",
          "createdAt": "2017-04-12T19:17:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T19:18:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzY3OTczNA=="
        },
        {
          "author": "whoisj",
          "body": "> making Char 4 byte will be not be useful for this proposal to make ...\r\n\r\nYes yes, of course - I was being pedantic. 😏 ",
          "createdAt": "2017-04-12T19:18:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T19:18:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzY4MDAzMw=="
        },
        {
          "author": "mikedn",
          "body": "> If I understood well how a Span works effectively lives in the stack and could have any size is this correct?\r\n\r\nLike pretty much all types Span has a fixed size. In general, the idea of a variable sized type is pretty bizarre.\r\n\r\n> seems clear that the useful property of .Net that a String is simply an array of Char should be maintained (fixed should never copy!).\r\n\r\nAnd that implies that char has to have fixed size. You can't have an array of variable sized types.",
          "createdAt": "2017-04-12T19:55:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-12T19:55:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MzY4OTM4MQ=="
        },
        {
          "author": "markusschaber",
          "body": "Just my few thoughts:\r\n\r\n1. For the question whether to use ASCII or LATIN-1 for the \"byte strings\": The type tag could differentiate three types (ASCII, LATIN-1 and UTF-16). Thus, LATIN-1 could still profit from the smaller storage, while we could also exploit the fact that ASCII is an UTF-8 subset. We could even distinguish a fourth kind for Strings which exceed LATIN-1, but do stay within the BMP (and thus, have no surrogates).\r\n\r\n2. For comparision: Python strings are also immutable, but they have a different internal representation. The details are too much to rehash them here, it's all described nicely at the PEP 393: https://www.python.org/dev/peps/pep-0393/  - while I think it cannot be applied to .NET in a 1:1 fashion, some of the ideas could provide useful inspiration... :-)\r\n\r\n3. Using an \"indirect\" API (where the string contents are allocated in a separate heap block) might have advantages for String Slicing (like \"substring\"), as we could reference the same backing store (strings are immutable, after all...)",
          "createdAt": "2017-10-19T14:47:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-19T14:51:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNzkzMTU1NA=="
        },
        {
          "author": "dotnet-policy-service",
          "body": "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-12-26T00:01:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-26T00:01:03Z",
          "id": "IC_kwDODI9FZc6YtXPY"
        },
        {
          "author": "phuclv90",
          "body": "Now in [C#11](https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/) we have [UTF-8 string literals](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/utf8-string-literals) which implicitly converts to ReadOnlySpan like some comments above. It'll still be nice if it becomes a .NET feature instead of C# feature",
          "createdAt": "2024-12-26T02:56:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-13T16:34:10Z",
                "user": "whoisj"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOECOOTQ=="
          },
          "updatedAt": "2024-12-26T02:56:05Z",
          "id": "IC_kwDODI9FZc6YtpBs"
        }
      ],
      "totalCount": 78,
      "endCursor": "Y3Vyc29yOnYyOpHODqqxxw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/6612",
    "title": "Compact String implementation"
  },
  {
    "author": "clairernovotny",
    "labels": [
      "api-needs-work",
      "area-Meta"
    ],
    "createdAt": "2017-01-05T15:34:27Z",
    "body": "Moving here from https://github.com/Reactive-Extensions/Rx.NET/issues/309\r\n\r\nDisposbles have a lot of uses in many libraries. Many libraries have created their own management and disposable aggregates to combine multiple disposable's. There might be an opportunity to move some of this logic in to CoreFX as a common library. \r\n\r\nA few questions:\r\n1. Does this belong in CoreFX at all?\r\n2. Should it be in a new library, `System.Disposables` or does it fit into an existing library?\r\n\r\n/cc @ghuntley @mattpodwysocki  @rxdave ",
    "number": 19822,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T17:41:36Z",
          "user": "jnm2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T19:11:21Z",
          "user": "ButchersBoy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T19:15:14Z",
          "user": "pmbanka"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T19:15:29Z",
          "user": "keichinger"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T19:20:46Z",
          "user": "moswald"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T19:52:48Z",
          "user": "jamesqo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-05T21:50:35Z",
          "user": "rkeithhill"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-06T00:06:30Z",
          "user": "RxDave"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-06T09:35:18Z",
          "user": "flagbug"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-06T11:19:49Z",
          "user": "dmunch"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-06T12:51:16Z",
          "user": "zabulus"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-01-07T17:02:19Z",
          "user": "dasMulli"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-04-06T23:22:59Z",
          "user": "ghuntley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-05-24T15:14:09Z",
          "user": "kronic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-11-02T09:55:51Z",
          "user": "MatthewKing"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-02-13T21:49:54Z",
          "user": "charlesroddie"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-11-05T08:28:10Z",
          "user": "hubuk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-10-16T08:39:25Z",
          "user": "marco6"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-29T06:35:40Z",
          "user": "henry701"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-12T12:42:08Z",
          "user": "alex6dj"
        },
        {
          "content": "EYES",
          "createdAt": "2024-09-03T09:14:52Z",
          "user": "fowl2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-03T13:42:03Z",
          "user": "julealgon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-24T08:48:27Z",
          "user": "denisbredikhin"
        }
      ],
      "totalCount": 23,
      "endCursor": "Y3Vyc29yOnYyOpHODEmbKQ=="
    },
    "updatedAt": "2024-09-06T08:15:24Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "ButchersBoy",
          "body": ":+1: to this.  Disposable implementations are useful on their own, outside of a RX setup.  I have libraries where I have purposefully avoided a dependency on RX, but want the various disposables, and have ended up duplicating them internally.\r\n\r\nI think they should be \"promoted\".\r\n\r\n",
          "createdAt": "2017-01-05T19:11:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-05T19:11:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MDczMDM1Ng=="
        },
        {
          "author": "RxDave",
          "body": "It may also be worth doing another round of optimization through the types. I noticed that often the disposable objects are a major source of memory consumption when using Rx extensively. Perhaps there's opportunities for internal improvements? E.g., coalescing CompositeDisposables to prevent multiple List<T> instances floating around? Not sure what's actually possible here, but worth a look?",
          "createdAt": "2017-01-06T00:08:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-06T09:35:36Z",
                "user": "flagbug"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-07T22:20:49Z",
                "user": "clairernovotny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-29T06:35:50Z",
                "user": "henry701"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-03T13:42:26Z",
                "user": "julealgon"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODwzrFg=="
          },
          "updatedAt": "2017-01-06T00:08:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MDc5NDk0Mw=="
        },
        {
          "author": "jpierson",
          "body": "I've created classes for this purpose is several projects before ever using RX and would readily use the proposed examples if they were made available.",
          "createdAt": "2017-01-06T11:45:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-06T11:45:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MDg4ODQ1Mw=="
        },
        {
          "author": "tarekgh",
          "body": "@onovotny it will be helpful if you can have the initial proposal so we can start the discussion on the deign.  \r\n\r\nCC @KrzysztofCwalina @terrajobst ",
          "createdAt": "2017-01-06T16:24:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-06T16:24:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MDk0MTA5MA=="
        },
        {
          "author": "clairernovotny",
          "body": "@tarekgh what needs to be there for the initial proposal? There are a few types already in existence in Rx.NET that have been well tested and complete from an API perspective. There may be room for internal optimizations as @RxDave suggests, but that's an implementation detail.\r\n\r\nThe types are here currently: https://github.com/Reactive-Extensions/Rx.NET/tree/v3.1.1/Rx.NET/Source/System.Reactive.Core/Reactive/Disposables\r\n\r\n- AnonymousDisposable\r\n- BooleanDisposable\r\n- CancellationDisposable\r\n- CompositeDisposable\r\n- ContextDisposable\r\n- DefaultDisposable\r\n- Disposable\r\n- MultipleAssignmentDisposable\r\n- RefCountDisposable\r\n- ScheduledDisposable\r\n- SerialDisposable\r\n- SingleAssignmentDisposable\r\n- StableCompositeDisposable\r\n- ICancelable\r\n\r\nThanks\r\n\r\n",
          "createdAt": "2017-01-07T15:51:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-07T15:57:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTA5MTI1Nw=="
        },
        {
          "author": "tarekgh",
          "body": "thanks @onovotny \r\n\r\n> what needs to be there for the initial proposal?\r\n\r\nwe need to list all types/APIs we need to expose, something like:\r\n\r\n```C#\r\n    public sealed class AnonymousDisposable : ICancelable\r\n    {\r\n        public AnonymousDisposable(Action dispose)\r\n        {\r\n        }\r\n\r\n        public bool IsDisposed\r\n        {\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nand mention briefly the value having these types and how is going to be used.",
          "createdAt": "2017-01-07T20:20:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-07T20:21:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTEwNzUzNA=="
        },
        {
          "author": "clairernovotny",
          "body": "@tarekgh is there an easier way to do this given that this is already \"approved\" API in `System.Reactive.Disposables`? Do we need to copy the API of a dozen types in here (if yes, fine, just seems redundant given that all the types are already in the Rx.NET repo). By \"approved,\" I mean that the Rx team already spent considerable time designing these and they've been stable for years. The types in the repo are also already documented.\r\n\r\nThis is more about \"promoting\" the existing types/API from `System.Reactive.Core` into somewhere within CoreFx.",
          "createdAt": "2017-01-07T20:46:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-10T15:47:35Z",
                "user": "jpierson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-11T13:14:33Z",
                "user": "ButchersBoy"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAF7ySA=="
          },
          "updatedAt": "2017-01-07T20:54:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTEwOTA4Nw=="
        },
        {
          "author": "tarekgh",
          "body": "@terrajobst could you please advise how we can proceed with this request? \r\n\r\n@onovotny  is there any other docs or pointers rather than the code for these types?",
          "createdAt": "2017-01-07T20:57:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-07T20:57:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTEwOTY4NQ=="
        },
        {
          "author": "clairernovotny",
          "body": "The docs are on MSDN \r\nhttps://msdn.microsoft.com/en-us/library/system.reactive.disposables.aspx\r\nand\r\nhttp://introtorx.com/Content/v1.0.10621.0/20_Disposables.html#Disposables\r\n\r\nDoes that help?",
          "createdAt": "2017-01-07T22:09:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-07T22:32:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTExMzYxNg=="
        },
        {
          "author": "RxDave",
          "body": "In response to @tarekgh \r\n> and mention briefly the value having these types and how is going to be used.\r\n\r\nThe `IDisposable` interface (the disposable pattern) has been for quite some time ubiquitously used, in part, as a representation of any behavior that has a scoped lifetime. It's not just about freeing memory. The elegance of the `using` keyword in C# for synchronous operations, and the fact that so many things easily map onto the disposable pattern, has certainly helped with this trend I'm sure. But given the prevalence of asynchrony in modern programming, the disposable pattern has found yet another usage that's equally important. Rather than the `using` keyword, we often find ourselves having to store disposables in a field to be disposed at a later time, asynchronously. It turns out that there are some common patterns in this space and the disposable types provided by Rx reify them. They make the composition of disposables much simpler.\r\n\r\nAlthough these types are first-class in Rx, where they're mostly used as composite subscriptions to observables, they're often used outside of Rx as well; e.g., for compositing a list of disposables together into a single disposable that can be disposed in a single call (especially useful when the order in which they are disposed matters, such as when releasing COM objects with dependencies, or when disposing has side effects), for exposing a disposable proxy before the object that actually needs to be disposed is created (such as the eager disposal of an object that will be created by awaiting an asynchronous operation), for disposing of one object and creating its replacement as an atomic operation (such as when an asynchronous request is canceled and replaced with another request, such that the result of the previous request, if any, will be discarded; e.g., when a user types in a search box, it cancels any previous search that may still be in progress and replaces it with the latest search operation instead), among other uses.\r\n\r\n* **AnonymousDisposable**\r\nAllows for creating an `IDisposable` implementation out of a side-effecting delegate. Perhaps this type shouldn't be exposed publicly; use the `Disposable` type instead (see below).\r\n* **BooleanDisposable**\r\nAssociates the state of a disposable with a Boolean value. It's useful in synchronous scenarios or where race conditions are acceptable and you just need to check whether a disposable has been disposed as a part of being composed with other disposables.\r\n* **CancellationDisposable**\r\nAssociates the state of a disposable with a `CancellationToken`. Very useful for interoperating with `Task`-based asynchrony; e.g., to compose the cancellation of asynchronous operations into a single disposable object. Once you have a `CancellationDisposable` representing one or more async operations, you can then use the other disposable types to compose them, in varying ways, with other objects and operations that share the same lifetime scope, ultimately hiding all of the complexity of cancellation behind a single call to `Dispose`.\r\n* **CompositeDisposable**\r\nAssociates disposables that have the same scope into a mutable disposable list. One of the most commonly used disposable types.\r\n* **ContextDisposable**\r\nAssociates a `SynchronizationContext`-affine disposable with its context and marshals calls to `Dispose` onto the context.\r\n* **DefaultDisposable**\r\nInternal type.\r\n* **Disposable**\r\nA static class that provides static factory methods for creating disposables from delegates. See `AnonymousDisposable` above for details.\r\n* **MultipleAssignmentDisposable**\r\nRepresents a disposable that can be replaced multiple times with different underlying behaviors. It's useful for when you need to swap a disposable and simply discard the previous.\r\n* **RefCountDisposable**\r\nRegisters each use of the disposable and only disposes of the underlying disposable when the reference count drops to 0. It's useful for when the side effects of disposing potentially need to be shared among multiple disposers, like when multiple windows are opened and share some disposable resource, and as each window closes it elects to dispose of the shared resource, but the resource must only be disposed when the final window closes.\r\n* **ScheduledDisposable**\r\nAssociates an `IScheduler`-affine disposable with its scheduler and marshals calls to `Dispose` through the scheduler (similar to `ContextDisposable`). The scheduler implementation is specifically defined by Rx; however, it's possible that a case can be made to move Rx's schedulers platform to CoreFx as well.\r\n* **SerialDisposable**\r\nSimilar to `MultipleAssignmentDisposable`, it represents a disposable that can be replaced multiple times with different underlying behaviors; however, the previous disposable is disposed upon replacement, atomically. It's useful for when you need to swap a disposable and ensure that the previous disposable is actually disposed, such as cancelling an ongoing async operation while replacing it with a fresh operation. One of the most commonly used disposable types.\r\n* **SingleAssignmentDisposable**\r\nRepresents lazy assignment to support eager disposal. It's useful when the underlying disposable hasn't been created yet, but the consumer needs a reference to it now, and in fact may dispose it before it's actually created. One of the most commonly used disposable types.\r\n* **StableCompositeDisposable**\r\nSimilar to `CompositeDisposable`, but read-only.\r\n* **ICancelable**\r\nCouples the `IDisposable` interface with a Boolean `IsDisposed` property. The simplest example is `BooleanDisposable`.",
          "createdAt": "2017-01-07T22:33:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-07T22:39:46Z",
                "user": "clairernovotny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-08T02:34:23Z",
                "user": "jnm2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-01-08T23:03:48Z",
                "user": "kentcb"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-02-08T14:56:24Z",
                "user": "danielcweber"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-13T12:36:57Z",
                "user": "hsorbo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-09T19:30:06Z",
                "user": "jamesqo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-11-16T20:11:01Z",
                "user": "casperOne"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-09T08:32:29Z",
                "user": "mbreckon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-03T09:16:40Z",
                "user": "fowl2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-03T13:43:35Z",
                "user": "julealgon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-10-15T13:20:20Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 11,
            "endCursor": "Y3Vyc29yOnYyOpHOD2No0w=="
          },
          "updatedAt": "2017-01-07T22:33:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTExNDg1Mg=="
        },
        {
          "author": "tarekgh",
          "body": "great! thanks @RxDave and @onovotny I will mark this issue as ready for review then.",
          "createdAt": "2017-01-09T16:22:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-01-09T16:22:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTMzMDIwMw=="
        },
        {
          "author": "jpierson",
          "body": "After considering this further it makes more sense to me to separate these Disposable types into their own library package instead of trying to pull them into a core framework. My original reason for agreeing with the proposal was to be able to use these disposable patterns without requiring a dependency Reactive Extensions because they are useful on their own. Are there any other strong benefits to making these part of CoreFx?",
          "createdAt": "2017-01-10T15:53:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-02-03T06:44:55Z",
                "user": "jkotas"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAGiylw=="
          },
          "updatedAt": "2017-01-10T15:53:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3MTYxMjkwNQ=="
        },
        {
          "author": "terrajobst",
          "body": "This is a great issue. We need to approach this space more holistically. I don't think we want to add all functionality like this (area that is large enough to warrant its own library but doesn't need to be part of the platform layer) to CoreFX. On the other hand, we don't want to a bunch of random extensions with inconsistent names on top either. It would be nice if had some sort of agreed up and still reviewed set of platform extensions/community projects that can sit above CoreFX. I'll take a stab at a proposal and share it later.",
          "createdAt": "2017-02-07T18:52:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-02-07T23:22:00Z",
                "user": "RxDave"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-02-25T11:44:02Z",
                "user": "nietras"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-05T06:12:41Z",
                "user": "jpierson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-06T23:22:40Z",
                "user": "ghuntley"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAIXouQ=="
          },
          "updatedAt": "2017-02-07T18:52:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3ODEwMjk0Ng=="
        },
        {
          "author": "joperezr",
          "body": "@terrajobst looks like this one has been stale for a while. Is corefxlab a reasonable place for these kind of APIs? If not, would you suggest creating its own repo under dotnet, or now that we are getting some extensions in runtime repo perhaps we can find a good fit for these?",
          "createdAt": "2020-02-28T17:53:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-02-28T17:53:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5MjY0OTQzNQ=="
        },
        {
          "author": "mbreckon",
          "body": "I've been beginning to use Reactive Extensions recently and was pleasantly surprised to see the various xxxxDisposable types as I've previously had to write my own (albeit much simpler) when simplifying objects that use a number of IDisposable objects (e.g. 3D graphics in engineering applications). I came here to see if there were any plans to build these APIs into the system .NET libraries.\r\n\r\nWhat would need to happen for this to become reality? Is there anything I can help out with? ",
          "createdAt": "2020-05-26T12:37:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-26T12:37:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzMzk5NzQ1OQ=="
        },
        {
          "author": "dazinator",
          "body": "I am forever creating these two disposables in varius projects - and it's frustrating that I typically copy paste them around. I could create a nuget package of course but for just two classes.. and it's usually always at a point where I just don't have time, as I hit the need for these whils tin the middle of trying to glue stuff together - so dont have time to drop what I am doing and go create a dedicated nuget package projject and solve this properly - so the copy paste continues!\r\n\r\n- ActionOnDispose (e.g call an action delegate when dispose is called)\r\n- CompositeDisposable (as explained already)\r\n\r\nI am not sure about the other RX disposables mentioned and how general purpose they are. I could see the cancellation token one pootentially being useful but -- With an `ActionOnDispose` it seems pretty trivial to capture and fire the cancellation token within the Action lambda.. I certainly think the above two disposables should be built in to the framework.\r\n\r\n\r\nI also note that react's `CompositeDisposable` is mutable, where as I have only ever typically required immutable CompositeDisposable's which are a lot simpler in implementation - i.e a fixed array of the IDisposable's are passed into the construtor and this is fixed for the lifetime ofo the composite. I am not sure if it warrants having an immutable version plus a mutable one like RX's, or whether the mutable one should be used for all cases..\r\n\r\nFinally there is now also `IAsyncDisposable` to coonsider in the same way.\r\n",
          "createdAt": "2023-04-19T21:48:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-19T21:57:10Z",
          "id": "IC_kwDODI9FZc5aU5r-"
        },
        {
          "author": "fowl2",
          "body": "Prior (and contemporary) art from the JavaScript world: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management\r\n\r\nLooks like they settled on just one* new type `DisposableStack` which would be equivalent to `CompositeDisposable` with some of the other [fun functionally built in](https://esfx.js.org/esfx/api/disposable/disposablestack.html). I could do a more thorough analysis if it helps. \r\n\r\n*ok two: `AsyncDisposableStack`. I imagine we’d want to update this with async too)",
          "createdAt": "2024-09-03T09:25:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-03T09:27:12Z",
          "id": "IC_kwDODI9FZc6KpIGA"
        },
        {
          "author": "julealgon",
          "body": "What about putting these in the `Microsoft.Extensions.Primitives` library? They are super general purpose and domain-agnostic, so it makes sense to me to have them there instead of in a separate, dedicated library.",
          "createdAt": "2024-09-03T13:45:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-03T13:45:51Z",
          "id": "IC_kwDODI9FZc6KrKpP"
        },
        {
          "author": "dazinator",
          "body": "> Prior (and contemporary) art from the JavaScript world: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management\r\n> \r\n> Looks like they settled on just one* new type `DisposableStack` which would be equivalent to `CompositeDisposable` with some of the other [fun functionally built in](https://esfx.js.org/esfx/api/disposable/disposablestack.html). I could do a more thorough analysis if it helps.\r\n> \r\n> *ok two: `AsyncDisposableStack`. I imagine we’d want to update this with async too)\r\n\r\nThese align with the two common cases I mentioned in an earlier comment (CompositeDisposable and ActionOnDispose).. if the framework aligns on this as a baseline ai think this would be great. The other types of disposables from RX could be considered on a case by case basis.",
          "createdAt": "2024-09-06T07:54:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-06T08:15:24Z",
          "id": "IC_kwDODI9FZc6LFdqV"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHOixXalQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/19822",
    "title": "Proposal: Disposables in CoreFx: SerialDisposable, CompositeDisposable, etc"
  },
  {
    "author": "parjong",
    "labels": [
      "design-discussion",
      "arch-x86",
      "area-Meta",
      "os-linux",
      "os-tizen",
      "needs-further-triage"
    ],
    "createdAt": "2017-02-02T05:08:05Z",
    "body": "This issue for tracking x86/Linux progress with respect to the regression tests.\r\n\r\nHere is the current status on Ubuntu 14.04 Docker Container (on Ubuntu 16.04 x64) and [full result](https://github.com/dotnet/coreclr/files/746858/coreclrtests.txt):\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  : \r\n# Tests Discovered : 7027\r\n# Passed           : 5592\r\n# Failed           : 1156\r\n# Skipped          : 279\r\n=======================\r\n```\r\n\r\nThe above result comes from 63607d8e657 with https://github.com/parjong/coreclr/tree/fix/x86_4byte_alignment and dotnet/coreclr#9261.\r\n\r\n",
    "number": 7335,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2017-02-02T06:42:07Z",
          "user": "jkotas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-02T06:47:44Z",
          "user": "wateret"
        },
        {
          "content": "HEART",
          "createdAt": "2017-02-02T07:37:58Z",
          "user": "shahid-pk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-02T07:37:58Z",
          "user": "shahid-pk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-02T09:26:51Z",
          "user": "hughbe"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-02T09:40:36Z",
          "user": "seanshpark"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-02T09:48:55Z",
          "user": "lemmaa"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-03T08:23:48Z",
          "user": "lucenticus"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-03T08:30:10Z",
          "user": "egavrin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-02-22T23:24:53Z",
          "user": "BruceForstall"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-04-19T07:08:17Z",
          "user": "kse300489"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-08-08T07:36:26Z",
          "user": "Unknown6656"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-10-08T15:09:34Z",
          "user": "realityexists"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-06-20T06:40:33Z",
          "user": "xsoheilalizadeh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-08-21T18:34:44Z",
          "user": "cocowalla"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-08-31T01:09:31Z",
          "user": "rkeithhill"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-12-05T11:22:02Z",
          "user": "x2bool"
        },
        {
          "content": "HEART",
          "createdAt": "2018-12-05T11:22:04Z",
          "user": "x2bool"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-04-12T17:02:27Z",
          "user": "chadbr"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-04-12T17:06:57Z",
          "user": "weltkante"
        },
        {
          "content": "HEART",
          "createdAt": "2019-08-02T09:48:18Z",
          "user": "cocowalla"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-25T12:38:37Z",
          "user": "thebf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-29T13:17:56Z",
          "user": "jaksonlin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-13T18:49:54Z",
          "user": "dhcgn"
        },
        {
          "content": "HEART",
          "createdAt": "2020-04-13T18:49:55Z",
          "user": "dhcgn"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-15T23:45:47Z",
          "user": "wixyer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-17T02:20:41Z",
          "user": "sos-dll"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-27T18:30:42Z",
          "user": "Mrucznik"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-13T14:04:43Z",
          "user": "markusschaber"
        },
        {
          "content": "HEART",
          "createdAt": "2020-08-14T09:30:22Z",
          "user": "SteppeHunter"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-14T17:55:48Z",
          "user": "ntindle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-26T18:53:21Z",
          "user": "danielb7390"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-13T21:51:32Z",
          "user": "danielchalmers"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-27T18:14:54Z",
          "user": "ixtreon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-01T20:53:56Z",
          "user": "ZeWaka"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-21T13:46:19Z",
          "user": "MrSimsure"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-09T09:59:05Z",
          "user": "CiprianN23"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-14T11:32:17Z",
          "user": "BrunoJuchli"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-22T03:13:34Z",
          "user": "vscunha"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-20T21:32:32Z",
          "user": "chillaxdev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-22T17:40:34Z",
          "user": "Jayman2000"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-12T17:49:17Z",
          "user": "diademoff"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-26T04:01:02Z",
          "user": "Guy-L"
        },
        {
          "content": "HEART",
          "createdAt": "2025-04-26T04:01:02Z",
          "user": "Guy-L"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-28T18:53:34Z",
          "user": "YohanSciubukgian"
        }
      ],
      "totalCount": 45,
      "endCursor": "Y3Vyc29yOnYyOpHOBA7y-g=="
    },
    "updatedAt": "2025-08-28T11:50:42Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "parjong",
          "body": "\\CC @seanshpark @wateret ",
          "createdAt": "2017-02-02T05:10:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-02T05:10:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3Njg3MDA5MA=="
        },
        {
          "author": "parjong",
          "body": "63607d8e657 (with alignment workaround) shows the following result:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 5892\r\n# Failed           : 856\r\n# Skipped          : 279\r\n=======================\r\n53 minutes and 59 seconds taken to run CoreCLR tests.\r\n```\r\n\r\ndotnet/coreclr#9121 seems to resolve GC and JIT related failures.",
          "createdAt": "2017-02-03T00:22:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-03T01:20:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3NzEyODI3NQ=="
        },
        {
          "author": "parjong",
          "body": "Here is the result from 2ecadf5d1ce (without any additional patch):\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 5874\r\n# Failed           : 874\r\n# Skipped          : 279\r\n=======================\r\n65 minutes and 29 seconds taken to run CoreCLR tests.\r\n```\r\nRecently merged dotnet/coreclr#8849 eliminates the need for alignment workaround. There is a small increase in the number of failed tests, and most of them are caused by stack smashing. Incorrect funclet prolog/epilog may cause this stack smashing issue.",
          "createdAt": "2017-02-10T00:30:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-10T00:32:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI3ODgyMTcxNQ=="
        },
        {
          "author": "janvorli",
          "body": "@parjong, @seanshpark, @wateret - I was trying to build and run dotnet for x86 Linux today, using the current state of the master branch, but I was unable to make it work. So I was wondering if you could share a list of steps to successfuly build and gather all parts of the dotnet core the way you do it. \r\nI have tried to build the coreclr and corefx native binaries both using the cross build and a build inside of a docker container with x86 ubuntu 14.04 (running the container on x64 Ubuntu 14.04). I have built the corefx managed assemblies on my x64 ubuntu. \r\nWhen I try to run a simple hello world like app inside of the docker container, I get a strange assertion in the native runtime even before the coreclr_initialize completes.",
          "createdAt": "2017-02-17T00:39:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T00:39:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxMjk3NA=="
        },
        {
          "author": "parjong",
          "body": "@janvorli It is a bit strange. I have used the same environment (docker container from docker image imported from x86/rootfs in Core CLR). Could you let me know the assert failure that you got?",
          "createdAt": "2017-02-17T00:59:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T00:59:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxNjUzMA=="
        },
        {
          "author": "parjong",
          "body": "And, I am currently using a bit old Core FX (although I am not sure whether it is relevant).",
          "createdAt": "2017-02-17T01:00:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:00:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxNjcyNA=="
        },
        {
          "author": "janvorli",
          "body": "The assert and call stack is below. I guess it has to do something with how I've collected all the files. I have created the docker image myself from vanilla Ubuntu 14.04 x86 image and installed all the dependencies, clang, etc. \r\nCould you please write down a step by step list of how to get a working environment from scratch? \r\n```\r\nAssert failure(PID 59096 [0x0000e6d8], Thread: 59096 [0xe6d8]): Consistency check failed: Illegal null pointerFAILED: ok\r\n         FAILED: CheckPointer(pMT)\r\n                /home/janvorli/git/coreclr/src/vm/appdomain.cpp, line: 13816\r\n    File: /home/janvorli/git/coreclr/src/inc/check.h Line: 373\r\n    Image: /home/janvorli/dotnet/test/corerun\r\n\r\n#0  DBG_DebugBreak () at debugbreak.S:114\r\ndotnet/coreclr#1  0xf7899a88 in DebugBreak () at /home/janvorli/git/coreclr/src/pal/src/debug/debug.cpp:404\r\ndotnet/coreclr#2  0xf6ce977c in CHECK::Setup (this=0xffffbfa4, message=0xf79daf30 \"Illegal null pointer\", condition=0xf7a6ba26 \"ok\",\r\n    file=0xf79daf45 \"/home/janvorli/git/coreclr/src/inc/check.h\", line=373) at /home/janvorli/git/coreclr/src/utilcode/check.cpp:218\r\ndotnet/coreclr#3  0xf6e3e308 in CheckPointer<MethodTable> (o=0x0, ok=NULL_NOT_OK) at /home/janvorli/git/coreclr/src/inc/check.h:373\r\ndotnet/coreclr#4  0xf7226147 in BaseDomain::LookupType (this=0xf7c9f940 <g_pSharedDomainMemory>, id=60) at /home/janvorli/git/coreclr/src/vm/appdomain.cpp:13816\r\ndotnet/coreclr#5  0xf72260f3 in BaseDomain::LookupType (this=0x8077208, id=60) at /home/janvorli/git/coreclr/src/vm/appdomain.cpp:13813\r\ndotnet/coreclr#6  0xf6f4d993 in VSD_ResolveWorker (pTransitionBlock=0xffffc324, siteAddrForRegisterIndirect=354570792, token=3979264)\r\n    at /home/janvorli/git/coreclr/src/vm/virtualcallstub.cpp:1579\r\ndotnet/coreclr#7  0xf71f349a in ResolveWorkerAsmStub () at asmhelpers.S:1041\r\ndotnet/coreclr#8  0xffffc324 in ?? ()\r\ndotnet/coreclr#9  0xf4fd0222 in ?? ()\r\ndotnet/coreclr#10 0xf633b14c in ?? ()\r\ndotnet/coreclr#11 0xf71f31ab in CallDescrWorkerInternal () at asmhelpers.S:442\r\ndotnet/coreclr#12 0xf6f85d08 in CallDescrWorker (pCallDescrData=0xffffcba8) at /home/janvorli/git/coreclr/src/vm/callhelpers.cpp:146\r\ndotnet/coreclr#13 0xf6f85ab9 in CallDescrWorkerWithHandler (pCallDescrData=0xffffcba8, fCriticalCall=0) at /home/janvorli/git/coreclr/src/vm/callhelpers.cpp:89\r\ndotnet/coreclr#14 0xf6f87a2b in MethodDescCallSite::CallTargetWorker (this=0xffffcdd8, pArguments=0xffffcf00, pReturnValue=0xffffcc18, cbReturnValue=8)\r\n    at /home/janvorli/git/coreclr/src/vm/callhelpers.cpp:656\r\ndotnet/coreclr#15 0xf6d56064 in MethodDescCallSite::Call_RetOBJECTREF (this=0xffffcdd8, pArguments=0xffffcf00) at /home/janvorli/git/coreclr/src/vm/callhelpers.h:436\r\ndotnet/coreclr#16 0xf7205fd4 in AppDomain::DoSetup (this=0x8077208, setupInfo=0xffffd2f8) at /home/janvorli/git/coreclr/src/vm/appdomain.cpp:5735\r\ndotnet/coreclr#17 0xf6d4a3cc in CorHost2::_CreateAppDomain (this=0x805e8d8, wszFriendlyName=0x805e910 u\"unixcorerun\", dwFlags=336, wszAppDomainManagerAssemblyName=0x0,\r\n    wszAppDomainManagerTypeName=0x0, nProperties=5, pPropertyNames=0x805e938, pPropertyValues=0x805e958, pAppDomainID=0xffffd650)\r\n    at /home/janvorli/git/coreclr/src/vm/corhost.cpp:1717\r\ndotnet/coreclr#18 0xf6d4d9ac in CorHost2::CreateAppDomainWithManager (this=0x805e8d8, wszFriendlyName=0x805e910 u\"unixcorerun\", dwFlags=336,\r\n    wszAppDomainManagerAssemblyName=0x0, wszAppDomainManagerTypeName=0x0, nProperties=5, pPropertyNames=0x805e938, pPropertyValues=0x805e958,\r\n    pAppDomainID=0xffffd650) at /home/janvorli/git/coreclr/src/vm/corhost.cpp:1890\r\ndotnet/coreclr#19 0xf6cd1623 in coreclr_initialize (exePath=0x8052014 \"/home/janvorli/dotnet/test/corerun\", appDomainFriendlyName=0x804e529 \"unixcorerun\", propertyCount=5,\r\n    propertyKeys=0xffffd694, propertyValues=0xffffd680, hostHandle=0xffffd654, domainId=0xffffd650)\r\n    at /home/janvorli/git/coreclr/src/dlls/mscoree/unixinterface.cpp:219\r\ndotnet/coreclr#20 0x0804c51f in ExecuteManagedAssembly (currentExeAbsolutePath=0x8052014 \"/home/janvorli/dotnet/test/corerun\",\r\n    clrFilesAbsolutePath=0x8052084 \"/home/janvorli/dotnet/test\", managedAssemblyAbsolutePath=0x805204c \"/home/janvorli/dotnet/test/nullref.exe\",\r\n    managedAssemblyArgc=0, managedAssemblyArgv=0x0) at /home/janvorli/git/coreclr/src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp:404\r\ndotnet/coreclr#21 0x0804b228 in corerun (argc=2, argv=0xffffd864) at /home/janvorli/git/coreclr/src/coreclr/hosts/unixcorerun/corerun.cpp:149\r\ndotnet/coreclr#22 0x0804b35a in main (argc=2, argv=0xffffd864) at /home/janvorli/git/coreclr/src/coreclr/hosts/unixcorerun/corerun.cpp:161\r\n\r\n```",
          "createdAt": "2017-02-17T01:10:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:10:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxODQ4MQ=="
        },
        {
          "author": "parjong",
          "body": "I'll first check whether master works for me.",
          "createdAt": "2017-02-17T01:15:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:15:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxOTM2OA=="
        },
        {
          "author": "parjong",
          "body": "To collect Core FX managed dll(s), I used a bit old collecting script of the following form (``OS`` is ``Linux``):\r\n```\r\nMANAGED_TAGS=()\r\nMANAGED_TAGS+=(\"AnyOS.AnyCPU\")\r\nMANAGED_TAGS+=(\"Unix.AnyCPU\")\r\nMANAGED_TAGS+=(\"${OS}.AnyCPU\")\r\n\r\n    for MANAGED_TAG in ${MANAGED_TAGS[@]}; do\r\n      REPO=\"${SRC_DIR}/${MANAGED_TAG}.${PRESET}\"\r\n\r\n      for BASE in $(find \"${REPO}\"  -iname '*.dll' \\! -iwholename '*test*' \\! -iwholename '*/ToolRuntime/*' \\! -iwholename '*/RemoteExecutorConsoleApp/*' \\! -iwholename '*/net*' \\! -iwholename '*aot*' -exec dirname {} \\; | uniq | xargs -i basename {}); do\r\n        PDB_FILE=\"${REPO}/${BASE}/${BASE}.pdb\"\r\n        DLL_FILE=\"${REPO}/${BASE}/${BASE}.dll\"\r\n\r\n        if [[ -f \"${DLL_FILE}\" ]]; then\r\n          cp -t \"${MANAGED_BIN_FILE_INTO}\" \"${DLL_FILE}\"\r\n        fi\r\n      done\r\n    done\r\n```",
          "createdAt": "2017-02-17T01:16:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:17:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUxOTU5Mw=="
        },
        {
          "author": "parjong",
          "body": "Here is the brief steps that I am currently using:\r\n - Cross-build Core CLR with the following command and copy the artifacts into output directory:\r\n```\r\ncoreclr $ ./build.sh cross x86  skipnuget debug cmakeargs \"-DSKIP_LLDBPLUGIN=true\" clang3.8\r\n...\r\n$ cp bin/Product/Linux.x86.Debug/* [OUTPUT DIR]\r\n```\r\n - Collect Core FX native so(s)\r\n```\r\ncorefx $  cp bin/Linux.x86.Debug/* [OUTPUT DIR]\r\n```\r\n - Collect Core FX managed dll(s) using the above script",
          "createdAt": "2017-02-17T01:26:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-11-02T15:31:00Z",
                "user": "abdevnet"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAO_iQQ=="
          },
          "updatedAt": "2017-02-17T01:27:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUyMTI1Nw=="
        },
        {
          "author": "janvorli",
          "body": "@parjong thank you. These match the steps I have done. I guess I'll try to create the docker image from the rootfs as you've said you did to see if it makes any difference. ",
          "createdAt": "2017-02-17T01:32:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:32:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUyMjI3NQ=="
        },
        {
          "author": "parjong",
          "body": "@janvorli Please let me know if there is any problem. I checked the current tip (7f3a87ae63b88327a3dc2b830d52f49a480509e0) and it works for me.",
          "createdAt": "2017-02-17T01:33:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T01:34:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUyMjQxNg=="
        },
        {
          "author": "janvorli",
          "body": "@parjong it is weird. I have just deleted the whole bin folder in coreclr, rebuilt the sources one more time and now it works. I am sorry for wasting your time.\r\nBtw, I have not specified the \"-DSKIP_LLDBPLUGIN=true\" and the libsosplugin.so was also built fine.",
          "createdAt": "2017-02-17T02:09:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T02:09:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUyODM4Nw=="
        },
        {
          "author": "parjong",
          "body": "@janvorli Thanks you for check :+1: \r\n\r\nFYI, ``-DSKIP_LLDBPLUGIN=true`` was  just a workaround during bring up, but remains unchanged as lldb-plugin is not used currently.",
          "createdAt": "2017-02-17T02:29:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-17T02:29:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDUzMTM5NQ=="
        },
        {
          "author": "parjong",
          "body": "Here is the result ([XML](https://github.com/dotnet/coreclr/files/786474/coreclrtests.xml.txt)) from b957f8c3e3b:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  : \r\n# Tests Discovered : 7027\r\n# Passed           : 5913\r\n# Failed           : 833\r\n# Skipped          : 281\r\n=======================\r\n```",
          "createdAt": "2017-02-20T03:21:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-20T22:15:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MDk3OTA5NQ=="
        },
        {
          "author": "parjong",
          "body": "dotnet/coreclr#9601 (although it is under review) seems to make huge progress. \r\n\r\nHere is the result [XML](https://github.com/dotnet/coreclr/files/788616/coreclrtests.xml.txt) from b957f8c3e3b with dotnet/coreclr#9601:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 6526\r\n# Failed           : 220\r\n# Skipped          : 281\r\n=======================\r\n```",
          "createdAt": "2017-02-20T22:20:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-20T22:20:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MTE5NTM3MQ=="
        },
        {
          "author": "parjong",
          "body": "Here is the result from 6092f90e5a0 ([log](https://github.com/dotnet/coreclr/files/805287/coreclrtests.log.txt) and [XML](https://github.com/dotnet/coreclr/files/805289/coreclrtests.xml.txt)):\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 6614\r\n# Failed           : 131\r\n# Skipped          : 282\r\n=======================\r\n```\r\ndotnet/coreclr#9601 seems to make huge progress (more than expected)!!!",
          "createdAt": "2017-02-27T23:25:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-02-28T02:07:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4Mjg5MDk1Ng=="
        },
        {
          "author": "parjong",
          "body": "dc3626d4e69 finally achieves < 100 failures:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 6657\r\n# Failed           : 88\r\n# Skipped          : 282\r\n=======================\r\n```\r\nHere are [log](https://github.com/dotnet/coreclr/files/812282/coreclrtests.log.txt) and [XML](https://github.com/dotnet/coreclr/files/812283/coreclrtests.xml.txt).\r\n\r\n",
          "createdAt": "2017-03-01T23:15:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2017-03-02T03:39:58Z",
                "user": "wateret"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-03-02T04:07:07Z",
                "user": "seanshpark"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-03-02T07:46:44Z",
                "user": "lucenticus"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-08-06T17:51:41Z",
                "user": "ryukinix"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-05-24T12:48:08Z",
                "user": "matiasinsaurralde"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOAW_Euw=="
          },
          "updatedAt": "2017-03-02T00:23:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMjkyNA=="
        },
        {
          "author": "janvorli",
          "body": "@parjong great! Thank you for the update.\r\nCC: @gkhanna79 ",
          "createdAt": "2017-03-01T23:17:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-03-01T23:26:35Z",
                "user": "gkhanna79"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAHTQeg=="
          },
          "updatedAt": "2017-03-01T23:17:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMzQxNw=="
        },
        {
          "author": "parjong",
          "body": "Here is the recent result ([XML](https://github.com/dotnet/coreclr/files/829342/coreclrtests.xml.txt)) from cf7d6d92484:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7027\r\n# Passed           : 6707\r\n# Failed           : 51\r\n# Skipped          : 269\r\n=======================\r\n```\r\n\r\n",
          "createdAt": "2017-03-09T00:24:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-03-09T00:24:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI4NTIxNDU0Mw=="
        },
        {
          "author": "BruceForstall",
          "body": "@parjong How's it look now?\r\n\r\nShould we create a Linux/x86 GitHub project (https://github.com/dotnet/coreclr/projects)? It's a relatively new GitHub feature -- not sure how useful it really is.",
          "createdAt": "2017-03-29T20:01:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-03-29T20:01:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MDIwODAzNA=="
        },
        {
          "author": "parjong",
          "body": "Here is the result from 2401b6ed082 ([full log](https://github.com/dotnet/coreclr/files/880629/coreclrtests.log.txt)):\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  : \r\n# Tests Discovered : 7061\r\n# Passed           : 6319\r\n# Failed           : 18\r\n# Skipped          : 724\r\n=======================\r\n```\r\n\r\ndotnet/coreclr#10538 resolves this failure, but is not merged in 2401b6ed082 :\r\n - Loader/classloader/generics/Instantiation/Recursion/genrecur/genrecur.sh\r\n\r\ndotnet/coreclr#10188 addresses the following two failures :\r\n - JIT/Methodical/eh/nested/nonlocalexit/throwinfinallyrecursive_20_d/throwinfinallyrecursive_20_d.sh\r\n - JIT/Methodical/eh/nested/nonlocalexit/throwinfinallyrecursive_20_r/throwinfinallyrecursive_20_r.sh\r\n\r\ndotnet/coreclr#10410 seems to address the following two failures:\r\n - JIT/Performance/CodeQuality/Serialization/Deserialize/Deserialize.sh\r\n - JIT/Performance/CodeQuality/Serialization/Serialize/Serialize.sh\r\n\r\nThe following failures seems to be related with incorrect stack unwinding on esp-frame dotnet/coreclr#10025, or helper-frame dotnet/coreclr#9272). I hope that dotnet/coreclr#10012 addresses these failures:\r\n - JIT/IL_Conformance/Old/Conformance_Base/conv_ovf_r8_i/conv_ovf_r8_i.sh\r\n - JIT/IL_Conformance/Old/Conformance_Base/conv_ovf_r8_i4/conv_ovf_r8_i4.sh\r\n - JIT/Methodical/Arrays/misc/_il_relinitializearray/_il_relinitializearray.sh\r\n - JIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b52578/b52578/b52578.sh\r\n - JIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b52840/b52840/b52840.sh\r\n - JIT/Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.sh\r\n - JIT/Regression/VS-ia64-JIT/V1.2-M01/b12390/b12390/b12390.sh\r\n - JIT/jit64/rtchecks/overflow/overflow01_div/overflow01_div.sh\r\n - JIT/jit64/rtchecks/overflow/overflow02_div/overflow02_div.sh\r\n - JIT/jit64/rtchecks/overflow/overflow04_div/overflow04_div.sh\r\n\r\ndotnet/coreclr#10139 is related with these two failures:\r\n - readytorun/mainv1/mainv1.sh\r\n - readytorun/mainv2/mainv2.sh\r\n\r\nThe following failure seems to be related with some GC issue, but not sure yet:\r\n - JIT/Performance/CodeQuality/Span/SpanBench/SpanBench.sh\r\n",
          "createdAt": "2017-03-29T23:40:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-03-30T01:00:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MDI1OTA4Mw=="
        },
        {
          "author": "parjong",
          "body": "Here is the result from 1c2ee08a4bc:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7061\r\n# Passed           : 6320\r\n# Failed           : 17\r\n# Skipped          : 724\r\n=======================\r\n```\r\n\r\nAs expected, ``Loader.classloader.generics.Instantiation.Recursion.genrecur.genrecur`` failure is gone:\r\n```\r\nFailed test:\r\n  JIT.IL_Conformance.Old.Conformance_Base.conv_ovf_r8_i.conv_ovf_r8_i\r\n  JIT.IL_Conformance.Old.Conformance_Base.conv_ovf_r8_i4.conv_ovf_r8_i4\r\n  JIT.Methodical.Arrays.misc._il_relinitializearray._il_relinitializearray\r\n  JIT.Methodical.eh.nested.nonlocalexit.throwinfinallyrecursive_20_d.throwinfinallyrecursive_20_d\r\n  JIT.Methodical.eh.nested.nonlocalexit.throwinfinallyrecursive_20_r.throwinfinallyrecursive_20_r\r\n  JIT.Performance.CodeQuality.Serialization.Deserialize.Deserialize\r\n  JIT.Performance.CodeQuality.Serialization.Serialize.Serialize\r\n  JIT.Performance.CodeQuality.Span.SpanBench.SpanBench\r\n  JIT.Regression.CLR-x86-JIT.V1-M12-Beta2.b52578.b52578.b52578\r\n  JIT.Regression.CLR-x86-JIT.V1-M12-Beta2.b52840.b52840.b52840\r\n  JIT.Regression.CLR-x86-JIT.V1.1-M1-Beta1.b143840.b143840.b143840\r\n  JIT.Regression.VS-ia64-JIT.V1.2-M01.b12390.b12390.b12390\r\n  JIT.jit64.rtchecks.overflow.overflow01_div.overflow01_div\r\n  JIT.jit64.rtchecks.overflow.overflow02_div.overflow02_div\r\n  JIT.jit64.rtchecks.overflow.overflow04_div.overflow04_div\r\n  readytorun.mainv1.mainv1\r\n  readytorun.mainv2.mainv2\r\n```\r\n\r\n",
          "createdAt": "2017-03-29T23:45:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-03-29T23:45:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5MDI1OTc4Mg=="
        },
        {
          "author": "parjong",
          "body": "fa7293aa828 finally resolves most of unittest failures except 2 readytorun tests:\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7068\r\n# Passed           : 6343\r\n# Failed           : 2\r\n# Skipped          : 723\r\n=======================\r\n```\r\n\r\nSeveral tests are excluded from the above result.\r\n\r\n4 tests based on Windows-specific struct layout rule (#10340)\r\n - Interop/MarshalAPI/OffsetOf/OffsetOf/OffsetOf.sh\r\n - JIT/Directed/RVAInit/nested/nested.sh\r\n - JIT/Directed/RVAInit/simple/simple.sh\r\n - JIT/Regression/CLR-x86-JIT/V1.2-Beta1/b103058/b103058/b103058.sh\r\n\r\n4 tests related with tailcall optimization:\r\n - JIT/Directed/tailcall/tailcall/tailcall.sh\r\n - JIT/Methodical/tailcall_v4/hijacking/hijacking.sh\r\n - JIT/Methodical/tailcall_v4/smallFrame/smallFrame.sh\r\n - JIT/Regression/JitBlue/devdiv_902271/DevDiv_902271/DevDiv_902271.sh\r\n\r\n1 test that takes too much time (about 4 hour?):\r\n - JIT/Performance/CodeQuality/Burgers/Burgers/Burgers.sh\r\n\r\n4 tests incompatible with remote testing:\r\n - JIT/CheckProjects/CheckProjects/CheckProjects.sh\r\n - JIT/Performance/CodeQuality/BenchmarksGame/k-nucleotide/k-nucleotide/k-nucleotide.sh\r\n - JIT/Performance/CodeQuality/BenchmarksGame/regexdna/regexdna/regexdna.sh\r\n - JIT/Performance/CodeQuality/BenchmarksGame/revcomp/revcomp/revcomp.sh\r\n\r\n1 test that was disabled due to hang before (now it works, but I forgot to enable it)\r\n - JIT/Performance/CodeQuality/Roslyn/CscBench/CscBench.sh\r\n",
          "createdAt": "2017-04-13T00:29:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-13T07:30:20Z",
                "user": "shahid-pk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-14T01:31:50Z",
                "user": "seanshpark"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-04-19T07:09:11Z",
                "user": "kse300489"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAIsFhQ=="
          },
          "updatedAt": "2017-09-24T08:05:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5Mzc0NDA5NA=="
        },
        {
          "author": "parjong",
          "body": "bece89ead08 finally shows 0 failed count (although some tests are excluded)\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  :\r\n# Tests Discovered : 7068\r\n# Passed           : 6345\r\n# Failed           : 0\r\n# Skipped          : 723\r\n=======================\r\n```",
          "createdAt": "2017-04-20T23:20:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2017-04-21T02:19:22Z",
                "user": "seanshpark"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-06-22T23:29:19Z",
                "user": "txchen"
              },
              {
                "content": "HOORAY",
                "createdAt": "2017-08-06T17:52:20Z",
                "user": "ryukinix"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-03-14T06:03:19Z",
                "user": "liserdarts"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-04-24T11:01:52Z",
                "user": "deinok"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-06-28T14:56:00Z",
                "user": "ikkentim"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-09-11T16:25:43Z",
                "user": "yatli"
              },
              {
                "content": "HOORAY",
                "createdAt": "2019-10-08T07:38:35Z",
                "user": "maxstee"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-07T12:59:09Z",
                "user": "KristiSik"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHODC5Igg=="
          },
          "updatedAt": "2017-04-20T23:20:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk2MzAzMA=="
        },
        {
          "author": "janvorli",
          "body": "@parjong congratulations for the great progress! Maybe it is time to start running the Pri 1 tests too (that would add about 3000 more tests).",
          "createdAt": "2017-04-20T23:54:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-20T23:54:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk3NTEyMQ=="
        },
        {
          "author": "parjong",
          "body": "@janvorli We already did. Here is the result from a762db4d403 ([full log](https://github.com/dotnet/coreclr/files/945763/log.txt)):\r\n```\r\n=======================\r\n     Test Results\r\n=======================\r\n# Tests Discovered : 11346\r\n# Passed           : 10528\r\n# Failed           : 7\r\n# Skipped          : 811\r\n=======================\r\n```\r\n\r\nHere is the list of failed tests:\r\n - CoreMangLib.cti.system.runtime.interopservices.marshal.MarshalSizeOf1_PSC.MarshalSizeOf1_PSC\r\n - CoreMangLib.cti.system.runtime.interopservices.marshal.MarshalSizeOf2_PSC.MarshalSizeOf2_PSC\r\n - CoreMangLib.cti.system.intptr.IntPtrToInt64.IntPtrToInt64\r\n - CoreMangLib.cti.system.string.StringChars.StringChars\r\n - CoreMangLib.cti.system.uintptr.UIntPtrCtor_UInt64.UIntPtrCtor_UInt64\r\n - CoreMangLib.cti.system.uintptr.UIntPtrToUInt32.UIntPtrToUInt32\r\n - GC.Stress.Framework.ReliabilityFramework.ReliabilityFramework\r\n\r\ndotnet/coreclr#10340 seems to cause the following failures: \r\n - CoreMangLib.cti.system.runtime.interopservices.marshal.MarshalSizeOf1_PSC.MarshalSizeOf1_PSC\r\n - CoreMangLib.cti.system.runtime.interopservices.marshal.MarshalSizeOf2_PSC.MarshalSizeOf2_PSC\r\n\r\ndotnet/coreclr#10888 is expected to resolve the following failures:\r\n - CoreMangLib.cti.system.intptr.IntPtrToInt64.IntPtrToInt64\r\n - CoreMangLib.cti.system.string.StringChars.StringChars\r\n - CoreMangLib.cti.system.uintptr.UIntPtrCtor_UInt64.UIntPtrCtor_UInt64\r\n - CoreMangLib.cti.system.uintptr.UIntPtrToUInt32.UIntPtrToUInt32\r\n\r\nGC.Stress.Framework.ReliabilityFramework.ReliabilityFramework is a bit new failure that we need to analyze",
          "createdAt": "2017-04-21T00:09:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-21T00:09:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk3OTU2Ng=="
        },
        {
          "author": "janvorli",
          "body": "@parjong Awesome, thank you!\r\nCC: @gkhanna79, @Petermarcu ",
          "createdAt": "2017-04-21T00:17:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-21T00:17:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk4MjIwNQ=="
        },
        {
          "author": "swgillespie",
          "body": "@parjong The reliability framework is a test that was just re-enabled recently - feel free to ping me sometime with the failure message and I'd be happy to help investigate it if I can. https://github.com/dotnet/coreclr/pull/11029",
          "createdAt": "2017-04-21T00:25:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-21T00:26:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk4NDQ2MA=="
        },
        {
          "author": "parjong",
          "body": "@swgillespie Thanks you for comment. GC.Stress.Framework.ReliabilityFramework.ReliabilityFramework failed from 04/20. Both x86 and armel have the same failure. I'm not sure about armhf as I do NOT have a result, yet.",
          "createdAt": "2017-04-21T00:30:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-04-21T00:30:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NTk4NTk4Mg=="
        },
        {
          "author": "Petermarcu",
          "body": "@parjong Awesome progress!",
          "createdAt": "2017-04-21T16:21:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2017-04-25T01:16:48Z",
                "user": "parjong"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAI2fQg=="
          },
          "updatedAt": "2017-04-21T16:21:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDI5NjIzNjY2Nw=="
        },
        {
          "author": "parjong",
          "body": "@gkhanna79 This issue is just for discussion and progress tracking. Could you please change the milestone, or should I close this one?",
          "createdAt": "2017-05-24T04:03:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-05-24T04:03:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMwMzYxMTgwNg=="
        },
        {
          "author": "gkhanna79",
          "body": "I have changed the milestone - please continue to use this for discussion.",
          "createdAt": "2017-05-24T04:52:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2017-05-24T04:58:11Z",
                "user": "parjong"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAJtitw=="
          },
          "updatedAt": "2017-05-24T04:52:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMwMzYxNzIwMw=="
        },
        {
          "author": "ryukinix",
          "body": "Awesome. This may be released with 2.0.0 .NET Core?",
          "createdAt": "2017-08-06T17:54:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-08-15T08:07:44Z",
                "user": "cocowalla"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAMQ_Lg=="
          },
          "updatedAt": "2017-08-06T17:54:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyMDUyMTkwMg=="
        },
        {
          "author": "BruceForstall",
          "body": "@parjong @seanshpark and others: I haven't seen any Linux/x86 activity lately. Are people still working on this or using this? Should I still try to find time to review https://github.com/dotnet/coreclr/pull/10034 (Enable FEATURE_FIXED_OUT_ARGS), for example?",
          "createdAt": "2017-08-10T22:58:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-08-15T08:07:42Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-01T09:58:44Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAQCCXw=="
          },
          "updatedAt": "2017-08-10T22:58:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyMTY5NTYwMw=="
        },
        {
          "author": "parjong",
          "body": "Yes, we are using x86/Linux CLR, but we are currently not working on dotnet/coreclr#10034. \r\n\r\nWe have tested CLR daily, and there have been no failed tests except tests related with dotnet/coreclr#10340 (for Debug/Checked/Release) from May.\r\n\r\nWe also have tested FX, and x86/Linux and x64/Linux are almost same (except some CompilerService tests related with dotnet/coreclr#10340) for 2.0.0 branch, but we recently have some more failures on x86/Linux for master branch.\r\n\r\n",
          "createdAt": "2017-08-10T23:59:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-08-10T23:59:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyMTcwNDIwMQ=="
        },
        {
          "author": "TheLastRar",
          "body": "Are there any plans to start doing x86/Linux daily builds?",
          "createdAt": "2017-08-12T16:56:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-08-15T08:07:55Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-08-15T09:18:30Z",
                "user": "shahid-pk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-08-25T08:05:36Z",
                "user": "Skywalker13"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-08T15:09:43Z",
                "user": "realityexists"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-12-01T10:00:01Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOAQCCoQ=="
          },
          "updatedAt": "2017-08-12T16:56:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyMTk5MjgzNA=="
        },
        {
          "author": "seanshpark",
          "body": "@TheLastRar , could https://github.com/dotnet/coreclr/pull/12897 be the one ?",
          "createdAt": "2017-08-16T22:24:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-08-16T23:22:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMyMjkxNjQzNg=="
        },
        {
          "author": "realityexists",
          "body": "So is it possible to download an x86 Linux build somewhere? And how stable/safe to use is it?",
          "createdAt": "2017-10-08T15:19:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-08T15:19:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNTAxMzYxOQ=="
        },
        {
          "author": "parjong",
          "body": "@realityexists x86/Linux CLR is not released yet, and thus I think that you need to build it by yourself. \r\nIt is also hard to say about its safety, but we haven't encountered a blocking issue, yet.",
          "createdAt": "2017-10-09T23:33:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2017-10-09T23:46:05Z",
                "user": "ryukinix"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAOHFZg=="
          },
          "updatedAt": "2017-11-04T03:06:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNTMxNzM1NA=="
        },
        {
          "author": "philippweidhas",
          "body": "@parjong  to build x86 Linux, wich of the github projects i have to clone? Is it the normal https://github.com/dotnet/coreclr or a other project? Im not sure where to begin. Thanks for your help",
          "createdAt": "2017-10-12T13:53:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-12T13:53:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNjE0MzkyMQ=="
        },
        {
          "author": "ryukinix",
          "body": "I have interest on this too. Would be nice a guide how to build `dotnet` on Linux.",
          "createdAt": "2017-10-12T19:46:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-12T19:46:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNjI0NTczNg=="
        },
        {
          "author": "parjong",
          "body": "@philippweidhas @ryukinix https://github.com/dotnet/coreclr/issues/13192#issuecomment-320188913 may be helpful.\r\n\r\nYou also need to build Core FX (https://github.com/dotnet/corefx) to run an C# application. https://github.com/dotnet/coreclr/issues/9265#issuecomment-280519593 and https://github.com/dotnet/coreclr/issues/9265#issuecomment-280521257 may be helpful.\r\n\r\nUnfortunately, ``dotnet`` is not supported, yet. You may use ``corerun`` (which this repo provides) instead.",
          "createdAt": "2017-10-13T02:02:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-11-02T15:37:18Z",
                "user": "abdevnet"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAO_jrQ=="
          },
          "updatedAt": "2017-10-13T02:02:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzNjMyOTUxOQ=="
        },
        {
          "author": "philippweidhas",
          "body": "@parjong @ryukinix i could succesfully build coreclr for x86 but im struggling to build Core FX with:\r\n\r\nsudo apt-get install debootstrap\r\nsudo apt-get install qemu-user-static\r\nsudo ./cross/build-rootfs.sh x86\r\nsudo apt-get install cmake\r\nsudo apt-get install clang-3.8 lldb-3.8\r\n./build.sh cross x86 skipnuget debug cmakeargs \"-DSKIP_LLDBPLUGIN=true\" clang3.8\r\n\r\ndo i have to build the CoreFX project on another way?",
          "createdAt": "2017-10-24T13:57:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-10-24T21:20:04Z",
                "user": "ryukinix"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAOqjhg=="
          },
          "updatedAt": "2017-10-24T13:57:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzODk5OTI2MQ=="
        },
        {
          "author": "seanshpark",
          "body": "> but im struggling to build Core FX with\r\n\r\nCould you paste what the problem(error) is? Or it would be better to add a new issue and talk at there.",
          "createdAt": "2017-10-25T10:20:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-25T10:21:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTI4NDU3NA=="
        },
        {
          "author": "seanshpark",
          "body": "This is how I've checked with latest master as of writing this;\r\n```bash\r\n# build native codes for host (x64) first\r\n./build-native.sh -debug -- clang3.8\r\n\r\n# and then build native codes for x86-32 \r\n./build-native.sh -debug -buildArch=x86 -- cross clang3.8\r\n\r\n# build managed codes but not the tests\r\n./build-managed.sh -BuildTests=false\r\n```\r\nThese commands are from some time ago and not sure it's the latest.",
          "createdAt": "2017-10-25T10:35:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-25T10:35:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTI4NzgxNw=="
        },
        {
          "author": "ryukinix",
          "body": "> Or it would be better to add a new issue and talk at there.\r\n\r\nI think is better, since this issue thread is only about the development progress of x86. ",
          "createdAt": "2017-10-25T10:40:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-10-25T10:40:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzOTI4ODg2Ng=="
        },
        {
          "author": "philippweidhas",
          "body": "@parjong @seanshpark @ryukinix Hi guys i opened an  [new Issue ](https://github.com/dotnet/corefx/issues/25002) for the x86 build for CoreFX in the CoreFX repository, i think that is the better place to discuss this problem.",
          "createdAt": "2017-11-01T21:04:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-11-01T21:04:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0MTI0MjIzMw=="
        },
        {
          "author": "dmitriyse",
          "body": "Most of linux distributives dropping x86 support. Please consider to support x32 ABI runtime (only for linux hosts).  See https://en.wikipedia.org/wiki/X32_ABI. Ubuntu 16.04 already supports it. (apt install libc6-x32)\r\n\r\nWindows 10 looks like have no plans to kill 32 bit version, but at the same time have no any plans to support x32 ABI.",
          "createdAt": "2017-11-15T16:23:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-11-15T16:25:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0NDY0NjI1Ng=="
        },
        {
          "author": "ryukinix",
          "body": " > Most of linux distributives dropping x86 support\n\nThis is quite true, unfortunately most of the distributions (like Arch \nLinux) is indeed dropping x86 support. Debian probably will continue \nsupporting that, but I'm not so sure about the others.\n-- \nAs lembranças não são só do passado. Podem ser de agora e até de \namanhã.\n— Serial Experiments Lain\nManoel Vilela,\nDiscente em Engenharia da Computação,\nUniversidade Federal do Ceará.\n\nOn Wed, Nov 15, 2017 at 1:24 PM, dmitriyse <notifications@github.com> \nwrote:\n> Most of linux distributives dropping x86 support. Please consider to \n> support x32 ABI runtime (only for linux hosts). See \n> https://en.wikipedia.org/wiki/X32_ABI. Ubuntu 16.04 already supports \n> it. (apt install libc6-x32)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
          "createdAt": "2017-11-15T18:07:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T19:58:33Z",
                "user": "josephmoresena"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOApT1hw=="
          },
          "updatedAt": "2017-11-15T18:07:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM0NDY3ODQzNQ=="
        },
        {
          "author": null,
          "body": "@seanshpark, @parjong, if all tests are passing since August 2017, what is remaining? Although everyone is talking about support disappearing, Cannonical will support 32-bit until 2023 via Ubuntu 18: https://itsfoss.com/ubuntu-32-bit-support-drop/. CentOS still has community driven 32 bit. It may take 10-15 years before it is absolutely gone from all the mainstream traditional hosting servers (some of which are still running old centos). But if dotnet is ready for 32-bit, why not just ship it like Mono does?",
          "createdAt": "2018-05-12T11:32:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-12T17:08:26Z",
                "user": "ryukinix"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-15T08:53:49Z",
                "user": "shahid-pk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-19T22:22:03Z",
                "user": "deinok"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-08-02T15:35:52Z",
                "user": "cocowalla"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAaGOsw=="
          },
          "updatedAt": "2018-05-12T11:32:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM4ODU0ODg4OQ=="
        },
        {
          "author": "borgdylan",
          "body": "Support for 32-bit installation is disappearing but support for 32-bit libraries on x64 installations will still be supported for the forseeable future. Said libraries are needed to run 32-bit code on x64 installations. With those 32-bit .NET Core would still be able to run, probably faster if runnign a small application without a huge hunger for memory.",
          "createdAt": "2018-05-27T19:41:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-25T14:41:27Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T19:58:59Z",
                "user": "josephmoresena"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOApT1ow=="
          },
          "updatedAt": "2018-05-27T19:41:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjM2MDk0Mg=="
        },
        {
          "author": "deinok",
          "body": "I'm trying to run .NET Core Apps on an [Intel Galileo](https://en.wikipedia.org/wiki/Intel_Galileo) , exactly on a [IOT2000](https://w3.siemens.com/mcms/pc-based-automation/en/industrial-iot/pages/default.aspx)\r\n\r\nSo I have to use Mono, but I would like to use netcore directly.\r\nIs `corerun` ready for execute netcoreapp2.1?",
          "createdAt": "2018-05-28T09:38:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T19:59:07Z",
                "user": "josephmoresena"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOApT1rA=="
          },
          "updatedAt": "2018-05-28T09:39:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjQ3NTg2Ng=="
        },
        {
          "author": "borgdylan",
          "body": "AFAIK, 32-bit packages have not been published and there has been no annoucement on when those will be available. The latest architecture to be officially supported along with x64 is ARM32 (ARMv7+).",
          "createdAt": "2018-05-28T09:41:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-05-28T09:41:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjQ3NjcxMg=="
        },
        {
          "author": null,
          "body": "> x64 is ARM32 (ARMv7+)\r\n\r\nand aarch64.\r\n\r\nI think we can build end to end i386 product by ourselves using https://github.com/dotnet/source-build. `buildbootstrapcli.sh --rid linux-x86 ...`, see https://github.com/dotnet/source-build/blob/master/Documentation/boostrap-new-os.md#building-the-bootstrap-cli. I haven't gotten a chance to setup x86 VM to build it yet, but should be straight forward @deinok. ",
          "createdAt": "2018-05-28T21:32:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-29T11:14:05Z",
                "user": "deinok"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAXKFfw=="
          },
          "updatedAt": "2018-05-28T21:32:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjYwNjMzOA=="
        },
        {
          "author": "liserdarts",
          "body": "> I think we can build end to end i386 product by ourselves\r\n\r\nIf you're going to build it yourself you might be interested  in [the repository I made specifically for this situation](https://github.com/liserdarts/dotnetcore-build-x86-Linux).\r\n\r\nIn there is a bash script that will download the source, build, and create an output folder. It runs on x64 in Linux and builds .NET Core for x86 in Linux,\r\n\r\nAs far as what's left for x86 support, there is on thing I'm aware of. In an v2.1-preview1/Linux/x86 environment it's possible to crash the processes when using NamedPipeServerStream. I think this is an issue for corefx and there is an [open issue](https://github.com/dotnet/corefx/issues/28448) for it.\r\n\r\nNot sure if this has been fixed in v2.1-preview2 or v2.1-rc1. I you're interested in testing those branches yourself I have create a [repo that reproduces the problem](https://github.com/liserdarts/NamedPipeServerStreamTest).",
          "createdAt": "2018-05-28T22:45:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-30T22:28:25Z",
                "user": "deinok"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-07-06T12:53:19Z",
                "user": "ewinnington"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-08-21T18:36:30Z",
                "user": "cocowalla"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOAa8oFg=="
          },
          "updatedAt": "2018-05-28T22:45:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjYxMzE2Ng=="
        },
        {
          "author": null,
          "body": "I think what you have achieved is essentially a subset of https://github.com/dotnet/source-build, which is meant for distribution package managers and other source builders. It builds 20 submodule repositories, including dotnet, aspnet and microsoft orgs. I think it would be best to converge the effort into that repo for more platforms rather than reinventing it.",
          "createdAt": "2018-05-29T04:10:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-05-29T04:10:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM5MjY0NzM5NA=="
        },
        {
          "author": "weltkante",
          "body": "What is up with this? [this doc](https://github.com/dotnet/docs/blob/master/docs/core/rid-catalog.md) says to check [runtime.json](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) for supported runtime identifiers. I see linux x86 variants in there, but can't get them to work on my ubuntu sandbox.\r\n\r\nMissing x86 support has been holding me back from porting my servers from mono/desktop framework builds to .NET Core builds, because x64 memory usage is nearly doubling the runtime memory usage.",
          "createdAt": "2019-03-12T19:41:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-25T14:39:56Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T13:47:49Z",
                "user": "sergei66666"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T14:02:44Z",
                "user": "Soniclev"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-27T09:46:38Z",
                "user": "shahid-pk"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAlwKfA=="
          },
          "updatedAt": "2019-03-12T19:41:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3MjE1MjA0OQ=="
        },
        {
          "author": "sergei66666",
          "body": "Hello to all! I would also like to use x86. What problems stand in the way to the x86 future?",
          "createdAt": "2019-03-26T13:59:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-03-26T13:59:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NjY1NDg0Mw=="
        },
        {
          "author": "danmoseley",
          "body": "@jkotas @janvorli ",
          "createdAt": "2019-03-26T14:20:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-03-26T14:20:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NjY2NzQ5NQ=="
        },
        {
          "author": "jkotas",
          "body": "Linux x86 is community supported at this point. There are no officially supported prebuilt binaries available. You have to build your own as others commented above.\r\n\r\nThank you for your feedback. We will consider adding prebuilt .NET Core Linux x86 binaries in future if we see a lot of demand for them. Please leave comment on this issue if you would like to see .NET Core officially supported on Linux x86.\r\n\r\ncc @richlander ",
          "createdAt": "2019-03-26T14:49:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T16:11:22Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T16:26:36Z",
                "user": "Soniclev"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T17:13:45Z",
                "user": "TheLastRar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-26T17:17:43Z",
                "user": "rsKliPPy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-27T06:48:41Z",
                "user": "sergei66666"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-27T07:52:39Z",
                "user": "weltkante"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-29T02:41:37Z",
                "user": "venliong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-12T16:32:51Z",
                "user": "hiiru"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-12T17:02:51Z",
                "user": "chadbr"
              },
              {
                "content": "ROCKET",
                "createdAt": "2019-04-12T17:02:57Z",
                "user": "chadbr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-16T07:10:25Z",
                "user": "shahid-pk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-19T19:40:14Z",
                "user": "noahc3"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T20:04:25Z",
                "user": "josephmoresena"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-19T08:18:01Z",
                "user": "lsoft"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-20T21:24:19Z",
                "user": "redwyre"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-28T18:23:56Z",
                "user": "dpsenner"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-01T03:38:55Z",
                "user": "kevin100702"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-02T09:49:10Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-04T10:41:17Z",
                "user": "enify"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:52Z",
                "user": "ntindle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-10T02:02:26Z",
                "user": "kkartavenka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-22T20:58:20Z",
                "user": "Peter-76"
              }
            ],
            "totalCount": 22,
            "endCursor": "Y3Vyc29yOnYyOpHOBkZdCQ=="
          },
          "updatedAt": "2019-03-26T14:49:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NjY4MTk3OQ=="
        },
        {
          "author": "ikkentim",
          "body": "I would love to see prebuilt binaries :)",
          "createdAt": "2019-03-26T16:11:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:48Z",
                "user": "ntindle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-10T02:23:50Z",
                "user": "kkartavenka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-13T12:26:03Z",
                "user": "sklawik"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBA5dVQ=="
          },
          "updatedAt": "2019-03-26T16:11:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NjcyNDE3MQ=="
        },
        {
          "author": "TheLastRar",
          "body": "I would like to  see prebuilt packages as well, preferably in a manor that supports multiarch.",
          "createdAt": "2019-03-26T17:16:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:47Z",
                "user": "ntindle"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAwsyKg=="
          },
          "updatedAt": "2019-03-26T17:16:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3Njc1NDg4MA=="
        },
        {
          "author": "deinok",
          "body": "@jkotas Probably it could be cool to at least have the initial dotnet to start trying compile from a linux-x86 host",
          "createdAt": "2019-03-28T10:02:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:43Z",
                "user": "ntindle"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAwsyIw=="
          },
          "updatedAt": "2019-03-28T10:02:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NzUyODU1MQ=="
        },
        {
          "author": "bording",
          "body": "I'd actually prefer to not see official x86 linux binaries, primarily because then I'd feel obligated to build even more native binaries to make LibGit2Sharp work with them! 😄 ",
          "createdAt": "2019-04-12T16:39:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T16:39:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjY0MTg2MQ=="
        },
        {
          "author": "deinok",
          "body": "@bording And Mono? It runs in x86\r\nIm not sure if this is a good reason for not having an unofficial x86 runtime / sdk.\r\n\r\nAn important point is that some industrial enviroments are move to have PLC with linux and most of them have a x86 arch. And industrial environments wont change its arch in a looooong time.\r\nEx: https://w3.siemens.com/mcms/pc-based-automation/en/industrial-iot/Pages/Default.aspx?tabcardname=simatic%20iot2000%20io-shield",
          "createdAt": "2019-04-12T16:48:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T20:05:21Z",
                "user": "josephmoresena"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-31T01:36:35Z",
                "user": "noahc3"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-19T08:19:02Z",
                "user": "lsoft"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-23T15:21:07Z",
                "user": "hmiguel"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-02T09:48:51Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:36Z",
                "user": "ntindle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-10T02:24:14Z",
                "user": "kkartavenka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-30T23:11:44Z",
                "user": "fjelliott"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOBw0ZUg=="
          },
          "updatedAt": "2019-04-12T16:48:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjY0NDczMA=="
        },
        {
          "author": "bording",
          "body": "> @bording And Mono? It runs in x86\r\nIm not sure if this is a good reason for not having an unofficial x86 runtime / sdk.\r\n\r\nTrue, though at this point I'm considering .NET Core the primary platform for non-Windows support in LibGit2Sharp. Mono doesn't have a way to provide a single NuGet package that has all the binaries needed for different distros that works without some manual intervention.\r\n\r\nBut that's getting off-topic here, so I'l leave it at that!\r\n\r\n",
          "createdAt": "2019-04-12T17:04:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-02T09:17:06Z",
                "user": "deinok"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-24T20:05:23Z",
                "user": "josephmoresena"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-03T07:23:07Z",
                "user": "venliong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:30Z",
                "user": "ntindle"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOAwsyGg=="
          },
          "updatedAt": "2019-04-12T17:04:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjY0OTc4MQ=="
        },
        {
          "author": "cocowalla",
          "body": "@jkotas another vote for a `linux-x86` rid. I've been following this issue since it was opened back in 2017, and it's disappointing that Linux x86 still isn't officially supported. I get that most platforms are x64 nowadays, but x86 will be around for a long time before it goes away.\r\n\r\nIIRC, even the guidance for Azure App Service recommends using 32-bit instead of 64-bit, because of the memory savings.",
          "createdAt": "2019-08-02T09:54:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-03T07:23:12Z",
                "user": "venliong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-16T22:54:32Z",
                "user": "ntindle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-17T09:08:59Z",
                "user": "weltkante"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-10T02:24:57Z",
                "user": "kkartavenka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-28T15:12:50Z",
                "user": "Rudicito"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODwEINg=="
          },
          "updatedAt": "2019-08-02T09:54:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxNzY0MDQ5NA=="
        },
        {
          "author": "ntindle",
          "body": "Another vote for it. Power shell requires it. @jkotas\r\ndotnet/core#322",
          "createdAt": "2019-09-16T22:53:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-17T09:09:05Z",
                "user": "weltkante"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAwupLw=="
          },
          "updatedAt": "2019-09-16T22:56:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMTk4ODYwMw=="
        },
        {
          "author": "weltkante",
          "body": "It would be great if we could at least have documented how to do custom builds. I've been trying repeatedly and not been able to setup custom 32 bit builds (custom builds of individual git repos work but I could never get the whole system run together).",
          "createdAt": "2019-09-17T09:16:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-17T10:45:42Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-17T14:05:17Z",
                "user": "sergei66666"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAwwF0Q=="
          },
          "updatedAt": "2019-09-17T09:17:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjEzNjI0Mw=="
        },
        {
          "author": "jkotas",
          "body": "> documented how to do custom builds.\r\n\r\nhttps://github.com/dotnet/source-build has the script and documentation to build the whole system. Have you tried that?\r\n\r\nThis will get a lot easier with https://github.com/dotnet/coreclr/issues/26175",
          "createdAt": "2019-09-17T14:41:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T14:41:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjI1MjI1Ng=="
        },
        {
          "author": "weltkante",
          "body": "Thanks, I'll try that (and report back for anyone else interested), so far I only looked at individual repository readmes and various (outdated) blog posts, didn't see that yet. The last time I got stuck in figuring out how to get corefx build pick up the coreclr build output.",
          "createdAt": "2019-09-17T15:35:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T15:35:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjI3NjIwMg=="
        },
        {
          "author": "deinok",
          "body": "@jkotas Can we know when will the plataform merge will start?",
          "createdAt": "2019-09-17T16:06:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T16:06:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjI4ODkzNA=="
        },
        {
          "author": "jkotas",
          "body": "It is best to ask on dotnet/coreclr#26175 about the timelines. It started already: folks are figuring the execution details, the tools and techniques to use, etc.",
          "createdAt": "2019-09-17T16:28:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T16:28:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjI5NzU0OQ=="
        },
        {
          "author": "weltkante",
          "body": "@jkotas doesn't look like source-build supports cross compiling, [bootstrap](https://github.com/dotnet/source-build/blob/release/3.0/Documentation/boostrap-new-os.md) looks promising but seems to need a pure x86 Ubuntu instead of using x86_64 and is more complex than it needs to be for the special case of a Linux x86 build. I'll continue experimenting over the weekend, but its far from being a useable documentation/tool for creating x86 builds on Linux. I've created dotnet/source-build#1235 for further discussion on how to do custom builds, perhaps the documentation (or scripts) can be improved as a result of that.",
          "createdAt": "2019-09-17T21:40:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T21:40:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjQxMzE5Mw=="
        },
        {
          "author": "janvorli",
          "body": "@weltkante you don't need a pure x86 Ubuntu to build. You can use cross compilation - first build rootfs using the eng/common/cross/build-rootfs.sh script for x86 (run it on x64) and then use it for cross compiling.",
          "createdAt": "2019-09-17T21:52:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T21:52:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjQxNjYwNw=="
        },
        {
          "author": "janvorli",
          "body": "If you wanted to try to use the bootstrap script though, you'd need to patch it a bit so that it can do cross build. You'd need to add `-cross` option to the coreclr build.sh and the corefx build-native.sh and `--cross` to the core-setup build.sh and before running the script, set ROOTFS_DIR env var to point to the location of the rootfs you've built for x86.",
          "createdAt": "2019-09-17T22:01:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T22:01:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjQxOTM1Mw=="
        },
        {
          "author": "ikkentim",
          "body": "@jkotas any news on the prebuilt .NET Core Linux x86?\r\n\r\nAlso, is there an issue on dotnet/runtime for this topic (Linux x86), or does discussion continue here?",
          "createdAt": "2020-01-09T15:16:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-09T17:50:24Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-14T04:40:58Z",
                "user": "Sasino97"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBEKxVw=="
          },
          "updatedAt": "2020-01-09T15:16:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3MjYwNjYxMQ=="
        },
        {
          "author": "weltkante",
          "body": "@ikkentim I think dotnet/source-build#1235 I created above may be the appropriate place for discussing how to get it working (unless its also merged into dotnet/runtime? I'm not entirely sure). The repository already contains build scripts for x86 but they are underdocumented and unfortunately I couldn't get them completing successfully by trial-and-error. Before any prebuilt packages can be made the build scripts need to be put into working order.\r\n\r\nFor what its worth coreclr itself is easy to compile for x86 (you can do this with the existing build scripts in the coreclr build tree), but getting a build for the rest of the dotnet infrastructure is the problem.",
          "createdAt": "2020-01-09T15:54:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-09T20:32:42Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-27T18:33:57Z",
                "user": "Mrucznik"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBIu0rw=="
          },
          "updatedAt": "2020-01-09T16:00:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3MjYyMzk5MQ=="
        },
        {
          "author": "jkotas",
          "body": ">  is there an issue on dotnet/runtime for this topic (Linux x86)\r\n\r\nWe have not bulk migrated the issues from the coreclr/corefx repos to dotnet/runtime yet. It should happen any day now. Just use the the existing Linux x86 issue in coreclr for any discussion on this.\r\n\r\ndotnet/runtime is the place to focus on. Can dotnet/runtime be cross-compiled for Linux x86 right now?\r\n\r\nIf you just need the runtime (without the full SDK), dotnet/runtime is all that needs to be build. source-build should not be necessary for that.",
          "createdAt": "2020-01-09T17:46:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-09T20:32:44Z",
                "user": "ikkentim"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA4tEYQ=="
          },
          "updatedAt": "2020-01-09T17:46:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3MjY3NDU2Mw=="
        },
        {
          "author": "sos-dll",
          "body": ">  Can dotnet/runtime be cross-compiled for Linux x86 right now?\r\n\r\nI read some comments from 2017, claiming they have compiled x86 Linux runtime at that time...\r\nSo, I just been trying to accomplish the same today, but despite all the efforts -- failed.\r\nThere must be something missing on the [cross-compiling page](https://github.com/dotnet/runtime/blob/master/docs/workflow/building/coreclr/cross-building.md) (i.e. a package, `binutils-i686-linux-gnu` is not listed for `x86` arch), and there's also something wrong with the information there (dated perhaps?)...\r\nFor example:\r\n![image](https://user-images.githubusercontent.com/53872123/82133931-e7cb6300-97f1-11ea-8709-238d09a080be.png)\r\nIf I run this command in terminal, I receive `permission denied` error, meaning `sudo` is missing.\r\nFurthermore, after running the above command with `sudo`, the following is printed:\r\n> MSBUILD : error MSB1018: Verbosity level is not valid.\r\n> Switch: verbose\r\n> For switch syntax, type \"MSBuild -help\"\r\n\r\nAdding up such things (errors/quirks), makes me believe the information on the cross-compiling page is incorrect/dated.\r\nIf there were a notice about the information being incorrect/dated, I wouldn't have even tried to do this. Anyways, there goes over 6 hours, wasted for nothing.\r\n/rant\r\n\r\nI, too, would appreciate an actual support for x86 Linux!\r\nThere being no other option since there is no support for x86 Linux, I have to go with mono instead.\r\nToo bad.\r\n\r\n(Here's the dump from last command I had executed, if anyone want to examine: [build.html.txt](https://github.com/dotnet/runtime/files/4639564/build.html.txt))",
          "createdAt": "2020-05-17T02:10:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-17T02:40:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyOTczMTk1MA=="
        },
        {
          "author": "weltkante",
          "body": "Compiling the runtime wasn't an issue before the repository merge, you could cross-compile the coreclr repo exactly as specified in the instructions (I assume you still can if you use the old repo instead of the merged one). The problem was doing anything useful with it, since coreclr doesn't build the libraries or SDK. Cross compiling corefx or building the SDK didn't work out so well, never got it working (see previous few posts and the issue I created over at the source-build repo). You need at least corefx to do anything useful because it contains some architecture specific libraries.\r\n\r\nAs far as the merged repository is concerned it looks like the cross compiling instructions have been updated, I suspect since x86 isn't officially supported something got broken (or just not updated) in the scripts.\r\n\r\nConsidering I got it working before I'll have another look and see if I can figure out what is broken. Your error log seems to say that no architecture was passed along at all.\r\n\r\nIts awful that there is no official x86 or x86_64 support, we're still running servers on mono because x64 applications require twice the memory. While I understand that pure x86 OS are phased out I don't understand why nobody goes for the low hanging fruit of optimizing memory usage by allowing building x86_64 applications. Needing twice the number of servers in the cloud _is_ a significant enough cost that we don't upgrade some deployments to .NET Core.",
          "createdAt": "2020-05-17T13:44:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-17T14:17:39Z",
                "user": "cocowalla"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBEeL2Q=="
          },
          "updatedAt": "2020-05-17T13:47:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyOTgwMTI0OA=="
        },
        {
          "author": "cocowalla",
          "body": "@weltkante just wanted to chime in with another voice, in full agreement.\r\n\r\nEven when you run App Services in Microsoft Azure, they are *32-bit by default* - presumably for memory efficiency.\r\n\r\nx86 support does seem like low hanging fruit that I would have thought was relatively straightforward for the core team to add, but obviously more difficult for 3rd parties who won't have that same level of knowledge.",
          "createdAt": "2020-05-17T14:20:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-17T17:03:42Z",
                "user": "Rudokhvist"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBEegTQ=="
          },
          "updatedAt": "2020-05-17T14:20:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyOTgwNjA3OA=="
        },
        {
          "author": "weltkante",
          "body": "Following the instructions on the crosscompile page can build coreclr for x86 cleanly on current master, like it used to in the old repo. I agree there are minor mistakes (like the verbosity switch or where rootfs is generated) but all were obvious to fix (`build.sh --help` tells you the verbosity levels and the rootfs generator displays where it really put the files). Not sure where exactly @sos-dll went wrong, but it was important to pay attention to the details in the instructions, copy pasting command lines does not work, some things are spelled out textually.\r\n\r\nActually now that corefx and coreclr are in the same repo I got corefx cross compiled for the first time ever. 🎉 It was straightforward, I only had to adjust the `subset` switch on the main build script.\r\n\r\n**NOTE: I did not try running anything with the output of the crosscompile build since I have no idea how to use the build output**\r\n\r\nNow I could probably go ahead and just try figuring out how to use the build output, but I'll take a break here and instead spend some more time researching if I can build a full SDK. I feel we're pretty close to being able to have working x86. 🚀\r\n\r\n<details><summary>if you want to follow along and do your own experiments</summary>\r\n\r\n...\r\n\r\n* fresh Ubuntu 18.04 cloud VM with 32gb RAM (I had OOM killer activate with 16gb last year on my physical machine so didn't want to risk wasting my time by being stingy on memory)\r\n* installing cmake and dependencies as explained [here](https://github.com/dotnet/runtime/blob/master/docs/workflow/requirements/linux-requirements.md#toolchain-setup).\r\n  * `wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null`\r\n  * `sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'`\r\n  * `sudo apt-get update`\r\n  * `sudo apt-get upgrade`\r\n  * `sudo apt-get install cmake llvm-9 clang-9 autoconf automake libtool build-essential python curl git lldb-6.0 liblldb-6.0-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libssl-dev libnuma-dev libkrb5-dev zlib1g-dev`\r\n* `sudo apt-get install debootstrap qemu-user-static`\r\n  Minimum additional dependencies for cross compilation, had those in my notes, the official documentation is [here](https://github.com/dotnet/runtime/blob/master/docs/workflow/building/coreclr/cross-building.md#requirements-for-targeting-debian-based-distros).\r\n* `git clone https://github.com/dotnet/runtime.git dotnet-runtime-x86`\r\n* `cd dotnet-runtime-x86`\r\n* `sudo ./eng/common/cross/build-rootfs.sh x86`\r\n* `export ROOTFS_DIR=/home/username/dotnet-runtime-x86/.tools/rootfs/x86`\r\n  don't forget to insert the right username ;-)\r\n\r\nNow you can build either\r\n* just the runtime\r\n  `./build.sh --subset clr.runtime --arch x86 --cross`\r\n* coreclr+corefx\r\n  `./build.sh --subset clr+libs --arch x86 --cross`\r\n* nuget packages\r\n  `./build.sh --subset clr+libs+corehost+installer.pkgprojs --arch x86 --cross`\r\n* full repo\r\n  `./build.sh --arch x86 --cross`\r\n\r\nIf you need detailed console output you can add `--verbosity detailed` (or some other level of your choice)\r\n\r\nFor what its worth I first was trying to build the `release/5.0-preview5` branch but that failed; master succeeded (commit `4224c4c16274b99791fbcc4e8fc987e64c4aaead`)\r\n\r\n[edit] streamlined the above workflow a bit after going through it a second time and making sure things work as expected\r\n\r\n</details>",
          "createdAt": "2020-05-17T19:57:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-17T19:58:58Z",
                "user": "Rudokhvist"
              },
              {
                "content": "HEART",
                "createdAt": "2020-05-17T19:59:01Z",
                "user": "Rudokhvist"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-17T20:56:53Z",
                "user": "cocowalla"
              },
              {
                "content": "HEART",
                "createdAt": "2020-05-18T02:33:08Z",
                "user": "sos-dll"
              },
              {
                "content": "HEART",
                "createdAt": "2020-05-19T20:42:20Z",
                "user": "deinok"
              },
              {
                "content": "HEART",
                "createdAt": "2020-05-25T13:52:30Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-25T14:00:50Z",
                "user": "ikkentim"
              },
              {
                "content": "HEART",
                "createdAt": "2021-12-23T15:16:25Z",
                "user": "robertobecchiniWR"
              },
              {
                "content": "HEART",
                "createdAt": "2022-02-06T19:45:15Z",
                "user": "alexrttr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-06T19:45:20Z",
                "user": "alexrttr"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOCNSKMQ=="
          },
          "updatedAt": "2020-05-19T06:02:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyOTg1MTg2OA=="
        },
        {
          "author": "sos-dll",
          "body": "@weltkante \r\nI tried this again. Got the same error.\r\n[bash-dump.html.txt](https://github.com/dotnet/runtime/files/4641507/bash-dump.html.txt)\r\n\r\n**edit**\r\nSo, I decided to check out the same commit version as you mentioned.\r\nAnd after running the same build command... Bizarre discovery here.\r\n![image](https://user-images.githubusercontent.com/53872123/82167889-748f2300-98bd-11ea-9b15-a4a125a8323d.png)\r\n.... 🤔 ....\r\nFinally! 🚀",
          "createdAt": "2020-05-18T01:06:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-18T02:13:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyOTg5Mjk4Nw=="
        },
        {
          "author": "Jopacari",
          "body": "Hi. \r\n\r\nHaving support for 32 bit is still relevant especially for efficient code running on containers or in VMs on the cloud. Reducing the memory footprint still has a significant impact on resources and cost.\r\nAny new on this matter? \r\n\r\nThank you.",
          "createdAt": "2020-06-12T13:55:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-08-14T09:30:00Z",
                "user": "SteppeHunter"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-08-14T10:11:48Z",
                "user": "cocowalla"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-08-14T12:09:37Z",
                "user": "weltkante"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-08-14T17:55:41Z",
                "user": "ntindle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-14T11:23:42Z",
                "user": "rsKliPPy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-06T06:51:33Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-12T09:44:59Z",
                "user": "rochus-keller"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-09T10:19:59Z",
                "user": "chawyehsu"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-04T15:24:24Z",
                "user": "kkartavenka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-14T11:32:14Z",
                "user": "BrunoJuchli"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOCSw1Qw=="
          },
          "updatedAt": "2020-06-12T13:55:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0MzI4MzA5NA=="
        },
        {
          "author": "sungam3r",
          "body": "Another vote for this feature.",
          "createdAt": "2020-08-14T09:56:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-14T09:56:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3Mzk5NTU0Nw=="
        },
        {
          "author": "SteppeHunter",
          "body": "> Hi.\r\n> \r\n> Having support for 32 bit is still relevant especially for efficient code running on containers or in VMs on the cloud. Reducing the memory footprint still has a significant impact on resources and cost.\r\n> Any new on this matter?\r\n> \r\n> Thank you.\r\n\r\n\r\nWe have same problem. We have no microservices that need 64 bit memory at all. So 32 bit CLR for Linux needed for efficient memory consumption on big Kubernetes cluster.",
          "createdAt": "2020-08-14T10:04:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-14T10:04:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3Mzk5ODc2MQ=="
        },
        {
          "author": "ikkentim",
          "body": "What are the main objections currently to not have 32 bit Linux support?\r\n\r\nAs far as I can tell, it works well with all the work that has been done over time to support x86...",
          "createdAt": "2020-12-22T10:35:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-22T10:35:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTQ3MjkzNw=="
        },
        {
          "author": "kannan83",
          "body": "same remark. why linux 32 bit support is not there ???? \r\ni too need to deploy a .NET app on a embeded machine ... ",
          "createdAt": "2020-12-30T23:04:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-04T15:25:11Z",
                "user": "kkartavenka"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCNJN3A=="
          },
          "updatedAt": "2020-12-30T23:04:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mjc4NDI1OQ=="
        },
        {
          "author": "Rudokhvist",
          "body": "I guess main showstopper for now is https://github.com/dotnet/runtime/issues/40003",
          "createdAt": "2020-12-31T10:17:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-31T10:17:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjkxNDkzNA=="
        },
        {
          "author": "fjelliott",
          "body": "So, how's this going? This also prevents GitHub Actions self-hosted runners from being run on 32-bit linux, since the runner itself is a .NET Core 3.1 app. An official Linux/x86 distribution is really necessary for some of us.",
          "createdAt": "2021-06-30T23:17:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-30T23:29:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTc4NzE5MA=="
        },
        {
          "author": "weltkante",
          "body": "[last time](https://github.com/dotnet/runtime/issues/7335#issuecomment-629851868) I checked this repo builds without issue against 32 bit linux (assuming you cross compile from 64 bit, the build runs out of memory when run on a true 32 bit machine), but the rest of the SDK didn't, so it wasn't possible to bootstrap the full SDK and just use it. Technically there is no work to be done in this repo (unless they regressed) but instead in the SDK repo where the other build scripts live. And for your usecase you'd probably have to convice them to add and maintain the packages, which they previously declined.\r\n\r\n(For reference, the other issue I've been on is dotnet/source-build#1235 which is probably where the work needs to be done, unless it already has been without updating that issue) [edit] I think I'm mixing up repos, thats not the link to the issue which was failing the SDK build, I'll look it up later today. `source-build` also failed but for different reasons.",
          "createdAt": "2021-07-01T06:31:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-01T12:03:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MTk2MzQ4OQ=="
        },
        {
          "author": "weltkante",
          "body": "just for the record, my [earlier attempt](https://github.com/dotnet/runtime/issues/7335#issuecomment-629851868) of cross compiling via rootfs and `--cross --arch x86` no longer works and now fails via\r\n> error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'linux-x86'.\r\n\r\nso something regressed or needs additional work besides setting up rootfs",
          "createdAt": "2021-07-04T19:02:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-08T16:01:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MzY0MjY5Mw=="
        },
        {
          "author": "ikkentim",
          "body": "What is the current status of this?\r\n\r\nI've tried to cross build `release/6.0` and `main` for x86 but I couldn't get it to run a simple hello world.\r\n\r\nHas anyone managed to build a usable .net 6/7 for linux-x86?",
          "createdAt": "2022-03-21T21:02:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-21T21:02:47Z",
          "id": "IC_kwDODI9FZc5ACkQi"
        },
        {
          "author": "weltkante",
          "body": "> Has anyone managed to build a usable .net 6/7 for linux-x86?\r\n\r\nI don't think it was .NET 6, the last working cross compile has been a long time ago, as reported earlier on this thread, and only the runtime not the full SDK. The [above regression](https://github.com/dotnet/runtime/issues/7335#issuecomment-873642693) is still present as of a few months ago when I [last tried](https://github.com/dotnet/runtime/issues/31180#issuecomment-1006882497).",
          "createdAt": "2022-03-21T21:14:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-21T21:17:12Z",
          "id": "IC_kwDODI9FZc5ACm0a"
        },
        {
          "author": "gbalykov",
          "body": ".net6 (at least `v6.0.0`) and .net7 (`main`) runtime cross builds for linux x86 successfully right now. Build command for .net7:\r\n```sh\r\nsudo ./eng/common/cross/build-rootfs.sh x86 bionic\r\nROOTFS_DIR=`pwd`/.tools/rootfs/x86 ./build.sh --cross --clang9 --arch x86 --runtimeConfiguration Release --librariesConfiguration Release --subset clr.hosts+clr.runtime+clr.jit+clr.corelib+clr.iltools+libs.native+libs.sfx+libs.oob+libs.packages\r\n```\r\n\r\nTo pack artifacts:\r\n```sh\r\nmkdir runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/{corerun,ilasm,ildasm,*.so} runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/IL/System.Private.CoreLib.dll runtime_x86\r\ncp artifacts/bin/native/net7.0-Linux-Release-x86/*.so runtime_x86\r\ncp artifacts/bin/microsoft.netcore.app.runtime.linux-x86/Release/runtimes/linux-x86/lib/net7.0/*.dll runtime_x86\r\n```\r\n\r\nI've not tested .net7, but .net6 runs simple helloworld successfully. ",
          "createdAt": "2022-03-22T07:56:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2022-03-22T08:16:09Z",
                "user": "weltkante"
              },
              {
                "content": "EYES",
                "createdAt": "2022-03-23T11:36:10Z",
                "user": "markusschaber"
              },
              {
                "content": "EYES",
                "createdAt": "2022-03-23T17:34:29Z",
                "user": "ikkentim"
              },
              {
                "content": "EYES",
                "createdAt": "2023-07-30T18:34:57Z",
                "user": "minemaz"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODCM6zA=="
          },
          "updatedAt": "2022-03-22T09:28:56Z",
          "id": "IC_kwDODI9FZc5AENQE"
        },
        {
          "author": "ikkentim",
          "body": "@gbalykov I'm on branch release/6.0. Subsets `clr.hosts libs.sfx libs.oob` are not available here so I've built `clr.runtime+clr.jit+clr.corelib+clr.iltools+libs.native+libs+libs.packages` instead. But I'm getting segmentation faults when running a helloworld. Do you have any suggestions for how I can try to fix this?\r\n\r\n\r\n\r\n```\r\nsudo ./eng/common/cross/build-rootfs.sh x86 bionic\r\nROOTFS_DIR=`pwd`/.tools/rootfs/x86 ./build.sh --cross --clang9 --arch x86 --runtimeConfiguration Release --librariesConfiguration Release --subset clr.runtime+clr.jit+clr.corelib+clr.iltools+libs.native+libs+libs.packages\r\nmkdir runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/{corerun,ilasm,ildasm,*.so} runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/IL/System.Private.CoreLib.dll runtime_x86\r\ncp artifacts/bin/native/net6.0-Linux-Release-x86/*.so runtime_x86\r\ncp artifacts/bin/microsoft.netcore.app.runtime.linux-x86/Release/runtimes/linux-x86/lib/net6.0/*.dll runtime_x86\r\n```\r\n\r\n```\r\ncd runtime_x86 && gdb corerun\r\n> run ../../helloworld/bin/release/net6.0/helloworld.dll\r\n\r\nThread 1 \"corerun\" received signal SIGSEGV, Segmentation fault.\r\n0xf7a703f4 in JIT_WriteBarrierEAX_Loc () from /home/tim/runtime6/runtime_x86/libcoreclr.so\r\n```\r\n",
          "createdAt": "2022-03-23T21:33:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-23T21:34:10Z",
          "id": "IC_kwDODI9FZc5AL01D"
        },
        {
          "author": "gbalykov",
          "body": "I've checked current main (7d1191e32208702899eec55aa622b6aff99986e1) and it segfaults on xubuntu 18.04 i386 on simple helloworld.\r\n\r\nHowever, `v6.0.0` tag works, but I forgot to mention that you'll also need next patches for `.net6` to fix some linux x86 related issues:\r\n- https://github.com/dotnet/runtime/pull/57244\r\n- https://github.com/dotnet/runtime/pull/59417\r\n- https://github.com/dotnet/runtime/pull/60817\r\n\r\nJust for reference, to build runtime I use:\r\n```sh\r\nsudo ./eng/common/cross/build-rootfs.sh x86 bionic\r\nROOTFS_DIR=`pwd`/.tools/rootfs/x86 ./build.sh --cross --clang9 --arch x86 --runtimeConfiguration Release --librariesConfiguration Release --subset clr.runtime+clr.jit+clr.corelib+clr.iltools+libs.native+libs.ref+libs.src+libs.packages\r\nmkdir runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/{corerun,ilasm,ildasm,*.so} runtime_x86\r\ncp artifacts/bin/coreclr/Linux.x86.Release/IL/System.Private.CoreLib.dll runtime_x86\r\ncp artifacts/bin/native/net6.0-Linux-Release-x86/*.so runtime_x86\r\ncp artifacts/bin/microsoft.netcore.app.runtime.linux-x86/Release/runtimes/linux-x86/lib/net6.0/*.dll runtime_x86\r\n```",
          "createdAt": "2022-03-24T11:49:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-24T11:50:37Z",
          "id": "IC_kwDODI9FZc5AOgG-"
        },
        {
          "author": "ikkentim",
          "body": "Thanks! With those patches tag `v6.0.3` also works.",
          "createdAt": "2022-03-24T19:33:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-24T19:33:25Z",
          "id": "IC_kwDODI9FZc5AQVXx"
        },
        {
          "author": "ta264",
          "body": "With the above 3 patches, and this one also:\r\nhttps://github.com/dotnet/runtime/pull/68046\r\n\r\nI can build a complete SDK for linux-x86 which seems to be functional.\r\n\r\nThe build pipeline, SDKs for .NET 6 and .NET 7 preview 3, and a Nuget feed with the AppHosts etc are here:\r\nhttps://github.com/Servarr/dotnet-linux-x86\r\n",
          "createdAt": "2022-04-14T19:58:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-04-14T20:33:19Z",
                "user": "deinok"
              },
              {
                "content": "HEART",
                "createdAt": "2022-04-21T12:17:11Z",
                "user": "markusschaber"
              },
              {
                "content": "HEART",
                "createdAt": "2023-06-01T20:59:23Z",
                "user": "zacanbot"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-22T14:31:51Z",
                "user": "vscunha"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-25T09:42:21Z",
                "user": "weltkante"
              },
              {
                "content": "HEART",
                "createdAt": "2024-12-14T21:51:09Z",
                "user": "MrDave1999"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOD_BkTQ=="
          },
          "updatedAt": "2022-04-14T19:58:46Z",
          "id": "IC_kwDODI9FZc5Biime"
        },
        {
          "author": "Adinihal",
          "body": "Hi @ta264,\r\nactually I am completely new to linux , but I got a requirement for running a 32bit console app in linux as this [](https://github.com/Servarr/dotnet-linux-x86)  we can run can you please tell me the steps for this how can I create a build of this Linux-x86 in my ubantu and run a simple .net 32 bit console application,\r\n\r\nthanks",
          "createdAt": "2024-01-31T08:41:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-31T08:41:28Z",
          "id": "IC_kwDODI9FZc5yXBWa"
        },
        {
          "author": "weltkante",
          "body": "@Adinihal just to make sure you didn't miss the main point of the thread, 32bit Linux is (intentionally) not supported by Microsoft but put together by the community, so if your \"requirement\" implies having support when things break then its better to reject the 32bit requirement as \"not supported by Microsoft\" rather than putting yourself into a bad spot where you'll have to learn the hard way how to do things yourself. Making an unsupported runtime work on a new (for you) system is not exactly an easy project to get started with Linux. (Just a friendly advice if you didn't read the thread and weren't aware.)",
          "createdAt": "2024-01-31T09:29:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-09T14:21:41Z",
                "user": "markusschaber"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODxh--Q=="
          },
          "updatedAt": "2024-01-31T09:29:50Z",
          "id": "IC_kwDODI9FZc5yXUrB"
        },
        {
          "author": "josephmoresena",
          "body": "Is there any progress on this? @ta264 Does NativeAOT work with this?",
          "createdAt": "2024-08-20T13:43:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T13:43:16Z",
          "id": "IC_kwDODI9FZc6JBmcJ"
        },
        {
          "author": "nsobiratel",
          "body": "> With the above 3 patches, and this one also: [#68046](https://github.com/dotnet/runtime/pull/68046)\n> \n> I can build a complete SDK for linux-x86 which seems to be functional.\n> \n> The build pipeline, SDKs for .NET 6 and .NET 7 preview 3, and a Nuget feed with the AppHosts etc are here: https://github.com/Servarr/dotnet-linux-x86\n\nHi. Can u help? i try use release build, but cannot install nupkg with error \"NETSDK1082\tThere was no runtime pack for Microsoft.NETCore.App available for the specified RuntimeIdentifier 'linux-x86'. VS 2022. Or required only linux host with installed sdk from release? Can u write all requirements (or steps) to use it?\n\npackage manager output contain lines:\n```\nNU1213: The package Microsoft.NETCore.App.Runtime.linux-x86 6.0.35 has a package type DotnetPlatform that is incompatible with this project. \nPackage 'Microsoft.NETCore.App.Runtime.linux-x86 6.0.35' has a package type 'DotnetPlatform' that is not supported by project.\n```",
          "createdAt": "2025-08-28T11:44:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-28T11:50:42Z",
          "id": "IC_kwDODI9FZc7Atjdg"
        }
      ],
      "totalCount": 105,
      "endCursor": "Y3Vyc29yOnYyOpHOEaQJlg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/7335",
    "title": "x86/Linux progress"
  },
  {
    "author": "tannergooding",
    "labels": [
      "design-discussion",
      "area-Meta",
      "tenet-compatibility",
      "tenet-performance"
    ],
    "createdAt": "2017-09-23T22:57:38Z",
    "body": "As per the title, both `System.Math` and `System.MathF` should have most of their extern methods implemented in managed code rather than being FCALLs to the underlying C runtime.\r\n\r\nThis will ensure:\r\n* Consistency across operating systems and architectures\r\n* Implementations can be more readily updated without requiring changes in the runtime proper\r\n\r\nSome of the functions (such as `Abs`, `Ceil`, `Floor`, `Round`, and `Sqrt`) are simple enough that they can be implemented in managed code today and still maintain the performance characteristics.\r\n\r\nOther functions (such as `Cos`, `Sin`, and `Tan`) will need to wait until the hardware intrinsics proposal is more widely available (since maintaining perf numbers will require an implementation to call said intrinsics).",
    "number": 9001,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-05-19T19:00:04Z",
          "user": "smasher164"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-15T04:04:10Z",
          "user": "MineCake147E"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-11T08:54:08Z",
          "user": "Marlax0"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-01T19:32:19Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-08T13:59:58Z",
          "user": "sfiruch"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-25T13:58:30Z",
          "user": "julealgon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-11T08:19:46Z",
          "user": "vertexfox"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOC-DlYA=="
    },
    "updatedAt": "2025-03-16T19:14:14Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "tannergooding",
          "body": "FYI. @mellinoe",
          "createdAt": "2017-09-23T22:57:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-23T22:57:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTY3NTAzMA=="
        },
        {
          "author": "jkotas",
          "body": "I do not think that this is necessarily a good idea. It makes the runtime less portable. The C runtime implementations of these functions are a fine default implementation.\r\n\r\n If we want to make the implementation better on some platforms, that's ok - but it should not be the requirement for all platforms.",
          "createdAt": "2017-09-24T04:28:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-24T04:28:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTY4NjQzOQ=="
        },
        {
          "author": "tannergooding",
          "body": "@jkotas, how does it make the runtime \"less portable\"?\r\n\r\nCurrently, we are tied to a particular implementation of the C runtime for each platform. This leads to:\r\n* inconsistencies in behavior when intrinsics are not used\r\n* requires runtime updates/workarounds to resolve bugs\r\n* has lead to additional overhead in the PAL layer to ensure other platforms \"conform\" to the Windows behavior\r\n* leads to significant perf differences between the OS platforms (when intrinsics are not being used)\r\n* etc\r\n\r\nI would think providing a managed implementation makes it more portable since it means:\r\n* fewer inconsistencies when intrinsics are not used\r\n* updates can be made to just corlib (no changes to native code required)\r\n  * This applies to bug fixes, IEEE spec compliances fixes, improvements, etc\r\n* no additional hacks, overhead, or conformance tests in the PAL layer\r\n* codegen/perf should be the same between OS platforms on the same hardware\r\n* etc\r\n\r\nFor all of these we should obviously ensure that codegen and perf remain on-par with what we have today.\r\n\r\nSome of the functions, such as `Abs` (https://github.com/dotnet/coreclr/pull/14156) are trivial to do that with (since their implementation is so simple)\r\n\r\nOthers (such as `Floor`, `Ceiling`, and `Round`), are slightly more complicated, but should still be doable with hardware intrinsics (and keeping them equally as performant).\r\n\r\nThe remaining (such as `Cos`, `Tan`, and `Sin`) are known to require hardware intrinsics to complete this.\r\n",
          "createdAt": "2017-09-24T08:00:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-24T08:00:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTY5NDEzNA=="
        },
        {
          "author": "jkotas",
          "body": "> hardware intrinsics\r\n\r\nIf porting to a new hardware platform requires implementing a ton of intrinsics in the CodeGen, you have added like one man-year to the porting cost. It is what makes the runtime less portable.",
          "createdAt": "2017-09-24T14:49:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-24T14:49:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTcxNDkzNw=="
        },
        {
          "author": "tannergooding",
          "body": "> If porting to a new hardware platform requires implementing a ton of intrinsics in the CodeGen, you have added like one man-year to the porting cost.\r\n\r\nIt does not, strictly speaking, require this. It only likely requires this for producing the most performant code.\r\n\r\nIt is also, strictly speaking, entirely possible to set the \"intrinsic\" for these functions on new hardware architectures to be the CRT implementation by default (provided they are IEEE compliant), if the software fallback's performance is considered too poor.\r\n\r\nThat being said, we already have the case today, when using the CRT implementation, that the majority of the functions on some platforms are considerably poorer (330% slower in the worst case): https://github.com/dotnet/coreclr/issues/9373.\r\n\r\nThis proposal gives us a standard baseline of \"correctness\" in the software implementation where any hardware specific improvements can readily be checked. It also allows us to check that the underlying CRT implementation (if it were to be used as the intrinsic) is compatible with our expectations.\r\n\r\n\r\n",
          "createdAt": "2017-09-24T15:32:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-30T07:10:29Z",
                "user": "kjbartel"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-15T04:06:48Z",
                "user": "MineCake147E"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-08T14:00:58Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODhIIsA=="
          },
          "updatedAt": "2017-09-24T15:32:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTcxNzYzMA=="
        },
        {
          "author": "AndyAyersMS",
          "body": "A few places where this might unlock some perf:\r\n\r\n* On Windows x86 the the jit now uses SSE2 internally but X87 at the ABI boundaries, so there is extra overhead involved in calling into native math helpers. There are is a custom ABI library that the C++ compiler uses to get around this (libm_sse2) but we would need to do work in the runtime and jit to enable calling those library routines from managed code. So having managed implementations, especially for the simpler methods with short path lengths, could provide a nice perf boost on X86.\r\n\r\n* In the SYSV X64 ABI there are no callee-saved XMM registers, so the inability of the jit to inline math helpers leads to extra XMM spill/reloads.",
          "createdAt": "2017-09-25T16:23:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-25T16:47:28Z",
                "user": "tannergooding"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-25T18:50:31Z",
                "user": "fiigii"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-08T14:01:15Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODhII2w=="
          },
          "updatedAt": "2017-09-25T16:23:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTkzNTQ0Ng=="
        },
        {
          "author": "jkotas",
          "body": "As I have said, I am fine with using C# implementation that depends on intrinsics on platforms where we have deeper codegen investments.\r\n\r\nThe best implementation of Abs for x64 is actually: `public static double Abs(double value) => Abs(value)`. This assumes that the Abs intrinsic will be force expanded - being done as part of dotnet/coreclr#14020. This implementation is both best performing and also guarantees consistent behavior between the inlined cases and the method being called by reflection or via delegate.\r\n\r\nFor bring up of new platforms or platforms with less codegen investment, the C runtime implementation is the default. It may not be as good or it can have different behavior in corner cases - but it is good enough. For example, I do not ever want to have a software fallback for `cos` to be implemented in managed code. I always want to use the C runtime implementation for that.",
          "createdAt": "2017-09-25T16:49:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-25T16:49:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMTk0MjU2OQ=="
        },
        {
          "author": "fanoI",
          "body": "Having a managed version will not do the porting easier? For example suppose you want to port Net Core to MIPS you have not worry to port Math / FMath initially and you have time to debug other issues, the Math optimization using Hardware Intrinsics / calling C run time could be done after.\r\n\r\nOr I'm missing something?",
          "createdAt": "2017-09-26T08:52:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-26T08:52:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMjEzMTc0MQ=="
        },
        {
          "author": "jkotas",
          "body": "For porting, you do not have to worry about the C runtime either (porting CoreCLR to a platform without C runtime is non-scenario). \r\n\r\nAnd the C runtime functions will be better debugged and have better performance than a software based callback written in C# (on platforms without deeper codegen investment).",
          "createdAt": "2017-09-26T12:10:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-09-26T12:10:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMjE3ODI3NA=="
        },
        {
          "author": "migueldeicaza",
          "body": "There are several problems with this proposal, but to me the major problem is that it moves the maintenance and fixing from the underlying platform to us for what is a very well established, maintained and universally understood API.\r\n\r\nThe stated goal of \"consistency across operating systems and platforms\" has been troublesome in the past for things like Unicode string collation.   Mono emulated the Windows behavior, while .NET Core took the native approach - and I think that the approach that .NET core took of using libICU instead of trying to emulate the Windows behavior was the right one.   \r\n\r\nPorting to a new platform already requires an advanced libc to be available, or an equivalent.   Not only for the managed bridges, but the runtime itself (CoreCLR and Mono) both consume `abs`, `floor`, `ceil` and for things like sqrt, they tend to be mapped to CPU instructions.   \r\n\r\nThere is the performance issue as well, which Jan just touched on.\r\n\r\n",
          "createdAt": "2017-09-26T13:21:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2017-09-26T14:47:33Z",
                "user": "jkotas"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOANqH2Q=="
          },
          "updatedAt": "2017-09-26T13:21:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDMzMjE5NTk3NA=="
        },
        {
          "author": "tannergooding",
          "body": "AMD has open sourced a snapshot of the libm implementation that is currently used by Windows x64: <https://github.com/amd/win-libm> (plus a few improvements that haven't been picked up yet).\r\n\r\nThis, combined with other open source libm implementations such as the one from ARM: <https://github.com/ARM-software/optimized-routines>, should allow us to provide a portable implementation that is both IEEE compliant and deterministic.\r\n\r\nWe could do that by contributing back to the existing libraries and picking an implementation as the \"de-facto\" standard to pull in, or we could do that by porting the code to C#.\r\n\r\nI would lean towards the former (picking an implementation as the \"de-facto\" standard), but I think the latter has some interesting possibilities as well. Not only would it be able to play with .NET code better (such as being GC aware), but it can also take some optimizations that the standard C code doesn't have available (such as not needing to worry about exception handling or alternative rounding modes, since .NET doesn't currently support those).",
          "createdAt": "2019-08-02T14:36:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-02T14:36:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxNzcyNDU4OQ=="
        },
        {
          "author": "tcwicks",
          "body": "Just a comment after many weeks of frustration.\r\nMany years running and MathF is perhaps the single most frustrating and categorically worst implementation of anything within Dot Net. I cannot actually think of any way this could be messed up more than it already is. Even the nuget packages could not have been messed up any more.\r\nI guess I now know why Unity still maintain their parallel implementation completely disregarding this mess.",
          "createdAt": "2020-03-28T08:03:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "CONFUSED",
                "createdAt": "2023-03-10T16:41:39Z",
                "user": "danmoseley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC3mjuQ=="
          },
          "updatedAt": "2020-03-28T08:03:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNTQxMTE5OQ=="
        },
        {
          "author": "tannergooding",
          "body": "@tcwicks, could you please explain what problems you are having and why you are having difficulties with the design?",
          "createdAt": "2020-03-28T14:02:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-28T14:02:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNTQ1MTMzMg=="
        },
        {
          "author": "kilngod",
          "body": "As someone interested in .Net being a first-class IEEE standards high performance computing platform I agree with @tannergooding we should support libm implementation in x64 and ARM. The \"C runtime implementations\" as stated by @jkotas are not suitable for anything but substandard floating point performance. The C runtime is not good enough for today's machine learning and IEEE computing needs. The C runtime is little more than a all else fails compute fallback option. I have no idea why the .Net team spent all these years making an awesome high performance cross platform library then wants to drop the ball on IEEE and machine learning compute. \r\n\r\nHow many high performance compute architectures outside of ARM and X64 do we need to support outside of the C runtime? Zero. Should we have a way to all vendors to add compute libraries? Yes! We only need high performance compute on these two platforms. Processor makers should be able to add compute libraries as plugins to .Net rather than having a narrow minded approach to what is good enough.",
          "createdAt": "2022-06-10T02:37:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-10T02:37:28Z",
          "id": "IC_kwDODI9FZc5Ep_Vu"
        },
        {
          "author": "sfiruch",
          "body": "Hoping to get some traction on this idea. The main reason is performance, as the libc implementations can be slow and may require register shuffling to call. Additionally, I'd love identical results on different platforms. I understand that only a subset of users has these priorities.\r\n\r\nI think the ScalB \"experiment\" went well. The other regularly reported problematic functions are pow, exp, sin and cos. I believe, having those four in managed code would solve most problems.",
          "createdAt": "2024-05-08T14:07:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-08T14:07:33Z",
          "id": "IC_kwDODI9FZc59Nbmf"
        },
        {
          "author": "sfiruch",
          "body": "Still struggling with bad performance of `fmod`, `pow` and `cosf` in my projects, like others (see #10798, #13336, #48776).\n\nIt seems since .NET9 the runtime already contains managed math implementations for `Vector` and `Tensor`, e.g. https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs,daa3022f57e1c08a. These implementations are vectorized C#-translations of AOCL routines, and perform well in my tests.\n\nGiven this precedent, I'd be happy port scalar `pow`, `cos`, `sin`, `exp` and `fmod` implementations from AOCL to Math. Would you be interested in such a PR?",
          "createdAt": "2024-11-22T23:01:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-22T23:01:43Z",
          "id": "IC_kwDODI9FZc6Ut5aT"
        },
        {
          "author": "kilngod",
          "body": "Simon - as a third-party devs we're in complete agreement with you and would be 100% interested in you porting these functions to managed code as the c runtime is less than optimal. If the .net team already wrote managed code for these functions, we are mystified why they did not update these routines to managed code. We would likely want to back port this .net 8, just for consistency... one can dream.",
          "createdAt": "2024-11-23T14:23:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-23T14:23:09Z",
          "id": "IC_kwDODI9FZc6Uvj6U"
        },
        {
          "author": "tannergooding",
          "body": "> If the .net team already wrote managed code for these functions, we are mystified why they did not update these routines to managed code\n\nVector vs scalar algorithms are a bit different in how they handle various logic due to the difference in handling many values simultaneously vs a single value at a time.\n\nThere are in some cases notably also minor accuracy differences between the two of them; where it is acceptable for net new vectorized algorithms to have slightly higher amounts of error due to typical use-case and the fact they are \"net new\" APIs. We can then improve that accuracy and/or performance over time for the less likely edge cases.\n\n> We would likely want to back port this .net 8, just for consistency... one can dream.\n\nThat's unlikely to happen for many reasons.\n\n> Given this precedent, I'd be happy port scalar pow, cos, sin, exp and fmod implementations from AOCL to Math. Would you be interested in such a PR?\n\nNormally the answer would be: yes. However, I've already got much of the work done and there's not really any need for you to re-port things.\n\nThere's only so much work that I (and the broader team in general) can do (design, implement, review, document, etc) in a given release so not everything ends up in a single release. For .NET 9 the focus was primarily on providing vectorized versions of the \"core\" math APIs. In .NET 10 we plan on continuing with vectorizing the rest of the math APIs and at least getting reviews up for ports of some of the scalar APIs (I just have to finish getting the pending community PRs reviewed/merged into .NET 10 first, before I start getting even more PRs and work up; so things don't get overly stale, so things can stay manageable, etc).\n\nIn the interim, as of .NET 9 developers have access to accelerated and deterministic math already by functionally doing `Vector128.Sin(Vector128.CreateScalarUnsafe(value)).ToScalar()` for example. It is indeed a bit more verbose, but it gets the job done in the interim.",
          "createdAt": "2024-11-23T19:01:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-23T19:02:41Z",
          "id": "IC_kwDODI9FZc6UwC1U"
        },
        {
          "author": "sfiruch",
          "body": "> > Given this precedent, I'd be happy port scalar pow, cos, sin, exp and fmod implementations from AOCL to Math. Would you be interested in such a PR?\n> \n> Normally the answer would be: yes. However, I've already got much of the work done [...]\n\nThat is fantastic news! 👍👍👍\n\n\n> In the interim, as of .NET 9 developers have access to accelerated and deterministic math already by functionally doing `Vector128.Sin(Vector128.CreateScalarUnsafe(value)).ToScalar()` for example. It is indeed a bit more verbose, but it gets the job done in the interim.\n\nUnfortunately, this alternative was slower than MathF.\n\n(For others thinking about going this route: `pow` and `fmod` are not [yet?] implemented on `Vector128`.)",
          "createdAt": "2024-11-24T15:40:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-24T15:40:45Z",
          "id": "IC_kwDODI9FZc6Uxvv3"
        },
        {
          "author": "kilngod",
          "body": "I know our leader of the ILGPU project has been unimpressed with dotnet team’s level of interest in scientific computing. Clearly the tensor library is an outgrowth of AI, which goes hand in hand with scientific computing. Microsoft Research believes AI powered PDE solvers are the future, would be nice to have fully baked scientific primitives in the library rather current assumption everyone only codes in python/C++ for scientific compute.\r\n\r\nGet Outlook for iOS<https://aka.ms/o0ukef>\r\n________________________________\r\nFrom: Simon Felix ***@***.***>\r\nSent: Sunday, November 24, 2024 9:41:07 AM\r\nTo: dotnet/runtime ***@***.***>\r\nCc: James Carpenter ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] System.Math and System.MathF should be implemented in managed code, rather than as FCALLs to the C runtime (#9001)\r\n\r\n\r\nGiven this precedent, I'd be happy port scalar pow, cos, sin, exp and fmod implementations from AOCL to Math. Would you be interested in such a PR?\r\n\r\nNormally the answer would be: yes. However, I've already got much of the work done [...]\r\n\r\nThat is fantastic news! 👍👍👍\r\n\r\nIn the interim, as of .NET 9 developers have access to accelerated and deterministic math already by functionally doing Vector128.Sin(Vector128.CreateScalarUnsafe(value)).ToScalar() for example. It is indeed a bit more verbose, but it gets the job done in the interim.\r\n\r\nUnfortunately, this alternative was slower than MathF.\r\n\r\n(For others thinking about going this route: pow and fmod are not [yet?] implemented on Vector128.)\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/runtime/issues/9001#issuecomment-2496068599>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AL2R3SEWNSYYG7EG2X5I3FD2CHXRHAVCNFSM6AAAAABSKK3P62VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIOJWGA3DQNJZHE>.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-11-24T17:28:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-24T17:28:02Z",
          "id": "IC_kwDODI9FZc6Ux9Fq"
        },
        {
          "author": "tannergooding",
          "body": "> Unfortunately, this alternative was slower than MathF.\n\nDefinitely possible in some cases, since there are still some edge cases that may not be as accelerated or which need to do additional handling for some inputs. \n\nFor example with `Sin` the algorithm is essentially the same as the scalar version: https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs,3d27c378a9052483,references\n\nHowever, since it has to consider all `Count` elements simultaneously, it effectively pessimizes to the worst case. So, if for `Vector128<float>` all 4 elements are `(pi / 4) >= |x|` you get the best handling/perf. However, if any element is outside that range then a reduction is required and that adds expense if the first element (which is all you care about for scalars) is in the lesser range.\n\nDoing `Vector128.Create(value)` instead of `CreateScalarUnsafe` can mitigate the cost for such APIs; however, there are still some edge cases (such as very large inputs for other APIs) where there isn't acceleration available yet (it was less crucial because such values are atypical and so it got pushed out to .NET 10 to accelerate the edge cases).",
          "createdAt": "2024-11-24T17:28:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-11-24T19:44:39Z",
                "user": "sfiruch"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD8SZLg=="
          },
          "updatedAt": "2024-11-24T17:28:46Z",
          "id": "IC_kwDODI9FZc6Ux9f8"
        },
        {
          "author": "PavelCibulka",
          "body": "Is there a possibility of implementing a consistent Cbrt() function across various hardware platforms? It would be highly beneficial, especially for calculations related to 3D space.\n\nThe Intel C 2023 implementation appears to be the most effective at the moment and could serve as a solid foundation, provided the source code is accessible.\nhttps://stackoverflow.com/questions/57344522/optimization-of-cbrt-in-c",
          "createdAt": "2025-03-16T19:14:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-16T19:14:14Z",
          "id": "IC_kwDODI9FZc6ik-dr"
        }
      ],
      "totalCount": 22,
      "endCursor": "Y3Vyc29yOnYyOpHOopPnaw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/9001",
    "title": "System.Math and System.MathF should be implemented in managed code, rather than as FCALLs to the C runtime"
  },
  {
    "author": "evil-shrike",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2017-12-21T11:18:36Z",
    "body": "Currently there's the lack of transparency what is going on with corefx packages published on nuget.org.\r\nFor example, in VS with my solution I open \"Manage NuGet Packages for solution\" and on \"Updates\" tab I can see that there's an update for System.Data.SqlClient. I have 4.4.0 but there's a newer 4.4.2 already.\r\nCool. Of cause I'll install it but I wonder what have changed.\r\nThere's no link to package page on nuget.org in VS UI btw. So I open nuget.org and search for System.Data.SqlClient. On [package's page](https://www.nuget.org/packages/System.Data.SqlClient) I can see the section \"Release Notes\" with this link - https://go.microsoft.com/fwlink/?LinkID=799421\r\nIt targets to https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.0-preview1.md\r\nMm. Kind of obsolete.\r\nNothing more.\r\n",
    "number": 24501,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2017-12-21T12:04:48Z",
          "user": "magol"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2017-12-29T17:34:12Z",
          "user": "jnm2"
        },
        {
          "content": "HEART",
          "createdAt": "2017-12-29T17:34:20Z",
          "user": "jnm2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-01-12T13:50:23Z",
          "user": "stijnherreman"
        },
        {
          "content": "HEART",
          "createdAt": "2018-02-16T01:34:15Z",
          "user": "madelson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-03-04T09:09:37Z",
          "user": "VadimOvchinnikov"
        },
        {
          "content": "HEART",
          "createdAt": "2018-03-04T09:09:39Z",
          "user": "VadimOvchinnikov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-03-10T06:28:41Z",
          "user": "johnkors"
        },
        {
          "content": "HEART",
          "createdAt": "2018-03-10T06:28:42Z",
          "user": "johnkors"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-04-02T03:38:46Z",
          "user": "Mirandatz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-04-18T23:45:19Z",
          "user": "madelson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-05-18T21:49:07Z",
          "user": "MrJul"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2018-12-13T11:15:29Z",
          "user": "paulomorgado"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-05-15T09:27:04Z",
          "user": "Greg-Smulko"
        },
        {
          "content": "HEART",
          "createdAt": "2019-05-15T09:27:05Z",
          "user": "Greg-Smulko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-06-23T19:05:04Z",
          "user": "ViktorHofer"
        },
        {
          "content": "HEART",
          "createdAt": "2019-06-23T19:05:08Z",
          "user": "ViktorHofer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-06-23T23:44:15Z",
          "user": "CompileNix"
        },
        {
          "content": "HEART",
          "createdAt": "2019-06-23T23:44:16Z",
          "user": "CompileNix"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-06-24T00:25:23Z",
          "user": "patricksuo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-08-19T07:52:30Z",
          "user": "danielchalmers"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-12-09T09:30:32Z",
          "user": "DanielSchuessler"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-22T10:27:46Z",
          "user": "jnyrup"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-09T10:30:16Z",
          "user": "xsoheilalizadeh"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-09T10:30:17Z",
          "user": "xsoheilalizadeh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-09T13:55:14Z",
          "user": "Thieum"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-09T15:34:11Z",
          "user": "Kryptos-FR"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-04-30T13:15:52Z",
          "user": "TimAlonso"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-05-07T02:21:42Z",
          "user": "fowl2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-03T06:49:39Z",
          "user": "issue-dispenser"
        }
      ],
      "totalCount": 30,
      "endCursor": "Y3Vyc29yOnYyOpHOBGzYSg=="
    },
    "updatedAt": "2022-05-06T15:45:44Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "magol",
          "body": "I have the same question when a new version is released.",
          "createdAt": "2017-12-21T12:05:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-21T12:05:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1MzMzNDgxMA=="
        },
        {
          "author": "karelz",
          "body": "@weshaggard @leecow are there any plans here?",
          "createdAt": "2017-12-22T16:41:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2017-12-22T16:41:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1MzYzMzgwNw=="
        },
        {
          "author": "madelson",
          "body": "Related to https://github.com/dotnet/corefx/issues/23570\r\n  ",
          "createdAt": "2017-12-27T19:55:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-01-03T11:33:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1NDE2ODk2Mg=="
        },
        {
          "author": "weshaggard",
          "body": "I'm not aware of any plans but I agree it would be nice, although it is a fair amount of data collection and coordination with our releases which are generally handled by our PM team @leecow @richlander @terrajobst. ",
          "createdAt": "2018-01-03T00:21:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-01-03T00:21:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1NDkxMDg4Mg=="
        },
        {
          "author": "karelz",
          "body": "Maybe all we need to do is to update the FWD link to point to the latest? Would that be sufficient middle ground?",
          "createdAt": "2018-01-03T01:04:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-01-03T01:04:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1NDkxNjgxNA=="
        },
        {
          "author": "weshaggard",
          "body": "That would be a step in the right direction but it sounds like what folks are after are release notes for individual packages which I don't think we really maintain currently. ",
          "createdAt": "2018-01-03T01:24:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-01-03T11:33:42Z",
                "user": "madelson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOARASiQ=="
          },
          "updatedAt": "2018-01-03T01:24:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM1NDkxOTA4NA=="
        },
        {
          "author": "leecow",
          "body": "The latest incarnation of the release notes includes packages that have changed as well as commit shas. \r\n\r\nWhat to link from the nuget.org pages is another question entirely. The problem with updating and fwlink is that the current release notes will have nothing to do with most packages as they haven't changed.",
          "createdAt": "2018-02-15T21:11:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-02-15T21:11:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM2NjA2MjgzMw=="
        },
        {
          "author": "madelson",
          "body": "@leecow would it be so hard to maintain a release notes md file for each package which highlights the changes for each version?",
          "createdAt": "2018-02-16T01:33:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-02-16T01:43:02Z",
                "user": "jnm2"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOASwkig=="
          },
          "updatedAt": "2018-02-16T01:33:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM2NjExOTc3Ng=="
        },
        {
          "author": "leecow",
          "body": "@madelson, not with appropriate processes and automation in place ;-) Will put it on the plate to figure out what this might look like to properly cover the ~170 packages and native libs included in NETCore.App as a starting point. ",
          "createdAt": "2018-02-16T18:09:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-02-16T18:31:14Z",
                "user": "jnm2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-02-16T21:56:40Z",
                "user": "magol"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-02-17T00:26:41Z",
                "user": "madelson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-03-10T06:24:02Z",
                "user": "johnkors"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-05-18T21:49:51Z",
                "user": "MrJul"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-17T08:19:21Z",
                "user": "JakubHolovsky"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOAo1ayQ=="
          },
          "updatedAt": "2018-02-16T18:09:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM2NjMxMzc0OA=="
        },
        {
          "author": "johnkors",
          "body": "> The problem with updating and fwlink is that the current release notes will have nothing to do with most packages as they haven't changed.\r\n\r\nWhy do you release versions without changes..? ",
          "createdAt": "2018-03-10T06:28:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-03-10T20:26:58Z",
                "user": "madelson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-12T21:04:59Z",
                "user": "SEnglishSMP"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODAha3Q=="
          },
          "updatedAt": "2018-03-10T06:28:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3MjAwNzE4Mw=="
        },
        {
          "author": "johnkors",
          "body": "Related scenario: I find something not working with `System.Data.SqlClient` in the latest version, but when I google I find a merged PR on GitHub addressing the issue. In what versions is the fix?\r\n\r\nExample: https://github.com/dotnet/corefx/pull/27523\r\nToday, I have to ask a corefx dev: https://github.com/dotnet/corefx/issues/27686#issuecomment-370871977\r\n\r\nDo you have any way for me to find out myself what version contains the fix, so I don't have to bother a maintainer..?",
          "createdAt": "2018-03-10T06:53:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-03-10T20:26:55Z",
                "user": "madelson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-12T21:05:02Z",
                "user": "SEnglishSMP"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODAha3g=="
          },
          "updatedAt": "2018-03-10T06:53:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3MjAwODMwNw=="
        },
        {
          "author": "karelz",
          "body": "@johnkors for major versions, you can use the milestone to tell which version it is in. For latest version that of course means daily build / recent pre-release Preview build.",
          "createdAt": "2018-03-10T17:50:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-03-11T11:14:02Z",
                "user": "johnkors"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOATuuRw=="
          },
          "updatedAt": "2018-03-10T17:50:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3MjA0OTIzMA=="
        },
        {
          "author": "weshaggard",
          "body": "@leecow @terrajobst @richlander is there anything we plan to do to improve this in 2.1 release?",
          "createdAt": "2018-03-30T18:17:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-30T18:17:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzU4Nzg3Nw=="
        },
        {
          "author": "leecow",
          "body": "I would very much like to begin producing aggregated change lists for every package as part of the build pipeline but need to discuss how this could be implemented.",
          "createdAt": "2018-03-30T20:06:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-30T20:06:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzYxMDY5NQ=="
        },
        {
          "author": "weshaggard",
          "body": "This is more a release management thing and not really code changes so marking Post-ZBB.",
          "createdAt": "2018-03-30T23:01:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-30T23:01:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzY0MjE1NQ=="
        },
        {
          "author": "weshaggard",
          "body": "@leecow @terrajobst is this something we plan to do in 2.1? ",
          "createdAt": "2018-04-18T17:54:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-04-18T17:54:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM4MjQ3MzkzMA=="
        },
        {
          "author": "smflorentino",
          "body": "@ViktorHofer is there any progress on this front?",
          "createdAt": "2021-08-04T03:00:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-04T03:00:08Z",
          "id": "IC_kwDODI9FZc41L8Au"
        },
        {
          "author": "ViktorHofer",
          "body": "The existing infrastructure in the repository already makes it possible to add release notes to our packages but I don't think this is planned at the moment. cc @leecow @terrajobst",
          "createdAt": "2021-08-04T06:04:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-04T06:04:47Z",
          "id": "IC_kwDODI9FZc41MMRx"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nCurrently there's the lack of transparency what is going on with corefx packages published on nuget.org.\r\nFor example, in VS with my solution I open \"Manage NuGet Packages for solution\" and on \"Updates\" tab I can see that there's an update for System.Data.SqlClient. I have 4.4.0 but there's a newer 4.4.2 already.\r\nCool. Of cause I'll install it but I wonder what have changed.\r\nThere's no link to package page on nuget.org in VS UI btw. So I open nuget.org and search for System.Data.SqlClient. On [package's page](https://www.nuget.org/packages/System.Data.SqlClient) I can see the section \"Release Notes\" with this link - https://go.microsoft.com/fwlink/?LinkID=799421\r\nIt targets to https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.0-preview1.md\r\nMm. Kind of obsolete.\r\nNothing more.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>evil-shrike</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>leecow, richlander, terrajobst</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`documentation`, `area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>Future</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-05-06T14:51:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-06T14:51:14Z",
          "id": "IC_kwDODI9FZc5CvV4q"
        },
        {
          "author": "ViktorHofer",
          "body": "Moving to area-Meta as there is no infrastructure support needed.",
          "createdAt": "2022-05-06T14:52:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-06T14:52:03Z",
          "id": "IC_kwDODI9FZc5CvWE-"
        }
      ],
      "totalCount": 20,
      "endCursor": "Y3Vyc29yOnYyOpHOQr1hPg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/24501",
    "title": "Provide release notes per package and per version for all packages published on nuget.org"
  },
  {
    "author": "bencz",
    "labels": [
      "area-Meta",
      "os-unsupported"
    ],
    "createdAt": "2018-03-28T17:35:00Z",
    "body": "After some research, I checked that the .net core has no supported for PowerPC or AIX ... Are there plans to implement support for the Power architecture and the AIX operating system?",
    "number": 10055,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-24T00:40:56Z",
          "user": "anilmujagic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-03-17T11:07:35Z",
          "user": "mirec75"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-20T14:10:50Z",
          "user": "Roman-Blinkov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-14T17:18:01Z",
          "user": "YohanSciubukgian"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-30T19:37:41Z",
          "user": "mihaimyh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-11-04T10:12:24Z",
          "user": "rsmirnov90"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-19T11:52:29Z",
          "user": "jiridanek"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-20T08:55:50Z",
          "user": "hYdos"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-28T13:09:59Z",
          "user": "voroninp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-06T00:55:03Z",
          "user": "halotroop2288"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-06T01:04:18Z",
          "user": "c08oprkiua"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-18T05:39:09Z",
          "user": "RenderMichael"
        }
      ],
      "totalCount": 12,
      "endCursor": "Y3Vyc29yOnYyOpHODLibTg=="
    },
    "updatedAt": "2025-08-06T13:30:24Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "janvorli",
          "body": "The largest amount of work is always in adding support for a new architecture to the JIT. We have JIT for arm, arm64, x86 and x64 architectures. There are currently no plans on adding new architectures support, but nothing prevents the community from starting such an effort.",
          "createdAt": "2018-03-28T18:42:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-28T18:42:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3Njk5MzIxNA=="
        },
        {
          "author": null,
          "body": "@janvorli, based on your experience, when aarch and aarch64 support were added, is there any rough checklist to support more architectures like ppc64le, mips64 etc. and generally RISC? There is also https://github.com/NETMF/netmf-interpreter by Microsoft, which has similar spectrum of support, perhaps convergence with that project will yield broader reach for CoreCLR. Not sure how feasible is the convergence with netmf, though.",
          "createdAt": "2018-03-28T19:10:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-28T19:10:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzAwMjIwNA=="
        },
        {
          "author": "janvorli",
          "body": "@kasper3 coreclr contains an interpreter too (disabled by default), but it hasn't been turned on or tested for a very long time. I just remember someone made coreclr compile without errors when the FEATURE_INTERPRETER is enabled and there were some attempts to use it by someone from the community.\r\n\r\nAs for new architectures, a coarse checklist (in an arbitrary order) would be :\r\n* ASM helpers\r\n* Thunks (e.g. the shuffle thunk for delegates) generated as machine code\r\n* Processor context related stuff in stack walking, thread suspension and exception handling.\r\n* Calling convention related code, like the arg iterator, interop, ... The more complex the calling convention, the more work is needed. Structs passed in registers is an example of such a complexity.\r\n* JIT - this is the largest amount of work.\r\n* Unwind info for the new architectures. For the existing ones, we use Windows unwind info format for the JITted code, for architectures that windows don't support, it would need to be designed from scratch.\r\n* GC info format may need to be updated for the new architectures. \r\n* If these architectures are big endian, there might be changes needed due to that.\r\n* Possibly other stuff I've forgotten to mention\r\n\r\nAs for AIX, it is hard to tell how much surprises it would bring. I have no idea how much it differs from Linux.",
          "createdAt": "2018-03-28T20:38:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-11T18:31:10Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAodz6A=="
          },
          "updatedAt": "2018-03-28T20:38:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzAyODEwOA=="
        },
        {
          "author": "mattwarren",
          "body": "@kasper3 I wrote a post about the interpreter that you might find useful, see [The .NET IL Interpreter](http://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/).\r\n\r\nBut as @janvorli mentioned, work was done to make it easier to enable (so you can ignore that part of the post) see dotnet/coreclr#11188 and dotnet/coreclr#11252",
          "createdAt": "2018-03-29T14:48:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-11T18:30:50Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-16T13:14:18Z",
                "user": "xiangzhai"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAoxb_A=="
          },
          "updatedAt": "2018-03-29T14:48:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzI1OTYyNw=="
        },
        {
          "author": null,
          "body": "@janvorli, @mattwar, thanks, didn't knew about interpreter feature. For the basic interpreter to work in an antoconfig manner, we could probably integrate coreclr interpreter with the qemu assembly transpilation component https://github.com/qemu/qemu/tree/47d3b60858d90ac8a0cc3a72af7f95c96781125a/target, in order to run some code on non-supported architectures (slow version). Gradually, the full support can be added starting from `ASM helpers` from Jan's list. I am not sure how feasible is Xassembly-to-Yassembly ops transpilation using qemu? Maybe that component alone can be compiled as an independent libasmconv (named after libiconv) from qemu sources for such experimentations (not for production usage).",
          "createdAt": "2018-03-29T15:41:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-29T15:54:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzI3NzQyNw=="
        },
        {
          "author": "ghuntley",
          "body": "I would love see a power on Linux bringup. AIX isn't worth the engineering cycles tho - see my thread on twitter. https://twitter.com/GeoffreyHuntley/status/979453657472053248?s=19",
          "createdAt": "2018-03-29T20:46:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-03-29T20:46:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDM3NzM2Njg5MQ=="
        },
        {
          "author": "NattyNarwhal",
          "body": "for the audience at home, if you want .NET on AIX or i, I maintain the [Mono port for that](https://www.mono-project.com/docs/about-mono/supported-platforms/aix/) - somewhat of a WIP, but it compiles all the way through and passes more tests than I expected",
          "createdAt": "2018-08-30T17:44:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2018-10-02T06:20:57Z",
                "user": "ghuntley"
              },
              {
                "content": "HEART",
                "createdAt": "2019-09-02T14:42:46Z",
                "user": "rootwyrm"
              },
              {
                "content": "HEART",
                "createdAt": "2019-11-17T19:22:07Z",
                "user": "vmlemon"
              },
              {
                "content": "HEART",
                "createdAt": "2022-11-04T10:13:09Z",
                "user": "rsmirnov90"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOCvBxpA=="
          },
          "updatedAt": "2018-08-30T17:44:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQxNzQwNjcxNg=="
        },
        {
          "author": "afxgroup",
          "body": "a Powerpc port would be really great 👍 ",
          "createdAt": "2019-01-18T11:10:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-12T10:58:42Z",
                "user": "Flow86"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-03-28T09:58:35Z",
                "user": "javinovo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-11T19:25:14Z",
                "user": "domn1995"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-20T03:35:28Z",
                "user": "YohanSciubukgian"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-08-29T22:07:32Z",
                "user": "to11mtm"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-18T22:11:01Z",
                "user": "mepholic"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-16T06:37:09Z",
                "user": "crozone"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-07T15:03:53Z",
                "user": "DanielCasali"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOBDftQw=="
          },
          "updatedAt": "2019-01-18T11:10:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1NTUxMTM1MQ=="
        },
        {
          "author": "turabek",
          "body": "We also want to run our Core Banking Application on Power PC Processors PPC64LE. May I know from .net core team is this on your roadmap? When this will be possible?",
          "createdAt": "2019-03-20T10:22:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-28T14:37:12Z",
                "user": "cbr74"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-06-11T11:27:17Z",
                "user": "HamedFathi"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAqUPeQ=="
          },
          "updatedAt": "2019-03-20T10:22:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3NDc3MDY1Nw=="
        },
        {
          "author": "ghuntley",
          "body": "It's not on their roadmap @turabek \r\n\r\n> There are currently no plans on adding new architectures support, but nothing prevents the community from starting such an effort.",
          "createdAt": "2019-04-12T15:44:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T15:44:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjYyMzM5NQ=="
        },
        {
          "author": "bencz",
          "body": "Is it not possible to use the JIT used in the .net of xbox?\r\nOr rather use it as a starter?",
          "createdAt": "2019-05-11T18:17:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-17T16:42:39Z",
                "user": "vmlemon"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA1OM9A=="
          },
          "updatedAt": "2019-05-11T18:17:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MTUzMzE1Mg=="
        },
        {
          "author": "xiangzhai",
          "body": "Hi @mattwarren\r\n\r\n> @kasper3 I wrote a post about the interpreter that you might find useful, see [The .NET IL Interpreter](http://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/).\r\n> \r\n\r\nThanks for your great blog [The .NET IL Interpreter](http://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/).\r\n\r\n> But as @janvorli mentioned, work was done to make it easier to enable (so you can ignore that part of the post) see dotnet/coreclr#11188 and dotnet/coreclr#11252\r\n\r\nBut when I migrated to the master  https://github.com/dotnet/coreclr/pull/24513   Interpreter seems not work:\r\n\r\n```\r\nHistogram of method executions:\r\n   # of execs   |   # meths (%)    |   cum % | % cum execs\r\n   -------------------------------------------------------\r\n            0   |       0 ( -nan%) |   -nan% |   -nan%\r\n            1   |       0 ( -nan%) |   -nan% |   -nan%\r\n            2   |       0 ( -nan%) |   -nan% |   -nan%\r\n            3   |       0 ( -nan%) |   -nan% |   -nan%\r\n            4   |       0 ( -nan%) |   -nan% |   -nan%\r\n            5   |       0 ( -nan%) |   -nan% |   -nan%\r\n            6   |       0 ( -nan%) |   -nan% |   -nan%\r\n            7   |       0 ( -nan%) |   -nan% |   -nan%\r\n            8   |       0 ( -nan%) |   -nan% |   -nan%\r\n            9   |       0 ( -nan%) |   -nan% |   -nan%\r\n           10   |       0 ( -nan%) |   -nan% |   -nan%\r\n\r\nFor methods sorted in ascending # of executions order, cumulative % of executions:\r\n\r\nTotal number of calls from interpreted code: 0.\r\n    Also, 0 are intrinsics; 0 of these are not currently handled intrinsically.\r\n    Of these, 0 to potential property getters (0 of these dead simple), 0 to setters.\r\n    Of the dead simple getter calls, 0 have been short-circuited.\r\n\r\nToken resolutions by category:\r\nCategory     |  opportunities  |   calls   |      %\r\n---------------------------------------------------\r\n   Undefined |               0 |         0 |   0.00%\r\n Constrained |               0 |         0 |   0.00%\r\n      NewObj |               0 |         0 |   0.00%\r\n      NewArr |               0 |         0 |   0.00%\r\n     LdToken |               0 |         0 |   0.00%\r\n       LdFtn |               0 |         0 |   0.00%\r\n   LdVirtFtn |               0 |         0 |   0.00%\r\n    SFldAddr |               0 |         0 |   0.00%\r\n      LdElem |               0 |         0 |   0.00%\r\n        Call |               0 |         0 |   0.00%\r\n       LdObj |               0 |         0 |   0.00%\r\n       StObj |               0 |         0 |   0.00%\r\n       CpObj |               0 |         0 |   0.00%\r\n     InitObj |               0 |         0 |   0.00%\r\n      IsInst |               0 |         0 |   0.00%\r\n   CastClass |               0 |         0 |   0.00%\r\n    MkRefAny |               0 |         0 |   0.00%\r\n   RefAnyVal |               0 |         0 |   0.00%\r\n      Sizeof |               0 |         0 |   0.00%\r\n      StElem |               0 |         0 |   0.00%\r\n         Box |               0 |         0 |   0.00%\r\n       Unbox |               0 |         0 |   0.00%\r\n    UnboxAny |               0 |         0 |   0.00%\r\n       LdFld |               0 |         0 |   0.00%\r\n      LdFldA |               0 |         0 |   0.00%\r\n       StFld |               0 |         0 |   0.00%\r\n   FindClass |               0 |         0 |   0.00%\r\n   Exception |               0 |         0 |   0.00%\r\n```\r\n\r\nNo printf in the `Interpreter::ExecuteMethod` or `Interpreter::Terminate`:\r\n\r\n```\r\ndiff --git a/src/vm/interpreter.cpp b/src/vm/interpreter.cpp\r\nindex b4b18cb..53ae5c2 100644\r\n--- a/src/vm/interpreter.cpp\r\n+++ b/src/vm/interpreter.cpp\r\n@@ -1878,6 +1878,7 @@ void Interpreter::DoMonitorExitWork()\r\n \r\n void Interpreter::ExecuteMethod(ARG_SLOT* retVal, __out bool* pDoJmpCall, __out unsigned* pJmpCallToken)\r\n {\r\n+    printf(\"DEBUG: %s:%d\\n\", __FILE__, __LINE__);\r\n #if INTERP_DYNAMIC_CONTRACTS\r\n     CONTRACTL {\r\n         THROWS;\r\n@@ -6511,6 +6512,7 @@ CORINFO_CLASS_HANDLE Interpreter::GetTypedRefClsHnd(CEEInfo* info)\r\n \r\n void Interpreter::Initialize()\r\n {\r\n+    printf(\"DEBUG: %s:%d\\n\", __FILE__, __LINE__);\r\n     assert(!s_initialized);\r\n \r\n     s_InterpretMeths.ensureInit(CLRConfig::INTERNAL_Interpret);\r\n@@ -6553,6 +6555,7 @@ void Interpreter::InitializeCompilerStatics(CEEInfo* info)\r\n \r\n void Interpreter::Terminate()\r\n {\r\n+    printf(\"DEBUG: %s:%d\\n\", __FILE__, __LINE__);\r\n     if (s_initialized)\r\n     {\r\n         s_methodCacheLock.Destroy();\r\n```\r\n\r\nAs comment mentioned:\r\n\r\n```\r\n// If we failed to jit, then fall back to the primary Jit.\r\n```\r\n\r\nAltJIT just fall back to primary JIT, but not Interpreter?\r\nHow to force fall back to interpreter?  By hacking set `ret` to `CORJIT_SKIPPED`:\r\n\r\n```\r\ndiff --git a/src/vm/jitinterface.cpp b/src/vm/jitinterface.cpp\r\nindex 502b5ad..0be76f6 100644\r\n--- a/src/vm/jitinterface.cpp\r\n+++ b/src/vm/jitinterface.cpp\r\n@@ -12145,6 +12145,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n \r\n     bool isInterpreterStub   = false;\r\n     bool interpreterFallback = (s_InterpreterFallback.val(CLRConfig::INTERNAL_InterpreterFallback) != 0);\r\n+    printf(\"DEBUG: interpreterFallback: %d\\n\", interpreterFallback);\r\n \r\n     if (interpreterFallback == false)\r\n     {\r\n@@ -12169,6 +12170,8 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n                                           nativeSizeOfCode);\r\n     }\r\n \r\n+    // Force fall back to interpreter\r\n+    //ret = CORJIT_SKIPPED;\r\n     if (interpreterFallback == true)\r\n     {\r\n         // If we're doing an \"import_only\" compilation, it's for verification, so don't interpret.\r\n```\r\n\r\nAnd I found that AArch64 Remove unnecessary interpreter fallback https://github.com/dotnet/coreclr/pull/20470   So is it able to enable Interpreter at master now?\r\n\r\nThanks,\r\nLeslie Zhai",
          "createdAt": "2019-05-16T13:39:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-16T13:39:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MzA3MTUxOQ=="
        },
        {
          "author": "mattwarren",
          "body": "I've not used the Interpreter since I wrote that post, so my memory is a bit hazy! But which (if any) environment variables have you set? See https://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/#Enabling%20the%20Interpreter and scroll down to the table of 'Host Configuration Knobs' for a bit more info. Or see https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md#interpreter-configuration-knobs.\r\n\r\nFrom what I remember, you need to at least set the `Interpret` value to the method(s) you want to have interpreted",
          "createdAt": "2019-05-16T14:18:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-16T14:18:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MzA4NzAxMw=="
        },
        {
          "author": "xiangzhai",
          "body": "> I've not used the Interpreter since I wrote that post, so my memory is a bit hazy! But which (if any) environment variables have you set? See https://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/#Enabling%20the%20Interpreter and scroll down to the table of 'Host Configuration Knobs' for a bit more info. Or see https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md#interpreter-configuration-knobs.\r\n> \r\n> From what I remember, you need to at least set the `Interpret` value to the method(s) you want to have interpreted\r\n\r\nSet:\r\n\r\n```\r\n$ export | grep COMPlus\r\ndeclare -x COMPlus_DumpInterpreterStubs=\"1\"\r\ndeclare -x COMPlus_Interpret=\"Main\"\r\ndeclare -x COMPlus_InterpreterFallback=\"1\"\r\ndeclare -x COMPlus_InterpreterPrintPostMortem=\"1\"\r\ndeclare -x COMPlus_TraceInterpreterEntries=\"1\"\r\ndeclare -x COMPlus_TraceInterpreterIL=\"1\"\r\ndeclare -x COMPlus_TraceInterpreterVerbose=\"1\"\r\n```\r\n\r\nHHH, perhaps because this https://github.com/dotnet/coreclr/pull/11252",
          "createdAt": "2019-05-16T14:36:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-16T14:36:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MzA5NDU1NQ=="
        },
        {
          "author": "to11mtm",
          "body": "Another Upvote, but I want to speak very specifically;\r\n\r\nPOWER Architecture would be huge for .NET for a number of reasons, including the existence of open, auditable platforms and the open-sourcing of the ISA and reference designs.\r\n\r\nBut really, the security angle is where I see a big win.",
          "createdAt": "2019-08-29T22:09:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-23T18:49:32Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-17T16:43:00Z",
                "user": "vmlemon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:45Z",
                "user": "neosaldina"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOA3vXAA=="
          },
          "updatedAt": "2019-08-29T22:09:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyNjM4MTI1Nw=="
        },
        {
          "author": "YohanSciubukgian",
          "body": "Do you also plan to support PPC 32 bits ?",
          "createdAt": "2019-09-04T14:56:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-23T18:49:35Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-17T16:43:02Z",
                "user": "vmlemon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-18T22:10:49Z",
                "user": "mepholic"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:42Z",
                "user": "neosaldina"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-16T06:44:01Z",
                "user": "crozone"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-23T15:55:14Z",
                "user": "joelday"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOELFnog=="
          },
          "updatedAt": "2019-09-04T14:56:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyNzkzODkyMQ=="
        },
        {
          "author": "aix1",
          "body": "Upvote; applications that uses .NET is restricted to our x86 only and for their high demands on Performance and RAS we need the .NET core parts on ppc64le.",
          "createdAt": "2019-09-19T11:39:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-23T18:49:37Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:40Z",
                "user": "neosaldina"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-17T11:09:11Z",
                "user": "mirec75"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOA-UiCw=="
          },
          "updatedAt": "2019-09-19T11:39:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMzA5MTYyOQ=="
        },
        {
          "author": "rickswah",
          "body": "One more Upvote! there is a lot of PPC64LE and PPC64 server around the world using just Java or PHP for the main systems.. the world need .net for PowerPC!!! @NattyNarwhal do a really good job on Mono Project... but, there is some diffs. from .net core",
          "createdAt": "2019-09-23T16:10:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-23T18:49:41Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-17T16:43:17Z",
                "user": "vmlemon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:38Z",
                "user": "neosaldina"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-17T11:08:56Z",
                "user": "mirec75"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:12:33Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOBE1egQ=="
          },
          "updatedAt": "2019-09-23T16:10:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzNDE3MDAzNA=="
        },
        {
          "author": "Tustra",
          "body": "upvote",
          "createdAt": "2019-09-23T17:40:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-23T18:49:42Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:37Z",
                "user": "neosaldina"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:12:40Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBE1enQ=="
          },
          "updatedAt": "2019-09-23T17:40:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzNDIwNTg0MA=="
        },
        {
          "author": "mihaimyh",
          "body": "Any plans for AIX support? Lots of us are using AIX servers.",
          "createdAt": "2019-10-15T10:47:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-15T18:48:46Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-11-17T16:43:19Z",
                "user": "vmlemon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T08:41:35Z",
                "user": "neosaldina"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:12:38Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBE1elQ=="
          },
          "updatedAt": "2019-10-15T10:47:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0MjE1MzIxNg=="
        },
        {
          "author": "neosaldina",
          "body": "Is there any plan to start implementing the JIT for ppc, ppc64 or ppc64el ?",
          "createdAt": "2019-12-20T08:42:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-20T10:45:54Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-26T18:40:10Z",
                "user": "afxgroup"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:12:43Z",
                "user": "Roman-Blinkov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-23T15:55:38Z",
                "user": "joelday"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOELFnuQ=="
          },
          "updatedAt": "2019-12-20T08:42:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU2Nzg0MjY1Mg=="
        },
        {
          "author": "llebout",
          "body": "I also would like to run .NET Core on ppc64le. My workstation system runs Fedora with Linux.",
          "createdAt": "2019-12-24T19:20:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-12-24T19:54:47Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:12:47Z",
                "user": "Roman-Blinkov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-25T20:02:49Z",
                "user": "kth5"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBdn4UQ=="
          },
          "updatedAt": "2019-12-24T19:20:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU2ODc5MzUzMw=="
        },
        {
          "author": "danmoseley",
          "body": "There remains no plan for Microsoft support of AIX, but community work is welcome - FreeBSD has made contributions in this way.",
          "createdAt": "2020-02-28T17:54:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-02-28T17:54:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5MjY0OTc0NA=="
        },
        {
          "author": "neosaldina",
          "body": "Okay, Microsoft may not have plans to support AIX, but what about PowerPC ( ppc, ppc64 and ppc64le ) ?",
          "createdAt": "2020-03-13T17:32:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-13T17:32:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODgzNDc2NQ=="
        },
        {
          "author": "neosaldina",
          "body": "I know that the Mono project has a system to host sites made in ASP.Net and ASP.Net MVC, if I'm not mistaken this project is called XSP ... the last time I tested it on ppc64, an error occurred when I tried to open the site...\r\n@NattyNarwhal you are supporting Mono for ppc, can you tell if XSP is working correctly on ppc64 for ASP.Net MVC?",
          "createdAt": "2020-03-13T17:37:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2020-03-13T18:01:12Z",
                "user": "bencz"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA-GI0Q=="
          },
          "updatedAt": "2020-03-13T17:37:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODgzNjkxNA=="
        },
        {
          "author": "tmds",
          "body": "@janvorli @danmosemsft Mono requires interpreting for some platforms, and .NET Core and mono runtimes are coming closer together. Could we be moving in a direction where there is a production-grade .NET interpreter that can be built from source?\r\n\r\nThough it would not perform as a good as a JIT, it would reduce the effort significantly to port .NET.",
          "createdAt": "2020-03-25T14:02:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-25T14:10:47Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-03T14:08:41Z",
                "user": "SupinePandora43"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCRQ6Sg=="
          },
          "updatedAt": "2020-03-25T14:02:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMzg1NjY2NA=="
        },
        {
          "author": "danmoseley",
          "body": "@marek-safar ",
          "createdAt": "2020-03-25T14:04:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T14:04:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMzg1NzU2MA=="
        },
        {
          "author": "NattyNarwhal",
          "body": "Mono interpreter requires per-platform trampolines, generated by the JIT. There was work from me and @lewurm to use the C based (but must be pregenerated) trampolines that WebAssembly uses (no JIT there) and fixing up the interpreter more, including making them endian and 64-bit pointer safe, but it wasn't complete.\r\n\r\nI'm also still not clear on the whole .NET 5/Mono integration story and how exactly Mono comes into play with `dotnet` and actually *building* it. The portability story on the Core side of thing seems really ambiguous in general to me and reads as a lower priority, while Mono has traditionally picked up the slack there.",
          "createdAt": "2020-03-25T14:31:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T14:31:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMzg3MjE4Mw=="
        },
        {
          "author": "marek-safar",
          "body": "Mono interpreter is already part of this repo and there is ongoing effort to make it stable and supported (see #32754 for example).\r\n\r\n@NattyNarwhal someone will need to make an effort to build relevant runtime packages of dotnet/runtime for such platforms. It's something the community can do and .NET team can help with in-terms of landing the changes or advising on the required changes.",
          "createdAt": "2020-03-25T14:40:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T14:40:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMzg3NzUwNg=="
        },
        {
          "author": "tmds",
          "body": "Thanks @NattyNarwhal @marek-safar . It's good to know mono interpreter is in the repo, and you'll help community to get it working on unsupported platforms. Are there important limitations, besides speed, you are aware of?",
          "createdAt": "2020-03-26T19:19:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-05-20T14:13:37Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBE1fQA=="
          },
          "updatedAt": "2020-03-26T19:19:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDYzMjgyMg=="
        },
        {
          "author": "marek-safar",
          "body": "It depends on how weird is the new platform but in general, there should not be anything that cannot be changed.",
          "createdAt": "2020-03-27T09:08:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-27T09:08:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDg5MzU1OA=="
        },
        {
          "author": "tappehl",
          "body": "> We also want to run our Core Banking Application on Power PC Processors PPC64LE. May I know from .net core team is this on your roadmap? When this will be possible?\r\n\r\nHi, please reach out to me if this is still of interest. Things are happening with IBM and I would like to get in contact with ISV's interested in this.. \r\nmail torbjorn@builtonpower.com thanks",
          "createdAt": "2021-10-14T13:06:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-14T13:06:00Z",
          "id": "IC_kwDODI9FZc44Oi9I"
        },
        {
          "author": "neosaldina",
          "body": "Any news about this ?\r\nI saw that @nealef migrated the Mono JIT for s390x to run .net on mainframe.. i can be possible to do this with ppc64 and ppc64le ?",
          "createdAt": "2021-11-30T16:39:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-30T16:39:13Z",
          "id": "IC_kwDODI9FZc46lITh"
        },
        {
          "author": "aix1",
          "body": "Hi\r\n\r\nI know there are some work ongoing, and now some more “votes” for this.\r\n\r\nThe one I know working mostly on this now is another IBM Champion named Torbjörn Appehl,\r\n***@***.***\r\n\r\nCheck with him 😊\r\n\r\nHave a good one\r\n\r\nS\r\n\r\nStephan Åkeborg\r\nSystems Engineer\r\nDigital Compute Platforms\r\nIKEA IT AB\r\nSjögatan 1 / Box 803,\r\nSE-252 25 / 251 98\r\nHelsingborg, Sweden\r\nMobile: +46 (0)706 11 11 98\r\n***@***.******@***.***>\r\nWeb: www.IKEA.com<http://www.ikea.com/>\r\n\r\n[signature_780672469]\r\n\r\nFrom: neosaldina ***@***.***>\r\nReply to: dotnet/runtime ***@***.***>\r\nDate: Tuesday, 30 November 2021 at 17:39\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Stephan Åkeborg ***@***.***>, Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] PowerPC and AIX support (#10055)\r\n\r\n\r\nAny news about this ?\r\nI saw that @nealef<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnealef&data=04%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7Cae14d13ea5334a47975608d9b41ffa55%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637738871701333021%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=hfFd0X%2Fyxu8YJ9eLSOlH%2FIKmg3rB1S14S%2B79f8gpxGQ%3D&reserved=0> migrated the Mono JIT for s390x to run .net on mainframe.. i can be possible to do this with ppc64 and ppc64le ?\r\n\r\n—\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F10055%23issuecomment-982811873&data=04%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7Cae14d13ea5334a47975608d9b41ffa55%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637738871701342978%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=q7%2BYllrY%2FGCH%2B3%2FAOF8F5fRtZUnXDxLR7Z%2BMeIwqywU%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAH46N6BLKC5WSIPQEKEHOO3UOT437ANCNFSM4K5WE7UQ&data=04%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7Cae14d13ea5334a47975608d9b41ffa55%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637738871701342978%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=pERUUmWWouOQKi12WCVaPycfp8E1J2Ukd5RAZyy5Yxk%3D&reserved=0>.\r\nTriage notifications on the go with GitHub Mobile for iOS<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7Cae14d13ea5334a47975608d9b41ffa55%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637738871701352946%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=f9%2BjQTp8puPn6BUqPHMZ5R4j4HD6k%2FDddq5SzSfEkmE%3D&reserved=0> or Android<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26referrer%3Dutm_campaign%253Dnotification-email%2526utm_medium%253Demail%2526utm_source%253Dgithub&data=04%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7Cae14d13ea5334a47975608d9b41ffa55%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637738871701352946%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=FXh5wnXv1UGwtyWySHQjgHRdxAeiUH31lYmgJdy6g5Y%3D&reserved=0>.\r\n",
          "createdAt": "2021-11-30T16:59:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-11-30T18:03:00Z",
                "user": "tappehl"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCEn1Fw=="
          },
          "updatedAt": "2021-11-30T16:59:43Z",
          "id": "IC_kwDODI9FZc46lM8k"
        },
        {
          "author": "tappehl",
          "body": "> \r\n\r\nHi, is still of interest? IBM recently ported .NET 6 to s390 and I am on a crusade to make it happen on Power architecture as well :)",
          "createdAt": "2022-02-01T09:46:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-02T20:38:46Z",
                "user": "Roman-Blinkov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-05T00:23:40Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-30T20:49:35Z",
                "user": "mgiessing"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-04T10:14:48Z",
                "user": "rsmirnov90"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOCvBx_g=="
          },
          "updatedAt": "2022-02-01T09:46:04Z",
          "id": "IC_kwDODI9FZc49MXWQ"
        },
        {
          "author": "bencz",
          "body": "Absolutely yes! \r\nThe good thing about using the Mono backend, as it was done with the s390, is that this port for ppc will also be compatible with older platforms, such as p5, p6 and p7 ",
          "createdAt": "2022-02-01T13:28:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-02T20:38:52Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCMy4xA=="
          },
          "updatedAt": "2022-02-01T13:28:33Z",
          "id": "IC_kwDODI9FZc49NGVM"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "@all,\r\nwe have started work on porting .net on ppc64le. Major PRs has been merged to runtime repository.\r\nThere are three issues on which we are currently working \r\nhttps://github.com/dotnet/runtime/issues/71080\r\nhttps://github.com/dotnet/runtime/issues/71079\r\nhttps://github.com/dotnet/runtime/pull/71189\r\n\r\nIf anyone has any suggestions/input on these issues please update. ",
          "createdAt": "2022-07-21T13:55:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-07-21T14:46:25Z",
                "user": "bencz"
              },
              {
                "content": "HEART",
                "createdAt": "2022-07-21T20:40:28Z",
                "user": "YohanSciubukgian"
              },
              {
                "content": "HEART",
                "createdAt": "2022-07-23T09:11:58Z",
                "user": "neosaldina"
              },
              {
                "content": "ROCKET",
                "createdAt": "2022-08-17T03:44:05Z",
                "user": "omajid"
              },
              {
                "content": "HEART",
                "createdAt": "2022-08-21T18:07:07Z",
                "user": "tappehl"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOCq47mw=="
          },
          "updatedAt": "2022-07-21T13:55:02Z",
          "id": "IC_kwDODI9FZc5HBRqp"
        },
        {
          "author": "neosaldina",
          "body": "@Sapana-Khemkar \r\nCool!!!\r\nDid you perform any tests on support for ppc64be?",
          "createdAt": "2022-07-23T09:14:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-07-24T23:59:49Z",
                "user": "Roman-Blinkov"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCoNmCw=="
          },
          "updatedAt": "2022-07-23T09:14:13Z",
          "id": "IC_kwDODI9FZc5HHSce"
        },
        {
          "author": "afxgroup",
          "body": "Even a ppc32be would be great :)",
          "createdAt": "2022-07-24T07:17:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-08-14T09:21:05Z",
                "user": "YohanSciubukgian"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCqidGQ=="
          },
          "updatedAt": "2022-07-24T07:17:17Z",
          "id": "IC_kwDODI9FZc5HH72D"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "> @Sapana-Khemkar Cool!!! Did you perform any tests on support for ppc64be?\r\n\r\nyes we are running runtime library tests. You can find the azure pipeline [here](https://dev.azure.com/dnceng/public/_build?definitionId=1052)\r\nCurrently two test cases are failing. For which issue has been already raised  https://github.com/dotnet/runtime/issues/71080\r\nand https://github.com/dotnet/runtime/issues/71079",
          "createdAt": "2022-07-25T09:21:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-25T09:21:01Z",
          "id": "IC_kwDODI9FZc5HJ-15"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "> Even a ppc32be would be great :)\r\n\r\nthats yet not in plan. currently only ppc64le is planned ",
          "createdAt": "2022-07-25T09:22:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-25T09:22:25Z",
          "id": "IC_kwDODI9FZc5HJ_NL"
        },
        {
          "author": "neosaldina",
          "body": "> > @Sapana-Khemkar Cool!!! Did you perform any tests on support for ppc64be?\r\n> \r\n> yes we are running runtime library tests. You can find the azure pipeline [here](https://dev.azure.com/dnceng/public/_build?definitionId=1052) Currently two test cases are failing. For which issue has been already raised #71080 and #71079\r\n\r\nI don't understand, will this port work on ppc64be?",
          "createdAt": "2022-07-25T13:06:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-25T13:06:39Z",
          "id": "IC_kwDODI9FZc5HK1zd"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "> > > @Sapana-Khemkar Cool!!! Did you perform any tests on support for ppc64be?\r\n> > \r\n> > \r\n> > yes we are running runtime library tests. You can find the azure pipeline [here](https://dev.azure.com/dnceng/public/_build?definitionId=1052) Currently two test cases are failing. For which issue has been already raised #71080 and #71079\r\n> \r\n> I don't understand, will this port work on ppc64be?\r\n\r\nSorry. I thought you are asking about ppc64le tests. \r\nppc64be we are not testing",
          "createdAt": "2022-07-26T04:34:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-26T04:34:49Z",
          "id": "IC_kwDODI9FZc5HOho5"
        },
        {
          "author": "archanox",
          "body": "To avoid confusion\n\nppc64 = big endian\nppc64el = little endian\n\nPlease avoid using non-standard nomenclature",
          "createdAt": "2022-07-26T08:40:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-26T08:40:46Z",
          "id": "IC_kwDODI9FZc5HPRDe"
        },
        {
          "author": "aix1",
          "body": "Isn’t it pp64le?\r\n/S\r\n\r\nStephan Åkeborg\r\nSystems Engineer\r\nDigital Compute Platforms\r\nIKEA IT AB\r\nSjögatan 1 / Box 803,\r\nSE-252 25 / 251 98\r\nHelsingborg, Sweden\r\nMobile: +46 (0)706 11 11 98\r\n***@***.******@***.***>\r\nWeb: www.IKEA.com<http://www.ikea.com/>\r\n\r\n[signature_1007945694]            [IBM Champion 2022]\r\n\r\n\r\nFrom: Erwin de Haan ***@***.***>\r\nReply to: dotnet/runtime ***@***.***>\r\nDate: Friday, 12 August 2022 at 02:14\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Stephan Åkeborg ***@***.***>, Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] PowerPC and AIX support (#10055)\r\n\r\n\r\nTo avoid confusion\r\n\r\nppc64 = big endian ppc64el = little endian\r\n\r\nPlease avoid using non-standard nomenclature\r\n\r\nArguably there is no standard, it’s all over the place even within OS families (Linux distros for example). It’s whatever you are used to. Be it le or el.\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F10055%23issuecomment-1212609688&data=05%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7C84df18470f9947f5aa5008da7bf79583%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637958600554769734%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=xn%2F77dEK5PoAZCpw5%2BGWBKa7mPPpyb5K8dcmxXS8OsY%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAH46N6BEXTFCXW76HG5B3HLVYWJNHANCNFSM4K5WE7UQ&data=05%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7C84df18470f9947f5aa5008da7bf79583%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637958600554769734%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=dRB%2Frx3mGqwkqrb1qAma%2FeKZsqfoIRUND8MvRK8%2BfZ0%3D&reserved=0>.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n",
          "createdAt": "2022-08-12T06:03:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-12T06:03:02Z",
          "id": "IC_kwDODI9FZc5ISTgv"
        },
        {
          "author": "tappehl",
          "body": "> Please avoid using non-standard nomenclature\r\n\r\nYeah, it was a bit irony \"Please avoid using non-standard nomenclature\" and then using the wrong nomenclature :-D",
          "createdAt": "2022-08-12T06:42:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-12T06:42:57Z",
          "id": "IC_kwDODI9FZc5ISZaT"
        },
        {
          "author": "aix1",
          "body": "😊, to early after vacation 😉\r\n/S\r\n\r\nStephan Åkeborg\r\nSystems Engineer\r\nDigital Compute Platforms\r\nIKEA IT AB\r\nSjögatan 1 / Box 803,\r\nSE-252 25 / 251 98\r\nHelsingborg, Sweden\r\nMobile: +46 (0)706 11 11 98\r\n***@***.******@***.***>\r\nWeb: www.IKEA.com<http://www.ikea.com/>\r\n\r\n[signature_926445412]            [IBM Champion 2022]\r\n\r\n\r\nFrom: Torbjorn Appehl ***@***.***>\r\nReply to: dotnet/runtime ***@***.***>\r\nDate: Friday, 12 August 2022 at 08:43\r\nTo: dotnet/runtime ***@***.***>\r\nCc: Stephan Åkeborg ***@***.***>, Comment ***@***.***>\r\nSubject: Re: [dotnet/runtime] PowerPC and AIX support (#10055)\r\n\r\n\r\nPlease avoid using non-standard nomenclature\r\n\r\nYeah, it was a bit irony \"Please avoid using non-standard nomenclature\" and then using the wrong nomenclature :-D\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F10055%23issuecomment-1212782227&data=05%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7C537210f44aed44cbeb1708da7c2dedcb%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637958833945849261%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=Jzv0fAL7In25eivnZpgmQOWV5C7lrgPqQdIN7lK4FhY%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAH46N6G7HHOM7KVJ7WNR3OLVYXW77ANCNFSM4K5WE7UQ&data=05%7C01%7Cstephan.akeborg2%40ingka.ikea.com%7C537210f44aed44cbeb1708da7c2dedcb%7C720b637a655a40cf816af22f40755c2c%7C0%7C0%7C637958833945849261%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=7wKEANPRBH0zrnlZ3qegqo%2FypMzoepRT%2B8Ge%2Fdikmyw%3D&reserved=0>.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n",
          "createdAt": "2022-08-12T06:50:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-08-12T06:59:10Z",
                "user": "tappehl"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCqdZ_Q=="
          },
          "updatedAt": "2022-08-12T06:50:09Z",
          "id": "IC_kwDODI9FZc5ISaaI"
        },
        {
          "author": "archanox",
          "body": "> > Please avoid using non-standard nomenclature\r\n> \r\n> Yeah, it was a bit irony \"Please avoid using non-standard nomenclature\" and then using the wrong nomenclature :-D\r\n\r\nYou guys are terrible at this. It's ppc64el, mips64el, armel...",
          "createdAt": "2022-08-12T11:12:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-12T11:12:02Z",
          "id": "IC_kwDODI9FZc5ITN-r"
        },
        {
          "author": "Roman-Blinkov",
          "body": "Anyone want to edit Wikipedia?\r\nhttps://en.m.wikipedia.org/wiki/Ppc64\r\nppc64le is a pure little-endian mode that has been introduced with the POWER8\r\n\r\n\r\nUpdate: our hero must update not Wikipedia only but IBM pages similar to this: https://www.ibm.com/docs/en/cloud-private/3.1.1?topic=requirements-supported-operating-systems-platforms\r\n",
          "createdAt": "2022-08-12T11:17:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-12T11:26:06Z",
          "id": "IC_kwDODI9FZc5ITPEa"
        },
        {
          "author": "tappehl",
          "body": "> > > Please avoid using non-standard nomenclature\r\n> > \r\n> > \r\n> > Yeah, it was a bit irony \"Please avoid using non-standard nomenclature\" and then using the wrong nomenclature :-D\r\n> \r\n> You guys are terrible at this. It's ppc64el, mips64el, armel...\r\n\r\nNot terrible, but I'll give you that both are accepted. In the IBM Power world LE is the most common expression though (as in Little Endian and not Endian Little (?) \r\nhttps://www.ibm.com/support/pages/just-faqs-about-little-endian\r\n\"by Jeff Scheel, IBM Linux on Power Chief Engineer\r\nAs promised, here is my first blog post on little endian or \"LE\" as we call it.\"\r\n\r\nBut let's focus on the cool thing, .NET IS COMING TO POWER!! \r\n",
          "createdAt": "2022-08-12T17:08:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-12T17:08:58Z",
          "id": "IC_kwDODI9FZc5IUgV8"
        },
        {
          "author": "afxgroup",
          "body": "Ok.. but why is it impossible to port .NET to PPC32BE? It is so hard?",
          "createdAt": "2022-08-14T07:10:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-14T07:10:48Z",
          "id": "IC_kwDODI9FZc5IYL8c"
        },
        {
          "author": "bencz",
          "body": "> Ok.. but why is it impossible to port .NET to PPC32BE? It is so hard?\r\n\r\nI believe it is a problem of interests, IBM has already \"killed\" the Power64 B.E, the 32-bit version, IBM has buried it a long time ago and has even \"decomposed\"....",
          "createdAt": "2022-08-14T07:38:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-14T07:38:08Z",
          "id": "IC_kwDODI9FZc5IYM58"
        },
        {
          "author": "afxgroup",
          "body": "But there are some different alive PPC BE platforms in the world. Not only IBM. I don't know the effort to implement the changes to see the big endian version alive but if someone points the main files to change we can give it a try. And even Mono is working on PPC32",
          "createdAt": "2022-08-14T09:21:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-08-14T09:38:09Z",
                "user": "YohanSciubukgian"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCqidtw=="
          },
          "updatedAt": "2022-08-14T09:23:10Z",
          "id": "IC_kwDODI9FZc5IYQnP"
        },
        {
          "author": "bkeys",
          "body": "> > > > Please avoid using non-standard nomenclature\r\n> > > \r\n> > > \r\n> > > Yeah, it was a bit irony \"Please avoid using non-standard nomenclature\" and then using the wrong nomenclature :-D\r\n> > \r\n> > \r\n> > You guys are terrible at this. It's ppc64el, mips64el, armel...\r\n> \r\n> Not terrible, but I'll give you that both are accepted. In the IBM Power world LE is the most common expression though (as in Little Endian and not Endian Little (?) https://www.ibm.com/support/pages/just-faqs-about-little-endian \"by Jeff Scheel, IBM Linux on Power Chief Engineer As promised, here is my first blog post on little endian or \"LE\" as we call it.\"\r\n> \r\n> But let's focus on the cool thing, .NET IS COMING TO POWER!!\r\n\r\n@tappehl Could you expound on the last part of this post? Is there any efforts on the part of IBM to get .NET working on ppc64le?",
          "createdAt": "2022-08-28T22:42:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-28T22:42:02Z",
          "id": "IC_kwDODI9FZc5JSb11"
        },
        {
          "author": "tappehl",
          "body": "> \r\n\r\nYes @bkeys as you can see above, Sapana is involved in the project... It was ported to IBM Mainframe last year, and I did some magic behind the scenes when I heard Power was not involve in that project. Now there is another project going on :)",
          "createdAt": "2022-08-29T04:59:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-29T04:59:15Z",
          "id": "IC_kwDODI9FZc5JTOUA"
        },
        {
          "author": "bkeys",
          "body": "@tappehl is there a loose timeline/broad estimate you think it will take until we have initial .NET support for POWER? I looked at the pull requests and it's really good news.",
          "createdAt": "2022-09-02T20:10:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-02T20:10:39Z",
          "id": "IC_kwDODI9FZc5JqbwP"
        },
        {
          "author": "tappehl",
          "body": "> @tappehl is there a loose timeline/broad estimate you think it will take until we have initial .NET support for POWER? I looked at the pull requests and it's really good news.\n\nI cannot tell, but for s390 it was released with the last version of .NET.. ",
          "createdAt": "2022-09-03T06:22:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-03T06:22:21Z",
          "id": "IC_kwDODI9FZc5JrMLQ"
        },
        {
          "author": "kevincrans",
          "body": "Some years ago NXP was still creating powerpc, but I don't know if they still make them and the 68k based coldfire, they indirectly bought a piece Motorola from the AIM: Apple IBM Motorola alliance, if u didn't know.",
          "createdAt": "2022-09-08T21:20:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-08T21:24:20Z",
          "id": "IC_kwDODI9FZc5J--oS"
        },
        {
          "author": "kevincrans",
          "body": "I learned more, NXP stopped support (I like this Philips related company, but disappointing), meaning our hope lays with libre-soc and IBM. I do have to say, I like AIX support, but since macOS is already supported, only the arch has to be ported first.",
          "createdAt": "2022-09-17T22:39:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-17T22:39:16Z",
          "id": "IC_kwDODI9FZc5Kg8lF"
        },
        {
          "author": "tappehl",
          "body": "> We also want to run our Core Banking Application on Power PC Processors PPC64LE. May I know from .net core team is this on your roadmap? When this will be possible?\r\n\r\nPlease reach out to me at torbjorn.appehl@ibm.com or torbjorn@builtonpower.com",
          "createdAt": "2022-09-23T06:06:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-23T06:06:50Z",
          "id": "IC_kwDODI9FZc5K2nMj"
        },
        {
          "author": "janani66",
          "body": "Enablement for ppc64le is in the upstream .NET7 and .NET8 ( main ) branches -- this is for the mono runtime engine and not CoreCLR. Testing continues. CI/CD pipelines are being run on ppc64le machines too. ",
          "createdAt": "2022-09-23T12:44:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-23T12:44:48Z",
          "id": "IC_kwDODI9FZc5K341e"
        },
        {
          "author": "bkeys",
          "body": "> Enablement for ppc64le is in the upstream .NET7 and .NET8 ( main ) branches -- this is for the mono runtime engine and not CoreCLR. Testing continues. CI/CD pipelines are being run on ppc64le machines too.\r\n\r\nThat is great news! But mono has been available in the Fedora repositories for some time now with ppc64le architecture:\r\nhttps://koji.fedoraproject.org/koji/rpminfo?rpmID=25347685\r\nI know mono joined the .net foundation but can you explain to those less informed such as myself what this means for ppc64le users?\r\nIs there plans to have ppc64le in the coreclr at some point?",
          "createdAt": "2022-09-23T13:31:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-23T13:31:52Z",
          "id": "IC_kwDODI9FZc5K4FYG"
        },
        {
          "author": "janani66",
          "body": "The current work is to get the mono engine in .NET7 working on ppc64le. CoreCLR will be targeted after the current .NET7 enablement for ppc64le is complete. ",
          "createdAt": "2022-09-23T14:14:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-09-23T19:14:33Z",
                "user": "paulchapmanibm"
              },
              {
                "content": "HEART",
                "createdAt": "2022-09-26T15:08:24Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-04T18:02:12Z",
                "user": "neikei"
              },
              {
                "content": "HEART",
                "createdAt": "2022-11-04T10:19:57Z",
                "user": "rsmirnov90"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-04T10:20:00Z",
                "user": "rsmirnov90"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOCvBy_w=="
          },
          "updatedAt": "2022-09-23T14:14:33Z",
          "id": "IC_kwDODI9FZc5K4Sy7"
        },
        {
          "author": "bencz",
          "body": "Now that IBM has released .net core 7, with support for ppc64le, how to install it on an Ubuntu or Debian server?",
          "createdAt": "2023-01-10T06:06:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-10T06:06:48Z",
          "id": "IC_kwDODI9FZc5SD_Mb"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "> Now that IBM has released .net core 7, with support for ppc64le, how to install it on an Ubuntu or Debian server?\r\n\r\nWe have to cross build tarball on Ubuntu 18.04/20.04 x86. I am working on blog for the same. I will link once it is published.",
          "createdAt": "2023-01-10T06:49:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-10T06:49:15Z",
          "id": "IC_kwDODI9FZc5SEGKw"
        },
        {
          "author": "lehrbua",
          "body": "> Now that IBM has released .net core 7, with support for ppc64le, how to install it on an Ubuntu or Debian server?\r\n\r\nWhat about AIX ?",
          "createdAt": "2023-01-10T07:13:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-10T07:13:03Z",
          "id": "IC_kwDODI9FZc5SELDx"
        },
        {
          "author": "bkeys",
          "body": "> Now that IBM has released .net core 7, with support for ppc64le, how to install it on an Ubuntu or Debian server?\r\n\r\nWhere does it say that .NET has ppc64le support?",
          "createdAt": "2023-01-10T16:12:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-10T16:12:05Z",
          "id": "IC_kwDODI9FZc5SGxDA"
        },
        {
          "author": "nealef",
          "body": "> > Now that IBM has released .net core 7, with support for ppc64le, how to install it on an Ubuntu or Debian server?\r\n> \r\n> Where does it say that .NET has ppc64le support?\r\n\r\nhttps://www.itjungle.com/2022/11/09/ibm-and-microsoft-bring-net-to-power-after-all/\r\n",
          "createdAt": "2023-01-10T16:14:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-10T16:14:40Z",
          "id": "IC_kwDODI9FZc5SGx9L"
        },
        {
          "author": "janani66",
          "body": "> > Enablement for ppc64le is in the upstream .NET7 and .NET8 ( main ) branches -- this is for the mono runtime engine and not CoreCLR. Testing continues. CI/CD pipelines are being run on ppc64le machines too.\r\n> \r\n> That is great news! But mono has been available in the Fedora repositories for some time now with ppc64le architecture: https://koji.fedoraproject.org/koji/rpminfo?rpmID=25347685 I know mono joined the .net foundation but can you explain to those less informed such as myself what this means for ppc64le users? Is there plans to have ppc64le in the coreclr at some point?\r\n\r\nDifferences between the previous available mono and the .NET7 based mono on ppc64le are explained by this post: https://www.linkedin.com/pulse/whats-difference-net-7-mono-paul-chapman/\r\n",
          "createdAt": "2023-01-10T16:21:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-10T18:21:01Z",
                "user": "tappehl"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCyZ9Vw=="
          },
          "updatedAt": "2023-01-10T16:21:32Z",
          "id": "IC_kwDODI9FZc5SG0OD"
        },
        {
          "author": "Sapana-Khemkar",
          "body": "Blog on how to cross compile .NET7 for ppc64le https://community.ibm.com/community/user/powerdeveloper/blogs/sapana-khemkar/2023/01/13/cross-build-dotnet7-on-x86-ibm-power ",
          "createdAt": "2023-01-16T04:57:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-16T15:28:48Z",
                "user": "janani66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-02-06T03:04:24Z",
                "user": "themav"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-31T05:38:37Z",
                "user": "lifning"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-05-06T04:55:26Z",
                "user": "bencz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-06T05:45:38Z",
                "user": "YohanSciubukgian"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOEdQkmA=="
          },
          "updatedAt": "2023-01-16T04:57:27Z",
          "id": "IC_kwDODI9FZc5SdmKl"
        },
        {
          "author": "neosaldina",
          "body": "Well, looks nice!!\r\nThis port is for ppc64le...\r\n\r\nHow complex would it be to make it compatible with ppc64?\r\n\r\n",
          "createdAt": "2023-06-14T14:40:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-14T14:40:57Z",
          "id": "IC_kwDODI9FZc5e2j84"
        },
        {
          "author": "halotroop2288",
          "body": "Hi, I'm here to represent the homebrew community.\nI'd love to see 32-bit PowerPC supported by the .NET Runtime. It would be the first step in porting the runtime to [older consoles](https://en.wikipedia.org/wiki/List_of_PowerPC-based_game_consoles#List) such as the GameCube, Wii, Wii U, PS3, and Xbox 360 (as well as older Mac hardware).\n\nMy main focus is the Xbox 360 at this point in time. The last time the console enjoyed the support of .NET was [.NET Compact Framework 2.0](https://en.wikipedia.org/wiki/Microsoft_XNA#XNA_Framework), and it required the use of Microsoft's proprietary SDK, which is now [not the only option](https://git.aidenisik.scot/FreeChainXenon).",
          "createdAt": "2025-08-06T01:22:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-06T01:22:16Z",
          "id": "IC_kwDODI9FZc68LbgO"
        },
        {
          "author": "afxgroup",
          "body": "As I wrote also all Amiga and other related projects are in",
          "createdAt": "2025-08-06T13:30:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-06T13:30:24Z",
          "id": "IC_kwDODI9FZc68XK6T"
        }
      ],
      "totalCount": 73,
      "endCursor": "Y3Vyc29yOnYyOpHOI7GGsg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/10055",
    "title": "PowerPC and AIX support"
  },
  {
    "author": "shaggygi",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2018-04-19T11:43:17Z",
    "body": "Understanding [Azure Sphere](https://azure.microsoft.com/en-us/blog/introducing-microsoft-azure-sphere-secure-and-power-the-intelligent-edge/) has not even been released yet, I was wondering if .NET Core will be supported?",
    "number": 10193,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2021-07-08T01:18:50Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "siennathesane",
          "body": "Just wanted to follow up on this.",
          "createdAt": "2021-06-29T20:56:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-29T20:56:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MDkxMTM5MA=="
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOM-kNng=="
    },
    "url": "https://github.com/dotnet/runtime/issues/10193",
    "title": "Azure Sphere Support"
  },
  {
    "author": "jnm2",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer",
      "code-fixer"
    ],
    "createdAt": "2018-09-17T16:12:47Z",
    "body": "Analyzer package: [Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)\r\nPackage Version: 2.6.2-beta2\r\nDiagnostic ID: CA1063\r\n\r\nSince .NET 4.0 was released in 2010, the guidance has been to use SafeHandle instead of writing finalizers and Dispose(bool) methods. The unmanagedness is fully encapsulated within the SafeHandle class, so the class that uses the SafeHandle no longer needs a finalizer or a Dispose(bool) method.\r\n\r\nUnfortunately, the MSDN documentation has continued encouraging disposal of unmanaged resources to be put in Dispose(bool) methods, perpetuating a pattern which is verbose and has fewer safety guarantees.\r\n\r\nFor extremely rare cases where the unmanaged resource is not represented by an IntPtr handle, it's still safer to represent the unmanaged resource as a private class deriving from CriticalFinalizerObject than to store the fields directly inside the class that uses them.\r\n\r\n(@sharwell, @davkean, may I use you as references since I've seen you speak out about this?)\r\n\r\nTherefore, I believe this warning pushes folks in the wrong direction:\r\n\r\n> CA1063 Provide an overridable implementation of Dispose(bool) on ServicesIntegrationTests or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.\r\n\r\nEven if the class is virtual, we can assume that any derived class will also not need a finalizer or Dispose(bool) method because best practice is for the derived class to encapsulate the unmanagedness in a SafeHandle class rather than to store unmanaged references as direct fields.",
    "number": 43975,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-10T08:53:52Z",
          "user": "NN---"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOBZhQag=="
    },
    "updatedAt": "2022-04-02T00:13:55Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "mavasani",
          "body": "The current CA1063 rule implementation mostly matches the old FxCop implementation. The only major known different in implementation is that we also flag finalizers in derived types if there is at least one base type in its inheritance chain that also overrides the finalizer.\r\n\r\nhttps://github.com/dotnet/docs/issues/8463 discusses complete overhaul of dispose patterns/guidelines. When the guidelines are updated, we should potentially implement a separate rule ID to enforce those guidelines, with CA1063 still being reserved for legacy guidelines for legacy code bases which already have existing code following the Dispose(bool) pattern and would prefer consistency in newly added disposable types (though we might turn off CA1063 by default to avoid conflicting guidelines).\r\n\r\nLet us use this issue to track implementing a new Dispose pattern rule based on the resolution of https://github.com/dotnet/docs/issues/8463.",
          "createdAt": "2019-01-05T14:33:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-05T15:08:04Z",
                "user": "jnm2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-05T15:17:56Z",
                "user": "BrunoJuchli"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAhJD0g=="
          },
          "updatedAt": "2019-01-05T14:33:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1MTY2MDQxNQ=="
        },
        {
          "author": "carlossanlop",
          "body": "@mavasani is the `Microsoft.NetCore.Analyzers` area the most appropriate for this particular proposal? If yes, then I can move it to the runtime repo so it goes through API review.",
          "createdAt": "2020-10-28T20:34:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-29T12:50:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODE5MjkyNQ=="
        },
        {
          "author": "mavasani",
          "body": "@carlossanlop Yes, this needs a clear design and approval from the runtime team before it can be implemented.",
          "createdAt": "2020-10-28T20:36:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-28T20:36:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODE5Mzg1OA=="
        },
        {
          "author": "sharwell",
          "body": "The last time this came up, the conclusion is CA1063 still contains the official framework design guidance for public APIs. As with the other framework design guidelines, this rule is primarily intended for improving the quality of shared APIs. While it is often convenient for projects to adopt the same rules for non-public code (consistency/simplicity/maintainability), it is allowed for internal code to deviate from the guidelines while still adhering to their primary intent.\r\n\r\nOther `IDisposable` patterns are not part of the official guidance, so it is _at best_ a non-goal of the framework design analyzers to support them. However, if a proposal came to somehow tweak the rules of the analyzers and/or split the rules such that they were more convenient for authors, it might be possible to accommodate the request without undermining the primary functionality.\r\n\r\nWith that said, my _personal_ view certainly deviates from the official design guidelines. I've found the simplest solution to be disabling CA1063 and other `IDisposable` rules in my own libraries.",
          "createdAt": "2020-10-29T14:24:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-30T13:59:09Z",
                "user": "jnm2"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBVQsIg=="
          },
          "updatedAt": "2020-10-29T14:24:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODc4NzM3NA=="
        },
        {
          "author": "NN---",
          "body": "Agree, I don't have any finalizer in the code and don't suggest anyone to deal with it manually.\r\nEverything is wrapped in SafeHandle or other managed wrapper, therefore I don't have any direct use of unmanaged resource.\r\n\r\nAll of my Dispose methods are simply calling members Dispose and this rule is useless in such case.",
          "createdAt": "2020-12-10T08:57:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-10T08:57:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjM4MDAxOQ=="
        },
        {
          "author": "buyaa-n",
          "body": "@mavasani @sharwell looks the [dispose guideline is updated](https://github.com/dotnet/docs/pull/18266). \r\n\r\n[Traige]: We want to determine what needs to be done for the issue.  Seems you are suggesting to disable the CA1063 analyzer for .NetCore and propose a new analyzer for using SafeHandle instead of implementing a finalizer or a Dispose(bool) methods for a class. What should we do next?\r\n",
          "createdAt": "2022-03-31T21:43:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-02T00:13:55Z",
          "id": "IC_kwDODI9FZc5ArhvZ"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOQK4b2Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/43975",
    "title": "Consider current (SafeHandle > finalizers) guidance for unmanaged resources "
  },
  {
    "author": "Petermarcu",
    "labels": [
      "api-suggestion",
      "area-Meta"
    ],
    "createdAt": "2018-09-22T17:43:42Z",
    "body": "@jjgriff93 commented on [Thu Sep 20 2018](https://github.com/dotnet/core/issues/1952)\n\nCannot play sound files as part of .net core console apps in windows and running on windows IoT Core on Raspberry Pi due to lack of audio support. Third party libraries don't offer any simple solution for playing wav or mp3 streams like the .NET Framework SoundPlayer does.\r\n\n\n",
    "number": 27450,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-03-16T20:06:57Z",
          "user": "JFronny"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-18T18:30:49Z",
          "user": "corykroll"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-21T22:32:01Z",
          "user": "ili101"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-23T05:45:25Z",
          "user": "MrCSharp22"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-10T13:54:39Z",
          "user": "Dennis-Petrov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-28T09:00:48Z",
          "user": "AlexProskura"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-22T15:54:35Z",
          "user": "p-kaczynski"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-01-18T18:33:57Z",
          "user": "devklick"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-15T11:39:22Z",
          "user": "j123b567"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-23T00:52:30Z",
          "user": "AmasaDelano"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-29T00:31:59Z",
          "user": "stogle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-09T19:43:11Z",
          "user": "lunarcloud"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-26T13:02:51Z",
          "user": "julealgon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-27T07:19:54Z",
          "user": "raulsntos"
        }
      ],
      "totalCount": 14,
      "endCursor": "Y3Vyc29yOnYyOpHOC8_vvw=="
    },
    "updatedAt": "2024-11-22T02:47:09Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Petermarcu",
          "body": "@richlander ",
          "createdAt": "2018-09-22T17:43:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-09-22T17:43:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQyMzc2MTEzNg=="
        },
        {
          "author": "karelz",
          "body": "@jjgriff93 what are the scenarios where it is needed? What kind of apps would benefit from the APIs?\r\nI assume the API is [System.Media.SoundPlayer](https://docs.microsoft.com/en-us/dotnet/api/system.media.soundplayer?view=netframework-4.7.2)",
          "createdAt": "2018-10-01T17:55:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-10-01T17:55:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQyNjAwMjA3Nw=="
        },
        {
          "author": "synercoder",
          "body": "@karelz I wish to create a \"digital assistent\" in a windows console app (perhaps later hosted on a raspberry pi). That uses Azure services for text-to-speech for the responses. Currently I can't do this in netcore.\r\nSo that is one scenario example.",
          "createdAt": "2019-01-30T14:44:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-30T20:50:35Z",
                "user": "karelz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-16T20:06:51Z",
                "user": "JFronny"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-26T13:03:09Z",
                "user": "julealgon"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODnP7ow=="
          },
          "updatedAt": "2019-01-30T14:44:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1ODk2OTE4Ng=="
        },
        {
          "author": "keithn",
          "body": "is this going to be in .net core 3?",
          "createdAt": "2019-05-19T02:10:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-19T02:10:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MzcyMDg1NA=="
        },
        {
          "author": "karelz",
          "body": "No, it is in Future milestone. Also note that there is fairly small interest from community (4 people so far).",
          "createdAt": "2019-05-21T06:47:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-21T06:47:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDI2MTk5NA=="
        },
        {
          "author": "mdisg",
          "body": "Would be very helpfull to get something like the SoundPlayer provides for windows but universal for other platforms like linux using alsa. \r\nWe use .NET Core on a embedded device which regulary has to play some short sounds. Bringing up a command line utlity like aplay is not that good in performance.",
          "createdAt": "2019-06-27T07:11:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-27T07:11:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwNjIyMjU3Nw=="
        },
        {
          "author": "ericstj",
          "body": "cc @joperezr since this has IOT implications. ",
          "createdAt": "2020-06-26T01:18:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-26T01:18:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTg5NTcyNw=="
        },
        {
          "author": "joperezr",
          "body": "in dotnet/iot repo we have this issue which has some overlap: https://github.com/dotnet/iot/issues/287",
          "createdAt": "2020-06-30T23:19:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-30T23:19:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjA5NjkyMQ=="
        },
        {
          "author": "davidbitterlich",
          "body": "This issue is now almost 6 years old. As I've seen, there is now System.Media.SoundPlayer in dotnet 8 (don't know when it was introduced)... However it's Windows-only (System.Windows.Extensions). That's very sad.\r\n\r\nAre there still plans, to create a cross-platform equivalent (or to make the namespaces with its classes truly cross-platform) or is the idea already dead?\r\n\r\nIt would be great to have sound support for some projects and the old mono framework had a working implementation based on Alsa(?), even with SystemSounds implementation.",
          "createdAt": "2024-06-26T11:17:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T11:17:34Z",
          "id": "IC_kwDODI9FZc6Cnsa9"
        },
        {
          "author": "a6754z",
          "body": "Is there any replacement for System.Media.SoundPlayer?",
          "createdAt": "2024-11-22T02:47:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-22T02:47:09Z",
          "id": "IC_kwDODI9FZc6UlKj9"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHOlJSo_Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/27450",
    "title": "Cross-platform replacement for SoundPlayer for playing audio across devices/paltforms"
  },
  {
    "author": "stephentoub",
    "labels": [
      "enhancement",
      "area-Meta",
      "good first issue",
      "help wanted",
      "tracking"
    ],
    "createdAt": "2018-11-30T18:32:58Z",
    "body": "We now have a bunch of libraries with their own DllImports, whereas the expected approach is that all DllImports in product src should be included from src\\Common\\src\\Interop, appropriately factored by platform and library, and then those source files included into the relevant assemblies that need them.\r\n\r\n- [ ] Microsoft.Diagnostics.Tracing.EventSource.Redist\r\n- [ ] System.Data.SqlClient\r\n- [x] System.Diagnostics.EventLog\r\n- [ ] System.DirectoryServices\r\n- [ ] System.DirectoryServices.AccountManagement\r\n- [ ] System.DirectoryServices.Protocols\r\n- [ ] System.Drawing.Common\r\n- [x] System.IO.Compression\r\n- [ ] System.IO.Compression.Brotli\r\n- [ ] System.IO.Ports\r\n- [x] System.Management\r\n- [ ] System.Reflection.Metadata\r\n- [x] System.Runtime.Caching\r\n- [x] System.Security.Cryptography.Csp\r\n- [x] System.Security.Cryptography.Pkcs\r\n- [ ] System.Security.Cryptography.X509Certificates\r\n\r\nThis all needs to be refactored and dedup'd.\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/interop-guidelines.md",
    "number": 28035,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-10-29T19:08:47Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Marusyk",
          "body": "Hello, I will try to prepare PR for this, if nobody is against it",
          "createdAt": "2018-12-01T20:48:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-01T20:53:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0MzQ1NzM4Nw=="
        },
        {
          "author": "stephentoub",
          "body": "@Marusyk, absolutely, thanks. I'd suggest starting with either EventLog, System.DirectoryServices.*, or System.Security.*.",
          "createdAt": "2018-12-01T21:12:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-12-01T23:38:58Z",
                "user": "Marusyk"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAfwa8A=="
          },
          "updatedAt": "2018-12-01T21:12:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0MzQ1ODkyNQ=="
        },
        {
          "author": "Marusyk",
          "body": "Hello @stephentoub, \r\n\r\nCould you please check if I am on the right way?\r\nI start with [EventLog](https://github.com/Marusyk/corefx/commit/6f22d14ac0285ec1e4c7100753603033f6f199b2)\r\n\r\nAnd one more question: should it be like one big PR or a few small ones?",
          "createdAt": "2018-12-04T23:07:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-04T23:13:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NDI5NDI2Mw=="
        },
        {
          "author": "stephentoub",
          "body": "Thanks, @Marusyk!  That looks very good.  Please go ahead and create a PR for it so it can be properly reviewed and merged.\r\n\r\n> should it be like one big PR or a few small ones?\r\n\r\nOne per library (e.g. EventLog) or family of libraries (e.g. System.DirectoryServices.*) would be good.",
          "createdAt": "2018-12-05T14:51:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2018-12-05T14:57:20Z",
                "user": "Marusyk"
              },
              {
                "content": "HOORAY",
                "createdAt": "2018-12-05T14:57:30Z",
                "user": "Marusyk"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAf78pQ=="
          },
          "updatedAt": "2018-12-05T14:51:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0NDUxMTcxMg=="
        },
        {
          "author": "StanislavUshakov",
          "body": "Can I take `System.DirectoryServices`?\r\n\r\nI have a couple of questions. As I can see there are a lot of `[DllImport]` for functions that are currently presented in src/Common/Interop, e.g. [LoadLibrary](https://github.com/dotnet/corefx/blob/master/src/System.DirectoryServices/src/System/DirectoryServices/ActiveDirectory/UnsafeNativeMethods.cs#L738), [GetProcAddress](https://github.com/dotnet/corefx/blob/master/src/System.DirectoryServices/src/System/DirectoryServices/ActiveDirectory/UnsafeNativeMethods.cs#L744) from \"kernel32.dll\" are duplicated. Also there is an internal class [LoadLibrarySafeHandle](https://github.com/dotnet/corefx/blob/master/src/System.DirectoryServices/src/System/DirectoryServices/ActiveDirectory/SafeHandle.cs#L32) which is a duplicate of `Common\\CoreLib\\Microsoft\\Win32\\SafeHandles\\SafeLibraryHandle.cs`\r\nSo our steps are:\r\n1. Remove duplicates from System.DirectoryServices and use methods and classes from src/Common.\r\n2. Add non-existing methods to src/Common and remove them from System.DirectoryServices\r\n3. If current DllImport method from src/Common/Interop doesn't have `SetLastError = true` and System.DirectoryServices needs it, we have to modify `Interop\\Windows\\kernel32\\Interop.GetProcAddress.cs` (because it is used to throw an exception e.g. in [GetProcAddress with GetLastWin32Error](https://github.com/dotnet/corefx/blob/master/src/System.DirectoryServices/src/System/DirectoryServices/ActiveDirectory/Utils.cs#L112-L116))\r\n\r\nIf I am right with these assumptions, could you please take a look at [Refactored LoadLibrary, FreeLibrary, GetProcAddress](https://github.com/StanislavUshakov/corefx/commit/d49c231b82999bfe16b62312cc25fe9a13bfe3e9)\r\n`using CommonInterop = Interop` is a temporary fix while we have Interop namespace in the project. I will remove it later.",
          "createdAt": "2018-12-25T13:02:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-25T13:02:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0OTg0ODg0Mw=="
        },
        {
          "author": "StanislavUshakov",
          "body": "And another question: what are the differences between `Common/src/Interop/Windows` and `Common/src/CoreLib/Interop/Windows`?\r\nSome methods are duplicated: [Interop.FreeLibrary in Common/src/Interop/Windows](https://github.com/dotnet/corefx/blob/master/src/Common/src/Interop/Windows/kernel32/Interop.FreeLibrary.cs) and [Interop.FreeLibrary in Common/src/CoreLib/Interop/Windows](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/Interop/Windows/Kernel32/Interop.FreeLibrary.cs) Which one should we use: from Common/src/Interop/Windows?\r\nAnd what if there is no method in Common/src/Interop/Windows, but it exists in Common/src/CoreLib/Interop/Windows (e.g. [CloseHandle](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/Interop/Windows/Kernel32/Interop.CloseHandle.cs)) Can we reference this file?",
          "createdAt": "2018-12-25T13:34:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2018-12-25T13:34:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ0OTg1MDkwOA=="
        },
        {
          "author": "danmoseley",
          "body": "`Common/src/CoreLib/Interop/Windows` are mirrored from `src/System.Private.Corelib/shared/Interop/Windows` in the CoreCLR repo. Files there are in CoreCLR presumably because some code in `System.Private.Corelib` needs them. We mirror all of `src/System.Private.Corelib/shared` from the CoreCLR repo so that any code in CoreFX can reuse it if it needs to. This falls in this category -- if there is duplication, then generally we would want to keep the corelib copy, and change CoreFX code to use that one, and delete the CoreFX copy. You can see examples of using files out of CoreFX's ``Common/src/CoreLib` in various project files in CoreFX.",
          "createdAt": "2019-01-02T23:36:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-01-09T19:04:21Z",
                "user": "Marusyk"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAhVb0Q=="
          },
          "updatedAt": "2019-01-02T23:37:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ1MTAxODY1Ng=="
        },
        {
          "author": "frbncis",
          "body": "Hi! Can I take a crack at `System.DirectoryServices.Protocols`? There's a lot of them (~65), but it looks like it's mostly elbow grease.",
          "createdAt": "2019-02-20T01:35:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-20T01:35:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ2NTM4MzE4NA=="
        },
        {
          "author": "danmoseley",
          "body": "@frbncis sure - but we should take care, as our test coverage of that is mostly manual IIRC.",
          "createdAt": "2019-02-20T03:38:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-02-20T03:38:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ2NTQwODY0Nw=="
        },
        {
          "author": "satano",
          "body": "Hello there. Can I take `System.Security.*`?\r\n\r\nAlso it would be nice to update the checkboxes in the issue to mark what was already done.",
          "createdAt": "2019-05-20T16:39:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-20T16:39:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDA2MzE1MQ=="
        },
        {
          "author": "satano",
          "body": "Ping @danmosemsft, @stephentoub ",
          "createdAt": "2019-05-22T16:17:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T16:17:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDg3MjcwNg=="
        },
        {
          "author": "danmoseley",
          "body": "@satano thanks for the offer, please do. Are checkboxes correct now?",
          "createdAt": "2019-05-22T16:58:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T16:58:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDg4Njk4OA=="
        },
        {
          "author": "satano",
          "body": "I did not look into the sources, but according to the merged PR names, the checkboxes are correct. So I will look into `System.Security.Cryptography.X509Certificates`.",
          "createdAt": "2019-05-22T19:03:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T19:03:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDkyNjQyMw=="
        },
        {
          "author": "danmoseley",
          "body": "OK!",
          "createdAt": "2019-05-22T23:25:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T23:25:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NTAxMDgxNw=="
        },
        {
          "author": "hareshambaliya",
          "body": "@stephentoub I would like to contribute to this issue. Will you please guide me about where to start? What is pending?",
          "createdAt": "2019-10-05T08:28:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-10-05T08:28:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzODYyOTU4MQ=="
        },
        {
          "author": "a-sayapin",
          "body": "hi all, @stephentoub! can I take `System.Reflection.Metadata` & `System.Drawing.Common`?",
          "createdAt": "2019-10-07T10:45:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-10-07T11:19:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzODk0Njc3Nw=="
        },
        {
          "author": "danmoseley",
          "body": "Sure go ahead!",
          "createdAt": "2019-10-07T14:24:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-10-07T14:24:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzOTAzNzMxOQ=="
        },
        {
          "author": "stephentoub",
          "body": "> Will you please guide me about where to start? What is pending?\r\n\r\nI've not recently audited progress here to see what's outstanding.  Basically you'd be looking for anywhere there are DllImports in product src not under the common interop folders.  Contributions are welcome :)",
          "createdAt": "2019-12-06T21:23:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-12-06T21:23:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU2Mjc0MTkzMQ=="
        },
        {
          "author": "deeprobin",
          "body": "> I've not recently audited progress here to see what's outstanding. Basically you'd be looking for anywhere there are DllImports in product src not under the common interop folders. Contributions are welcome :)\r\n\r\n@stephentoub\r\n\r\nI did a little [grep (in src/libraries excluding Common and tests)](https://gist.github.com/deeprobin/3f1b71e94aac4921b32824879dbd39a9) on the current library and dllimports. Is there a reason why we partly use DllImports in not generated code (are 5 references)?\r\n\r\nMeans, the following libraries still have to be re-factored:\r\n* [x] System.Data.OleDb\r\n* [ ] System.Transactions.Local\r\n* [ ] System.Diagnostics.EventLog\r\n* [ ] System.DirectoryServices\r\n* [ ] System.Drawing.Common\r\n* [ ] System.Private.CoreLib (Shared)",
          "createdAt": "2022-10-31T10:29:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-23T04:05:56Z",
          "id": "IC_kwDODI9FZc5NTPtF"
        },
        {
          "author": "deeprobin",
          "body": "I would take care of System.Data.OleDb if no one objects.",
          "createdAt": "2022-10-31T10:30:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-31T10:30:02Z",
          "id": "IC_kwDODI9FZc5NTPzm"
        },
        {
          "author": "danmoseley",
          "body": "@deeprobin do you feel like doing any more?",
          "createdAt": "2023-05-25T02:16:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-25T02:16:35Z",
          "id": "IC_kwDODI9FZc5dHLgz"
        },
        {
          "author": "danmoseley",
          "body": "Actually maybe this is basically done. @stephentoub do you see more than this left?\r\n```\r\nSystem.Transactions.Local\\src\\System\\Transactions\\DtcProxyShim\\DtcProxyShimFactory.cs:    [DllImport(Interop.Libraries.Xolehlp, CharSet = CharSet.Unicode, ExactSpelling = true, PreserveSig = false)]\r\nSystem.Data.OleDb\\src\\UnsafeNativeMethods.COMWrappers.cs:        [LibraryImport(Interop.Libraries.OleAut32)]\r\nSystem.Diagnostics.EventLog\\src\\System\\Diagnostics\\Reader\\UnsafeNativeMethods.cs:        [LibraryImport(Interop.Libraries.Wevtapi, SetLastError = true)]\r\nSystem.Diagnostics.EventLog\\src\\System\\Diagnostics\\Reader\\UnsafeNativeMethods.cs:        etc\r\nSystem.DirectoryServices\\src\\Interop\\SafeNativeMethods.cs:        [LibraryImport(global::Interop.Libraries.OleAut32)]\r\nSystem.DirectoryServices\\src\\Interop\\SafeNativeMethods.cs:        etc\r\nSystem.DirectoryServices\\src\\System\\DirectoryServices\\ActiveDirectory\\NativeMethods.cs:        [LibraryImport(global::Interop.Libraries.Netapi32, EntryPoint = \"DsGetDcNameW\", StringMarshalling = StringMarshalling.Utf16)]\r\nSystem.DirectoryServices\\src\\System\\DirectoryServices\\ActiveDirectory\\NativeMethods.cs:        etc\r\nSystem.DirectoryServices\\src\\System\\DirectoryServices\\ActiveDirectory\\UnsafeNativeMethods.cs:        [LibraryImport(global::Interop.Libraries.Activeds, EntryPoint = \"ADsEncodeBinaryData\", StringMarshalling = StringMarshalling.Utf16)]\r\nSystem.DirectoryServices\\src\\System\\DirectoryServices\\ActiveDirectory\\UnsafeNativeMethods.cs:        etc\r\n```",
          "createdAt": "2023-05-25T02:31:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-25T02:31:22Z",
          "id": "IC_kwDODI9FZc5dHNiS"
        },
        {
          "author": "deeprobin",
          "body": "@stephentoub Is anything left to factor into Common\\.\n\nAs described in the comments of #109196, it is not really considered useful to move the LibraryImports to Common in a library that is considered legacy here. Also the wevtapi isn't used anywhere else.\n/cc @ericstj @AaronRobinsonMSFT \n\nI think System.Transactions.Local is also kind of legacy (am I right?)?\nSo this would also apply to #109222.\n\nDo we need to factor more LibraryImports to `Common\\` or can we close this feature as completed?",
          "createdAt": "2024-10-29T19:08:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-29T19:08:46Z",
          "id": "IC_kwDODI9FZc6RvX0U"
        }
      ],
      "totalCount": 23,
      "endCursor": "Y3Vyc29yOnYyOpHOkb19FA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/28035",
    "title": "Properly factor DllImports into Common\\src\\Interop"
  },
  {
    "author": "RikkiGibson",
    "labels": [
      "area-Meta",
      "feature-request",
      "code-analyzer"
    ],
    "createdAt": "2019-03-08T18:06:48Z",
    "body": "The following doesn't produce a warning today, but eventually it should in a warning wave. A similar version where `S1.s2` and `S1` are non-readonly but `S1.M1` is readonly using the readonly members feature (see dotnet/csharplang#1710) should produce the same warning.\r\n\r\n### Implicit copy for non-readonly method invocation on readonly struct field\r\n\r\n```cs\r\npublic readonly struct S1\r\n{\r\n    public readonly S2 s2;\r\n    public void M1()\r\n    {\r\n        // warn on implicit local copy\r\n        s2.M2();\r\n\r\n        // no warning on explicit copy\r\n        var copy = s2;\r\n        copy.M2();\r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public int i;\r\n    public void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### ~~Implicit copy for calls to struct base members~~\r\n\r\nIn addition, we may want to start warning on invocations of base members on `this` which require an implicit copy. See https://github.com/dotnet/csharplang/issues/1710#issuecomment-468942391\r\n\r\n```cs\r\npublic readonly struct S\r\n{\r\n    public readonly int i;\r\n    public void M()\r\n    {\r\n        // warn\r\n        this.ToString();\r\n    }\r\n}\r\n```\r\n\r\n**Update**: the exact scenario where base members of readonly structs are copied before invocation might require more investigation. [SharpLab](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQFEAeAHJzkCWA9gHYBqUCBUwANigDQwgG0A+AAgMwAESUAE1K0Anj2QwEcAMYweAZQCwAKADeKnpp7c+0ISVE8CJOQQDcGrTo4AWHgFkAFAEpLm9cq1eeAeh88Ad0oSN28YAAsCZAA6ABUieUljAHMXC08tAF8VTKA==) makes it appear that these receivers are simply passed by ref even though the base methods aren't readonly per-se.\r\n\r\n### Implicit copy for non-readonly invocation on readonly ref variable\r\n```cs\r\npublic struct S\r\n{\r\n    public int i;\r\n\r\n    public static void M1(in S s)\r\n    {\r\n        // warn on implicit local copy\r\n        s.M2();\r\n\r\n        // explicit copy, no warning\r\n        var copy = s;\r\n        copy.M2();\r\n    }\r\n\r\n    void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### Add/remove event handlers on readonly value-typed variables\r\n\r\n```cs\r\nusing System;\r\n\r\npublic struct S1\r\n{\r\n    public readonly S2 s2;\r\n\r\n    public void M()\r\n    {\r\n        // These implicitly copy 's2' before calling\r\n        // the add/remove methods because 's2' is 'readonly'.\r\n        s2.E += Handler;\r\n        s2.E -= Handler;\r\n    }\r\n    \r\n    private void Handler(EventArgs args)\r\n    {\r\n        \r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public event Action<EventArgs> E;\r\n}\r\n```",
    "number": 64654,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-04-28T15:10:49Z",
          "user": "benaadams"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-08-05T08:21:34Z",
          "user": "bruno-garcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-02-13T01:53:31Z",
          "user": "JimBobSquarePants"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-30T20:54:35Z",
          "user": "JesOb"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-15T18:28:40Z",
          "user": "controlflow"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-27T20:03:07Z",
          "user": "LukaszMendakiewicz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-03T23:52:28Z",
          "user": "BoyBaykiller"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-12T22:46:41Z",
          "user": "andre-ss6"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-08-12T22:53:05Z",
          "user": "andre-ss6"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-01T22:30:31Z",
          "user": "h3xds1nz"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHOC-rdNQ=="
    },
    "updatedAt": "2022-03-29T18:46:59Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "benaadams",
          "body": "Related https://github.com/dotnet/roslyn/issues/17310",
          "createdAt": "2019-03-08T18:53:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-03-08T18:53:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3MTAzNjA5Mw=="
        },
        {
          "author": "RikkiGibson",
          "body": "Note that we've decided to give a warning out of the box when a non-readonly member is called from a readonly member and the receiver is `this`. Implicit copy warnings on fields will only be handled by this warning wave, regardless of whether the copy is occurring due to the field being readonly or the containing method being readonly.\r\n\r\nThis is in part due to the desire to have uniformity between readonly structs where the methods are also marked readonly, and readonly structs where the methods are not marked readonly.",
          "createdAt": "2019-05-22T18:36:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T18:36:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDkxNTQ0NA=="
        },
        {
          "author": "RikkiGibson",
          "body": "@jaredpar @jmarolf should we put this in wave 6?",
          "createdAt": "2020-10-29T19:35:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-29T19:35:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODk3NTUzMg=="
        },
        {
          "author": "jaredpar",
          "body": "It should definitely be a candidate ",
          "createdAt": "2020-10-29T22:16:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-29T22:16:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTA1NTI5Nw=="
        },
        {
          "author": "jmarolf",
          "body": "I have no objections to this being in Wave 6. In general, if the compiler team thinks a warning is ok I am certainly not going to have a difference in opinion.",
          "createdAt": "2020-11-01T22:10:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-01T22:10:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDE1OTU1OA=="
        },
        {
          "author": "RikkiGibson",
          "body": "I would like to implement this warning in the compiler and also ship a code fix to explicitly copy the struct before accessing the member. I think we still want sign-off from runtime team in order to do this, so I'm transferring the issue over to there.",
          "createdAt": "2022-02-02T00:31:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T00:31:14Z",
          "id": "IC_kwDODI9FZc49PX6e"
        },
        {
          "author": "RikkiGibson",
          "body": "@jeffhandley @jmarolf could we get this in the triage queue?",
          "createdAt": "2022-02-02T00:40:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T00:40:11Z",
          "id": "IC_kwDODI9FZc49PbJ3"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe following doesn't produce a warning today, but eventually it should in a warning wave. A similar version where `S1.s2` and `S1` are non-readonly but `S1.M1` is readonly using the readonly members feature (see dotnet/csharplang#1710) should produce the same warning.\r\n\r\n### Implicit copy for non-readonly method invocation on readonly struct field\r\n\r\n```cs\r\npublic readonly struct S1\r\n{\r\n    public readonly S2 s2;\r\n    public void M1()\r\n    {\r\n        // warn on implicit local copy\r\n        s2.M2();\r\n\r\n        // no warning on explicit copy\r\n        var copy = s2;\r\n        copy.M2();\r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public int i;\r\n    public void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### ~~Implicit copy for calls to struct base members~~\r\n\r\nIn addition, we may want to start warning on invocations of base members on `this` which require an implicit copy. See https://github.com/dotnet/csharplang/issues/1710#issuecomment-468942391\r\n\r\n```cs\r\npublic readonly struct S\r\n{\r\n    public readonly int i;\r\n    public void M()\r\n    {\r\n        // warn\r\n        this.ToString();\r\n    }\r\n}\r\n```\r\n\r\n**Update**: the exact scenario where base members of readonly structs are copied before invocation might require more investigation. [SharpLab](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQFEAeAHJzkCWA9gHYBqUCBUwANigDQwgG0A+AAgMwAESUAE1K0Anj2QwEcAMYweAZQCwAKADeKnpp7c+0ISVE8CJOQQDcGrTo4AWHgFkAFAEpLm9cq1eeAeh88Ad0oSN28YAAsCZAA6ABUieUljAHMXC08tAF8VTKA==) makes it appear that these receivers are simply passed by ref even though the base methods aren't readonly per-se.\r\n\r\n### Implicit copy for non-readonly invocation on readonly ref variable\r\n```cs\r\npublic struct S\r\n{\r\n    public int i;\r\n\r\n    public static void M1(in S s)\r\n    {\r\n        // warn on implicit local copy\r\n        s.M2();\r\n\r\n        // explicit copy, no warning\r\n        var copy = s;\r\n        copy.M2();\r\n    }\r\n\r\n    void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### Add/remove event handlers on readonly value-typed variables\r\n\r\n```cs\r\nusing System;\r\n\r\npublic struct S1\r\n{\r\n    public readonly S2 s2;\r\n\r\n    public void M()\r\n    {\r\n        // These implicitly copy 's2' before calling\r\n        // the add/remove methods because 's2' is 'readonly'.\r\n        s2.E += Handler;\r\n        s2.E -= Handler;\r\n    }\r\n    \r\n    private void Handler(EventArgs args)\r\n    {\r\n        \r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public event Action<EventArgs> E;\r\n}\r\n```\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>RikkiGibson</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>RikkiGibson</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Runtime`, `untriaged`, `feature request`, `Area-Compilers`, `New Feature - Warning Waves`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-02-02T20:43:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T20:43:40Z",
          "id": "IC_kwDODI9FZc49Sz2g"
        },
        {
          "author": "jaredpar",
          "body": "A warning that fires on implicit `struct` copy is going to be **very** noisy, particularly in customer code. Have problems seeing this as a warning wave because it's not a correctness issue but a performance one. If it were a low volume rule then I could see it being added but this is almost certainly to be a high volume rule (based on past experiences). \r\n\r\nThis is another case though where it's also really hard to see analyzers getting this right. The number of cases where implicit copies happen are too great. To be 100% it needs to be done in the compiler. But there isn't a great mechanism right now for disabled by default but enable-able by user story that we could hook into. ",
          "createdAt": "2022-02-02T21:24:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T21:24:26Z",
          "id": "IC_kwDODI9FZc49S7PM"
        },
        {
          "author": "RikkiGibson",
          "body": "I agree the warning should be implemented in the compiler.\r\n\r\nI think lots of code bases will be \"guilty\" of this warning and not care at all about it, and perhaps that means it shouldn't be an enabled-by-default warning even in the latest wave. I feel like this has come up before with other warnings.\r\n\r\nI am wondering if the right way would be to make the compiler produce a warning with 'IsSuppressed: true' set on it, and then add a way to \"un-suppress\" such warnings in the project file. cc @mavasani",
          "createdAt": "2022-02-02T21:31:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-03T07:40:44Z",
                "user": "JesOb"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCM3JPw=="
          },
          "updatedAt": "2022-02-02T21:31:00Z",
          "id": "IC_kwDODI9FZc49S8dQ"
        },
        {
          "author": "tannergooding",
          "body": "What about having the compiler do the analysis and expose an API that says whether a copy is being made? That way the compiler doesn't need to surface any error but some new analyzer in `dotnet/roslyn-analyzers` could then utilize the API to surface the \"issue\" to the user?\r\n\r\nIt would be a different approach, but seems like something that might be useful information to have for a range of scenarios, depending on your usage/needs.",
          "createdAt": "2022-02-02T22:38:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T22:38:11Z",
          "id": "IC_kwDODI9FZc49TILZ"
        },
        {
          "author": "jmarolf",
          "body": "We do have a [performance category](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings) for analyzers, and you can enable it with a [single line](https://docs.microsoft.com/dotnet/core/project-sdk/msbuild-props#analysismodecategory) in a project file.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\t <!-- Indicates that this library is performance sensitive and you want to be told about performance problems-->\r\n\t<AnalysisModePerformance>All</AnalysisModePerformance>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nSetting aside the implementation details for a bit I would be fine with a customer experience where this is off by default but if the developer tells us \"performance matters in this project\" then we can be more aggressive and warn them about things like this.",
          "createdAt": "2022-02-02T23:00:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-03T07:41:53Z",
                "user": "JesOb"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCM3J3g=="
          },
          "updatedAt": "2022-02-02T23:00:25Z",
          "id": "IC_kwDODI9FZc49TLWB"
        },
        {
          "author": "RikkiGibson",
          "body": "> What about having the compiler do the analysis and expose an API that says whether a copy is being made? That way the compiler doesn't need to surface any error but some new analyzer in `dotnet/roslyn-analyzers` could then utilize the API to surface the \"issue\" to the user?\r\n> \r\n> It would be a different approach, but seems like something that might be useful information to have for a range of scenarios, depending on your usage/needs.\r\n\r\nI would want to know of more scenarios besides the one in this issue. I feel like it would be good for the IOperation tree to have enough info to draw all these conclusions without \"reimplementing\" parts of the compiler so to speak. I do not know whether this is already the case. Ultimately any analyzer that wants to know about this is not going to be able to register one callback and handle all the scenarios correctly. There are loads of edge cases and places where methods are called on things implicitly.\r\n",
          "createdAt": "2022-02-02T23:22:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-02T23:22:48Z",
          "id": "IC_kwDODI9FZc49TOyi"
        },
        {
          "author": "jmarolf",
          "body": "Don't want to derail this but there is a general desire to track allocations in general. There is this analyzer: https://github.com/microsoft/RoslynClrHeapAllocationAnalyzer/tree/master/ClrHeapAllocationsAnalyzer but there are _lots_ of things it will miss. Having some API to understand how copys/allocations are going to be done would be useful imho and was certainly one of John Hambys goals for IOperation way back when. Don't think we want to block this issue on that just yet. First, I want to establish what we think a reasonable default behavior for this should be.",
          "createdAt": "2022-02-02T23:28:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-02T23:33:55Z",
                "user": "tannergooding"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCM0Z_A=="
          },
          "updatedAt": "2022-02-02T23:28:00Z",
          "id": "IC_kwDODI9FZc49TPlM"
        },
        {
          "author": "sonnemaf",
          "body": "I use [ErrorProne.NET.Structs](https://github.com/SergeyTeplyakov/ErrorProne.NET/) for this. Version [0.4.0-beta1](https://www.nuget.org/packages/ErrorProne.NET.Structs/0.4.0-beta.1) works great. You can even set a size threshold using the `error_prone.large_struct_threshold = 16` in the `.editorconfig`.\r\n\r\nMaybe we should ask [Sergey Teplyakov](https://github.com/SergeyTeplyakov) what the status is. cc @SergeyTeplyakov\r\n\r\n\r\n\r\n",
          "createdAt": "2022-02-03T12:53:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-03T12:53:58Z",
          "id": "IC_kwDODI9FZc49VK2r"
        },
        {
          "author": "jaredpar",
          "body": ">  I am wondering if the right way would be to make the compiler produce a warning with 'IsSuppressed: true' set on it, and then add a way to \"un-suppress\" such warnings in the project file. \r\n\r\nThis is my preferred approach. Today we can effectively produce hidden diagnostics that analyzers can hook and expose. That is very indirect and inefficient (loading a 3rd party assembly into the compiler to turn a diagnostic on). It seems like a better outcome in this cases is to have a warning that is effectively off by default that we can then turn on. ",
          "createdAt": "2022-02-03T16:37:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-03T17:06:51Z",
                "user": "tannergooding"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCM94DA=="
          },
          "updatedAt": "2022-02-03T16:37:14Z",
          "id": "IC_kwDODI9FZc49V_us"
        },
        {
          "author": "mavasani",
          "body": "> make the compiler produce a warning with 'IsSuppressed: true' set on it, and then add a way to \"un-suppress\" such warnings in the project file.\r\n\r\nAgree with the overall philosophy, but the suggested implementation seems a bit roundabout way to do it. Instead, a simpler implementation would be to adjust the descriptor created [here](https://sourceroslyn.io/#Microsoft.CodeAnalysis/Diagnostic/DiagnosticInfo.cs,84) for each compiler diagnostic to not force `isEnabledByDefault: true` for all error codes, but instead allow C# and VB implementations to pass in `false` for `isEnabledByDefault` for specific error codes. You would not require `IsSuppressed: true` to be set as the diagnostic itself is disabled by default, and one would need an entry in editorconfig/ruleset to enable this diagnostic ID.",
          "createdAt": "2022-02-07T06:00:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-07T06:00:54Z",
          "id": "IC_kwDODI9FZc49dV6O"
        },
        {
          "author": "jmarolf",
          "body": "> Instead, a simpler implementation would be to adjust the descriptor created [here](https://sourceroslyn.io/#Microsoft.CodeAnalysis/Diagnostic/DiagnosticInfo.cs,84) for each compiler diagnostic to not force isEnabledByDefault: true for all error codes\r\n\r\nah, cool idea @mavasani! This would make everything light up with minimal changes. If the developer adds something like `<AnalysisModePerformance>All</AnalysisModePerformance>` to their project file the usual MSBuild goop will activate to pass the correct `globalconfig` file to the compiler. They could also manually add an entry in an `editorconfig` file. ",
          "createdAt": "2022-02-07T07:18:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-07T07:18:24Z",
          "id": "IC_kwDODI9FZc49dg2c"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe following doesn't produce a warning today, but eventually it should in a warning wave. A similar version where `S1.s2` and `S1` are non-readonly but `S1.M1` is readonly using the readonly members feature (see dotnet/csharplang#1710) should produce the same warning.\r\n\r\n### Implicit copy for non-readonly method invocation on readonly struct field\r\n\r\n```cs\r\npublic readonly struct S1\r\n{\r\n    public readonly S2 s2;\r\n    public void M1()\r\n    {\r\n        // warn on implicit local copy\r\n        s2.M2();\r\n\r\n        // no warning on explicit copy\r\n        var copy = s2;\r\n        copy.M2();\r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public int i;\r\n    public void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### ~~Implicit copy for calls to struct base members~~\r\n\r\nIn addition, we may want to start warning on invocations of base members on `this` which require an implicit copy. See https://github.com/dotnet/csharplang/issues/1710#issuecomment-468942391\r\n\r\n```cs\r\npublic readonly struct S\r\n{\r\n    public readonly int i;\r\n    public void M()\r\n    {\r\n        // warn\r\n        this.ToString();\r\n    }\r\n}\r\n```\r\n\r\n**Update**: the exact scenario where base members of readonly structs are copied before invocation might require more investigation. [SharpLab](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQFEAeAHJzkCWA9gHYBqUCBUwANigDQwgG0A+AAgMwAESUAE1K0Anj2QwEcAMYweAZQCwAKADeKnpp7c+0ISVE8CJOQQDcGrTo4AWHgFkAFAEpLm9cq1eeAeh88Ad0oSN28YAAsCZAA6ABUieUljAHMXC08tAF8VTKA==) makes it appear that these receivers are simply passed by ref even though the base methods aren't readonly per-se.\r\n\r\n### Implicit copy for non-readonly invocation on readonly ref variable\r\n```cs\r\npublic struct S\r\n{\r\n    public int i;\r\n\r\n    public static void M1(in S s)\r\n    {\r\n        // warn on implicit local copy\r\n        s.M2();\r\n\r\n        // explicit copy, no warning\r\n        var copy = s;\r\n        copy.M2();\r\n    }\r\n\r\n    void M2()\r\n    {\r\n        i = 23;\r\n    }\r\n}\r\n```\r\n\r\n### Add/remove event handlers on readonly value-typed variables\r\n\r\n```cs\r\nusing System;\r\n\r\npublic struct S1\r\n{\r\n    public readonly S2 s2;\r\n\r\n    public void M()\r\n    {\r\n        // These implicitly copy 's2' before calling\r\n        // the add/remove methods because 's2' is 'readonly'.\r\n        s2.E += Handler;\r\n        s2.E -= Handler;\r\n    }\r\n    \r\n    private void Handler(EventArgs args)\r\n    {\r\n        \r\n    }\r\n}\r\n\r\npublic struct S2\r\n{\r\n    public event Action<EventArgs> E;\r\n}\r\n```\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>RikkiGibson</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>RikkiGibson</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`, `feature request`, `Area-Compilers`, `New Feature - Warning Waves`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-02-14T21:48:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-14T21:48:40Z",
          "id": "IC_kwDODI9FZc499xLz"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHOPfcS8w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/64654",
    "title": "Readonly structs should warn when fields are implicitly copied for member invocation"
  },
  {
    "author": "tannergooding",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2019-04-04T00:02:17Z",
    "body": "C# 8 has added a new feature called \"readonly members\". This feature allows you to indicate that an individual method on a non-readonly struct is itself \"readonly\" (i.e. that the method does not mutate the state of the instance).\r\n\r\n**_Edit_**\r\n\r\nWe need to define a strategy for if/how/when/where this feature should be used across the .NET Libraries. Originally, the intent of this issue was to take a pass over the libraries and annotate methods on non-readonly structs which do not and will never mutate the state of the instance. It was noted that there are a number of these methods in the `System.Numerics` namespace which users also may try to pass around as `in`. However, after such a pass was taken by @hrrrrustic in #46675, we realized that we need to be more strategic about this effort.\r\n\r\nSome of the aspects that need to be considered are:\r\n\r\n1. For every API touched, we have to evaluate it through the lens of whether we'd _ever_ want to allow mutation to occur -- it would be a breaking change to remove `readonly` later. For example, adding caching to a `readonly` method later would be a breaking change.\r\n2. How we quantify the value that `readonly` provides across different areas relative to that possibility\r\n3. If we can define and document API design guidance to follow both with these PRs and for all APIs going forward\r\n",
    "number": 1718,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-05-02T20:00:26Z",
          "user": "pentp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-22T23:42:35Z",
          "user": "cshung"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOA5tNXg=="
    },
    "updatedAt": "2021-05-13T16:41:15Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "tannergooding",
          "body": "CC. @stephentoub as I believe you made a similar pass for `readonly structs`.",
          "createdAt": "2019-04-04T00:02:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-04T00:02:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3OTcwMDcyNw=="
        },
        {
          "author": "tannergooding",
          "body": "I plan on looking at `System.Numerics` itself; but there are likely other areas that would benefit as well.",
          "createdAt": "2019-04-04T00:02:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-04T00:02:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3OTcwMDgxOQ=="
        },
        {
          "author": "tannergooding",
          "body": "(The ability to do this work is also pending a compiler update to the repo).",
          "createdAt": "2019-04-04T00:03:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-04T00:03:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3OTcwMDkyNQ=="
        },
        {
          "author": "stephentoub",
          "body": "> I believe you made a similar pass for readonly structs.\r\n\r\nI'd written a little Roslyn-based tool that just made structs readonly if all of their fields were readonly, and then I reviewed the changes it made to ensure they were appropriate (I didn't do the next step of having it look for fields that weren't readonly but could have been).  A simple tool could similarly be written here that would look at all methods/properties on non-readonly structs and see whether they write to any of the struct's fields, pass this by ref, etc... there'd be some false positives and some false negatives, but I expect it would automate most of the work.\r\n\r\nHowever, we'll want to be careful in what we annotate as readonly, as once we do, that method won't be able to modify the struct (at least not without hackery), and so we'll want to only do so when we're confident it'll never want to mutate.",
          "createdAt": "2019-04-04T00:36:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-04T00:46:44Z",
                "user": "tannergooding"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-04T22:33:26Z",
                "user": "stakx"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOAmWcvg=="
          },
          "updatedAt": "2019-04-04T00:37:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ3OTcwNjUyNQ=="
        },
        {
          "author": "tannergooding",
          "body": "I've got a PR up for the System.Numerics.Vectors project: https://github.com/dotnet/corefx/pull/36663.\r\n\r\nIn this case, they are all structs that expose their fields publicly (so we can't mark them as `readonly`) but all instance methods are currently, have always been, and always should be non-mutating.",
          "createdAt": "2019-04-06T16:45:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-06T16:45:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MDUxODg0OQ=="
        },
        {
          "author": "tannergooding",
          "body": "`ToString` and `Equals` are likely common methods that would be good to mark as `readonly`. Property getters are likely the other common case where there will be no controversy.\r\n\r\nI think other methods will likely be a case by case basis.",
          "createdAt": "2019-04-08T23:45:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-08T23:45:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MTA0Nzg1NA=="
        },
        {
          "author": "benaadams",
          "body": "`GetHashCode` also?",
          "createdAt": "2019-04-28T16:07:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-28T17:44:27Z",
                "user": "tannergooding"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-22T10:55:20Z",
                "user": "GSPP"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-16T16:45:40Z",
                "user": "danmoseley"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOA5ObXg=="
          },
          "updatedAt": "2019-04-28T16:07:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4NzM5MjYxNw=="
        },
        {
          "author": "Joe4evr",
          "body": "Would like to throw in a vote to make members of `System.Guid` readonly. There may be a deeper reason why its fields can't be `readonly`, but far as I can see, everything on it seems to only do non-mutating things.",
          "createdAt": "2019-10-22T10:32:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-10-22T12:55:04Z",
                "user": "benaadams"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAzQJkQ=="
          },
          "updatedAt": "2019-10-22T10:32:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0NDg5OTgzNQ=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "`Guid`'s lack of annotations is almost certainly because of the mutation done to the instance as part of construction. But honestly this really should be an implementation detail and shouldn't stop us from annotating the type appropriately.\r\n\r\nEdit: Also because constructs like `Unsafe.Add(ref _a, ...)` appear throughout the code base outside of the ctor. @tannergooding, this matches what you said earlier re: difficult to use the `Unsafe` APIs in these scenarios because they all take _ref_ instead of _in_.",
          "createdAt": "2020-01-14T20:57:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-15T00:06:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NDM3MDg2Mg=="
        },
        {
          "author": "Gnbrkm41",
          "body": "Opened a PR to mark Guid as readonly. Do we need an API review session for this?",
          "createdAt": "2020-01-16T15:03:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-16T15:03:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTE5MjA2MA=="
        },
        {
          "author": "tannergooding",
          "body": "So far we have done API review sessions for most of these changes (but they have been pretty quick in each case). It is generally beneficial just to have the input from @dotnet/fxdc that the right changes are being made.",
          "createdAt": "2020-01-16T15:05:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-16T15:05:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTE5MzI3MA=="
        },
        {
          "author": "jeffhandley",
          "body": "I've updated the issue title and description to reflect what we learned in https://github.com/dotnet/runtime/pull/46675#issuecomment-828694665.",
          "createdAt": "2021-04-29T20:39:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T20:39:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTU4MDY2Mg=="
        },
        {
          "author": "bartonjs",
          "body": "We sort of have have guidance for new API:\r\n\r\n* DO declare immutable value types with the readonly modifier.\r\n* DO declare nonmutating methods on mutable value types with the readonly modifier.\r\n\r\nAnd, I put the breakingness into the book:\r\n\r\n* D.6.6 Adding readonly on a struct (OK, changes behavior on recompile)\r\n* D.6.7 Removing readonly from a struct (Not OK, changes runtime behavior, changes behavior on recompile)\r\n* D.11.14 Adding the readonly Modifier to a struct Method (OK, changes behavior on recompile)\r\n* D.11.15 Removing the readonly Modifier from a struct Method (Not OK, changes runtime behavior, changes behavior on recompile)\r\n\r\nThe thing that we don't have a stance on is how to re-evaluate existing methods, or what level of mutation we're willing to lie about (e.g. I believe you can still do things like take a pointer to a readonly struct, at which point you have a pointer, so \"readonly \"is out the door).  And since we never made the conscious choice with existing API we now have the \"hmm, do we keep the door open here, or let it close?\" problem, which is (largely) unique to existing API.",
          "createdAt": "2021-04-29T21:03:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T21:03:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTU5NDczNQ=="
        },
        {
          "author": "tannergooding",
          "body": "For mutable structs, `readonly` methods have the benefit of avoiding copies when called. This can happen largely in two places:\r\n* You pass something by `in`\r\n* You have a `readonly MyStruct _field` or `static readonly MyStruct _field`\r\n\r\nFor types like `Complex`, they should have been `readonly` in the first place and the fix here is to just make the entire struct `readonly`.\r\nFor types like `Vector2/3/4`, they never should have exposed public fields and so should have been marked `readonly`, but can't be. So we instead annotated the individual methods as `readonly`.\r\n\r\nWhen looking at whether or not something should be marked `readonly`, I think we largely need to consider the usage scenario. If something is expected to be passed by `in` or expected to be used in a `readonly` or `static readonly` field, then key methods (particularly things like `ToString`, `Equals`, or `GetHashCode` which probably shouldn't mutate, particularly the last two given problems that could arise from that).\r\n\r\n~~`Guid` is an example of something that should probably be a `readonly struct` but which isn't today. Especially in native Windows code, it is commonly passed as `const GUID*` (`in Guid` in C#).~~\r\nWe actually did make `Guid` readonly, I missed that 😄 \r\nOther examples likely need to be considered on a per type basis for how likely they are to be used in a particular scenario.\r\n",
          "createdAt": "2021-04-29T21:27:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-29T21:41:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTYwODAzMg=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "I see struct types as falling into two general categories.\r\n\r\nThe first category is where the struct is an exchange type and represents some standalone datum. Tanner gave some good examples earlier: `Complex`, `VectorX`, `Guid`, etc. The rule of thumb that I use is that if making a byval copy of the struct also makes a standalone copy of the datum, then it falls under this category. We should add _readonly_ annotations to such structs / members where feasible, especially since it's common in data exchange scenarios for people to have readonly refs to such data.\r\n\r\nThe second category is where the struct does not represent some standalone datum, but where it instead acts as a wrapper or mutator around something else. Some examples of this are enumerators (`List<T>.Enumerator`), readers (`Utf8JsonReader`), and builders (`System.HashCode`). The point of these APIs is to perform some sort of state change or other side effect-producing operation. These structs are not very useful if somebody keeps a readonly reference to them, and in practice nobody does so anyway.\r\n\r\nFor this second category, I don't think there's significant benefit to marking the APIs _readonly_. Assuming that it's not typical for application code to maintain readonly references to such types, nobody's really going to see the benefit anyway. And it ties our hands such that we'd need to guarantee that these methods remain non-mutating for all time. The tradeoff does not seem worth it.",
          "createdAt": "2021-04-29T22:06:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-29T22:32:04Z",
                "user": "tannergooding"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBpH_jQ=="
          },
          "updatedAt": "2021-04-29T22:06:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTYyNjY1MQ=="
        }
      ],
      "totalCount": 15,
      "endCursor": "Y3Vyc29yOnYyOpHOMXMZGw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/1718",
    "title": "Determine Libraries strategy for using the readonly members annotation"
  },
  {
    "author": "The-Futurist",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2019-04-11T14:15:31Z",
    "body": "This is to discuss adding a capability for managed code to determine the memory alignment needs of any unmanaged struct. For certain interop scenarios we may need to allocate struct instances outside the AppDomain (for example in user heap accessible to other code, perhaps native code).\r\n\r\nThese \"manually\" allocated instances would be exposed to managed code as ref values.\r\n\r\nHowever when the raw memory is allocated we must ensure that the (artificially generated) ref is aligned in the same way it would be aligned by the CLR so that these returned ref values are wholly compatible to managed code.\r\n\r\nA struct containing just byte fields for example can be aligned more flexibly than a struct containing just double fields or decimal fields, in principle we could craft code to analyze the struct since we know the alignment needs of all primitives and the padding rules used by the CLR, but to future proof this more is needed, for example SIMD it seems can have stringent alignment needs..",
    "number": 29235,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-08-20T05:59:02Z",
          "user": "viktor-svub"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOAu02jQ=="
    },
    "updatedAt": "2023-10-25T15:51:18Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "john-h-k",
          "body": "Wouldn't the runtime need to expose it? dotnet/coreclr\r\nBut definitely seems a nice thing to have for interop\r\n(I fully think this would be a good idea, but an inefficient workaround, it would work to `Unsafe.ReadUnaligned<YourStruct>` from a returned ref iirc)",
          "createdAt": "2019-04-11T14:36:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T14:36:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjE0MTE5Mg=="
        },
        {
          "author": "The-Futurist",
          "body": "@johnkellyoxford - IL provides a very useful [opcode](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldflda?view=netframework-4.7.2) that I may have used in the past for something like this, I should look at that code (it's not immediately to hand by the way) but I believe I used this to determine the in-memory (that is CLR memory) size of structs before (Why did I think there was an IL opcode for getting a field's offset...).\r\n\r\nBy creating a small dynamic IL delegate specific for some type, we can determine the alignment I think.\r\n\r\nWe'd (in explicit IL) create instance of `T `(which by definition will be correctly aligned), then get it's address and then - simply - calculate (if that's not too rich a term for this simple operation) how that address is aligned and we're done (cache this integer in a static dictionary keyed by type).\r\n\r\nI think this is one way we - ordinary developers - could implement this, but having it added to the `Unsafe `class would make a lot more sense, there's probably no need to restrict `T `to an `unmanaged struct` either, though that is our use case.\r\n\r\nThe only \"flaw\" here (but a pretty harmless one) is that we may find some type gets aligned on a 16 byte boundary (using the dynamic IL idea above) purely by fluke, when in fact it's actual alignment needs might only be 4 bytes, but this is fine really.\r\n\r\n",
          "createdAt": "2019-04-11T16:03:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T16:15:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjE3NjY5NQ=="
        },
        {
          "author": "john-h-k",
          "body": "that is an issue, because if for example, you get the pointer value 8192, you might think it is 8192 byte aligned, which might cause some issues....",
          "createdAt": "2019-04-11T19:09:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T19:09:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjI2MTk4NA=="
        },
        {
          "author": "The-Futurist",
          "body": "@johnkellyoxford - Hmm, yep nice one, you are correct; I think this needs additional thinking...",
          "createdAt": "2019-04-11T19:55:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T19:56:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjI4ODAxOA=="
        },
        {
          "author": "john-h-k",
          "body": "Also, getting a wrong value seems a bit of an error. Easier to call into the runtime to ask for it",
          "createdAt": "2019-04-11T20:05:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T20:05:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjI5MTQ2OQ=="
        },
        {
          "author": "The-Futurist",
          "body": "@johnkellyoxford - Looking at typical generated IL for this kind of thing reveals little. \r\n\r\nFor example, this C#:\r\n\r\n```cs\r\nusing System;\r\npublic class C {\r\n    public void M() {\r\n\r\n        var x = \"\";\r\n        var d = new Data();\r\n        \r\n        d.a = 8;\r\n    \r\n    }\r\n}\r\n\r\npublic struct Data\r\n{\r\n    public byte a;\r\n    double b;\r\n}\r\n\r\n\r\n```\r\n\r\ngenerates (among other things):\r\n\r\n```il\r\n.class public auto ansi beforefieldinit C\r\n    extends [mscorlib]System.Object\r\n{\r\n    // Methods\r\n    .method public hidebysig \r\n        instance void M () cil managed \r\n    {\r\n        // Method begins at RVA 0x2050\r\n        // Code size 24 (0x18)\r\n        .maxstack 2\r\n        .locals init (\r\n            [0] string,\r\n            [1] valuetype Data\r\n        )\r\n\r\n        IL_0000: nop\r\n        IL_0001: ldstr \"\"\r\n        IL_0006: stloc.0\r\n        IL_0007: ldloca.s 1\r\n        IL_0009: initobj Data\r\n        IL_000f: ldloca.s 1\r\n        IL_0011: ldc.i4.8\r\n        IL_0012: stfld uint8 Data::a\r\n        IL_0017: ret\r\n    } // end of method C::M\r\n\r\n```\r\nThe `.local init ( )` stuff isn't clear, it doesn't seem to be IL and I have no idea what it actually results in. The struct address itself (the address of the instance created in the `.locals init`) is already determined and used by the `ldloca.s` opcode, so by the time instruction 0007 is encountered the datum's memory has been allocated, an address determined for it and it's alignment already taken into consideration.\r\n\r\nSo it's not clear how the memory for the item Data (local 1) is actually allocated...\r\n\r\n",
          "createdAt": "2019-04-11T21:42:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T21:48:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjMzMjIxNQ=="
        },
        {
          "author": "john-h-k",
          "body": "I think you are misunderstanding. `locals init` (or more specifically, `locals`, the `init` just says they must all be zero intialized) is where your local variables are declared. `ldloca.s 1` is just an instruction like any other to load the address of the second local here `[1] valuetype Data`, which could also be named not indexed, so `ldloca.s 'Data'`. The address is runtime created, as it is dependent on many things (firstly, hard coded addresses that aren't RVAs won't work great with virtual memory). Given it is a valuetype it will be stackallocated here, defined by the OS + architecture system ABI. So Data will be 8 byte aligned on Windows x86_64, Windows x86 (32 bit), and Linux x86_64, and 4 bytes aligned on Linux x86 (32 bit). Alignment cannot be told from IL* because it is system specific\r\n\r\n*Except in cases of explicit `Pack` and `Size` attributes, but won't go into that",
          "createdAt": "2019-04-11T21:50:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T21:50:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjMzNDYwMQ=="
        },
        {
          "author": "The-Futurist",
          "body": "@johnkellyoxford - Yes, I do have only a partial understanding of this, much of it being inferred. It seems then that the code that actually does the allocation of the struct (in the above example) is not written in IL but external to it, and simply presumed when we look at the IL.\r\n\r\nSo I guess there are primitives that are specific to each platform, and these primitives are the things that are \"aware\" of the alignment details...very interesting...",
          "createdAt": "2019-04-11T22:47:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-11T22:47:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjM1NTExMA=="
        },
        {
          "author": "PathogenDavid",
          "body": "> So I guess there are primitives that are specific to each platform, and these primitives are the things that are \"aware\" of the alignment details...very interesting...\r\n\r\nCorrect. To put it another way: IL runs on a theoretical virtual machine. The CLR implementation translates the IL representation into one which the target machine (x86, ARM, whatever) understands before it runs. I don't believe the VM ever cares about things like memory alignment, but the target machine might. So it's up to the CLR implementation to care about these things.\r\n\r\n(This is why I said in the other issue that the CLR developers might be hesitant to expose something like this. You might in theory have an object allocated with a different alignment depending on whether it was allocated on the stack or the heap. Or maybe special SIMD types trigger special alignment, but only when the runtime thinks SIMD instructions might be used on it. By exposing that implementation detail, they lose flexibility in this regard.)",
          "createdAt": "2019-04-12T05:24:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T05:24:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjQ0MTc5NQ=="
        },
        {
          "author": "john-h-k",
          "body": "@PathogenDavid We have `sizeof` to be fair. I feel a helper method (rather than IL opcode), like `RuntimeHelpers.AlignmentOf<T>()` would be best. The fact we have `sizeof` indicates it can't really change stack<->heap. ",
          "createdAt": "2019-04-12T06:51:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T06:51:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjQ1OTU2MQ=="
        },
        {
          "author": "john-h-k",
          "body": "![image](https://user-images.githubusercontent.com/32420055/56018749-dcf2f480-5cfa-11e9-98ff-62b4815bf134.png)\r\nThink this is the field that is key here (the bottom one)",
          "createdAt": "2019-04-12T07:14:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T07:14:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjQ2NTE3NQ=="
        },
        {
          "author": "john-h-k",
          "body": "![image](https://user-images.githubusercontent.com/32420055/56018924-51c62e80-5cfb-11e9-865e-220278ab932c.png)\r\nThere are 2 - one for unmanaged, one for managed, I think. Providing explicit methods for both could be done, or just \r\n```\r\nreturn MAX(m_LargestAlignmentRequirementOfAllMembers, m_ManagedLargestAlignmentRequirementOfAllMembers);\r\n```\r\n\r\n\r\nso you will get the required alignment for passing it between managed/unmanaged code",
          "createdAt": "2019-04-12T07:18:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T07:30:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjQ2NjIyNQ=="
        },
        {
          "author": "PathogenDavid",
          "body": "> @PathogenDavid We have `sizeof` to be fair. I feel a helper method (rather than IL opcode), like `RuntimeHelpers.AlignmentOf<T>()` would be best.\r\n\r\nI'm not arguing against exposing the alignment, just warning @Korporal that it might be higher-friction than he thinks. I'd actually really like to see CoreCLR make more guarantees around alignment.\r\n\r\n> The fact we have `sizeof` indicates it can't really change stack<->heap.\r\n\r\nWhy? Size should not affect alignment at all. I can allocate a 32 byte struct at 0x4000000 or 0x4000001. It'll have the same size, but only one of them will be aligned to a 2 byte boundary.\r\n\r\n-----------\r\n\r\n(Also SizeOf is much more important to interop scenarios than alignment is, so I don't think the early .NET Devs could've gotten away without it even if they wanted to. For instance, Windows is full of structures that need to be initialized with their own size, a quick grep says there's 1,323 such instances of `cbSize` in the Windows 17763 headers. Reference source says .NET Framework 4.7.2 has 821 uses of `Marshal.SizeOf`.)",
          "createdAt": "2019-04-12T09:26:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T09:26:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjUwNTM3Nw=="
        },
        {
          "author": "PathogenDavid",
          "body": "You can link to specific line ranges on GitHub, BTW: https://github.com/dotnet/coreclr/blob/72d49127a0c25e4b931c81e621c2411bfb6633a5/src/vm/class.h#L383-L391",
          "createdAt": "2019-04-12T09:27:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-12T09:30:35Z",
                "user": "john-h-k"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAmzxDw=="
          },
          "updatedAt": "2019-04-12T09:27:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjUwNTY4Nw=="
        },
        {
          "author": "john-h-k",
          "body": "Hmm, is it best to expose it as\r\n`GetManagedAlignment<T>()`\r\nand\r\n`GetNativeAlignment<T>()`, \r\neach exposing the respective `EEClassLayoutInfo` field, or to do\r\n`GetAlignment<T>()`, which does one of the following, and if so, which one?:\r\n* returns the managed alignment\r\n* returns the unmanaged alignment\r\n* returns the greater of the two",
          "createdAt": "2019-04-12T10:05:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T10:48:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjUxNzc3Ng=="
        },
        {
          "author": "The-Futurist",
          "body": "@johnkellyoxford @PathogenDavid \r\n\r\nVery interesting guys. Ultimately the goal is to ensure that we can create and return a `ref` to an `unmanaged struct` in such a way that no _member_ of the `struct` is aligned improperly for the platform. \r\n\r\nSo I don't see any conceptual difference between a \"managed alignment\" and a \"native alignment\" in this regard. Ultimately every datum refers to an actual memory address which is by definition a physical thing not a managed thing.\r\n\r\nI'd be curious to see a `struct` example that has a different managed and native alignment. For the time being this is almost academic because we can easily define the default allocation alignment to be 8 and have rather a small wastage likelihood. But in the future we may see types that need 16 byte or 32 byte alignment and aligning these on 8 byte boundary might lead to nasty stuff.\r\n\r\nAnyway what are these \"SIMD' types I hear about? types that do (might?) need alignment > 8?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2019-04-12T20:59:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-12T20:59:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4MjcyMTMwMw=="
        },
        {
          "author": "PathogenDavid",
          "body": "> I'd be curious to see a `struct` example that has a different managed and native alignment.\r\n\r\nMy assumption is that it is for structs which are marshaled, so it wouldn't be relevant in your case.\r\n\r\nI'm actually not entirely certain if either of these two fields are what you actually want. They're only used for debug output and field marshaling unless I missed something. They don't appear to directly influence allocation.\r\n\r\n> Anyway what are these \"SIMD' types I hear about? types that do (might?) need alignment > 8?\r\n\r\nSIMD is short for \"Single Instruction, Multiple Data\".\r\n\r\nMultiple data: At a hardware level you have special large register that are divided up into multiple discrete values.\r\n\r\nSingle instruction: There are special instructions ([big list for x86 here](https://en.wikipedia.org/wiki/X86_instruction_listings#SIMD_instructions)) that operate on multiple values at once in regards to these special registers. For example, the `addps xmm0, xmm1` instruction adds floats together all at once.\r\n\r\nIn the context of x86, SIMD types are generally the only time when you need to start caring about alignment because some load/store operations working with those registers have alignment requirements.\r\n\r\nIn .NET, SIMD types are exposed under the `System.Numerics` namespace and `System.Runtime.Intrincics`. [Here is an example using System.Numerics](https://sharplab.io/#v2:EYLgHgbALANALiAhgZwLYB8ACAGABJgRgDoA5AV1QFMAnASwGNkBuAWACh3MBmfAJlwAqlZHHYBvdrin4eANUr04Ae2pRcAQQAmmgBTzFKtYhi59y1bmABKSdLsBeAHy5EuANSXWbO7andTCuZqAEKImlq6ZoYuJlEW1r52uE64AHaUAO4BBqo6iEQAGu6WhSb5AJrFwETlZUQAWlUNdQDqTS1WXgC+7EA==) to demonstrate the code gen for SIMD and non-SIMD vector addition. (You can actually see that the JIT emits unaligned load instructions (`vmovupd`).)",
          "createdAt": "2019-04-13T06:11:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-13T06:13:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4Mjc4MDI4NQ=="
        },
        {
          "author": "john-h-k",
          "body": "Honestly, if I were you, I'd just respect 8 or 16 byte alignment by default and just work with that. It's easiest",
          "createdAt": "2019-04-13T06:14:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-04-13T06:39:37Z",
                "user": "PathogenDavid"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAm3MYw=="
          },
          "updatedAt": "2019-04-13T06:14:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4Mjc4MDQ3OQ=="
        },
        {
          "author": "PathogenDavid",
          "body": "@Korporal I am rapidly starting to think that instead of asking for a new API, you need to ask a JIT expert if you even need the API in the first place. I'm pretty confident that you don't.\r\n\r\nIf you're writing a custom allocator on the native side for some reason, make sure everything is word-aligned. If the native side has stricter alignment requirements for SIMD, make sure its meeting those requirements. Otherwise I think you're worrying about this way too much.",
          "createdAt": "2019-04-13T06:35:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-13T06:35:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4Mjc4MTU2NA=="
        },
        {
          "author": "PathogenDavid",
          "body": "> Honestly, if I were you, I'd just respect 8 or 16 byte alignment by default and just work with that. It's easiest\r\n\r\n[CRT's malloc](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/malloc) aligns to 8 bytes on 32-bit and 16 on 64-bit.\r\n\r\n[glibc's malloc](http://manpages.ubuntu.com/manpages/bionic/en/man3/malloc.3.html) is a little more vague with \"suitably  aligned for any built-in type\". ([Comment in the implementation says it's double the word size](https://github.com/bminor/glibc/blob/e3f454bac0f968216699ca405c127c858f0657c7/malloc/malloc.c#L98-L101), which is the same as the CRT.)",
          "createdAt": "2019-04-13T06:46:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-04-13T06:46:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ4Mjc4MjIyMg=="
        },
        {
          "author": "weltkante",
          "body": "Seems you can now do this calculation yourself and it gets optimized pretty well by the JIT, as mentioned [here](https://github.com/dotnet/runtime/issues/45152#issuecomment-1778249871):\r\n> We added JIT support for some of these patterns in .NET 8 in #81998. See e.g. this example: https://godbolt.org/z/or76frsWs\r\n\r\nI updated my interop helper for alignment calculation and made a few more tests, structs look very good, a single constant load, but alignment of primitives is not perfectly optimized yet, but still pretty good: https://godbolt.org/z/vTMxasnf7\r\n\r\n```csharp\r\npublic static class InteropHelper {\r\n    private struct AlignmentCheck<T> where T : unmanaged {\r\n        public byte Padding;\r\n        public T Content;\r\n    }\r\n\r\n    [SkipLocalsInit, MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static int AlignmentOf<T>() where T : unmanaged {\r\n        Unsafe.SkipInit(out AlignmentCheck<T> container);\r\n        return (int)Unsafe.ByteOffset(ref container.Padding, ref Unsafe.As<T, byte>(ref container.Content));\r\n    }\r\n}\r\n```\r\n\r\n<details><summary>full example and optimization results</summary>\r\n\r\n```csharp\r\npublic static class C {\r\n    private struct AlignmentCheck<T> where T : unmanaged {\r\n        public byte Padding;\r\n        public T Content;\r\n    }\r\n\r\n    [SkipLocalsInit, MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    private static int AlignmentOf<T>() where T : unmanaged {\r\n        Unsafe.SkipInit(out AlignmentCheck<T> container);\r\n        return (int)Unsafe.ByteOffset(ref container.Padding, ref Unsafe.As<T, byte>(ref container.Content));\r\n    }\r\n\r\n    public static int GetShortByteKVPAlignment() => AlignmentOf<KeyValuePair<short, byte>>();\r\n    public static int GetDoubleShortKVPAlignment() => AlignmentOf<KeyValuePair<double, short>>();\r\n    public static int GetShortByteVTAlignment() => AlignmentOf<(short, byte)>();\r\n    public static int GetDoubleShortVTAlignment() => AlignmentOf<(double, short)>();\r\n    public static int GetDecimalAlignment() => AlignmentOf<decimal>();\r\n    public static int GetDoubleAlignment() => AlignmentOf<double>();\r\n    public static int GetShortAlignment() => AlignmentOf<short>();\r\n}\r\n```\r\n\r\noptimizes to\r\n\r\n```\r\nC:GetShortByteKVPAlignment():int (FullOpts):\r\n       mov      eax, 2\r\n       ret      \r\n\r\nC:GetDoubleShortKVPAlignment():int (FullOpts):\r\n       mov      eax, 8\r\n       ret      \r\n\r\nC:GetShortByteVTAlignment():int (FullOpts):\r\n       mov      eax, 4\r\n       ret      \r\n\r\nC:GetDoubleShortVTAlignment():int (FullOpts):\r\n       mov      eax, 8\r\n       ret      \r\n\r\nC:GetDecimalAlignment():int (FullOpts):\r\n       mov      eax, 8\r\n       ret      \r\n\r\nC:GetDoubleAlignment():int (FullOpts):\r\n       sub      rsp, 24\r\n       lea      rax, bword ptr [rsp+0x10]\r\n       lea      rcx, bword ptr [rsp+0x08]\r\n       sub      rax, rcx\r\n       add      rsp, 24\r\n       ret      \r\n\r\nC:GetShortAlignment():int (FullOpts):\r\n       push     rax\r\n       lea      rax, bword ptr [rsp+0x02]\r\n       lea      rcx, bword ptr [rsp]\r\n       sub      rax, rcx\r\n       add      rsp, 8\r\n       ret     \r\n```\r\n\r\n</details>",
          "createdAt": "2023-10-25T12:02:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-07-04T16:37:40Z",
                "user": "Jorenkv"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODoaTJA=="
          },
          "updatedAt": "2023-10-25T12:02:18Z",
          "id": "IC_kwDODI9FZc5qCyoP"
        },
        {
          "author": "hamarb123",
          "body": "I've used something like this previously:\r\n```csharp\r\npublic static class Helpers\r\n{\r\n    private struct AlignHelper<T>\r\n    {\r\n       T value;\r\n       byte b;\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static int AlignmentOf<T>() => (int)(sizeof(AlignHelper<T>) - sizeof(T));\r\n}\r\n```\r\n\r\nI don't see why this wouldn't work, and it probably provides better codegen, since there's nothing to pretend to initialise.",
          "createdAt": "2023-10-25T14:27:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-25T14:27:46Z",
          "id": "IC_kwDODI9FZc5qD5i6"
        },
        {
          "author": "tannergooding",
          "body": "> I've used something like this previously:\r\n\r\nNote that this computes the packing of `T`, which is not necessarily the same as the alignment of `T`.\r\n\r\nThere are types, such as `Int128`, which currently have 16 byte packing, but retain 4 or 8 byte alignment; due to how the GC currently works.",
          "createdAt": "2023-10-25T15:50:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-25T20:06:25Z",
                "user": "hamarb123"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODK8Q2A=="
          },
          "updatedAt": "2023-10-25T15:51:18Z",
          "id": "IC_kwDODI9FZc5qEjlg"
        }
      ],
      "totalCount": 23,
      "endCursor": "Y3Vyc29yOnYyOpHOahI5YA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/29235",
    "title": "Enable user code to determine the alignment needs of types"
  },
  {
    "author": "damageboy",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2019-05-12T15:17:27Z",
    "body": "The [Multilingual App Toolkit v4.0](https://marketplace.visualstudio.com/items?itemName=MultilingualAppToolkit.MultilingualAppToolkit-18308) is currently, to the best of my knowledge, Microsoft's current go-to solution for developers aiming to localize their WinForms and WPF applications (amongst other application types support by MAT).\r\n\r\nThe VS 2017/2019 add-on seems to be made of build-time components, that have various responsibilities, such as generating resource files for localized languages and much more.\r\nOn top of that, the MAT Visual Studio UI/functionality is responsible for various tasks such as adding new languages and generating rough translations through Microsoft's machine translation services.\r\n\r\nFrom the little I see / understand, there is no current support for MAT inside .NET Core 3.0 projects: \r\nWhen installed in VS2019, MAT fails to even recognize existing projects with MAT items, or add MAT support for such projects.\r\n\r\nExcept for MAT, there seems to be various support throughout .NET Core for generating resource files from XLF files such as [xliff-tasks](https://github.com/dotnet/xliff-tasks) and deep inside of [arcade](https://github.com/dotnet/arcade/blob/e7470594a6856e3d74f27046e067d7f5369307dd/src/Microsoft.DotNet.Arcade.Sdk/tools/GenerateResxSource.targets).\r\n\r\nIs there any direct MAT support planned for 3.0 at some point?\r\n\r\nWill MAT support include ability to compile MAT enabled project without the plugin installed in VS2019 in Windows? (For example, updating an XLF file by hand on Linux / Mac and invoking `dotnet build`)...?\r\n\r\nSome clarity about XLF and MAT support in .NET Core 3.0 is probably important for developers considering porting their desktop applications to .NET Core 3.0 ",
    "number": 29525,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-05-15T23:16:30Z",
          "user": "OliaG"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-07-22T23:32:10Z",
          "user": "barrett777"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-07-24T16:11:45Z",
          "user": "steji113"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-11-06T14:57:46Z",
          "user": "segfaulted"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-30T12:05:58Z",
          "user": "Miles-Davies-HORIBA"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-07-05T11:50:25Z",
          "user": "aetos382"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOClKTgA=="
    },
    "updatedAt": "2024-03-28T09:29:19Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "Question for @diverdan92 @OliaG ",
          "createdAt": "2019-05-12T21:19:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-12T21:19:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5MTYzMDE3Mw=="
        },
        {
          "author": "OliaG",
          "body": "Cc @merriemcgaw ",
          "createdAt": "2019-05-15T23:16:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-15T23:16:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5Mjg1ODQ4Mg=="
        },
        {
          "author": "OliaG",
          "body": "AFAIK, MAT is the recommend tool for localizing apps and it will be supported on .NET Core. Adding @TheMATDude to provide more details.",
          "createdAt": "2019-07-02T04:07:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-07-02T09:25:27Z",
                "user": "damageboy"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOArp_mQ=="
          },
          "updatedAt": "2019-07-02T04:07:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwNzUwOTkzOA=="
        },
        {
          "author": "TheMATDude",
          "body": "The last version of MAT for VS 2017+ removed some of the barriers for managing .net core apps from within Visual Studio IDE.  True CLI support is in the backlog..",
          "createdAt": "2019-08-06T16:11:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-06T16:11:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxODczODEzOQ=="
        },
        {
          "author": "quicoli",
          "body": "Hi any update on this? I have a WPF  .NET Core app now using MAT and I'm looking for a way to include it in my build process (local build server) ",
          "createdAt": "2021-01-08T17:57:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-08T17:57:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjkwODM2Mg=="
        },
        {
          "author": "merriemcgaw",
          "body": "@TheMATDude do you know if there will be new updates to MAT?",
          "createdAt": "2021-01-11T23:51:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-11T23:51:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODI5NzY3Nw=="
        },
        {
          "author": "wstaelens",
          "body": "@TheMATDude .net 7 wpf application I try to enable MAT:  `Project '' was not enabled - it is not a supported project type. ` ?\r\n(others seem to have also this issue: https://stackoverflow.com/questions/75547404/how-to-enable-multilingual-toolkit-for-wpf-application-net-7-0-type-project )",
          "createdAt": "2024-03-28T09:27:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-28T09:29:19Z",
          "id": "IC_kwDODI9FZc54r0xT"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOeK9MUw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/29525",
    "title": ".NET Core 3.0 (WinForms / WPF) + MAT (Multilingual Application Toolkit)"
  },
  {
    "author": "jeremyVignelles",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2019-05-20T21:28:55Z",
    "body": "Hi,\r\n\r\nI have thought about this for a while, and I finally got time for that, so I'm posting here.\r\nPlease tell me if that's not the right place to ask for that.\r\n\r\n# Rationale\r\n\r\nI am an average developper that wants to make sure that I don't forget to call `Dispose()` on `IDisposable`. What is great is that there's a roslyn analyzer for that : https://github.com/DotNetAnalyzers/IDisposableAnalyzers\r\n\r\nHowever, sometimes, that analyzer doesn't know how things work, and a signature like\r\n\r\n```cs\r\npublic MyDisposableClass GetInstance()\r\n```\r\n\r\nwill trigger a warning, while sometime it's just returning a cached copy which is owned by the class.\r\n\r\nThere is no way for the analyser to know the semantic of what should be disposed and what should not.\r\n\r\nThen came the idea that we could provide some attributes that could help the analyzer.\r\n\r\n# The problem\r\nHow to redistribute that kind of attributes?\r\n- Embedding the attributes with the analyzer? The analyzer itself is a development dependency, and we shouldn't leak that kind of implementation details into the project.\r\n- Having a package dependency for this kind of annotations? What about version conflicts between two projects that uses different versions of the annotations? \r\n- Having a .cs file that the project that wants to check embeds, similar to LibLog ? How would the analyzer check the attributes? with only the class name?\r\n- Maintaining external annotations like [JetBrains](https://github.com/JetBrains/ExternalAnnotations) ? That would be probably feasible, and makes it possible to annotate existing code, but we are not JetBrains...\r\n\r\nEach of those options have drawbacks, and probably more than exposed above. Then we thought about it in a different way :\r\nIf we truly want to analyze the behavior of the code, what if we find a more universal way : introduce the annotations directly in .net.\r\n\r\n# The proposition\r\nHere comes the IDisposable ownership attributes. The first formal definition was made [here](https://github.com/DotNetAnalyzers/IDisposableAnalyzers/pull/130/files), and I think that the API shape is understandable.\r\n\r\n```cs\r\n    /// <summary>\r\n    /// The return value must be disposed by the caller.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.ReturnValue | AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class GivesOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// The return value must not be disposed by the caller.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.ReturnValue | AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class KeepsOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// The ownership of instance is transferred and the receiver is responsible for disposing.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class TakesOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n```\r\n\r\nLet's dig into this : \r\nBy defining these attributes, we state that \"The owner of the object is responsible to `Dispose()` it\".\r\n\r\nOwnership can be given (i.e. transferred to caller):\r\n\r\n```cs\r\npublic class ResourceFactory {\r\n   [return: GivesOwnership]\r\n   public Resource Create()\r\n   {\r\n        return new MyResource();\r\n   }\r\n}\r\n```\r\n\r\nIt can be taken\r\n\r\n```cs\r\npublic class ResourceHandler : IDisposable {\r\n   private Resource _resource;\r\n   public void SetResource([TakesOwnership] Resource resource) => this._resource = resource;\r\n   public void Dispose()\r\n   {\r\n      this._resource.Dispose();\r\n   }\r\n}\r\n\r\nnew ResourceHandler().SetResource(new Resource);\r\n```\r\n\r\nWe can also say explicitely that the resource is kept:\r\n```cs\r\npublic class ResourceCache : IDisposable {\r\n    private Resource _resource;\r\n    [return: KeepsOwnership]\r\n    public Resource GetResource()\r\n    {\r\n       return this._resource;\r\n    }\r\n}\r\n```\r\n\r\n# Why in .NET?\r\nHaving a way to express ownership is really nice to know what is happening, and many places in the framework itself could benefit from that.\r\n\r\nTake this code for example:\r\n\r\n``` cs\r\nvar stream = File.Open...;\r\nvar reader = new StreamReader(stream);\r\n```\r\n\r\nWhich one should I dispose?\r\n\r\nIf `StreamReader` declared this constructor as `TakesOwnership`, the question is no more.\r\n\r\nAnother question I often have is : \"When using `IServiceCollection.AddSingleton()`, are my objects correctly `Dispose()` 'd?\"\r\n\r\n# Potential uses\r\n\r\n- Documentation : The documentation could automatically state that the method has a special behavior regarding the object ownership\r\n- Analyzers : IDisposableAnalyzers would be one of them, but maybe something more integrated, like in the compiler or in VS ?\r\n\r\nWhat do you think?",
    "number": 29631,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-10-12T17:49:21Z",
          "user": "JohanLarsson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-02-26T08:30:04Z",
          "user": "bash"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-10T00:38:31Z",
          "user": "dmitriyse"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-10T10:40:39Z",
          "user": "manne"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-03T20:21:12Z",
          "user": "airbreather"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-03T20:22:00Z",
          "user": "airbreather"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-07T11:13:00Z",
          "user": "Evangelink"
        },
        {
          "content": "HEART",
          "createdAt": "2020-10-02T18:15:50Z",
          "user": "MaxShoshin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-10T05:12:23Z",
          "user": "neikeq"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-28T12:34:37Z",
          "user": "AmrAlSayed0"
        },
        {
          "content": "HEART",
          "createdAt": "2020-11-30T08:01:59Z",
          "user": "MartyIX"
        },
        {
          "content": "HEART",
          "createdAt": "2020-12-05T10:21:13Z",
          "user": "stefanloerwald"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-07T14:32:45Z",
          "user": "MartyIX"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-25T12:16:45Z",
          "user": "batkaevruslan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-04T06:16:38Z",
          "user": "FiniteReality"
        },
        {
          "content": "HEART",
          "createdAt": "2021-04-22T12:38:58Z",
          "user": "cesarsouza"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-07-20T14:44:17Z",
          "user": "daiplusplus"
        },
        {
          "content": "HEART",
          "createdAt": "2021-08-31T18:52:09Z",
          "user": "morsiu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-08T20:15:55Z",
          "user": "antiufo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-13T18:35:51Z",
          "user": "bartecargo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-08T09:21:15Z",
          "user": "GrahamTheCoder"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-25T08:23:13Z",
          "user": "lonix1"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-05T19:59:09Z",
          "user": "ReubenBond"
        },
        {
          "content": "HEART",
          "createdAt": "2022-01-05T19:59:10Z",
          "user": "ReubenBond"
        },
        {
          "content": "HEART",
          "createdAt": "2022-01-14T18:59:40Z",
          "user": "karol-be"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-14T18:59:41Z",
          "user": "karol-be"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-12T09:16:03Z",
          "user": "0xfeeddeadbeef"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-05-12T11:28:51Z",
          "user": "mikhail-barg"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-05T14:52:25Z",
          "user": "Zoxive"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-09-12T18:10:23Z",
          "user": "sorensenmatias"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-26T00:47:51Z",
          "user": "gbtb"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-11-29T09:36:45Z",
          "user": "carlreinke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-21T14:19:49Z",
          "user": "Sibusten"
        },
        {
          "content": "HEART",
          "createdAt": "2023-05-04T14:22:47Z",
          "user": "mrEDitor"
        },
        {
          "content": "HEART",
          "createdAt": "2023-05-27T00:08:11Z",
          "user": "gmkado"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-23T19:20:58Z",
          "user": "KalleOlaviNiemitalo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-25T16:09:21Z",
          "user": "mmarinchenko"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-25T16:09:24Z",
          "user": "mmarinchenko"
        },
        {
          "content": "EYES",
          "createdAt": "2023-10-28T12:01:12Z",
          "user": "aloraman"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-05T17:26:13Z",
          "user": "bensmooth"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-22T16:54:31Z",
          "user": "CSharpFiasco"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-29T09:34:39Z",
          "user": "LukasGelke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-26T17:27:51Z",
          "user": "juwens"
        },
        {
          "content": "HEART",
          "createdAt": "2024-03-26T17:27:52Z",
          "user": "juwens"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-18T02:44:03Z",
          "user": "austinw-fineart"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-03T09:14:17Z",
          "user": "fowl2"
        },
        {
          "content": "EYES",
          "createdAt": "2024-09-03T09:14:18Z",
          "user": "fowl2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-12T15:42:15Z",
          "user": "dalle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-03T06:21:55Z",
          "user": "issue-dispenser"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-07T07:28:20Z",
          "user": "DL444"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-04T09:49:10Z",
          "user": "N-Olbert"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-24T15:58:34Z",
          "user": "bjornen77"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-19T00:12:45Z",
          "user": "Athari"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-22T08:17:17Z",
          "user": "ArchiDog1998"
        }
      ],
      "totalCount": 54,
      "endCursor": "Y3Vyc29yOnYyOpHOCKA1aQ=="
    },
    "updatedAt": "2023-11-22T18:21:14Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "huoyaoyuan",
          "body": "Are there any works to do for CLR on this feature?\r\nDue to the high-compatibility designs, it's extremely hard to let CLR force some new rules. Otherwise, this issue could just be done by analyzers.\r\n\r\nFirst of all, `IDisposable` is even not CLR-forced thing. You can write and execute classes with inconsistent finalizers and disposals. ",
          "createdAt": "2019-05-21T16:45:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-21T16:48:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDQ2OTMwOQ=="
        },
        {
          "author": "jeremyVignelles",
          "body": "Hi,\r\n\r\n> Are there any works to do for CLR on this feature?\r\n\r\nI think so, or maybe that belongs to the corefx to provide such things. I see it very similar to the introduction of the non-nullable types : It's something that helps write you better code, and if first applied to .net itself, that would greatly help the adoption of such features.\r\n\r\n> Due to the high-compatibility designs, it's extremely hard to let CLR force some new rules. Otherwise, this issue could just be done by analyzers.\r\n\r\nMy proposal is not about rules, but more about helping user to spot usages that are different from the intent. Right now, when you look at a method that returns IDisposable, how do you know if you should dispose the object or not?\r\nI think people often deal with that in one of the following ways:\r\n- Reading the doc : if you're motivated enough to read it and if you are lucky enough to have that written in the doc, then you could know\r\n- Reading through the source code : This is not something the average developer would do\r\n- Try it, and see if that fails : I guess most of people would fit in that category. Either they dispose it too often and see if it throws, or not enough, and they end up with leaks.\r\n\r\nImplementing that in an analyser would probably be doable, however to be efficient:\r\n- The analyzer must have knowledge of the developer intent. Otherwise, there will be a lot of false positives or, more importantly, false negatives.\r\n- Annotations must be present on each potentially problematic API, which will not likely be the case with third party libraries. Why such a library would bother to expose the API in an annotated way (with the additional dependency) if that's not something widely recognized in the .net community? The framework itself is widely recognized.\r\n\r\n> First of all, `IDisposable` is even not CLR-forced thing. You can write and execute classes with inconsistent finalizers and disposals.\r\n\r\nI don't want to force that, I want library authors to be able to express the intent :\r\n\"Hey, the return of that method must be disposed\", or \"Give me a Disposable, and I will take care of Disposing it\", and do that in a way that can be understood by analyzers. Authors can still (but are discouraged to) write code that doesn't follow the patterns.\r\n",
          "createdAt": "2019-05-21T19:51:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-02-24T03:34:30Z",
                "user": "CSharpFiasco"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODYCdqQ=="
          },
          "updatedAt": "2019-05-21T19:52:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDUzMzIyMw=="
        },
        {
          "author": "huoyaoyuan",
          "body": "> Implementing that in an analyser would probably be doable, however to be efficient:\r\n> The analyzer must have knowledge of the developer intent. Otherwise, there will be a lot of false positives or, more importantly, false negatives.\r\n> Annotations must be present on each potentially problematic API, which will not likely be the case with third party libraries. Why such a library would bother to expose the API in an annotated way (with the additional dependency) if that's not something widely recognized in the .net community? The framework itself is widely recognized.\r\n\r\nCLR has even less knowledge than analyzer. I guess you want to let CLR \"auto-detect\" a method's ownership of a disposable. But it's even **much more harder** than verifying and enforcing.\r\n\r\nIf you want something make people to follow the pattern easily, it falls into language design.\r\nMany people may have the same idea of this proposal, but it's nothing to do with it **in CLR now**.",
          "createdAt": "2019-05-22T17:28:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T17:28:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDg5NTkxMQ=="
        },
        {
          "author": "jeremyVignelles",
          "body": "You might be right, this proposal would probably better fit in csharplang, but it will probably have implications in corefx (where annotations will likely be declared).\r\nCan someone move that proposal to the appropriate repository?",
          "createdAt": "2019-05-22T17:40:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T17:40:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDg5OTI4Ng=="
        },
        {
          "author": "RussKeldorph",
          "body": "@karelz Please either move as requested or close this issue and advise opening another following https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md.",
          "createdAt": "2019-05-22T18:43:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-05-22T19:53:26Z",
                "user": "karelz"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOApJhDw=="
          },
          "updatedAt": "2019-05-22T18:43:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDkxNzk0NA=="
        },
        {
          "author": "Gnbrkm41",
          "body": "I think one use case of this could be `HttpClient` (for the aforementioned IDisposableAnalyzers), since it's one of the types that implement `IDisposable` however [it seems to be recommended to use single instance instead of instantiating a new one every time](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/), hence caching.\r\n\r\nside note regarding 'Why in .NET?' section: just dispose of both of the instances, since calling Dispose() multiple times won't cause any problems 😝 \r\n```cs\r\nusing (Stream stream = File.Open())\r\nusing (StreamReader reader = new StreamReader(stream))\r\n{\r\n    // Some nice codes come here\r\n}\r\n```",
          "createdAt": "2019-05-22T20:28:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T20:28:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDk1OTQwMQ=="
        },
        {
          "author": "jeremyVignelles",
          "body": "Stream is likely not the best example of usage because you can pass it into a stream reader and transfer ownership, or specify `leaveOpen`. The scenario is complex there.\r\n\r\nIf I understand what you mean, you're telling me that it doesn't hurt to dispose the item twice? Is that always true,  or only on Stream? I'm not sure that is something that is always implemented, and I'm pretty sure that I have in my code objects that are not meant to be disposed twice.\r\n\r\nAnyway, there are still the case where you get a IDisposable object as a result of a method, and where you must not dispose it because that would otherwise close it for the rest of the code.",
          "createdAt": "2019-05-22T20:47:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T20:47:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDk2NjUxMA=="
        },
        {
          "author": "Gnbrkm41",
          "body": ">If I understand what you mean, you're telling me that it doesn't hurt to dispose the item twice? \r\n\r\nYes, that is correct. It is advised against throwing anything in Dispose/only making it possible to disposing once to ensure cleanup of unmanaged resources. See [Implementing a Dispose method](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose?view=netframework-4.8):\r\n>To help ensure that resources are always cleaned up appropriately, a Dispose method should be callable multiple times without throwing an exception.\r\n\r\nSo I would expect it to be always implemented in such way. But regardless, I think it's a fair point, hence just a side note.",
          "createdAt": "2019-05-22T21:07:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-05-22T21:08:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5NDk3MzUzMg=="
        },
        {
          "author": "jeremyVignelles",
          "body": "Hi, is there anything new here? Any chance to see this coming in .net 5?\n\nHas this even been triaged/discussed?",
          "createdAt": "2020-06-10T21:08:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2024-02-24T03:35:57Z",
                "user": "CSharpFiasco"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODYCeHA=="
          },
          "updatedAt": "2020-06-10T21:08:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0MjI2NjA2MA=="
        },
        {
          "author": "ericstj",
          "body": "I'm not sure starting in libraries is the right way to move this issue forward.  Seems the roslyn-anlyzers is better to work on a change that adds support to an analyzer and detects attributes by name.  Typically these types of annotations don't rely on strong typing in specific assembly but support the attribute definition in any assembly and match by namespace.name to allow folks to use it on older frameworks that can't change the API.  The same was true for async, nullable, and others.  Work out the kinks, drive consensus, and demonstrate the value.  Once that happens we could consider adding such a feature to some of the API in dotnet/runtime.\r\n\r\nWe've done investment in analyzers in net5 not sure if there has been explicit consideration for IDisposable.  @stephentoub @bartonjs @jeffhandley  may know.\r\n",
          "createdAt": "2020-06-26T00:57:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-26T00:57:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTg5MDAxNg=="
        },
        {
          "author": "bartonjs",
          "body": ">  not sure if there has been explicit consideration for IDisposable.\r\n\r\nSince this is the only `code-analyzer` issue with IDisposable in it, probably not :smile:.\r\n\r\nI agree that this will require a very similar shape to nullability annotations, in that it requires a lot of attributes to be placed throughout the codebase, and we need a very complex set of attributes; like `[KeepsOwnershipUnless(nameof(leaveOpen))]`.\r\n\r\nFor inputs (including `this`):\r\n* Called member takes ownership unconditionally\r\n* Called member takes ownership conditionally\r\n* Called member does not take ownership\r\n* Called member disposes the object.\r\n* Called member relinquishes ownership, it returns to the previous owner (or, absent any real owner, the caller/the GC).  (e.g. removing something from a DisposableCollection)\r\n\r\nFor outputs:\r\n* Caller should dispose\r\n  * RSACertificateExtensions.GetRSAPrivateKey\r\n* Caller should not dispose\r\n  * X509Certificate2.get_PrivateKey\r\n* Whether or not a caller should dispose depends on some other state\r\n  * StreamReader..ctor(Stream, ..., bool)\r\n* Return value is an input parameter, caller maintains ownership transparently ([NotNullIfNotNull], basically)\r\n  * (Having trouble coming up with a public example of this one off the top of my head)\r\n\r\nThere might be other states.\r\n\r\nIt's as least as complex as nullability, because of something like\r\n\r\n```C#\r\ninternal sealed class ReturnWrapper : IDisposable\r\n{\r\n    private IDisposable? _disposable;\r\n\r\n    internal ReturnWrapper([TakesOwnership] IDisposable disposable)\r\n    {\r\n        _disposable = disposable;\r\n    }\r\n\r\n    public void Dispose()\r\n    {\r\n        _disposable?.Dispose();\r\n        _disposable = null;\r\n    }\r\n\r\n    [HowDoWeDescribeThisState]\r\n    internal void SetSuccess()\r\n    {\r\n        _disposable = null;\r\n    }\r\n}\r\n\r\n...\r\n\r\nusing (FileStream stream = File.Open(...))\r\nusing (ReturnWrapper wrapper = new ReturnWrapper(stream))\r\n{\r\n    ...\r\n    wrapper.SetSuccess();\r\n    return stream;\r\n}\r\n```\r\n\r\nThe `SetSuccess()` method undoes an ownership transfer from a constructor.  How does that get described in annotations? (The relationship for this class's members seems pretty easy to wrap my head around, but as a special case, I can't describe what it does generally).  And, like nullability, no one can really determine how complex it actually is until they try decorating all of the shared runtime, since their samples will end up being a bit overly simplistic and/or operating on incomplete data.",
          "createdAt": "2020-06-26T16:19:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-26T16:19:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDI2NzIzMA=="
        },
        {
          "author": "mavasani",
          "body": "FYI: We already have some IDisposable analyzers for detecting dispose leaks in roslyn-analyzers repo.\r\n\r\n\r\n1. **[CA2000](https://docs.microsoft.com/visualstudio/code-quality/ca2000?view=vs-2019)**: `Dispose objects before losing scope`. Implementation at https://github.com/dotnet/roslyn-analyzers/blob/0a6e4b3935bbcdde79eb90d1760368e89ffff826/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DisposeObjectsBeforeLosingScope.cs\r\n2. **[CA2213](https://docs.microsoft.com/visualstudio/code-quality/ca2213?view=vs-2019)**: `Disposable fields should be disposed`. Implementation at https://github.com/dotnet/roslyn-analyzers/blob/0a6e4b3935bbcdde79eb90d1760368e89ffff826/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DisposableFieldsShouldBeDisposed.cs\r\n3. **[CA2215](https://docs.microsoft.com/visualstudio/code-quality/ca2215?view=vs-2019)**: `Dispose methods should call base class dispose`. Implementation at https://github.com/dotnet/roslyn-analyzers/blob/f15404b312295e7cee16fb40b4c8d3f91f10f087/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DisposeMethodsShouldCallBaseClassDispose.cs\r\n\r\nCurrent implementation of these analyzers primarily relies on the following for improved analysis precision:\r\n1. **Dataflow analysis** (also supports interprocedural analysis - only within the current source assembly, not referenced assemblies)\r\n2. **Configurable options** for generic disposable ownership transfer semantics to be used by analysis. See [here](https://github.com/dotnet/roslyn-analyzers/blob/master/docs/Analyzer%20Configuration.md#configure-dispose-ownership-transfer-for-arguments-passed-to-constructor-invocation) and [here](https://github.com/dotnet/roslyn-analyzers/blob/master/docs/Analyzer%20Configuration.md#configure-dispose-ownership-transfer-for-disposable-objects-passed-as-arguments-to-method-calls) for the supported options.\r\n\r\nHowever, these analyzers still lead to false positives and negatives. These would definitely benefit from attribute based annotations for an improved analysis precision.\r\n\r\n> Typically these types of annotations don't rely on strong typing in specific assembly but support the attribute definition in any assembly and match by namespace.name to allow folks to use it on older frameworks that can't change the API. The same was true for async, nullable, and others. Work out the kinks, drive consensus, and demonstrate the value. Once that happens we could consider adding such a feature to some of the API in dotnet/runtime.\r\n\r\nAgreed. Tagging @Evangelink who has shown interest in this space and is heavily involved in contributions to roslyn-analyzers repo - would you be interested in working with @bartonjs on the initial attribute design and a prototype in enhancing the existing disposable analyzers and/or adding new disposable analyzers in roslyn-analyzers repo?\r\n",
          "createdAt": "2020-08-07T13:37:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-08-07T13:39:09Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBMvX_w=="
          },
          "updatedAt": "2020-08-07T13:38:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDUyMDU5MA=="
        },
        {
          "author": "Evangelink",
          "body": "I would love to :)",
          "createdAt": "2020-08-07T13:39:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-07T13:39:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDUyMTc2NQ=="
        },
        {
          "author": "Evangelink",
          "body": "Another case that needs to be handled by the attribute is the case of overloads with `bool leaveOpen` parameters (see https://docs.microsoft.com/en-us/dotnet/api/system.io.streamwriter.-ctor?view=netcore-3.1#System_IO_StreamWriter__ctor_System_IO_Stream_System_Text_Encoding_System_Int32_System_Boolean_)",
          "createdAt": "2020-08-07T13:43:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-05T00:49:10Z",
                "user": "SwooshyCueb"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBPhSog=="
          },
          "updatedAt": "2020-08-07T13:43:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDUyMzU4OQ=="
        },
        {
          "author": "MartyIX",
          "body": "This would be really great to have. Are there any plans to add this functionality?",
          "createdAt": "2020-12-07T14:33:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-07T14:53:55Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBZHwqg=="
          },
          "updatedAt": "2020-12-07T14:33:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczOTk1NTI1Mg=="
        },
        {
          "author": "jeremyVignelles",
          "body": "Anything new on this?\r\nHow could the `leaveOpen` be handled?\r\n\r\nEDIT: Why has this issue been assigned to the \"team IoT pod\" dashboard?",
          "createdAt": "2021-03-02T09:12:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T09:13:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODc1MTM4Ng=="
        },
        {
          "author": "Evangelink",
          "body": "> How could the `leaveOpen` be handled?\r\n\r\nIt depends the direction we take. If we assume everything gets annotated (marked with attributes) then we could go in the direction of not having a special case. We could also have analyzers trying to recognize a pattern (as it is done with the try-pattern), for example we could assume that a method taking something disposable and having a boolean parameter named `leaveOpen` would mean that the disposable parameter is not supposed to be disposed. It could also be a parameter to the attribute that would say which boolean parameter is allowing the keep-open functionality. That's just a couple of examples without giving much thoughts.",
          "createdAt": "2021-03-02T11:39:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2024-02-24T03:42:15Z",
                "user": "CSharpFiasco"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODYCfwg=="
          },
          "updatedAt": "2021-03-02T11:39:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODg0NTM4MA=="
        },
        {
          "author": "robindegen",
          "body": "I would love for this to be added. There is no good way to indicate ownership at the moment and the analyzer is going crazy about it.",
          "createdAt": "2023-11-22T18:21:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-24T03:32:42Z",
                "user": "CSharpFiasco"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-28T08:58:24Z",
                "user": "juwens"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-09T17:42:56Z",
                "user": "jonwis"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOERhJmA=="
          },
          "updatedAt": "2023-11-22T18:21:13Z",
          "id": "IC_kwDODI9FZc5srMjb"
        }
      ],
      "totalCount": 18,
      "endCursor": "Y3Vyc29yOnYyOpHObKzI2w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/29631",
    "title": "Proposal - Introduce IDisposable ownership annotations"
  },
  {
    "author": "Perksey",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2019-06-03T15:48:13Z",
    "body": "> Original question from Discord, was instructed by tanner to post here:\r\n> ```\r\n> i'm pretty sure I know that answer, but just double checking that .NET doesn't hold any military certifications such as the DO-178C certification?\r\n> we're investigating whether we should even bother trying to implement GLSC in OpenTK 4.0\r\n> ```\r\n\r\nCurrently, we're investigating the feasibility of offering safety critical options within OpenTK as OpenGL has an FAA certified variant called OpenGLSC. However, such an effort would be moot if .NET itself doesn't have any military certification such as the DO-187C certification. I'm hoping someone in the .NET Foundation could answer this?",
    "number": 12796,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-06-03T16:13:07Z",
          "user": "kameko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-22T23:46:28Z",
          "user": "nabeelsherazi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-23T15:26:49Z",
          "user": "sonicbhoc"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOCvCb8Q=="
    },
    "updatedAt": "2022-01-14T17:55:03Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "tannergooding",
          "body": "CC. @richlander ",
          "createdAt": "2019-06-03T15:51:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-03T15:51:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDQ5ODMxNTQ2Nw=="
        },
        {
          "author": "RussKeldorph",
          "body": "This might be more appropriate to ask in https://github.com/dotnet/core, but I'm not sure it will get more visibility, so I can leave it open.\r\n\r\n@richlander @terrajobst ",
          "createdAt": "2019-06-14T17:44:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-14T17:44:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwMjIwMjA0OQ=="
        },
        {
          "author": "Perksey",
          "body": "My apologies, but if you don't mind let's leave it open? I don't want copy + paste to a new issue when people have already been pinged into here.",
          "createdAt": "2019-06-14T18:55:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-14T18:56:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwMjIyNTA2Mw=="
        },
        {
          "author": "drunkwcodes",
          "body": "Arduino related parts should be also seriously confirmed.",
          "createdAt": "2019-06-16T02:57:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-16T02:57:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwMjQxNTIzMg=="
        },
        {
          "author": "danmoseley",
          "body": "@leecow ",
          "createdAt": "2019-06-16T03:24:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-16T03:24:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwMjQxNjI4MA=="
        },
        {
          "author": "leecow",
          "body": "also @HollyAM ",
          "createdAt": "2019-06-17T16:03:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-06-17T16:03:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUwMjc0NjQxNw=="
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOHfdNMQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/12796",
    "title": "Does .NET possess any safety critical certifications?"
  },
  {
    "author": "danmoseley",
    "labels": [
      "area-Meta",
      "size-reduction"
    ],
    "createdAt": "2019-08-05T16:30:57Z",
    "body": "We want to make CoreFX more trimmable (so customers can trim their apps, and also so that Xamarin can use more of it on devices) and we want to protect any size improvements we make this way.\r\n\r\nThe idea is to in gated checkin - \r\n1. Pull down down some representative apps in binary form (perhaps from corefx-testdata repo) along with presumably any SDK they require (such as latest ASP.NET implementation assemblies)\r\n2. Use linker to trim them against current CoreFX implementation AND against previous CoreFX implementation (the latter presumably gotten from recent SDK)\r\n3. Block checkin if size has increased more than a non trivial amount (this is the tricky part, we probably don't want to block adding new code - that should be won back in a separate effort - but we do want to block new interdependencies which may have been inadvertently created)\r\n\r\nWe may not have such representative apps today, but we can start with Hello World while we figure out what they should be and create/obtain them.\r\n\r\ncc @marek-safar @ericstj ",
    "number": 943,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2021-07-22T16:22:58Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "stephentoub",
          "body": "> Block checkin if size has increased more than a non trivial amount (this is the tricky part, we probably don't want to block adding new code - that should be won back in a separate effort - but we do want to block new interdependencies which may have been inadvertently created)\r\n\r\nThis also means we could slowly regress over time and not realize it.  We need another mechanism as well.",
          "createdAt": "2019-08-05T16:37:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-05T16:37:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxODMwNzQwOA=="
        },
        {
          "author": "danmoseley",
          "body": "An approach I've used on a previous team for an analogous code coverage gate was to hold an absolute requirement, and require adding code coverage elsewhere in the same PR if necessary. I doubt that is feasible in this case.\r\n\r\nDo you have a suggestion?",
          "createdAt": "2019-08-05T19:58:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-05T19:58:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxODM3NjkwOA=="
        },
        {
          "author": "ericstj",
          "body": "I'd imagine we'd have some threshold checked in that we could decide to update if we deemed it necessary.  We'd also want to fail if it shrunk too much, just to make sure we secure wins in size should we achieve them.  I can imagine that this would be hard to do in the separate repo system: we'd likely see large changes on CoreCLR ingestion.  There are ways to deal with that, but hopefully we'll have things combined by the time infra like this comes online.",
          "createdAt": "2019-08-05T22:25:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-05T22:25:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxODQyNDYwNw=="
        },
        {
          "author": "marek-safar",
          "body": "We have been using threshold approach when running this setup in Mono which works ok but has the disadvantage of grouping commits together because you don't know which one was most significant (e.g. 10 changes with 10 bytes or two changes with 500 bytes).\r\n\r\nWhat is more painful is when you have a size regression you need to dig into the data but we have no tooling to visualize that. The size itself does not tell you anything and diffing IL does not help either when e.g. the commit moved some stuff around as well.",
          "createdAt": "2019-08-06T17:51:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-06T17:51:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxODc3NTIzNg=="
        },
        {
          "author": "ericstj",
          "body": "@joperezr I think you did this.",
          "createdAt": "2020-06-25T20:56:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-25T20:56:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTgxMzIxMQ=="
        },
        {
          "author": "joperezr",
          "body": "not really, we logged https://github.com/dotnet/runtime/issues/37258 which was the issue that was going to track the work of adding infrastructure for tests to make sure annotations added to the libraries would root dynamic dependencies (or basically tests checking correctness of the annotations). \r\n\r\nThis other issue is very similar but is intended more to track size gains/regressions instead of correctness. The idea for this is to add some tests in the performance repo that will run in some cadence and ensure there are no big size regressions on each run.",
          "createdAt": "2020-06-30T23:24:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-30T23:24:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjA5ODcxNg=="
        },
        {
          "author": "eerhardt",
          "body": "Moving to 6.0 as this won't be completed in 5.0.",
          "createdAt": "2020-07-22T15:35:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-22T15:35:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjUyNDQ4Mw=="
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOJ31SQw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/943",
    "title": "Use gated checkin to protect trimming wins by linking representative apps and measuring size on disk"
  },
  {
    "author": "steveharter",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2019-08-08T22:21:45Z",
    "body": "When using the `in` modifier on structs passed as method arguments, subsequent calls to the struct's members may cause a performance penalty because a defensive copy of the struct is made. This defensive copy is made when a mutation could occur, such as when calling a method, accessing a property, or setting a field.\r\n\r\nFor a non-mutable struct, to prevent the defensive copy the `readonly` modifier should be added to the struct itself and any fields and non-auto properties.\r\n\r\nFor a mutable struct, the `readonly` modifier should be added to the fields\\properties\\methods that do not mutate. However it may be safer to use the `ref` modifier instead of `in` in these cases because:\r\n- Maintainability: as non-mutating members are added to the struct over time, the `readonly` modifier may not be added to new members. Callers will incur the performance penalty without knowledge.\r\n- Silent mutability: a call to a mutating member will silently mutate the struct meaning it will not cause an error and will not be propagated up the stack. This may or may not be desired in the local method, but often will be a bug.\r\n\r\nBased on these I assume the following best practices:\r\n1) Do not mutate a struct in a method where it was passed with `in`. Instead remove the `in` and let the copy happen automatically up front or use the `ref` modifier if that is the desired behavior (see next line below).\r\n2) Pass mutable structs with `ref` instead of `in`. If the struct was properly `readonly`-adorned then `in` could be used reliably given verification checks (analyzers or compiler warnings).\r\n3) All structs should be adorned with `readonly` as much as possible so consumers can reliably use the `in` modifier without concern for perf due to the defensive copy. Note that the `in` modifier was recently added  (C# 7.2) so previously existing structs are not likely adorned.\r\n\r\nIn summary, the `in` modifier will be commonly misused because it is not obvious that a defensive copy is done, or even allowed to occur. In addition, any members called that do mutate the struct are \"silent\" which will often be a bug. In order to properly use `in` one must:\r\n- Have knowledge of the defensive copy and \"silent\" mutations.\r\n- Have knowledge of whether every member called on a struct has `readonly` applied or install an analyzer or use a disassembler to be sure the performance penalty or accidental\\silent mutation doesn't occur.\r\n\r\nThoughts to address this so `in` can be reliably used on both mutable and immutable structs:\r\n- Run an [analyzer ](https://github.com/SergeyTeplyakov/ErrorProne.NET) as part of an outer-loop to detect various likely misuses; we may need a way to allow exceptions (e.g. \"white list\" or special attribute).\r\n- Run an analyzer automatically for all developers (at least for the happy path when using Visual Studio)\r\n- Treat as a compiler warning?\r\n\r\n(for lack of a well-known home for this issue, it was created in corefx with area-infrastructure).",
    "number": 30535,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-16T14:03:40Z",
          "user": "Sergio0694"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-16T14:06:58Z",
          "user": "SingleAccretion"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-16T15:24:59Z",
          "user": "JimBobSquarePants"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOBW6RDw=="
    },
    "updatedAt": "2024-03-13T00:25:38Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "ViktorHofer",
          "body": "@stephentoub opinions? and do we have an analyzer for the correct usage of ref and in? (if flow analysis allows that)",
          "createdAt": "2019-08-09T13:36:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-09T13:36:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxOTkyMTY0Ng=="
        },
        {
          "author": "stephentoub",
          "body": ">  opinions? and do we have an analyzer for the correct usage of ref and in? (if flow analysis allows that)\r\n\r\nWe do not.  The only one I'm aware of that exists today is the one Steve linked to, as discussed here:\r\nhttps://github.com/dotnet/corefx/pull/40114#issuecomment-519580815",
          "createdAt": "2019-08-09T13:37:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-09T13:37:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUxOTkyMjE3OQ=="
        },
        {
          "author": "Gnbrkm41",
          "body": "related: https://github.com/dotnet/corefx/issues/36586 (regarding adorning existing types with readonly)",
          "createdAt": "2019-08-10T02:40:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-10T02:40:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyMDExMTIzOQ=="
        },
        {
          "author": "ViktorHofer",
          "body": "I think adding an analyzer for the correct usage for the in keyword seems right. That said I'm hesitant to add a dependency to ErrorProne.NET (To me it looks like CI isn't working / turned on and the analyzers seem to have some issues on .NET Framework based on some opened issues). \r\n\r\n@steveharter what do you suggest to do here? Create such a roslyn analyzer in https://github.com/dotnet/roslyn-analyzers? If so then I suggest we move the issue over.",
          "createdAt": "2019-08-31T07:54:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-08-31T07:54:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyNjgwOTgzNA=="
        },
        {
          "author": "tannergooding",
          "body": "CC. @jaredpar\r\n\r\nWarning Waves would be nice, so the compiler can properly warn on this.",
          "createdAt": "2019-09-01T09:45:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-01T09:45:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyNjkwMzU4OA=="
        },
        {
          "author": "danmoseley",
          "body": "This seems not 5.0 work.",
          "createdAt": "2020-08-07T20:54:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-07T20:54:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDcwODgyNg=="
        },
        {
          "author": "Sergio0694",
          "body": "Are there any updates on the status of this issue, and/or does this have a chance of making it into .NET 6?\r\nThe fact that the `in` modifier can do hidden copies that are very easy to miss is a really inconvenient aspect of that feature (especially because the whole point of `in` was that it would only be used in performance critical scenarios) and it has been discussed before already, but currently there are still no built-in solutions to remedy that. Re# offers partial support for this mostly when invoking impure methods in `readonly` fields, but that's not really the same, it doesn't support `in` parameters and most importantly this is such an important aspect for developers using `in` that it should really be built-in.\r\n\r\nI should also add that on top of being a performance concern, there are scenarios where a hidden copy would actually be breaking. Consider this simple extension method I wrote for the `ComPtr<T>` type from @tannergooding's TerraFX library:\r\n\r\n```csharp\r\npublic static unsafe void** GetVoidAddressOf<T>(this in ComPtr<T> ptr)\r\n    where T : unmanaged\r\n{\r\n    return (void**)Unsafe.AsPointer(ref Unsafe.AsRef(in ptr));\r\n}\r\n```\r\n\r\nWhich you'd use like so:\r\n\r\n```csharp\r\nusing ComPtr<IFoo> foo = default;\r\n\r\nint result = bar->GetFoo(foo.GetVoidAddressOf());\r\n\r\n// Check result and throw, and use foo here...\r\n```\r\n\r\nYou can see how if the compiler did a shadow copy, the returned `void**` pointer would be pointing _to the shadow copy value_ instead, which in this case would result in the code just throwing away the result value, `foo` remaining a null pointer, and also a memory leak for that returned `IFoo` COM object, that'd never be tracked.\r\n\r\nThis was just an example (and in this case that code in particular is fine), but I had to ask for confirmation and I had no way to just be sure by looking at the code, because we have no built-in analyzer for that today, so errors are very hard to spot.\r\n\r\nI'd say it's more than likely there's plenty of developers out there with lots of (no breaking, but still) shadow copy in their libraries, that are just unaware of what is actually happening in their codegen. Since this feature is specifically an opt-in for developers that are seeking to make their code faster and _reduce_ copies, I'd argue it makes sense to better support this scenario 🙂\r\n",
          "createdAt": "2020-11-16T14:47:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-16T15:24:03Z",
                "user": "JimBobSquarePants"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-16T16:56:10Z",
                "user": "steveharter"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-16T18:19:49Z",
                "user": "SingleAccretion"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-16T19:18:09Z",
                "user": "Thealexbarney"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBW8UXA=="
          },
          "updatedAt": "2020-11-16T14:47:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyODEwODQ2OA=="
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOK2YNtA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/30535",
    "title": "Detect incorrect usage of 'in' modifier"
  },
  {
    "author": "tndata",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2019-08-17T10:39:00Z",
    "body": "In C# 8 (.NET Core 3) you added new nullability-attributes to allow us to manually annotate types with their nullability.\r\n\r\nLocated here:\r\nroslyn/src/Workspaces/Core/Portable/Utilities/NullableHelpers/NullableAttributes.cs\r\n\r\nWhy not provide these attributes as a stand-alone NuGet package, so that legacy packages (.NET Core <2.x / .NET Standard <2.1) libraries can be annotated with these attributes as well.\r\n\r\nBenefits:\r\n* We can start annotating our legacy libraries \r\n* We would get more nullability warnings in our .NET Core 3 applications\r\n\r\nThe alternative is to manually add these attributes to my legacy libraries, but that feels a bit dirty. The nice thing is that the C# 8 compiler uses these attributes when used in legacy libraries.\r\n\r\n\r\n\r\n\r\n\r\n",
    "number": 30801,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-09T20:16:27Z",
          "user": "saucecontrol"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-09T22:06:52Z",
          "user": "jkoritzinsky"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-10T11:00:37Z",
          "user": "Gnbrkm41"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-11T20:35:26Z",
          "user": "zmj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-17T10:41:38Z",
          "user": "ObsidianMinor"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-23T19:17:40Z",
          "user": "chris-shaw-2011"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-09-24T12:10:08Z",
          "user": "YairHalberstadt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-10-04T07:39:11Z",
          "user": "Ilia-Kosenkov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-11-02T13:30:15Z",
          "user": "ViIvanov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2019-12-04T13:34:01Z",
          "user": "MuiBienCarlota"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-04T01:11:47Z",
          "user": "clairernovotny"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-15T16:38:57Z",
          "user": "b11p"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-04-30T17:15:02Z",
          "user": "snakex64"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-09T14:52:02Z",
          "user": "alex6dj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-18T13:13:15Z",
          "user": "HugoRoss"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-15T18:55:33Z",
          "user": "carlreinke"
        }
      ],
      "totalCount": 16,
      "endCursor": "Y3Vyc29yOnYyOpHOBjgiRg=="
    },
    "updatedAt": "2023-03-29T16:05:01Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jaredpar",
          "body": "Moving to CoreFX as this is a library question. ",
          "createdAt": "2019-09-09T17:35:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-09T17:35:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyOTU4Njc1MA=="
        },
        {
          "author": "stephentoub",
          "body": "cc: @terrajobst, @cartermp ",
          "createdAt": "2019-09-09T20:05:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2019-09-11T00:59:51Z",
                "user": "terrajobst"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOAwUvQw=="
          },
          "updatedAt": "2019-09-09T20:05:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUyOTY0MzIwNA=="
        },
        {
          "author": "terrajobst",
          "body": "It has come up. I'll see what we can do post .NET Core 3.0.",
          "createdAt": "2019-09-11T01:00:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-11T01:00:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMDE3NTcwOA=="
        },
        {
          "author": "sharwell",
          "body": "@terrajobst It would help in the interim if the file could be provided under a public domain license, or somehow intentionally excluded from the current attribution requirements. It's easy to create a package that embeds the attribute definitions with `internal` accessibility for use, but the licensing situation is not clear when the embedded definitions are distributed.",
          "createdAt": "2019-09-17T15:35:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-09-17T15:37:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDUzMjI3NjE5OA=="
        },
        {
          "author": "terrajobst",
          "body": "> @terrajobst It would help in the interim if the file could be provided under a public domain license, or somehow intentionally excluded from the current attribution requirements. It's easy to create a package that embeds the attribute definitions with `internal` accessibility for use, but the licensing situation is not clear when the embedded definitions are distributed.\r\n\r\nI disagree. The MIT license is permissive and most real world software will already have to provide a TPN files b/c OSS is mainstream enough. One-off licenses are expensive for us to maintain and will generally cause more confusion than whatever minor gains are to be had IMHO.",
          "createdAt": "2019-10-10T23:33:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-10-10T23:33:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0MDg0MDIyNw=="
        },
        {
          "author": "chucker",
          "body": "This package seems to roughly fulfill the requirements: https://www.nuget.org/packages/Nullable/",
          "createdAt": "2019-11-04T18:51:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-11-04T18:51:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0OTQ5NDc1MQ=="
        },
        {
          "author": "jnm2",
          "body": "@sharwell's https://github.com/tunnelvisionlabs/ReferenceAssemblyAnnotator provides source-defined internal attributes (useful for public types) AND rewrites the netfx/netstandard/old netcore reference assembles by copying attributes into them from matching APIs in .NET Core 3.",
          "createdAt": "2020-01-04T15:32:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-04T15:32:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3MDc5NDYxOQ=="
        },
        {
          "author": "ps-weber",
          "body": "Is this planned?\r\nIt seems like nullable support in protobuf/protoc is blocked because there is no backwards compatible way of marking fields non-nullable: https://github.com/protocolbuffers/protobuf/issues/6632",
          "createdAt": "2023-03-29T16:00:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-29T16:05:01Z",
          "id": "IC_kwDODI9FZc5Yvqnu"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOWL6p7g=="
    },
    "url": "https://github.com/dotnet/runtime/issues/30801",
    "title": "Provide the C# 8 nullable attributes as a NuGet package"
  },
  {
    "author": "stephentoub",
    "labels": [
      "documentation",
      "area-Meta",
      "good first issue",
      "os-freebsd",
      "help wanted"
    ],
    "createdAt": "2019-10-21T13:52:25Z",
    "body": "The document is hard to read and follow:\r\nhttps://github.com/dotnet/corefx/pull/41774/files#r334952150\r\ncc: @carlossanlop ",
    "number": 31238,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-09-17T08:10:38Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "carlossanlop",
          "body": "Thanks @stephentoub . I'll follow up on this when I get the chance, and I'll ask the original writers of this document for their input.",
          "createdAt": "2019-10-21T13:59:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2019-10-21T13:59:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0NDUyNzk4Mw=="
        },
        {
          "author": "wfurt",
          "body": "that would be probably me :) We tracked progress on Wiki but so much got broken by Arcade invasion. And for master I would suggest to wait until repo consolidation is done. \r\nThere is similar and obsolete version for coreclr.",
          "createdAt": "2019-10-24T23:40:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-23T00:08:42Z",
                "user": "lukeb1961"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBB8-2A=="
          },
          "updatedAt": "2019-10-24T23:40:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU0NjE0MzQ3MA=="
        },
        {
          "author": "dotnet-policy-service",
          "body": "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-08-26T16:51:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-26T16:51:39Z",
          "id": "IC_kwDODI9FZc6JuZ0E"
        },
        {
          "author": "dotnet-policy-service",
          "body": "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-09-09T19:49:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-09T19:49:42Z",
          "id": "IC_kwDODI9FZc6LaZNd"
        },
        {
          "author": "am11",
          "body": "cc @Thefrank, @sec, we can follow the format used in https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/linux-instructions.md and update https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/freebsd-instructions.md accordingly. Also, revisit https://github.com/search?q=repo:dotnet/runtime+path:docs+freebsd&type=code to see if there are other updates needed. FreeBSD instructions were written long time ago which predate runtime monorepo and arcade infrastructure.",
          "createdAt": "2024-09-10T04:57:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-10T04:57:17Z",
          "id": "IC_kwDODI9FZc6Lc7xx"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOi3O8cQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/31238",
    "title": "Re-write FreeBSD instructions"
  },
  {
    "author": "MithrilMan",
    "labels": [
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2020-01-17T14:50:03Z",
    "body": "#### Analyzer package\r\n\r\n[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)\r\n\r\n#### Package Version\r\n\r\nv2.9.8 (Latest)\r\n\r\n#### Diagnostic ID\r\n\r\nExample: [CA1062](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1062?view=vs-2019)\r\n\r\n#### Repro steps\r\n\r\ncreate a method that accept a non nullable reference like this\r\n```\r\npublic void Handle(EventBase theEvent){\r\n   theEvent!.DoAnything();\r\n}\r\n```\r\n\r\n`theEvent!.DoAnything()` will complain about 1062 even if the `!` is applied to the expression\r\n\r\n#### Expected behavior\r\n\r\nCA1062 should be NRT (nullable reference type) aware in order to not trigger when are are confident about never pass a null value from external libraries.\r\n\r\nThe C#8 nullable feature is nice, but it still requires to write lot of boilerplate code to ensure it's happy about public method arguments that may be null when invoked from external libraries.\r\n\r\nWhen we are confident we'll use NRT in all project using such library, having a way to not write all null checks would be valuable.\r\n\r\nAnother very common scenario is when using classes in dependency injection scenarios, where a great percentage of classes shouldn't need an explicit null check\r\n\r\nprobably this behavior should be supported by a language feature, like using `!` on method arguments to suppress this message implicitly (or even let the compiler generate the standard null check)\r\n#### Actual behavior\r\n\r\nthere is no way to prevent CA1062 to trigger (except of course to nullcheck or disable the rule) even using the notnull `!` operator in the expression\r\n",
    "number": 63389,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-06T21:07:14Z",
          "user": "kz-gonzalo-curbelo"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOC-2XyQ=="
    },
    "updatedAt": "2024-11-27T16:50:46Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "mavasani",
          "body": "Duplicate of https://github.com/dotnet/roslyn-analyzers/issues/3015#issuecomment-550413093. Quoting:\r\n\r\n> The `[NotNull]` attribute is not a guarantee, even when C# 8 is used with nullable reference types enabled. Arguments at the public API entry points should still be validated before use.",
          "createdAt": "2020-01-17T14:52:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-12T06:15:58Z",
                "user": "JeremyCaney"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBA1eEg=="
          },
          "updatedAt": "2020-01-17T14:52:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY1NzQ4Ng=="
        },
        {
          "author": "mavasani",
          "body": "Also see https://github.com/dotnet/roslyn-analyzers/issues/2875#issuecomment-536408486",
          "createdAt": "2020-01-17T14:53:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T14:53:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY1NzcxMA=="
        },
        {
          "author": "333fred",
          "body": "@mavasani the request is to support the `!` operator to suppress the warning, as I understood it. ",
          "createdAt": "2020-01-17T14:56:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T14:56:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY1ODkyMQ=="
        },
        {
          "author": "MithrilMan",
          "body": "I'm aware of these comments but the need of an implicit way to handle case when we want to suppress CA1062 without a suppressor but by convention should imo get considered.\r\n\r\nYes, `!` would be a solution to the problem",
          "createdAt": "2020-01-17T14:57:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T14:57:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY1OTE4NQ=="
        },
        {
          "author": "333fred",
          "body": "@MithrilMan please with the scenario you linked in discord. ",
          "createdAt": "2020-01-17T14:57:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T14:57:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY1OTM4Mg=="
        },
        {
          "author": "MithrilMan",
          "body": "![image](https://user-images.githubusercontent.com/5107375/72621940-76160200-3942-11ea-9f6d-c68c345a08d9.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5107375/72621955-7d3d1000-3942-11ea-99c6-b348da1c5ca1.png)\r\n",
          "createdAt": "2020-01-17T15:00:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T15:00:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MDU5MA=="
        },
        {
          "author": "mavasani",
          "body": "@MithrilMan Thanks for the screenshot. Yes, that is something that our DFA framework should understand.",
          "createdAt": "2020-01-17T15:01:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T15:01:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MTE5NA=="
        },
        {
          "author": "sharwell",
          "body": "Using the `!` to suppress this warning is in _direct_ conflict with https://github.com/dotnet/roslyn/issues/34714. We should not use it here, because we will definitely not be recognizing this case on the other side and the tools will keep removing it.",
          "createdAt": "2020-01-17T15:02:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-01-17T18:55:23Z",
                "user": "andre-ss6"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA5Vs5g=="
          },
          "updatedAt": "2020-01-17T15:02:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MTQxMQ=="
        },
        {
          "author": "MithrilMan",
          "body": "I agree that ! in the code is avoidable and I'd like to be able to use it in the argument declaration\r\n`public void Handle(EventBase! theEvent){`\r\nor\r\n`public void Handle(EventBase theEvent!){`",
          "createdAt": "2020-01-17T15:04:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T15:04:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MjM1NA=="
        },
        {
          "author": "mavasani",
          "body": "@sharwell has a good argument here. I think we have 2 broad scenarios here:\r\n\r\n1. Public API with nullable enable for the file/project, where we know for sure that all API clients are also nullable enabled. CA1062 should be disabled for such a project/file.\r\n2. Public API with nullable enable for the file/project, where the API author is not sure that all API clients are nullable enabled or not and hence there ought to be a null check in the public API, either explicit null check statement in code or the new C# 9 `!` operator, which will cause the compiler to generate null check code. CA1062 should recognize both these null checks and not fire.",
          "createdAt": "2020-01-17T15:06:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-12T06:48:38Z",
                "user": "JeremyCaney"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-25T10:40:58Z",
                "user": "yzbai"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBCOnQg=="
          },
          "updatedAt": "2020-01-17T15:06:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MjkyMw=="
        },
        {
          "author": "333fred",
          "body": "That last point is a c# language request. See https://github.com/dotnet/csharplang/issues/2145. ",
          "createdAt": "2020-01-17T15:06:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-17T15:06:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3NTY2MzIyMQ=="
        },
        {
          "author": "mavasani",
          "body": "Based on the last set of comments, I think the resolution is there is nothing to be done from analyzer side here. The compiler feature https://github.com/dotnet/csharplang/issues/2145 should address @MithrilMan's scenario?",
          "createdAt": "2020-02-25T21:18:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-02-25T21:18:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5MTA3NDA0Mg=="
        },
        {
          "author": "mavasani",
          "body": "Closing as by design. Request tracked with dotnet/csharplang#2145",
          "createdAt": "2020-06-24T22:44:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-24T22:44:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTExMTU3NQ=="
        },
        {
          "author": "mavasani",
          "body": "Re-opening for triage based on https://github.com/dotnet/runtime/pull/62494#issuecomment-1005216167",
          "createdAt": "2022-01-05T06:02:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T06:02:52Z",
          "id": "IC_kwDODI9FZc477Ufk"
        },
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-01-05T06:03:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T06:03:19Z",
          "id": "IC_kwDODI9FZc477Uim"
        },
        {
          "author": "mavasani",
          "body": "Re-opening the request to design if CA1062 should be completely NRT aware or completely NRT unaware.\r\n\r\nCurrently we are in a partially supported stage, CA1062 recognizes `[NotNull]` attribute, but not the `?` annotations or lack of it in NRT enabled code.\r\n \r\nSee discussion in https://github.com/dotnet/runtime/pull/62494 for more context",
          "createdAt": "2022-01-05T06:05:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T06:12:56Z",
          "id": "IC_kwDODI9FZc477UyK"
        },
        {
          "author": "mavasani",
          "body": "@stephentoub @terrajobst @jeffhandley ",
          "createdAt": "2022-01-05T06:12:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T06:12:17Z",
          "id": "IC_kwDODI9FZc477Vh6"
        },
        {
          "author": "sharwell",
          "body": "@mavasani The comment you linked to is a different scenario, and would not apply for the situation described above.\r\n\r\nI believe CA1062 is behaving correctly in both the case here and in the situation described by #62494. It's unfortunate that the compiler eliminated the ability to use `[NotNull]` for these cases, but we could instead adopt a third-party solution like [`[ValidatedNotNull]`](https://github.com/microsoft/vs-validation/blob/main/src/Microsoft.VisualStudio.Validation/ValidatedNotNullAttribute.cs).\r\n\r\nI would also support merging #62494 directly (including the \"redundant\" attribute helps with clarity and expresses intent).",
          "createdAt": "2022-01-05T17:29:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:30:53Z",
          "id": "IC_kwDODI9FZc479T9o"
        },
        {
          "author": "stephentoub",
          "body": "> I would also support merging #62494 directly (including the \"redundant\" attribute helps with clarity and expresses intent).\r\n\r\nWe have literally tens of thousands of parameters that would then need [NotNull] based on the precedent that [NotNull] is needed to say \"this non-nullable parameter will be non-null after this call\".  That is not tenable, and it is counter to the very explicit language decision made by the LDM to align the behavior of `string s` and `[NotNull] string ` (https://github.com/dotnet/roslyn/issues/43383#issuecomment-638438735). CA1062 is not conforming to the design of NRT and is using NRT attributes incorrectly by ignoring annotations.",
          "createdAt": "2022-01-05T17:34:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-05T07:27:17Z",
                "user": "rcollina"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC5Q0sw=="
          },
          "updatedAt": "2022-01-05T17:36:37Z",
          "id": "IC_kwDODI9FZc479U1_"
        },
        {
          "author": "sharwell",
          "body": "Keep in mind that a primary purpose of CA1062 is to report warnings for public API entry points, since a null value could be passed in by a caller even if the method declares that it requires a non-null argument. CA1062 needs a way to know that a method _checks for null_ and produces an appropriate exception, and does not simply fall back to `NullReferenceException`. The latter is an acceptable indicator for nullable flow analysis in the compiler, but not for CA1062.\r\n\r\nI agree that CA1062 needs a way to recognize argument validation helper methods, but strongly disagree that nullable flow state from the compiler serves this purpose in the context of the original analysis rule design.",
          "createdAt": "2022-01-05T17:36:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:39:06Z",
          "id": "IC_kwDODI9FZc479VPD"
        },
        {
          "author": "stephentoub",
          "body": "> Keep in mind that a primary purpose of CA1062 is to report warnings for public API entry points, since a null value could be passed in by a caller even if the method declares that it requires a non-null argument. CA1062 needs a way to know that a method checks for null and produces an appropriate exception, and does not simply fall back to NullReferenceException. The latter is an acceptable indicator for nullable flow analysis in the compiler, but not for CA1062.\r\n\r\nI understand that, but there is no such built-in attribute ([NotNull] is not that).  And even if there were, we again have literally thousands of methods that check arguments for null, but we're not going to also add such an attribute to every single such parameter.  If we wanted to explore adding such an attribute and having it automatically injected by the compiler as part of using the new `!!`, that'd be a fine conversation to have.",
          "createdAt": "2022-01-05T17:38:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:48:24Z",
          "id": "IC_kwDODI9FZc479Vrb"
        },
        {
          "author": "sharwell",
          "body": "I think #62494 and this issue are looking at two different situations:\r\n\r\n* This issue considered a method which did not perform any argument validation before use\r\n* #62494 considered a method which did perform argument validation, but didn't do so in a way CA1062 recognized\r\n\r\nPerhaps we should create a new issue from #62494 instead of reusing this one?",
          "createdAt": "2022-01-05T17:42:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:42:00Z",
          "id": "IC_kwDODI9FZc479WMt"
        },
        {
          "author": "stephentoub",
          "body": "> Perhaps we should create a new issue from #62494 instead of reusing this one?\r\n\r\nYou can if you want, but from my perspective that's just busy work at this point, especially given there is now conversation on this issue after it was reopened pertaining to the new topic.",
          "createdAt": "2022-01-05T17:43:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:43:31Z",
          "id": "IC_kwDODI9FZc479WcO"
        },
        {
          "author": "sharwell",
          "body": "My understanding is the expected form for dedicated null-validation helper methods, which is recognized by both the compiler and CA1062, is the following:\r\n\r\n1. The parameter for the validation helper is declared nullable\r\n2. The parameter is marked with `[NotNul]`\r\n\r\nAn example in Roslyn is [`Contract.ThrowIfNull<T>`](https://github.com/dotnet/roslyn/blob/a9cdf7f0091ce8f0abecdd78eea693fb9043330b/src/Workspaces/SharedUtilitiesAndExtensions/Compiler/Core/Utilities/Contract.cs#L25).\r\n\r\nIs there a reason why this approach does not work here?",
          "createdAt": "2022-01-05T17:46:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:46:59Z",
          "id": "IC_kwDODI9FZc479W7_"
        },
        {
          "author": "stephentoub",
          "body": "> Is there a reason why this approach does not work here?\r\n\r\nhttps://github.com/dotnet/runtime/pull/62494#issuecomment-1004187500",
          "createdAt": "2022-01-05T17:47:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:47:20Z",
          "id": "IC_kwDODI9FZc479XEy"
        },
        {
          "author": "sharwell",
          "body": "I would propose this is more of a documentation situation, where users are shown by example that dedicated argument validation methods follow specific patterns such that they are recognized by both the compiler and by code analysis tools. It may look weird the first time you see it, but when every similar method follows the same approach it becomes normal.",
          "createdAt": "2022-01-05T17:48:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T17:49:45Z",
          "id": "IC_kwDODI9FZc479XWs"
        },
        {
          "author": "jeffschwMSFT",
          "body": "@sharwell can you recommend an area to look at this issue further?",
          "createdAt": "2022-01-05T18:41:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T18:41:22Z",
          "id": "IC_kwDODI9FZc479hd0"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n#### Analyzer package\r\n\r\n[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)\r\n\r\n#### Package Version\r\n\r\nv2.9.8 (Latest)\r\n\r\n#### Diagnostic ID\r\n\r\nExample: [CA1062](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1062?view=vs-2019)\r\n\r\n#### Repro steps\r\n\r\ncreate a method that accept a non nullable reference like this\r\n```\r\npublic void Handle(EventBase theEvent){\r\n   theEvent!.DoAnything();\r\n}\r\n```\r\n\r\n`theEvent!.DoAnything()` will complain about 1062 even if the `!` is applied to the expression\r\n\r\n#### Expected behavior\r\n\r\nCA1062 should be NRT (nullable reference type) aware in order to not trigger when are are confident about never pass a null value from external libraries.\r\n\r\nThe C#8 nullable feature is nice, but it still requires to write lot of boilerplate code to ensure it's happy about public method arguments that may be null when invoked from external libraries.\r\n\r\nWhen we are confident we'll use NRT in all project using such library, having a way to not write all null checks would be valuable.\r\n\r\nAnother very common scenario is when using classes in dependency injection scenarios, where a great percentage of classes shouldn't need an explicit null check\r\n\r\nprobably this behavior should be supported by a language feature, like using `!` on method arguments to suppress this message implicitly (or even let the compiler generate the standard null check)\r\n#### Actual behavior\r\n\r\nthere is no way to prevent CA1062 to trigger (except of course to nullcheck or disable the rule) even using the notnull `!` operator in the expression\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>MithrilMan</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-01-05T18:50:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T18:50:39Z",
          "id": "IC_kwDODI9FZc479i9v"
        },
        {
          "author": "terrajobst",
          "body": "@mavasani \r\n\r\n> Re-opening the request to design if CA1062 should be completely NRT aware or completely NRT unaware.\r\n\r\nIt seems a bit bizarre to me to have an analyzer about null-validation that is NRT unaware by-design. What is this reason for this design choice?",
          "createdAt": "2022-01-05T22:36:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-05T22:36:45Z",
          "id": "IC_kwDODI9FZc47-F26"
        },
        {
          "author": "stephentoub",
          "body": "> It seems a bit bizarre to me to have an analyzer about null-validation that is NRT unaware by-design. What is this reason for this design choice?\r\n\r\nI think the discrepancy is that CA1062 is acknowledging the fact that NRT isn't perfect.  We annotate our public surface area to say that members are non-nullable but we still then check whether the arguments are null and throw if they are.  CA1062 is there to flag places where such check-and-throw isn't being performed, and if it were fully NRT aware, such that it said \"paramter X is non-nullable and thus doesn't need validation\", it wouldn't be usable in the NRT world in all of the places we ourselves still do argument validation in the face of NRT.",
          "createdAt": "2022-01-05T22:48:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-05T22:49:46Z",
                "user": "sharwell"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCIvTmA=="
          },
          "updatedAt": "2022-01-05T22:48:52Z",
          "id": "IC_kwDODI9FZc47-HRY"
        },
        {
          "author": "terrajobst",
          "body": "> if it were fully NRT aware, such that it said \"paramter X is non-nullable and thus doesn't need validation\", it wouldn't be usable in the NRT world in all of the places we ourselves still do argument validation in the face of NRT\r\n\r\nGotcha.",
          "createdAt": "2022-01-06T00:48:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T00:48:19Z",
          "id": "IC_kwDODI9FZc47-U7P"
        },
        {
          "author": "lonix1",
          "body": "*I'm unsure whether below use case is relevant, please tell me if I should open a new issue? I was directed here from [SO](https://stackoverflow.com/q/71818935/9971404).*\r\n\r\nA common inheritance pattern:\r\n````cs\r\npublic abstract class Parent\r\n{\r\n  public void Foo(string s)\r\n  {\r\n    _ = s ?? throw new ArgumentNullException(nameof(s));    //null guard\r\n    DoOtherStuff();\r\n    FooImpl(s);                                             //forward to child class\r\n  }\r\n  protected virtual void FooImpl(string s);\r\n}\r\n\r\npublic class Child : Parent\r\n{\r\n  protected override void FooImpl(string s)\r\n  {\r\n    var l = s.Length;                                      //CA1062\r\n  }\r\n}\r\n````\r\n\r\nI can 1) use `[NotNull]` in child class signature (but if parent is in a class library then users must be instructed to do this, which is not a pleasant API to use), 2) suppress warning, 3) re-validate. All kind of dirty.\r\n\r\nIf this is by design, are there any good workarounds other than those above?",
          "createdAt": "2022-04-11T04:01:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-11T04:01:09Z",
          "id": "IC_kwDODI9FZc5BPQY7"
        },
        {
          "author": "udlose",
          "body": "Is there any update on this issue?",
          "createdAt": "2024-02-19T18:21:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-19T18:21:45Z",
          "id": "IC_kwDODI9FZc50aDZ0"
        },
        {
          "author": "sharwell",
          "body": "@udlose We are not tracking this issue in any other location that I'm aware of, so all updates are posted only to this issue.",
          "createdAt": "2024-02-20T13:48:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-20T13:48:54Z",
          "id": "IC_kwDODI9FZc50e5A-"
        },
        {
          "author": "hansmbakker",
          "body": "I think this issue deserves some attention. [CA1062](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1062) and [CA2264](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2264) are now contradicting each other in the context of projects where `Nullable` is enabled.\n \n- [CA1062](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1062) says that you should check parameters to be not null.\n  This can be done by using \n  ```csharp\n  ArgumentNullException.ThrowIfNull(nameof(someParameter));\n  ```\n- [CA2264](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2264) reminds you that adding above check is redundant.\n\nIt requires changes to `.editorconfig` or project settings to mute one of these two.\n\n\n\n",
          "createdAt": "2024-11-27T16:44:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-27T16:44:23Z",
          "id": "IC_kwDODI9FZc6VRSX5"
        },
        {
          "author": "stephentoub",
          "body": "> [CA2264](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2264) reminds you that adding above check is redundant.\n\nCA2264 shouldn't be firing for reference type parameters annotated as non-nullable. Can you give an example where you see otherwise?\n\nFor example, this does not trigger CA2264 (nor should it):\n```C#\npublic class Class1\n{\n    public static void M(string argument)\n    {\n        ArgumentNullException.ThrowIfNull(argument);\n        Console.WriteLine(argument.GetHashCode());\n    }\n}\n```",
          "createdAt": "2024-11-27T16:46:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-27T16:50:46Z",
          "id": "IC_kwDODI9FZc6VRTtH"
        }
      ],
      "totalCount": 36,
      "endCursor": "Y3Vyc29yOnYyOpHOO_VxMg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/63389",
    "title": "CA1062 should be NRT (nullable reference type) aware "
  },
  {
    "author": "jkotas",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2020-01-24T13:40:53Z",
    "body": "For histroric reasons, .NET Core runtime has many small facades and partial facades that do not serve any meaninful purpose anymore. We should consider merging some of them to reduce number of assemlies that a typical app has to load. Unfortunately, we cannot delete them because of backward compatibility.\r\n\r\nExample of merged facade looks like: [System.AppContext](https://github.com/dotnet/runtime/tree/master/src/libraries/System.AppContext/). Notice that ref has type-forwards only and src has no implementation files.\r\n\r\nList of proposed merges:\r\n\r\n- [x] Merge into System.Private.CoreLib\\src:\r\n  - [x] System.Threading.Thread\\src\r\n  - [x] System.Diagnosics.Tools\\src\r\n  - [x] System.Security.Principal\\src\r\n  - [x] System.Runtime\\src\r\n  - [x] System.Runtime.Extensions\\src\r\n\r\n- [ ] Merge into System.Runtime\\ref:\r\n  - [x] System.Buffers\\ref\r\n  - [x] System.Diagnosics.Debug\\ref\r\n  - [x] System.Resources.ResourceManager\\ref\r\n  - [ ] System.Runtime.Loader\\ref\r\n  - [ ] System.Text.Encoding.Extensions\\ref\r\n  - [x] System.Threading.Tasks\\ref\r\n  - [ ] System.Threading.ThreadPool\\ref\r\n  - [x] System.Threading.Timer\\ref\r\n  - [ ] System.Threading.Thread\\ref\r\n  - [x] System.Diagnosics.Tools\\ref\r\n  - [x] System.Security.Principal\\ref\r\n  - [x] System.Runtime.Extensions\\ref\r\n\r\n- [x] Misc other cleanup\r\n  - [x] Stop building packages for System.Reflection.Emit.*\r\n  - [x] Stop building packages for System.Reflection.TypeExtensions\r\n  - [x] Simplify build configurations for implementations that just foward to other contracts (e.g. System.AppContext\\src can have just a single configuration)\r\n  - [x] Delete System.Reflection.Emit.*\\src\\Resources\\Strings.resx\r\n  - [x] Delete System.Buffers\\src\\Resources\\Strings.resx\r\n  - [x] Delete System.Threading.Timer\\src\\ApiCompatBaseline.uapaot.txt\r\n  - [x] Merge System.Reflection.Emit.*\\ref\\System.Reflection.Emit.*.netcore.cs into System.Reflection.Emit\\ref\\System.Reflection.Emit.*.cs\r\n  - [x] Delete System.IO.UnmanagedMemoryStream\\ref\\System.IO.UnmanagedMemoryStream.cs\r\n  - [x] Delete System.Reflection\\ref\\System.Reflection.cs\r\n\r\n- [ ] Wave 2: It is less obvious that the merging is a good idea for these (big enough, platform specific, etc.) We may still do some merging for them, based on the experience from the Wave 1 above:\r\n   - [ ] System.Diagnostics.Contracts\r\n   - [ ] System.Diagnostics.Tracing\r\n   - [ ] System.Numerics.Vectors\r\n   - [ ] System.Reflection.Emit\r\n   - [ ] System.Reflection.Primitives\r\n   - [ ] System.Threading.Overlapped\r\n   - [ ] System.Memory\r\n   - [ ] System.Reflection.TypeExtensions\r\n   - [ ] System.Threading\r\n   - [ ] System.Collections\r\n   - [ ] System.Collections.Concurrent\r\n",
    "number": 2138,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-24T16:54:58Z",
          "user": "ericstj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-27T08:41:46Z",
          "user": "hypeartist"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-27T15:14:59Z",
          "user": "ryanerdmann"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-27T20:36:55Z",
          "user": "maryamariyan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-01-29T20:09:09Z",
          "user": "pentp"
        },
        {
          "content": "HEART",
          "createdAt": "2020-01-29T20:09:11Z",
          "user": "pentp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-27T04:55:32Z",
          "user": "ShreyasJejurkar"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-27T09:45:40Z",
          "user": "rogihee"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOCH8SUg=="
    },
    "updatedAt": "2025-02-07T23:24:45Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "cc @ericstj ",
          "createdAt": "2020-01-24T13:42:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-24T13:42:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODEzNDYxNw=="
        },
        {
          "author": "danmoseley",
          "body": "@ericstj thoughts about merging  System.Collections? @eanova was about to work on a change to HashSet that woudl benefit from it being inside corelib. If we want to merge it, he can do it. If we don't, we could just move HashSet.",
          "createdAt": "2020-01-25T00:17:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-25T00:17:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODM1MTQ5NQ=="
        },
        {
          "author": "Symbai",
          "body": "Wouldn't this cause a potential conflict with `PublishTrimmed=true` by making the output size even bigger? Or is the linker now smart enough to eliminate unused code in assemblies?",
          "createdAt": "2020-01-27T11:34:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-27T11:34:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODcwODE5MQ=="
        },
        {
          "author": "jkotas",
          "body": "> PublishTrimmed=true by making the output size even bigger?\r\n\r\nI expect that it will be a noise at the end. It will reduce number of tiny files that survive and make the few files bigger. Note that most of the tiny facades that this is about are used by *every* reasonable app, so the chances that the linker was able to remove them are pretty low.\r\n\r\nThe default for `PublishTrimmed=true` is assembly level trimming currently. This leaves a lot of unused code on the table. The linker was always smart enough to do method level trimming, but there is work needed in libraries to give linker information about the methods accessed by reflection so that the app still works after method-level trimming.",
          "createdAt": "2020-01-27T16:42:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-27T16:42:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODgzNzk1Nw=="
        },
        {
          "author": "ericstj",
          "body": "System.Collections is actually somewhat large: 324 KB.  @jkotas you had this in wave 2 originally.  Are you concerned about growth of working set?  I see that the console template doesn't normally use System.Collections, but MVC does.  I didn't check all the templates.  I tend to agree that most apps probably use this.  I wonder if we could get data on this to back up that claim. 🤔\r\n\r\nAn alternative, more piecemeal solution here would be to push down all types that are implemented in S.P.C to System.Runtime.  Then change these partial facades into plain assemblies referencing System.Runtime.  We could then decide case-by-case about moving types down based on tradeoffs to size vs usage.",
          "createdAt": "2020-01-27T20:17:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-27T20:17:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODkzMjg5NA=="
        },
        {
          "author": "jkotas",
          "body": "> System.Collections is actually somewhat large: 324 KB\r\n\r\nCompare this to S.P.CoreLib size that is 10MB. The profile-guided layout for S.P.CoreLib is a must-have to split these 10MB into what is actually used and get a decent working set. These extra 300kB from System.Collections would just get for a free ride.",
          "createdAt": "2020-01-27T21:19:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-01-27T21:19:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU3ODk1NzcwMQ=="
        },
        {
          "author": "danmoseley",
          "body": "@jkotas I assume no more work is planned here for 5.0. Moving to Future",
          "createdAt": "2020-08-07T20:56:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-07T20:56:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDcwOTU3MA=="
        },
        {
          "author": "dotnet-policy-service",
          "body": "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-02-07T17:54:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2025-02-08T00:19:30Z",
                "user": "Symbai"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEFsJpA=="
          },
          "updatedAt": "2025-02-07T17:54:48Z",
          "id": "IC_kwDODI9FZc6dklXM"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOnZJVzA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/2138",
    "title": "Reduce number of runtime assemblies that a typical app has to load"
  },
  {
    "author": "guesshe",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2020-03-09T14:36:30Z",
    "body": "Hi, \r\n\r\nI am trying to port the entire runtime to qnx7 platform on x64 arch. I am able to build coreclr but it won't run unless I have dotnet executable built. Any suggestions on how to build corehost for qnx? ",
    "number": 33374,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-12-02T13:50:40Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "> Any suggestions on how to build corehost for qnx?\r\n\r\nThe same way as coreclr? It lives under https://github.com/dotnet/runtime/tree/master/src/installer/corehost",
          "createdAt": "2020-03-09T16:35:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T16:35:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjYzOTE4OA=="
        },
        {
          "author": "guesshe",
          "body": "How about the .nuget packages downloaded for specific RID? I used this repo https://github.com/dotnet/core-setup/tree/v2.2.8, when I tried on linux, it pulls down some .nuget files for linux platform, but I don't have these files for QNX to pull down. ",
          "createdAt": "2020-03-09T16:57:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T16:57:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjY1MDkzMw=="
        },
        {
          "author": "jkotas",
          "body": "You may want to build it from dotnet/runtime repo. dotnet/runtime has everything together that avoids the issues with publishing and downloading packages between repos.",
          "createdAt": "2020-03-09T17:07:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T17:07:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjY1NzEyNQ=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Oh. Thanks! Shall I start with all subprojects or only coreclr and corehost should be enough for me?",
          "createdAt": "2020-03-09T17:08:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T17:08:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjY1Nzc4Mg=="
        },
        {
          "author": "jkotas",
          "body": "You can start src\\coreclr, src\\libraries\\Native and corehost; and get the managed libraries from other Unix flavor.",
          "createdAt": "2020-03-09T17:13:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T17:13:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjY2MDgxMA=="
        },
        {
          "author": "guesshe",
          "body": "Thanks! By saying managed libraries, do you mean the .dll libraries? ",
          "createdAt": "2020-03-09T18:50:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T18:50:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjcxODUxNg=="
        },
        {
          "author": "jkotas",
          "body": "Right",
          "createdAt": "2020-03-09T19:27:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T19:27:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjczNTkyOQ=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas I tried the dotnet core 5.0.0-dev on linux and it can build a binary dotnet under artifacts directory, but when I tried to execute it, it gave me an error \"A fatal error occurred. The folder [/home/<user_dir>/Github/runtime/artifacts/obj/linux-x64.Debug/cli/dotnet/host/fxr] does not exist\". This is the same error when I tried the v2.2.8 version of ccorehost on linux. If I download the cli tar file and untar it, it has sub-directories host. What did I miss? Is the built dotnet directly executable or I have to do some post-processing? ",
          "createdAt": "2020-03-09T19:28:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T19:29:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NjczNjQ5MA=="
        },
        {
          "author": "jkotas",
          "body": "`obj` is directory for intermediate build files. It does not have the right directory layout.\r\n\r\nTry the one under `bin`, e.g. artifacts/bin/testhost/netcoreapp5.0-linux-Debug-x64",
          "createdAt": "2020-03-09T20:25:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-09T20:25:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5Njc2MTQzMQ=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Thanks! I will try it out and let you know the progress. ",
          "createdAt": "2020-03-10T13:46:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-10T13:46:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NzA5NDA3Mw=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Can I publish my app to netcore sdk 5.0.0-dev? Or the other way around, can I build dotnet/runtime for sdk version 3? Following command will build a dotnet executable but it missed host folder and can't run from there. It doesn't build the artifacts/bin/testhost folder though.\r\n/home/<usr>/Github/runtime/src/installer/corehost/build.sh Debug x64 -apphostver \"2.1.802\" -hostver \"2.1.802\" -fxrver \"2.1.802\" -policyver \"2.1.802\" -commithash \"fc2e56c8e8d60180d9ca6ddff67076d779fd4a43\"",
          "createdAt": "2020-03-11T15:49:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-11T15:49:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NzcxMTk3MA=="
        },
        {
          "author": "jkotas",
          "body": "What typically works best for initial bring ups like this is to publish standalone app (e.g. using `dotnet publish -r linux-x64`) and then overwrite the binaries what what you have built.",
          "createdAt": "2020-03-11T16:27:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-11T16:27:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NzczMzkzMw=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Thanks! I tried replace the dotnet executable with my own built version of 5.0.0-dev and it seems working. So I think my next step is to build qnx version of following shared libraries and replace them, am I correct? Do I really need libuv.so and libe_sqlite3.so? They are under AspNet, not NetCore. \r\n./shared/Microsoft.AspNetCore.All/2.2.8/libuv.so\r\n./shared/Microsoft.AspNetCore.All/2.2.8/libe_sqlite3.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libhostpolicy.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.Native.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libmscordbi.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libmscordaccore.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libcoreclr.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.IO.Compression.Native.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.Security.Cryptography.Native.OpenSsl.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libsos.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libcoreclrtraceptprovider.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libsosplugin.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.Globalization.Native.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libclrjit.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.Net.Http.Native.so\r\n./shared/Microsoft.NETCore.App/2.2.8/libdbgshim.so\r\n./shared/Microsoft.NETCore.App/2.2.8/System.Net.Security.Native.so\r\n./host/fxr/2.2.8/libhostfxr.so\r\n",
          "createdAt": "2020-03-11T19:36:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-11T19:36:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NzgyODQ5Mg=="
        },
        {
          "author": "jkotas",
          "body": "> Do I really need libuv.so and libe_sqlite3.so? \r\n\r\nIt depends on the ASP.NET Core you are planning to use, and how you plan to configure it.",
          "createdAt": "2020-03-11T19:39:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-11T19:39:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5NzgyOTkyNA=="
        },
        {
          "author": "am11",
          "body": "libuv is not required for ASP.NET Core (it is an optional provider for KestrelHttpServer, primary backend is .NET's own managed sockets).\r\nlibe_sqlite3 (which comes from https://github.com/ericsink/SQLitePCL.raw) is required only when EntityFramework Core is used with SQLite provider.",
          "createdAt": "2020-03-11T22:02:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-11T22:02:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5Nzg5OTgzMw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @jkotas Thanks! ",
          "createdAt": "2020-03-12T13:58:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-12T13:58:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODIwMDI3Nw=="
        },
        {
          "author": "guesshe",
          "body": "Any idea how this shared library is built? ./shared/Microsoft.NETCore.App/2.2.8/System.Net.Http.Native.so, I didn't find it after built src/libraries/Native/build-native.sh",
          "createdAt": "2020-03-12T14:27:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-12T14:27:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODIxNzIyOQ=="
        },
        {
          "author": "jkotas",
          "body": "This library no longer exists in dotnet/runtime repo.",
          "createdAt": "2020-03-12T14:31:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-12T14:31:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODIxOTU4NA=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Thanks! I will work on the rest then. ",
          "createdAt": "2020-03-12T14:34:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-12T14:34:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODIyMTc5Nw=="
        },
        {
          "author": "guesshe",
          "body": "For the managed libraries (.dll), can I reuse 2.2.8 sdk version? Only replacing .so and .a libraries with my own built version. ",
          "createdAt": "2020-03-12T14:38:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-12T14:38:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODIyNDAwMg=="
        },
        {
          "author": "jkotas",
          "body": "You are likely going to run into mismatches when combining 2.2.8 managed libraries with latest native binaries from dotnet/runtime",
          "createdAt": "2020-03-12T17:43:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-12T20:08:56Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOA9_-XA=="
          },
          "updatedAt": "2020-03-12T17:43:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODMyOTk4MQ=="
        },
        {
          "author": "guesshe",
          "body": "I am able to build corehost but got a ELF error while executing it in a QNX device. I am debugging on why it happened. ",
          "createdAt": "2020-03-13T14:18:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-13T14:18:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODc0MjQ4MA=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Is netcore 5 sdk available to try out? ",
          "createdAt": "2020-03-13T14:27:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-13T14:27:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODc0NjY1Nw=="
        },
        {
          "author": "jkotas",
          "body": "Yes, you can download the daily builds at https://github.com/dotnet/core-sdk#installers-and-binaries",
          "createdAt": "2020-03-13T14:53:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-13T14:53:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODc1OTI4NQ=="
        },
        {
          "author": "guesshe",
          "body": "@jkotas Thanks! ",
          "createdAt": "2020-03-13T16:05:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-13T16:05:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5ODc5NzI4MQ=="
        },
        {
          "author": "guesshe",
          "body": "I managed to build the dotnet executable using clang (built for QNX specifically), but when I used ldd to check dependencies, I got following error. \r\nldd: /tmp/dotnet: Exec format error\r\nThe readelf command showed following required libs and they are all present on the OS. \r\n0x0000000000000001 (NEEDED)             Shared library: [libm.so.3]\r\n0x0000000000000001 (NEEDED)             Shared library: [libiconv.so.1]\r\n0x0000000000000001 (NEEDED)             Shared library: [libc.so.4]\r\nAny idea why this error occurred? ",
          "createdAt": "2020-03-17T17:47:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-17T17:47:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMDIwOTQyMw=="
        },
        {
          "author": "am11",
          "body": "> Exec format error\r\n\r\nsounds like it got built for different architecture. if there is `readelf(1)` available, maybe try `readelf -h $(command -v dotnet) | grep 'Class\\|File\\|Machine'`, e.g.:\r\n\r\n```sh\r\n$ readelf -h .dotnet/dotnet | grep 'Class\\|File\\|Machine'\r\n  Class:                             ELF64\r\n  Machine:                           Advanced Micro Devices X86-64\r\n```\r\n\r\nalso does `ldd -v /path/to/dotnet` show something interesting?\r\n\r\nbtw, is there anything like vagrant box or a regular vm available for qnx 7 for developers or is myqnx account mandatory for devs as well?",
          "createdAt": "2020-03-23T01:29:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T01:29:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjMxNjUzNw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 It showed following for both Linux and QNX version of dotnet \r\n Class:                             ELF64\r\n  Machine:                           Advanced Micro Devices X86-64\r\nI would assume this is fine? There is a QNX version of ldd, when I ran it on QNX, it gave me \"exec format error\". I can't run QNX version of ldd on Linux. \r\nAs for your question, it is required to have a myqnx account to download sdk and tools for QNX, it is one month free trial license. ",
          "createdAt": "2020-03-23T13:36:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T13:36:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjU5MzAxOA=="
        },
        {
          "author": "am11",
          "body": "@guesshe, thanks, i was hoping for something like openqnx, which seems to also exist, but not sure how similar it is with QNX 7. :)\r\n`Exec format error` from compiled code on same system typically indicates that the compiler/linker has somehow picked up the incompatible toolchain. If you could share the build output with commands that were executed, that might help spotting such issue.\r\nAlso, here are the ELF headers on Ubuntu (which I think should differ from QNX):\r\n\r\n```sh\r\n$ dotnet --version\r\n3.1.100\r\n\r\n$ readelf -h $(command -v dotnet)\r\nELF Header:\r\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\r\n  Class:                             ELF64\r\n  Data:                              2's complement, little endian\r\n  Version:                           1 (current)\r\n  OS/ABI:                            UNIX - System V\r\n  ABI Version:                       0\r\n  Type:                              EXEC (Executable file)\r\n  Machine:                           Advanced Micro Devices X86-64\r\n  Version:                           0x1\r\n  Entry point address:               0x408a2b\r\n  Start of program headers:          64 (bytes into file)\r\n  Start of section headers:          103952 (bytes into file)\r\n  Flags:                             0x0\r\n  Size of this header:               64 (bytes)\r\n  Size of program headers:           56 (bytes)\r\n  Number of program headers:         9\r\n  Size of section headers:           64 (bytes)\r\n  Number of section headers:         30\r\n  Section header string table index: 29\r\n```",
          "createdAt": "2020-03-23T14:10:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T14:10:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjYxODM3MA=="
        },
        {
          "author": "am11",
          "body": "Two FYIs, you can also:\r\n\r\n* try build the product using gcc to see if it makes any difference:\r\n  `./build.sh -gcc -subsetCategory installer -configuration Release`\r\n* raise verbosity level to see the actual calls to clang or gcc:\r\n  `VERBOSE=1 ./build.sh -subsetCategory installer -configuration Release`\r\n\r\n(assuming before `-subsetCategory installer`, `-subsetCategory coreclr` and `-subsetCategory libraries` were built using the same compiler; preferably start clean `rm -rf artifacts` or `git clean -xdf`)",
          "createdAt": "2020-03-23T14:52:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T14:52:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjY0ODMwMg=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! I am actually doing a cross-compiling. I will try your suggestions now. ",
          "createdAt": "2020-03-23T14:56:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T14:56:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjY1MTM5NA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 /home/<username>/Github/runtime/src/installer/corehost/build.sh Debug x64 -apphostver \"5.0.0-dev\" -hostver \"5.0.0-dev\" -fxrver \"5.0.0-dev\" -policyver \"5.0.0-dev\" -commithash \"fc2e56c8e8d60180d9ca6ddff67076d779fd4a43\". This is the command I use. I have build coreclr but only for v2.2.8, there are lots of changes I have to make in order to build it using QNX toolchain. ",
          "createdAt": "2020-03-23T14:57:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T14:57:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjY1MjI1MA=="
        },
        {
          "author": "guesshe",
          "body": "Here is the link.txt under cmake generated build directory for dotnet executable. \r\n/home/<username>/PubGitRepo/llvm-project/build/bin/clang++ --target=x86_64-pc-qnx700-gnu  -D__QNX__ -D__QNXNTO__ -D__X86_64__ -D__LITTLEENDIAN__ -isystem /home/<username>/qnx700/target/qnx7/usr/include -isystem /    home/<username>/qnx700/target/qnx7/usr/include/c++/v1 -std=c++11 -g  -lc++ -lm -stdlib=libstdc++ -l/home/<username>/qnx700/target/qnx7/x86_64/usr/lib/libc++.a -l/home/<username>/qnx700/target/qnx7/x86_64/usr/lib/libint    l.a -l/home/<username>/qnx700/target/qnx7/x86_64/usr/lib/libiconv.so -Wl,--build-id=sha1 -Wl,-z,relro,-z,now -fPIE -pie CMakeFiles/dotnet.dir/__/fxr_resolver.cpp.o CMakeFiles/dotnet.dir/__/__/corehost.cpp.o      -o dotnet  ../hostmisc/libhostmisc.a",
          "createdAt": "2020-03-23T15:01:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T15:01:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjY1NDY0NA=="
        },
        {
          "author": "am11",
          "body": "@guesshe, the command looks correct for x86-64 target system. Is the target device (where you are getting `Exec format error`) using the same architecture or is it aarch64?",
          "createdAt": "2020-03-23T15:55:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T15:55:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjY5MTEwNQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! I solved my issue by using qcc instead of clang. Maybe clang picked up something that messed up my cross-compiling environment. Now I am facing another issue where #define symlinkEntrypointExecutable \"/proc/self/exefile\" doesn't exist in QNX. I am working on finding an alternative solution. ",
          "createdAt": "2020-03-23T18:49:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T18:49:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjc4OTQ1OQ=="
        },
        {
          "author": "am11",
          "body": "> symlinkEntrypointExecutable \"/proc/self/exefile\"\r\n\r\n@guesshe, I had this problem when running dotnet in Linux emulator on FreeBSD. Although FreeBSD itself has a syscall for that https://github.com/dotnet/runtime/blob/b0351370ccd132d95c97b75312fc36adaacc2664/src/installer/corehost/cli/hostmisc/pal.unix.cpp#L698-L708 but emulator required mounting procfs to Linux chroot. You may want to try out the same on QNX https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_cookbook/s3_procfs.html to overcome this situation.",
          "createdAt": "2020-03-23T19:39:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T19:39:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjgxNDYwMQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! I will add a QNX version of it. \r\n",
          "createdAt": "2020-03-23T20:08:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-23T20:08:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwMjgyODQ2Nw=="
        },
        {
          "author": "guesshe",
          "body": "I am able to build and run the dotnet executable. But when I pointed it to my published, self-contained hello_world application, it popped up following error. I suspect this has something to do with how I build coreclr (note my coreclr is still on version 2.2.8). Any idea how to debug this issue from coreclr perspective? \r\nunknown symbol: _ZN3ETW5GCLog11FireGcStartEPNS0_14st_GCEventInfoE referenced from libcoreclr.so\r\nunknown symbol: __tls_get_addr referenced from libcoreclr.so\r\n",
          "createdAt": "2020-03-25T19:28:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T19:28:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA0MDEyMA=="
        },
        {
          "author": "am11",
          "body": "@guesshe, perhaps it is due to `FEATURE_EVENT_TRACE`. We disabled this method when `FEATURE_EVENT_TRACE` is disabled for Android, just a few days ago: https://github.com/dotnet/runtime/blob/91f14182958b0fad9c9b4dc7d908ff955581979b/src/coreclr/src/vm/gctoclreventsink.cpp. Reason for disabling event tracing feature was that lttng-ust library is not available on Android (at least via Termux package manager, it is not). If QNX is also missing liblttng-ust, you can try building coreclr by disabling this feature:\r\n\r\n```sh\r\n# perform a full coreclr build (native+managed components)\r\n./build.sh -subsetcategory coreclr -cmakeargs -DFEATURE_EVENT_TRACE=0\r\n\r\n# or only native components\r\n./src/coreclr/build-runtime.sh -cmakeargs -DFEATURE_EVENT_TRACE=0\r\n```\r\n\r\nthen you will likely overcome the missing `_ZN3ETW5GCLog11FireGcStartEPNS0_14st_GCEventInfoE ` issue. Also, please note that it is best to keep the versions of installer, libraries and coreclr subset categories in sync, i.e. build from same SHA-1 git hash. This will avoid running into API/ABI mismatches or missing symbols issues. I can imagine it is somewhat challenging to keep up with the running master, for that I suggest to distill to a good/known SHA-1 (e.g. from `release/5.0-preview2` branch) and make that build (it's more work but worth it since you are in best position to pull it off). :)",
          "createdAt": "2020-03-25T20:03:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T20:03:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA1NjcwNA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! I modified clrfeatures.cmake to have set(FEATURE_EVENT_TRACE 0) if FEATURE_EVENT_TRACE is not defined. Is this the same as you pointed out to disable via cmakeargs? ",
          "createdAt": "2020-03-25T20:10:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T20:10:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA2MDA2Mg=="
        },
        {
          "author": "am11",
          "body": "Yes, it is the same thing (if it is compiling 🙂). For Android, it is disabled very early in the build: https://github.com/dotnet/runtime/blob/25fdaa850f492a9b4144670cac3522bd5b57cd6f/eng/common/cross/toolchain.cmake#L57 (when cmake sets up the toolchain for cross-compilation specified by `CMAKE_TOOLCHAIN_FILE` in `gen-buildsys.sh`; this toolchain.cmake script is invoked by cmake before project's first cmake script)",
          "createdAt": "2020-03-25T20:27:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T20:27:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA2OTAzMQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Is clang a must to build? Is it possible to use gcc? I had issue with using clang to build dotnet executable, which resulted in \"exec format error\". ",
          "createdAt": "2020-03-25T20:37:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T20:37:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA3Mzk0Mw=="
        },
        {
          "author": "guesshe",
          "body": "Can someone please explain to me a bit more about how does dotnet executable load a .dll application? It would be helpful to my debugging. Thanks in advance! ",
          "createdAt": "2020-03-25T20:45:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-25T20:45:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDA3ODAzNQ=="
        },
        {
          "author": "am11",
          "body": "`-clang` is default when there is no compiler specified, can use `-gcc` as you have done before: https://github.com/dotnet/runtime/issues/33374#issuecomment-602789459..",
          "createdAt": "2020-03-26T04:42:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-26T04:42:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNDIyNTU4Mw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! It seems coreclr 2.2.8 doesn't support gcc. Mine build was on 2.2.8. I will bring my changes to net5 and try it from there. ",
          "createdAt": "2020-03-27T14:39:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-27T14:39:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNTAzNjYwOA=="
        },
        {
          "author": "wfurt",
          "body": "For the record you can read part of the FreeBSD saga here https://github.com/wfurt/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD and https://github.com/wfurt/corefx/wiki/Building-.NET-Core-3.x-on-FreeBSD here. (This is clone as the original Wiki got lost with runtime transition) \r\n\r\nIt outlines different strategies in different maturity stages. In general getting the managed part builded turn out to be bigger challenge. The last effort is captured https://github.com/dotnet/runtime/pull/34000 when we can cross-compile native bits and use rest of the build \"normally\". When I was looking for  clang support I did noticed QNX in the list as well. \r\nOne more note is that getting changes to master is relatively ok. It is need impossible to get permission for maintenance branches e.g. 2.x and 3.x. So even if you manage to get it working there is no avenue to take that work. Moving to master/5 is the right choice IMHO. ",
          "createdAt": "2020-03-31T21:03:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-03-31T21:03:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNjg3NDMwNA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt Thanks for sharing this!",
          "createdAt": "2020-04-01T23:16:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-01T23:16:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzUzNTQ2NA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt @am11 I am almost there completing compiling net5 coreclr but I am facing following issue. My compiler is gcc 5.4.0. \r\n\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S: Assembler messages:\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:90: Error: unbalanced parenthesis in operand 1.\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:90: Error: missing ')'\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:90: Error: missing ')'\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:188: Error: unbalanced parenthesis in operand 1.\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:188: Error: missing ')'\r\n/home/<user_name>/Github/runtime/src/coreclr/src/pal/src/arch/amd64/context2.S:188: Error: missing ')'",
          "createdAt": "2020-04-01T23:17:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-01T23:17:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzUzNTgyMg=="
        },
        {
          "author": "guesshe",
          "body": "@am11 OK. So I solved my issue by using clang3.9 as assembler. But now I am facing another issue when trying to run a helloworld.dll application. \r\nASSERT [EXCEPT ] at /home/rihe/Github/runtime/src/coreclr/src/pal/src/exception/signal.cpp.971: handle_signal: sigaction() call failed with error code 48 (Not supported)\r\nI would assume this has something to do with QNX's implementation of sigaction() call? ",
          "createdAt": "2020-04-01T23:55:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-01T23:55:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzU0NjAxOA=="
        },
        {
          "author": "am11",
          "body": "> gcc 5.4.0\r\n\r\nMaybe try compiling with `CXXFLAGS=-Wa,--divide`\r\ne.g. `CXXFLAGS=-Wa,--divide ./src/coreclr/build-runtime.sh`\r\n\r\nAt some point we achieved the support from gcc 4.9 to 9, however, CI is only testing gcc 7. Need some cycles to fix build on older GCC.\r\n\r\n> sigaction() call failed with error code 48 (Not supported)\r\n\r\nDoes it work with this patch:\r\n\r\n```diff\r\ndiff --git a/src/coreclr/src/pal/src/exception/signal.cpp b/src/coreclr/src/pal/src/exception/signal.cpp\r\nindex d6d8256610e..5d80be4ffe6 100644\r\n--- a/src/coreclr/src/pal/src/exception/signal.cpp\r\n+++ b/src/coreclr/src/pal/src/exception/signal.cpp\r\n@@ -960,9 +960,9 @@ Parameters :\r\n --*/\r\n void restore_signal(int signal_id, struct sigaction *previousAction)\r\n {\r\n-    if (-1 == sigaction(signal_id, previousAction, NULL))\r\n+    if (signal(signal_id, [](int signum) { (void)signum; /* ignored */ }) == SIG_ERR)\r\n     {\r\n-        ASSERT(\"restore_signal: sigaction() call failed with error code %d (%s)\\n\",\r\n+        ASSERT(\"restore_signal: signal() call failed with error code %d (%s)\\n\",\r\n             errno, strerror(errno));\r\n     }\r\n }\r\n```\r\n\r\n(we can make it nicer with cmake introspection etc. later)",
          "createdAt": "2020-04-02T04:15:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-02T04:32:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzYxMDk2Ng=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks for your reply! With this change applied, the program stuck at this method. Any idea if I can enable debug logging in libcoreclr.so? ",
          "createdAt": "2020-04-02T13:58:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-02T13:58:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzg2MzM3Mg=="
        },
        {
          "author": "am11",
          "body": "@guesshe, for native runtime code, you can try using lldb by doing something like:\r\n\r\n```sh\r\n#!/usr/bin/env bash\r\n\r\n$(command -v lldb) /path/to/yourapp\r\n\r\n# inside lldb REPL, catch all C++ exceptions\r\n(lldb) break set -E C++\r\n(lldb) r\r\n(lldb) bt\r\n```\r\n\r\nif you want to include stacktrace from managed side as well, then you would first need to build SOS plugin (`libsosplugin.so`) for LLDB from https://github.com/dotnet/diagnostics#building-the-repository, then:\r\n\r\n```sh\r\n#!/usr/bin/env bash\r\n\r\n$(command -v lldb) /path/to/yourapp\r\n\r\n# now inside the lldb REPL\r\nbreak set -E C++\r\nplugin load /path/to/libsosplugin.so\r\nrun\r\n# will break on first C++ exception\r\ndumpstack\r\n```\r\n\r\nfor more info on diagnostics, there is much more content in the dotnet/diagnostics repo. Note, currently there is no gdb SOS plugin, only lldb is supported (https://github.com/dotnet/diagnostics/issues/272).",
          "createdAt": "2020-04-02T14:53:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-02T14:53:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwNzg5NTE0Nw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! It turned out SA_RESTART is not supported in QNX. I removed this flag and it moved a bit further. Now I am having following crash. I guess it has something to do with runtime host but I am not sure, any ideas? \r\nProcess 1585176 (dotnet) terminated SIGSEGV code=2 fltno=11 ip=0000000100fb14dd(/tmp/publish/publish/libcoreclr.so@GetCLRRuntimeHost+0x000000000013f099) mapaddr=00000000002354dd. ref=0000000101b1fb40\r\nMemory fault (core dumped)",
          "createdAt": "2020-04-02T19:44:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-02T19:44:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODA2NjM1OA=="
        },
        {
          "author": "am11",
          "body": "> So I solved my issue by using clang3.9 as assembler.\r\n\r\nI think mixing clang and gcc toolchains is problematic. I'd try to fix the broken toolchain first and use either clang <ins>*or*</ins> gcc for the entire build.",
          "createdAt": "2020-04-03T02:24:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-03T17:37:36Z",
                "user": "wfurt"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBAFFNQ=="
          },
          "updatedAt": "2020-04-03T02:24:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODE5MzkwOQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 oh. Thanks! even for assembler? I will go back and fix the assembler issue. Any idea about the runtime crash? I thought it has something to do with build in host list. ",
          "createdAt": "2020-04-03T13:38:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-03T13:38:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODQzODQzNg=="
        },
        {
          "author": "am11",
          "body": "@guesshe, the reason why i mentioned using same toolchain after looking at the segmentation fault is that we have previously hit by SigSegV and it is very hard to troubleshoot and understand the root cause in such case. So it is best if the entire product is build with same toolchain, to rule out such unrelated/external culprits.\r\n\r\n> Any idea about the runtime crash? I thought it has something to do with build in host list.\r\n\r\nI did not get a chance to look deeper, but if you hit it after rebuilding the runtime with gcc, e.g.\r\n\r\n```sh\r\n# workaround for gcc5\r\nCFLAGS=-Wa,--divide CXXFLAGS=-Wa,--divide ./build.sh -configuration debug\r\n```\r\n\r\nor build entire product with clang or gcc (v7 or above) if possible, then could you attach debugger and collect some data?",
          "createdAt": "2020-04-03T14:36:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-03T14:36:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODQ2ODcwNQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Any idea why the build generated empty files with names like this ???@??@8?@????@@@??????????????????? ",
          "createdAt": "2020-04-03T19:54:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-03T19:54:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODYyOTE4OA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 So I fixed the assembler issue by setting CMAKE_ASM_FLAGS to -Wa,--divide but I am still having this crash Process 1699864 (dotnet) terminated SIGSEGV code=2 fltno=11 ip=0000000100fb14dd(/tmp/publish/publish/libcoreclr.so@GetCLRRuntimeHost+0x000000000013f099) mapaddr=00000000002354dd. ref=0000000101b28b40\r\nI am trying to find qnx supported lldb. ",
          "createdAt": "2020-04-03T20:06:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-03T20:06:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODYzNDM2Nw=="
        },
        {
          "author": "wfurt",
          "body": "> @am11 Any idea why the build generated empty files with names like this ???@??@8?@????@@@???????????????????\r\n\r\nUnicode? is LANG/LC_ALL supported on QNX? What is the file location? ",
          "createdAt": "2020-04-03T21:02:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-03T21:02:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwODY1NjY0OA=="
        },
        {
          "author": "am11",
          "body": "> fltno=11\r\n\r\n@guesshe, I searched just this string (verbatim) on Google, and surprisingly found majority of QNX related hits on the first result page. [This](https://sendreceivereply.wordpress.com/2007/04/11/hello-world-sigsegv-remix/) article describes how they solved such SIGSEGV with fltno=11 issue in a simple app on QNX using `dladdr(3)` . Perhaps you would need to adjust some linker flags to get the paging policy right or maybe some code changes, I am not sure. However, one thing I would try is comment out this line https://github.com/dotnet/runtime/blob/363b7add1906547eeba681b3f3ec3f686a603dee/eng/native/configureplatform.cmake#L343 and rebuild in order to verify whether or not it is due to `-fPIC`.",
          "createdAt": "2020-04-04T17:09:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-04T17:11:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwOTA1OTUwOQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 Thanks! I will try to figure it out. ",
          "createdAt": "2020-04-06T13:59:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-06T13:59:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwOTgxMjkzOA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt This shows up in my host linux. Not on target. I thought these could be build output files but they are all empty. ",
          "createdAt": "2020-04-06T14:01:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-06T14:01:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYwOTgxMzg4MA=="
        },
        {
          "author": "am11",
          "body": "@guesshe, I remember when NetBSD folks ported coreclr:\r\n\r\n* the first thing that was done was to pass all platform abstraction layer (PAL) tests, which excercise the CRT functions used by the runtime: https://github.com/dotnet/runtime/blob/59be94b69845ecfbd5a694483c2a4853e99cc64b/docs/workflow/testing/coreclr/unix-test-instructions.md#pal-tests\r\n\r\n* and then run a simple hello world app using corerun (a basic host that complies with the runtime): https://github.com/dotnet/runtime/blob/7d67d17a9f49ad5f365467fcd3bf0d25f2b9349a/docs/workflow/building/coreclr/linux-instructions.md\r\n\r\n* iff we get this far, then run the coreclr tests, see `src/coreclr/build-test.sh`",
          "createdAt": "2020-04-06T21:10:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-08T14:28:57Z",
                "user": "guesshe"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBAhRVw=="
          },
          "updatedAt": "2020-04-06T21:10:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDAzODUyNA=="
        },
        {
          "author": "janvorli",
          "body": "That's the way I would recommend too (and we did it the same way when we were porting .NET Core to Linux 5 years ago)",
          "createdAt": "2020-04-07T09:07:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-08T14:29:04Z",
                "user": "guesshe"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBAhRZg=="
          },
          "updatedAt": "2020-04-07T09:07:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDI3MDA5OQ=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @janvorli Thanks! I will follow this path. ",
          "createdAt": "2020-04-07T13:41:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-07T13:41:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDM5MzkwNw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 continuing my debugging journey and getting the test suite running in QNX. I suspect my issue has something to do with how this function is called GetCLRRuntimeHost but I don't know how this related to cruntime implementation. ",
          "createdAt": "2020-04-07T19:28:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-07T19:28:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDU3Njk3MA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @janvorli So I managed to build and run the pal_test suite on my QNX VM. I got this result but I doubt it is valid as I saw some process crash during the text execution. Does that produce a PASS status? I had to modify the bash script to be able to execute in ksh environment but that was not a big change. Next I will focus on fixing up the crashes I saw during the test execution. Most of them happened at strlen and Unable to set thread priority to 0 (error 22)\r\n\r\nFinished running PAL tests:\r\nPAL Test Results:\r\n  Passed: 726\r\n  Failed: 0\r\n",
          "createdAt": "2020-04-08T01:30:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T01:30:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDcwMTYyNw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @jkotas Do I need this managed library? System.Private.CoreLib.dll for coreclr to work? ",
          "createdAt": "2020-04-08T01:45:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T01:45:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDcwNTAxNg=="
        },
        {
          "author": "janvorli",
          "body": "You don't need it for PAL tests, but you need it for the next steps. This is the core managed library containing all the basic functionality and glue between the managed and native parts of the runtime.\r\n\r\nAs for some PAL tests failing and the results still showing that no tests have failed, this is strange and seems like we may have a bug not recognizing crashes as failures.",
          "createdAt": "2020-04-08T09:11:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-08T09:37:45Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-04-08T14:28:34Z",
                "user": "guesshe"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBAhRFg=="
          },
          "updatedAt": "2020-04-08T09:11:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDg0NTgxMw=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli @am11 @jkotas Here are two types of crashes I saw during testing. One related to strelen function and the other is thread priority. \r\nProcess 114688025 (paltest_fprintf_test2) terminated SIGSEGV code=1 fltno=11 ip=0000000100078e10(/usr/lib/ldqnx-64.so.2@strlen+0x0000000000000000) mapaddr=0000000000078e10. ref=0000000000000000\r\nMemory fault (core dumped) \r\n\r\n.{1-807d485} ASSERT [THREAD ] at /home/<user_name>/GitRepo/dotnet_runtime_nto/src/coreclr/src/pal/src/thread/thread.cpp.1263: Unable to set thread priority to 0 (error 22)\r\nProcess 166789145 (paltest_criticalsectionfunctions_test2) terminated SIGTRAP code=1 fltno=3 ip=00000000080b9f57(/mnt/river/tmp/pal_tests/src/pal/tests/palsuite/threading/CriticalSectionFunctions/test2/paltest_criticalsectionfunctions_test2@DebugBreak+0x000000000005c031) mapaddr=0000000000071f57.\r\n\r\nHere is the crash when I tried to launch my helloworld.dll using corerun. \r\nProcess 172077080 (corerun) terminated SIGSEGV code=2 fltno=11 ip=00000001010834cb(/mnt/river/tmp/libcoreclr.so@GetCLRRuntimeHost+0x000000000013f087) mapaddr=00000000002354cb. ref=0000000101bfab40\r\nMemory fault (core dumped) \r\nI didn't quite understand how the function GetCLRRuntimeHost works. I did have to comment out one source file named ./src/pal/src/thread/context.cpp due to register access difference between QNX and Linux, this might be the issue? I plan to revisit later as it doesn't seem to be a easy fix. \r\n",
          "createdAt": "2020-04-08T14:26:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T14:27:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDk5MTQ5Mg=="
        },
        {
          "author": "janvorli",
          "body": "Making the context.cpp stuff work is essential, primarily for hardware exception handling and for GC thread suspension. \r\n\r\nAs for the failing PAL tests, you can run the specific tests under a debugger and see why it fails or crashes. Each PAL test is a standalone executable that can be run.",
          "createdAt": "2020-04-08T14:39:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T14:39:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMDk5NzkyMQ=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli Thanks! Here is a question from our lead developer while I am working on get context.cpp file compiled. I have to change register access for QNX target. \r\nHis question is \"Is it possible to compile without hardware floating point support? Might help there if there is a compile option for software floating point instead of hw floating point -- there would be no need to save and restore FP registers\"",
          "createdAt": "2020-04-08T16:43:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T16:43:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTA2NjM5Mw=="
        },
        {
          "author": "janvorli",
          "body": "> Is it possible to compile without hardware floating point support?\r\n\r\nUnfortunately not. The JIT uses xmm registers a lot.",
          "createdAt": "2020-04-08T17:05:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T17:05:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTA3NzY5OQ=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli Thanks!\r\n",
          "createdAt": "2020-04-08T19:08:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T19:08:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTEzODIyNA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @janvorli I fixed the register access issue and enabled context.cpp in my build. However, I am facing a new linker issue. But I do have -fPIC in my compilation flag and in the project I have CMAKE_POSITION_INDEPENDENT_CODE set to TRUE. Any suggestions here? \r\n/x86_64-pc-nto-qnx7.0.0-ld: ../../../pal/src/libcoreclrpal.a(context2.S.o): warning: relocation against `CONTEXT_CaptureContext' in readonly section `.text'.\r\n/x86_64/usr/bin/x86_64-pc-nto-qnx7.0.0-ld: ../../../pal/src/libcoreclrpal.a(context2.S.o): relocation R_X86_64_PC32 against symbol `CONTEXT_CaptureContext' can not be used when making a shared object; recompile with -fPIC\r\n/home/rihe/qnx700/host/linux/x86_64/usr/bin/x86_64-pc-nto-qnx7.0.0-ld: final link failed: Bad value\r\ncc: /home/rihe/qnx700/host/linux/x86_64/usr/bin/x86_64-pc-nto-qnx7.0.0-ld error 1",
          "createdAt": "2020-04-08T20:45:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T20:45:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTE4NTExNg=="
        },
        {
          "author": "am11",
          "body": "@guesshe, does adding this line https://github.com/am11/runtime/blob/208143dbb181782119e74441a536c9a8efc29808/eng/native/configureplatform.cmake#L290 at the same place and recompiling (after `rm -rf artifacts`) help? This is currently what I am doing for Solaris bringup (still very much work in progress), and it fixed a similar relocation error for me.",
          "createdAt": "2020-04-08T21:00:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T21:00:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTE5MTg5Ng=="
        },
        {
          "author": "am11",
          "body": "Also if you could show the diff in `context2.S`, we will understand the error better. Maybe suffixing `@gotpcrel` will fix the issue.",
          "createdAt": "2020-04-08T21:32:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:01:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIwNjA0OA=="
        },
        {
          "author": "guesshe",
          "body": "@am11 I tried this solution and the result is the same. I didn't make any changes to context2.S file under amd64. What do you mean by suffixing @gotpcrel ? ",
          "createdAt": "2020-04-08T21:58:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T21:58:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIxNTk4NQ=="
        },
        {
          "author": "am11",
          "body": "> I did have to comment out one source file named ./src/pal/src/thread/context.cpp due to register access difference between QNX and Linux\r\n> ...\r\n> I fixed the register access issue and enabled context.cpp\r\n> ...\r\n> /x86_64/usr/bin/x86_64-pc-nto-qnx7.0.0-ld: ../../../pal/src/libcoreclrpal.a(context2.S.o): relocation R_X86_64_PC32 against symbol `CONTEXT_CaptureContext' \r\n\r\n@guesshe, i mean `git diff src/coreclr/src/pal/src/thread/context.cpp` how you fixed context issue? Also are you building master or release/3x branch?",
          "createdAt": "2020-04-08T22:05:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:05:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIxODgxMw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @janvorli It seems supermi is not as critical as pal. Can I disable these sub-projects to test functionalities of pal? \r\nsuperpmi-shim-collector\r\nsuperpmi-shim-counter\r\nsuperpmi-shim-simple",
          "createdAt": "2020-04-08T22:15:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:15:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIyMjM5Nw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 The way I did was adding QNX specific register access MARCOs. Like following, it is very similar to FreeBSD. I have to include QNX specific header files but not sure if I can share the header file as it is not under any opensource license. \r\n+#elif defined(__QNX__)\r\n+    // For QNX\r\n+#define MCREG_Rbp(mc)      ((mc).cpu.rbp)\r\n+#define MCREG_Rip(mc)      ((mc).cpu.rip)\r\n+#define MCREG_Rsp(mc)      ((mc).cpu.rsp)\r\n+#define MCREG_Rsi(mc)       ((mc).cpu.rsi)\r\n+#define MCREG_Rdi(mc)      ((mc).cpu.rdi)\r\n+#define MCREG_Rbx(mc)      ((mc).cpu.rbx)\r\n+#define MCREG_Rdx(mc)      ((mc).cpu.rdx)\r\n+#define MCREG_Rcx(mc)      ((mc).cpu.rcx)\r\n+#define MCREG_Rax(mc)      ((mc).cpu.rax)\r\n+#define MCREG_R8(mc)       ((mc).cpu.r8)\r\n+#define MCREG_R9(mc)       ((mc).cpu.r9)\r\n+#define MCREG_R10(mc)      ((mc).cpu.r10)\r\n+#define MCREG_R11(mc)      ((mc).cpu.r11)\r\n+#define MCREG_R12(mc)      ((mc).cpu.r12)\r\n+#define MCREG_R13(mc)      ((mc).cpu.r13)\r\n+#define MCREG_R14(mc)      ((mc).cpu.r14)\r\n+#define MCREG_R15(mc)      ((mc).cpu.r15)\r\n+#define MCREG_EFlags(mc)    ((mc).cpu.rflags)\r\n+#define MCREG_SegCs(mc)     ((mc).cpu.cs)\r\n+\r\n+#define FPSTATE(uc)             ((uc)->uc_mcontext.fpu.fxsave_area)\r\n+#define FPREG_ControlWord(uc)   (FPSTATE(uc).fpu_control_word)\r\n+#define FPREG_StatusWord(uc)    (FPSTATE(uc).fpu_status_word)\r\n+#define FPREG_TagWord(uc)       (FPSTATE(uc).fpu_tag_word)\r\n+#define FPREG_MxCsr(uc)         (FPSTATE(uc).mxcsr)\r\n+#define FPREG_MxCsr_Mask(uc)    (FPSTATE(uc).mxcsr_mask)\r\n+#define FPREG_ErrorOffset(uc)   *(DWORD*) &(FPSTATE(uc).fpu_rip)\r\n+#define FPREG_ErrorSelector(uc) *((WORD*) &(FPSTATE(uc).fpu_rip) + 2)\r\n+#define FPREG_DataOffset(uc)    *(DWORD*) &(FPSTATE(uc).fpu_rdp)\r\n+#define FPREG_DataSelector(uc)  *((WORD*) &(FPSTATE(uc).fpu_rdp) + 2)\r\n+\r\n+#define FPREG_Xmm(uc, index)    *(M128A*) &(FPSTATE(uc).xmm_regs[index])\r\n+#define FPREG_St(uc, index)     *(M128A*) &(FPSTATE(uc).st_regs[index])\r\n",
          "createdAt": "2020-04-08T22:30:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:30:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIyNzgyOQ=="
        },
        {
          "author": "guesshe",
          "body": "OK. Now I disabled superpmi sub-project and it builds. But I got a new crash. \r\nProcess 173518872 (corerun) terminated SIGSEGV code=2 fltno=11 ip=000000010108352d(/mnt/river/tmp/libcoreclr.so@registerTMCloneTable+0x00000000000118b2) mapaddr=000000000023552d. ref=0000000101bfcb40\r\nMemory fault (core dumped)\r\nAny suggestions on how to debug this? ",
          "createdAt": "2020-04-08T22:44:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:44:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIzMjIxMA=="
        },
        {
          "author": "am11",
          "body": "https://github.com/dotnet/runtime/issues/33374#issuecomment-609059509 did you try something to fix `fltno=11`?",
          "createdAt": "2020-04-08T22:49:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-08T22:49:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTIzMzUxMw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 I didn't try anything specific. I bring back the context.cpp file and added qnx as targetOS. Now it complains about registerTMCloneTable, but I can't find this function in coreclr. ",
          "createdAt": "2020-04-09T01:33:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T01:33:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTI3ODQ4Mg=="
        },
        {
          "author": "janvorli",
          "body": "@guesshe do all PAL tests pass now? If they don't, there is not much sense in trying to run corerun. Btw, maybe you do that, but until you get everything running, I would recommend running it under gdb (or lldb if you have one on QNX). It is very unlikely to figure out problems just by executing the code and reasoning based on the crash code. You'll need to view the stack trace, local variables, etc. Maybe you do that already, but from your questions above, it seemed you are just trying to run it without debugger.",
          "createdAt": "2020-04-09T08:11:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T08:11:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTM5NDUwMg=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli Thanks! The only crash I saw is strlen and thread priority. I think strlen is fine but thread priority might be an issue. I am setting up debugger at the same time. I am trying to get the dump and reload on host gdb tool. Had a version conflict issue yesterday. Will try to resolve it today. I got some help from our lead developer regarding this crash. he said the qcc compiler supports transactional memory in its runtime, but all the symbols are namespaced with the prefix _ITM_ (as in\r\n_ITM_registerTMCloneTable).  How does this symbol defined in the binary?",
          "createdAt": "2020-04-09T13:30:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T13:30:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTUyOTE0MQ=="
        },
        {
          "author": "janvorli",
          "body": "We don't call such a function directly from our code and when I've googled for it, it seems it comes from usage of register_tm_clones function that we also don't use. So I guess it comes from the standard C library or something like that.",
          "createdAt": "2020-04-09T13:37:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T13:37:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTUzMjcwMQ=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli Thanks! I got some feedback from our kernel developer. Hopefully it will help with understanding the issue. \r\nQNX does not use transactional memory so it has nothing to do with libc.\r\n\r\nThere is a weak function _ITM_registerTMCloneTable() that gets called by\r\nregister_tm_clones() in libgcc (the compiler's supplied runtime\r\nlibrary). Because it's a weak symbol, it's OK to not resolve it and the\r\nlibrary will just skip the call to it.  \r\n\r\nIs it possible libcoreclr is being built with some option that turns\r\nunresolved weak symbols into an error?",
          "createdAt": "2020-04-09T14:47:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T14:47:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTU2ODYxOQ=="
        },
        {
          "author": "janvorli",
          "body": "> Is it possible libcoreclr is being built with some option that turns\r\n> unresolved weak symbols into an error?\r\n\r\nNo, there is nothing like that. However, looking again at the error\r\n`ip=000000010108352d(/mnt/river/tmp/libcoreclr.so@registerTMCloneTable+0x00000000000118b2`, I've just realized it has probably nothing to do with that symbol. The offset (0x00000000000118b2) is too far away from that symbol to be in the same function. I think that what happens is that it fails at some place where there are no symbols available and it ends up reporting the closest symbol it finds, which by a mere chance ends up being the `registerTMCloneTable`.",
          "createdAt": "2020-04-09T16:19:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T16:19:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTYxODE0Mw=="
        },
        {
          "author": "guesshe",
          "body": "Thanks! I will first fix the thread priority issue and then put this bin in\ngdb and debug. Do you think the strlen is also related? I am not sure if i\ncan fix the strlen, it might be some limited supoort issue.\n\n\nRegards\n\nRiver He\n\nOn Thu., Apr. 9, 2020, 12:20 Jan Vorlicek, <notifications@github.com> wrote:\n\n> Is it possible libcoreclr is being built with some option that turns\n> unresolved weak symbols into an error?\n>\n> No, there is nothing like that. However, looking again at the error\n> ip=000000010108352d(/mnt/river/tmp/libcoreclr.so@registerTMCloneTable\n> +0x00000000000118b2, I've just realized it has probably nothing to do\n> with that symbol. The offset (0x00000000000118b2) is too far away from that\n> symbol to be in the same function. I think that what happens is that it\n> fails at some place where there are no symbols available and it ends up\n> reporting the closest symbol it finds, which by a mere chance ends up being\n> the registerTMCloneTable.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/runtime/issues/33374#issuecomment-611618143>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKCJEHQ2OCOXQVEPGZ7LWP3RLXYTHANCNFSM4LEKE3NA>\n> .\n>\n",
          "createdAt": "2020-04-09T16:48:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T16:48:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTYzMjEyNw=="
        },
        {
          "author": "janvorli",
          "body": "I don't see why something as simple as strlen should be problematic, so it seems we end up getting wrong character pointer (maybe a NULL) somewhere and passing it to the strlen later. So the strlen failing is just an indicator of a problem somewhere else.",
          "createdAt": "2020-04-09T17:13:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-09T17:13:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMTY0NDU4OA=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli I fixed the thread priority issue. Now, apart from the strlen issues I am having following exceptions. However, these exceptions are not considered failed tests, I still get 726 test cases passed and 0 failure. \r\n...'paltest_namedmutex_test1' failed at line 397. Expression: m != nullptr\r\n'paltest_namedmutex_test1' failed at line 463. Expression: m2 != nullptr\r\n'paltest_namedmutex_test1' failed at line 556. Expression: m != nullptr\r\n'paltest_namedmutex_test1' failed at line 670. Expression: m != nullptr\r\n'paltest_namedmutex_test1' failed at line 287. Expression: parentEvents[i] != nullptr\r\n'paltest_namedmutex_test1' failed at line 695. Expression: InitializeParent(testName, parentEvents, childEvents)\r\n'paltest_namedmutex_test1' failed at line 930. Expression: AbandonTests_Parent()\r\n'paltest_namedmutex_test1' failed at line 273. Expression: WaitForSingleObject(childRunningEvent, FailTimeoutMilliseconds) == WAIT_OBJECT_0\r\n'paltest_namedmutex_test1' failed at line 320. Expression: AcquireChildRunningEvent(testName, childRunningEvent)\r\n'paltest_namedmutex_test1' failed at line 759. Expression: InitializeChild(testName, childRunningEvent, parentEvents, childEvents)\r\n",
          "createdAt": "2020-04-10T19:55:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-10T19:55:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMjE5MjEwNw=="
        },
        {
          "author": "guesshe",
          "body": "@am11 @janvorli Is feature no stress_log supported? If I set -DFEATURE_NO_STRESSLOG, will this disable the feature? ",
          "createdAt": "2020-04-13T21:07:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-13T21:07:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMzA5ODU5Mg=="
        },
        {
          "author": "janvorli",
          "body": "@guesshe you can set that, but I am not sure why would you want to do that. ",
          "createdAt": "2020-04-14T10:24:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-14T10:24:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMzM1NjEyNw=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli @wfurt @jkotas With the help of our kernel developers, we managed to fix this crash and another stack issue. Now it proceeded to a point that looks very promising. \r\n# ./corerun -c /lib hello_world_dotnet_core_qnx_netcore5_0.dll \r\ncoreclr_initialize failed - status: 0x80004005\r\nBy reading porting notes from @wfurt, I downloaded netcore 5 sdk 5.0 using snap and published to netcoreapp5.0 targetframework. However, I still got the same issue. \r\nThe commit I checkout from master is 62112b0abb36654775552842231dc48a0d032655. \r\nAny suggestions? Is this because I am on master not on the preview branch?\r\n",
          "createdAt": "2020-04-24T16:00:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T16:00:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTA5OTY5OQ=="
        },
        {
          "author": "wfurt",
          "body": "That maps to E_FAIL and there are many places where this can fail. You can try to set COREHOST_TRACE=1 and check if that provides any hints. (I assume you disabled r2r, right?)\r\nI don't think the branch matters. ",
          "createdAt": "2020-04-24T18:58:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T21:09:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTE4ODE0MA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt Thanks! What is r2rm? Does this failure mean the cruntime is passed?",
          "createdAt": "2020-04-24T21:08:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T21:08:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTIzOTUzNg=="
        },
        {
          "author": "wfurt",
          "body": "There was typo. R2R -> Ready To Run. With crossgen, we may put in native bits so make startup faster. Because of that, you many not be able to simply copy assemblies targeted for other platform.  It should work for the hello but I'm wondering how did you get BCL assemblies.\r\nBack then, I used COMPlus_ZapDisable=1 and COMPlus_ReadyToRun=0 when trying to use Linux assemblies on FreeBSD. @janvorli or @jkotas may know better if that is still applicable.  ",
          "createdAt": "2020-04-24T21:15:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T21:15:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI0MTc4NA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt Is that an environment variable? I don't recall I set that. For BCL assemblies, I plan to upload the built tools and source code to target and build from there directly instead of cross-compiling. ",
          "createdAt": "2020-04-24T21:20:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T21:20:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI0MzY2NA=="
        },
        {
          "author": "wfurt",
          "body": "yes, environment. I'm not quite sure what you mean by the previous post. In order to build assemblies you need to have working dotnet cli and c# compiler is written (mostly) in c#. \r\nforerun cannot function without System.Private.CoreLib.dll (and perhaps others), so the question is how did you get one?",
          "createdAt": "2020-04-24T21:26:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T21:26:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI0NTg2MQ=="
        },
        {
          "author": "guesshe",
          "body": "I am not sure if I understand it correctly. I did built\nsrc/installer/corehost/ project which contains dotnet executable binary and\nI can run it to load hello_world.dll (which failed at the same point as\nusing corerun). Do you mind if we have a quick chat offline on this topic?\nVia zoom or something like that?\n\n\nRegards\n\nRiver He\n\nOn Fri., Apr. 24, 2020, 17:26 Tomas Weinfurt, <notifications@github.com>\nwrote:\n\n> yes, environment. I'm not quite sure what you mean by the previous post.\n> In order to build assemblies you need to have working dotnet cli and c#\n> compiler is written (mostly) in c#.\n> forerun cannot function without System.Private.CoreLib.dll (and perhaps\n> others), so the question is how did you get one?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/runtime/issues/33374#issuecomment-619245861>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKCJEHRW4GDX67KNMBV37SDROH7ZPANCNFSM4LEKE3NA>\n> .\n>\n",
          "createdAt": "2020-04-24T23:30:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T23:30:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI3OTcyMw=="
        },
        {
          "author": "wfurt",
          "body": "sure, ping me with details:  tweinfurt at yahoo.\r\nI don't think your test is valid. You can try the steps on Linux (or other supported platform) ",
          "createdAt": "2020-04-24T23:49:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T23:49:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI4MzU4OA=="
        },
        {
          "author": "guesshe",
          "body": "@wfurt @janvorli We are trying to debug this 0x80004005 error and following is the trace output. It looks like it failed to load System.Private.CoreLib.dll. The trace is trimmed and formatted to a way that is easier to read. Is System.Private.CoreLib.dll a mandatory to have in order to run a empty main function? My hello_world app only have one line \" static void Main(string[] args) {}\".\r\nStarting\r\ncorhost.cpp - CorRuntimeHostBase::Start\r\nceemain.cpp - EnsureEEStarted - g_fEEShutDown==0\r\nceemain.cpp - EEStartup - InitializeClrNotifications - status==0000000000\r\nceemain.cpp - EEStartup - InitializeJITNotificationTable - status==0000000000\r\nceemain.cpp - EEStartup - Initialize - status==0000000000\r\nceemain.cpp - EEStartupHelper - start\r\nceemain.cpp - EEConfig::Setup - start\r\nceemain.cpp - EEConfig::Setup - done\r\nceemain.cpp - InitializeStratupFlags - done                                                                                                                           \r\nceemain.cpp - PAL_SetShutdownCallback - done\r\nceemain.cpp - InitializeLogging - done\r\nceemain.cpp - EnsureRtlFunctions - done\r\nceemain.cpp - g_pConfig->sync - done\r\nceemain.cpp - InitializeSpinConstants - done\r\nceemain.cpp - InitializeStubManagers - done\r\nceemain.cpp - Stubs - done\r\nceemain.cpp - Inits - done\r\nrcthread.cpp - DebuggerRCTthread started\r\nm_thread!=NULL, hr==0000000000\r\nrcthread.cpp - Thread created: hr==0000000000\r\nrcthread.cpp - Done: hr==0000000000\r\nceemain.cpp - InitializeDebugger - done\r\nceemain.cpp - Profiling service - hr==0000000000 - done\r\nceemain.cpp - InitPreStubManager - done\r\nceemain.cpp - g_pGCHeap->Initialize - hr==0000000000 - done\r\nceemain.cpp - SystemDomain debugging - done\r\nceemain.cpp - MethodDesc::Init - start\r\nceemain.cpp - MethodDesc::Init - done\r\nceemain.cpp - SD Init - start\r\nappdomain.cpp - Init - start\r\nappdomain.cpp - LOG - done\r\nappdomain.cpp - ZapDisable - done\r\nappdomain.cpp - GetInternalSystemDirectory - hr==0x8007007a - done\r\nappdomain.cpp - GetInternalSystemDirectory(buffer) - hr==0x8007007a - done\r\nappdomain.cpp - LoadBaseSystemClasses - start\r\nappdomain.cpp - LoadBaseSystemClasses - start \r\nappdomain.cpp - ETWOnStartup - done\r\nappdomain.cpp - OpenSystem - start\r\npefile.cpp - OpenSystem - start\r\npefile.cpp - DoOpenSystem - start\r\npefile.cpp - ETWOnStartup - start\r\npefile.cpp - ETWOnStartup - done\r\npefile.cpp - BindToSystem - start\r\nappdomain.hpp - SystemDirectory is /\r\ncoreclrbindercommon.cpp - AssemblyBinder::BindToSystem - start\r\nassemblybinder.cpp - GetAssembly - sCoreLib==/home/qnxuser/ - start\r\nassemblybinder.cpp - AssemblyBinder::GetAssembly - start\r\nAssembly path is /\r\ncoreassemblyspec.cpp - BinderAcquirePEimage - start\r\ncoreassemblyspec.cpp - OpenImage - start\r\ncoreassemblyspec.cpp - TryOpenFile - start\r\npeimage.cpp - TryOpenFile - m_path==/home/qnxuser/System.Private.CoreLib.dll\r\ncoreassemblyspec.cpp - TryOpenFile - done - hr==0x80070002\r\nAssemblyBinder::BindToSystem - done - hr==0x80070002\r\nceemain.cpp - CATCH - done\r\nceemain.cpp - if !FAILED - hr==0000000000 - done\r\nceemain.cpp - EEStartup - EEStartupHelper - status==0x80004005\r\nceemain.cpp:327 - g_EEStartupStatus==0x80004005\r\ncorhost.cpp - Done - hr==0x80004005\r\nStart: 0x80004005\r\ncoreclr_initialize failed - status: 0x80004005",
          "createdAt": "2020-04-29T13:54:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T13:54:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTIyNDQ0Mw=="
        },
        {
          "author": "janvorli",
          "body": "The error 0x80070002 means \"File not found\". Is it possible that there is some access problem to the /home/qnxuser/System.Private.CoreLib.dll?\r\n",
          "createdAt": "2020-04-29T14:32:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T14:32:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTI1MDE5OQ=="
        },
        {
          "author": "janvorli",
          "body": "Btw, error codes starting with 0x8007 represent windows error codes. The lowest 16 bits of the code contain a windows error code. These windows error codes are described here: https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-",
          "createdAt": "2020-04-29T14:35:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T14:35:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTI1MjIzMg=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli I don't have this managed library built. I only have libcoreclr.so. Based on previous posts in this thread, I had a feeling I don't need managed libraries to test basic PAL functionalities. Following is quoted from previous posts. \r\n\r\n\"the first thing that was done was to pass all platform abstraction layer (PAL) tests, which excercise the CRT functions used by the runtime: https://github.com/dotnet/runtime/blob/59be94b69845ecfbd5a694483c2a4853e99cc64b/docs/workflow/testing/coreclr/unix-test-instructions.md#pal-tests\r\n\r\nand then run a simple hello world app using corerun (a basic host that complies with the runtime): https://github.com/dotnet/runtime/blob/7d67d17a9f49ad5f365467fcd3bf0d25f2b9349a/docs/workflow/building/coreclr/linux-instructions.md\r\n\r\niff we get this far, then run the coreclr tests, see src/coreclr/build-test.sh\"\r\n\r\nI tried a Linux version of corerun and libcoreclr.so, it doesn't give me an error looking for System.Private.CoreLib.dll. Did I misunderstand something in the instructions above? ",
          "createdAt": "2020-04-29T14:57:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T14:57:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTI2NjM2Ng=="
        },
        {
          "author": "janvorli",
          "body": "The part that tests the PAL is the pal test suite that you've ran before. That's the only part of the testing that doesn't run managed code.\r\nThe corerun is a tool to run managed applications. So it requires System.Private.CoreLib.dll and other managed assemblies (depending on what your hello world managed app needs).\r\nI assume the Linux version didn't fail because the System.Private.CoreLib.dll is present.\r\n",
          "createdAt": "2020-04-29T15:12:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T15:12:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTI3NTcyOA=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli I don't recall I put the System.Private.CoreLib.dll in the same directory as libcoreclr.so, maybe it also searches for other locations? May I use a Linux-version of System.Private.CoreLib.dll to see if it works? If not, how can I build a QNX-version of System.Private.CoreLib.dll? ",
          "createdAt": "2020-04-29T18:22:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T18:22:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTM4MTk5OQ=="
        },
        {
          "author": "janvorli",
          "body": "Yes, you can use the Linux version, it should just work (provided it is built from exactly the same state of the source tree as the libcoreclr.so that you've built for QNX and it is the same build flavor - you cannot combine Release build of libcoreclr.so with Debug or Checked build of System.Private.CoreLib.dll and vice versa).",
          "createdAt": "2020-04-29T18:42:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T18:42:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTM5MjM2MA=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli Thanks! I will give it a try. The same state you mean it should come out of the same commit?  Or similar? What errors it could give if they are from different commit? I would prefer to actually build it for QNX but it doesn't seem to support cross-compiling. I might have to upload the source code to QNX directly and run the build from there. ",
          "createdAt": "2020-04-29T18:50:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T18:50:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTM5NjU4MA=="
        },
        {
          "author": "janvorli",
          "body": "I mean the same commit. There are shared data structures between libcoreclr.so and System.Private.CoreLib.dll, so any change in the layout of those structures would break things. Trying to use commits close to each other might work, but it is not worth the possible problems investigation.",
          "createdAt": "2020-04-29T18:54:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T18:54:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTM5ODQ0Nw=="
        },
        {
          "author": "wfurt",
          "body": "also debug/release needs to match, right? (at least is did in the past that release System.Private.CoreLib.dll did not work with debug coreclr)",
          "createdAt": "2020-04-29T18:59:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T18:59:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTQwMTE0OA=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli @wfurt Thanks! I will try it out and let you know the result. ",
          "createdAt": "2020-04-29T19:01:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T19:01:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTQwMjQxNA=="
        },
        {
          "author": "janvorli",
          "body": "> also debug/release needs to match, right?\r\n\r\nYes, I've mentioned that in a comment above.",
          "createdAt": "2020-04-29T20:18:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-29T20:18:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMTQ0MDQ5OA=="
        },
        {
          "author": "guesshe",
          "body": "@janvorli It seems we still have issue with Linux-version of System.Private.CoreLib.dll, any idea what does this error mean? The new error is that the PE Image file is not in native machine format. ",
          "createdAt": "2020-04-30T19:54:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-30T19:54:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMjA3NDA4NA=="
        },
        {
          "author": "janvorli",
          "body": "Can you please set the following env variables and try again? This should let the runtime load only the IL code from the System.Private.CoreLib.dll and not the already precompiled binary code that is likely causing the trouble.\r\n```\r\nCOMPlus_ZapDisable=1\r\nCOMPlus_ReadyToRun=0\r\n```\r\n",
          "createdAt": "2020-04-30T19:59:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-30T19:59:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMjA3NjM0OA=="
        },
        {
          "author": "janvorli",
          "body": "@quesshe, it was discovered that the COMPlus_ZapDisable handling was accidentally disabled for some time and fixed four days ago in #35741. I'm not sure what state of the repository you are using, but you'll likely need that fix to be able to load the System.Private.CoreLib.dll built on Linux. You can easily port that change to any state of the repository as it just removes an #ifdef around getting the option related to that env variable.",
          "createdAt": "2020-05-06T08:31:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-06T08:31:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyNDUxMzU1MA=="
        },
        {
          "author": "am11",
          "body": ">  /x86_64/usr/bin/x86_64-pc-nto-qnx7.0.0-ld: ../../../pal/src/libcoreclrpal.a(context2.S.o): relocation R_X86_64_PC32 against symbol `CONTEXT_CaptureContext' can not be used when making a shared object; recompile with -fPIC\r\n\r\nI was also getting this error when compiling coreclr's superpmi project with illumos sysroot on Ubuntu 18.04. I was using gcc v8.4.0 and binutils v2.25.1, both built for illumos target. The fix was to upgrade binutils to v2.33.1, without code modifications in coreclr. It was due to an upstream bug in binutils's assembler (as) or archiver (ar), which was fixed around v2.29-v2.30.",
          "createdAt": "2020-05-30T09:42:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-30T09:42:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzNjMwNjQ0Nw=="
        },
        {
          "author": "karthikshanmugam",
          "body": "@guesshe  Can you please tell me if you get the corehost to work?",
          "createdAt": "2020-10-02T04:17:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-02T04:17:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjUxNjYwNA=="
        }
      ],
      "totalCount": 119,
      "endCursor": "Y3Vyc29yOnYyOpHOJDdoVg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/33374",
    "title": "Port corehost to QNX7"
  },
  {
    "author": "carlossanlop",
    "labels": [
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2020-03-16T20:26:27Z",
    "body": "I'd like to add my alias to this file, for all the areas I own, so I get automatically added as PR reviewer when a file in the area is modified:\r\nhttps://github.com/dotnet/runtime/blob/master/.github/CODEOWNERS\r\n\r\nBut we also have this file to track area ownership:\r\nhttps://github.com/dotnet/runtime/blob/master/docs/area-owners.md\r\n\r\nAnd we also have the dotnet-api-docs CODEOWNERS file:\r\nhttps://github.com/dotnet/dotnet-api-docs/blob/master/.github/CODEOWNERS\r\n\r\nCan we discuss if we should have a mechanism that automatically keeps these files in sync?\r\n\r\ncc @ericstj",
    "number": 33647,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-02-07T18:03:58Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "ericstj",
          "body": "cc @maryamariyan @danmosemsft @karelz @jeffhandley \r\n\r\nI think we need to understand if we use CODEOWNERS at all or if we should have the bot(s) do notifications.\r\n\r\nIf we do use CODEOWNERS it feels pretty challenging to keep it in sync with the area-owners markdown.  It'd be nice to unify the lists.",
          "createdAt": "2020-03-16T22:01:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-16T22:05:52Z",
                "user": "maryamariyan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-03-18T05:40:02Z",
                "user": "AaronRobinsonMSFT"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOA-aeTg=="
          },
          "updatedAt": "2020-03-16T22:01:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDU5OTc3NzQ1MQ=="
        },
        {
          "author": "dotnet-policy-service",
          "body": "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-02-07T17:54:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-07T17:54:47Z",
          "id": "IC_kwDODI9FZc6dklWl"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOnZJVpQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/33647",
    "title": "Keeping CODEOWNERS and area-owners.md in sync"
  },
  {
    "author": "am11",
    "labels": [
      "area-Meta",
      "port",
      "os-SunOS"
    ],
    "createdAt": "2020-04-14T13:19:27Z",
    "body": "Cut from https://github.com/dotnet/runtime/issues/4173.\r\n\r\nGiven below is a high-level list of work items for Solaris x86-64 port:\r\n\r\n- [x] Native configurations (#34756)\r\n- [x] CoreCLR native components (#35173)\r\n  - <del>awaiting next release of libunwind https://github.com/libunwind/libunwind/releases/tag/v1.5-rc1 or higher with changes from https://github.com/libunwind/libunwind/pull/171, for Solaris support.</del>\r\n  - upstream PR was merged, libunwind is updated to 1.5 by @sdmaclea in #36027.\r\n- [ ] PAL tests\r\n  - one test is failing is due to #35362.\r\n  - another one is related to raising thread priority, after lowering it from the same value as a non-root user. this either requires implementation using [`priocntl(2)`](https://illumos.org/man/2/priocntl) directly for SunOS targets, or wait for https://www.illumos.org/issues/4963.\r\n- [x] Libraries native components (#34867)\r\n  - on SmartOS x86_64 with gcc 7x:\r\n    ```sh\r\n    # from runtime repo root\r\n    ./src/libraries/Native/build-native.sh -gcc\r\n    ```\r\n- [x] Mono native components (#37560)\r\n  - Full mono (https://github.com/mono/mono) is already available on Solaris, requires some configurations for netcore mono in this repository.\r\n- [x] Installer native components (#34263)\r\n  - on SmartOS x86_64 with gcc 7x:\r\n    ```sh\r\n    # from runtime repo root\r\n    src/installer/corehost/build.sh -commithash $(git rev-parse HEAD) -gcc \\\r\n        -apphostver 5.0.0-dev -hostver 5.0.0-dev -fxrver 5.0.0-dev -policyver 5.0.0-dev\r\n    ```\r\n\r\n- [ ] MSBuild configurations\r\n- [x] CoreCLR managed components (#36266)\r\n- [ ] Libraries managed components\r\n  - Most of the partial classes can be shared with Linux (e.g. by moving it under Unix names) and modifying msbuild configurations.\r\n- [ ] Installer managed components\r\n- [x] CoreCLR tests (#37824)\r\n- [ ] Libraries tests\r\n- [ ] Mono tests\r\n- [ ] Installer tests\r\n- [ ] Packaging configurations\r\n- [x] RID (#37016)\r\n- [x] Cross compilation on Linux (dotnet/arcade#5584,  dotnet/dotnet-buildtools-prereqs-docker#324, #37753)\r\n  - as done for other operating systems, e.g. FreeBSD: https://github.com/dotnet/arcade/blob/3443768/eng/common/cross/build-rootfs.sh#L243.\r\n  - script gets mirrored at https://github.com/dotnet/runtime/blob/master/eng/common/cross/build-rootfs.sh.\r\n- [x] SDK (dotnet/sdk#12198)\r\n- [ ] CI hook\r\n  - similar to https://github.com/dotnet/dotnet-buildtools-prereqs-docker/pull/277 and https://github.com/dotnet/runtime/pull/34521\r\n  - external (GitHub Actions) CI has set up using the official illumos docker image: https://github.com/am11/runtime/blob/feature/sunos/ci/.github/workflows/main.yml\r\n    - example run: https://github.com/am11/runtime/actions/runs/145127885\r\n    - on tag push, it creates a GitHub release and upload artifacts (files under `Shipping` directory), e..g. https://github.com/am11/runtime/releases/tag/5.0.0-dev.1",
    "number": 34944,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HOORAY",
          "createdAt": "2020-04-21T06:16:32Z",
          "user": "despair86"
        },
        {
          "content": "HEART",
          "createdAt": "2020-05-01T19:43:04Z",
          "user": "sjorge"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-08T10:34:27Z",
          "user": "CoffeeFlux"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-14T07:47:56Z",
          "user": "bytes-and-bits"
        },
        {
          "content": "HEART",
          "createdAt": "2021-08-18T20:29:12Z",
          "user": "cneira"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-08-18T20:29:19Z",
          "user": "cneira"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-21T10:16:49Z",
          "user": "cocowalla"
        },
        {
          "content": "HEART",
          "createdAt": "2021-12-21T10:16:56Z",
          "user": "cocowalla"
        },
        {
          "content": "HEART",
          "createdAt": "2024-06-10T14:07:26Z",
          "user": "gwr"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-07T17:38:05Z",
          "user": "vars-ecco"
        },
        {
          "content": "HEART",
          "createdAt": "2025-04-13T23:06:26Z",
          "user": "arsanov"
        },
        {
          "content": "HEART",
          "createdAt": "2025-08-18T06:02:47Z",
          "user": "RenderMichael"
        },
        {
          "content": "HOORAY",
          "createdAt": "2025-08-18T06:02:47Z",
          "user": "RenderMichael"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-18T06:02:48Z",
          "user": "RenderMichael"
        }
      ],
      "totalCount": 14,
      "endCursor": "Y3Vyc29yOnYyOpHODLiiFw=="
    },
    "updatedAt": "2025-07-14T18:24:58Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @ViktorHofer\nNotify danmosemsft if you want to be subscribed.",
          "createdAt": "2020-04-14T13:19:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-14T13:19:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMzQzNzg1NQ=="
        },
        {
          "author": "am11",
          "body": "`CoreCLR native components` is WIP with branch from libunwind that has all Solaris patches. If someone wants to pick up other items, feel free. :)",
          "createdAt": "2020-04-14T13:24:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-14T13:24:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxMzQ0MDQ3Ng=="
        },
        {
          "author": "gwr",
          "body": "I might like to pick up this work.  Any advice on next steps etc.?",
          "createdAt": "2024-06-25T19:42:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-06-25T19:53:12Z",
                "user": "sjorge"
              },
              {
                "content": "HEART",
                "createdAt": "2024-06-25T19:53:20Z",
                "user": "am11"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODnG_pg=="
          },
          "updatedAt": "2024-06-25T19:42:08Z",
          "id": "IC_kwDODI9FZc6ChkFF"
        },
        {
          "author": "am11",
          "body": "@gwr, welcome! That would be a huge help! 🙂\r\n\r\nI think the remaining items require specific domain knowledge. The next step is to port libraries like System.Diagnostics.Process (process management), System.Net (networking) and System.IO.FileSystem (filesystem). There are only few platform-dependent base libraries like these but they are necessary to execute dotnet/sdk on the platform. For System.Diagnostics.Process, the Sun's procfs binary based interface vs. linux' text based one would require us to update the existing abstractions.\r\n\r\nFor build, I have so far used cross-build setup. Basically, on x64 system with docker:\r\n```sh\r\n$ cd dotnet-runtime\r\n$ docker run --rm -v$(pwd):/runtime -e ROOTFS_DIR=/crossrootfs/x64 \\\r\n    mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-illumos-20220531132048-f13d79e \\\r\n     /runtime/build.sh -c Release -os illumos -cross -gcc\r\n\r\n# then copy runtime tarball from artifacts/packages/Release/Shipping/dotnet-runtime-9.0.0-dev-illumos-x64.tar.gz\r\n# to the target machine and extract to be able to execute `./dotnet yourapp.dll` (yourapp.dll is built on linux,\r\n# I can explain when we cross that bridge).\r\n```\r\nHere is a quick GitHub workflow: https://github.com/am11/CrossRepoCITesting/blob/master/.github/workflows/illumos-x64-runtime-build.yml we can employee it to upload build artifacts to a github release as well (I used to had that in my runtime fork but it was lost somewhere so I recreated a quick one in isolated repo).\r\n\r\nFeel free to ask here or if you visit #illumos IRC channel (on libera.chat), I sometimes hang there as well.\r\n\r\nHappy coding! 🎉",
          "createdAt": "2024-06-25T20:09:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-25T20:09:34Z",
          "id": "IC_kwDODI9FZc6Chu4r"
        },
        {
          "author": "gwr",
          "body": "So one must use a cross-build setup?  Interesting.  (Makes me wonder how the first one was done :)\r\nThe easiest cross build host for me would be MacOS, if that's possible.\r\nWhen are you usually on IRC?  I may need some help getting builds going.\r\n\r\nHere's what happens when I try to build:\r\nhttps://gist.github.com/gwr/3520dfbf14190e9225e8214f434ca38e\r\nLooks like the configuration etc. is not quite right yet.\r\n\r\nThanks\r\n",
          "createdAt": "2024-06-26T03:05:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T05:21:49Z",
          "id": "IC_kwDODI9FZc6Cj7r4"
        },
        {
          "author": "am11",
          "body": "> So one must use a cross-build setup? Interesting. \r\n\r\nWe can build coreclr and mono (the runtimes) on e.g. illumos host, but to build runtime libraries (.NET assemblies), we need a working SDK on the platform. The working SDK requires System.Diagnostics.Process and few others. A basic helllo-world app (something which does not use process management and networking) should be working. Hence the cross-compilation requirement.\r\n\r\n> (Makes me wonder how the first one was done :)\r\n\r\nThe first C# compiler was written in C++/assembly for Windows decades ago (until [roslyn](http://github.com/dotnet/roslyn) came along which itself is written in N-1 version of C#). :)\r\n\r\n>  The easiest cross build host for me would be MacOS, if that's possible.\r\n\r\nUnfortunately, that's currently not an option. We only support Apple-platforms  cross build on macOS host. One of the reason is lack of interest because it requires llvm-toolchain (typically installed with homebrew) instead of AppleClang which most users have installed. So docker build is the way to go.\r\n\r\n>  When are you usually on IRC? I may need some help getting builds going.\r\n\r\nSoon 😅 ",
          "createdAt": "2024-06-26T06:10:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T06:10:56Z",
          "id": "IC_kwDODI9FZc6ClQUD"
        },
        {
          "author": "gwr",
          "body": "Sounds like maybe I should focus on coreclr and mono first, agreed?\r\nDo you have configuration and build instructions for those parts?  I haven't found those yet.\r\nBTW, there's already a patch set around that lets mono build on illumos, in case that helps.\r\nI'm in US/Eastern timee zone.  You?   Thanks.",
          "createdAt": "2024-06-26T14:21:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T14:21:43Z",
          "id": "IC_kwDODI9FZc6CpNoj"
        },
        {
          "author": "am11",
          "body": "CoreCLR, mono and System.Private.CoreLib / System.Runtime etc. were ported and C# hello-world type of scenarios were tested on OpenIndiana (not recently though). I just ran a build against today's `main` branch and it succeeded:\r\n\r\n<img width=\"971\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/3840695/e234b135-7039-47de-8af4-1d1958964371\">\r\n\r\nhttps://github.com/am11/CrossRepoCITesting/actions/runs/9678215572\r\n\r\n> I'm in US/Eastern timee zone. You?\r\n\r\nI'm in Finland/EET (UTC +2).",
          "createdAt": "2024-06-26T14:46:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T14:46:14Z",
          "id": "IC_kwDODI9FZc6CpbIG"
        },
        {
          "author": "gwr",
          "body": "OK, got the container running correctly.  Some progress, new road blocks.  See my updated gist.",
          "createdAt": "2024-06-26T23:03:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T23:03:55Z",
          "id": "IC_kwDODI9FZc6CsuEQ"
        },
        {
          "author": "am11",
          "body": "Looks like you are running into a package restore issue:\r\n\r\n```\r\nDownloading 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh'\r\n  Attempting to install 'sdk v9.0.100-preview.5.24307.3' from public_location.\r\ndotnet-install: Attempting to download using primary link https://dotnetcli.azureedge.net/dotnet/Sdk/9.0.100-preview.5.24307.3/dotnet-sdk-9.0.100-preview.5.24307.3-linux-x64.tar.gz\r\ndotnet-install: Remote file https://dotnetcli.azureedge.net/dotnet/Sdk/9.0.100-preview.5.24307.3/dotnet-sdk-9.0.100-preview.5.24307.3-linux-x64.tar.gz size is 210667542 bytes.\r\ndotnet-install: Extracting archive from https://dotnetcli.azureedge.net/dotnet/Sdk/9.0.100-preview.5.24307.3/dotnet-sdk-9.0.100-preview.5.24307.3-linux-x64.tar.gz\r\ndotnet-install: Downloaded file size is 210667542 bytes.\r\ndotnet-install: The remote and local file sizes are equal.\r\ndotnet-install: Installed version is 9.0.100-preview.5.24307.3\r\ndotnet-install: Adding to current process PATH: `/runtime/.dotnet`. Note: This change will be visible only when sourcing script.\r\ndotnet-install: Note that the script does not resolve dependencies during installation.\r\ndotnet-install: To check the list of dependencies, go to https://learn.microsoft.com/dotnet/core/install, select your operating system and check the \"Dependencies\" section.\r\ndotnet-install: Installation finished successfully.\r\n/runtime/artifacts/toolset/restore.proj : error : Could not resolve SDK \"Microsoft.DotNet.Arcade.Sdk\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\r\n/runtime/artifacts/toolset/restore.proj : error :   SDK resolver \"Microsoft.DotNet.MSBuildWorkloadSdkResolver\" returned null.\r\n/runtime/artifacts/toolset/restore.proj : error :   Failed to download package 'Microsoft.DotNet.Arcade.Sdk.9.0.0-beta.24311.10' from 'https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/1a5f89f6-d8da-4080-b15f-242650c914a8/nuget/v3/flat2/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/microsoft.dotnet.arcade.sdk.9.0.0-beta.24311.10.nupkg'.\r\n/runtime/artifacts/toolset/restore.proj : error : The nupkg at 'https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/1a5f89f6-d8da-4080-b15f-242650c914a8/nuget/v3/flat2/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/microsoft.dotnet.arcade.sdk.9.0.0-beta.24311.10.nupkg' is not valid.\r\n/runtime/artifacts/toolset/restore.proj : error :   Central Directory corrupt.\r\n/runtime/artifacts/toolset/restore.proj : error :   Invalid argument : '/tmp/NuGetScratchroot/8b876b45-004a-4c1d-93e3-10d53f6d2a8d/omne45ab.3pz'\r\n/runtime/artifacts/toolset/restore.proj : error MSB4236: The SDK 'Microsoft.DotNet.Arcade.Sdk' specified could not be found.\r\nBuild failed with exit code 1. Check errors above.\r\n```\r\n\r\nIf by retrying it still runs into the same error, we can probably rule out the network issue (because it just downloaded dotnet from dotnet-install.sh). You can verify by running `curl -SL https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/1a5f89f6-d8da-4080-b15f-242650c914a8/nuget/v3/flat2/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/microsoft.dotnet.arcade.sdk.9.0.0-beta.24311.10.nupkg -o /dev/null`.\r\n\r\nThen it comes down to filesystem share. On macOS with docker, I'm using `gRPC FUSE` sharing implementation because the default VirtioFS runs into issue when nuget opens too many nodes (e..g I found the other day that it uses LINQ query which VirtioFS on macOS 14.5 doesn't handle well: https://github.com/NuGet/Home/issues/13572).\r\n\r\nI think the best way for development with VMware is probably to use a linux VM instead of their containerd `vctl` tool. The simplest way to achieve that is to create a Debian/Ubuntu VM and use prebuilt crossrootfs. I haven't used `vctl`, but something like this should give us the rootfs prebuilt setup as tar.gz archive:\r\n```sh\r\n#!/bin/bash\r\n\r\n# run this script from mac host\r\n\r\n# Variables\r\nCONTAINER_NAME=\"tmp-dnb\"\r\nIMAGE_NAME=\"mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-illumos-20220531132048-f13d79e\"\r\nHOST_DESTINATION=\"/tmp/crossrootfs.tar.gz\" # on host\r\n\r\n# Start the container\r\nvctl start --name $CONTAINER_NAME $IMAGE_NAME\r\n\r\n# Execute commands inside the container\r\nvctl exec -it $CONTAINER_NAME /bin/sh -c \"tar -czvf /tmp/crossrootfs.tar.gz /crossrootfs\"\r\n\r\n# Copy the tar.gz to host\r\nvctl copy $CONTAINER_NAME:/tmp/crossrootfs.tar.gz $HOST_DESTINATION\r\n\r\n# Stop and remove the container\r\nvctl stop $CONTAINER_NAME\r\nvctl rm $CONTAINER_NAME\r\n\r\necho \"Process completed successfully.\"\r\n```\r\n\r\nThen on host copy `/tmp/crossrootfs.tar.gz` to Debian VM, extract it at root and `export ROOTFS_DIR=/crossrootfs/x64`.\r\n\r\nThen in the VM:\r\n\r\n```sh\r\n$ cd runtime\r\n\r\n# one-time setup\r\n$ eng/install-native-dependencies.sh\r\n\r\n# repeatable build step:\r\n$ ./build.sh clr+libs+packs -cross -os illumos\r\n```\r\n\r\nIf the `runtime` was cloned in shared location, then you can copy `artifacts/packages/Debug/Shipping/dotnet-runtime-9.0.0-dev-illumos-x64.tar.gz` from macOS host to illumos VM and extract.",
          "createdAt": "2024-06-27T09:01:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T09:06:34Z",
          "id": "IC_kwDODI9FZc6CyDns"
        },
        {
          "author": "gwr",
          "body": "OK, built and ubuntu-18.04 VM, added dep. packages, copied in /crossrootfs as advised.  Trying this:\r\n```\r\n$ ./build.sh clr+libs+packs --cross --os illumos\r\n[...snip...]\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\" x64 illumos clang Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet \r\n  Error: No usable version of clang found.\r\n  Failed to generate \"CoreCLR component\" build project!\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:08:03.19\r\nBuild failed with exit code 1. Check errors above.\r\n```\r\nTried again with adding --gcc on the end:\r\n```\r\n$ ./build.sh clr+libs+packs --cross --os illumos --gcc\r\n  Determining projects to restore...\r\n[...snip...]\r\n  Commencing CoreCLR Repo build\r\n  __OutputRid: illumos-x64\r\n  Setting up directories for build\r\n  Checking prerequisites...\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\" x64 illumos gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet \r\n  Error: No usable version of gcc found.\r\n  Failed to generate \"CoreCLR component\" build project!\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:03:58.19\r\nBuild failed with exit code 1. Check errors above.\r\ngwr@ubuntu18:/g/ws/dotnet/runtime$ \r\n```\r\nSo the first could not find clang, and the second could not find gcc.\r\nPresumably that should be a cross-compiler, right?\r\nWhere should I get that?  Do I need to build that myself?\r\n\r\nThanks!\r\n\r\n",
          "createdAt": "2024-06-27T17:16:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T17:16:21Z",
          "id": "IC_kwDODI9FZc6C2N2S"
        },
        {
          "author": "am11",
          "body": "Yup, I forgot to add --gcc arg in the last comment. You can also use latest ubuntu (24.04). 18.04 is not a requirement.\r\n\r\nTo start fresh, `rm -rf artifacts` followed by `./build..` command.",
          "createdAt": "2024-06-27T17:24:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T17:24:53Z",
          "id": "IC_kwDODI9FZc6C2SbP"
        },
        {
          "author": "gwr",
          "body": "Same again after removing artifacts and adding --gcc\r\n```\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\" x64 illumos gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet \r\n  Error: No usable version of gcc found.\r\n  Failed to generate \"CoreCLR component\" build project!\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:05:26.72\r\nBuild failed with exit code 1. Check errors above.\r\n```\r\nDo I need to do something to copy the cross gcc out of that docker image?\r\n",
          "createdAt": "2024-06-27T17:43:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T17:43:37Z",
          "id": "IC_kwDODI9FZc6C2Z9j"
        },
        {
          "author": "am11",
          "body": "If you ran `eng/install-native-dependencies.sh`, it should had installed _some_ version of gcc (via build-essential)?\r\n\r\nhttps://github.com/dotnet/runtime/blob/aa343497e05510fdcd1e6a9e1abdd2843b34fd52/eng/install-native-dependencies.sh#L26\r\n\r\nNonetheless, it is a bug in our init-compiler script that we don't bypass for platforms where rootfs provides a separate toolchain for host machine to emit target code (illumos and android NDK). For android, we have a hack __Compiler=\"default\", but for illumos lets just go with traditional environment variable magic:\r\n\r\n`export CLR_CC=/crossrootfs/x64/bin/x86_64-illumos-gcc`\r\n`export CLR_CXX=/crossrootfs/x64/bin/x86_64-illumos-g++`",
          "createdAt": "2024-06-27T17:44:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T17:45:15Z",
          "id": "IC_kwDODI9FZc6C2aRz"
        },
        {
          "author": "am11",
          "body": "On 18.04, you may need a newer cmake on host:\r\n\r\n```sh\r\n# before\r\ncmake --version\r\n\r\nsudo apt purge cmake\r\nwget -O cmake-install.sh https://github.com/Kitware/CMake/releases/download/v3.29.6/cmake-3.29.6-linux-x86_64.sh\r\nsudo bash ./cmake-install.sh --skip-license --exclude-subdir --prefix=/usr/local\r\nrm ./cmake-install.sh\r\n\r\n# after\r\ncmake --version\r\n```",
          "createdAt": "2024-06-27T17:52:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T17:52:09Z",
          "id": "IC_kwDODI9FZc6C2c_5"
        },
        {
          "author": "gwr",
          "body": "Here's the latest.  I updated cmake as you advised, though it was already 2.39.6 before the update.\r\n```\r\n  Commencing CoreCLR Repo build\r\n  __OutputRid: illumos-x64\r\n  Setting up directories for build\r\n  Checking prerequisites...\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\" x64 illumos gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet \r\n  Not searching for unused variables given on the command line.\r\n  loading initial cache file /g/ws/dotnet/runtime/eng/native/tryrun.cmake\r\n  CMake Error: CMake was unable to find a build program corresponding to \"Unix Makefiles\".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.\r\n  -- Configuring incomplete, errors occurred!\r\n  Failed to generate \"CoreCLR component\" build project!\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:01:29.76\r\nBuild failed with exit code 1. Check errors above.\r\ngwr@ubuntu18:/g/ws/dotnet/runtime$ cmake --version\r\ncmake version 3.29.6\r\n\r\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\r\n```\r\n",
          "createdAt": "2024-06-27T18:08:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T18:08:59Z",
          "id": "IC_kwDODI9FZc6C2qjQ"
        },
        {
          "author": "gwr",
          "body": "Oh, looks like \"apt install\" choked on liblldb-dev\r\nWe need to tell it a version.  Which one?\r\nLooks like this is OK: `liblldb-6.0-dev`\r\nGetting farther along now...",
          "createdAt": "2024-06-27T18:18:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-27T18:39:29Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODnkbYQ=="
          },
          "updatedAt": "2024-06-27T18:28:08Z",
          "id": "IC_kwDODI9FZc6C2yyb"
        },
        {
          "author": "gwr",
          "body": "Here's the latest.  I did not expect faiures in here.  Do I have version mixing or something?\r\n```\r\n  [  9%] Linking CXX static library libpalrt.a\r\n  [  9%] Built target palrt\r\n  [  9%] Building CXX object inc/CMakeFiles/corguids.dir/__/pal/prebuilt/idl/sospriv_i.cpp.o\r\n  [  9%] Built target corguids\r\n  [  9%] Built target precompiled_asm\r\n  [  9%] Building CXX object gcinfo/CMakeFiles/gcinfo.dir/arraylist.cpp.o\r\n  [  9%] Generating eventpipe/eventpipehelpers.cpp, eventpipe/dotnetruntime.cpp, eventpipe/dotnetruntimerundown.cpp, eventpipe/dotnetruntimestress.cpp, eventpipe/dotnetruntimeprivate.cpp\r\n  [  9%] Building CXX object vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx.gch\r\n  [  9%] Building CXX object gcinfo/CMakeFiles/gcinfo.dir/gcinfoencoder.cpp.o\r\n  [  9%] Building CXX object gcinfo/CMakeFiles/gcinfo.dir/simplerhash.cpp.o\r\n  [  9%] Built target gcinfo\r\n  [  9%] Building CXX object vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx.o\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/contract.h:235,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/stdmacros.h:21,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:90,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx:5,\r\n                   from <command-line>:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h: In instantiation of 'struct has_m_revision<SBuffer, void>':\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:268:29:   required by substitution of 'template<class Dummy> typename std::enable_if<(! has_m_revision<CONTAINER>::value), void>::type CheckedIteratorBase<SBuffer>::Resync<Dummy>(const SBuffer*) [with Dummy = SBuffer]'\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.inl:1729:96:   required from here\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:206:1: error: 'int SBuffer::m_revision' is protected within this context\r\n   DEFINE_MEMBER_EXISTENCE_CHECK(m_revision);\r\n   ^\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/sstring.h:46,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/ex.h:18,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/metadata.h:16,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/util.hpp:15,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:97,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx:5,\r\n                   from <command-line>:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.h:520:9: note: declared protected here\r\n       int m_revision;\r\n           ^~~~~~~~~~\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/contract.h:235,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/stdmacros.h:21,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:90,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx:5,\r\n                   from <command-line>:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:206:1: error: 'int SBuffer::m_revision' is protected within this context\r\n   DEFINE_MEMBER_EXISTENCE_CHECK(m_revision);\r\n   ^\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/sstring.h:46,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/ex.h:18,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/metadata.h:16,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/util.hpp:15,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:97,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx:5,\r\n                   from <command-line>:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.h:520:9: note: declared protected here\r\n       int m_revision;\r\n           ^~~~~~~~~~\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/contract.h:235,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/stdmacros.h:21,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:90,\r\n                   from /g/ws/dotnet/runtime/src/native/eventpipe/ep-rt-config.h:22,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/eventing/eventpipe/ep-rt-coreclr.cpp:4,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx:4:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h: In instantiation of 'struct has_m_revision<SBuffer, void>':\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:268:29:   required by substitution of 'template<class Dummy> typename std::enable_if<(! has_m_revision<CONTAINER>::value), void>::type CheckedIteratorBase<SBuffer>::Resync<Dummy>(const SBuffer*) [with Dummy = SBuffer]'\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.inl:1729:96:   required from here\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:206:31: error: 'int SBuffer::m_revision' is protected within this context\r\n   DEFINE_MEMBER_EXISTENCE_CHECK(m_revision);\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/check.h:28:58: note: in definition of macro 'DEFINE_MEMBER_EXISTENCE_CHECK'\r\n   struct has_##Member<T, void_t<decltype(std::declval<T>().Member)>> : std::true_type {};\r\n                                                            ^~~~~~\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/sstring.h:46,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/ex.h:18,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/metadata.h:16,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/util.hpp:15,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:97,\r\n                   from /g/ws/dotnet/runtime/src/native/eventpipe/ep-rt-config.h:22,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/eventing/eventpipe/ep-rt-coreclr.cpp:4,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx:4:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.h:520:9: note: declared protected here\r\n       int m_revision;\r\n           ^~~~~~~~~~\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/contract.h:235,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/stdmacros.h:21,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:90,\r\n                   from /g/ws/dotnet/runtime/src/native/eventpipe/ep-rt-config.h:22,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/eventing/eventpipe/ep-rt-coreclr.cpp:4,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx:4:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/iterator.h:206:31: error: 'int SBuffer::m_revision' is protected within this context\r\n   DEFINE_MEMBER_EXISTENCE_CHECK(m_revision);\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/check.h:28:58: note: in definition of macro 'DEFINE_MEMBER_EXISTENCE_CHECK'\r\n   struct has_##Member<T, void_t<decltype(std::declval<T>().Member)>> : std::true_type {};\r\n                                                            ^~~~~~\r\n  In file included from /g/ws/dotnet/runtime/src/coreclr/inc/sstring.h:46,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/ex.h:18,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/inc/metadata.h:16,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/util.hpp:15,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/common.h:97,\r\n                   from /g/ws/dotnet/runtime/src/native/eventpipe/ep-rt-config.h:22,\r\n                   from /g/ws/dotnet/runtime/src/coreclr/vm/eventing/eventpipe/ep-rt-coreclr.cpp:4,\r\n                   from /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx:4:\r\n  /g/ws/dotnet/runtime/src/coreclr/inc/sbuffer.h:520:9: note: declared protected here\r\n       int m_revision;\r\n           ^~~~~~~~~~\r\n  vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/build.make:75: recipe for target 'vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx.o' failed\r\n  make[2]: *** [vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/Unity/unity_0_cxx.cxx.o] Error 1\r\n  CMakeFiles/Makefile2:4173: recipe for target 'vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/all' failed\r\n  make[1]: *** [vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/all] Error 2\r\n  make[1]: *** Waiting for unfinished jobs....\r\n  vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/build.make:94: recipe for target 'vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx.gch' failed\r\n  make[2]: *** [vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/cmake_pch.hxx.gch] Error 1\r\n  CMakeFiles/Makefile2:4146: recipe for target 'vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/all' failed\r\n  make[1]: *** [vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/all] Error 2\r\n  Makefile:135: recipe for target 'all' failed\r\n  /g/ws/dotnet/runtime/src/coreclr\r\n  Failed to build \"CoreCLR component\".\r\n  make: *** [all] Error 2\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 2.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -x64 -debug gcc -cross -os illumos -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\"\" exited with code 2.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:07:11.42\r\nBuild failed with exit code 1. Check errors above.\r\ngwr@ubuntu18:/g/ws/dotnet/runtime$ \r\n```",
          "createdAt": "2024-06-27T18:39:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T18:39:34Z",
          "id": "IC_kwDODI9FZc6C28lT"
        },
        {
          "author": "am11",
          "body": "The upper part of the logs should look something like this:\r\n\r\n```\r\n   -- The C compiler identification is GNU 8.4.0\r\n  -- The CXX compiler identification is GNU 8.4.0\r\n  -- Detecting C compiler ABI info\r\n  -- Detecting C compiler ABI info - done\r\n  -- Check for working C compiler: /crossrootfs/x64/bin/x86_64-illumos-gcc - skipped\r\n  -- Detecting C compile features\r\n  -- Detecting C compile features - done\r\n  -- Detecting CXX compiler ABI info\r\n  -- Detecting CXX compiler ABI info - done\r\n  -- Check for working CXX compiler: /crossrootfs/x64/bin/x86_64-illumos-g++ - skipped\r\n  -- Detecting CXX compile features\r\n  -- Detecting CXX compile features - done\r\n```",
          "createdAt": "2024-06-27T18:41:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T18:41:14Z",
          "id": "IC_kwDODI9FZc6C29Ig"
        },
        {
          "author": "am11",
          "body": "Ah, I was able to repro it with Debug build. I haven't tested debug build of runtime in a while. Looks like it has regressed. If you are going to work on runtime libraries instead of coreclr itself, then you can use Release build of runtime and Debug build of libraries:\r\n\r\n`./build.sh clr+libs+packs -rc Release -lc Debug`\r\n\r\nI'm fixing the debug build of runtime meanwhile.",
          "createdAt": "2024-06-27T18:51:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T18:51:22Z",
          "id": "IC_kwDODI9FZc6C3AxU"
        },
        {
          "author": "am11",
          "body": "Fix was easy: https://github.com/dotnet/runtime/pull/104118. Thanks for the catch! 😅 ",
          "createdAt": "2024-06-27T19:44:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T19:44:38Z",
          "id": "IC_kwDODI9FZc6C3UYM"
        },
        {
          "author": "gwr",
          "body": "Thanks for the fix for -c Debug.  Here's my latest try:\r\n```\r\n./build.sh clr+libs+packs -c Debug -cross -os illumos -gcc\r\n  Commencing CoreCLR Repo build\r\n  __OutputRid: illumos-x64\r\n  Setting up directories for build\r\n  Checking prerequisites...\r\n  Commencing build of \"install\" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\" x64 illumos gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet \r\n  Not searching for unused variables given on the command line.\r\n  loading initial cache file /g/ws/dotnet/runtime/eng/native/tryrun.cmake\r\n  -- The linker identification is GNU ld (GNU Binutils) 2.33.1\r\n  Copyright (C) 2019 Free Software Foundation, Inc.\r\n  This program is free software; you may redistribute it under the terms of\r\n  the GNU General Public License version 3 or (at your option) a later version.\r\n  This program has absolutely no warranty.\r\n  Detected SunOS amd64\r\n  -- Configuring done (3.1s)\r\n  -- Generating done (20.6s)\r\n  -- Build files have been written to: /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug\r\n  /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug /g/ws/dotnet/runtime/src/coreclr\r\n  Executing make install -j 4\r\n  [  0%] Built target singlefilehost_exports\r\n  make[2]: Warning: File 'interop/CMakeFiles/interop.dir/compiler_depend.make' has modification time 0.0038 s in the future\r\n  make[2]: Warning: File 'Corehost.Static/hostmisc/CMakeFiles/hostmisc.dir/compiler_depend.make' has modification time 0.0063 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  0%] Built target hostmisc\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  0%] Built target interop\r\n  make[2]: Warning: File 'libs-native/System.Net.Security.Native/CMakeFiles/System.Net.Security.Native-Static.dir/compiler_depend.make' has modification time 0.0028 s in the future\r\n  make[2]: Warning: File 'libs-native/System.Globalization.Native/CMakeFiles/System.Globalization.Native-Static.dir/compiler_depend.make' has modification time 0.0065 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  0%] Built target System.Net.Security.Native-Static\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  0%] Built target System.Globalization.Native-Static\r\n  [  1%] Built target System.Native-Static\r\n  [  2%] Built target System.IO.Compression.Native-Static\r\n  make[2]: Warning: File 'pal/src/CMakeFiles/coreclrpal_dac.dir/compiler_depend.make' has modification time 0.002 s in the future\r\n  make[2]: Warning: File 'libs-native/System.Security.Cryptography.Native/CMakeFiles/objlib.dir/compiler_depend.make' has modification time 0.0004 s in the future\r\n  make[2]: Warning: File 'pal/src/eventprovider/dummyprovider/CMakeFiles/eventprovider.dir/compiler_depend.make' has modification time 0.0062 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  2%] Built target coreclrpal_dac\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  3%] Built target objlib\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  4%] Built target eventprovider\r\n  make[2]: Warning: File 'minipal/Unix/CMakeFiles/coreclrminipal.dir/compiler_depend.make' has modification time 0.00045 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  4%] Built target coreclrminipal\r\n  make[2]: Warning: File 'containers/CMakeFiles/dn-containers.dir/compiler_depend.make' has modification time 0.00078 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  5%] Built target dn-containers\r\n  [  5%] Built target gc_pal\r\n  make[2]: Warning: File 'debug/dbgutil/CMakeFiles/dbgutil.dir/compiler_depend.make' has modification time 0.0015 s in the future\r\n  make[2]: Warning: File 'nativeresources/CMakeFiles/nativeresourcestring.dir/compiler_depend.make' has modification time 0.0033 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  5%] Built target dbgutil\r\n  [  5%] Built target eventing_headers\r\n  [  5%] Built target gc_vxsort\r\n  make[2]: Warning: File 'inc/CMakeFiles/corguids.dir/compiler_depend.make' has modification time 0.0004 s in the future\r\n  make[2]: Warning: File 'palrt/CMakeFiles/palrt.dir/compiler_depend.make' has modification time 0.0016 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  5%] Built target nativeresourcestring\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  5%] Built target corguids\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [  5%] Built target palrt\r\n  [  5%] Built target precompiled_asm\r\n  make[2]: Warning: File 'vm/eventing/eventpipe/CMakeFiles/eventpipe_objs.dir/compiler_depend.make' has modification time 0.0031 s in the future\r\n  [  9%] Built target libunwind\r\n  [  9%] Built target gcinfo\r\n  make[2]: Warning: File 'vm/eventing/eventpipe/CMakeFiles/eventpipe_gen_objs.dir/compiler_depend.make' has modification time 0.0017 s in the future\r\n  make[2]: Warning: File 'md/runtime/CMakeFiles/mdruntime_wks.dir/compiler_depend.make' has modification time 0.0073 s in the future\r\n  make[2]: Warning: File 'md/compiler/CMakeFiles/mdcompiler_wks.dir/compiler_depend.make' has modification time 0.00054 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 10%] Built target mdruntime_wks\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 11%] Built target mdcompiler_wks\r\n  make[2]: Warning: File 'md/enc/CMakeFiles/mdruntimerw_wks.dir/compiler_depend.make' has modification time 0.0029 s in the future\r\n  make[2]: Warning: File 'md/ceefilegen/CMakeFiles/ceefgen.dir/compiler_depend.make' has modification time 0.0062 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 11%] Built target ceefgen\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 11%] Built target mdruntimerw_wks\r\n  make[2]: Warning: File 'vm/wks/CMakeFiles/cee_wks.dir/compiler_depend.make' has modification time 0.0015 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 11%] Built target eventpipe_gen_objs\r\n  [ 11%] Built target eventpipe_objs\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 11%] Built target cee_wks\r\n  [ 12%] Built target cordbee_wks\r\n  [ 12%] Built target coreclr_exports\r\n  [ 12%] Built target coreclr_def\r\n  [ 12%] Built target comfloat_wks\r\n  make[2]: Warning: File 'dlls/mscorrc/CMakeFiles/mscorrc.dir/compiler_depend.make' has modification time 0.01 s in the future\r\n  [ 12%] Built target v3binder\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 12%] Built target bcltype\r\n  [ 12%] Built target mscorrc\r\n  make[2]: Warning: File 'unwinder/CMakeFiles/unwinder_wks.dir/compiler_depend.make' has modification time 0.0009 s in the future\r\n  make[2]: Warning: File 'unwinder/CMakeFiles/unwinder_dac.dir/compiler_depend.make' has modification time 0.0015 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 14%] Built target unwinder_wks\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 14%] Built target unwinder_dac\r\n  make[2]: Warning: File 'md/runtime/CMakeFiles/mdruntime_dac.dir/compiler_depend.make' has modification time 0.0019 s in the future\r\n  make[2]: Warning: File 'md/enc/CMakeFiles/mdruntimerw_dac.dir/compiler_depend.make' has modification time 0.00023 s in the future\r\n  [ 14%] Built target mdcompiler_dac\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 15%] Built target mdruntime_dac\r\n  [ 15%] Built target mdruntimerw_dac\r\n  [ 15%] Built target mscordaccore_exports\r\n  make[2]: Warning: File 'dlls/mscordac/CMakeFiles/mscordacobj.dir/compiler_depend.make' has modification time 0.0088 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 16%] Built target mscordacobj\r\n  [ 16%] Built target cordbee_dac\r\n  [ 17%] Built target mdcompiler-dbi\r\n  make[2]: Warning: File 'md/runtime/CMakeFiles/mdruntime-dbi.dir/compiler_depend.make' has modification time 0.0022 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 17%] Built target mdruntime-dbi\r\n  make[2]: Warning: File 'md/enc/CMakeFiles/mdruntimerw-dbi.dir/compiler_depend.make' has modification time 0.0018 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 17%] Built target mdruntimerw-dbi\r\n  make[2]: Warning: File 'md/datasource/CMakeFiles/mddatasource_dbi.dir/compiler_depend.make' has modification time 0.0021 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 17%] Built target mddatasource_dbi\r\n  [ 17%] Built target mscordbi_exports\r\n  make[2]: Warning: File 'libs-native/System.IO.Ports.Native/CMakeFiles/System.IO.Ports.Native-Static.dir/compiler_depend.make' has modification time 0.0057 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 20%] Built target utilcodestaticnohost\r\n  [ 20%] Built target System.IO.Ports.Native-Static\r\n  make[2]: Warning: File 'test-watchdog/CMakeFiles/watchdog.dir/compiler_depend.make' has modification time 0.00048 s in the future\r\n  make[2]: Warning: File 'hosts/corerun/CMakeFiles/corerun.dir/compiler_depend.make' has modification time 0.0016 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 21%] Built target watchdog\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 21%] Built target corerun\r\n  make[2]: Warning: File 'tools/aot/jitinterface/CMakeFiles/jitinterface_x64.dir/compiler_depend.make' has modification time 0.003 s in the future\r\n  make[2]: Warning: File 'containers/CMakeFiles/dn-containers-no-lto.dir/compiler_depend.make' has modification time 0.0024 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 21%] Built target dn-containers-no-lto\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 22%] Built target jitinterface_x64\r\n  make[2]: Warning: File 'nativeaot/Bootstrap/base/CMakeFiles/bootstrapper.dir/compiler_depend.make' has modification time 0.0059 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 22%] Built target bootstrapper\r\n  [ 23%] Built target cordbdi\r\n  make[2]: Warning: File 'nativeaot/Bootstrap/base/CMakeFiles/stdc++compat.dir/compiler_depend.make' has modification time 0.0027 s in the future\r\n  [ 23%] Built target aot_eventing_headers\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 23%] Built target stdc++compat\r\n  make[2]: Warning: File 'nativeaot/Bootstrap/dll/CMakeFiles/bootstrapperdll.dir/compiler_depend.make' has modification time 0.0083 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 23%] Built target bootstrapperdll\r\n  [ 23%] Built target RuntimeAsmHelpers\r\n  make[2]: Warning: File 'nativeaot/Runtime/Full/CMakeFiles/standalonegc-disabled.dir/compiler_depend.make' has modification time 0.0059 s in the future\r\n  make[2]: Warning: File 'nativeaot/Runtime/Full/CMakeFiles/standalonegc-enabled.dir/compiler_depend.make' has modification time 0.0079 s in the future\r\n  [ 28%] Built target cee_dac\r\n  make[2]: Warning: File 'nativeaot/Runtime/Full/CMakeFiles/Runtime.VxsortDisabled.dir/compiler_depend.make' has modification time 0.0095 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 28%] Built target Runtime.VxsortDisabled\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 28%] Built target standalonegc-disabled\r\n  [ 28%] Built target standalonegc-enabled\r\n  [ 29%] Built target Runtime.VxsortEnabled\r\n  make[2]: Warning: File 'nativeaot/Runtime/eventpipe/CMakeFiles/eventpipe-shared-objects.dir/compiler_depend.make' has modification time 0.005 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 29%] Built target eventpipe-shared-objects\r\n  make[2]: Warning: File 'nativeaot/Runtime/eventpipe/CMakeFiles/eventpipe-disabled.dir/compiler_depend.make' has modification time 0.005 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 30%] Built target eventpipe-disabled\r\n  make[2]: Warning: File 'md/runtime/CMakeFiles/mdruntime_ppdb.dir/compiler_depend.make' has modification time 0.005 s in the future\r\n  make[2]: Warning: File 'md/compiler/CMakeFiles/mdcompiler_ppdb.dir/compiler_depend.make' has modification time 0.0044 s in the future\r\n  [ 31%] Built target clrgcexp\r\n  [ 31%] Built target clrgc\r\n  make[2]: Warning: File 'md/staticmd/CMakeFiles/mdstaticapi_ppdb.dir/compiler_depend.make' has modification time 0.0055 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 31%] Built target mdstaticapi_ppdb\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 31%] Built target mdruntime_ppdb\r\n  make[2]: Warning: File 'md/enc/CMakeFiles/mdruntimerw_ppdb.dir/compiler_depend.make' has modification time 0.0032 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 32%] Built target mdcompiler_ppdb\r\n  make[2]: Warning: File 'dlls/mscorpe/CMakeFiles/mscorpe.dir/compiler_depend.make' has modification time 0.0018 s in the future\r\n  make[2]: Warning: File 'md/staticmd/CMakeFiles/mdstaticapi.dir/compiler_depend.make' has modification time 0.0018 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 32%] Built target mdstaticapi\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 34%] Built target mdruntimerw_ppdb\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 34%] Built target mscorpe\r\n  make[2]: Warning: File 'gcinfo/CMakeFiles/gcinfo_universal_arm64.dir/compiler_depend.make' has modification time 0.00075 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 34%] Built target gcinfo_universal_arm64\r\n  make[2]: Warning: File 'gcinfo/CMakeFiles/gcinfo_unix_x64.dir/compiler_depend.make' has modification time 0.0023 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 34%] Built target gcinfo_unix_x64\r\n  [ 34%] Built target gcinfo_win_x64\r\n  [ 35%] Built target gcinfo_universal_arm\r\n  [ 35%] Built target jit_exports\r\n  [ 35%] Built target spmi_exports\r\n  [ 35%] Built target gcinfo_win_x86\r\n  [ 35%] Built target debug-pal\r\n  [ 36%] Built target System.Security.Cryptography.Native.OpenSsl-Static\r\n  make[2]: Warning: File 'vm/wks/CMakeFiles/cee_wks_mergeable.dir/compiler_depend.make' has modification time 0.0042 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 36%] Built target cee_wks_mergeable\r\n  [ 40%] Built target coreclrpal\r\n  [ 42%] Built target Runtime.WorkstationGC\r\n  [ 44%] Built target Runtime.ServerGC\r\n  make[2]: Warning: File 'ildasm/exe/CMakeFiles/ildasm.dir/compiler_depend.make' has modification time 0.0022 s in the future\r\n  [ 44%] Built target eventpipe-enabled\r\n  [ 45%] Built target ilasm\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 45%] Built target ildasm\r\n  [ 55%] Built target cee_wks_core\r\n  [ 65%] Built target clrjit\r\n  [ 67%] Built target clrjit_universal_arm64_x64\r\n  [ 69%] Built target clrjit_unix_x64_x64\r\n  [ 74%] Built target clrjit_win_x64_x64\r\n  [ 75%] Built target superpmi\r\n  [ 76%] Built target mcs\r\n  [ 77%] Built target superpmi-shim-collector\r\n  [ 78%] Built target superpmi-shim-counter\r\n  [ 78%] Built target superpmi-shim-simple\r\n  [ 83%] Built target clrjit_universal_arm_x64\r\n  [ 84%] Built target StressLogAnalyzer\r\n  [ 88%] Built target clrjit_win_x86_x64\r\n  make[2]: Warning: File 'debug/runtimeinfo/CMakeFiles/cdac_data_descriptor.dir/compiler_depend.make' has modification time 0.00043 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 88%] Built target cdac_data_descriptor\r\n  [ 89%] Built target utilcode\r\n  [ 89%] Built target cdac_contract_descriptor\r\n  make[2]: Warning: File 'dlls/mscoree/coreclr/CMakeFiles/coreclr.dir/compiler_depend.make' has modification time 0.00094 s in the future\r\n  [ 91%] Built target utilcode_dac\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 91%] Built target coreclr\r\n  [ 91%] Built target dactablerva_header\r\n  [ 96%] Built target clrjit_static\r\n  make[2]: Warning: File 'dlls/mscoree/coreclr/CMakeFiles/coreclr_static.dir/compiler_depend.make' has modification time 0.00047 s in the future\r\n  make[2]: Warning: File 'debug/daccess/CMakeFiles/daccess.dir/compiler_depend.make' has modification time 0.0001 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 96%] Built target coreclr_static\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 97%] Built target daccess\r\n  make[2]: Warning: File 'dlls/mscordac/CMakeFiles/mscordaccore.dir/compiler_depend.make' has modification time 0.01 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 97%] Built target mscordaccore\r\n  make[2]: Warning: File 'dlls/mscordbi/CMakeFiles/mscordbi.dir/compiler_depend.make' has modification time 0.0031 s in the future\r\n  make[2]: warning:  Clock skew detected.  Your build may be incomplete.\r\n  [ 97%] Built target mscordbi\r\n  [ 97%] Built target runtimeinfo\r\n  [100%] Built target singlefilehost\r\n  Install the project...\r\n  -- Install configuration: \"DEBUG\"\r\n  /g/ws/dotnet/runtime/src/coreclr\r\n  Repo successfully built.\r\n  Product binaries are available at /g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug\r\n  cdac-build-tool -> /g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\r\n  Executing \"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -cmakeargs \"-DCLR_CROSS_COMPONENTS_BUILD=1\" -x64 -debug gcc -os illumos -hostarch x64 -hostos linux -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\" -component crosscomponents\r\n  Commencing CoreCLR Repo build\r\n  __OutputRid: illumos-x64\r\n  Setting up directories for build\r\n  Checking prerequisites...\r\n  Commencing build of \"  crosscomponents \" target in \"CoreCLR component\" for illumos.x64.Debug in /g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/x64\r\n  Invoking \"/g/ws/dotnet/runtime/eng/native/gen-buildsys.sh\" \"/g/ws/dotnet/runtime/src/coreclr\" \"/g/ws/dotnet/runtime/artifacts/obj/coreclr/illumos.x64.Debug/x64\" x64 linux gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet -DCLR_CROSS_COMPONENTS_BUILD=1 \r\n  -- The linker identification is GNU ld (GNU Binutils) 2.33.1\r\n  Copyright (C) 2019 Free Software Foundation, Inc.\r\n  Not searching for unused variables given on the command line.\r\n  This program is free software; you may redistribute it under the terms of\r\n  the GNU General Public License version 3 or (at your option) a later version.\r\n  This program has absolutely no warranty.\r\n  Detected Linux x86_64\r\n  -- Performing Test HAVE_LTTNG_TRACEPOINT_H\r\n  -- Performing Test HAVE_LTTNG_TRACEPOINT_H - Failed\r\n  CMake Error at pal/src/configure.cmake:921 (message):\r\n    Cannot find liblttng-ust-dev.  Try installing liblttng-ust-dev (or the\r\n    appropriate packages for your platform)\r\n  Call Stack (most recent call first):\r\n    pal/src/CMakeLists.txt:26 (include)\r\n  \r\n  \r\n  -- Configuring incomplete, errors occurred!\r\n  Failed to generate \"CoreCLR component\" build project!\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -cmakeargs \"-DCLR_CROSS_COMPONENTS_BUILD=1\" -x64 -debug gcc -os illumos -hostarch x64 -hostos linux -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\" -component crosscomponents\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/g/ws/dotnet/runtime/src/coreclr/runtime.proj(108,5): error MSB3073: The command \"\"/g/ws/dotnet/runtime/src/coreclr/build-runtime.sh\" -cmakeargs \"-DCLR_CROSS_COMPONENTS_BUILD=1\" -x64 -debug gcc -os illumos -hostarch x64 -hostos linux -outputrid illumos-x64 -cmakeargs \"-DCLR_DOTNET_HOST_PATH=/g/ws/dotnet/runtime/.dotnet/dotnet\" -cmakeargs \"-DCDAC_BUILD_TOOL_BINARY_PATH=/g/ws/dotnet/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll\" -component crosscomponents\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:02:16.54\r\nBuild failed with exit code 1. Check errors above.\r\n```\r\nLooking at src/coreclr/pal/src/config/configure.cmake line 911\r\nit seems the build skipped the CLR_CMAKE_TARGET_SUNOS section.\r\nI tried making it take that path, but things didn't look better.\r\nSuggestions?\r\n",
          "createdAt": "2024-06-28T01:42:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T01:42:50Z",
          "id": "IC_kwDODI9FZc6C44j7"
        },
        {
          "author": "am11",
          "body": "Looks like `sudo eng/install-native-dependencies.sh` didn't succeed on your machine.",
          "createdAt": "2024-06-28T05:32:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T05:32:38Z",
          "id": "IC_kwDODI9FZc6C5vJd"
        },
        {
          "author": "am11",
          "body": "> it seems the build skipped the CLR_CMAKE_TARGET_SUNOS section.\r\n> I tried making it take that path, but things didn't look better.\r\n\r\nThis is by design. The coreclr build succeeded and this next one is cross-components for host OS (Linux) so it should be taking Linux path where we expect lttng-ust to be present.",
          "createdAt": "2024-06-28T07:23:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T07:23:02Z",
          "id": "IC_kwDODI9FZc6C6OsX"
        },
        {
          "author": "gwr",
          "body": "As far as I can tell, lttng-ust is there.\r\n\r\n\r\nOn Fri, Jun 28, 2024 at 3:23 AM Adeel Mujahid ***@***.***>\r\nwrote:\r\n\r\n> it seems the build skipped the CLR_CMAKE_TARGET_SUNOS section.\r\n> I tried making it take that path, but things didn't look better.\r\n>\r\n> This is by design. The coreclr build succeeded and this next one is\r\n> cross-components for host OS (Linux) so it should be taking Linux path\r\n> where we expect lttng-ust to be present.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/dotnet/runtime/issues/34944#issuecomment-2196302615>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAG33HHQK3W35JNUAS52OLTZJUFO3AVCNFSM6AAAAABJ4PTVTSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCOJWGMYDENRRGU>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-06-28T08:55:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T08:55:48Z",
          "id": "IC_kwDODI9FZc6C6xYr"
        },
        {
          "author": "am11",
          "body": "Could you check `find artifacts/obj -name CMakeError.log` why it's failing?\r\n\r\nSeems to be working in docker: https://github.com/am11/CrossRepoCITesting/actions/runs/9702500203/job/26778504623\r\n\r\n```\r\n  Checking prerequisites...\r\n  Commencing build of \"  crosscomponents \" target in \"CoreCLR component\" for illumos.x64.Debug in /runtime/artifacts/obj/coreclr/illumos.x64.Debug/x64\r\n  Invoking \"/runtime/eng/native/gen-buildsys.sh\" \"/runtime/src/coreclr\" \"/runtime/artifacts/obj/coreclr/illumos.x64.Debug/x64\" x64 linux gcc Debug \"\"  -DCLR_CMAKE_PGO_INSTRUMENT=0 -DCLR_CMAKE_OPTDATA_PATH= -DCLR_CMAKE_PGO_OPTIMIZE=0 -DCLI_CMAKE_FALLBACK_OS=\"illumos\" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCDAC_BUILD_TOOL_BINARY_PATH=/runtime/artifacts/bin/coreclr/illumos.x64.Debug/cdac-build-tool/cdac-build-tool.dll -DCLR_DOTNET_HOST_PATH=/runtime/.dotnet/dotnet -DCLR_CROSS_COMPONENTS_BUILD=1 \r\n  Not searching for unused variables given on the command line.\r\n  -- The C compiler identification is GNU 7.5.0\r\n  -- The CXX compiler identification is GNU 7.5.0\r\n  -- Detecting C compiler ABI info\r\n  -- Detecting C compiler ABI info - done\r\n  -- Check for working C compiler: /usr/bin/gcc-7 - skipped\r\n  -- Detecting C compile features\r\n...\r\n\r\n  -- Performing Test HAVE_MAP_HUGETLB - Success\r\n  -- Performing Test HAVE_LTTNG_TRACEPOINT_H\r\n  -- Performing Test HAVE_LTTNG_TRACEPOINT_H - Success\r\n  -- Looking for sysctlbyname\r\n  -- Looking for sysctlbyname - not found\r\n...\r\n```",
          "createdAt": "2024-06-28T10:10:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T10:10:41Z",
          "id": "IC_kwDODI9FZc6C7PMh"
        },
        {
          "author": "gwr",
          "body": "Strange, find does not show any `CMakeError.log` files under artifacts.\r\nI'm on IRC -- maybe you can help me through this faster there?\r\nThanks.",
          "createdAt": "2024-06-28T10:28:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-28T10:30:04Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODnp0sg=="
          },
          "updatedAt": "2024-06-28T10:28:10Z",
          "id": "IC_kwDODI9FZc6C7VeL"
        },
        {
          "author": "am11",
          "body": "They have changed the format in recent version; instead of CMakeError.log we now get CMakeConfigureLog.yaml. Lets continue to IRC.",
          "createdAt": "2024-06-28T10:37:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T10:37:28Z",
          "id": "IC_kwDODI9FZc6C7YrK"
        },
        {
          "author": "AustinWise",
          "body": "I tried building a rootfs with this command:\r\n\r\n```bash\r\nsudo ./eng/common/cross/build-rootfs.sh x64 illumos\r\n```\r\n\r\nI had to install some extra packages to get GCC to build on Ubuntu 22.04. These are not currently included in the `eng/install-native-dependencies.sh` script. Should they be added there or perhaps in `cross-building.md`?\r\n\r\n```bash\r\nsudo apt install libgmp3-dev libmpfr-dev libmpc-dev\r\n```\r\n\r\nEdit: I see the issue of pkgsrc and illumos sysroot being mis-matched causing a linker error like \"undefined reference to __stack_chk_fail@ILLUMOS_0.37\" is already being talked about at https://github.com/illumos/sysroot/issues/3\r\n\r\n<details>\r\n<summary>Longer description of the linking problem.</summary>\r\n\r\nI then attempted to build with:\r\n\r\n```bash\r\n./build.sh clr+libs+packs -c Debug -cross -os illumos -gcc\r\n```\r\n\r\nI got these linker errors:\r\n\r\n> .tools/rootfs/x64/x86_64-sun-solaris2.10/bin/ld: .tools/rootfs/x64/lib/libz.so: undefined reference to '__stack_chk_fail@ILLUMOS_0.37'\r\n> .tools/rootfs/x64/x86_64-sun-solaris2.10/bin/ld: .tools/rootfs/x64/lib/libz.so: undefined reference to '__stack_chk_guard@ILLUMOS_0.37'\r\n\r\nI suspect this is caused by the fact the the `build-rootfs.sh` script downloads an illumos sysroot from 2018 while the zlib version is downloaded from the latest pkgsrc. pkgsrc for illumos [is building](https://pkgsrc.smartos.org/install-on-illumos/) on a newer version of illumos (20210826) that includes the `-fstack-protector` support added in 2020 in https://github.com/illumos/illumos-gate/commit/6a817834d81cc75ce12d0d393320837b1fec1e85 . \r\n</details>\r\n\r\n\r\nBuilding using the Docker method does work though:\r\n\r\n```bash\r\ndocker run --rm -v$(pwd):/runtime -e ROOTFS_DIR=/crossrootfs/x64 \\\r\n    mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-illumos-20220531132048-f13d79e \\\r\n     /runtime/build.sh -c Release -os illumos -cross -gcc\r\n```",
          "createdAt": "2024-06-28T15:35:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-28T15:49:33Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODnsGUQ=="
          },
          "updatedAt": "2024-06-28T17:31:26Z",
          "id": "IC_kwDODI9FZc6C9n5J"
        },
        {
          "author": "am11",
          "body": "Glad to hear you are trying it out @AustinWise! The cross-compilation is only required until we get some of the shared framework libraries ported for SDK, after that we can build everything on the illumos device / VM. The best way is to copy crossrootfs dir from the docker into a linux host (e.g. at /crossrootfs) and set ROOTFS_DIR=/crossrootfs/x64. Then in vscode, we can do the library port work. System.Diagnostics.Process and System.Net are two libs needed for SDK/MSBuild to function on illumos.\r\n\r\nBTW, we ported coreclr on SmartOS VM itself by running coreclr-specific build script (src/coreclr/build-runtime.sh), after that I've used this docker to port CoreLib / System.Runtime etc.\r\n\r\nN.B. the manpages are a bit dated in some areas, so I was reading https://github.com/illumos/illumos-gate as a source of truth. The community #illumos @libera.chat helped a lot.",
          "createdAt": "2024-06-28T15:57:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T15:57:50Z",
          "id": "IC_kwDODI9FZc6C9wbO"
        },
        {
          "author": "gwr",
          "body": "I had done this earlier, and forgot about it:\r\n> If you ran `eng/install-native-dependencies.sh`, it should had installed _some_ version of gcc (via build-essential)?\r\n[...]\r\n> Nonetheless, it is a bug in our init-compiler script that we don't bypass for platforms where rootfs provides a separate toolchain for host machine to emit target code (illumos and android NDK). For android, we have a hack __Compiler=\"default\", but for illumos lets just go with traditional environment variable magic:\r\n> \r\n> `export CLR_CC=/crossrootfs/x64/bin/x86_64-illumos-gcc`\r\n> `export CLR_CXX=/crossrootfs/x64/bin/x86_64-illumos-g++`\r\n\r\nOK, I figured this out.  We previously set CLR_CC and CLR_CXX in the shell I've been running in (to the /crossrootfs tools) That probably breaks native compile. \r\nI had to remove the artifacts and rebuild, then it worked.\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\nTime Elapsed 01:47:24.23\r\n```\r\nYea!  After removing the errant environment settings and deleting artifacts, the build worked.\r\nOn to the next phase...\r\n\r\nThanks for the help!\r\n",
          "createdAt": "2024-06-28T19:07:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-28T19:19:15Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODnteZw=="
          },
          "updatedAt": "2024-06-28T19:08:40Z",
          "id": "IC_kwDODI9FZc6C-t83"
        },
        {
          "author": "am11",
          "body": "Good news! That explains and sorry I didn't realized earlier that those environment variables override for the whole build, including cross-components.\r\n\r\nTo run a simple app on illumos, first create an app on linux host:\r\n\r\n```sh\r\n# assuming pwd is runtime\r\n$ export PATH=$PATH:$(pwd)/.dotnet\r\n$ cd ..\r\n$ dotnet new console -n helloworld\r\n$ cd helloworld\r\n$ dotnet build\r\n```\r\n\r\nThen:\r\n* copy `./bin/Debug/net8.0/` and `../runtime/artifacts/packages/Debug/Shipping/dotnet-runtime-9.0.0-dev-illumos-x64.tar.gz` to illumos machine\r\n* extract the tar.gz, say at `~/.dotnet`\r\n* `export PATH=$PATH:~/.dotnet`\r\n* and run `dotnet bin/Debug/net8.0/helloworld.dll`\r\n\r\nFor libraries port work, we can modify the code on linux, rebuild just that specific library, e.g.\r\n\r\n```sh\r\n$ ./dotnet.sh build -p:TargetOS=illumos src/libraries/System.Diagnostics.Process/src\r\n````\r\n\r\nit shows lines like this:\r\n\r\n```\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  ILLink.RoslynAnalyzer -> /Users/adeel/projects/runtime4/artifacts/bin/ILLink.RoslynAnalyzer/Debug/netstandard2.0/ILLink.RoslynAnalyzer.dll\r\n  ILLink.CodeFixProvider -> /Users/adeel/projects/runtime4/artifacts/bin/ILLink.CodeFixProvider/Debug/netstandard2.0/ILLink.CodeFixProvider.dll\r\n  ILCompiler.DependencyAnalysisFramework -> /Users/adeel/projects/runtime4/artifacts/bin/ILCompiler.DependencyAnalysisFramework/Debug/ILCompiler.DependencyAnalysisFramework.dll\r\n  Mono.Linker -> /Users/adeel/projects/runtime4/artifacts/bin/Mono.Linker/ref/Debug/net9.0/illink.dll\r\n  Mono.Linker -> /Users/adeel/projects/runtime4/artifacts/bin/Mono.Linker/Debug/net9.0/illink.dll\r\n  ILLink.Tasks -> /Users/adeel/projects/runtime4/artifacts/bin/ILLink.Tasks/Debug/net9.0/ILLink.Tasks.dll\r\n  ILLink.RoslynAnalyzer -> /Users/adeel/projects/runtime4/artifacts/bin/ILLink.RoslynAnalyzer/Debug/netstandard2.0/ILLink.RoslynAnalyzer.dll\r\n  Microsoft.Interop.SourceGeneration -> /Users/adeel/projects/runtime4/artifacts/bin/Microsoft.Interop.SourceGeneration/Debug/netstandard2.0/Microsoft.Interop.SourceGeneration.dll\r\n  System.Runtime -> /Users/adeel/projects/runtime4/artifacts/bin/System.Runtime/ref/Debug/net9.0/System.Runtime.dll\r\n  System.Diagnostics.FileVersionInfo -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.FileVersionInfo/ref/Debug/net9.0/System.Diagnostics.FileVersionInfo.dll\r\n  System.Collections.NonGeneric -> /Users/adeel/projects/runtime4/artifacts/bin/System.Collections.NonGeneric/ref/Debug/net9.0/System.Collections.NonGeneric.dll\r\n  System.Collections -> /Users/adeel/projects/runtime4/artifacts/bin/System.Collections/ref/Debug/net9.0/System.Collections.dll\r\n  LibraryImportGenerator -> /Users/adeel/projects/runtime4/artifacts/bin/LibraryImportGenerator/Debug/netstandard2.0/Microsoft.Interop.LibraryImportGenerator.dll\r\n  System.Runtime.InteropServices -> /Users/adeel/projects/runtime4/artifacts/bin/System.Runtime.InteropServices/ref/Debug/net9.0/System.Runtime.InteropServices.dll\r\n  ComInterfaceGenerator -> /Users/adeel/projects/runtime4/artifacts/bin/ComInterfaceGenerator/Debug/netstandard2.0/Microsoft.Interop.ComInterfaceGenerator.dll\r\n  System.ComponentModel -> /Users/adeel/projects/runtime4/artifacts/bin/System.ComponentModel/ref/Debug/net9.0/System.ComponentModel.dll\r\n  System.ObjectModel -> /Users/adeel/projects/runtime4/artifacts/bin/System.ObjectModel/ref/Debug/net9.0/System.ObjectModel.dll\r\n  System.ComponentModel.Primitives -> /Users/adeel/projects/runtime4/artifacts/bin/System.ComponentModel.Primitives/ref/Debug/net9.0/System.ComponentModel.Primitives.dll\r\n  System.Collections.Specialized -> /Users/adeel/projects/runtime4/artifacts/bin/System.Collections.Specialized/ref/Debug/net9.0/System.Collections.Specialized.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/ref/Debug/net9.0/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-osx/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-maccatalyst/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-tvos/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-ios/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-linux/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-freebsd/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-windows/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0/System.Diagnostics.Process.dll\r\n```\r\n\r\nso when we will have illumos flavor we can just copy its dll `artifacts/bin/System.Diagnostics.Process/Debug/net9.0-illumos/System.Diagnostics.Process.dll` and maybe also the arch-agnostic one as well `/Users/adeel/projects/runtime4/artifacts/bin/System.Diagnostics.Process/Debug/net9.0/System.Diagnostics.Process.dll` (depends on if the change was made in common files or only the arch-specific ones), to the illumos VM and replace them under `~/.dotnet` directory.",
          "createdAt": "2024-06-28T19:39:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-28T19:39:49Z",
          "id": "IC_kwDODI9FZc6C-4EZ"
        },
        {
          "author": "am11",
          "body": "@gwr, I read your updated gist. https://gist.githubusercontent.com/gwr/3520dfbf14190e9225e8214f434ca38e/raw/Debugging.txt. Congrats on the first helloworld run! :)\r\n\r\nThat 256 GB is coming from getrlimit here: https://github.com/dotnet/runtime/blob/9528c1544e180652162ed73ef1f3f71faca9c070/src/coreclr/gc/unix/gcenv.unix.cpp#L1174-L1207\r\n\r\nSide note, by default [W^X](https://en.wikipedia.org/wiki/W^X) is enabled which we can disable by `DOTNET_EnableWriteXorExecute=0` if that helps anything. It uses this impl on illumos: https://github.com/dotnet/runtime/blob/9528c1544e180652162ed73ef1f3f71faca9c070/src/coreclr/minipal/Unix/doublemapping.cpp#L51-L56\r\n",
          "createdAt": "2024-06-29T09:36:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-29T09:36:12Z",
          "id": "IC_kwDODI9FZc6DA97w"
        },
        {
          "author": "am11",
          "body": "Regarding:\r\n\r\n> I also tried adding to helloworld.runtimeconfig.json:\r\n>```\r\n>    \"configProperties\": {\r\n>      \"System.GC.HeapHardLimit\": 33554432,\r\n>      ...\r\n>    }\r\n> ```\r\n> but for some reason, that seems to be ignored.\r\n\r\nlets try updating helloworld/Program.cs on linux:\r\n\r\n```c#\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nforeach ((string key, object value) in GC.GetConfigurationVariables())\r\n{\r\n    Console.WriteLine($\"{key}: {value}\");\r\n}\r\n```\r\nthen execute `dotnet build`, copy `bin/Debug/net9.0/helloworld.dll` directory to illumos VM and re-run with `configProperties` change. It should print `GCHeapHardLimit:209715201` line with and without `DOTNET_GCHeapHardLimit=1C00000`.",
          "createdAt": "2024-06-29T10:12:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-29T10:12:33Z",
          "id": "IC_kwDODI9FZc6DBC3B"
        },
        {
          "author": "gwr",
          "body": "I'd like to deal next with the privilege `proc_lock_memory` which we can do by adding an attribute to the executable.  However, I'll need to add a small bit of OS-specific code somewhere after main() begins but before the mlock() call in PAL_InitializeCoreCLR().  Can you suggest a good place to add that OS-specific code?  Thanks.",
          "createdAt": "2024-06-29T16:09:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-29T16:09:33Z",
          "id": "IC_kwDODI9FZc6DBpcQ"
        },
        {
          "author": "am11",
          "body": "We can wrap it in `PAL_InitializeCoreCLR()`, because that's where the first `mlock()` call being made.",
          "createdAt": "2024-06-29T18:21:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-29T18:21:39Z",
          "id": "IC_kwDODI9FZc6DByit"
        },
        {
          "author": "gwr",
          "body": "I've fixed available memory determination for illumos.  See:\r\nhttps://github.com/dotnet/runtime/compare/main...gwr:dotnet-runtime:illumos2",
          "createdAt": "2024-06-30T04:44:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T04:44:15Z",
          "id": "IC_kwDODI9FZc6DCWeL"
        },
        {
          "author": "am11",
          "body": "Today, it ends up using:\r\nhttps://github.com/dotnet/runtime/blob/9a4329d65c4d272e26b2c693341ef4b26a5bc8c8/src/coreclr/gc/unix/gcenv.unix.cpp#L1276\r\n\r\nand `SYSCONF_PAGES` is defined as `_SC_AVPHYS_PAGES`, is it different than `available = sysconf(_SC_AVPHYS_PAGES) * getpagesize()`?",
          "createdAt": "2024-06-30T07:35:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T07:35:24Z",
          "id": "IC_kwDODI9FZc6DCfA_"
        },
        {
          "author": "gwr",
          "body": "I misread that `#define SYSCONF_PAGES`, thinking it was APPLE specific (hm, `ifndef`...)\r\nI'm not sure why the existing code didn't use `_SC_AVPHYS_PAGES` on illumos.\r\nBut anyway, why not use that, where available, instead of reading /proc/whatever?\r\nThe sysconf call should be much lower cost.\r\n",
          "createdAt": "2024-06-30T12:28:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T12:28:54Z",
          "id": "IC_kwDODI9FZc6DCyhQ"
        },
        {
          "author": "am11",
          "body": "I have opened https://github.com/dotnet/runtime/issues/104211 to discuss it further with a suggestion to use kstat (if applicable). This is a general tracking issue for the port so it was getting a bit off-topic. Lets open more granular issues for targeted discussions so area owners and interested folks can chime in and easily follow the details.",
          "createdAt": "2024-06-30T13:17:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T13:17:36Z",
          "id": "IC_kwDODI9FZc6DC2CF"
        },
        {
          "author": "AustinWise",
          "body": "When running a hellow world, I get a segfault like this:\r\n\r\n* WKS::in_range_for_segment (seg=0xfffd940f026f72d0, add=0xfffffc7f5bc00028 \"\") at [src/coreclr/gc/gc.cpp:3480](https://github.com/dotnet/runtime/blob/bceb98957cd1a4d14228a8709ac217a145a89713/src/coreclr/gc/gc.cpp#L3480)\r\n* WKS::seg_mapping_table_segment_of (o=0xfffffc7f5bc00028 \"\") at [src/coreclr/gc/gc.cpp:4585](https://github.com/dotnet/runtime/blob/bceb98957cd1a4d14228a8709ac217a145a89713/src/coreclr/gc/gc.cpp#L4585)\r\n* 0xfffffc7fe3d1a51b in WKS::gc_heap::find_segment (interior=0xfffffc7f5bc00028 \"\", small_segment_only_p=0) at [src/coreclr/gc/gc.cpp:26331](https://github.com/dotnet/runtime/blob/bceb98957cd1a4d14228a8709ac217a145a89713/src/coreclr/gc/gc.cpp#L26331)\r\n* 0xfffffc7fe3d5adf9 in WKS::GCHeap::IsHeapPointer (this=0x7132f0, vpObject=0xfffffc7f5bc00028, small_heap_only=false) at [src/coreclr/gc/gc.cpp:49008](https://github.com/dotnet/runtime/blob/bceb98957cd1a4d14228a8709ac217a145a89713/src/coreclr/gc/gc.cpp#L49008)\r\n* 0xfffffc7fe3d5c095 in WKS::GCHeap::Alloc (this=0x7132f0, context=0xfffffc7fef121a58, size=8184, flags=66) at [src/coreclr/gc/gc.cpp:49515](https://github.com/dotnet/runtime/blob/bceb98957cd1a4d14228a8709ac217a145a89713/src/coreclr/gc/gc.cpp#L49515)\r\n\r\n<details>\r\n<summary>Full stack trace in case that's interesting</summary>\r\n<pre>\r\n#0  WKS::in_range_for_segment (seg=0xfffd940f026f72d0, add=0xfffffc7f5bc00028 \"\") at /tank/externsrc/dotnet/runtime/src/coreclr/gc/gc.cpp:3480\r\n#1  WKS::seg_mapping_table_segment_of (o=0xfffffc7f5bc00028 \"\") at /tank/externsrc/dotnet/runtime/src/coreclr/gc/gc.cpp:4585\r\n#2  0xfffffc7fe3d1a51b in WKS::gc_heap::find_segment (interior=0xfffffc7f5bc00028 \"\", small_segment_only_p=0) at /tank/externsrc/dotnet/runtime/src/coreclr/gc/gc.cpp:26331\r\n#3  0xfffffc7fe3d5adf9 in WKS::GCHeap::IsHeapPointer (this=0x7132f0, vpObject=0xfffffc7f5bc00028, small_heap_only=false) at /tank/externsrc/dotnet/runtime/src/coreclr/gc/gc.cpp:49008\r\n#4  0xfffffc7fe3d5c095 in WKS::GCHeap::Alloc (this=0x7132f0, context=0xfffffc7fef121a58, size=8184, flags=66) at /tank/externsrc/dotnet/runtime/src/coreclr/gc/gc.cpp:49515\r\n#5  0xfffffc7fe3b03b60 in Alloc (size=8184, flags=66) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/gchelpers.cpp:227\r\n#6  0xfffffc7fe3b03e4c in AllocateSzArray (pArrayMT=0xfffffc7f6495b160, cElements=1020, flags=66) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/gchelpers.cpp:422\r\n#7  0xfffffc7fe3b03c82 in AllocateSzArray (arrayType=..., cElements=1020, flags=GC_ALLOC_PINNED_OBJECT_HEAP) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/gchelpers.cpp:367\r\n#8  0xfffffc7fe3b04fa4 in AllocateObjectArray (cElements=1020, elementType=..., bAllocateInPinnedHeap=1) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/gchelpers.cpp:897\r\n#9  0xfffffc7fe3890324 in PinnedHeapHandleTable::AllocateHandles (this=0x826500, nRequested=1) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/appdomain.cpp:347\r\n#10 0xfffffc7fe3891230 in BaseDomain::AllocateObjRefPtrsInLargeTable (this=0xfffffc7fe48adaa0 <g_pSystemDomainMemory>, nRequested=1, pStaticsInfo=0xfffffc7f64aeccf0, pMTToFillWithStaticBoxes=0x0) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/appdomain.cpp:700\r\n#11 0xfffffc7fe39a487a in LoaderAllocator::AllocateGCHandlesBytesForStaticVariables (this=0xfffffc7fe48ae268 <g_pSystemDomainMemory+1992>, pStaticsInfo=0xfffffc7f64aeccf0, cSlots=1, pMTToFillWithStaticBoxes=0x0) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/loaderallocator.cpp:2385\r\n#12 0xfffffc7fe39c6a1c in MethodTable::EnsureStaticDataAllocated (this=0xfffffc7f64aecc80) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/methodtable.cpp:3793\r\n#13 0xfffffc7fe388eef1 in FieldDesc::GetCurrentStaticAddress (this=0xfffffc7f64aec598) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/field.h:518\r\n#14 0xfffffc7fe38badd3 in CastCache::Initialize () at /tank/externsrc/dotnet/runtime/src/coreclr/vm/castcache.cpp:131\r\n#15 0xfffffc7fe3892285 in SystemDomain::LoadBaseSystemClasses (this=0xfffffc7fe48adaa0 <g_pSystemDomainMemory>) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/appdomain.cpp:1240\r\n#16 0xfffffc7fe3891b82 in SystemDomain::Init (this=0xfffffc7fe48adaa0 <g_pSystemDomainMemory>) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/appdomain.cpp:1028\r\n#17 0xfffffc7fe3f5c4a2 in EEStartupHelper () at /tank/externsrc/dotnet/runtime/src/coreclr/vm/ceemain.cpp:926\r\n#18 0xfffffc7fe3f5cae4 in <lambda(PVOID)>::operator()(PVOID) const (__closure=0xfffffc7fffdfebba, p=0x0) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/ceemain.cpp:1064\r\n#19 0xfffffc7fe3f5cc3e in EEStartup () at /tank/externsrc/dotnet/runtime/src/coreclr/vm/ceemain.cpp:1066\r\n#20 0xfffffc7fe3f5b903 in EnsureEEStarted () at /tank/externsrc/dotnet/runtime/src/coreclr/vm/ceemain.cpp:303\r\n#21 0xfffffc7fe38ff205 in CorHost2::Start (this=0x75d050) at /tank/externsrc/dotnet/runtime/src/coreclr/vm/corhost.cpp:100\r\n#22 0xfffffc7fe388873e in coreclr_initialize (exePath=0x759130 \"/root/dotnet/dotnet\", appDomainFriendlyName=0xfffffc7fe950f044 \"clrhost\", propertyCount=10, propertyKeys=0x713ee0,  propertyValues=0x714650, hostHandle=0xfffffc7fffdfee38, domainId=0xfffffc7fffdfee28) at /tank/externsrc/dotnet/runtime/src/coreclr/dlls/mscoree/exports.cpp:310\r\n</pre>\r\n</details>\r\n\r\nNotice in `seg_mapping_table_segment_of` that the object was allocated at a very high address (0xfffffc7f5bc00028). It appears that `mmap` on illumos will allocate above the non-cannoical area on x64. This does not match the assumption in `GCToOSInterface::GetVirtualMemoryMaxAddress` that adresses above 128TB will NOT be used.\r\n\r\nLet's look at `seg_mapping_table_segment_of`:\r\n\r\n```c++\r\nheap_segment* seg_mapping_table_segment_of (uint8_t* o)\r\n{\r\n    size_t index = (size_t)o >> gc_heap::min_segment_size_shr;\r\n    seg_mapping* entry = &seg_mapping_table[index];\r\n```\r\n\r\nIt's shifting down the object address to index into `seg_mapping_table`, which looks like it is allocated as one chuck (i.e., it's not a space mapping of memory). I have not looked into how this table works further, but I could imagine that changing it from covering 128TB of address space to coving the whole 16EB of 64-address space might require rethinking it.\r\n\r\nSince I'm a bit out of my depth with how the GC works, I have worked around this problem by [limiting the GC address space to 4GB](https://github.com/AustinWise/runtime/commit/d93904b05de7845c665306f652e6ccfdfc5dab51). That commit along with setting `DOTNET_GCHeapHardLimit=1C00000` is enough to make a \"hello world\" program work!\r\n\r\n",
          "createdAt": "2024-06-30T16:49:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T16:49:12Z",
          "id": "IC_kwDODI9FZc6DDELW"
        },
        {
          "author": "gwr",
          "body": "OK, what's next on the way to self hosting the dotnet build?\r\nAlso, I have some research findings to discuss re. FlushProcessWriteBuffers.\r\nLet's chat about that when we're both on IRC.",
          "createdAt": "2024-06-30T16:49:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T16:49:21Z",
          "id": "IC_kwDODI9FZc6DDEMA"
        },
        {
          "author": "am11",
          "body": "@AustinWise, please see https://github.com/dotnet/runtime/issues/104211, we have just discussed this topic over there.",
          "createdAt": "2024-06-30T16:57:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T16:57:44Z",
          "id": "IC_kwDODI9FZc6DDErL"
        },
        {
          "author": "am11",
          "body": "> OK, what's next on the way to self hosting the dotnet build?\r\n\r\nSDK requires functioning  shared framework on a platform. So System.Diagnostics.Process would be the next library to port. I think this is where procfs/kstat etc. will come handy. https://github.com/dotnet/runtime/tree/main/src/libraries/System.Diagnostics.Process",
          "createdAt": "2024-06-30T17:03:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T17:03:51Z",
          "id": "IC_kwDODI9FZc6DDFEQ"
        },
        {
          "author": "AustinWise",
          "body": "@am11 I saw the discussion about about the physical memory limits and how they fallback to `GetVirtualMemoryMaxAddress`. I was just pointing out that `GetVirtualMemoryMaxAddress` is used in other places and returns an incorrect value for illumos. illumos [use a larger maximum user-mode virtual memory address (0xFFFFFC7F.FFE00000)](https://github.com/illumos/illumos-gate/blob/master/usr/src/uts/i86pc/os/startup.c#L454) than other operating systems that CoreCLR currently supports.\r\n\r\nAnyways, thanks for posting how to get cross building working. I'm now unblocked and can play with this on my system.",
          "createdAt": "2024-06-30T21:16:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-30T21:16:54Z",
          "id": "IC_kwDODI9FZc6DDmra"
        },
        {
          "author": "gwr",
          "body": "Yeah, I forgot that I had GCHeapHardLimit set in helloworld.runtimeconfig.json\r\nand when I took that out this failure is back:\r\n```\r\n$ ./dotnet helloworld/bin/Debug/net9.0/helloworld.dll\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n```\r\nI'm looking into it.  It fails when mmap asks for 256 GB of anon pages.\r\n```\r\nThread 2 hit Breakpoint 2, VirtualReserveInner (size=274877906944, \r\n    alignment=8192, flags=0, hugePagesFlag=0, committing=false)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/unix/gcenv.unix.cpp:576\r\n576\t    assert(!(flags & VirtualReserveFlags::WriteWatch) && \"WriteWatch not supported on Unix\");\r\n(gdb) where\r\n#0  VirtualReserveInner (size=274877906944, alignment=8192, flags=0, \r\n    hugePagesFlag=0, committing=false)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/unix/gcenv.unix.cpp:576\r\n#1  0x00007fff909735b9 in GCToOSInterface::VirtualReserve (size=274877906944, \r\n    alignment=8192, flags=0, node=65535)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/unix/gcenv.unix.cpp:626\r\n#2  0x00007fff906f9a00 in WKS::virtual_alloc (size=274877906944, \r\n    use_large_pages_p=false, numa_node=65535)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/gc.cpp:5680\r\n#3  0x00007fff907068af in WKS::gc_heap::initialize_gc (\r\n    soh_segment_size=268435456, loh_segment_size=0, poh_segment_size=0)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/gc.cpp:14177\r\n#4  0x00007fff9075a349 in WKS::GCHeap::Initialize (this=0x713420)\r\n    at /g/ws/dotnet/runtime/src/coreclr/gc/gc.cpp:48482\r\n#5  0x00007fff9095c526 in EEStartupHelper ()\r\n    at /g/ws/dotnet/runtime/src/coreclr/vm/ceemain.cpp:886\r\n#6  0x00007fff9095cc24 in <lambda(PVOID)>::operator()(PVOID) const (\r\n    __closure=0x7fffbfffeb4a, p=0x0)\r\n    at /g/ws/dotnet/runtime/src/coreclr/vm/ceemain.cpp:1064\r\n#7  0x00007fff9095cd7e in EEStartup ()\r\n    at /g/ws/dotnet/runtime/src/coreclr/vm/ceemain.cpp:1066\r\n#8  0x00007fff9095ba43 in EnsureEEStarted ()\r\n    at /g/ws/dotnet/runtime/src/coreclr/vm/ceemain.cpp:303\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#9  0x00007fff902ff345 in CorHost2::Start (this=0x75cdd0)\r\n    at /g/ws/dotnet/runtime/src/coreclr/vm/corhost.cpp:100\r\n#10 0x00007fff9028887e in coreclr_initialize (\r\n    exePath=0x7593b0 \"/tank/ws/dnt/dotnet\", \r\n    appDomainFriendlyName=0x7fff9150efc4 \"clrhost\", propertyCount=10, \r\n    propertyKeys=0x7140f0, propertyValues=0x714380, hostHandle=0x7fffbfffedc8, \r\n    domainId=0x7fffbfffedb8)\r\n    at /g/ws/dotnet/runtime/src/coreclr/dlls/mscoree/exports.cpp:310\r\n#11 0x00007fff91418baa in coreclr_t::create (libcoreclr_path=..., \r\n    exe_path=0x7593b0 \"/tank/ws/dnt/dotnet\", \r\n    app_domain_friendly_name=0x7fff9150efc4 \"clrhost\", properties=..., \r\n    inst=...)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/hostpolicy/coreclr.cpp:72\r\n#12 0x00007fff9143faf5 in (anonymous namespace)::create_coreclr ()\r\n    at /g/ws/dotnet/runtime/src/native/corehost/hostpolicy/hostpolicy.cpp:75\r\n#13 0x00007fff91441858 in corehost_main (argc=2, argv=0x7fffbffff6a8)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/hostpolicy/hostpolicy.cpp:422\r\n#14 0x00007fff9182b322 in execute_app (impl_dll_dir=..., init=0x7148c0, \r\n    argc=2, argv=0x7fffbffff6a8)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/fxr/fx_muxer.cpp:145\r\n#15 0x00007fff9182d0c3 in (anonymous namespace)::read_config_and_execute (\r\n    host_command=..., host_info=..., app_candidate=..., opts=..., new_argc=2, \r\n    new_argv=0x7fffbffff6a8, mode=muxer, is_sdk_command=false, out_buffer=0x0, \r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n    buffer_size=0, required_buffer_size=0x0)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/fxr/fx_muxer.cpp:532\r\n#16 0x00007fff9182ecf5 in fx_muxer_t::handle_exec_host_command (\r\n    host_command=..., host_info=..., app_candidate=..., opts=..., argc=2, \r\n    argv=0x7fffbffff6a8, argoff=1, mode=muxer, is_sdk_command=false, \r\n    result_buffer=0x0, buffer_size=0, required_buffer_size=0x0)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/fxr/fx_muxer.cpp:1007\r\n#17 0x00007fff9182d2d2 in fx_muxer_t::execute (host_command=..., argc=2, \r\n    argv=0x7fffbffff6a8, host_info=..., result_buffer=0x0, buffer_size=0, \r\n    required_buffer_size=0x0)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/fxr/fx_muxer.cpp:578\r\n#18 0x00007fff91820d41 in hostfxr_main_startupinfo (argc=2, \r\n    argv=0x7fffbffff6a8, host_path=0x6fb060 \"/tank/ws/dnt/dotnet\", \r\n    dotnet_root=0x7fffbffff588 \"/tank/ws/dnt/\", \r\n    app_path=0x6fb090 \"/tank/ws/dnt/dotnet.dll\")\r\n    at /g/ws/dotnet/runtime/src/native/corehost/fxr/hostfxr.cpp:63\r\n#19 0x0000000000403e0f in exe_start (argc=2, argv=0x7fffbffff6a8)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/corehost.cpp:243\r\n#20 0x0000000000404146 in main (argc=2, argv=0x7fffbffff6a8)\r\n    at /g/ws/dotnet/runtime/src/native/corehost/corehost.cpp:311\r\n(gdb) \r\n```\r\n",
          "createdAt": "2024-07-01T01:25:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T01:25:54Z",
          "id": "IC_kwDODI9FZc6DEBT5"
        },
        {
          "author": "gwr",
          "body": "> @am11 I saw the discussion about about the physical memory limits and how they fallback to `GetVirtualMemoryMaxAddress`. I was just pointing out that `GetVirtualMemoryMaxAddress` is used in other places and returns an incorrect value for illumos. illumos [use a larger maximum user-mode virtual memory address (0xFFFFFC7F.FFE00000)](https://github.com/illumos/illumos-gate/blob/master/usr/src/uts/i86pc/os/startup.c#L454) than other operating systems that CoreCLR currently supports.\r\n> \r\n\r\nYeah, thanks.  It's not clear to me what DotNet wants when it calls `GetVirtualMemoryMaxAddress`.\r\nIf the plan is to map anon pages through that entire range, then that's the \"wrong question to ask\". :)\r\n\r\n",
          "createdAt": "2024-07-01T01:31:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T01:31:14Z",
          "id": "IC_kwDODI9FZc6DECdQ"
        },
        {
          "author": "am11",
          "body": "Here are the prereq workarounds to make the app working:\r\n\r\n* <del>vmem `echo \"export DOTNET_GCHeapHardLimit=0x1C00000\" >> ~/.profile`</del> not needed after https://github.com/dotnet/runtime/pull/104275\r\n* proc_lock `echo sudo usermod -K defaultpriv='basic,proc_lock_memory' $(whoami) >> ~/.profile` (see https://github.com/dotnet/runtime/issues/36632)\r\n* source it `. ~/.profile` or re-login \r\n\r\nYes, we need to figure out better solution which doesn't require any manual steps from the user and the one which is not more involved than the existing workarounds.., but until then, we can continue on libraries port because there is a lot to cover there.",
          "createdAt": "2024-07-01T07:30:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T03:29:53Z",
          "id": "IC_kwDODI9FZc6DGLud"
        },
        {
          "author": "gwr",
          "body": "Can you tell me what  `GetVirtualMemoryMaxAddress` returns on Linux?\r\n(and the memory stats for the machine that runs on)",
          "createdAt": "2024-07-01T16:23:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T16:23:56Z",
          "id": "IC_kwDODI9FZc6DKhtl"
        },
        {
          "author": "am11",
          "body": "```sh\r\n$ uname -a\r\nLinux 72098fe3cbae 6.6.31-linuxkit #1 SMP Thu May 23 08:36:57 UTC 2024 aarch64 GNU/Linux\r\n\r\n$ clang++ -xc++ - -DHOST_64BIT <<EOF\r\n#include <iostream>\r\n#include <sys/resource.h>\r\n\r\nclass GCToOSInterface {\r\npublic:\r\n    size_t GetVirtualMemoryLimit();\r\n    size_t GetVirtualMemoryMaxAddress();\r\n};\r\n\r\nsize_t GCToOSInterface::GetVirtualMemoryLimit() {\r\n    rlimit addressSpaceLimit;\r\n    if ((getrlimit(RLIMIT_AS, &addressSpaceLimit) == 0) && (addressSpaceLimit.rlim_cur != RLIM_INFINITY)) {\r\n        return addressSpaceLimit.rlim_cur;\r\n    }\r\n    // No virtual memory limit\r\n    return GetVirtualMemoryMaxAddress();\r\n}\r\n\r\nsize_t GCToOSInterface::GetVirtualMemoryMaxAddress() {\r\n#ifdef HOST_64BIT\r\n#ifndef TARGET_RISCV64\r\n    static const uint64_t _128TB = (1ull << 47);\r\n    return _128TB;\r\n#else // TARGET_RISCV64\r\n    static const uint64_t _256GB = (1ull << 38);\r\n    return _256GB;\r\n#endif // TARGET_RISCV64\r\n#else\r\n    return (size_t)-1;\r\n#endif\r\n}\r\n\r\nint main() {\r\n    GCToOSInterface interface;\r\n    std::cout << \"Virtual Memory Limit: \" << interface.GetVirtualMemoryLimit() << std::endl;\r\n    std::cout << \"Virtual Memory Max Address: \" << interface.GetVirtualMemoryMaxAddress() << std::endl;\r\n    return 0;\r\n}\r\nEOF\r\n\r\n$ ./a.out\r\nVirtual Memory Limit: 140737488355328\r\nVirtual Memory Max Address: 140737488355328\r\n\r\n$ ulimit -v\r\nunlimited\r\n\r\n$ cat /proc/meminfo\r\nMemTotal:       15072344 kB\r\nMemFree:         1836804 kB\r\nMemAvailable:   14130380 kB\r\nBuffers:          265036 kB\r\nCached:         11423340 kB\r\nSwapCached:          284 kB\r\nActive:          3671848 kB\r\nInactive:        8488140 kB\r\nActive(anon):     249108 kB\r\nInactive(anon):   233048 kB\r\nActive(file):    3422740 kB\r\nInactive(file):  8255092 kB\r\nUnevictable:           0 kB\r\nMlocked:               0 kB\r\nSwapTotal:       1572860 kB\r\nSwapFree:        1572080 kB\r\nZswap:                 0 kB\r\nZswapped:              0 kB\r\nDirty:                76 kB\r\nWriteback:             0 kB\r\nAnonPages:        468148 kB\r\nMapped:           137548 kB\r\nShmem:             10544 kB\r\nKReclaimable:     861444 kB\r\nSlab:             957316 kB\r\nSReclaimable:     861444 kB\r\nSUnreclaim:        95872 kB\r\nKernelStack:        5808 kB\r\nPageTables:         3540 kB\r\nSecPageTables:         0 kB\r\nNFS_Unstable:          0 kB\r\nBounce:                0 kB\r\nWritebackTmp:          0 kB\r\nCommitLimit:     9109032 kB\r\nCommitted_AS:    2251004 kB\r\nVmallocTotal:   133141626880 kB\r\nVmallocUsed:        2832 kB\r\nVmallocChunk:          0 kB\r\nPercpu:             3560 kB\r\nAnonHugePages:    380928 kB\r\nShmemHugePages:        0 kB\r\nShmemPmdMapped:        0 kB\r\nFileHugePages:         0 kB\r\nFilePmdMapped:         0 kB\r\nHugePages_Total:       0\r\nHugePages_Free:        0\r\nHugePages_Rsvd:        0\r\nHugePages_Surp:        0\r\nHugepagesize:       2048 kB\r\nHugetlb:               0 kB\r\n```\r\n\r\nI think we can disable the GC regions feature for now, it's disabled for macOS (linux and freebsd seem to be working fine). It is relatively a new feature and adjustments have been made a few times to make it work properly on linux as well (https://github.com/dotnet/runtime/commits/main/src/coreclr/gc/unix/gcenv.unix.cpp).\r\n\r\n```diff\r\ndiff --git a/src/coreclr/gc/gcpriv.h b/src/coreclr/gc/gcpriv.h\r\nindex 1005d002029..8b3b3eb1870 100644\r\n--- a/src/coreclr/gc/gcpriv.h\r\n+++ b/src/coreclr/gc/gcpriv.h\r\n@@ -141,7 +141,7 @@ inline void FATAL_GC_ERROR()\r\n // This means any empty regions can be freely used for any generation. For\r\n // Server GC we will balance regions between heaps.\r\n // For now disable regions for standalone GC and macOS builds\r\n-#if defined (HOST_64BIT) && !defined (BUILD_AS_STANDALONE) && !defined(__APPLE__)\r\n+#if defined (HOST_64BIT) && !defined (BUILD_AS_STANDALONE) && !defined(__APPLE__) && !defined(__sun)\r\n #define USE_REGIONS\r\n #endif //HOST_64BIT && BUILD_AS_STANDALONE && !__APPLE__\r\n \r\n```",
          "createdAt": "2024-07-01T17:10:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T17:10:15Z",
          "id": "IC_kwDODI9FZc6DK0OU"
        },
        {
          "author": "gwr",
          "body": "I'd like to compare the behavior of this same code running on Linux (under gdb).\r\nUnfortunately, my (native) build on Linux is not completing.  See:\r\nhttps://gist.github.com/gwr/3520dfbf14190e9225e8214f434ca38e/raw/LinuxBuild01.txt\r\nCan anyone suggest what's going wrong with that build? Thanks!",
          "createdAt": "2024-07-01T19:28:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T19:28:07Z",
          "id": "IC_kwDODI9FZc6DLqIo"
        },
        {
          "author": "am11",
          "body": "> File not found: '/g/ws/dotnet/runtime/THIRD-PARTY-NOTICES.TXT'. [/g/ws/dotnet/runtime/src/coreclr/.nuget/Microsoft.NETCore.ILAsm/Microsoft.NETCore.ILAsm.pkgproj]\r\n\r\nThat file definitely exists, right? It's the intermittent issue with nuget https://github.com/NuGet/Home/issues/13572 (too many inodes). Just rebuilt the `packs` subset `./build.sh packs -c Debug -gcc --keepnativesymbols true` a few times until it builds the .tar.gz we are interested in. 😅",
          "createdAt": "2024-07-01T19:35:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T19:35:16Z",
          "id": "IC_kwDODI9FZc6DLsop"
        },
        {
          "author": "gwr",
          "body": "Yeah, that doesn't seem to be working for me.  It keeps failing the nuget steps.\r\nAnything else I can do to try to work-around that? on this Linux VM?\r\n",
          "createdAt": "2024-07-01T21:13:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T21:13:27Z",
          "id": "IC_kwDODI9FZc6DMdxs"
        },
        {
          "author": "am11",
          "body": "You can directly use corerun (an internal test host) instead of dotnet.\r\n\r\n```sh\r\n$ cd runtime\r\n$ src/tests/build.sh -generatelayoutonly -p:LibrariesConfiguration=Debug\r\n```\r\nthen:\r\n\r\n```sh\r\n$ gdb --args artifacts/tests/coreclr/linux.x64.Debug/Tests/Core_Root/corerun \\\r\n    ../helloworld/bin/Debug/net9.0/helloworld.dll \r\n```",
          "createdAt": "2024-07-01T21:36:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T21:36:49Z",
          "id": "IC_kwDODI9FZc6DMlcI"
        },
        {
          "author": "am11",
          "body": "@gwr, sometimes we also have stray dotnet processes, killing them helps. `pkill -KILL dotnet` (to reclaim the inodes and other resources)",
          "createdAt": "2024-07-01T21:44:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-01T21:49:47Z",
          "id": "IC_kwDODI9FZc6DMouD"
        },
        {
          "author": "gwr",
          "body": "Thanks. the test/coreclr thing did what I needed.  With that and comparing behaviors, I believe I have a good fix to get rid of the need for the `DOTNET_GCHeapHardLimit` override.  Pushed to:\r\nhttps://github.com/dotnet/runtime/compare/main...gwr:dotnet-runtime:illumos1\r\n",
          "createdAt": "2024-07-01T23:36:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-02T00:37:22Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODn9-kw=="
          },
          "updatedAt": "2024-07-02T00:01:18Z",
          "id": "IC_kwDODI9FZc6DNzds"
        },
        {
          "author": "gwr",
          "body": "Now that helloworld is working OK, can you please remind me what\r\ntest and debug steps to take next? eg. on System.Diagnostics.Process?\r\nFor starters, after I build, I don't see an illumos dll in the artifacts.\r\nHelp, @am11 ?  Are you on matrix.org by any chance? (element IRC)",
          "createdAt": "2024-07-02T02:48:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T11:35:54Z",
          "id": "IC_kwDODI9FZc6DPAdR"
        },
        {
          "author": "am11",
          "body": "@gwr https://github.com/dotnet/runtime/issues/34944#issuecomment-2197520665 has a rough sketch.\r\n\r\nUnless illumos and solaris differ, we can keep it under `sunos` rather than separate. Replace `src/libraries/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj` with https://gist.github.com/am11/4b943df8712c6ce257a22b3aafad29f7. Basically I made a copy of `freebsd` lines with `sunos`. Of course you will need to create those files physically as well for the project build to succeed. :)",
          "createdAt": "2024-07-02T03:41:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T03:54:13Z",
          "id": "IC_kwDODI9FZc6DPR8t"
        },
        {
          "author": "gwr",
          "body": "I could still use some pointers on how to attempt a build of these libs:\r\n```\r\nsrc/libraries/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj\r\nsrc/libraries/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj\r\nsrc/libraries/System.Net.Security/src/System.Net.Security.csproj\r\n```\r\n(@am11?) Thanks!",
          "createdAt": "2024-07-02T21:24:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T21:24:21Z",
          "id": "IC_kwDODI9FZc6DZY_p"
        },
        {
          "author": "am11",
          "body": "@gwr, my previous comment has the starting point. The prereq is to understand what other platform implementations are doing to determine which features are needed  and which stack is suitable. You may find feature disparity across platforms in few cases, so this work also requires understanding what is _not_ possibly implemented in terms of public facing APIs and marking those API with attributes like `[UnsupportedOSPlatformGuard(\"illumos\"), UnsupportedOSPlatformGuard(\"solaris\")]`.",
          "createdAt": "2024-07-02T21:49:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T21:49:01Z",
          "id": "IC_kwDODI9FZc6DZif1"
        },
        {
          "author": "gwr",
          "body": "I've done some C# and can look at and understand what the other platforms are doing.\r\nHowever, when I try to buidl `System.Diagnostics.Process` nothing even appears to attempt building anything for illumos.  I guess maybe there's some configuration stuff (cmake?) that needs to change?\r\nHere's what I see:\r\n```\r\ngwr@ubuntu18:/g/ws/dotnet/runtime$ ./dotnet.sh build -p:TargetOS=illumos src/libraries/System.Diagnostics.Process/src\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  ILLink.RoslynAnalyzer -> /g/ws/dotnet/runtime/artifacts/bin/ILLink.RoslynAnalyzer/Debug/netstandard2.0/ILLink.RoslynAnalyzer.dll\r\n  ILLink.CodeFixProvider -> /g/ws/dotnet/runtime/artifacts/bin/ILLink.CodeFixProvider/Debug/netstandard2.0/ILLink.CodeFixProvider.dll\r\n  ILCompiler.DependencyAnalysisFramework -> /g/ws/dotnet/runtime/artifacts/bin/ILCompiler.DependencyAnalysisFramework/Debug/ILCompiler.DependencyAnalysisFramework.dll\r\n  Mono.Linker -> /g/ws/dotnet/runtime/artifacts/bin/Mono.Linker/ref/Debug/net9.0/illink.dll\r\n  Mono.Linker -> /g/ws/dotnet/runtime/artifacts/bin/Mono.Linker/Debug/net9.0/illink.dll\r\n  ILLink.Tasks -> /g/ws/dotnet/runtime/artifacts/bin/ILLink.Tasks/Debug/net9.0/ILLink.Tasks.dll\r\n  Microsoft.Interop.SourceGeneration -> /g/ws/dotnet/runtime/artifacts/bin/Microsoft.Interop.SourceGeneration/Debug/netstandard2.0/Microsoft.Interop.SourceGeneration.dll\r\n  LibraryImportGenerator -> /g/ws/dotnet/runtime/artifacts/bin/LibraryImportGenerator/Debug/netstandard2.0/Microsoft.Interop.LibraryImportGenerator.dll\r\n  ComInterfaceGenerator -> /g/ws/dotnet/runtime/artifacts/bin/ComInterfaceGenerator/Debug/netstandard2.0/Microsoft.Interop.ComInterfaceGenerator.dll\r\n  ILLink.RoslynAnalyzer -> /g/ws/dotnet/runtime/artifacts/bin/ILLink.RoslynAnalyzer/Debug/netstandard2.0/ILLink.RoslynAnalyzer.dll\r\n  System.Runtime -> /g/ws/dotnet/runtime/artifacts/bin/System.Runtime/ref/Debug/net9.0/System.Runtime.dll\r\n  System.ComponentModel -> /g/ws/dotnet/runtime/artifacts/bin/System.ComponentModel/ref/Debug/net9.0/System.ComponentModel.dll\r\n  System.Diagnostics.FileVersionInfo -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.FileVersionInfo/ref/Debug/net9.0/System.Diagnostics.FileVersionInfo.dll\r\n  System.Collections -> /g/ws/dotnet/runtime/artifacts/bin/System.Collections/ref/Debug/net9.0/System.Collections.dll\r\n  System.Collections.NonGeneric -> /g/ws/dotnet/runtime/artifacts/bin/System.Collections.NonGeneric/ref/Debug/net9.0/System.Collections.NonGeneric.dll\r\n  System.ObjectModel -> /g/ws/dotnet/runtime/artifacts/bin/System.ObjectModel/ref/Debug/net9.0/System.ObjectModel.dll\r\n  System.Runtime.InteropServices -> /g/ws/dotnet/runtime/artifacts/bin/System.Runtime.InteropServices/ref/Debug/net9.0/System.Runtime.InteropServices.dll\r\n  System.ComponentModel.Primitives -> /g/ws/dotnet/runtime/artifacts/bin/System.ComponentModel.Primitives/ref/Debug/net9.0/System.ComponentModel.Primitives.dll\r\n  System.Collections.Specialized -> /g/ws/dotnet/runtime/artifacts/bin/System.Collections.Specialized/ref/Debug/net9.0/System.Collections.Specialized.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/ref/Debug/net9.0/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-ios/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-maccatalyst/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-windows/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-linux/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-tvos/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-osx/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0-freebsd/System.Diagnostics.Process.dll\r\n  System.Diagnostics.Process -> /g/ws/dotnet/runtime/artifacts/bin/System.Diagnostics.Process/Debug/net9.0/System.Diagnostics.Process.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:01:04.07\r\ngwr@ubuntu18:/g/ws/dotnet/runtime$ \r\n```\r\nNote there's no \"illumos\" in any of that.  I want to make it at least _try_ to build for ilumos.\r\nWhat am I missing?  Thanks again!\r\n\r\n",
          "createdAt": "2024-07-02T22:24:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T22:24:08Z",
          "id": "IC_kwDODI9FZc6DZvFo"
        },
        {
          "author": "gwr",
          "body": "> @gwr [#34944 (comment)](https://github.com/dotnet/runtime/issues/34944#issuecomment-2197520665) has a rough sketch.\r\n\r\nOh.  Missed this.  Thanks.\r\n\r\n",
          "createdAt": "2024-07-02T22:40:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T22:40:11Z",
          "id": "IC_kwDODI9FZc6DZ1Nr"
        },
        {
          "author": "gwr",
          "body": "OK, I'm not much familiar with *.csproj files.  Thanks for the help with that.\r\nIs there any guidance on the layout of things under:\r\n`src/libraries/Common/src/Interop/`\r\nEg. `Linux/System.Native.*` vs `Linux/*.cs` and others.\r\n\r\nWhat are good tests for these libraries etc?  Instructions?\r\n\r\nOh yeah: Are these libraries necessary for self-hosting? (native build)\r\nMy work would be easier once I can build native.\r\n\r\nThanks.\r\n\r\n",
          "createdAt": "2024-07-02T23:13:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T23:43:44Z",
          "id": "IC_kwDODI9FZc6DaFeV"
        },
        {
          "author": "am11",
          "body": ">  Is there any guidance on the layout of things under:\r\n> src/libraries/Common/src/Interop/\r\n\r\nhttps://github.com/dotnet/runtime/blob/4ef65f869207154a4ad6a513bad798f8a96b7f61/docs/coding-guidelines/interop-guidelines.md\r\n\r\ne.g. we added https://github.com/dotnet/runtime/blob/4ef65f869207154a4ad6a513bad798f8a96b7f61/src/libraries/Common/src/Interop/SunOS/procfs/Interop.ProcFsStat.TryReadProcessStatusInfo.cs#L18-L20\r\n\r\nits C code lives here: https://github.com/dotnet/runtime/blob/4ef65f869207154a4ad6a513bad798f8a96b7f61/src/native/libs/System.Native/pal_io.c#L1823\r\n\r\nLinux procfs is a bit \"special\" (`src/libraries/Common/src/Interop/Linux/procfs`) because those are text files and we read them directly from C# without interop with C. illumos procfs is binary based, therefore we need the regular interop.\r\n\r\n> Oh yeah: Are these libraries necessary for self-hosting? (native build)\r\n\r\nYes; they are necessary to complete the shared framework (sfx), here is why:\r\n* `System.Diagnostics.Process` (process spawning; execve etc.) is necessary for .NET SDK, msbuild, vstest etc. vstest folks at some point were discussing about providing in-process execution but not sure the status. As it stands, it's a hard requirement to do any meaning building of .NET projects.\r\n* `System.Net.Security` is necessary for TLS based communication.\r\n* `System.IO.FileSystem.Watcher` is something which shouldn't be necessary in principle, but I have seen in past that aspnetcore (webapps) sometimes make it a requirement during build, not sure about the current status. So it can be done after the first two.",
          "createdAt": "2024-07-03T00:24:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-03T00:24:05Z",
          "id": "IC_kwDODI9FZc6DahPg"
        },
        {
          "author": "gwr",
          "body": "OK, some progress here.  Any test and debug tips?\r\nhttps://github.com/dotnet/runtime/compare/main...gwr:dotnet-runtime:illumos2\r\n",
          "createdAt": "2024-07-03T02:10:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-03T02:10:45Z",
          "id": "IC_kwDODI9FZc6DbDmA"
        },
        {
          "author": "am11",
          "body": "Testing is a bit tricky, since the test executor itself can spawn a child process and fail due to the classic chicken-egg situation (we are porting the System.Diagnostics.Process which implements process spawning). You can give it a try.\r\n\r\nOn linux:\r\n```sh\r\n$ ./dotnet.sh build -p:TargetOS=illumos -p:CrossBuild=true src/libraries/System.Diagnostics.Process/tests\r\n```\r\n\r\nThen copy `artifacts/bin/System.Diagnostics.Process.Tests/Debug/net9.0-unix` to illumos machine, say `~/projects/runtime-tests/System.Diagnostics.Process.Tests`. To run:\r\n\r\n```sh\r\nDOTNET_REMOTEEXECUTOR_SUPPORTED=0 dotnet \\\r\n  ~/projects/runtime-tests/System.Diagnostics.Process.Tests/Debug/net9.0-unix/xunit.console.dll \\\r\n  ~/projects/runtime-tests/System.Diagnostics.Process.Tests/Debug/net9.0-unix/System.Diagnostics.Process.Tests.dll \\\r\n  -notrait category=nonillumostests -notrait category=nonsolaristests \\\r\n  -notrait category=OuterLoop -notrait category=failing\r\n```\r\nIf this complains about targetframework 9.0.0-preview... etc. replace it in xunit.console.runtimeconfig.json and System.Diagnostics.Process.Tests.runtimeconfig.json (as we did in helloworld.runtimeconfig.json earlier).\r\n\r\nOnce ball starts rolling, you can look at `[PlatformSpecific(TestPlatforms.Linux)]` etc.  which may be applicable on illumos, e.g.\r\n\r\nhttps://github.com/dotnet/runtime/blob/1fe7d189db4a49bc676ddb206456709e089c2293/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs#L1667 to include the platform (`TestPlatforms.illumos` and `TestPlatforms.Solaris` are the supported enum values). Similarly, the skip platform condition looks like:\r\nhttps://github.com/dotnet/runtime/blob/1fe7d189db4a49bc676ddb206456709e089c2293/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs#L605",
          "createdAt": "2024-07-03T10:51:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T11:20:51Z",
          "id": "IC_kwDODI9FZc6DeY_E"
        },
        {
          "author": "gwr",
          "body": "Thanks.  I'm debugging.  Is there a way to ask dotnet to pause during (or shortly after) initialization so I can attach to the process with gdb?  It's difficult to get the environment and all the args setup if I let gdb actually try to start the program.  I think I saw a pause for debug attach somewhere...\r\n\r\nEg. maybe like #2456 proposes?\r\n\r\nThanks",
          "createdAt": "2024-07-03T16:46:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-03T16:50:22Z",
          "id": "IC_kwDODI9FZc6DiM5x"
        },
        {
          "author": "am11",
          "body": "For managed (C#) code. It requires a few things.\r\n* Already ported: HP libunwind (in-tree copy is at `src/native/external/libunwind`),\r\n* gdb is not supported https://github.com/dotnet/diagnostics/issues/272, so we need llvm-toolchain or just lldb, and libSOS, which has a lldbplugin (libSOS lives in https://github.com/dotnet/diagnostics). If llvm-toolchain is ported on illumos (which I once heard from SmartOS folks that it is), we can bring it onboard. It will require some tweaking in rootfs toolchain etc. but it's a nontrivial task.\r\n\r\nFor native (C/C++/assembly) runtime code debugging, just set a breakpoint and continue or use something like `while (true) { if (ptrace(PTRACE_TRACEME, 0, nullptr, nullptr) == -1) break; }`\r\n\r\nI'd use the poor man's printf-debugging technique (using `Console.WriteLine(\"I'm here!\");` etc. in C# and printf in C/C++) for now to get the base set of libraries ported.",
          "createdAt": "2024-07-03T17:30:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T10:03:39Z",
          "id": "IC_kwDODI9FZc6Dih7y"
        },
        {
          "author": "gwr",
          "body": "> Linux procfs is a bit \"special\" (`src/libraries/Common/src/Interop/Linux/procfs`) because those are text files and we read them directly from C# without interop with C. illumos procfs is binary based, therefore we need the regular interop.\r\n\r\nBTW, SunOS and illumos have the same style of /proc/pid/* that Linux has.\r\nWe should be able to do similarly as the Linux code if we want.\r\n",
          "createdAt": "2024-07-04T01:39:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T01:39:23Z",
          "id": "IC_kwDODI9FZc6DmQHk"
        },
        {
          "author": "am11",
          "body": "Last I checked it has a binary interface unlike linux, i.e. you can do stuff like `cat /proc/$$/meminfo` on linux but can't `cat /proc/$$/psinfo` on illumos where it [requires reading with structs](https://github.com/dotnet/runtime/commit/cb3ecbba3e0fdf7b00e1ad3346fd3d86739600a3#diff-38f8b9b08b6fae72aa38097604594cfef3f77156d1c5f1a5b1e768dceca90e4dR1311).",
          "createdAt": "2024-07-04T07:51:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T07:51:02Z",
          "id": "IC_kwDODI9FZc6DoId0"
        },
        {
          "author": "gwr",
          "body": "> Last I checked it has a binary interface unlike linux, i.e. you can do stuff like `cat /proc/$$/meminfo` on linux but can't `cat /proc/$$/psinfo` on illumos where it [requires reading with structs]\r\n\r\nAh right. Yeah, the content that flows over those file descriptors is not human readable.\r\n(and on the plus side, does not require any text parsing:)\r\n",
          "createdAt": "2024-07-04T12:52:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T12:52:58Z",
          "id": "IC_kwDODI9FZc6DqTfB"
        },
        {
          "author": "am11",
          "body": "Yup, note that interop layer also incurs some cost (it adds additional thunks / frames for marshaling). So reading it as text file in C# on linux with non-allocate-y text parsing is working ok. Also, System.Diagnostics.Process is not performance critical; i.e. end-users are most likely not going to put process spawning on performance-sensitive path in their code (so I believe correctness is more important than perf for this lib).",
          "createdAt": "2024-07-04T14:03:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-04T14:03:52Z",
          "id": "IC_kwDODI9FZc6Dq-7E"
        },
        {
          "author": "gwr",
          "body": "> For managed (C#) code. It requires a few things.\r\n> \r\n> * Already ported: HP libunwind (in-tree copy is at `src/native/external/libunwind`),\r\n> * gdb is not supported [...] so we need llvm-toolchain or just lldb,\r\n\r\nWe have most of llvm/clang (current is clang-18).\r\nI don't see the \"lldb\" debugger.  I guess that's still todo.\r\n\r\n> ... and libSOS, which has a lldbplugin [...] If llvm-toolchain is ported on illumos [...],\r\n> we can bring it onboard. It will require some tweaking in rootfs toolchain etc. but it's a nontrivial task.\r\n\r\nHopefully we can stick with gcc for the rootfs toolchain for a while.\r\n \r\n> For native (C/C++/assembly) runtime code debugging, just set a breakpoint and continue or use something like [... ptrace, sleep, ...]\r\n\r\nI've been doing that, but I'm having trouble coming up with a good place to put breaks, eg after all the exec and dll loading happens.  Any suggestions where's a good place for a startup breakpoint?\r\n",
          "createdAt": "2024-07-05T01:08:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T01:08:16Z",
          "id": "IC_kwDODI9FZc6DtmFa"
        },
        {
          "author": "gwr",
          "body": "Trying to debug with gdb looks like a lost cause\r\n```\r\n(gdb) run sdp-test/net9.0-unix/xunit.console.dll \\\r\n    sdp-test/net9.0-unix/System.Diagnostics.Process.Tests.dll \\\r\n    -notrait category=nonillumostests \\\r\n    -notrait category=nonsolaristests \\\r\n    -notrait category=OuterLoop \\\r\n    -notrait category=failing\r\nStarting program: /tank/ws/dnt/dotnet sdp-test/net9.0-unix/xunit.console.dll \\\r\n    sdp-test/net9.0-unix/System.Diagnostics.Process.Tests.dll \\\r\n    -notrait category=nonillumostests \\\r\n    -notrait category=nonsolaristests \\\r\n    -notrait category=OuterLoop \\\r\n    -notrait category=failing\r\n[Thread debugging using libthread_db enabled]\r\nThread 2 received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 1 (LWP 1)]\r\n0x00007ffef94b8667 in ?? ()\r\n(gdb) where\r\n#0  0x00007ffef94b8667 in ?? ()\r\n#1  0x0000000000000047 in ?? ()\r\n#2  0x0000000000000001 in ?? ()\r\n#3  0x0000000000000000 in ?? ()\r\n(gdb) \r\n```\r\nThough if I continue, it does give me a backtrace of the C# code:\r\n```\r\nContinuing.\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.IO.Enumeration.FileSystemEnumerableFactory+<>c__DisplayClass2_0.<UserFiles>b__1(System.IO.Enumeration.FileSystemEntry ByRef)\r\n   at System.IO.Enumeration.FileSystemEnumerable`1+DelegateEnumerator[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShouldIncludeEntry(System.IO.Enumeration.FileSystemEntry ByRef)\r\n   at System.IO.Enumeration.FileSystemEnumerator`1[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]..ctor(System.Collections.Generic.IEnumerable`1<System.__Canon>)\r\n   at System.IO.Directory.GetFiles(System.String, System.String, System.IO.EnumerationOptions)\r\n   at System.IO.Directory.GetFiles(System.String, System.String)\r\n   at Xunit.ConsoleClient.ConsoleRunner.GetAvailableRunnerReporters()\r\n   at Xunit.ConsoleClient.ConsoleRunner.EntryPoint(System.String[])\r\n   at Xunit.ConsoleClient.Program.Main(System.String[])\r\n\r\nThread 2 received signal SIGABRT, Aborted.\r\n0x00007fffaf3fb6aa in _lwp_kill () from /lib/64/libc.so.1\r\n```\r\nIs that all I have to work with here?  (until lldb)\r\n",
          "createdAt": "2024-07-05T01:19:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T01:22:51Z",
          "id": "IC_kwDODI9FZc6Dt0_G"
        },
        {
          "author": "am11",
          "body": "The exception stacktrace will show up without gdb as well. The exception is pointing to this method: https://github.com/dotnet/runtime/blob/64efe2654c8455e7591aa07e7e8505064f571fc4/src/libraries/System.Private.CoreLib/src/System/IO/Enumeration/FileSystemEnumerableFactory.cs#L114\r\n\r\nYou can probably repro it with helloworld app using this in Program.cs\r\n\r\n```sh\r\nEnumerationOptions options = new()\r\n{\r\n    IgnoreInaccessible = false,\r\n    RecurseSubdirectories = true\r\n};\r\n\r\n\r\nforeach (var file in Directory.GetFiles(\"/tmp\", \"*\", options))\r\n{\r\n    Console.WriteLine(file);\r\n}\r\n```\r\npublish helloworld from linux, copy to illumos and run.",
          "createdAt": "2024-07-05T01:51:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T01:51:22Z",
          "id": "IC_kwDODI9FZc6Dt9On"
        },
        {
          "author": "AustinWise",
          "body": "> The exception stacktrace will show up without gdb as well. The exception is pointing to this method: https://github.com/dotnet/runtime/blob/64efe2654c8455e7591aa07e7e8505064f571fc4/src/libraries/System.Private.CoreLib/src/System/IO/Enumeration/FileSystemEnumerableFactory.cs#L114\n> \n> \n> \n> You can probably repro it with helloworld app using this in Program.cs\n> \n> \n> \n> ```sh\n> \n> EnumerationOptions options = new()\n> \n> {\n> \n>     IgnoreInaccessible = false,\n> \n>     RecurseSubdirectories = true\n> \n> };\n> \n> \n> \n> \n> \n> foreach (var file in Directory.GetFiles(\"/tmp\", \"*\", options))\n> \n> {\n> \n>     Console.WriteLine(file);\n> \n> }\n> \n> ```\n> \n> publish helloworld from linux, copy to illumos and run.\n\nThis is pretty much the same repro I wrote for https://github.com/dotnet/runtime/issues/104448 . With that fix, running xunit library tests works.\n\nSorry for not being more clear that was the problem that PR fixes, I was a bit rushed to get some 4th things.",
          "createdAt": "2024-07-05T03:19:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-05T08:16:57Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODofMIg=="
          },
          "updatedAt": "2024-07-05T03:19:05Z",
          "id": "IC_kwDODI9FZc6DuLgN"
        },
        {
          "author": "gwr",
          "body": "> This is pretty much the same repro I wrote for #104448 . With that fix, running xunit library tests works.\r\n> \r\n> Sorry for not being more clear that was the problem that PR fixes, I was a bit rushed to get some 4th things.\r\n\r\nThanks.  I pullled your fixes for #104447 and #104448 to my local working branch.\r\nHere's what I get now:\r\n```\r\n$ DOTNET_REMOTEEXECUTOR_SUPPORTED=0 \\\r\n./dotnet sdp-test/net9.0-unix/xunit.console.dll \\\r\n    sdp-test/net9.0-unix/System.Diagnostics.Process.Tests.dll \\\r\n    -notrait category=nonillumostests \\\r\n    -notrait category=nonsolaristests \\\r\n    -notrait category=OuterLoop \\\r\n    -notrait category=failing\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.IO.Enumeration.FileSystemEnumerableFactory+<>c__DisplayClass2_0.<UserFiles>b__1(System.IO.Enumeration.FileSystemEntry ByRef)\r\n   at System.IO.Enumeration.FileSystemEnumerable`1+DelegateEnumerator[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShouldIncludeEntry(System.IO.Enumeration.FileSystemEntry ByRef)\r\n   at System.IO.Enumeration.FileSystemEnumerator`1[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]..ctor(System.Collections.Generic.IEnumerable`1<System.__Canon>)\r\n   at System.IO.Directory.GetFiles(System.String, System.String, System.IO.EnumerationOptions)\r\n   at System.IO.Directory.GetFiles(System.String, System.String)\r\n   at Xunit.ConsoleClient.ConsoleRunner.GetAvailableRunnerReporters()\r\n   at Xunit.ConsoleClient.ConsoleRunner.EntryPoint(System.String[])\r\n   at Xunit.ConsoleClient.Program.Main(System.String[])\r\n.run-test: line 13: 19114: Abort(coredump)\r\nAbort\r\n```\r\nHow do I track those name back to the source code? Are those something my \"demangle\" command could make sense of the way that works for C++ code?\r\n",
          "createdAt": "2024-07-05T14:32:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T14:32:40Z",
          "id": "IC_kwDODI9FZc6DyPga"
        },
        {
          "author": "gwr",
          "body": "Would it be useful for us to have a \"feature\" branch or something?\r\nThen I wouldn't have to cherry-pick your fixes out of the PRs,\r\nor you mine. :)",
          "createdAt": "2024-07-05T14:33:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T14:33:40Z",
          "id": "IC_kwDODI9FZc6DyP5f"
        },
        {
          "author": "am11",
          "body": "The second stacktrace seems to be same as the first one?",
          "createdAt": "2024-07-05T16:35:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T16:35:59Z",
          "id": "IC_kwDODI9FZc6Dy34T"
        },
        {
          "author": "gwr",
          "body": "> The second stacktrace seems to be same as the first one?\r\n\r\nOh.  Right.  Huh...",
          "createdAt": "2024-07-05T17:39:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T17:39:13Z",
          "id": "IC_kwDODI9FZc6DzDPa"
        },
        {
          "author": "gwr",
          "body": "I could use some help tracking the flow from (for example) the files changed in #104448 into any temporary objects and then the deliverables I copy onto the target.  It looks like the change object (and behavior) is not getting onto my test setup.\r\n\r\nFor example, the key change is in pal_io.cpp so I looked for that:\r\n```\r\ncd .../artifacts\r\n$ find . -name 'pal_io.*' -print\r\n./obj/native/net9.0-illumos-Debug-x64/System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o.d\r\n./obj/native/net9.0-illumos-Debug-x64/System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o\r\n./obj/native/net9.0-illumos-Debug-x64/System.Native/CMakeFiles/System.Native.dir/pal_io.c.o.d\r\n./obj/native/net9.0-illumos-Debug-x64/System.Native/CMakeFiles/System.Native.dir/pal_io.c.o\r\n./obj/coreclr/illumos.x64.Debug/libs-native/System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o.d\r\n./obj/coreclr/illumos.x64.Debug/libs-native/System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o\r\n```\r\nSo does that land in the dotnet program? or where?\r\nThanks\r\n",
          "createdAt": "2024-07-05T22:47:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T22:49:09Z",
          "id": "IC_kwDODI9FZc6D0Ity"
        },
        {
          "author": "am11",
          "body": "In this case, it's called `libSystem.Native.so` (as it is in `src/native/libs/System.Native` which has the CMakeLists.txt file with `project(System.Native)` directive), so I'd copy assets from `find artifacts/bin -iname 'libSystem.Native*'` onto the VM \r\n\r\n`artifacts/obj` is intermediate objects directory which participate in building the product binaries  that go in `artifacts/bin` and later `artifacts/packages`.\r\n\r\nSeparately, (not for each change like this one, but) it's good idea to refresh the environment from time to time to avoid later surprises; `rm -rf artifacts` on linux, rebuild `clr+libs+packs` subsets, and copy over runtime tar.gz to illumos machine and recreate `~/.dotnet`  (a helper script might come handy to automate it).",
          "createdAt": "2024-07-05T23:56:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-05T23:56:51Z",
          "id": "IC_kwDODI9FZc6D0Q4z"
        },
        {
          "author": "AustinWise",
          "body": "> I could use some help tracking the flow from (for example) the files changed in https://github.com/dotnet/runtime/pull/104448 into any temporary objects and then the deliverables I copy onto the target.\r\n\r\nPersonally what I've been doing is doing a full `./build.sh clr+libs+packs -cross -os illumos` and then copying over `artifacts/packages/Debug/Shipping/dotnet-runtime-9.0.0-dev-illumos-x64.tar.gz` to the target. It's a little slow, but it appears to be reliable.\r\n\r\n> How do I track those name back to the source code? Are those something my \"demangle\" command could make sense of the way that works for C++ code?\r\n\r\nOne thing you can do to get line numbers in these managed backtraces is to copy the symbol files over to the target. They live in .pdb files. So if you put `System.Prive.CoreLib.pdb` next to `System.Private.CoreLib.dll`, the runtime will automatically add the file paths and line numbers to the backtraces. You can find these PDB files in `artifacts/packages/Debug/Shipping/Microsoft.NETCore.App.Runtime.illumos-x64.9.0.0-dev.symbols.nupkg`. This is just a zip file. The structure is a little different the `dotnet-runtime-9.0.0-dev-illumos-x64.tar.gz`, but you should be able to figure out how to copy the PDB files next to their corresponding DLL files. (maybe there is a command line option to include these PDB files in the tar.gz file, but I have not checked).\r\n\r\nI'm not aware of a standalone demangling program. There is a library for it. The readme describes several types of mangling, so it could be useful:\r\n\r\nhttps://github.com/benaadams/Ben.Demystifier\r\n\r\nFor the specific example:\r\n\r\n```\r\nSystem.IO.Enumeration.FileSystemEnumerableFactory+<>c__DisplayClass2_0.<UserFiles>b__1\r\n```\r\n\r\nThe `+` indicates the start of the a nested class. The `<>` at the start of a class name indicates a compiler generated class. In this case `DisplayClass` means it is a closure of a lambda method. The name of the method where this lambda was defined is part of the name (`UserFiles`). So to put it all together, in the class `FileSystemEnumerableFactory` there is a method `UserFiles` that declared a lambda function and it is currently executing. [So here](https://github.com/dotnet/runtime/blob/a7efcd9ca9255dc9faa8b4a2761cdfdb62619610/src/libraries/System.Private.CoreLib/src/System/IO/Enumeration/FileSystemEnumerableFactory.cs#L120). (It is worth noting that normally it should not be possible for this method to cause an access violation (aka segv). This indicated memory corruption damaged the managed reference.)\r\n",
          "createdAt": "2024-07-06T02:54:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-06T02:54:41Z",
          "id": "IC_kwDODI9FZc6D0mHr"
        },
        {
          "author": "am11",
          "body": "@AustinWise if stacktrace is the same as before then either https://github.com/dotnet/runtime/pull/104448  fix didn't work, or test was done with old binaries. Maybe try running the same `xunit.console.dll` command to see if it repros on your box?",
          "createdAt": "2024-07-06T10:16:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-06T10:16:50Z",
          "id": "IC_kwDODI9FZc6D1FBg"
        },
        {
          "author": "gwr",
          "body": "Yeah, the xunit.console.dll on the test system (after copying as above) shows old dates.\r\nWill try removing the artifacts directory.",
          "createdAt": "2024-07-06T14:09:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-06T14:09:02Z",
          "id": "IC_kwDODI9FZc6D1Q87"
        },
        {
          "author": "AustinWise",
          "body": "> @AustinWise if stacktrace is the same as before then either #104448 fix didn't work, or test was done with old binaries. Maybe try running the same `xunit.console.dll` command to see if it repros on your box?\r\n\r\nI check the System.Diagnostice.Process tests to see if there was anything different. The runner gets past the test discovery phase without hitting the crash.\r\n\r\nFor what it's worth, the crash reproduced 100% of the time before my fix and reproduced 0% of the time after the fix. I have tested the fix both on SmartOS and OpenIndiana.",
          "createdAt": "2024-07-06T14:51:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-06T16:05:57Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODoniBw=="
          },
          "updatedAt": "2024-07-06T14:51:48Z",
          "id": "IC_kwDODI9FZc6D1TZt"
        },
        {
          "author": "AustinWise",
          "body": "FYI on a gdb problem I'm having: .NET translates `SIGFPE` into `DivideByZeroException`. I noticed that when I'm attached to a process using GDB, this translation breaks. Something zeros out the `siginfo->si_code` that .NET relies upon to classify these signals. I'm not sure if this is a .NET problem, GDB problem, or illumos problem. Since I don't want to deal with that rabbit hole right now, I've hacked in a fix so I can keep using GDB: https://github.com/AustinWise/runtime/commit/f9f5886aac8caaa5254ad5509665bf987125f97b",
          "createdAt": "2024-07-06T15:17:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-06T16:24:45Z",
          "id": "IC_kwDODI9FZc6D1VGZ"
        },
        {
          "author": "am11",
          "body": "Cool. Callstack was showing `GetAvailableRunnerReporters()`, which runs at the [beginning](https://github.com/dotnet/arcade/blob/76f733ee57811c38bb5b8e1ac9c6c50e92bc5dc9/src/Microsoft.DotNet.XUnitConsoleRunner/src/ConsoleRunner.cs#L38) before the tests execution. Hopefully, it will work for @gwr as well after the fresh build.",
          "createdAt": "2024-07-06T16:14:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-06T16:14:11Z",
          "id": "IC_kwDODI9FZc6D1Yi-"
        },
        {
          "author": "AustinWise",
          "body": "I noticed a problem with exception handling. .NET translates SIGSEGV into NullReferenceException. The `sigsegv_handler` is configured to use an alternate stack with `sigaltstack`. This handler does not behave like a normal signal handler: it switches the stack back to the original stack and resumes executing code. It never returns from the signal handler. On Linux this works fine: linux does not keep track of whether or not a signal handler returned after using the alternate stack. illumos however sets a bit called `SS_ONSTACK` when dispatching to a signal handler on an alternate stack and clears this bit when the handler returns. Before dispatching a signal, it checks to see if the `SS_ONSTACK` bit is set. If it set, the alternate stack is not used.\r\n\r\n.NET assumes that the alternate stack is always used for signal handlers. This means when it uses `SwitchStackAndExecuteHandler` to switch stacks, it actually just moving up the stack a bit. This causes the `siginfo` and `siginfo` context parameters passed to the signal handler to be clobbered. Sadness ensures.\r\n\r\nHere is a minimal C# reproduction program: https://github.com/AustinWise/CrashRepro/blob/master/csharp/Program.cs . It should print \"Did not crash.\". On illumos it will either crash with an unhandled AccessViolationException or an unhandled SIGSEGV. There is also a library test that triggers this behavior:\r\n\r\n```bash\r\ndotnet xunit.console.dll System.Runtime.Tests.dll -method \"System.Tests.TupleTests.Equals_GetHashCode\"\r\n```\r\n\r\nThere is an existing environment variable that is supposed to work around this: `DOTNET_EnableAlternateStackCheck=1` . However it appears this check does not work correctly. It checks to see if the point at which execution was interrupted by the signal is on an alternate stack. It should probably check whether the current stack the signal handler is using is the alternate stack. I have a commit that makes `IsRunningOnAlternateStack` more accurate and makes the aforementioned test program behave correctly: https://github.com/AustinWise/runtime/commit/6417f82ee3097bdbd8c78d16bd1ae610115fb98f\r\n\r\nI'm not sure what the correct fix would be. Not use alternate stacks on illumos? Switch stacks by manipulating the context passed to the signal handler and returning from signal handler?\r\n",
          "createdAt": "2024-07-07T22:59:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-07T22:59:32Z",
          "id": "IC_kwDODI9FZc6D4a3z"
        },
        {
          "author": "AustinWise",
          "body": "@gwr\r\n\r\nI took a stab at the System.Diagnostic.Process support. The first commit sets up the build system and the function definitions needed. They all still throw `PlatformNotSupportedException` exception: https://github.com/AustinWise/runtime/commit/361f64a6abb0d7420c5f4249f7d22a6ad5015670\r\n\r\nThe second commit is hacky and incomplete. It is enough to get the RemoteExecutor working, which unblocks running a lot of tests: https://github.com/AustinWise/runtime/commit/c48ae3d4e3e350df59d9d41777ce2aaa5474663d Note that some elements of it are copy-pasted from the linux version. While linux uses a text based format and illumos uses a binary format, the general structure is similar.\r\n\r\nI suspect I'm going to be busy for the next couple of weeks and won't have time to push this work forward during that time. I achieved my personal goal of getting the System.Runtime.Tests mostly working when run on [my branch](https://github.com/AustinWise/runtime/commits/austin/illumos/). The remaining failures look like they are caused by time zone data, but I have not looked into these deeply to confirm:\r\n\r\n* System.Tests.TimeZoneInfoTests.GetSystemTimeZones\r\n* System.Tests.TimeZoneInfoTests.ConvertTime_DateTimeOffset_NearMinMaxValue\r\n* System.Tests.TimeZoneInfoTests.ConvertTime_DateTime_NearMinAndMaxValue\r\n",
          "createdAt": "2024-07-07T23:17:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-07T23:17:35Z",
          "id": "IC_kwDODI9FZc6D4cXN"
        },
        {
          "author": "gwr",
          "body": "> FYI on a gdb problem I'm having: .NET translates `SIGFPE` into `DivideByZeroException`. I noticed that when I'm attached to a process using GDB, this translation breaks. Something zeros out the `siginfo->si_code` that .NET relies upon to classify these signals. I'm not sure if this is a .NET problem, GDB problem, or illumos problem. Since I don't want to deal with that rabbit hole right now, I've hacked in a fix so I can keep using GDB: [AustinWise@f9f5886](https://github.com/AustinWise/runtime/commit/f9f5886aac8caaa5254ad5509665bf987125f97b)\r\n\r\nI've been doing some work on gdb, and I might like to look at this too.\r\nIs there any small reproduction environment available for looking at what gdb is doing with this?",
          "createdAt": "2024-07-09T00:49:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-09T00:49:44Z",
          "id": "IC_kwDODI9FZc6EE0f6"
        },
        {
          "author": "AustinWise",
          "body": "> > FYI on a gdb problem I'm having: .NET translates `SIGFPE` into `DivideByZeroException`. I noticed that when I'm attached to a process using GDB, this translation breaks. Something zeros out the `siginfo->si_code` that .NET relies upon to classify these signals. I'm not sure if this is a .NET problem, GDB problem, or illumos problem. Since I don't want to deal with that rabbit hole right now, I've hacked in a fix so I can keep using GDB: [AustinWise@f9f5886](https://github.com/AustinWise/runtime/commit/f9f5886aac8caaa5254ad5509665bf987125f97b)\r\n> \r\n> I've been doing some work on gdb, and I might like to look at this too. Is there any small reproduction environment available for looking at what gdb is doing with this?\r\n\r\nHere is a minimal C# program that reproduces the problem, reduced from [this System.Runtime.Tests case](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Int64Tests.GenericMath.cs#L1026):\r\n\r\n```c#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\ntry\r\n{\r\n    Console.WriteLine(TestDiv(1, 0));\r\n}\r\ncatch (DivideByZeroException)\r\n{\r\n    Console.WriteLine(\"PASS\");\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nstatic long TestDiv(long a, long b)\r\n{\r\n    return a / b;\r\n}\r\n```\r\n\r\nIt runs fine without GDB attached (prints \"PASS\"). When GDB is attached, it crashes with this error:\r\n\r\n```\r\nProcess terminated. InternalError\r\n   at System.Environment.<FailFast>g____PInvoke|11_0(System.Runtime.CompilerServices.StackCrawlMarkHandle, UInt16*, System.Runtime.CompilerServices.ObjectHandleOnStack, UInt16*)\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at System.Runtime.EH.FallbackFailFast(System.Runtime.RhFailFastReason, System.Object)\r\n   at System.Runtime.EH.FailFastViaClasslib(System.Runtime.RhFailFastReason, System.Object, IntPtr)\r\n   at System.Runtime.EH.RhThrowHwEx(UInt32, ExInfo ByRef)\r\n   at Program.<<Main>$>g__TestDiv|0_0(Int64, Int64)\r\n   at Program.<Main>$(System.String[])\r\n```\r\n\r\nThis crash is reproducible on both my SmartOS and OpenIndiana systems, which are using GDB 7 and and 14 respectively.",
          "createdAt": "2024-07-09T03:49:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-09T03:49:26Z",
          "id": "IC_kwDODI9FZc6EG0fo"
        },
        {
          "author": "am11",
          "body": "This isn't new. Lets discuss signals issue where it belongs: https://github.com/dotnet/runtime/issues/35362 and keep this tracking issue limited to high-level milestones. When you will run PAL tests, you will find the differences in platform.",
          "createdAt": "2024-07-09T03:57:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-09T03:57:33Z",
          "id": "IC_kwDODI9FZc6EG8Eh"
        },
        {
          "author": "gwr",
          "body": "OK. Sorry for making this ticket a bit \"chatty\".  If I could have an email for you, I could use that for some of the \"how do I...\" questions and the like instead of making yet more noise here.  My email is in all my commits.  Thanks.",
          "createdAt": "2024-07-09T15:54:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-09T15:54:27Z",
          "id": "IC_kwDODI9FZc6ENR-a"
        },
        {
          "author": "am11",
          "body": "@gwr, I only meant to keep this issue as a main tracking one and branch off to separate issues (https://github.com/dotnet/runtime/issues) / discussions https://github.com/dotnet/runtime/discussions for specific concerns. This way we can call for help from other community members and area owners. In the current state of this thread, it is not easy to track each conversation and mentioning someone on issue with `area-Meta` would not be effective.\r\n\r\n(also, I do not know all the answers, but I can help navigating things -- preferably on GitHub in open forums)",
          "createdAt": "2024-07-10T13:14:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-10T13:14:01Z",
          "id": "IC_kwDODI9FZc6EWdkc"
        },
        {
          "author": "gwr",
          "body": "\r\n> I took a stab at the System.Diagnostic.Process support. The first commit sets up the build system and the function definitions needed. They all still throw `PlatformNotSupportedException` exception: ...\r\n\r\nThat's interesting.  Your \"skeleton\" looks somewhat like the Linux code. (confirmed below)\r\nI was trying to work from the FreeBSD code (and sharing the same BSD parts that Apple and FreeBSD share, eg. the resource control calls should work the same on illumos)\r\n\r\n> The second commit is hacky and incomplete. It is enough to get the RemoteExecutor working, which unblocks running a lot of tests: ...\r\n> Note that some elements of it are copy-pasted from the linux version. While linux uses a text based format and illumos uses a binary format, the general structure is similar.\r\n\r\nI've built what's on your branch, and can now reproduce your test results.  Thanks.\r\n",
          "createdAt": "2024-07-15T20:32:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-15T20:32:29Z",
          "id": "IC_kwDODI9FZc6E4Sve"
        },
        {
          "author": "gwr",
          "body": "I've made good progress thanks to the help from @AustinWise (thanks again!).\r\nNo more failures in the System.Diagnostics.Process.Tests\r\n\r\nHere's a github compare link for the latest:\r\nhttps://github.com/dotnet/runtime/compare/main...gwr:illumos5\r\n\r\nShould I start opening pull requests for all of those changes?  Or how best to proceed?\r\n\r\nAny guidance on what to work on next among those libraries?",
          "createdAt": "2024-07-23T19:06:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-23T19:57:30Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODrPp1Q=="
          },
          "updatedAt": "2024-07-23T19:06:18Z",
          "id": "IC_kwDODI9FZc6F4DHs"
        },
        {
          "author": "am11",
          "body": "Great progress @gwr! I think you can open a PR for review. Note that maitnainers maybe busy for .NET 9 preview 7 preparations, so it may take a while. @AustinWise and I can take a look.\r\n\r\nAlso note that there is one illumos fix I ninja'd in https://github.com/dotnet/runtime/pull/105178, which is blocked due to p7 prep (Environment.SunOS file).",
          "createdAt": "2024-07-23T19:59:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-23T19:59:54Z",
          "id": "IC_kwDODI9FZc6F4jLL"
        },
        {
          "author": "gwr",
          "body": "Here's the PR for code that runs System.Diagnostics.Process.Tests (skips but no fails)\r\nhttps://github.com/dotnet/runtime/pull/105403\r\n\r\nBTW, I tried rebasing on main from Mon. this week and ran into problems downloading stuff.\r\nNot sure why, but it didn't seem to have anything to do with my changes.",
          "createdAt": "2024-07-24T14:39:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-24T14:42:08Z",
          "id": "IC_kwDODI9FZc6GAKZh"
        },
        {
          "author": "gwr",
          "body": "Note this needs https://github.com/dotnet/runtime/pull/105207 integrated before it's fully functional including exception handling.\r\n[ since merged ]",
          "createdAt": "2024-08-16T18:54:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-29T14:30:44Z",
          "id": "IC_kwDODI9FZc6Iu7JX"
        },
        {
          "author": "gwr",
          "body": "Also need: https://github.com/dotnet/runtime/pull/105424 before this passes all tests.",
          "createdAt": "2024-08-16T18:57:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-16T18:57:36Z",
          "id": "IC_kwDODI9FZc6Iu8FD"
        },
        {
          "author": "gwr",
          "body": "These two PRs are waiting on final review and integration:\r\n\r\n- SunOS process and thread support [#105403](https://github.com/dotnet/runtime/pull/105403)\r\n\r\n- Fix MaxWorkingSet_GetNotStarted_ThrowsInvalidOperationException [#105424](https://github.com/dotnet/runtime/pull/105424)\r\n\r\nWith the changes in these two PRs, illumos works well enough to pass most tests.\r\n",
          "createdAt": "2024-09-12T13:24:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-09-12T13:57:37Z",
                "user": "sjorge"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODyAVvw=="
          },
          "updatedAt": "2024-09-12T13:24:02Z",
          "id": "IC_kwDODI9FZc6L2VPD"
        },
        {
          "author": "am11",
          "body": "> These two PRs are waiting on final review and integration:\r\n\r\nIf you look around at the opened PRs, 10.0 changes are lining up and maintainers are busy finalizing 9.0 release. These delays (especially for new ports) happen during this time of the year. All the opened PRs pending .NET 9 -> 10 switch over will be reviewed in coming weeks.\r\n\r\nMeanwhile, if you have capacity and want to stay productive, there are two remaining libs need porting `System.Net.Security` and `System.IO.FileSystem.Watcher`. This will complete the shared framework requirement (which dotnet/sdk and dotnet/msbuild rely on).",
          "createdAt": "2024-09-12T17:18:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-12T17:18:10Z",
          "id": "IC_kwDODI9FZc6L4e8Y"
        },
        {
          "author": "AustinWise",
          "body": "On the idea of various ways to do async IO mentioned in the FreeBSD issue linked above this comment: `/dev/poll`, Event Ports, and AIO were mentioned. Another possibility is the [`epoll` emulation](https://illumos.org/man/7/epoll) that has been in illumos since [2015](https://www.illumos.org/issues/5640). I think it would make sense to try to use the existing epoll code for `SystemNative_WaitForSocketEvents` and in other places before implementing a new async IO path.",
          "createdAt": "2024-09-13T21:02:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-14T05:39:13Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODyOV9A=="
          },
          "updatedAt": "2024-09-13T21:02:13Z",
          "id": "IC_kwDODI9FZc6MFQDD"
        },
        {
          "author": "am11",
          "body": "Completely agree. These are mainly the showstoppers, the quickest way to complete the ShareFX functionality is preferred so we can move to enable source build.",
          "createdAt": "2024-09-14T05:45:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-14T07:37:08Z",
          "id": "IC_kwDODI9FZc6MHzUh"
        },
        {
          "author": "gwr",
          "body": "> Meanwhile, if you have capacity and want to stay productive, there are two remaining libs need porting `System.Net.Security` and `System.IO.FileSystem.Watcher`. This will complete the shared framework requirement (which dotnet/sdk and dotnet/msbuild rely on).\r\n\r\nOK, thanks.  I'm working on System.IO.FileSystem.Watcher\r\nOne question on that:  How important is \"sub-tree\" watch?\r\nIf we only got events for in the current directory, would that be good enough for applications?\r\n(assuming we were to opt out of test cases related to changes in child paths)\r\n",
          "createdAt": "2024-09-17T13:42:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-17T16:03:01Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODyjEvw=="
          },
          "updatedAt": "2024-09-17T13:42:51Z",
          "id": "IC_kwDODI9FZc6Ma3gs"
        },
        {
          "author": "am11",
          "body": "I think we can start with simple solution to unblock the main APIs or to \"get by\". However, sub-tree watching is highly important for many advanced real world use-cases like development tools, IDEs, and build systems that need to monitor complex directory trees.",
          "createdAt": "2024-09-17T16:04:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-17T16:04:26Z",
          "id": "IC_kwDODI9FZc6Mcv86"
        },
        {
          "author": "gwr",
          "body": "Status update:\nThe dotnet core and System.Diagnostics.Process libs are working,\nwith the changes in these PRs:\nhttps://github.com/dotnet/runtime/pull/105403 \nhttps://github.com/dotnet/runtime/pull/117023 \nhttps://github.com/dotnet/runtime/pull/117462\nhttps://github.com/dotnet/runtime/pull/117463\nhttps://github.com/dotnet/runtime/pull/117464",
          "createdAt": "2025-07-11T13:13:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2025-07-11T17:19:44Z",
                "user": "Toasterson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEaSTYA=="
          },
          "updatedAt": "2025-07-11T13:13:12Z",
          "id": "IC_kwDODI9FZc62hv8i"
        },
        {
          "author": "am11",
          "body": "> The dotnet core and System.Diagnostics.Process libs are working,\n\nNot sure what you meant by \"dotnet core\" but an year ago, the status was to port three remaining libraries and S.D.Process was one of them.",
          "createdAt": "2025-07-14T04:10:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T04:10:52Z",
          "id": "IC_kwDODI9FZc622nmD"
        },
        {
          "author": "gwr",
          "body": "> > The dotnet core and System.Diagnostics.Process libs are working,\n> \n> Not sure what you meant by \"dotnet core\" but an year ago, the status was to port three remaining libraries and S.D.Process was one of them.\n\nSorry, wrong terminology.  To be specific, I use a simple test program that calls `Process.GetCurrentProcess()` and prints out various members of that object.\nAnd yes, a year ago, S.D.Process was working, but the PRs sat a while,\nand then the test procedures (and many other things) changed.\n\nHere's the test program: https://gist.github.com/gwr/110a3d1b031c58e82cbda95c3cbbbcec\n",
          "createdAt": "2025-07-14T12:49:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T13:02:40Z",
          "id": "IC_kwDODI9FZc629FUx"
        },
        {
          "author": "am11",
          "body": "Your test program could use another case of spawning the process:\n\n```c#\nstatic void TestSpawnProcess()\n{\n    try\n    {\n        ProcessStartInfo psi = new()\n        {\n            FileName = \"/bin/sh\",\n            Arguments =\n                \"\"\"\n                -c \"echo 'Hello from child process' && sleep 2\"\n                \"\"\",\n            RedirectStandardOutput = true,\n            UseShellExecute = false,\n            CreateNoWindow = true\n        };\n\n        using (Process proc = Process.Start(psi))\n        {\n            if (proc == null)\n            {\n                Console.WriteLine(\"TestSpawnProcess failed: Process.Start returned null.\");\n                return;\n            }\n\n            Console.WriteLine($\"Spawned Process.Id: {proc.Id}\");\n            Console.WriteLine($\"Spawned Process.StartTime: {proc.StartTime}\");\n            Console.WriteLine($\"Spawned Process.HasExited: {proc.HasExited}\");\n\n            string output = proc.StandardOutput.ReadToEnd();\n            Console.WriteLine($\"Spawned Process Output: {output.Trim()}\");\n\n            proc.WaitForExit();\n\n            Console.WriteLine($\"Spawned Process ExitCode: {proc.ExitCode}\");\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"TestSpawnProcess threw exception: {ex}\");\n    }\n}\n\n// then in main\n\nConsole.WriteLine(\"Running TestSpawnProcess...\");\nTestSpawnProcess();\n```",
          "createdAt": "2025-07-14T16:02:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T16:30:03Z",
          "id": "IC_kwDODI9FZc62_nYc"
        },
        {
          "author": "gwr",
          "body": "Thanks.  I added that. On both Linux and illumos the output looks like:\n```\nRunning TestSpawnProcess...\nSpawned Process.Id: 36265\nSpawned Process.StartTime: 7/14/2025 5:21:06 PM\nSpawned Process.HasExited: False\nSpawned Process Output: Hello from child process\nSpawned Process ExitCode: 0\n```\nHowever, occasionally, it seems the \"echo\" command exits before the parent has a chance to get information about it, and then the program fails like this:\n```\nRunning TestSpawnProcess...\nSpawned Process.Id: 36234\nTestSpawnProcess threw exception: System.InvalidOperationException: Cannot process request because the process (36234) has exited.\n   at System.Diagnostics.Process.ThrowIfExited(Boolean refresh)\n   at System.Diagnostics.Process.EnsureState(State state)\n   at System.Diagnostics.Process.GetProcInfo()\n   at System.Diagnostics.Process.get_StartTimeCore()\n   at System.Diagnostics.Process.get_StartTime()\n   at TestProcNS.TestProcCl.TestSpawnProcess() in /home/gwr/dotnet/procinfo/procinfo.cs:line 87\n```\nI'm not sure if that's expected or not.  Apparently it is, as I can make it happen on Linux too:\n```\nRunning TestSpawnProcess...\nSpawned Process.Id: 482448\nTestSpawnProcess threw exception: System.InvalidOperationException: Cannot process request because the process (482448) has exited.\n   at System.Diagnostics.Process.ThrowIfExited(Boolean refresh)\n   at System.Diagnostics.Process.EnsureState(State state)\n   at System.Diagnostics.Process.GetStat()\n   at System.Diagnostics.Process.get_StartTimeCore()\n   at System.Diagnostics.Process.get_StartTime()\n   at TestProcNS.TestProcCl.TestSpawnProcess() in /home/gwr/dotnet/procinfo/procinfo.cs:line 87\n```\n\n",
          "createdAt": "2025-07-14T17:27:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T17:31:49Z",
          "id": "IC_kwDODI9FZc63AkKV"
        },
        {
          "author": "am11",
          "body": "Was it with the updated code or the original version? I added sleep 2 to prevent it from exiting early.",
          "createdAt": "2025-07-14T18:08:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T18:08:44Z",
          "id": "IC_kwDODI9FZc63BBxu"
        },
        {
          "author": "gwr",
          "body": "Yeah, I tried the same, where I used /tmp/echo instead containing:\n```\n#!/bin/sh\n/bin/echo \"$@\"\nsleep 2\n```\nI improved that test case a little and pushed a fix to the gist:\nhttps://gist.github.com/gwr/110a3d1b031c58e82cbda95c3cbbbcec\n\nSorry, didn't see your update until after I came up with that.\nI think it's fine either way.\nThanks.",
          "createdAt": "2025-07-14T18:15:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-14T18:24:58Z",
          "id": "IC_kwDODI9FZc63BH3O"
        }
      ],
      "totalCount": 114,
      "endCursor": "Y3Vyc29yOnYyOpHOgytDlA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/34944",
    "title": "Tracking issue for illumos and Solaris x86-64 port work"
  },
  {
    "author": "danmoseley",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2020-04-24T00:55:44Z",
    "body": "Moved from https://github.com/dotnet/runtime/pull/2187#pullrequestreview-398621913\r\n\r\nHave we considered an analyzer that would flag stackallocs that are not clearly bounded? It's not generally possible to be sure (either way) whether it's unbounded. But an analyzer that forced a pattern of passing a constant value would be doable and might be a reasonable constraint to apply to a codebase.\r\n\r\nLooking at all our stackallocs, almost all of them already pass a constant directly or via a constant field or local. The few exceptions are not self evidently safe by eyeball, eg.,\r\n```c#\r\n        private static unsafe int EncryptDecryptHelper(OP op, ISSPIInterface secModule, SafeDeleteContext context, Span<SecurityBuffer> input, uint sequenceNumber)\r\n        {\r\n            Interop.SspiCli.SecBufferDesc sdcInOut = new Interop.SspiCli.SecBufferDesc(input.Length);\r\n            Span<Interop.SspiCli.SecBuffer> unmanagedBuffer = stackalloc Interop.SspiCli.SecBuffer[input.Length];\r\n```\r\nand it would be easy for one of them to be wrong. Would it be reasonable to have an analyzer that required them to be rewritten in constant terms, or at least something the analyzer could recognize like\r\n```c#\r\n            Span<Interop.SspiCli.SecBuffer> unmanagedBuffer = stackalloc Interop.SspiCli.SecBuffer[Math.Min(input.Length, BufferSize)];\r\n```",
    "number": 35382,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-03-13T00:18:28Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "@stephentoub ?",
          "createdAt": "2020-04-24T23:00:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-24T23:00:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYxOTI3Mjc4OA=="
        },
        {
          "author": "stephentoub",
          "body": "I think it'd be reasonable to prototype and see what we find in a few repos.  In general we definitely prefer constants, both because they're safer and a bit faster.",
          "createdAt": "2020-04-28T01:11:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-04-28T01:11:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMDMxODI3MQ=="
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOJPlOPw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/35382",
    "title": "Analyzer for potentially unbounded stackallocs"
  },
  {
    "author": "333fred",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2020-04-28T20:36:40Z",
    "body": "We should consider building and shipping a source generator for equality as part of the default .NET tooling. The C# LDT has explicitly backed off from doing a completely-customizable equality feature: https://github.com/dotnet/csharplang/blob/master/meetings/2020/LDM-2020-03-30.md#value-equality. However, it seems like customizable equality (such as sequence equality for collections, case-insensitive comparison for strings, other customizations) are and will continue to be a pain point. We should consider building a first-party generator for equality, with annotation types built into the framework and the generator shipped with the SDK. If we don't do this with the initial release of source-generators or soon afterwards, we may end up with a fractured ecosystem of such generators with no consistent style.\r\n\r\n/cc @chsienki",
    "number": 48733,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-25T21:33:27Z",
          "user": "canton7"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-11T17:26:32Z",
          "user": "Blokyk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-23T18:27:37Z",
          "user": "Youssef1313"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-13T23:37:56Z",
          "user": "Jjagg"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-15T11:26:40Z",
          "user": "AmrAlSayed0"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-20T23:28:33Z",
          "user": "bbartels"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-02T17:16:53Z",
          "user": "GSPP"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-27T21:37:02Z",
          "user": "xparadoxical"
        },
        {
          "content": "HEART",
          "createdAt": "2022-10-27T21:37:07Z",
          "user": "xparadoxical"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOCrMj_Q=="
    },
    "updatedAt": "2025-06-10T18:27:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Jose10go",
          "body": "Sorry for write here but ... is there a place for a join a discussion on  allow edition in source generation and ideas to make the edition \"save\". I cant find it ... sorry again",
          "createdAt": "2020-06-04T03:20:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-04T03:20:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzODU3ODMzNQ=="
        },
        {
          "author": "jmarolf",
          "body": "@Jose10go being able to modify existing code is not a feature we anticipate ever doing at this time. Please file a new issue on this repo if you want to discuss it.",
          "createdAt": "2020-06-04T03:55:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-04T03:55:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzODU4NzEyOA=="
        },
        {
          "author": "333fred",
          "body": "Moving this to the runtime repo, as this would be an in-box source generator.",
          "createdAt": "2021-02-25T01:33:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-25T01:33:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NTUxMDE0MA=="
        },
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-02-25T01:33:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-25T01:33:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NTUxMDE4Ng=="
        },
        {
          "author": "carlossanlop",
          "body": "@danmoseley is the `code-analyzer` label correct?",
          "createdAt": "2021-04-08T22:54:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-08T22:54:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjI4Mjg5OQ=="
        },
        {
          "author": "danmoseley",
          "body": "No, fixed.",
          "createdAt": "2021-04-08T23:16:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-04-08T23:16:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjI5NDU0Mw=="
        },
        {
          "author": "CyrusNajmabadi",
          "body": "Assigning to myself to proceed with a WG to come up with a proposal here.  TAgging @cston @333fred @RikkiGibson @jcouv who all showed interest in this topic.\r\n\r\nRelated to https://github.com/dotnet/roslyn/issues/48646.\r\n\r\n",
          "createdAt": "2021-06-02T19:08:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-02T19:08:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MzMxMzk0Ng=="
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOMtyJmg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/48733",
    "title": "Source generator proposal: Equality"
  },
  {
    "author": "brianrob",
    "labels": [
      "area-Meta",
      "tenet-performance",
      "arch-x64"
    ],
    "createdAt": "2020-05-01T21:27:05Z",
    "body": "# JCC Erratum Impact on .NET Core\r\nIn November 2019, Intel announced the Jump Conditional Code (JCC) erratum which may occur under conditions involving jump instructions that span 64-byte boundaries.  Intel is resolving the JCC erratum via a microcode update that has a potential performance side-effect.  The goal of this investigation was to determine whether or not we need to do any work in the runtime or framework to mitigate the impact of the microcode update.\r\n\r\nFor more details on the JCC erratum, or how applications can mitigate the performance impact, see https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf.\r\n\r\nThanks to everyone who participated in discussions around the JCC erratum in https://github.com/dotnet/runtime/issues/13794 and https://github.com/dotnet/runtime/issues/13795.\r\n\r\n### The Bottom Line\r\nWhile we do see some impact from the JCC microcode update on our microbenchmark results on both Windows and Linux, we don’t see any negative impact on the “real world” scenarios that we A/B tested.  **As a result, we do not intend to implement any mitigations in the runtime or framework at this time.  Instead, our ask of you, is to help us identify your business-critical scenarios where you are seeing an unacceptable impact.**  We will use this data to inform future work in this space.\r\n\r\n### Comparison Setup\r\nIn order to do a clean comparison, we setup two identical machines each with an identical Skylake processor.  One machine was setup with a internal-only test build of Windows, and the other was setup with a publicly available build of Linux (Ubuntu 18.04).  Both were able to deploy and revert the microcode update (MCU).  This allowed for A/B comparisons and switching between the two versions of microcode on each machine.\r\n\r\n### Testing Strategy\r\nThe testing strategy was to run a selection of microbenchmarks and a set of larger scenarios across Windows and Linux, with the goal of understanding how impactful the JCC microcode update is to .NET Core.\r\n\r\n### Scenario Results\r\nThe scenarios used for this test are:\r\n - Linux: Cloud-scale app throughput - TechEmpower Plaintext and JSON\r\n - Windows: WPF app start-up - Real world app (Name withheld)\r\n - Windows: ASP.NET app start-up - [Link-A-Thon](https://github.com/rynowak/link-a-thon) (This is an ASP.NET Core app that has been used for many experiments recently)\r\n\r\n**Most scenario averages are within 1%, with the exception of TechEmpower JSON which improves with the microcode update by 2.45%.**\r\n\r\nNote: Negative percentages are regressions and positive percentages are improvements.\r\n\r\n#### TechEmpower Plaintext - Linux\r\n|       | Before       | After        | Diff (%) |\r\n|-------|--------------|--------------|----------|\r\n| Avg   | 6,628,782.80 | 6,608,739.60 | -0.30%   |\r\n| Stdev | 10,334.67    | 40,146.37    |          |\r\n| Min   | 6,605,400.00 | 6,496,095.00 | -1.65%   |\r\n| Max   | 6,645,216.00 | 6,632,308.00 | -0.19%   |\r\n\r\n#### Techempower Json - Linux\r\n|       | Before     | After      | Diff (%) |\r\n|-------|------------|------------|----------|\r\n| Avg   | 568,352.00 | 582,285.40 | 2.45%    |\r\n| Stdev | 60,443.60  | 38,572.44  |          |\r\n| Min   | 437,075.00 | 513,170.00 | 17.41%   |\r\n| Max   | 667,430.00 | 631,945.00 | -5.32%   |\r\n\r\n#### WPF Real-World App Startup - Windows\r\n|     | Before   | After    | Diff (%) |\r\n|-----|----------|----------|----------|\r\n| Avg | 2740.761 | 2734.087 | -0.24%   |\r\n| Min | 2725.215 | 2696.806 | -1.04%   |\r\n| Max | 2773.128 | 2758.793 | -0.52%   |\r\n\r\n#### ASP.NET Core Link-A-Thon Startup - Windows\r\n|     | Before  | After   | Diff (%) |\r\n|-----|---------|---------|----------|\r\n| Avg | 340.604 | 338.521 | -0.61%   |\r\n| Min | 325.59  | 329.391 | 0.12%    |\r\n| Max | 375.822 | 346.351 | -7.84%   |\r\n\r\n### Microbenchmark Results\r\nThe microbenchmark suite contained 1673 benchmarks when run for this investigation.  The benchmarks were run both with and without the microcode update applied.  The graphs below represent the grouping of differences between the benchmarks with and without the microcode update applied.\r\n\r\nAxes:\r\n - X: Ratio of after/before.  Stated another way, the ratio is (withmcu/withoutmcu).  Ratios less than 1 mean the benchmark performed better with the JCC microcode update applied.  Ratios greater than 1 mean the benchmark performed worse with the JCC microcode update applied.\r\n - Y: Count of benchmarks in the bucket.\r\n![image](https://user-images.githubusercontent.com/6210322/80840714-ba0bda80-8bb2-11ea-8869-07ec55182661.png)\r\n**While there are some outliers, for the most part, the benchmarks are clustered around a ratio of 1 with the most benchmarks in the 1.038 – 1.085 bucket, which represents single digit percentage degradation.**",
    "number": 35730,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-27T23:14:23Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Dotnet-GitSync-Bot",
          "body": "I couldn't figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2020-05-01T21:27:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-01T21:27:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyMjU3NTQ5Mw=="
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOJRu_hQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/35730",
    "title": "JCC Erratum Impact on .NET Core"
  },
  {
    "author": "jonpryor",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2020-05-05T18:57:56Z",
    "body": "In Xamarin.Android 10.5 and previous releases, Xamarin.Android redistributes `mdoc.exe` and `mono-symbolicate.exe` -- along with other assemblies -- which come from a \"mono archive.\"\r\n\r\nThese utilities are used from various targets, e.g. from the `BuildDocumentation` target in `Xamarin.Android.Bindings.targets` or the `SignAndroidPackage` target in `Xamarin.Android.Common.targets`.\r\n\r\nIn a .NET 5 world, *where* should these utilities reside?  Should they continue to be distributed as part of Xamarin.Andrdoid/Microsoft.Android?  Should they be part of `dotnet` itself?  Some other NuGet package?",
    "number": 35852,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-13T19:56:10Z",
          "user": "espenrl"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHODGzKkA=="
    },
    "updatedAt": "2021-04-29T16:15:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jonpryor",
          "body": "@steveisok: Thoughts?",
          "createdAt": "2020-05-05T18:59:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-05T18:59:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyNDI0NDc1NA=="
        },
        {
          "author": "jonathanpeppers",
          "body": "A few more of these:\r\n* aprofutil.exe\r\n* cil-strip.exe\r\n* illinkanalyzer.exe\r\n* mkbundle.exe\r\n* mono-api-html.exe\r\n* mono-api-info.exe\r\n\r\nI don't know how many of these will be relevant going forward, though.",
          "createdAt": "2020-05-05T19:03:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-05T19:03:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyNDI0NjQ2MA=="
        },
        {
          "author": "steveisok",
          "body": "Good question.  It's something I'll bring up in our next stand up.  ",
          "createdAt": "2020-05-05T19:17:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-05T19:17:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyNDI1MzU0NA=="
        },
        {
          "author": "jonpryor",
          "body": "`mono-api-html` and `mono-api-info` were previously used for xamarin-android's API compatibility checks.  They should no longer be necessary.\r\n\r\nWe've agreed that we can drop `mkbundle` support for .NET 5, at least momentarily, so that's not a concern.\r\n\r\n`cil-strip.exe` will likely be \"folded\" into the `dotnet build`/`dotnet publish` infrastructure, as part of AOT/etc.  It may not need to be used directly from Xamarin.Android.\r\n\r\n`aprofutil.exe` and `illinkanalyzer.exe` are intended for \"end-developer use\", to view profiler output and analyze linker behavior.   They don't need to be part of Xamarin.Android per-se, but they need to be present *somewhere*.  Perhaps they should become `dotnet tool`s?",
          "createdAt": "2020-05-05T19:34:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-05T19:34:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYyNDI2MjMzNw=="
        },
        {
          "author": "CoffeeFlux",
          "body": "While not pressing, netcore `mkbundle` support might be nice at some point just for the purpose of trying to reproduce Blazor-related issues outside of the browser and to generally be more confident in our single-file functionality. cc: @lambdageek ",
          "createdAt": "2020-09-29T18:48:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-29T18:48:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDkxMTA3MA=="
        },
        {
          "author": "marek-safar",
          "body": "There is already single-file like support in .NET 3.1 and .NET 5.0. Maybe it can be redesign for the 3rd time to support all .NET scenarios in .NET 6.0\r\n\r\n/cc @agocke ",
          "createdAt": "2020-09-30T08:00:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-30T08:00:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwMTIzMDExMA=="
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOKcvsHg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/35852",
    "title": "Packaging & redistribution of mdoc.exe & mono-symbolicate in a .NET 6 world?"
  },
  {
    "author": "GrabYourPitchforks",
    "labels": [
      "bug",
      "area-Meta",
      "tracking-external-issue"
    ],
    "createdAt": "2020-05-08T17:21:01Z",
    "body": "We have some places in the code base where we're currently using pragmas to work around edge cases in the language's support for nullability annotations. This is a tracking issue for those pragmas to link to.\r\n\r\nThe language team is discussing how best to address these edge cases. Once those changes come online and a new compiler is available, we can remove our pragmas.",
    "number": 36132,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-16T11:45:55Z",
          "user": "mt89vein"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOBEb01w=="
    },
    "updatedAt": "2021-07-19T11:38:52Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "We have 2 hits remaining, both like\r\n```\r\n                    // https://github.com/dotnet/runtime/issues/36132\r\n                    // Compiler can't automatically deduce that nullability constraints\r\n                    // for 'result' are satisfied at this exit point.\r\n```\r\nIs there a 5.0 work item against Roslyn for these? If not, please let's move to Future now.",
          "createdAt": "2020-08-07T20:52:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-07T20:52:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDcwODI0MQ=="
        },
        {
          "author": "ericstj",
          "body": "@GrabYourPitchforks @jeffhandley if there is any work you're expecting to happen for 5.0 feel free to move this back.  Based on my read it doesn't meet the bar (unless we think there be risk behind them pragmas).",
          "createdAt": "2020-08-26T20:43:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T20:43:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTExMzQ0MA=="
        },
        {
          "author": "jeffhandley",
          "body": "@ericstj Thanks, I agree.  6.0.0 is fine.",
          "createdAt": "2020-08-26T20:44:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T20:44:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTExNDExMQ=="
        },
        {
          "author": "krwq",
          "body": "@hrrrrustic @GrabYourPitchforks there is still one hit of this in [ConcurrentBag](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs#L222-L227). I'm not sure if there is any Roslyn issue tracking this. Please link if possible. Meanwhile, moving to Future",
          "createdAt": "2021-07-19T11:38:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-19T11:38:48Z",
          "id": "IC_kwDODI9FZc40mY7N"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHONJmOzQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/36132",
    "title": "Placeholder for nullability annotation workarounds"
  },
  {
    "author": "marek-safar",
    "labels": [
      "area-Meta",
      "size-reduction"
    ],
    "createdAt": "2020-05-19T19:45:56Z",
    "body": "Sharing implementation via code duplication does not benefit size sensitive workloads and it would be great if it could be reduced from the current levels.\r\n\r\nAs an example, we can use https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/System/Text/ValueStringBuilder.cs which is compiled into 10 different assemblies while also being included inside `System.Private.CoreLib` assembly.\r\n\r\nWe could start with cleaning up duplicate code for cases which are compiled into System.Private.CoreLib as that assembly can be considered to be the common base for everything.",
    "number": 36721,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-05-20T13:04:39Z",
          "user": "DevDrake"
        },
        {
          "content": "EYES",
          "createdAt": "2024-05-10T19:10:59Z",
          "user": "PaulusParssinen"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOC30hoA=="
    },
    "updatedAt": "2021-07-22T16:24:26Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "eerhardt",
          "body": "What are the options here?\r\n\r\n* Making the shared code \"public\" so other libraries can use it\r\n* InternalsVisibleTo\r\n\r\nAre there other options?\r\n\r\nThere are also \"layering\" concerns in that 2 assemblies that want to share some code, but they don't want to depend on each other - would the shared code then need to go into a \"lower\" assembly?",
          "createdAt": "2020-05-20T23:00:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-20T23:00:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzMTc4MTY5Mg=="
        },
        {
          "author": "marek-safar",
          "body": ">Making the shared code \"public\" so other libraries can use it\r\n\r\nThere is already prior art at https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/System/Collections/Generic/ReferenceEqualityComparer.cs#L19\r\n\r\n>2 assemblies that want to share some code, but they don't want to depend on each other\r\n\r\nThat's why I picked SPC only for now\r\n\r\n>Are there other options??\r\n\r\n- Make most \"core\" assemblies facade assemblies and have massive SPC\r\n- Move the common code to shared library or libraries (any code will exist at most twice in SPC and common assembly/assemblies)\r\n",
          "createdAt": "2020-05-21T06:33:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-21T06:33:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzMTkxMTI4OA=="
        },
        {
          "author": "eerhardt",
          "body": "> As an example, we can use https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/System/Text/ValueStringBuilder.cs which is compiled into 10 different assemblies while also being included inside System.Private.CoreLib assembly.\r\n\r\n> Making the shared code \"public\" so other libraries can use it\r\n\r\nLinking https://github.com/dotnet/runtime/issues/25587#issuecomment-525424732 for why `ValueStringBuilder` hasn't been been an approved public API to date.",
          "createdAt": "2020-05-21T15:36:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-05-21T15:36:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDYzMjE2MDM0MQ=="
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOJa4AVQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/36721",
    "title": "Reduce code duplication across core assemblies"
  },
  {
    "author": "theaoqi",
    "labels": [
      "area-Meta",
      "arch-mips64"
    ],
    "createdAt": "2020-06-18T04:48:55Z",
    "body": "We're excited to announce that our CoreCLR MIPS64 Port has been [open-sourced](https://github.com/gsvm/coreclr), and the [initial commit](https://github.com/gsvm/coreclr/commit/b025fc8118a5a4042f6dd71163c962cdc408e5b5) has been pushed. The work is based on [a commit](https://github.com/dotnet/coreclr/commit/e999f37a83583768aa68ad9fda805088ac9df6b8) nearly a year ago in dotnet/coreclr. We hope to implement a release version (3.0 or 3.1) first, and then to upgrade to upstream dotnet/runtime.\r\n\r\nWe are debugging priority1 tests in CoreCLR. More than 9500 tests have been passed according to our test method. The [FlightFinder](https://github.com/aspnet/samples/tree/master/samples/aspnetcore/blazor/FlightFinder/FlightFinder.Server) sample can work on MIPS64 now.\r\n\r\nA [gsvm/loongson-dotnet](https://github.com/gsvm/loongson-dotnet) repository was created for general information, tools, downloads, etc., and further repositories may be created or forked if needed.\r\n\r\nThe work is still in progress. All contributions and suggestions are greatly welcomed. Please feel free to contact us.\r\n\r\nMany thanks to Andy Ayers (@AndyAyersMS), Bruce Forstall (@BruceForstall), David Wrighton (@davidwrighton), Fei Peng  (@fiigii), Jan Kotas (@jkotas), Jan Vorlicek (@janvorli), Maoni Stephens (@Maoni0), MeiChin-Tsai  (@MeiChin-Tsai), and our great team!",
    "number": 38069,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T04:55:53Z",
          "user": "xiangzhai"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:03:56Z",
          "user": "gxrsprite"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:14:35Z",
          "user": "BruceForstall"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:20:21Z",
          "user": "zezba9000"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:26:44Z",
          "user": "jkotas"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:45:13Z",
          "user": "pengweiqhca"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T05:56:19Z",
          "user": "JaneConan"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T06:03:04Z",
          "user": "Maoni0"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T06:04:00Z",
          "user": "Andras-Csanyi"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T06:07:26Z",
          "user": "chenxuuu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T06:10:40Z",
          "user": "jaceDeng"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T06:23:55Z",
          "user": "hez2010"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T06:25:19Z",
          "user": "windsOne"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T06:26:30Z",
          "user": "ErazerBrecht"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T06:43:22Z",
          "user": "fiigii"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T06:50:16Z",
          "user": "xiangxiren"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T06:50:18Z",
          "user": "xiangxiren"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T07:33:45Z",
          "user": "gxrsprite"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T07:54:05Z",
          "user": "theolivenbaum"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T08:10:30Z",
          "user": "EgorBo"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T08:11:34Z",
          "user": "xen0n"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T08:19:24Z",
          "user": "omariom"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T08:31:27Z",
          "user": "heavenwing"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T09:33:06Z",
          "user": "nxrighthere"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T09:36:47Z",
          "user": "inosik"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T11:16:10Z",
          "user": "sunny868"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T11:16:14Z",
          "user": "sunny868"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T11:33:37Z",
          "user": "17-ethan"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T11:33:55Z",
          "user": "CoffeeFlux"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T11:54:10Z",
          "user": "drearyrainDeng"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T12:16:09Z",
          "user": "heiher"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T12:16:12Z",
          "user": "heiher"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T12:16:15Z",
          "user": "heiher"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T12:54:10Z",
          "user": "fanyang89"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T13:10:24Z",
          "user": "expcat"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T13:32:31Z",
          "user": "MichalStrehovsky"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T14:12:04Z",
          "user": "MaxXSoft"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T14:37:45Z",
          "user": "nathan-moore"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T14:40:58Z",
          "user": "nathan-moore"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T14:47:04Z",
          "user": "jeffschwMSFT"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T14:47:35Z",
          "user": "xied75"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T14:47:36Z",
          "user": "xied75"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T14:47:37Z",
          "user": "xied75"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-18T14:47:40Z",
          "user": "xied75"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-18T15:06:44Z",
          "user": "Gnbrkm41"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T15:06:45Z",
          "user": "Gnbrkm41"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T15:06:46Z",
          "user": "Gnbrkm41"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-18T15:06:47Z",
          "user": "Gnbrkm41"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T15:07:06Z",
          "user": "JosephTremoulet"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T15:37:37Z",
          "user": "Wscar"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T15:46:53Z",
          "user": "jinyuttt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T15:48:19Z",
          "user": "yhvicey"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T16:01:24Z",
          "user": "CarolEidt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T16:19:03Z",
          "user": "miroslavp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T17:12:20Z",
          "user": "hoyosjs"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T17:19:26Z",
          "user": "reflectronic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-18T20:30:58Z",
          "user": "davidwrighton"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-18T20:30:59Z",
          "user": "davidwrighton"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-18T23:54:23Z",
          "user": "scalablecory"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T01:08:37Z",
          "user": "zyzsdy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-19T01:21:27Z",
          "user": "pengweiqhca"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-19T01:21:29Z",
          "user": "pengweiqhca"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-19T01:21:29Z",
          "user": "pengweiqhca"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-19T01:27:40Z",
          "user": "dhssingle"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T01:27:43Z",
          "user": "dhssingle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-19T02:02:22Z",
          "user": "egmkang"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-19T05:15:33Z",
          "user": "TheFanatr"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T05:15:34Z",
          "user": "TheFanatr"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-19T05:15:34Z",
          "user": "TheFanatr"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-19T05:15:35Z",
          "user": "TheFanatr"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T08:57:13Z",
          "user": "reflectronic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-19T09:25:53Z",
          "user": "kchanlee"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T09:25:54Z",
          "user": "kchanlee"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-19T09:25:57Z",
          "user": "kchanlee"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-19T09:26:01Z",
          "user": "kchanlee"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-19T14:33:02Z",
          "user": "rizamarhaban"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T01:35:06Z",
          "user": "sihuashanxq"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T01:36:44Z",
          "user": "iron2han"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T01:36:45Z",
          "user": "iron2han"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T01:36:46Z",
          "user": "iron2han"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-20T01:36:47Z",
          "user": "iron2han"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T02:56:32Z",
          "user": "saber-wang"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T05:40:08Z",
          "user": "zergmk2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T06:50:54Z",
          "user": "chuncui0207"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T06:50:58Z",
          "user": "chuncui0207"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T07:32:33Z",
          "user": "RockNHawk"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T07:32:34Z",
          "user": "RockNHawk"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T07:32:34Z",
          "user": "RockNHawk"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-20T07:32:35Z",
          "user": "RockNHawk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T07:39:51Z",
          "user": "AvenSun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T09:33:28Z",
          "user": "dczuo"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T09:33:34Z",
          "user": "dczuo"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T09:33:37Z",
          "user": "dczuo"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-20T09:33:38Z",
          "user": "dczuo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T09:46:22Z",
          "user": "strangeman375"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T09:46:25Z",
          "user": "strangeman375"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T09:46:28Z",
          "user": "strangeman375"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-20T09:46:32Z",
          "user": "strangeman375"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T11:05:03Z",
          "user": "neoayi"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T11:05:06Z",
          "user": "neoayi"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T11:05:08Z",
          "user": "neoayi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T11:43:16Z",
          "user": "mxtaooo"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-20T12:04:12Z",
          "user": "wangyanjun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-20T12:04:15Z",
          "user": "wangyanjun"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-20T12:04:16Z",
          "user": "wangyanjun"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-20T12:04:18Z",
          "user": "wangyanjun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-21T03:16:26Z",
          "user": "lindexi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-21T10:35:58Z",
          "user": "yinyue200"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-21T15:01:24Z",
          "user": "maikebing"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-21T15:01:26Z",
          "user": "maikebing"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-21T15:01:28Z",
          "user": "maikebing"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-22T03:23:43Z",
          "user": "myFirstway"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-22T03:23:45Z",
          "user": "myFirstway"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-22T03:23:46Z",
          "user": "myFirstway"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-22T03:23:50Z",
          "user": "myFirstway"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-23T01:21:51Z",
          "user": "issingle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-24T00:35:47Z",
          "user": "dingsongjie"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-25T15:07:28Z",
          "user": "Redouane64"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-25T22:38:14Z",
          "user": "maxesisn"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-25T22:38:16Z",
          "user": "maxesisn"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-26T11:37:59Z",
          "user": "KatyushaScarlet"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-26T11:38:00Z",
          "user": "KatyushaScarlet"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-26T11:38:02Z",
          "user": "KatyushaScarlet"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-26T11:38:03Z",
          "user": "KatyushaScarlet"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-27T01:39:55Z",
          "user": "endlesstravel"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-29T01:14:51Z",
          "user": "kterhorst"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-29T03:41:01Z",
          "user": "Cherrs"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-29T06:38:55Z",
          "user": "kztao"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-06-30T14:06:20Z",
          "user": "xiexin36"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-06-30T14:06:24Z",
          "user": "xiexin36"
        },
        {
          "content": "HEART",
          "createdAt": "2020-06-30T14:06:25Z",
          "user": "xiexin36"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-06-30T14:06:26Z",
          "user": "xiexin36"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-07T08:47:11Z",
          "user": "TechQuery"
        },
        {
          "content": "HEART",
          "createdAt": "2020-07-07T08:47:13Z",
          "user": "TechQuery"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-09T00:17:48Z",
          "user": "alexinea"
        },
        {
          "content": "HEART",
          "createdAt": "2020-07-09T00:17:51Z",
          "user": "alexinea"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-07-09T00:17:51Z",
          "user": "alexinea"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-10T05:26:55Z",
          "user": "huhubun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-10T15:21:11Z",
          "user": "SunGram"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-11T02:06:09Z",
          "user": "crazybber"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-11T06:52:00Z",
          "user": "luoyunchong"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-07-11T06:52:08Z",
          "user": "luoyunchong"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-07-11T10:07:27Z",
          "user": "kant2002"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-14T08:18:51Z",
          "user": "EntityFX"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-19T09:19:37Z",
          "user": "1426781227"
        },
        {
          "content": "HEART",
          "createdAt": "2020-07-19T09:21:30Z",
          "user": "1426781227"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-10T15:51:34Z",
          "user": "CaviarChen"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-08-10T15:51:36Z",
          "user": "CaviarChen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-21T00:43:34Z",
          "user": "hlizard"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-23T16:44:01Z",
          "user": "taoyouh"
        },
        {
          "content": "HEART",
          "createdAt": "2020-09-15T07:46:37Z",
          "user": "airscrat"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-09-15T07:47:14Z",
          "user": "airscrat"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-09-15T07:47:16Z",
          "user": "airscrat"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-27T07:05:33Z",
          "user": "yeqifeng2288"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-10-27T07:05:33Z",
          "user": "yeqifeng2288"
        },
        {
          "content": "HEART",
          "createdAt": "2020-10-27T07:05:35Z",
          "user": "yeqifeng2288"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-10-27T07:05:36Z",
          "user": "yeqifeng2288"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-03T09:53:37Z",
          "user": "zhk0603"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-11-03T09:53:38Z",
          "user": "zhk0603"
        },
        {
          "content": "HEART",
          "createdAt": "2020-11-03T09:53:39Z",
          "user": "zhk0603"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-11-03T09:53:40Z",
          "user": "zhk0603"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-17T21:39:30Z",
          "user": "YohanSciubukgian"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-17T22:11:33Z",
          "user": "Rattenkrieg"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-01T01:34:47Z",
          "user": "happyNBB"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-22T05:40:27Z",
          "user": "Jamesits"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-22T08:35:45Z",
          "user": "dingyx99"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-22T08:37:35Z",
          "user": "zsChocolates"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-12-23T06:18:00Z",
          "user": "YanWenKun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-01T23:40:12Z",
          "user": "Blokyk"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-02-01T23:40:13Z",
          "user": "Blokyk"
        },
        {
          "content": "HEART",
          "createdAt": "2021-02-01T23:40:14Z",
          "user": "Blokyk"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-02-01T23:40:14Z",
          "user": "Blokyk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-16T03:12:07Z",
          "user": "zonowry"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-06T17:30:13Z",
          "user": "ThomsonTan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-25T09:53:42Z",
          "user": "NN---"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-04T12:28:33Z",
          "user": "SupinePandora43"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-19T11:30:35Z",
          "user": "Hokutosei"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-30T12:36:24Z",
          "user": "ivysrono"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-15T11:07:37Z",
          "user": "xsoheilalizadeh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-10T17:16:59Z",
          "user": "RokeJulianLockhart"
        }
      ],
      "totalCount": 180,
      "endCursor": "Y3Vyc29yOnYyOpHOBH2ZJQ=="
    },
    "updatedAt": "2023-07-30T12:25:47Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Dotnet-GitSync-Bot",
          "body": "I couldn't figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2020-06-18T04:49:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-18T04:49:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTc3MDE5Mw=="
        },
        {
          "author": "BruceForstall",
          "body": "This is great to hear. Congratulations on the progress!\r\n\r\n@richlander @dotnet/jit-contrib @jeffschwMSFT ",
          "createdAt": "2020-06-18T05:16:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T06:50:39Z",
                "user": "xiangzhai"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T08:55:35Z",
                "user": "Gnbrkm41"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T11:30:59Z",
                "user": "hez2010"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T12:16:22Z",
                "user": "heiher"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:16Z",
                "user": "theaoqi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T22:57:18Z",
                "user": "richlander"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:15:59Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:40Z",
                "user": "myFirstway"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-19T09:19:23Z",
                "user": "1426781227"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHOBKxoTA=="
          },
          "updatedAt": "2020-06-18T05:16:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTc3ODMyMA=="
        },
        {
          "author": "geffzhang",
          "body": "Congratulations on reaching such a milestone ",
          "createdAt": "2020-06-18T05:44:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:46Z",
                "user": "theaoqi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:16:01Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:39Z",
                "user": "myFirstway"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBIEs2Q=="
          },
          "updatedAt": "2020-06-18T05:44:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTc4ODc5Nw=="
        },
        {
          "author": "mfjiang",
          "body": "nice job !",
          "createdAt": "2020-06-18T05:45:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:47Z",
                "user": "theaoqi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:16:02Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:38Z",
                "user": "myFirstway"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-07-19T09:19:05Z",
                "user": "1426781227"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-23T01:13:39Z",
                "user": "hjkl950217"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOBaxQnw=="
          },
          "updatedAt": "2020-06-18T05:45:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTc4OTQzNg=="
        },
        {
          "author": "myFirstway",
          "body": "# It's exciting",
          "createdAt": "2020-06-18T05:51:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:51Z",
                "user": "theaoqi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:16:04Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:36Z",
                "user": "myFirstway"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBIEs1Q=="
          },
          "updatedAt": "2020-06-18T05:51:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTc5MTc4Mw=="
        },
        {
          "author": "fiigii",
          "body": "Great job! Congrat Loongson!",
          "createdAt": "2020-06-18T06:46:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T06:50:48Z",
                "user": "xiangzhai"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T11:30:40Z",
                "user": "hez2010"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T12:16:24Z",
                "user": "heiher"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:54Z",
                "user": "theaoqi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:16:07Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:34Z",
                "user": "myFirstway"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-07-19T09:18:38Z",
                "user": "1426781227"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-09-17T09:26:44Z",
                "user": "Albert25cby"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-05-06T17:30:44Z",
                "user": "ThomsonTan"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHOBp4PHg=="
          },
          "updatedAt": "2020-06-18T06:46:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTgxNDgzOA=="
        },
        {
          "author": "janvorli",
          "body": "Awesome! I was looking for this moment. Congratulations!",
          "createdAt": "2020-06-18T08:48:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T10:32:38Z",
                "user": "xiangzhai"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T12:16:25Z",
                "user": "heiher"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-18T15:39:34Z",
                "user": "xied75"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-18T15:49:58Z",
                "user": "theaoqi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-19T05:16:09Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T05:16:09Z",
                "user": "TheFanatr"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:29Z",
                "user": "myFirstway"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-22T03:23:29Z",
                "user": "myFirstway"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOBIEszQ=="
          },
          "updatedAt": "2020-06-18T08:48:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NTg3NjQ0Ng=="
        },
        {
          "author": "maikebing",
          "body": "Congratulations on reaching such a milestone",
          "createdAt": "2020-06-19T07:59:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-19T07:59:44Z",
                "user": "maikebing"
              },
              {
                "content": "LAUGH",
                "createdAt": "2020-06-19T07:59:51Z",
                "user": "maikebing"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-19T07:59:53Z",
                "user": "maikebing"
              },
              {
                "content": "HEART",
                "createdAt": "2020-06-19T07:59:56Z",
                "user": "maikebing"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-06-19T07:59:59Z",
                "user": "maikebing"
              },
              {
                "content": "EYES",
                "createdAt": "2020-06-19T08:00:02Z",
                "user": "maikebing"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-21T04:36:46Z",
                "user": "saber-wang"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-22T03:23:19Z",
                "user": "myFirstway"
              },
              {
                "content": "LAUGH",
                "createdAt": "2020-06-22T03:23:22Z",
                "user": "myFirstway"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-06-22T03:23:22Z",
                "user": "myFirstway"
              },
              {
                "content": "HEART",
                "createdAt": "2020-06-22T03:23:23Z",
                "user": "myFirstway"
              },
              {
                "content": "ROCKET",
                "createdAt": "2020-06-22T03:23:23Z",
                "user": "myFirstway"
              },
              {
                "content": "EYES",
                "createdAt": "2020-06-22T03:23:24Z",
                "user": "myFirstway"
              },
              {
                "content": "EYES",
                "createdAt": "2020-06-23T15:50:21Z",
                "user": "xied75"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-07-11T06:52:19Z",
                "user": "luoyunchong"
              }
            ],
            "totalCount": 15,
            "endCursor": "Y3Vyc29yOnYyOpHOBKDiiQ=="
          },
          "updatedAt": "2020-06-19T07:59:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NjQ5ODIyMw=="
        },
        {
          "author": "RockNHawk",
          "body": "Great job!",
          "createdAt": "2020-06-20T07:33:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-06-22T02:16:50Z",
                "user": "theaoqi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBIEgHg=="
          },
          "updatedAt": "2020-06-20T07:33:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0Njk1Nzg5OA=="
        },
        {
          "author": "lindexi",
          "body": "Awesome",
          "createdAt": "2020-06-21T03:16:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-06-22T02:16:54Z",
                "user": "theaoqi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBIEgIQ=="
          },
          "updatedAt": "2020-06-21T03:16:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NzA3MzAyMw=="
        },
        {
          "author": "theaoqi",
          "body": "> Awesome! I was looking for this moment. Congratulations!\r\n\r\nSorry, it was late ;)",
          "createdAt": "2020-06-22T02:15:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2020-06-27T00:36:05Z",
                "user": "xied75"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBIti8w=="
          },
          "updatedAt": "2020-06-22T02:15:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY0NzIyODYzMw=="
        },
        {
          "author": "KatyushaScarlet",
          "body": "Congratulations!",
          "createdAt": "2020-06-26T11:38:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-26T11:38:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDEzMzgxMw=="
        },
        {
          "author": "maikebing",
          "body": "When are you planning to merge into .net 5?",
          "createdAt": "2020-06-29T10:10:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-29T11:29:31Z",
                "user": "lindexi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-01T11:07:53Z",
                "user": "strangeman375"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBJEQ4A=="
          },
          "updatedAt": "2020-06-29T10:10:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTAzNzg4NA=="
        },
        {
          "author": "theaoqi",
          "body": "> When are you planning to merge into .net 5?\r\n\r\nWe hope to begin the work of upgrading to master this year, but I cannot give an accurate time at present. Even if we finish all the work, I am not sure when dotnet/runtime will (or maybe already?) close the door for such a new port to stabilize .NET 5. .NET 6 is an LTS release. If possible, maybe we will try to merge into .NET 6. @BruceForstall , may I ask when is the deadline for merging such a big feature/port into .NET 5 and .NET 6?",
          "createdAt": "2020-06-30T08:08:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-06-30T15:34:30Z",
                "user": "xied75"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-01T11:08:28Z",
                "user": "strangeman375"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBJERHA=="
          },
          "updatedAt": "2020-06-30T08:08:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTYyODQ4Nw=="
        },
        {
          "author": "BruceForstall",
          "body": "@theaoqi It's too late for such a large amount of work to go into .NET 5. The 'master' branch will become the .NET 6 branch probably in early September. Generally speaking, it would be better to try to start the process of upstreaming this work to 'master' early in the .NET 6 product cycle, so there is enough time to do that work, and when risk tolerance for change is higher than it is towards the end.",
          "createdAt": "2020-06-30T18:33:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-06-30T18:33:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTk2OTc5MQ=="
        },
        {
          "author": "jkotas",
          "body": "Also, upstreaming of the delta that is this large will likely need to be broken into multiple smaller PRs to be manageable. It expect that it will take several months of effort to merge.",
          "createdAt": "2020-06-30T19:03:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-01T11:09:25Z",
                "user": "strangeman375"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-07-17T18:02:06Z",
                "user": "ThomsonTan"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBKtqDg=="
          },
          "updatedAt": "2020-06-30T19:03:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTk4NTI1NQ=="
        },
        {
          "author": "theaoqi",
          "body": "@BruceForstall @jkotas , thank you, you have helped to make it more clear for me!",
          "createdAt": "2020-07-01T03:26:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-01T03:26:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjE2NTY0Mg=="
        },
        {
          "author": "jason522008",
          "body": "bravo loongson",
          "createdAt": "2020-07-01T03:37:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-01T03:37:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjE2OTI5Mw=="
        },
        {
          "author": "InCerryGit",
          "body": "Congratulations! Great job!",
          "createdAt": "2020-07-09T13:34:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-09T13:34:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjEzMDY5MA=="
        },
        {
          "author": "SofiaXu",
          "body": "Great job!",
          "createdAt": "2020-07-17T05:27:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-17T05:27:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTg2MzE4Nw=="
        },
        {
          "author": "1426781227",
          "body": "时刻关注着，dotnet发展！一起进入新的元年！",
          "createdAt": "2020-07-19T09:26:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-19T09:26:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDYxNTYwMA=="
        },
        {
          "author": "jkotas",
          "body": "@theaoqi @xiangzhai Do you have an estimate for when you will start upstreaming your changes to dotnet/runtime? Do you expect that you will start upstreaming the changes in next 6 months? We would like to make sure that we plan for it accordingly. ",
          "createdAt": "2020-11-17T19:12:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-17T19:14:34Z",
                "user": "xied75"
              },
              {
                "content": "HEART",
                "createdAt": "2020-11-17T19:14:36Z",
                "user": "xied75"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-17T21:39:26Z",
                "user": "YohanSciubukgian"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-18T00:30:45Z",
                "user": "lindexi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-18T05:41:55Z",
                "user": "drearyrainDeng"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-18T05:45:12Z",
                "user": "myFirstway"
              },
              {
                "content": "HEART",
                "createdAt": "2020-11-18T05:45:14Z",
                "user": "myFirstway"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-18T05:52:49Z",
                "user": "pengweiqhca"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-18T07:16:21Z",
                "user": "gxrsprite"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-19T14:25:26Z",
                "user": "yinyue200"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-23T05:45:29Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-06T17:31:27Z",
                "user": "ThomsonTan"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHOBp4PiQ=="
          },
          "updatedAt": "2020-11-17T19:12:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTE0MTcyMQ=="
        },
        {
          "author": "theaoqi",
          "body": "Thank you very much, @jkotas . I cannot be sure about this now. I will follow up on this, and let you know if there is any progress.",
          "createdAt": "2020-11-20T05:39:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T05:39:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDg2MzY4MA=="
        },
        {
          "author": "happyNBB",
          "body": "加油！！👍👍👍",
          "createdAt": "2020-12-01T01:36:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-01T01:36:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNjE1OTI5Ng=="
        },
        {
          "author": "driver1998",
          "body": "@theaoqi Port of the 3.1 release is generally available now, I guess it is time now for upstreaming? Hopefully it can catch up to .NET 6.",
          "createdAt": "2020-12-22T02:28:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-22T15:20:57Z",
                "user": "yinyue200"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-23T05:45:10Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-27T05:49:46Z",
                "user": "horeaper"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-06T09:24:26Z",
                "user": "myFirstway"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-06T17:32:43Z",
                "user": "ThomsonTan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-11-02T08:04:37Z",
                "user": "caizp2008"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOCAx6jw=="
          },
          "updatedAt": "2020-12-22T02:28:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTMwMTg3NQ=="
        },
        {
          "author": "woxihuanjia",
          "body": "congratulations！",
          "createdAt": "2021-05-06T06:25:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-06T06:25:58Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzI2MTg2NQ=="
        },
        {
          "author": "wanghucheng66",
          "body": "Great job!",
          "createdAt": "2023-07-30T12:25:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-30T12:25:47Z",
          "id": "IC_kwDODI9FZc5ixb-c"
        }
      ],
      "totalCount": 27,
      "endCursor": "Y3Vyc29yOnYyOpHOYsW_nA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/38069",
    "title": "Open-sourcing CoreCLR MIPS64 Port"
  },
  {
    "author": "am11",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2020-07-13T04:47:22Z",
    "body": "Under `src/libraries`, these are the lists of unique constants:\r\n\r\n<details>\r\n  <summary>defined in project files (71)</summary>\r\n<br/>\r\n\r\n* ALLOW_PARTIALLY_TRUSTED_CALLERS\r\n* ActivatorUtilities_In_DependencyInjection\r\n* BUILDING_INBOX_LIBRARY\r\n* CAS_OBSOLETIONS\r\n* CODEDOM\r\n* DEBUG\r\n* DRAWING_NAMESPACE\r\n* ENABLECOMBINDER\r\n* ENABLE_HTTP_HANDLER\r\n* ES_BUILD_STANDALONE\r\n* EVENTSOURCE_ACTIVITY_SUPPORT\r\n* EVENTSOURCE_ENUMERATE_SUPPORT\r\n* FEATURE_COMPILE\r\n* FEATURE_COMPILED_XSL\r\n* FEATURE_DLG_INVOKE\r\n* FEATURE_DSA_HASHDATA\r\n* FEATURE_ECDH_DERIVEFROM\r\n* FEATURE_ECPARAMETERS\r\n* FEATURE_FAST_CREATE\r\n* FEATURE_INTERPRET\r\n* FEATURE_MANAGED_ETW\r\n* FEATURE_REGISTRY\r\n* FEATURE_SERIALIZATION\r\n* FEATURE_SYSTEM_EVENTS\r\n* FEATURE_TRACING\r\n* FEATURE_UTF8STRING\r\n* FEATURE_WINDOWS_SYSTEM_COLORS\r\n* FEATURE_XML_XPATH_ID\r\n* FLAVOR_WHIDBEY\r\n* FUNCTIONAL_TESTS\r\n* HAVE_THUMBPRINT_OVERLOADS\r\n* HTTP3\r\n* HTTP_DLL\r\n* IL_EMIT\r\n* INTERNAL_ASYMMETRIC_IMPLEMENTATIONS\r\n* INTERNAL_NULLABLE_ATTRIBUTES\r\n* LATEBINDING\r\n* MAKE_ABW_PUBLIC\r\n* MS_IO_REDIST\r\n* NETSTANDARD\r\n* NOSPAN\r\n* NO_EVENTCOMMANDEXECUTED_SUPPORT\r\n* NO_EVENTSOURCE_COMPLEX_TYPE_SUPPORT\r\n* PAPI_AD\r\n* PAPI_REGSAM\r\n* PRODUCT\r\n* REGISTRY_ASSEMBLY\r\n* RESOURCES_EXTENSIONS\r\n* ReflectionOnly\r\n* SAVE_ASSEMBLIES\r\n* SERIAL_PORTS\r\n* SYSNETHTTP_NO_OPENSSL\r\n* SYSNETSECURITY_NO_OPENSSL\r\n* SYSTEM_NET_PRIMITIVES_DLL\r\n* SYSTEM_NET_SOCKETS_DLL\r\n* TARGETS_BROWSER\r\n* TARGET_WINDOWS\r\n* TESTING_CNG_IMPLEMENTATION\r\n* TRACE\r\n* TargetsWindows\r\n* USE_CTX_CACHE\r\n* USE_INTERNAL_ACCESSIBILITY\r\n* USE_INTERNAL_CONCURRENT_COLLECTIONS\r\n* USE_INTERNAL_THREADING\r\n* USE_MDT_EVENTSOURCE\r\n* Unix\r\n* W3C_DEFAULT_ID_FORMAT\r\n* WINHTTPHANDLER_DLL\r\n* WINHTTPHANDLER_TEST\r\n* XMLSERIALIZERGENERATORTESTS\r\n* netcoreapp\r\n</details>\r\n\r\n<details>\r\n  <summary>used in C# / VB code (196)</summary>\r\n<br/>\r\n\r\n* ALLOW_PARTIALLY_TRUSTED_CALLERS\r\n* ARCH_arm\r\n* ASSERT_VERBOSE\r\n* ActivatorUtilities_In_DependencyInjection\r\n* BIGENDIAN\r\n* BINDING_LOG\r\n* BUILDING_INBOX_LIBRARY\r\n* CAP_PointerType\r\n* CAP_TypeOfPointer\r\n* CAS_OBSOLETIONS\r\n* CBOR_PROPERTY_TESTS\r\n* CHECK_ACCURATE_ENSURE\r\n* CHECK_ATTRIBUTE_ORDER\r\n* CODEDOM\r\n* CORECLR\r\n* CORERT\r\n* DCR27419\r\n* DEBUG\r\n* DEBUGRESOURCES\r\n* DEBUG_CLIPPING\r\n* DEBUG_FORCE_ZIP64\r\n* DEBUG_HANDLE\r\n* DISABLE_MATCH_OPTIMIZATION\r\n* DISABLE_SWITCH\r\n* DontUse\r\n* EERANGE\r\n* ENABLECOMBINDER\r\n* ENABLEDATABINDING\r\n* ENABLEDYNAMICPROGRAMMING\r\n* ENABLE_HTTP_HANDLER\r\n* ENTITY_ENCODE_HIGH_ASCII_CHARS\r\n* ES_BUILD_AGAINST_DOTNET_V35\r\n* ES_BUILD_PCL\r\n* ES_BUILD_STANDALONE\r\n* ES_SESSION_INFO\r\n* EVENTSOURCE_ACTIVITY_SUPPORT\r\n* EVENTSOURCE_ENUMERATE_SUPPORT\r\n* EVENTSOURCE_GENERICS\r\n* EVENT_SOURCE_LEGACY_NAMESPACE_SUPPORT\r\n* EXPANDRANGE\r\n* FALSE\r\n* FASTLOOP\r\n* FEATURE_ADVANCED_MANAGED_ETW_CHANNELS\r\n* FEATURE_COMPILE\r\n* FEATURE_COMPILED_XSL\r\n* FEATURE_COMPILE_TO_METHODBUILDER\r\n* FEATURE_COMPONENT_COLLECTION\r\n* FEATURE_DEFAULT_INTERFACES\r\n* FEATURE_DLG_INVOKE\r\n* FEATURE_DSA_HASHDATA\r\n* FEATURE_DYNAMIC_DELEGATE\r\n* FEATURE_ECDH_DERIVEFROM\r\n* FEATURE_ECPARAMETERS\r\n* FEATURE_EVENTSOURCE_XPLAT\r\n* FEATURE_FAST_CREATE\r\n* FEATURE_INTERNAL_REFLECTIONCONTEXT\r\n* FEATURE_INTERPRET\r\n* FEATURE_MAKE_RUN_METHODS\r\n* FEATURE_MANAGED_ETW\r\n* FEATURE_MANAGED_ETW_CHANNELS\r\n* FEATURE_PDB_GENERATOR\r\n* FEATURE_PERFTRACING\r\n* FEATURE_REGISTRY\r\n* FEATURE_SERIALIZATION\r\n* FEATURE_SKIP_INTERFACE\r\n* FEATURE_SYSTEM_EVENTS\r\n* FEATURE_THREAD_ABORT\r\n* FEATURE_TRACING\r\n* FEATURE_UTF8STRING\r\n* FEATURE_WINDOWS_SYSTEM_COLORS\r\n* FEATURE_XML_XPATH_ID\r\n* FINALIZATION_WATCH\r\n* FINDUPA_PARTICLE\r\n* FUNCTIONAL_TESTS\r\n* GDI_FINALIZATION_WATCH\r\n* GENERICITY_LOG\r\n* GETTYPEFROMHANDLEUNSAFE\r\n* HAS_CUSTOM_BLOCKS\r\n* HAVE_STORE_ISOPEN\r\n* HAVE_THUMBPRINT_OVERLOADS\r\n* HIDE_XSL\r\n* HTTP3\r\n* IL_EMIT\r\n* INTERNAL_ASYMMETRIC_IMPLEMENTATIONS\r\n* INTERNAL_NULLABLE_ATTRIBUTES\r\n* KESTREL\r\n* LATEBINDING\r\n* M3\r\n* MAKE_ABW_PUBLIC\r\n* MONO\r\n* MS\r\n* MS_IO_REDIST\r\n* MTNAMETABLE\r\n* NAVREADER_SUPPORTSLINEINFO\r\n* NET45\r\n* NET451\r\n* NET452\r\n* NET46\r\n* NET461\r\n* NET462\r\n* NET47\r\n* NET471\r\n* NET472\r\n* NETCOREAPP\r\n* NETCOREAPP2_0\r\n* NETCOREAPP2_1\r\n* NETCOREAPP3_0\r\n* NETFRAMEWORK\r\n* NETSTANDARD\r\n* NETSTANDARD1_0\r\n* NETSTANDARD1_1\r\n* NETSTANDARD1_3\r\n* NETSTANDARD1_6\r\n* NETSTANDARD2_0\r\n* NETSTANDARD2_1\r\n* NEVER\r\n* NO\r\n* NOPARSE\r\n* NO_ASYNC_LOCAL\r\n* NO_DSA_AVAILABLE\r\n* NO_EPHEMERALKEYSET_AVAILABLE\r\n* NO_EVENTSOURCE_COMPLEX_TYPE_SUPPORT\r\n* NO_FEATURE_STATIC_DELEGATE\r\n* NotUsed\r\n* OLDWRITER\r\n* OPTIMIZED_MEASUREMENTDC\r\n* OUT\r\n* PAPI_AD\r\n* PAPI_REGSAM\r\n* PBTCOMPILER\r\n* PERF\r\n* PHONE\r\n* PRIYAL\r\n* PRODUCT\r\n* PrintDebug\r\n* QIL_TRACE_NODE_CREATION\r\n* REGISTRY_ASSEMBLY\r\n* RELEASE\r\n* RESOURCES_EXTENSIONS\r\n* ReflectionOnly\r\n* SAVE_ASSEMBLIES\r\n* SERIAL_PORTS\r\n* SOCKETASYNCCONTEXT_TRACE\r\n* SPLAY_MTNAMETABLE\r\n* STATS\r\n* SUPPORT_SURROGATE\r\n* SUPPORT_WK_USER_OBJS\r\n* SYSNETSECURITY_NO_OPENSSL\r\n* SYSTEM_HASHCODE_TESTVECTORS\r\n* SYSTEM_NET_PRIMITIVES_DLL\r\n* SYSTEM_NET_SOCKETS_DLL\r\n* SYSTEM_PRIVATE_CORELIB\r\n* SchemaTypeImport\r\n* StopMaskOptimisation\r\n* StressTest\r\n* TARGETS_BROWSER\r\n* TARGET_32BIT\r\n* TARGET_64BIT\r\n* TARGET_AMD64\r\n* TARGET_ARM\r\n* TARGET_ARM64\r\n* TARGET_BROWSER\r\n* TARGET_IOS\r\n* TARGET_OSX\r\n* TARGET_TVOS\r\n* TARGET_UNIX\r\n* TARGET_WINDOWS\r\n* TEMP_HACK_FOR_SCHEMA_INFO\r\n* TESTHOOK\r\n* TESTING_CNG_IMPLEMENTATION\r\n* TEST_WINRT\r\n* TRACK_HDC\r\n* TRUST_COMPILE_STATE\r\n* TargetsWindows\r\n* USE_CTX_CACHE\r\n* USE_INTERNAL_ACCESSIBILITY\r\n* USE_INTERNAL_CONCURRENT_COLLECTIONS\r\n* USE_INTERNAL_THREADING\r\n* USE_MDT_EVENTSOURCE\r\n* USE_REFEMIT\r\n* Unix\r\n* VerifyIndex\r\n* VerifyPath\r\n* VerifySort\r\n* W3C_DEFAULT_ID_FORMAT\r\n* WIN32\r\n* WINHTTPHANDLER_DLL\r\n* WINHTTPHANDLER_TEST\r\n* XMLCHARTYPE_GEN_RESOURCE\r\n* XMLSERIALIZERGENERATORTESTS\r\n* XSLT2\r\n* _LOGGING\r\n* c1\r\n* false\r\n* not_used\r\n* true\r\n</details>\r\n\r\nThere is a room to cleanup or fix the dead code. Some of these constants are not defined since the initial port. Some are defined but unused. Some of them can be merged as they differ by casing or spelling (`TargetsWindows` vs. `TARGET_WINDOWS`). Some usages can probably be replaced by others, like `#if VerifyXX` to `#if DEBUG`.",
    "number": 39174,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-20T16:55:36Z",
          "user": "joperezr"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-11T07:21:13Z",
          "user": "ViktorHofer"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOCOMFvg=="
    },
    "updatedAt": "2023-01-26T14:44:09Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "Earlier discussion here https://github.com/dotnet/runtime/issues/7280 https://github.com/dotnet/runtime/issues/7213\r\n\r\nThere is a tool that I used that can safely remove code within particular defines (or remove define and retain code). If you plan to do this I will find a link to it.",
          "createdAt": "2020-07-13T05:13:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-13T05:15:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzM2MjYxMw=="
        },
        {
          "author": "am11",
          "body": "Thanks, such a tool will certainly help. I think main work is to make decision what actions to take. If a constant is not (explicitly or implicitly) defined anywhere, should we just delete the code (in a spirit that git has the history in case we ever need to revive)? Certain places may still require manual intervention (especially those which deal with consolidating windows and unix targets).",
          "createdAt": "2020-07-13T06:04:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-13T06:04:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzM3NzU4MQ=="
        },
        {
          "author": "joperezr",
          "body": "> If a constant is not (explicitly or implicitly) defined anywhere, should we just delete the code\r\n\r\nI believe so we should do this basically to clean dead code and if we need we can always bring stuff back. @danmosemsft can you share a bit more here of the effort you went through last time you did this? Specifically, it would be good to know if there was a lot of manual intervention required as @am11 calls out above.",
          "createdAt": "2020-07-20T16:57:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-23T18:47:58Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-30T12:10:56Z",
                "user": "PaulusParssinen"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODgE0uw=="
          },
          "updatedAt": "2020-07-20T16:57:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTE4NzgzMA=="
        },
        {
          "author": "ViktorHofer",
          "body": "@am11 is it easy for you to update the data from the top post? I would like to clean the platform and framework defines up.",
          "createdAt": "2022-05-04T13:59:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-04T14:10:29Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCbLmPA=="
          },
          "updatedAt": "2022-05-04T13:59:12Z",
          "id": "IC_kwDODI9FZc5CmWMg"
        },
        {
          "author": "am11",
          "body": "@ViktorHofer, I can find in the scope of `src/libraries` only as done in the top post, let me know if it is needed after this.\r\nHere is the sorted+deduplicated list from full repo to get a better view of variety of naming patterns used for preprocessor constants.\r\n\r\nNote that the first four items of \"defined constants list\" are using equal sign and commas. I didn't curate the list to highlight the potential issue.\r\n<details>\r\n  <summary>defined constants list (172)</summary>\r\n<br/>\r\n\r\n* $(DefineConstants),DEBUG,TRACE\r\n* $(DefineConstants),LATEBINDING=True\r\n* $(DefineConstants),TARGET_WINDOWS=True\r\n* $(DefineConstants),TRACE\r\n* _65535\r\n* _65536\r\n* ALLOW_PARTIALLY_TRUSTED_CALLERS\r\n* ANDROID_USE_BUFFER\r\n* ANSIBSTR\r\n* ASSEMBLY_V2\r\n* BASELINE_INTRINSICS\r\n* BIGENDIAN\r\n* BSTR\r\n* BUILDING_INBOX_LIBRARY\r\n* BUILDING_SOURCE_GENERATOR\r\n* BUILDING_SOURCE_GENERATOR_TESTS\r\n* CCCONVERTER_TRACE\r\n* CI_TEST\r\n* CODEDOM\r\n* CORECLR\r\n* CORERT\r\n* CP_NO_ZEROMEMORY\r\n* CUSTOMMARSHALERS2\r\n* DEBUG\r\n* DIAGNOSTICS_RUNTIME\r\n* DISABLE_UNMANAGED_PDB_SYMBOLS\r\n* DRAWING_NAMESPACE\r\n* ENABLECOMBINDER\r\n* ENABLE_HTTP_HANDLER\r\n* ES_BUILD_STANDALONE\r\n* FEATURE_64BIT_ALIGNMENT\r\n* FEATURE_ARRAYSTUB_AS_IL\r\n* FEATURE_BASICFREEZE\r\n* FEATURE_CER\r\n* FEATURE_COLLECTIBLE_ALC\r\n* FEATURE_COMINTEROP\r\n* FEATURE_COMINTEROP_APARTMENT_SUPPORT\r\n* FEATURE_COMWRAPPERS\r\n* FEATURE_EVENTSOURCE_XPLAT\r\n* FEATURE_FAST_CREATE\r\n* FEATURE_GC_STRESS\r\n* FEATURE_ICASTABLE\r\n* FEATURE_INSTANTIATINGSTUB_AS_IL\r\n* FEATURE_MANAGED_ETW\r\n* FEATURE_MANAGED_ETW_CHANNELS\r\n* FEATURE_MULTICASTSTUB_AS_IL\r\n* FEATURE_OBJCMARSHAL\r\n* FEATURE_PERFTRACING\r\n* FEATURE_PORTABLE_SHUFFLE_THUNKS\r\n* FEATURE_PROFAPI_ATTACH_DETACH\r\n* FEATURE_REGISTRY\r\n* FEATURE_STUBS_AS_IL\r\n* FEATURE_SYSTEM_EVENTS\r\n* FEATURE_TYPEEQUIVALENCE\r\n* FEATURE_WASM_PERFTRACING\r\n* FEATURE_WASM_THREADS\r\n* FEATURE_WIN32_REGISTRY\r\n* FEATURE_WINDOWS_SYSTEM_COLORS\r\n* FEATURE_XML_XPATH_ID\r\n* FLOAT32\r\n* FLOAT64\r\n* FUNCTIONAL_TESTS\r\n* GENERICS_FORCE_USG\r\n* GVM_RESOLUTION_TRACE\r\n* HAVE_THUMBPRINT_OVERLOADS\r\n* HTTP3\r\n* HTTP_DLL\r\n* IL_EMIT\r\n* ILVERIFY\r\n* INPLACE_RUNTIME\r\n* INTERNAL_ASYMMETRIC_IMPLEMENTATIONS\r\n* LAUNCH_DEBUGGER\r\n* LIBRARYIMPORT_GENERATOR_TEST\r\n* LOCALLOC_DYNAMIC\r\n* LOCALLOC_LARGE\r\n* LOCALLOC_SMALL\r\n* _LOGGING\r\n* LOOP\r\n* LPSTR\r\n* LPTSTR\r\n* MAKE_ABW_PUBLIC\r\n* MEMORYMARSHAL_SUPPORT\r\n* MONO\r\n* MONO_FEATURE_SRE\r\n* NATIVE_CPP\r\n* NATIVEFORMAT_PUBLICWRITER\r\n* NESTED_HFA\r\n* net46\r\n* NETCOREAPP\r\n* NETFX_45\r\n* NETSTANDARD\r\n* NETWORKINFORMATION_TEST\r\n* NO_EVENTCOMMANDEXECUTED_SUPPORT\r\n* NO_NTAUTHENTICATION\r\n* NON_VEX_INTRINSICS\r\n* NO_SUPPRESS_GC_TRANSITION\r\n* OP_ADD\r\n* OP_AND\r\n* OP_DIV\r\n* OP_MOD\r\n* OP_MUL\r\n* OP_OR\r\n* OP_SHR\r\n* OP_SUB\r\n* OP_XOR\r\n* OS_ISBROWSER_SUPPORT\r\n* PRODUCT\r\n* PROFILING_SUPPORTED\r\n* READYTORUN\r\n* REFLECTION_FROM_USAGE\r\n* ReflectionOnly\r\n* REGEXGENERATOR\r\n* REGISTRY_ASSEMBLY\r\n* RESOURCE_KEYS\r\n* RESOURCES_EXTENSIONS\r\n* ROSLYN4_0_OR_GREATER\r\n* RUN_IN_CHROME\r\n* SERIAL_PORTS\r\n* SIMPLE_HFA\r\n* SINGLE_FILE_TEST_RUNNER\r\n* SOCKADDR_HAS_LENGTH\r\n* SYSNETHTTP_NO_OPENSSL\r\n* SYSNETSECURITY_NO_OPENSSL\r\n* SYSTEM_NET_PRIMITIVES_DLL\r\n* SYSTEM_NET_SOCKETS_DLL\r\n* SYSTEM_PRIVATE_CORELIB\r\n* TARGET_32BIT\r\n* TARGET_64BIT\r\n* TARGET_AMD64\r\n* TARGET_ANDROID\r\n* TARGET_ARM\r\n* TARGET_ARM64\r\n* TARGET_ARMV6\r\n* TARGET_BROWSER\r\n* TARGET_FREEBSD\r\n* TARGET_ILLUMOS\r\n* TARGET_IOS\r\n* TARGET_LINUX\r\n* TARGET_LOONGARCH64\r\n* TARGET_MACCATALYST\r\n* TARGET_MOBILE\r\n* TARGET_NETBSD\r\n* TARGET_OSX\r\n* TARGET_S390X\r\n* TARGETS_BROWSER\r\n* TARGET_SOLARIS\r\n* TargetsWindows\r\n* TARGET_TVOS\r\n* TARGET_UNIX\r\n* TARGET_WASM\r\n* TARGET_WINDOWS\r\n* TARGET_X86\r\n* TEST_DEBUG_CONFIG_ALSO\r\n* TESTING_CNG_IMPLEMENTATION\r\n* TRACE\r\n* TRY\r\n* TYPE_LOADER_IMPLEMENTATION\r\n* TYPE_LOADER_TRACE\r\n* UNITTEST\r\n* Unix\r\n* USE_MDT_EVENTSOURCE\r\n* V2\r\n* VEX_INTRINSICS\r\n* W3C_DEFAULT_ID_FORMAT\r\n* WIN32\r\n* Windows\r\n* WINDOWS\r\n* WINHTTPHANDLER_TEST\r\n* XASSEM\r\n* XMLSERIALIZERGENERATORTESTS\r\n* XUNIT_PERF\r\n</details>\r\n\r\n<details>\r\n  <summary>used constants list: in cs, vb and fs files (307)</summary>\r\n<br/>\r\n\r\n* _65531\r\n* _65532\r\n* _65533\r\n* _65534\r\n* _65535\r\n* _65536\r\n* ADD_STRUCT_CONSTRAINT\r\n* ALLOW_PARTIALLY_TRUSTED_CALLERS\r\n* ALWAYS_SUPPORT_EVENTSOURCE_LOG\r\n* ANSIBSTR\r\n* ARCH_arm\r\n* ASSEMBLY_V2\r\n* ASSERT_VERBOSE\r\n* BASELINE_INTRINSICS\r\n* BIGENDIAN\r\n* BIT64\r\n* BROWSER\r\n* BSTR\r\n* _BUG_MARSHALSTRUCTSEQ\r\n* BUILDING_INBOX_LIBRARY\r\n* BUILDING_SOURCE_GENERATOR\r\n* BUILDING_SOURCE_GENERATOR_TESTS\r\n* c1\r\n* CALLDESCR_ARGREGS\r\n* CALLDESCR_FPARGREGS\r\n* CALLDESCR_FPARGREGSARERETURNREGS\r\n* CALLINGCONVENTION_CALLEE_POPS\r\n* CAP_PointerType\r\n* CAP_TypeOfPointer\r\n* CCCONVERTER_TRACE\r\n* CHECK_ACCURATE_ENSURE\r\n* CHECK_ATTRIBUTE_ORDER\r\n* CHECKINVARIANTS\r\n* CI_TEST\r\n* CODEDOM\r\n* CODEGEN_CPP\r\n* COM_ACTIVATOR_DEBUG\r\n* CORECLR\r\n* CORERT\r\n* CORRECT_CASE\r\n* CP_NO_ZEROMEMORY\r\n* CUSTOMMARSHALERS2\r\n* DACTABLEGEN_DEBUG\r\n* _DEBUG\r\n* DEBUG\r\n* DEBUG_FORCE_ZIP64\r\n* {define}\r\n* defined\r\n* DESKTOP\r\n* DIAGNOSTICS_RUNTIME\r\n* DISABLE_MATCH_OPTIMIZATION\r\n* DISABLE_SWITCH\r\n* DISABLE_UNMANAGED_PDB_SYMBOLS\r\n* DISPLAY_DEBUG_INFO\r\n* DontUse\r\n* ECMA_METADATA_SUPPORT\r\n* EERANGE\r\n* ENABLECOMBINDER\r\n* ENABLEDYNAMICPROGRAMMING\r\n* ENABLE_HTTP_HANDLER\r\n* ENABLE_REFLECTION_TRACE\r\n* ENABLE_WINRT\r\n* ENREGISTERED_PARAMTYPE_MAXSIZE\r\n* ENREGISTERED_RETURNTYPE_INTEGER_MAXSIZE\r\n* ENTITY_ENCODE_HIGH_ASCII_CHARS\r\n* ES_BUILD_STANDALONE\r\n* ES_SESSION_INFO\r\n* EVENTSOURCE_GENERICS\r\n* EVENT_SOURCE_LEGACY_NAMESPACE_SUPPORT\r\n* EXPANDRANGE\r\n* false\r\n* FALSE\r\n* FASTLOOP\r\n* FEATURE_64BIT_ALIGNMENT\r\n* FEATURE_ADVANCED_MANAGED_ETW_CHANNELS\r\n* FEATURE_ARRAYSTUB_AS_IL\r\n* FEATURE_CER\r\n* FEATURE_COMINTEROP\r\n* FEATURE_COMINTEROP_APARTMENT_SUPPORT\r\n* FEATURE_COMPILE_TO_METHODBUILDER\r\n* FEATURE_DUMP_DEBUGGING\r\n* FEATURE_EVENTSOURCE_XPLAT\r\n* FEATURE_FAST_CREATE\r\n* FEATURE_GC_STRESS\r\n* FEATURE_HFA\r\n* FEATURE_INTERPRETER\r\n* FEATURE_MAKE_RUN_METHODS\r\n* FEATURE_MANAGED_ETW\r\n* FEATURE_MANAGED_ETW_CHANNELS\r\n* FEATURE_MULTICASTSTUB_AS_IL\r\n* FEATURE_OBJCMARSHAL\r\n* FEATURE_PDB_GENERATOR\r\n* FEATURE_PERFTRACING\r\n* FEATURE_REGISTRY\r\n* FEATURE_THREAD_ABORT\r\n* FEATURE_TYPEEQUIVALENCE\r\n* FEATURE_UNIVERSAL_GENERICS\r\n* FEATURE_WASM_PERFTRACING\r\n* FEATURE_WASM_THREADS\r\n* FEATURE_WINDOWS_SYSTEM_COLORS\r\n* FEATURE_XML_XPATH_ID\r\n* FINALIZATION_WATCH\r\n* FINDUPA_PARTICLE\r\n* FLOAT64\r\n* FORCE_AOT\r\n* FOUND\r\n* FULL_AOT_DESKTOP\r\n* FUNCTIONAL_TESTS\r\n* GDI_FINALIZATION_WATCH\r\n* GENERICS_FORCE_USG\r\n* GETTYPEFROMHANDLEUNSAFE\r\n* GVM_RESOLUTION_TRACE\r\n* HAS_CUSTOM_BLOCKS\r\n* HAVE_STORE_ISOPEN\r\n* HAVE_THUMBPRINT_OVERLOADS\r\n* HTTP3\r\n* IL_EMIT\r\n* ILVERIFY\r\n* __IN_CRST_CPP\r\n* INPLACE_RUNTIME\r\n* INTERNAL_CONTRACTS\r\n* INTF_FOR_TASK\r\n* KESTREL\r\n* KILL1\r\n* KILL2\r\n* LAUNCH_DEBUGGER\r\n* LOCALLOC_LARGE\r\n* LOCALLOC_SMALL\r\n* _LOGGING\r\n* LONG64\r\n* LOOP\r\n* LPSTR\r\n* LPTSTR\r\n* M3\r\n* MAKE_ABW_PUBLIC\r\n* MATCHING_HARDWARE_VECTOR\r\n* MEMORYMARSHAL_SUPPORT\r\n* __MOBILE__\r\n* MOBILE\r\n* MONO\r\n* __MonoCS__\r\n* MONO_FEATURE_SRE\r\n* MS\r\n* MTNAMETABLE\r\n* MULTIMODULE_BUILD\r\n* NATIVEFORMAT_COMPRESSION\r\n* NATIVEFORMAT_PUBLICWRITER\r\n* NATIVE_IJW\r\n* NAVREADER_SUPPORTSLINEINFO\r\n* NESTED_HFA\r\n* NET\r\n* NET451\r\n* NET48\r\n* NET5_0_OR_GREATER\r\n* NET6_0_OR_GREATER\r\n* NET7_0_OR_GREATER\r\n* NETCOREAPP\r\n* NETCOREAPP2_0_OR_GREATER\r\n* NETCOREAPP2_2_OR_GREATER\r\n* NETCOREAPP3_0_OR_GREATER\r\n* NETCOREAPP3_1_OR_GREATER\r\n* NETCOREAPP_5_0_OR_GREATER\r\n* NETFRAMEWORK\r\n* NETFX_45\r\n* NETSTANDARD\r\n* NETSTANDARD2_0\r\n* NETSTANDARD2_1\r\n* NETSTANDARD2_1_OR_GREATER\r\n* NETWORKINFORMATION_TEST\r\n* NEVER\r\n* NO_BITCODE\r\n* NoCCtor\r\n* NO_EPHEMERALKEYSET_AVAILABLE\r\n* NO_FEATURE_STATIC_DELEGATE\r\n* NO_NTAUTHENTICATION\r\n* NON_VEX_INTRINSICS\r\n* NOPARSE\r\n* NO_SUPPRESS_GC_TRANSITION\r\n* NOT_FIXED\r\n* not_used\r\n* NOT_YET\r\n* OP_ADD\r\n* OP_AND\r\n* OP_DIV\r\n* OP_MOD\r\n* OP_MUL\r\n* OP_OR\r\n* OP_SHR\r\n* OP_SUB\r\n* OPTIMIZED_MEASUREMENTDC\r\n* OPTIMIZED_MODE_WITHOUT_SCANNER\r\n* OP_XOR\r\n* OS_ISBROWSER_SUPPORT\r\n* OUT\r\n* PBTCOMPILER\r\n* PERF\r\n* PERFORMANCE_TESTS\r\n* PERMISSIVE\r\n* PHONE\r\n* PRIYAL\r\n* PRODUCT\r\n* PROFILING_SUPPORTED\r\n* QIL_TRACE_NODE_CREATION\r\n* READYTORUN\r\n* REFLECTION_FROM_USAGE\r\n* ReflectionOnly\r\n* REGEXGENERATOR\r\n* REGISTRY_ASSEMBLY\r\n* RELEASE\r\n* RESOURCE_KEYS\r\n* RESOURCES_EXTENSIONS\r\n* ROSLYN4_0_OR_GREATER\r\n* RUN_IN_CHROME\r\n* SAVE_ASSEMBLIES\r\n* SchemaTypeImport\r\n* SERIAL_PORTS\r\n* SIGN2048\r\n* SINGLE_FILE_TEST_RUNNER\r\n* SOCKADDR_HAS_LENGTH\r\n* SOCKETASYNCCONTEXT_TRACE\r\n* SPLAY_MTNAMETABLE\r\n* STATS\r\n* StopMaskOptimisation\r\n* StressTest\r\n* SUPPORT_DYNAMIC_CODE\r\n* SUPPORT_JIT\r\n* SUPPORTS_NATIVE_METADATA_TYPE_LOADING\r\n* SUPPORTS_NATIVE_METADATA_TYPE_LOADING_AND_SUPPORTS_TOKEN_BASED_DISPATCH_CELLS\r\n* SUPPORTS_R2R_LOADING\r\n* SUPPORT_SURROGATE\r\n* SUPPORT_WK_USER_OBJS\r\n* SYSNETSECURITY_NO_OPENSSL\r\n* SYSTEM_HASHCODE_TESTVECTORS\r\n* SYSTEM_NET_PRIMITIVES_DLL\r\n* SYSTEM_NET_SOCKETS_DLL\r\n* SYSTEM_PRIVATE_CORELIB\r\n* TARGET_32BIT\r\n* TARGET_64BIT\r\n* TARGET_AMD64\r\n* TARGET_ANDROID\r\n* TARGET_ARM\r\n* TARGET_ARM64\r\n* TARGET_ARMV6\r\n* TARGET_BROWSER\r\n* TARGET_FREEBSD\r\n* TARGET_ILLUMOS\r\n* TARGET_IOS\r\n* TARGET_IPHONE_SIMULATOR\r\n* TARGET_LINUX\r\n* TARGET_LOONGARCH64\r\n* TARGET_MACCATALYST\r\n* TARGET_NETBSD\r\n* TARGET_OS_IPHONE\r\n* TARGET_OSX\r\n* TARGET_S390X\r\n* TARGETS_BROWSER\r\n* TARGET_SOLARIS\r\n* TargetsWindows\r\n* TARGET_TVOS\r\n* TARGET_UNIX\r\n* TARGET_WASM\r\n* TARGET_WATCHOS\r\n* TARGET_WINDOWS\r\n* TARGET_X86\r\n* TEMP_HACK_FOR_SCHEMA_INFO\r\n* TEST_DEBUG_CONFIG_ALSO\r\n* TESTHOOK\r\n* TESTING_CNG_IMPLEMENTATION\r\n* TEST_WINRT\r\n* TRACEIT\r\n* TRACING\r\n* TRACK_HDC\r\n* true\r\n* TRUST_COMPILE_STATE\r\n* TRY\r\n* TYPE_LOADER_IMPLEMENTATION\r\n* TYPE_LOADER_TRACE\r\n* UNDEFINE_OTHER_METHOD\r\n* UNITTEST\r\n* UNIVERSAL_GENERICS\r\n* Unix\r\n* UNIXAMD64\r\n* UNIX_AMD64_ABI\r\n* USC\r\n* USE_INSTRUMENTATION\r\n* USE_MDT_EVENTSOURCE\r\n* USE_RANDOM_SEED\r\n* USE_REDIRECT\r\n* USE_STRUCT\r\n* V2\r\n* VERBOSE\r\n* VerifyIndex\r\n* VerifyPath\r\n* VerifySort\r\n* VEX_INTRINSICS\r\n* W3C_DEFAULT_ID_FORMAT\r\n* WACKYDEBUG\r\n* WIN32\r\n* WIN_8_P\r\n* Windows\r\n* WINDOWS\r\n* WINHTTPHANDLER_TEST\r\n* WITH_MEMBERS\r\n* WITH_STOP\r\n* XASSEM\r\n* XMLSERIALIZERGENERATORTESTS\r\n* XSLT2\r\n</details>\r\n\r\nWe can perform (indexed) search on repo for each item individually like this:\r\n\r\n*  `git grep 'DefineConstant.*NAME' :/` (where NAME is an item from \"defined constants list\")\r\n* `git grep '#.*if.*NAME' ':/*.cs' ':/*.vb' ':/*.fs'` (where NAME is an item from \"used constants list\")",
          "createdAt": "2022-05-04T15:56:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-04T16:04:03Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCbNQYw=="
          },
          "updatedAt": "2022-05-04T15:56:29Z",
          "id": "IC_kwDODI9FZc5CnA_L"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOQpwPyw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/39174",
    "title": "Audit use of compilation constants in libraries"
  },
  {
    "author": "terrajobst",
    "labels": [
      "enhancement",
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2020-07-20T02:08:12Z",
    "body": "I just spend ten minutes debugging the following code:\r\n\r\n```C#\r\nclass RazorPage\r\n{\r\n    private string _filter;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        someDictionary.TryGetValue(\"q\", out var _filter);\r\n    }\r\n }\r\n```\r\n\r\nOf course, instead of assigning to the field, the expression created a local variable `_filter` and threw it away.\r\n\r\nIn order to reduce noise, the analyzer should only flag hiding of fields if the naming convention for fields and locals differ (editor.config can answer that). This drastically increases the likelihood that the developer did this unintentionally. Personally, I think `var` vs `string` or `int` is a red herring and both inferred typing and explicit typing should be flagged because I likely would have missed those keywords too.\r\n\r\nThoughts?\r\n\r\n/cc @jeffhandley @bartonjs @mavasani @CyrusNajmabadi ",
    "number": 39616,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-20T04:46:57Z",
          "user": "GrabYourPitchforks"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-20T05:13:43Z",
          "user": "TheCodeTraveler"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-20T07:42:58Z",
          "user": "chucker"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-07-20T17:01:35Z",
          "user": "joperezr"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOBK4e2g=="
    },
    "updatedAt": "2024-03-13T00:19:51Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @eerhardt, @maryamariyan\nNotify danmosemsft if you want to be subscribed.",
          "createdAt": "2020-07-20T02:08:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-20T02:08:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDc1OTM5NQ=="
        },
        {
          "author": "mavasani",
          "body": "Also tagging @CyrusNajmabadi. Cyrus, I thought you implemented something similar in Roslyn as an IDE analyzer or refactoring when a local or parameter shares same name as a field? If not, this sounds like a reasonable analyzer to add.",
          "createdAt": "2020-07-20T04:44:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-20T04:45:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDc5ODQyNg=="
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOJ2L72g=="
    },
    "url": "https://github.com/dotnet/runtime/issues/39616",
    "title": "Analyzer should flag unintentional shadowing of fields when using `out`"
  },
  {
    "author": "weitzhandler",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2020-07-30T20:53:12Z",
    "body": "## Background and Motivation\n\nValidation is one of the most critical building blocks in any application, server or client. Yet the .NET lacks an official and adequate solution to this matter.\n\nDataAnnotations validation have been integrated with the .NET for a long time.\nWith the advancement of .NET it's been discovered that although decorating properties with inline attributes is a neat way to define validation, it comes with many limitations by the compiler (i.e. attributes may only take in constants, no generics etc.), as well as other downsides.  DA has over time become completely abandoned and from what I read (will update when I find source), is no longer planned to be updated or be taken to the next level.\n\nAdditionally, UI frameworks (especially UWP and WinUI), don't have a conventional way of rendering the validation errors and exchanging validation data across app layers.\n\n## Proposed solution\n\nMy suggestion hereby is for Microsoft and the .NET to thoroughly rethink the subject of validation and introduce (or officially adopt an existing) a fully integrated validation framework open for configuration, customization and extensibility, engineered from scratch to cover or enable extensibility of as many scenarios as possible, for instance (some less or not important as others - no specific order):\n\n- Highly extensible and configurable\n- Validation groups / rulesets (nested? inherited?)\n- Dependency injection\n- Open for mocking & unit testing\n- Entire graph validation\n- Scalar value inline validation\n- Static validation / argument validation `Check.IsNotNull` style\n- Property and group human names and descriptions\n- Error message and field it group name localization\n- Inter-property or inter-entity validation\n- Short circuiting on first error in group / entity in list / entity in graph / combination etc.\n- Reuse validation in client & server entities, for example if client entities are generated by a tool\n- Validation process interception or customization\n- Client side error tracking and notification (ViewModel)\n- UI validation error rendering\n- Respect INotifyDataErrorInfo, or have adapters to it / or provide alternatives\n- Ability to bridge with Entity Framework entity configuration (nullable columns, column length, precision etc.)?\n- Asynchronous!\n\n`Microsoft.Extensions` sounds to me like the perfect family validation would fit in. It would benefit from integration with its siblings:\n- DependencyInjection\n- Options\n- Configuration\n- Logging\n- Localization (.NET 5)\n\nIt could come in two blocks:\n\n- `Microsoft.Extensions.Validation.Abstractions` (primitives and contracts)\n- `Microsoft.Extensions.Validation`\n\nFuture / 2nd blcok:\n\n- `Microsoft.Extensions.Validation.AspNetCore` (controller/API-controller middleware and Razor/UI integration)\n- `Mcirosoft.Extensions.Validation.WinUI` (WinUI UI integration)\n- `Microsoft.Extensions.Validation.Wpf` (WPF UI integration)",
    "number": 40157,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-04T16:53:58Z",
          "user": "Zerotask"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-20T08:14:27Z",
          "user": "Joe4evr"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2021-03-13T11:17:58Z",
          "user": "umbarov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-09T09:50:03Z",
          "user": "HowardvanRooijen"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2022-01-09T09:59:49Z",
          "user": "mhmd-azeez"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-09T14:18:40Z",
          "user": "atrauzzi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-16T15:35:31Z",
          "user": "erwinkramer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-16T17:33:52Z",
          "user": "Trivivium"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHODHQ8iA=="
    },
    "updatedAt": "2025-07-17T13:58:24Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Dotnet-GitSync-Bot",
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2020-07-30T20:53:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-07-30T20:53:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY2NjY4OTEwNA=="
        },
        {
          "author": "eerhardt",
          "body": "@ericstj @maryamariyan - thoughts?",
          "createdAt": "2020-08-31T17:53:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-31T17:53:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzkzMjQzNg=="
        },
        {
          "author": "ericstj",
          "body": "It sounds like an idea for a brand new library / suite of libraries.  Typically we don't start those out here in dotnet/runtime unless there is a super compelling reason they need to be in this layer (like intrinsics).  @weitzhandler why not start out a project independent of of dotnet/runtime and see how it goes.  If you can make a compelling case for integration it can be something to consider.  Also cc @davidfowl (extensions architect) and @ajcvickers (annotations and EF owner) for opinions.",
          "createdAt": "2020-08-31T18:08:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-08T20:24:26Z",
                "user": "maryamariyan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-08T13:27:50Z",
                "user": "weitzhandler"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODMG17g=="
          },
          "updatedAt": "2020-08-31T18:08:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4Mzk0MDc3Mg=="
        },
        {
          "author": "ajcvickers",
          "body": "@weitzhandler I've had discussions on this with several people in the last few months. It's something we're thinking about, but we don't have any concrete plans yet.\r\n\r\n/cc @jeffhandley @DamianEdwards ",
          "createdAt": "2020-09-08T16:10:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2020-11-20T08:14:21Z",
                "user": "Joe4evr"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-09T15:29:26Z",
                "user": "sanamhub"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODRxLHQ=="
          },
          "updatedAt": "2020-09-08T16:10:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODk4MjEwNg=="
        },
        {
          "author": "weitzhandler",
          "body": "> Typically we don't start those out here in dotnet/runtime unless there is a super compelling reason they need to be in this layer\r\n\r\nPersonally I think validation is one of the most important building blocks in any application. As of today, the .NET lacks a dedicated validation engine that covers today's validation requirements.\r\n\r\n>It's something we're thinking about, but we don't have any concrete plans yet.\r\n\r\nThanks for your input!",
          "createdAt": "2020-09-10T03:16:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-28T05:24:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTk1MDc5Nw=="
        },
        {
          "author": "erwinkramer",
          "body": "[Microsoft.Extensions.Validation](https://www.nuget.org/packages/Microsoft.Extensions.Validation#readme-body-tab) is released as of yesterday as preview (and drives the [Validation support in Minimal APIs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-10.0#validation-support-in-minimal-apis) feature I believe - @captainsafia right?).\n\nI guess that's a start!",
          "createdAt": "2025-07-16T15:37:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2025-07-16T16:36:20Z",
                "user": "weitzhandler"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEa0PlA=="
          },
          "updatedAt": "2025-07-16T15:43:54Z",
          "id": "IC_kwDODI9FZc63iKCq"
        },
        {
          "author": "captainsafia",
          "body": "@erwinkramer Yes, the new APIs are currently marked as experimental but they are designed to make it easier to add validation to a variety of frameworks. Both Blazor and minimal APIs are using it for .NET 10. More detail on implementation [in this README](https://github.com/captainsafia/minapi-validation-support/blob/main/README.md).",
          "createdAt": "2025-07-17T13:58:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-17T14:05:01Z",
                "user": "erwinkramer"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-17T14:31:53Z",
                "user": "weitzhandler"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEa9DgQ=="
          },
          "updatedAt": "2025-07-17T13:58:24Z",
          "id": "IC_kwDODI9FZc631Psx"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOt9T7MQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/40157",
    "title": "Feature request: Proper validation in .NET!"
  },
  {
    "author": "GrabYourPitchforks",
    "labels": [
      "documentation",
      "Security",
      "area-Meta"
    ],
    "createdAt": "2020-08-26T21:21:06Z",
    "body": "I realize that with `Unsafe`, `MemoryMarshal`, and friends entering wide use, we never formally stated what type safety guarantees (if any) the APIs offer. That is, we never provided a list of what APIs are \"safe\" and which are \"unsafe equivalents\" (related: https://github.com/dotnet/runtime/issues/31354).\r\n\r\nThis issue is an attempt to enumerate the APIs on `Unsafe`, `MemoryMarshal`, and related types from the perspective of __type safety / memory safety__. Ultimately I think this needs to be tracked somewhere, but whether that's a .md file in this repo or an official doc page I don't really know.\r\n\r\nI'm also soliciting feedback on this list. Please let me know if I got something wrong.\r\n\r\nI'm __not__ listing APIs which expose raw pointers through their public API surface. APIs which take or return pointers are always assumed unsafe.\r\n\r\n> Reminder: \"Unsafe equivalent\" _does not_ mean \"must not be used.\" Rather, it means that the API can be used to violate a type's contract or will bypass the runtime's normal type safety checks. Think of these APIs as being _equivalent to_ using the `unsafe` keyword within your code. If you are acting as a code reviewer, give extra scrutiny to calls to these APIs, as you would give extra scrutiny to any code involving pointers or other unsafe constructs.\r\n\r\n## `System.Runtime.CompilerServices.Unsafe`\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`Add<T>(ref T, int)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.add) | __unsafe equivalent__ | (1) |\r\n| [`Add<T>(ref T, IntPtr)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.add) | __unsafe equivalent__ | (1) |\r\n| [`AddByteOffset<T>(ref T, IntPtr)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.addbyteoffset) | __unsafe equivalent__ | (1) |\r\n| [`AreSame<T>(ref T, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.aresame) | safe | (2) |\r\n| [`AsRef<T>(in T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.asref) | __unsafe equivalent__ | (3), (22) |\r\n| [`As<T>(object)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.as) | __unsafe equivalent__ | (4) |\r\n| [`As<TFrom, TTo>(ref TFrom)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.as) | __unsafe equivalent__ | (4) |\r\n| [`ByteOffset<T>(ref T, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.byteoffset) | __unsafe equivalent__ | (5) |\r\n| [`CopyBlock(ref byte, ref byte, uint)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.copyblock) | __unsafe equivalent__ | (6) |\r\n| [`CopyBlockUnaligned(ref byte, ref byte, uint)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.copyblockunaligned) | __unsafe equivalent__ | (6) |\r\n| [`InitBlock(ref byte, ref byte, uint)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.initblock) | __unsafe equivalent__ | (6) |\r\n| [`InitBlockUnaligned(ref byte, ref byte, uint)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.initblockunaligned) | __unsafe equivalent__ | (6) |\r\n| [`IsAddressGreaterThan<T>(ref T, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.isaddressgreaterthan) | safe | (2) |\r\n| [`IsAddressLessThan<T>(ref T, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.isaddresslessthan) | safe | (2) |\r\n| [`IsNullRef<T>(ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.isnullref) | safe | (2), (10) |\r\n| [`NullRef<T>()`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.nullref) | safe | (2), (10) |\r\n| [`ReadUnaligned<T>(ref byte)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.readunaligned) | __unsafe equivalent__ | (4) |\r\n| [`SkipInit<T>(out T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.skipinit) | __unsafe equivalent__ | (7) |\r\n| [`SizeOf<T>()`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.sizeof) | safe | (8) |\r\n| [`Subtract<T>(ref T, int)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.subtract) | __unsafe equivalent__ | (1) |\r\n| [`Subtract<T>(ref T, IntPtr)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.subtract) | __unsafe equivalent__ | (1) |\r\n| [`SubtractByteOffset<T>(ref T, IntPtr)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.subtractbyteoffset) | __unsafe equivalent__ | (1) |\r\n| [`Unbox<T>(object)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.unbox) | __unsafe equivalent__ | (9) |\r\n| [`WriteUnaligned<T>(ref byte)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.writeunaligned) | __unsafe equivalent__ | (4) |\r\n\r\n## `System.Runtime.InteropServices.MemoryMarshal`\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`AsBytes<T>(ReadOnlySpan<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.asbytes) | __unsafe equivalent__ | (11) |\r\n| [`AsBytes<T>(Span<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.asbytes) | __unsafe equivalent__ | (11) |\r\n| [`AsMemory<T>(ReadOnlyMemory<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.asmemory) | __unsafe equivalent__ | (3) |\r\n| [`AsRef<T>(ReadOnlySpan<byte>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.asref) | __unsafe equivalent__ | (11), (12) |\r\n| [`AsRef<T>(Span<byte>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.asref) | __unsafe equivalent__ | (11), (12) |\r\n| [`Cast<TFrom, TTo>(ReadOnlySpan<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.cast) | __unsafe equivalent__ | (11), (12), (14) |\r\n| [`Cast<TFrom, TTo>(Span<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.cast) | __unsafe equivalent__ | (11), (12), (14) |\r\n| [`CreateFromPinnedArray<T>(T[], int, int)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createfrompinnedarray) | __unsafe equivalent__ | (15) |\r\n| [`CreateReadOnlySpan<T>(ref T, int)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createreadonlyspan) | __unsafe equivalent__ | (6) |\r\n| [`CreateSpan<T>(ref T, int)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createspan) | __unsafe equivalent__ | (6) |\r\n| [`GetArrayDataReference<T>(T[])`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.getarraydatareference) | __unsafe equivalent__ | (16) |\r\n| [`GetReference<T>(ReadOnlySpan<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.getreference) | __unsafe equivalent__ | (3), (16), (22) |\r\n| [`GetReference<T>(Span<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.getreference) | __unsafe equivalent__ | (16) |\r\n| [`Read<T>(ReadOnlySpan<byte>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.read) | __unsafe equivalent__ | (11), (13) |\r\n| [`ToEnumerable<T>(ReadOnlyMemory<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.toenumerable) | safe | |\r\n| [`TryGetArray<T>(ReadOnlyMemory<T>, ...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.trygetarray) | __unsafe equivalent__ | (3), (17), (18) |\r\n| [`TryGetMemoryManager<T>(ReadOnlyMemory<T>, ...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.trygetmemorymanager) | __unsafe equivalent__ | (3), (17), (18) |\r\n| [`TryGetString<T>(ReadOnlyMemory<char>, ...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.trygetstring) | safe | (17), (18) |\r\n| [`TryRead<T>(ReadOnlySpan<byte>, out T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.tryread) | __unsafe equivalent__ | (11), (13) |\r\n| [`TryWrite<T>(Span<byte>, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.trywrite) | __unsafe equivalent__ | (11), (13) |\r\n| [`Write<T>(Span<byte>, ref T)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.write) | __unsafe equivalent__ | (11), (13) |\r\n\r\n## `System.Runtime.InteropServices.SequenceMarshal`\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`TryGetArray<T>(...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.sequencemarshal.trygetarray) | __unsafe equivalent__ | (3), (17), (18) |\r\n| [`TryGetReadOnlyMemory<T>(...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.sequencemarshal.trygetreadonlymemory) | safe | |\r\n| [`TryGetReadOnlySequenceSegment<T>(...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.sequencemarshal.trygetreadonlysequencesegment) | safe | |\r\n| [`TryRead<T>(...)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.sequencemarshal.tryread) | __unsafe equivalent__ | (11), (13) |\r\n\r\n## `System.Runtime.InteropServices.CollectionsMarshal`\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`AsSpan<T>(List<T>)`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.collectionsmarshal.asspan) | safe | (21) |\r\n\r\n## `System.GC`\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`AllocateArray<T>(int, bool)`](https://docs.microsoft.com/en-us/dotnet/api/system.gc.allocatearray) | safe | |\r\n| [`AllocateUninitializedArray<T>(int, bool)`](https://docs.microsoft.com/en-us/dotnet/api/system.gc.allocateuninitializedarray) | __unsafe equivalent__ | (7) |\r\n\r\n## `GetPinnableReference` pattern\r\n\r\nThough `GetPinnableReference` methods are intended for compiler use within _fixed_ blocks, they're designed to be type-safe when called by hand.\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`string.GetPinnableReference()`](https://docs.microsoft.com/en-us/dotnet/api/system.string.getpinnablereference) | safe | (19) |\r\n| [`ReadOnlySpan<T>.GetPinnableReference()`](https://docs.microsoft.com/en-us/dotnet/api/system.readonlyspan-1.getpinnablereference) | safe | (20) |\r\n| [`Span<T>.GetPinnableReference()`](https://docs.microsoft.com/en-us/dotnet/api/system.span-1.getpinnablereference) | safe | (20) |\r\n\r\n## Miscellaneous\r\n\r\n| API | safe or unsafe | See notes |\r\n| :-- | :-- | :-- |\r\n| [`ArrayPool<T>.Shared.Rent(int)`](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.arraypool-1.rent) | __unsafe equivalent__ | (7) |\r\n| [`MemoryPool<T>.Shared.Rent(int)`](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.memorypool-1.rent) | __unsafe equivalent__ | (7) |\r\n\r\n## Notes\r\n\r\nIn the below notes, I'm using the terms _gcref_ and _managed pointer_ interchangeably.\r\n\r\n* (1) Arithmetic operations on gcrefs (such as via [`Unsafe.Add`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.add)) are not checked for correctness by the runtime. The resulting gcref may point to invalid memory or to a different object. See ECMA-335, Sec. III.1.5.\r\n\r\n* (2) It is legal and type-safe to perform comparisons against gcrefs. See ECMA-225, Sec. III.1.5 and Table III.4.\r\n\r\n* (3) Stripping the \"readonly\"-ness of a gcref is analogous to using C++'s `const_cast` operator. It could allow mutation of a value that the caller did not intend to make mutable.\r\n\r\n* (4) The runtime will not validate that casts performed by these APIs are correct. This is equivalent to C++'s `reinterpret_cast` operator. Improper casts could result in buffer overruns when accessing the backing value or in incorrect entry points being invoked when calling instance methods.\r\n\r\n* (5) While it is legal to calculate the absolute offset between two gcrefs, it is unverifiable to do so. See ECMA-335, Sec. III.1.5 and Table III.2.\r\n\r\n* (6) The runtime does not validate the buffer lengths provided to these APIs. Improper usage could result in buffer overruns.\r\n\r\n* (7) Use of this API could expose uninitialized memory to the caller. See ECMA-335, Sec. II.15.4.1.3 and Sec. III.1.8.1.1. If the uninitialized memory is projected as a non-primitive struct, the instance's backing fields could contain data which violates invariants that would normally be guaranteed by the instance's ctor.\r\n\r\n* (8) The `sizeof` CIL instruction is always safe. See ECMA-335, Sec. III.4.25.\r\n\r\n* (9) The `unbox` CIL instruction is intended to return a controlled-mutability managed pointer. However, `Unsafe.Unbox` returns a fully mutable gcref. This could allow mutation of a boxed readonly struct, which is illegal. See [the `Unsafe.Unbox` docs](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.unbox) for more information.\r\n\r\n* (10) Per ECMA-335, Sec. II.14.4.2, it is not strictly legal for a gcref to point to _null_. However, all .NET runtimes allow this and treat it in a type-safe fashion, including guarding accesses to null gcrefs by throwing `NullReferenceException` as appropriate.\r\n\r\n* (11) This method performs the equivalent of a C++-style `reinterpret_cast`. This bypasses normal constructor validation, potentially returning values with inconsistent internal state. Projecting unmanaged types as byte buffers may also expose or allow modification of private fields that the type author did not intend, an unsafe reflection equivalent.\r\n\r\n* (12) The runtime does not perform alignment checks. The caller is responsible for ensuring that any returned refs or spans are properly aligned. Most APIs that accept refs or spans as parameters assume that the references are properly aligned, and they may exhibit undefined behavior if this assumption is violated.\r\n\r\n* (13) This method handles unaligned data accesses correctly.\r\n\r\n* (14) This method is safe if _TFrom_ and _TTo_ are integral primitives of the same width. For example, _TFrom = `int`_ with _TTo = `uint`_ is safe. Integral primitives are: `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`, `nint`, `nuint`, and enums backed by any of these. The caller is responsible for providing a correct _TFrom_ and _TTo_; the runtime will not validate these type parameters.\r\n\r\n* (15) The runtime will not validate that the array is pre-pinned. Additionally, since `Memory<T>` instances are subject to struct tearing, any instances backed by pre-pinned arrays must be used with caution in multithreading scenarios, as calling `Memory<T>.Pin` on a torn instance backed by a pre-pinned array may result in an access violation.\r\n\r\n* (16) If called against a zero-length array or buffer, returns a gcref to where the value at index 0 _would have been_. It is legal to use such a gcref for comparison purposes (see, e.g., `Unsafe.IsAddressLessThan`), and the gcref will be properly GC-tracked. However, it is illegal to dereference such a gcref. See ECMA-335, Sec. III.1.1.5.2.\r\n\r\n* (17) `Memory<T>`'s implementation is currently backed by one of: `T[]`, `string`, or `MemoryManager<T>`. However, since `Memory<T>` is an abstraction, new backing mechanisms may be introduced in the future. Callers must account for the runtime allowing all of `TryGet{Array|MemoryManager|String}` to return _false_; and callers must have a fallback code path in order to remain future-proof.\r\n\r\n* (18) This API may expose the larger buffer beyond the slice bounded by the `Memory<T>` instance. Callers should take care not to reference data beyond the slice provided to them.\r\n\r\n* (19) This API will never return a null reference. If called on an empty `string`, it will return a reference to the null terminator. The return value can always be safely dereferenced.\r\n\r\n* (20) This API will return a null reference if the underlying span contains no elements. Attempting to dereference it will result in a normal `NullReferenceException` being thrown. Note also that unlike pinning `string` instances, the buffer resulting from pinning a `ReadOnlySpan<char>` or `Span<char>` reference __is not__ guaranteed to be null-terminated. Consumers __must not__ attempt to read off the end of such buffers.\r\n\r\n* (21) Improper use of this API could corrupt the state of the associated object. However, it would not be considered a type safety or memory safety violation.\r\n\r\n* (22) The runtime will not validate that writes to the ref will satisfy covariant type safety constraints. For example, a local of type `ref readonly object` may actually point to a field typed as `string`. Removing the _readonly_ constraint and treating it as a mutable `ref object` may allow assignment of a non-`string` to the backing `string` field.",
    "number": 41418,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "EYES",
          "createdAt": "2020-08-26T21:34:11Z",
          "user": "EgorBo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-26T21:42:29Z",
          "user": "jkotas"
        },
        {
          "content": "HEART",
          "createdAt": "2020-08-26T21:47:49Z",
          "user": "jkotas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-26T23:28:36Z",
          "user": "reflectronic"
        },
        {
          "content": "HEART",
          "createdAt": "2020-08-27T00:15:56Z",
          "user": "omariom"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-27T11:40:37Z",
          "user": "strangeman375"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-08-27T23:42:40Z",
          "user": "AlgorithmsAreCool"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-20T11:30:35Z",
          "user": "gfoidl"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-07T22:01:18Z",
          "user": "richlander"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-05T03:25:54Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "HEART",
          "createdAt": "2024-07-05T03:25:55Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "EYES",
          "createdAt": "2024-07-05T03:25:57Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-03T07:03:21Z",
          "user": "ghishadow"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-19T22:04:49Z",
          "user": "vcsjones"
        }
      ],
      "totalCount": 14,
      "endCursor": "Y3Vyc29yOnYyOpHODBaDxw=="
    },
    "updatedAt": "2025-04-18T12:33:07Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "- `ArrayPool<T>.Shared.Return` is unsafe too: Calling it more than once for given instance will lead to arbitrary state corruption. \r\n\r\n- `ToEnumerable<T>(ReadOnlyMemory<T>)` and similar APIs are interesting case. If the memory was created from unmanaged source, the result is unsafe. Should it be considered unsafe by default since you cannot tell in general?",
          "createdAt": "2020-08-26T21:56:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T21:56:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTE0NDYzOA=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "@jkotas Those are both interesting points. There are lots of APIs which fall over if you create them from a poisoned source. `ToEnumerable` - as you had mentioned - is one example. But even `Memory<T>.get_Span` can be considered dangerous if both of the following are true: (a) the instance is backed by a `MemoryManager<T>`, _and_ (b) the instance was torn somehow. Then the resulting span can point to garbage memory.\r\n\r\nBut since `Memory<T>` is an abstraction it's nigh impossible to tell during a code review if the instance you have might be poisoned. So I was focusing more on the creation aspect: APIs which potentially allow creating a poisoned source are \"unsafe\", while APIs which deal with wrapping a `Memory<T>` around a `T[]` or `string` or whatever are safe. Sure - they can still be torn - but they're guaranteed never to buffer overrun. This also helps narrow where code reviewers have to look.\r\n\r\nRe: `ArrayPool<T>.Shared.Return` double-return, would you consider this a type safety / memory safety violation, or would it be some other kind of violation? If I create a shared static `byte[]` and multiple threads party on it concurrently, the app I wrote is certainly questionable. 🙂 But it'd still pass peverify and it's still type-safe in the typical definition. (I'm hand-waving away the fact that multithreading is already inherently unsafe, depending on who you ask.)\r\n\r\nI'm also curious about `IsNullRef` and `NullRef`. From a strict ECMA-335 reading, they're in violation, but in practice they're totally fine. Curious as to whether others had thoughts on this.",
          "createdAt": "2020-08-26T22:14:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T22:14:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTE1MTQwNw=="
        },
        {
          "author": "jkotas",
          "body": "> ArrayPool<T>.Shared.Return double-return, would you consider this a type safety / memory safety violation, or would it be some other kind of violation?\r\n\r\nI think it is in the same category as `Read<T>(ReadOnlySpan<byte>)` or `AsRef<T>(in T)`. It won't corrupt or crash the core runtime. The incorrect use will introduce inconsistent state with very bad consequences for the program as a whole.\r\n\r\n`ArrayPool<T>.Shared.Return` is actually worse than the other APIs because of it will cause data corruptions in unrelated part of the program.\r\n\r\n> strict ECMA-335 reading\r\n\r\nI would not read into verifiability rules in ECMA-335 too much. The rules have not been updated with evolution of the runtime. I think it may be better to explain all the reasoning here from the first principles.",
          "createdAt": "2020-08-26T23:20:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T23:20:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTE3MjcxNw=="
        },
        {
          "author": "reflectronic",
          "body": "ECMA-335 clearly states \"Managed pointers cannot be null\" (see §II.14.4.2). It does not take a very strict reading of the specification to see that they are, in theory, completely disallowed. This is likely one of the parts that can be changed when the team figures out how to rev the specification. Maybe this could be added to [the ECMA-335 augments doc](https://github.com/dotnet/runtime/blob/master/docs/design/specs/Ecma-335-Augments.md)?",
          "createdAt": "2020-08-26T23:37:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-08-26T23:48:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTE3Nzg4OQ=="
        },
        {
          "author": "GSPP",
          "body": "What standard is being used to make an API unsafe? As discussed, (7) does not allow to subvert the type system. It merely introduces state corruption which any number of things can do (for example, struct tearing). If the definition of \"unsafe\" is expanded to \"anything that seems rather dangerous but might be correct\" then the set grows considerably and it's often unclear what should be included. Another example would be OS handle access. That can cause \"bugs at a distance\".\r\n",
          "createdAt": "2020-09-12T09:05:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-12T09:06:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTQ1MDcxNw=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "> it's often unclear what should be included\r\n\r\nOh, definitely. That's why I didn't include `ArrayPool<T>.Shared.Return` in the original list. Sure, misuse can cause global state corruption in the application, but I can't categorize it as _type system subversion_.\r\n\r\nFWIW, (7) absolutely does allow subverting the type system. Consider the following application.\r\n\r\n```cs\r\npublic readonly struct MyStruct\r\n{\r\n    private readonly sbyte _myByte;\r\n    public MyStruct(sbyte value)\r\n    {\r\n        if (value < 0) { throw new ArgumentOutOfRangeException(); }\r\n        _myByte = value;\r\n    }\r\n\r\n    public override string ToString()\r\n    {\r\n        if (_myByte < 0) { Environment.FailFast(\"What just happened?\"); }\r\n        return _myByte.ToString();\r\n    }\r\n}\r\n\r\npublic void MyMethod()\r\n{\r\n    MyStruct[] arr = ArrayPool<MyStruct>.Shared.Rent(1024);\r\n    foreach (MyStruct value in arr)\r\n    {\r\n        Console.WriteLine(value); // this might Environment.FailFast\r\n    }\r\n}\r\n```\r\n\r\nStructs of less than one machine word in size cannot be torn through standard multithreaded access. There's no way to get the *_myByte* field to be negative without having bypassed normal ctor validation. (This is true more generally: even for torn structs, it is never possible for any single field to have a \"never legal\" value without first having bypassed ctor validation to create a standalone instance.)",
          "createdAt": "2020-09-12T18:20:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-12T18:20:02Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTUyNjc0MA=="
        },
        {
          "author": "jkotas",
          "body": "> What standard is being used to make an API unsafe? \r\n\r\nI think it should be the same standard that was used to mark API as SecurityCritical in Silverlight.",
          "createdAt": "2020-09-12T18:40:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-17T14:04:15Z",
                "user": "federicodangelo"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEKLqhw=="
          },
          "updatedAt": "2020-09-12T18:40:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTUyODc2MA=="
        },
        {
          "author": "GSPP",
          "body": "OK, I see what you mean. Essentially random bytes can be \"blitted\" over a struct. So you're saying, if a struct is no longer able to guard its state that counts as subverting the type system.",
          "createdAt": "2020-09-13T07:56:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-13T07:56:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTYzMDY2Ng=="
        },
        {
          "author": "benaadams",
          "body": "> OK, I see what you mean. Essentially random bytes can be \"blitted\" over a struct. So you're saying, if a struct is no longer able to guard its state that counts as subverting the type system.\r\n\r\nWould put reflection setters of private members also in that category?",
          "createdAt": "2020-09-13T13:01:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-13T13:01:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTY2ODgyMw=="
        },
        {
          "author": "jkotas",
          "body": "Yes, any private reflection is in this category. This issue is specific to MemoryMarshal and friends. The platform as a whole has a lot more unsafe or partially unsafe APIs.",
          "createdAt": "2020-09-13T14:40:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-13T14:41:51Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTY4MDAyNA=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "> I think it should be the same standard that was used to mark API as SecurityCritical in Silverlight.\r\n\r\nThis could potentially be a bit too broad. I'm pretty sure `ThreadPool.QUWI` was a critical function in Silverlight. And while I could sit here and argue that multi-threading is _technically_ a vehicle for violating runtime invariants, you all would rightfully smack me silly for suggesting we mark QUWI as unsafe. 🙂",
          "createdAt": "2020-10-29T04:10:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-29T04:10:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODM0NzI0NA=="
        },
        {
          "author": "jkotas",
          "body": "Agree. I meant just the reasons related to type and memory safety. The other reasons like CAS (where `ThreadPool.QUWI` falls into) or I/O are not relevant here.",
          "createdAt": "2020-10-29T08:29:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-29T08:29:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxODQ3NTE3MQ=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "Since we're talking about `MemoryMarshal` and `ArrayPool` type safety, might help to create some definitions as part of the doc effort.\r\n\r\nAn __unmanaged type__ is any value type which does not contain GC-tracked references. (See the [C# _unmanaged_ keyword](https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/unmanaged-types) and the API [`RuntimeHelpers.IsReferenceOrContainsReferences`](https://docs.microsoft.com/dotnet/api/system.runtime.compilerservices.runtimehelpers.isreferenceorcontainsreferences)). A non-exhaustive list of unmanaged types is: `bool`, `int`, `nint` (`IntPtr`), `double`, `decimal`, `DateTime`, and `Guid`.\r\n\r\nA __full-range unmanaged type__ is any value type where any arbitrary backing bit pattern is legal (verifiably type-safe) for an instance of that type. The set of full-range unmanaged types is a subset of the set of unmanaged types.\r\n\r\nThe difference is best demonstrated through examples.\r\n\r\n* `int` is a _full-range_ type. An int is 32 bits in size, and any one of the 2\\^32 ways to fill these 32 bits is a legal int.\r\n\r\n* `DateTime` is an _unmanaged_ type but is not a full-range type. A DateTime is backed by a 64-bit integer, but the bit patterns have special meaning within the DateTime logic, and DateTime's constructor validates that the caller has not provided an invalid bit flag pattern.\r\n\r\n* `Guid` is a _full-range_ type. A Guid is 128 bits in size, and any one of the 2\\^128 ways to fill these 128 bits results in a well-defined Guid.\r\n\r\n* `double` is a _full-range_ type. A double is 64 bits in size, and any one of the 2\\^64 ways to fill these bits results in a well-defined double. Note: many of these values might resolve to special values like _NaN_ or _Infinity_, but those values are still legal doubles, and all double operations are well-defined when consuming such values.\r\n\r\n* `decimal` is an _unmanaged_ type but is not a full-range type. The decimal constructor validates that each individual backing field is within a specific range and that the caller has not provided an out-of-range value.\r\n\r\n* `bool` is an _unmanaged_ type but is not a full-range type. A bool is 8 bits in size, but it is expected to have only the value `0` or `1`. A bool with a value `2 .. 255` will never naturally occur in the runtime, but if such a bool is constructed then it could cause unexpected branches to be taken within the app's logic.\r\n\r\nThis matters for two reasons. First, `MemoryMarshal` can be used to convert arbitrary bit patterns to instances of unmanaged types. For full-range unmanaged types this is fine since all possible bit patterns are valid. But if `MemoryMarshal` is used to convert an arbitary bit pattern to an instance of `DateTime`, `decimal`, `bool`, or some other unmanaged type that isn't a full-range unmanaged type, it could result in a type safety violation. The resulting instance won't have gone through constructor validation, and if the backing pattern is not well-formed then consumers of this instance could experience undefined behaviors at runtime, including app crashes, infinite loops, or security bypasses. Consumers who use `MemoryMarshal` as a glorified _reinterpret\\_cast\\<\\>_ operator should only ever use it to construct full-range unmanaged types, or they should perform validation upfront to ensure that the bit pattern is legal for the instance it's being copied into.\r\n\r\nSecond, the shared `ArrayPool` is not guaranteed to zero-init the backing memory of arrays that it returns to callers. For example, this could result in `ArrayPool<bool>.Shared.Rent` returning a `bool[]` whose elements have values other than `1` or `0`. (It is not possible to construct such a `bool[]` using standard safe C# code.) Consumers of `ArrayPool` should never attempt to dereference array elements that they did not initialize themselves.\r\n\r\nThis is a bit nuanced, and I'm trying to figure out a good way to weave these concepts into the docs being created. Otherwise I think our guidance on how to use these APIs correctly will be lacking.\r\n\r\n(Yes, I know you can tear structs to violate ctor invariants. But that's a rabbit hole I don't want to go down here.)",
          "createdAt": "2020-12-08T19:38:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-12-08T19:41:17Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-05T03:26:25Z",
                "user": "PaulusParssinen"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODodJlw=="
          },
          "updatedAt": "2020-12-08T19:38:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDkxNjQzMw=="
        },
        {
          "author": "GSPP",
          "body": "> A bool with a value 2 .. 255 will never naturally occur in the runtime\r\n\r\nAFAIK, this is totally legal in the CLR. C# requires unsafe code to construct such a bool (and indeed C# will malfunction when encountering such bools with operator `&`). It is purely a C# rule, though.\r\n",
          "createdAt": "2020-12-09T14:10:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-09T14:11:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTc5NDk0MA=="
        },
        {
          "author": "xtqqczze",
          "body": "> I realize that with `Unsafe`, `MemoryMarshal`, and friends entering wide use, we never formally stated what type safety guarantees (if any) the APIs offer. That is, we never provided a list of what APIs are \"safe\" and which are \"unsafe equivalents\" (related: [#31354](https://github.com/dotnet/runtime/issues/31354)).\n\n`Unsafe.BitCast` is missing from the issue description.",
          "createdAt": "2024-12-23T17:12:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-23T17:12:16Z",
          "id": "IC_kwDODI9FZc6Yl0A6"
        },
        {
          "author": "ChrML",
          "body": "> * `ArrayPool<T>.Shared.Return` is unsafe too: Calling it more than once for given instance will lead to arbitrary state corruption.\n\nI think that should be pointed out as a warning in the documentation. I see a lot of code where people uses it in daily code, luckily mostly as local vars.\n\nRenting an array and failing to return it is the good scenario that only causes a bit more GC (documented). But returning arrays and then leak them somewhere that keeps using them for a bit longer is much worse. Corrupts states and possibly security issue.",
          "createdAt": "2025-02-14T01:31:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-14T01:58:29Z",
                "user": "richlander"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEGVo5A=="
          },
          "updatedAt": "2025-02-14T01:33:08Z",
          "id": "IC_kwDODI9FZc6ebsUG"
        },
        {
          "author": "federicodangelo",
          "body": "Is there no way to make `MemoryMarshal.AsRef<>`  safe? since it only works on structs without references, and it validates the size of the span from which it is reading, how could it be used to perform any kind of type corruption? (I must be missing a trivial case 😅)",
          "createdAt": "2025-03-17T14:08:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-17T14:08:45Z",
          "id": "IC_kwDODI9FZc6isyuC"
        },
        {
          "author": "federicodangelo",
          "body": "I just read https://github.com/dotnet/runtime/issues/41418#issuecomment-740916433 , I see how it can be used to break some expected invariants now, specially regarding booleans and decimals values... maybe.. adding an attributes that specifies if all the fields can be interpreted in \"full range\" mode.. (and of course, it would only work with data types that are already full range..)",
          "createdAt": "2025-03-17T14:14:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-17T14:20:07Z",
          "id": "IC_kwDODI9FZc6is3td"
        },
        {
          "author": "EgorBo",
          "body": "We still haven't decided what unsafe means. If it's purely memory safety, then `MemoryMarshal.AsRef<>` seems to be safe by definition. At the same time, it may create portability issues with mis-alignment (all elements in the new re-interpreted span may not be atomically accessible) + yes, interpretation of some types including booleans, decimal may not be a good idea (but still, doesn't qualify directly as a memory safety issue). My vote for keeping it unsafe, though.",
          "createdAt": "2025-03-17T14:22:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-17T14:22:21Z",
          "id": "IC_kwDODI9FZc6is_iD"
        },
        {
          "author": "federicodangelo",
          "body": "I see.. seems like \"MemorySafe\" (no memory corruption) and \"ComputationalSafe\" (guaranteed behaviour across runtimes / target platforms) would allow more fine-grained control, but it seems a little overkills to introduce this complexity just for this.. (and I agree that it should be made unsafe)",
          "createdAt": "2025-03-17T19:53:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-17T19:53:44Z",
          "id": "IC_kwDODI9FZc6iwsuf"
        },
        {
          "author": "EgorBo",
          "body": "Slightly updated table for Unsafe and MemoryMarshal with missing APIs and our current understanding of memory safety. Basically, `yes` in the 2nd column is a suggestion to mark the corresponding API as \"requires unsafe\":\n\n## `System.Runtime.CompilerServices.Unsafe`:\n\n| API | Is unsafe? | Notes |\n|---|---|---|\n| `Add<T>(T, Int32)` | **Yes** | Can produce invalid refs |\n| `Add<T>(T, IntPtr)` | **Yes** | Can produce invalid refs |\n| `Add<T>(T, UIntPtr)` | **Yes** | Can produce invalid refs |\n| `Add<T>(Void*, Int32)` | **Yes** | Already requires unsafe context |\n| `AddByteOffset<T>(T, IntPtr)` | **Yes** | Can produce invalid refs |\n| `AddByteOffset<T>(T, UIntPtr)` | **Yes** | Can produce invalid refs |\n| `AreSame<T>(T, T)` | No | Fully safe |\n| `As<T>(Object)` | **Yes** | Bypasses type safety checks, can produce GC holes |\n| `As<TFrom,TTo>(TFrom)` | **Yes** | Bypasses type safety checks, can produce GC holes |\n| `AsPointer<T>(T)` | **Yes** | Bypasses type safety checks, can produce GC holes |\n| `AsRef<T>(T)` | **Yes** | Bypasses (covariant) type safety, </br>allows to mutate immutable data |\n| `AsRef<T>(Void*)` | **Yes** | Already requires unsafe context |\n| `BitCast<TFrom,TTo>(TFrom)` | **Yes** | Can produce GC holes, e.g. cast Guid to Span |\n| `ByteOffset<T>(T, T)` | No | May produce unreliable result for <br/>byrefs pointing to different objects |\n| `Copy<T>(T, Void*)` | **Yes** | Already requires unsafe context |\n| `Copy<T>(Void*, T)` | **Yes** | Already requires unsafe context |\n| `CopyBlock(Byte, Byte, UInt32)` | **Yes** | Bypasses range checks on write |\n| `CopyBlock(Void*, Void*, UInt32)` | **Yes** | Already requires unsafe context |\n| `CopyBlockUnaligned(Byte, Byte, UInt32)` | **Yes** | Bypasses range checks on write |\n| `CopyBlockUnaligned(Void*, Void*, UInt32)` | **Yes** | Already requires unsafe context |\n| `InitBlock(Byte, Byte, UInt32)` | **Yes** | Bypasses range checks on write |\n| `InitBlock(Void*, Byte, UInt32)` | **Yes** | Already requires unsafe context |\n| `InitBlockUnaligned(Byte, Byte, UInt32)` | **Yes** | Bypasses range checks on write |\n| `InitBlockUnaligned(Void*, Byte, UInt32)` | **Yes** | Already requires unsafe context |\n| `IsAddressGreaterThan<T>(T, T)` | No | May produce unreliable result for <br/>byrefs pointing to different objects |\n| `IsAddressLessThan<T>(T, T)` | No | May produce unreliable result for <br/>byrefs pointing to different objects |\n| `IsNullRef<T>(T)` | No | Null byrefs can be produced by safe C#, <br/>although, C# compiler assumes they can't exist |\n| `NullRef<T>()` | No | Null byrefs can be produced by safe C#, <br/>although, C# compiler assumes they can't exist \n| `Read<T>(Void*)` | **Yes** | Already requires unsafe context |\n| `ReadUnaligned<T>(Byte)` | **Yes** | Bypasses range checks on load |\n| `ReadUnaligned<T>(Void*)` | **Yes** | Already requires unsafe context |\n| `SizeOf<T>()` | No | Should be safe, but C#'s sizeof keyword </br>requires unsafe context |\n| `SkipInit<T>(T)` |  **Yes** | Non-zero init is considered memory usafe. |\n| `Subtract<T>(T, Int32)` | **Yes** | Can produce invalid refs |\n| `Subtract<T>(T, IntPtr)` | **Yes** | Can produce invalid refs |\n| `Subtract<T>(T, UIntPtr)` | **Yes** | Can produce invalid refs |\n| `Subtract<T>(Void*, Int32)` | **Yes** | Already requires unsafe context |\n| `SubtractByteOffset<T>(T, IntPtr)` | **Yes** | Can produce invalid refs |\n| `SubtractByteOffset<T>(T, UIntPtr)`| **Yes** | Can produce invalid refs |\n| `Unbox<T>(Object)` | **Yes** | Bypasses type-safety checks |\n| `Write<T>(Void*, T)` | **Yes** | Already requires unsafe context |\n| `WriteUnaligned<T>(Byte, T)` | **Yes** | Bypasses range checks on write |\n| `WriteUnaligned<T>(Void*, T)` | **Yes** | Already requires unsafe context |\n\n## `System.Runtime.InteropServices.MemoryMarshal`:\n\n| API | Is unsafe? | Notes |\n|---|---|---|\n| `AsBytes<T>(ReadOnlySpan<T>)` | Yes? | May expose private members |\n| `AsBytes<T>(Span<T>)` | **Yes** | Strips readonly-ness from private/immutable data in T |\n| `AsMemory<T>(ReadOnlyMemory<T>)` | **Yes** | Strips readonly-ness from private/immutable data in T |\n| `AsRef<T>(ReadOnlySpan<Byte>)` | No | May introduce unaligned reads/writes (portability issues) |\n| `AsRef<T>(Span<Byte>)` | No | May introduce unaligned reads/writes (portability issues) |\n| `Cast<TFrom,TTo>(ReadOnlySpan<TFrom>)` | Yes? | May expose private members. <br/>May introduce unaligned reads/writes (portability issues) |\n| `Cast<TFrom,TTo>(Span<TFrom>)` | Yes? | May expose private members. <br/>May introduce unaligned reads/writes (portability issues) |\n| `CreateFromPinnedArray<T>(T[], Int32, Int32)` | **Yes** | Assumes the input is pinned and will never be unpinned till Memory is alive |\n| `CreateReadOnlySpan<T>(T, Int32)` | **Yes** | May introduce invalid byrefs |\n| `CreateReadOnlySpanFromNullTerminated(Byte*)` | **Yes** | Already requires unsafe context |\n| `CreateReadOnlySpanFromNullTerminated(Char*)` | **Yes** | Already requires unsafe context |\n| `CreateSpan<T>(T, Int32)` | **Yes** | May introduce invalid byrefs |\n| `GetArrayDataReference(Array)` | **Yes** | May produce illegal-to-deref byrefs |\n| `GetArrayDataReference<T>(T[])` | **Yes** | May produce illegal-to-deref byrefs |\n| `GetReference<T>(ReadOnlySpan<T>)` | **Yes** | May produce illegal-to-deref byrefs |\n| `GetReference<T>(Span<T>)` | **Yes** | May produce illegal-to-deref byrefs |\n| `Read<T>(ReadOnlySpan<Byte>)` | Yes? | May expose private members. <br/>Potential issues for types like bool, decimal, etc. |\n| `ToEnumerable<T>(ReadOnlyMemory<T>)` | No |  |\n| `TryGetArray<T>(ReadOnlyMemory<T>, ArraySegment<T>)` | Yes | Strips readonly-ness |\n| `TryGetMemoryManager<T,TManager>(ReadOnlyMemory<T>, TManager, Int32, Int32)` | Yes | Strips readonly-ness |\n| `TryGetMemoryManager<T,TManager>(ReadOnlyMemory<T>, TManager)` | Yes | Strips readonly-ness |\n| `TryGetString(ReadOnlyMemory<Char>, String, Int32, Int32)` | No |  |\n| `TryRead<T>(ReadOnlySpan<Byte>, T)` | Yes? | May expose private members. <br/>Potential issues for types like bool, decimal, etc. from untrusted inputs |\n| `TryWrite<T>(Span<Byte>, T)` | Yes? | May expose private members. <br/>May write garbage values </br>if T is a struct with gaps/paddings |\n| `Write<T>(Span<Byte>, T)` | Yes? | May expose private members. <br/>May write garbage values </br>if T is a struct with gaps/paddings |",
          "createdAt": "2025-04-18T11:31:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-18T12:33:06Z",
          "id": "IC_kwDODI9FZc6nzdac"
        }
      ],
      "totalCount": 21,
      "endCursor": "Y3Vyc29yOnYyOpHOp83WnA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/41418",
    "title": "Enumerating type safety guarantees in MemoryMarshal and friends"
  },
  {
    "author": "jeffhandley",
    "labels": [
      "area-Meta",
      "tracking",
      "User Story",
      "Team:Libraries"
    ],
    "createdAt": "2020-09-02T00:20:15Z",
    "body": "Across .NET Core 3.0 and .NET 5.0, we annotated 94% of the `netcoreapp` assemblies for nullable reference types.  In .NET 6.0/.NET 7.0, we plan to annotate the remaining 6% of that surface area and continue through other assemblies built from the dotnet/runtime repo.\r\n\r\nThis issue represents the assemblies previously tracked in #2339 that did not get completed in .NET 5.0. Following the same practices we used in .NET 5.0, we will:\r\n\r\n* Submit individual PRs, one for each assembly. Each PR should include changes to both the src and the ref. Each PR should contain only changes related to the nullable annotations/attributes, no other changes.\r\n* PRs can be merged once the annotations have been appropriately reviewed in PR.\r\n* Group all of the nullable annotation changes together in dotnet/docs#21202\r\n\r\n*In .NET 5.0, as was tracked in #2339, we completed groups 1-8, most of group 9, all of group 10, and some items in groups 11 and 12*\r\n\r\n### Planned for .NET 6.0\r\n\r\n#### Group 9 ####\r\n- [x] System.ComponentModel.TypeConverter (https://github.com/dotnet/runtime/pull/54961 - @krwq)\r\n- [x] Finish System.Data.Common (https://github.com/dotnet/runtime/pull/55409 - @krwq)\r\n\r\n#### Group 11 (not part of netcoreapp but reference netcoreapp) ####\r\n- [x] System.DirectoryServices (https://github.com/dotnet/runtime/pull/48454)\r\n- [ ] System.Diagnostics.EventLog\r\n- [ ] System.DirectoryServices.Protocols\r\n- [ ] System.Security.Permissions\r\n- [x] System.Windows.Extensions https://github.com/dotnet/runtime/pull/57896\r\n\r\n### Stretch Goal for .NET 6, or Carry Over to .NET 7.0\r\n\r\n#### Group 12 (built from dotnet/runtime but not in netcoreapp and reference netstandard) ####\r\nWith netstandard not annotated, we will need to be cognizant of the fact that all dependencies will be viewed as oblivious:\r\n- [ ] System.CodeDom => netstandard\r\n- [ ] System.ComponentModel.Composition.Registration => netstandard, System.Reflection.Context\r\n- [ ] System.Composition.AttributedModel => netstandard\r\n- [ ] System.Composition.Convention => netstandard, System.Composition.AttributedModel\r\n- [ ] System.Composition.Hosting => netstandard, System.Composition.Runtime\r\n- [ ] System.Composition.Runtime => netstandard\r\n- [ ] System.Composition.TypedParts => netstandard, System.Composition.Runtime, System.Composition.AttributedModel, System.Composition.Hosting\r\n- [ ] System.Configuration.ConfigurationManager => netstandard, System.Security.Cryptography.ProtectedData\r\n- [ ] System.Diagnostics.PerformanceCounter => System.Configuration.ConfigurationManager\r\n- [ ] System.DirectoryServices.AccountManagement => System.Configuration.ConfigurationManager\r\n- [ ] System.IO.Ports => netstandard\r\n- [ ] System.Management => System.CodeDom\r\n- [ ] System.Runtime.Caching => netstandard, System.Configuration.ConfigurationManager\r\n- [x] System.Security.Cryptography.Xml => netstandard\r\n- [ ] System.ServiceModel.Syndication => netstandard\r\n\r\n#### Lastly ####\r\n- [ ] Remove `#nullable enable` from individual files after all dependent projects annotated  ",
    "number": 41720,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-24T07:25:58Z",
          "user": "Sti2nd"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOCUbt7Q=="
    },
    "updatedAt": "2023-09-11T23:45:15Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jeffhandley",
          "body": "@ericstj Do you think we should include the `Microsoft.Extensions` assemblies in our nullable annotations for 6.0?",
          "createdAt": "2020-09-02T00:21:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-02T00:21:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTIwMjc5Mg=="
        },
        {
          "author": "danmoseley",
          "body": "> Do you think we should include the Microsoft.Extensions assemblies in our nullable annotations for 6.0?\r\n\r\nI wonder whether the path is smooth enough now (and our [guidance up to date](https://github.com/dotnet/runtime/blob/c87e75e8ef260ccc6e979f9df1cc012536ee036f/docs/coding-guidelines/api-guidelines/nullability.md#L1)?) that community members could help with annotating those. We've had community folks in the past be happy to help with eg dead code and cleaning up analyzer warnings. I know one concern in the past was that it's hard to review/evaluate community PR's for annotations.",
          "createdAt": "2020-09-02T00:38:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-02T00:41:58Z",
                "user": "jeffhandley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-02T01:24:46Z",
                "user": "terrajobst"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-02T02:30:46Z",
                "user": "safern"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-02T07:58:30Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-31T21:12:18Z",
                "user": "SteveDunn"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOCVsTrg=="
          },
          "updatedAt": "2020-09-02T00:38:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTIwODcxMw=="
        },
        {
          "author": "jeffhandley",
          "body": "Good suggestion, @danmosemsft. We'll put some effort into ensuring the guidance is fully up to date. I intend do to some more project planning around this and probably spawn issues for each assembly to annotate, with them all on a project board. When we do that, we can consider which of them could be marked as `up-for-grabs`.",
          "createdAt": "2020-09-02T00:44:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-02T00:44:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTIxMDUyNw=="
        },
        {
          "author": "daniel-white",
          "body": "I'd be happy to pick up one.",
          "createdAt": "2020-09-02T02:31:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-02T02:31:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTI0ODc4Mw=="
        },
        {
          "author": "safern",
          "body": "I also opened: https://github.com/dotnet/runtime/issues/41724 to keep track of validation.",
          "createdAt": "2020-09-02T02:37:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-02T02:37:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTI1MDY1OQ=="
        },
        {
          "author": "maryamariyan",
          "body": "> I'd be happy to pick up one.\r\n\r\n@daniel-white items under Group 1 in issue https://github.com/dotnet/runtime/issues/43605 are also up for grabs once the guidance is up to date for community contributions as explained above by @jeffhandley and @danmosemsft ",
          "createdAt": "2020-10-20T15:15:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-20T15:17:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjkyNjc3OA=="
        },
        {
          "author": "krwq",
          "body": "@jeffhandley Group 9 is done, I do not believe we will do remainder of Group 11 in 6.0",
          "createdAt": "2021-07-10T05:01:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-10T05:01:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3NzU2NzIxNw=="
        },
        {
          "author": "jeffhandley",
          "body": "For .NET 6.0, the project templates now reflect `<Nullable>enable</Nullable>` making use of the nullable annotations on by default for new 6.0 projects.\r\n\r\nWe will continue with Groups 11 and 12 in .NET 7.0, but as Priority 3. Within each of those groups, we can order the libraries by number of downloads on nuget.org (per suggestion from @krwq).",
          "createdAt": "2021-07-22T14:58:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-07-22T18:26:19Z",
                "user": "ericstj"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBzjbzQ=="
          },
          "updatedAt": "2021-07-22T14:58:22Z",
          "id": "IC_kwDODI9FZc40v752"
        },
        {
          "author": "elachlan",
          "body": "Should this be moved to the .NET8 milestone? Is this still being worked on?",
          "createdAt": "2022-12-07T04:33:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-05-22T09:19:25Z",
                "user": "SteveDunn"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC8I7_A=="
          },
          "updatedAt": "2022-12-07T04:33:44Z",
          "id": "IC_kwDODI9FZc5P5Ei2"
        },
        {
          "author": "mairaw",
          "body": "I'm cleaning up the .NET 6 project. This shows as completed on the project dashboard but still open here. Not sure if remaining work should be moved to a new issue @jeffhandley?",
          "createdAt": "2023-05-26T20:09:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-26T20:09:27Z",
          "id": "IC_kwDODI9FZc5dRlMD"
        },
        {
          "author": "jeffhandley",
          "body": "@mairaw I'm sure the checkboxes on this issue description are out of date, but also not entirely completed. We completed our checkpoints for 6.0 and 7.0, so it's accurate that the card was completed on the project board. I'd prefer to leave this issue open though, and I'll leave this on my todo list to update this, refine the list of what's left, and decide what to do from there.",
          "createdAt": "2023-06-01T01:07:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-01T01:07:25Z",
          "id": "IC_kwDODI9FZc5dph4Z"
        },
        {
          "author": "mairaw",
          "body": "Sounds good @jeffhandley.",
          "createdAt": "2023-06-02T02:44:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-02T02:44:55Z",
          "id": "IC_kwDODI9FZc5dwvcY"
        }
      ],
      "totalCount": 12,
      "endCursor": "Y3Vyc29yOnYyOpHOXcL3GA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/41720",
    "title": "Developers benefit from nullable annotations throughout all netcoreapp and Windows Compat Pack libraries"
  },
  {
    "author": "ericstj",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2020-09-13T18:04:04Z",
    "body": "Continuing the discussion from here: https://github.com/dotnet/runtime/pull/41918#discussion_r487331771\r\n\r\n@eerhardt pointed out that our IDisposable [docs](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose#the-dispose-method) indicate that we should call GC.SuppressFinalize even if we don't have a finalizer, so that derived classes don't need to call it.\r\n\r\nFor this to work, we have to *always* call this, otherwise folks adding the finalizer need to check if the base type is already calling it (by looking at source or disassembling) and then only call it if the base type doesn't call it.  I don't think we should make folks look at implementations (nor can they in all cases).  So the alternate *safe* advice is to always call GC.SF in Dispose(bool) the type that adds the finalizer.\r\n\r\nI think relying on the base-type that implements IDisposable to call it is the *best* recommendation since it results in the fewest possible calls to GC.SF.  However for this to work, we need to do it everywhere.\r\n\r\nCurrently we don't.  I spot checked a few places:\r\nhttps://github.com/dotnet/runtime/blob/b910310f066d57e5290d5c3a96d64f03dfdd63c6/src/libraries/System.Private.CoreLib/src/System/IO/BinaryWriter.cs#L86-L89\r\nhttps://github.com/dotnet/runtime/blob/b910310f066d57e5290d5c3a96d64f03dfdd63c6/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/DiagnosticCounter.cs#L67-L74\r\nhttps://github.com/dotnet/runtime/blob/b910310f066d57e5290d5c3a96d64f03dfdd63c6/src/libraries/System.Private.CoreLib/src/System/Threading/ReaderWriterLockSlim.cs#L1249-L1252\r\nhttps://github.com/dotnet/runtime/blob/b910310f066d57e5290d5c3a96d64f03dfdd63c6/src/libraries/System.Private.CoreLib/src/System/Resources/ResourceReader.cs#L140-L148\r\nhttps://github.com/dotnet/runtime/blob/b910310f066d57e5290d5c3a96d64f03dfdd63c6/src/libraries/System.Private.CoreLib/src/System/Resources/ResourceSet.cs#L82-L105\r\n",
    "number": 42183,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-13T21:58:37Z",
          "user": "Marusyk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-09-14T07:41:32Z",
          "user": "strangeman375"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-03T05:40:07Z",
          "user": "DillonN"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOBYvIEA=="
    },
    "updatedAt": "2022-07-06T22:32:04Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.",
          "createdAt": "2020-09-13T18:04:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-13T18:04:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTcwMzkxMA=="
        },
        {
          "author": "ericstj",
          "body": "cc @dotnet/fxdc ",
          "createdAt": "2020-09-13T18:05:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-13T18:05:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTcwNDEwNg=="
        },
        {
          "author": "bartonjs",
          "body": "Yes, they _should_; it's the rules of the Basic Dispose Pattern :smile:.",
          "createdAt": "2020-09-14T05:35:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-14T05:35:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTgyMjA3Mg=="
        },
        {
          "author": "ericstj",
          "body": "I wonder if we could have an analyzer validate this pattern.",
          "createdAt": "2020-09-14T16:41:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-14T16:41:54Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjE3NjAzNQ=="
        },
        {
          "author": "bartonjs",
          "body": "[CA1816](https://github.com/dotnet/roslyn-analyzers/blob/6dea9b867e32607bc02f958efe46d4b2d1220e45/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/CallGCSuppressFinalizeCorrectly.cs) seems to check that there is a SuppressFinalize call in `Dispose()`, but it doesn't seem to necessarily enforce it's a perfect implementation of the Basic Dispose Pattern (that is, that it's after the call to `Dispose(true)`.\r\n\r\nBut it would at least find all the places that we didn't do it at all.",
          "createdAt": "2020-09-14T16:49:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-14T16:49:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjE4MDA4NQ=="
        },
        {
          "author": "jkotas",
          "body": "What is a breaking potential of adding the SuppressFinalize calls to existing types that never had it before? It will regress performance a bit for sure, but I believe it can also introduce functional breaks or memory leaks.",
          "createdAt": "2020-09-14T17:12:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-14T17:12:01Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjE5MjY2MQ=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "I'll continue to voice the contrarian view I've held for ages. :)\r\n\r\nIMO the dispose pattern (`this.Dispose(true); GC.SuppressFinalize(this);`) shouldn't be recommended for new code. The purpose of this pattern is to support the scenario where type authors are holding raw handles to unmanaged resources, which honestly vanishingly few people should be doing nowadays. The overwhelmingly more common cases are where type authors maintain instance fields to managed objects (like `Stream`) or to managed handles (`SafeHandle`-derived types), which means that the type authors should never have to worry about finalization. But by continuing to promote the dispose pattern, and by having analyzer rules which promote it, we're forcing devs to think about this concept even though it's not necessary.\r\n\r\n\"But what if a subclassed type wants to maintain an unmanaged handle?\" is sometimes brought up as a counterargument. I'm not too worried about this for two reasons. First, I anticipate very few people ever subclassing an existing unsealed type and using raw handles instead of managed handles. Second, on the off-chance that somebody does this, _they'll need to write a finalizer anyway_, and they can take that opportunity to clean up whatever unmanaged resources they were holding on to. IMO there's no benefit to forcing types all the way up and down the hierarchy to worry about this unlikely scenario.",
          "createdAt": "2020-09-14T18:42:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-14T18:44:57Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-14T20:29:31Z",
                "user": "Wraith2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-14T22:04:08Z",
                "user": "saucecontrol"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-16T04:28:05Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-16T13:56:16Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-08T11:09:42Z",
                "user": "Kamil-Zakiev"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-08T09:58:31Z",
                "user": "aayjaychan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-07-19T12:02:51Z",
                "user": "ufcpp"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-08-03T15:49:10Z",
                "user": "Sergio0694"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-08-03T17:57:27Z",
                "user": "rgwood"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-24T19:55:00Z",
                "user": "alewmt"
              }
            ],
            "totalCount": 11,
            "endCursor": "Y3Vyc29yOnYyOpHOEHatNQ=="
          },
          "updatedAt": "2020-09-14T18:42:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjI0MDQwNQ=="
        },
        {
          "author": "msedi",
          "body": "@GrabYourPitchforks: What do you think about unregistering events? What is the suggested pattern here? If an object with registered event handlers gets disposed should the class itself unregister by setting the events to null, or should the one the registered the event also unregister it?",
          "createdAt": "2020-09-14T19:06:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-09-14T19:06:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjI1MzI4NQ=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "You'll see some discrepancies on that across the Framework. UI stacks in particular often have their own mechanisms for registering and deregistering.\r\n\r\nAs a rule of thumb, I'd recommend that the component responsible for registering the event also be responsible for unregistering the event. If I instantiate some object _Foo_, then I call `Blah.SomeEvent += foo.EventHandler;`, then I am also responsible for removing the event. Alternatively, if _Foo_'s ctor is responsible for registering the event, then _Foo_'s dispose routine should be responsible for deregistering the event.\r\n\r\nBut that's just a rule of thumb. If you're building a component for a particular UI framework, general recommendation is to follow whatever convention that UI framework prescribes. That'll make it easier for your component to interoperate with its sibling components and for consumers to reason about your component's behavior.",
          "createdAt": "2020-09-14T19:26:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-14T19:50:06Z",
                "user": "msedi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBQWXsw=="
          },
          "updatedAt": "2020-09-14T19:26:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjI2NDM2OA=="
        },
        {
          "author": "krwq",
          "body": "Did we get into the consensus here? Regardless of the output it doesn't sound like this will make the 6.0. Please move back if you think it will.",
          "createdAt": "2021-07-19T11:18:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-19T11:18:07Z",
          "id": "IC_kwDODI9FZc40mWDP"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHONJlgzw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/42183",
    "title": "Should all non-sealed classes implementing IDisposable call GC.SuppressFinalize even if they don't define a finalizer?"
  },
  {
    "author": "layomia",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2020-09-18T03:00:30Z",
    "body": "From @danmosemsft in https://github.com/dotnet/runtime/pull/42359#issuecomment-694490846:\r\n\r\n> Don't let it stop this PR, but I think these test strings of > 200KB probably should be in the test data repo as they just bloat the repo. Once you've merged them though, that bloat is locked in so it's more of a future suggestion.\r\n\r\nFrom @ericstj in https://github.com/dotnet/runtime/pull/42359#issuecomment-694574240:\r\n\r\n>You can address the string suggestion in master. We're usually more sensitive about the type of data and how much it changes. Text data is typically OK at somewhat larger sizes if it doesn't change too often, since it compresses really well in git. In fact git uses zlib compression which is based on DEFLATE same as zip used in nupkg. Binary data, especially binary data that changes often, is what we make sure to put in assets packages. Also any large data that would be considered \"optional\" for some repo consumers. Maybe we could write some guidelines down somewhere :)\r\n\r\nTodo:\r\n\r\n- [ ] Write guidance about checking in test data in dotnet/runtime-assets vs in test projects\r\n- [ ] Consider migrating JSON test payloads to [dotnet/runtime-assets](https://github.com/dotnet/runtime-assets)",
    "number": 42428,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2023-10-05T22:11:13Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "I agree with Eric's guidance ",
          "createdAt": "2020-09-18T03:23:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-09-18T17:17:56Z",
                "user": "layomia"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBQ4Ajg=="
          },
          "updatedAt": "2020-09-18T03:23:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDYyNTYxNg=="
        },
        {
          "author": "joperezr",
          "body": "@layomia are you still planning on addressing this by 6.0? If not, can we adjust the milestone to future then?",
          "createdAt": "2021-08-05T16:11:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-05T16:11:45Z",
          "id": "IC_kwDODI9FZc41QwBg"
        },
        {
          "author": "ericstj",
          "body": "I don't think this meets the bar for 6.0 at this point, let's move it out.",
          "createdAt": "2021-08-05T16:39:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-05T17:39:46Z",
                "user": "layomia"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB1SLiQ=="
          },
          "updatedAt": "2021-08-05T16:39:36Z",
          "id": "IC_kwDODI9FZc41Q0zT"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHONUNM0w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/42428",
    "title": "Write guidance about checking in test data in test projects vs dotnet/runtime-assets"
  },
  {
    "author": "kunalspathak",
    "labels": [
      "area-Meta",
      "tenet-performance",
      "tenet-performance-benchmarks",
      "User Story",
      "Bottom Up Work"
    ],
    "createdAt": "2020-10-09T18:15:24Z",
    "body": "The code quality and performance of RyuJIT is tracked internally by running [MicroBenchmarks](https://github.com/dotnet/performance/tree/master/src/benchmarks/micro) in our performance lab.  We regularly triage the [performance issues](https://github.com/dotnet/runtime/issues?q=%22%5BPerf%22+in%3Atitle+author%3ADrewScoggins) opened by the .NET performance team. After going through these issues for past several months, we have identified some key points.\r\n\r\n### Stability\r\nMany times, the set of commits that are flagged as introducing regression in a benchmark, do not touch the code that is tested in the benchmark. In fact, the assembly code generated for the .NET code that is being tested is often identical and yet the measurements show differences. Some of our investigation reveals that the fluctuation in the benchmark measurements happen because of the misalignment of generated JIT code in process memory. Below is an example of [LoopReturn](https://github.com/dotnet/performance/blob/8aed638c9ee65c034fe0cca4ea2bdc3a68d2a6b5/src/benchmarks/micro/runtime/Layout/SearchLoops.cs#L30) benchmark that shows such behavior. \r\n\r\n![image](https://user-images.githubusercontent.com/12488060/95612182-cf194f00-0a17-11eb-84fe-cd6831006501.png)\r\n\r\nIt is very time consuming for .NET developers to do the analysis of benchmarks that regressed because of things that are out of control of .NET runtime. In the past, we have closed several issues like https://github.com/dotnet/runtime/issues/13770, https://github.com/dotnet/runtime/issues/39721 and https://github.com/dotnet/runtime/issues/39722 because they were regressions because of code alignment. A great example that we found out while investigating those issues was the change introduced in https://github.com/dotnet/runtime/pull/38586 eliminated a `test` instruction and should have showed improvement in the benchmarks, but introduced regression because the code (loop code inside method) now gets misaligned and the method runs slower.\r\n\r\nAlignment issues was brought up few times in https://github.com/dotnet/runtime/issues/9912 and https://github.com/dotnet/runtime/issues/8108 and this issue tracks the progress towards the goal of stabilizing and possibly improving the performance of .NET apps that are heavily affected because of code alignment.\r\n\r\n### Performance lab infrastructure\r\nOnce we address the code alignment issue, the next big thing will be to identify and make required infrastructure changes in our performance lab to make sure that it can easily flag such issues without needing much interaction from .NET developers. For example, https://github.com/dotnet/BenchmarkDotNet/issues/1513 proposes to make memory alignment in the benchmark run random to catch these issues early and once we address the underlying problem in .NET, we should never see bimodal behavior of those benchmarks. After that, if the performance lab does find a regression in the benchmark, we need to have robust tooling support to get possible metrics from performance runs so that a developer doing the investigation can easily identify the cause of regression. For example, identifying the time spent in various phases of .NET runtime like Jitting, Jit interface, Tier0/Tier1 JIT code, hot methods, instructions retired during benchmark execution and so forth.\r\n\r\n### Reliable benchmarks collection\r\nLastly, for developers working on JIT, we want to identify set of benchmarks that are stable enough and can be trusted to give us reliable measurement whenever there is a need to verify the performance for changes done to the JIT codebase. This will help us conduct performance testing ahead of time and identify potential regressions rather than waiting it to happen in performance lab.\r\n\r\nHere are set of work items that we have identified to achieve all the above:\r\n\r\n### Code alignment work\r\n* [x] Make method entries of JIT code having loops aligned at 32-byte boundary for xarch. (**Done in https://github.com/dotnet/runtime/pull/42909**)\r\n* [x] Devise a mechanism to identify inner loops (the ones that don't have more loops inside) present in a method. (**Done: #44370**)\r\n* [x] Experiment with heuristics that should decide if a particular inner loop needs alignment or not. (**Done: #44370**)\r\n* [x] Calculate the padding that needs to be added to align the identified inner loop. (**Done: #44370**)\r\n* [x] Basic: Add the padding near the loop header (either at the end of previous block or at the beginning of the loop header). (**Done: #44370**)\r\n* [x] Before merging above work, measure the impact of loop alignment on Microbenchmarks. Tracked in https://github.com/dotnet/runtime/issues/44051. Also in https://github.com/dotnet/runtime/issues/43227#issuecomment-765684981\r\n* [x] Identify benchmarks that get stabilized or whose performance is improved by the above work. (**Update**: See the analysis starting from https://github.com/dotnet/runtime/issues/43227#issuecomment-765684981)\r\n\r\n### Future work\r\n* [x] Make method entries of JIT code having loops aligned at relevant boundary for arm32/arm64. See section 4.8 of  https://developer.arm.com/documentation/swog309707/a.\r\n* [ ] Combine branch tightening and loop alignment adjustments in single phase.\r\n* [ ] Advanced: If padding proves to be costly, have a way to spread the padding throughout the method so the loop header gets aligned. Account the padding while doing branch tensioning.\r\n   * [ ] Add padding at the blind spot like after `jmp` or `ret` instruction that comes before `align` instruction.\r\n   * [ ] Add padding at the end of blocks that has lower weight than the block that precedes the loop header block.\r\n   * [ ] Explore option to have a method misaligned such that we can skip the padding needed for loops and they get auto-aligned or aligned with minimal padding.\r\n * [ ] Perform loop alignment similar to #44370 for R2R code.\r\n * [ ] For x86, we should improve the encoding we use for multiple size `NOP` instructions. Today, we just output [repeated single byte](https://github.com/dotnet/runtime/blob/9a09cee7b96d43b1700710b4d2b7a03be656a34b/src/coreclr/jit/emitxarch.cpp#L9918-L9973) `90` , but could do better like we do for x64. \r\n * [ ] Explore option to align enclosing loops if it can borrow some of the padding needed for inner loop. E.g. in a nested loop, if there is an inner loop that needs padding of 10 bytes and the outer loop can be aligned by adding padding of 4 bytes, then add padding of 4 bytes to outer loop and 6 bytes to inner loop. That way, both the loops are aligned.\r\n\r\n### Performance tooling work\r\n* [x] Add random memory alignment. Tracked by https://github.com/dotnet/BenchmarkDotNet/issues/1513 and https://github.com/dotnet/performance/pull/1587\r\n* [ ] Add various tooling in PerfView, BenchmarkDotNet analyzers to add the required metric. (**WIP**)\r\n* [x] Perform superpmi collection of microbenchmarks so codegen team can easily test the impact of their change on generated code of various benchmarks.  (https://github.com/dotnet/runtime/pull/47900/)\r\n* [x] Add a new event to track memory allocated for JIT code that can be surfaced in PerfView through JITStats. PR: https://github.com/dotnet/runtime/pull/44030 and https://github.com/microsoft/perfview/pull/1289\r\n",
    "number": 43227,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2020-10-09T19:00:56Z",
          "user": "danmoseley"
        },
        {
          "content": "ROCKET",
          "createdAt": "2020-10-09T19:00:58Z",
          "user": "danmoseley"
        },
        {
          "content": "HEART",
          "createdAt": "2020-10-09T19:21:55Z",
          "user": "nathan-moore"
        },
        {
          "content": "HEART",
          "createdAt": "2020-10-09T19:30:02Z",
          "user": "adamsitnik"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-10-24T05:48:15Z",
          "user": "Mike-E-angelo"
        },
        {
          "content": "HEART",
          "createdAt": "2020-11-01T22:20:06Z",
          "user": "zdivelbiss"
        },
        {
          "content": "HOORAY",
          "createdAt": "2020-11-02T23:31:27Z",
          "user": "danmoseley"
        },
        {
          "content": "HEART",
          "createdAt": "2020-11-23T09:07:24Z",
          "user": "NMSAzulX"
        },
        {
          "content": "EYES",
          "createdAt": "2020-12-16T05:35:43Z",
          "user": "danmoseley"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-01-28T20:48:14Z",
          "user": "rgwood"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-02-24T14:21:55Z",
          "user": "Kavignon"
        },
        {
          "content": "HEART",
          "createdAt": "2021-02-24T14:21:56Z",
          "user": "Kavignon"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-03-16T20:23:48Z",
          "user": "omariom"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-03-28T15:27:00Z",
          "user": "Molkree"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-10-23T10:54:54Z",
          "user": "samsosa"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-23T10:54:55Z",
          "user": "samsosa"
        }
      ],
      "totalCount": 16,
      "endCursor": "Y3Vyc29yOnYyOpHOB_jQbg=="
    },
    "updatedAt": "2022-01-08T17:06:33Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "kunalspathak",
          "body": "@dotnet/jit-contrib , @danmosemsft ",
          "createdAt": "2020-10-09T18:15:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-09T18:15:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjMzMTU3MA=="
        },
        {
          "author": "danmoseley",
          "body": "cc @DrewScoggins @billwert @adamsitnik ",
          "createdAt": "2020-10-09T19:00:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-09T19:30:18Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBTDOIQ=="
          },
          "updatedAt": "2020-10-09T19:00:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjM1MjIwOA=="
        },
        {
          "author": "danmoseley",
          "body": "To state the obvious (I think) -- I believe we have good data to suggest that alignment is the dominant reason for bimodality. I'm not sure though that we can be sure there aren't other common causes for bimodality -- my assumption is that we'll find out how much is left when you've completed some of this work. ",
          "createdAt": "2020-10-09T19:29:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-09T19:29:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjM2NDQxNQ=="
        },
        {
          "author": "kunalspathak",
          "body": "> To state the obvious (I think) -- I believe we have good data to suggest that alignment is the dominant reason for bimodality. I'm not sure though that we can be sure there aren't other common causes for bimodality -- my assumption is that we'll find out how much is left when you've completed some of this work.\r\n\r\nYes, there will definitely be more reason for bimodality, but alignment will fix most of the obvious ones that we know of and then, it will be easier for us to focus one remaining ones. Currently, there are just [too many bimodal benchmarks](https://github.com/drewScoggins/performance-2/issues?q=is%3Aopen+is%3Aissue+label%3ABimodal).",
          "createdAt": "2020-10-09T19:32:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-09T19:45:36Z",
                "user": "danmoseley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBTDTVA=="
          },
          "updatedAt": "2020-10-09T19:32:30Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjM2NTY4OQ=="
        },
        {
          "author": "JulieLeeMSFT",
          "body": "Bolded WIP texts in the plan.",
          "createdAt": "2020-11-02T21:46:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-02T21:46:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDc0Mjg0Ng=="
        },
        {
          "author": "kunalspathak",
          "body": "With the #44370, we will start aligning inner loops at 32B boundary with padding up to 16 bytes. \r\n\r\nThe code size impact on .NET libraries (from pmi runs)\r\n\r\n```\r\nSummary of Code Size diffs:\r\n(Lower is better)\r\n\r\nTotal bytes of base: 51622033\r\nTotal bytes of diff: 51639087\r\nTotal bytes of delta: 17054 (0.03% of base)\r\n    diff is a regression.\r\n\r\n```\r\n\r\n```\r\nSummary of Allocation Size diffs:\r\n(Lower is better)\r\n\r\nTotal bytes of base: 51940550\r\nTotal bytes of diff: 51957619\r\nTotal bytes of delta: 17069 (0.03% of base)\r\n    diff is a regression.\r\n```\r\n\r\nDetails : https://github.com/dotnet/runtime/pull/44370#issuecomment-749263096\r\n\r\nOut of 380K+ methods of .NET libraries (using PMI), based on loop alignment heuristics, we will align 1766 loops in 1515 methods. Details: https://github.com/dotnet/runtime/pull/44370#issuecomment-758133875",
          "createdAt": "2021-01-12T05:00:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-01-12T05:06:59Z",
                "user": "danmoseley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBcGq6A=="
          },
          "updatedAt": "2021-01-12T05:00:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODQwMTc4MQ=="
        },
        {
          "author": "danmoseley",
          "body": "@DrewScoggins it will be interesting to see whether you start seeing less noise tomorrow.",
          "createdAt": "2021-01-12T05:07:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2021-01-12T07:58:38Z",
                "user": "DrewScoggins"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-19T08:11:23Z",
                "user": "GSPP"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBc3a9A=="
          },
          "updatedAt": "2021-01-12T05:07:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODQwNDQ0Nw=="
        },
        {
          "author": "kunalspathak",
          "body": "Below is from weekly comparison report:\r\n\r\nLinux x64:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105545987-9c871f80-5cb1-11eb-97f5-f44a3af74756.png)\r\n\r\nhttps://pvscmdupload.blob.core.windows.net/reports/01_18_2021/report_Weekly_ca=x64_cb=refs-heads-master_co=Ubuntu1804_cr=dotnetruntime_cc=CompliationMode=tiered-RunKind=micro_2021-01-18.html#Improvements\r\n\r\nWindows x64:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105546016-a872e180-5cb1-11eb-9570-01ce05bf2513.png)\r\n\r\nhttps://pvscmdupload.blob.core.windows.net/reports/01_18_2021/report_Weekly_ca=x64_cb=refs-heads-master_co=Windows1018362_cr=dotnetruntime_cc=CompliationMode=tiered-RunKind=micro_2021-01-18.html\r\n\r\nWindows x86:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105546589-6bf3b580-5cb2-11eb-96cd-019a55edbfb7.png)\r\n\r\n\r\nhttps://pvscmdupload.blob.core.windows.net/reports/01_18_2021/report_Weekly_ca=x86_cb=refs-heads-master_co=Windows1018362_cr=dotnetruntime_cc=CompliationMode=tiered-RunKind=micro_2021-01-18.html\r\n\r\nSome of the improvements above comes from @stephentoub 's  https://github.com/dotnet/runtime/pull/46895. But, the next thing I will do is analyze the regressions.",
          "createdAt": "2021-01-22T21:08:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-22T21:11:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NTY4NDk4MQ=="
        },
        {
          "author": "adamsitnik",
          "body": "@kunalspathak from the reports that you have provided, the following benchmarks look fishy to me:\r\n\r\n```log\r\n# Linux x64\r\nSystem.Memory.Span<Int32>.SequenceEqual(Size: 512)\r\nSystem.Memory.Span<Int32>.EndsWith(Size: 512)\r\nSpan.IndexerBench.KnownSizeCtor2(length: 1024)\r\nSystem.Memory.Span<Byte>.SequenceEqual(Size: 512)\r\nSystem.MathBenchmarks.Single.Max // this can be a benchmark regression, but not actual product code regression\r\nBenchstone.BenchI.LogicArray.Test\r\n# Windows x64\r\nSystem.Text.Json.Tests.Utf8JsonReaderCommentsTests.Utf8JsonReaderCommentParsing(CommentHandling: Skip, SegmentSize: 0, TestCase: LongMultiLine)\r\nSystem.Collections.ContainsFalse<String>.ICollection(Size: 512)  // this can be a benchmark regression, but not actual product code regression\r\n# Windows x86\r\nSystem.Collections.ContainsKeyFalse<String, String>.Dictionary(Size: 512)\r\nPerfLabTests.CastingPerf.CheckObjIsInterfaceYes // this can be a benchmark regression, but not actual product code regression\r\nPerfLabTests.CastingPerf.CheckIsInstAnyIsInterfaceNo // this can be a benchmark regression, but not actual product code regression\r\nPerfLabTests.CastingPerf.CheckObjIsInterfaceNo // this can be a benchmark regression, but not actual product code regression\r\n```\r\n\r\nbut there is much more improvements than regressions!",
          "createdAt": "2021-01-26T13:11:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T13:11:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzUzMTYxNw=="
        },
        {
          "author": "danmoseley",
          "body": "It's interesting that some of the regressing scenarios have also started becoming noisy eg [System.MathBenchmarks.Single.Max](https://pvscmdupload.blob.core.windows.net/reports/01_18_2021/report_Weekly_ca=x64_cb=refs-heads-master_co=Ubuntu1804_cr=dotnetruntime_cc=CompliationMode=tiered-RunKind=micro_2021-01-18.html#Improvements)\r\n\r\n\r\n",
          "createdAt": "2021-01-26T16:56:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T16:56:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzY4MDU0MA=="
        },
        {
          "author": "kunalspathak",
          "body": "Thanks @adamsitnik . Could you please explain the data point that makes you think \"this can be a benchmark regression, but not actual product code regression\". It will help me in quicker investigation for these benchmarks on my part. Here is couple of benchmarks that investigated yesterday:\r\n\r\n### System.Text.Json.Tests.Utf8JsonReaderCommentsTests.Utf8JsonReaderCommentParsing(CommentHandling: Skip, SegmentSize: 0, TestCase: LongMultiLine)\r\n\r\n\r\nThis looks like a real regression because of the execution of `align` instruction inside `JsonReaderHelper::CountNewLines`.\r\n![image](https://user-images.githubusercontent.com/12488060/105876341-bd9e8780-5fb3-11eb-99f3-4f28d26b38a9.png)\r\n\r\nIt was improved in November after https://github.com/dotnet/runtime/pull/42909 change, but with loop alignment changes, it went into higher end. \r\nIn below screenshot:\r\n1. is the method alignment change\r\n2. is the loop alignment change.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105876416-d018c100-5fb3-11eb-9ff9-6ab78ccfbb31.png)\r\n\r\nFrom Vtune:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105876510-e6268180-5fb3-11eb-8eff-528ce73f7ae0.png)\r\n\r\nI am not sure how much vtune points to the `nop` execution contribution, but my guess is that it contributes to the slowness, given that `CountNewLines` is the hottest method.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105876862-37cf0c00-5fb4-11eb-8b6b-25df632c2604.png)\r\n\r\n### System.Collections.ContainsFalse<String>.ICollection(Size: 512) \r\n\r\nI was not able to reproduce this on my machine. I also compared the disassembly and we don't add `align` instruction in the benchmark code or methods that we are testing. My initial guess is that it could be because of data alignment since we allocate array during setup. \r\n\r\nHere is the history of that test which confirms the bimodality.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105877328-b5931780-5fb4-11eb-8ae7-2e80fa25a434.png)\r\n\r\nIf there was any code alignment issue (which I will dig more later today), the loop alignment would have addressed it and the benchmark went to the slower numbers, but data alignment in future runs might change it and we might again see the bimodality. \r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105877393-cba0d800-5fb4-11eb-84d5-ea37cf5f0d5b.png)\r\n\r\n@danmosemsft - Thanks for pointing it out. Even we noticed it and it is interesting because it shouldn't be affected by the data alignment. I will investigate further.",
          "createdAt": "2021-01-26T17:04:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T17:04:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzY4NTk0Ng=="
        },
        {
          "author": "adamsitnik",
          "body": "> Could you please explain the data point that makes you think \"this can be a benchmark regression, but not actual product code regression\"\r\n\r\nSure! Some of these benchmarks have loops inside them (while they [should not](https://github.com/dotnet/performance/blob/master/docs/microbenchmark-design-guidelines.md#Loops)) like the [casting benchmark](https://github.com/dotnet/performance/blob/4e14ecc54759224121b807c70e46fb1d9ee0e7d6/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L309-L316):\r\n\r\n```cs\r\n[Benchmark]\r\npublic bool CheckObjIsInterfaceYes()\r\n{\r\n    bool res = false;\r\n    for (int i = 0; i < InnerIterationCount; i++)\r\n        res = myClass1 is IMyInterface1;\r\n    return res;\r\n}\r\n```\r\nBy \"this can be a benchmark regression, but not actual product code regression\" I meant that the part of the product that the benchmark is trying to measure has not regressed (casting in this example), but it's exercised in a loop, which shows benchmark regression. ",
          "createdAt": "2021-01-26T17:15:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-26T19:00:12Z",
                "user": "kunalspathak"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBdxZXg=="
          },
          "updatedAt": "2021-01-26T17:15:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzY5MzA5Mg=="
        },
        {
          "author": "kunalspathak",
          "body": "> Some of these benchmarks have loops inside them (while they should not)\r\n\r\nDo we have plan to fix them?\r\n\r\nAlso, we noticed the following numbers for bubblesort2. The benchmark is less bimodal after loop alignment, but the remaining swing might be because of data alignment since we create an array inside the benchmark.\r\n\r\nhttps://github.com/dotnet/performance/blob/a25a963e3f14214102207a2b75a5ece25162a333/src/benchmarks/micro/runtime/Benchstones/BenchI/BubbleSort2.cs#L32\r\n\r\nHere is the overall history:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105897439-031b7e80-5fcd-11eb-8543-3c321b35e863.png)\r\n\r\nand then zoomed in to the loop alignment impact:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105897506-1c242f80-5fcd-11eb-8daa-c0c262c3a851.png)\r\n\r\n\r\n",
          "createdAt": "2021-01-26T19:53:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-26T19:53:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc4ODMyMg=="
        },
        {
          "author": "kunalspathak",
          "body": "I went through most of the regressions in https://github.com/dotnet/runtime/issues/43227#issuecomment-765684981 and here is my analysis.\r\n\r\n## Summary\r\n\r\n-  As @adamsitnik pointed out, many benchmark code contains loop and the improvement/regression were mostly because those loops got aligned. The disassembly of library method that was being tested was identical (with some exceptions, see below). Best example of this is `MathBenchmark.Single.Max`. @danmosemsft .\r\n\r\n- There were benchmarks that are heavily impacted by data alignment because of allocation happening in benchmark code itself. Most of the array benchmarks fall in this category. So the stability might have not impacted because of loop alignment or in certain cases, the numbers were more stable than before, but the additional bimodality is because of data alignment. E.g. Bubble sort (see below).\r\n\r\n- For x86, we should improve the encoding we use for multiple size `NOP` instructions. Today, we just output [repeated single byte](https://github.com/dotnet/runtime/blob/master/src/coreclr/jit/emitxarch.cpp#L9265-L9269) `90` , but could do better like we do for x64. \r\n\r\n- Lastly, there are places that I have noticed, where we emit \"align\" instruction in blocks that are expensive. We should find a way to instead put it either after \"jmp\" or \"ret\" instruction that comes before the \"align\" instruction (so the `NOP` are never fetched by the decoder and decoded) or add them in one of the preceding blocks that has lower weight. We already have a work item \"Advanced padding\" to do the part of squeezing pads after `jmp` or `ret` (wherever possible), but sometimes we might not find such instructions that provides blind spot to insert `align` instruction. In such case, we should do best effort to insert `align` in a block that has lower weight than the one that precedes immediately the loop block. Most prominent reason to do this work is because currently many hot SpanHelper APIs like `IndexOf`, `IndexOfAny`, `Contains` and `SequenceCompare`  include `align` instruction that is greater than 4 bytes. Placing the `align` instruction appropriately should hopefully improve these methods.\r\n\r\nTo conclude, I did not see any surprises in my analysis and we would expect these results from loop alignment. I am working with @DrewScoggins  to get similar report on how much stability did \"loop alignment\" improved.\r\n\r\n## Benchmark's analysis\r\n\r\n### CastingPerf2.CastingPerf.ObjO\r\n\r\nWe do not do any loop alignment in benchmark code because the loop has calls. Historically, the test is very flaky.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105931391-f5332100-5fff-11eb-9dbf-34a21b4b5c0e.png)\r\n\r\n\r\n### KnownSizeCtor2\r\n\r\nI am not sure why the benchmark calls into [a test method that contains the actual benchmark code](https://github.com/dotnet/performance/blob/master/src/benchmarks/micro/runtime/Span/Indexer.cs#L326-L347). But @adamsitnik  is right about this benchmark. We add 4 bytes of NOP compensation during the prolog and then 4 bytes of alignment before the 2nd loop, but then, none of the alignment happens for the actual library code (`new Span()`) that the benchmark is testing. So the regression might be from the extra 8 bytes of NOP/align instruction, but it shouldn't affect the library code. Perhaps, we should change this benchmark to not have loop and just have benchmark code in the method that is annotated with `[Benchmark]`.\r\n\r\n### JsonNet_\r\n\r\nThese might be real regression, although from Vtune profiling, it was not that obvious. However, key observation was that we added `align` instruction in some of the hot libraries methods and by doing \"advanced padding\", we will be able to get back some of the regressions. For instance, in assembly code for [SpanHelpers.Contains()](https://source.dot.net/#System.Private.CoreLib/SpanHelpers.T.cs,48), we added `align` instruction in a block that had weight of 4 although there were colder blocks before it where we could have added this `align` instruction.\r\n\r\n\r\n<details>\r\n<summary>SpanHelpers.Contains assembly code</summary>\r\n\r\n```asm\r\n; Assembly listing for method System.SpanHelpers:Contains(byref,ushort,int):bool\r\n; Emitting BLENDED_CODE for generic X86 CPU - Windows\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M35514_IG01:              ;; offset=0000H\r\n       55           push     ebp\r\n       8BEC         mov      ebp, esp\r\n       57           push     edi\r\n       56           push     esi\r\n       53           push     ebx\r\n       83EC28       sub      esp, 40\r\n       C5F877       vzeroupper \r\n       33C0         xor      eax, eax\r\n       8945F0       mov      dword ptr [ebp-10H], eax\r\n       8BD9         mov      ebx, ecx\r\n       8BFA         mov      edi, edx\r\n       8B7508       mov      esi, dword ptr [ebp+08H]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 8.25\r\nG_M35514_IG02:              ;; offset=0018H\r\n       8BCE         mov      ecx, esi\r\n       F7D1         not      ecx\r\n       C1E91F       shr      ecx, 31\r\n       8B153820A306 mov      edx, gword ptr [06A32038H]      ''\r\n       85C9         test     ecx, ecx\r\n       7507         jne      SHORT G_M35514_IG04\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 5.75\r\nG_M35514_IG03:              ;; offset=0029H\r\n       8BCA         mov      ecx, edx\r\n       E858598CF8   call     System.Diagnostics.Debug:Fail(System.String,System.String)\r\n\t\t\t\t\t\t;; bbWeight=0.25 PerfScore 0.31\r\nG_M35514_IG04:              ;; offset=0030H\r\n       895DF0       mov      bword ptr [ebp-10H], ebx\r\n       8D0473       lea      eax, [ebx+2*esi]\r\n       83FE20       cmp      esi, 32\r\n       7C55         jl       SHORT G_M35514_IG07\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 2.75\r\nG_M35514_IG05:              ;; offset=003BH\r\n       8BCB         mov      ecx, ebx\r\n       83E11F       and      ecx, 31\r\n       8BD1         mov      edx, ecx\r\n       C1EA1F       shr      edx, 31\r\n       03CA         add      ecx, edx\r\n       D1F9         sar      ecx, 1\r\n       8BF1         mov      esi, ecx\r\n       F7DE         neg      esi\r\n       83C610       add      esi, 16\r\n       83E60F       and      esi, 15\r\n       83FE04       cmp      esi, 4\r\n       7C3D         jl       SHORT G_M35514_IG08\r\n\t\t\t\t\t\t;; bbWeight=0.50 PerfScore 2.88\r\nG_M35514_IG06:              ;; offset=0058H\r\n       83C6FC       add      esi, -4\r\n       0FB7D7       movzx    edx, di\r\n       0FB70B       movzx    ecx, word  ptr [ebx]\r\n       3BD1         cmp      edx, ecx\r\n       0F84FE000000 je       G_M35514_IG17\r\n       0FB74B02     movzx    ecx, word  ptr [ebx+2]\r\n       3BD1         cmp      edx, ecx\r\n       0F84F2000000 je       G_M35514_IG17\r\n       0FB74B04     movzx    ecx, word  ptr [ebx+4]\r\n       3BD1         cmp      edx, ecx\r\n       0F84E6000000 je       G_M35514_IG17\r\n       0FB74B06     movzx    ecx, word  ptr [ebx+6]\r\n       3BD1         cmp      edx, ecx\r\n       0F84DA000000 je       G_M35514_IG17\r\n       83C308       add      ebx, 8\r\n\t\t\t\t\t\t;; bbWeight=2    PerfScore 27.50\r\nG_M35514_IG07:              ;; offset=0090H\r\n       83FE04       cmp      esi, 4\r\n       7DC3         jge      SHORT G_M35514_IG06\r\n\t\t\t\t\t\t;; bbWeight=16    PerfScore 20.00\r\nG_M35514_IG08:              ;; offset=0095H\r\n       85F6         test     esi, esi\r\n       7E20         jle      SHORT G_M35514_IG10\r\n       0FB7D7       movzx    edx, di\r\n       90909090     align    \r\n\t\t\t\t\t\t;; bbWeight=4    PerfScore 7.00\r\n\r\n```\r\n</details>\r\n\r\nFor this particular benchmark, I gathered all the `align` instruction we added in various methods that were JITted during the execution of the benchmark. Note that, some of them might not be contributing to the benchmark measurement.\r\n\r\n| Method Name                                                                                                 | Align bytes | Block weight |\r\n|-------------------------------------------------------------------------------------------------------------|-------------|--------------|\r\n| System.SpanHelpers:SequenceCompareTo(byref,int,byref,int):int                                               | 4           | 0.5          |\r\n| System.SpanHelpers:IndexOfAny(byref,ushort,ushort,ushort,int):int                                           | 3           | 0.5          |\r\n| System.SpanHelpers:Contains(byref,ushort,int):bool                                                          | 4           | 4            |\r\n| Newtonsoft.Json.DefaultJsonNameTable:Add(System.String):System.String:this                                  | 7           | 0.5          |\r\n| System.SpanHelpers:IndexOf(byref,ubyte,int):int                                                             | 5           | 2            |\r\n| Newtonsoft.Json.Utilities.JavaScriptUtils:ShouldEscapeJavaScriptString(System.String,System.Boolean[]):bool | 3           | 0.5          |\r\n| System.SpanHelpers:IndexOfAny(byref,ushort,ushort,int):int                                                  | 12          | 0.5          |\r\n| Newtonsoft.Json.DefaultJsonNameTable:Add(System.String):System.String:this                                  | 7           | 0.5          |\r\n\r\n### CheckObjIsInterfaceYes\r\n\r\nThis one was little surprising as the benchmark is straightforward. We do not align the loop inside benchmark because of the presence of call. So I am not sure why it would regress.\r\n\r\n```cs\r\npublic bool CheckObjIsInterfaceYes()\r\n{\r\n    bool res = false;\r\n    for (int i = 0; i < InnerIterationCount; i++)\r\n        res = myfoo is IFoo;\r\n    return res;\r\n}\r\n```\r\n\r\n### Single.Max\r\n\r\nLike previous one, this too has a loop and as @adamsitnik  pointed, although the benchmark regresses, the product code doesn't. In this benchmark, we disable VEX prefix encoding optimization for 2 instructions that are part of benchmark code. Then we add `1 byte` align instruction. So the regression is coming from it.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933145-ce2a1e80-6002-11eb-9bab-c291cb9721b1.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933155-cff3e200-6002-11eb-9dc2-e4d486c25fdf.png)\r\n\r\n### LogicArray\r\n\r\nAs I mentioned earlier, this is a typical array benchmark that contains allocation (and hence data alignment issues). In this benchmark, we align the inner loop, but there is an enclosing loop that would process the added padding for alignment.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933280-016cad80-6003-11eb-9784-4dce54f13055.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933287-03367100-6003-11eb-9a65-7a57bbf50ded.png)\r\n\r\n\r\n### HeapSort\r\n\r\nHere too, we \"align\" inner loop, but those padding instructions get executed by the outer loop and might have seen regression. \r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933447-455fb280-6003-11eb-81f6-d49c315ce646.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933452-47297600-6003-11eb-9297-29935a427ac7.png)\r\n\r\n\r\n### BenchJagged\r\n\r\nWe should just delete this benchmark or trim it. This does array allocation inside benchmark code and the measurements can be prone to GC behavior, data alignment, etc. I didn't deep dive into this one looking at the historical data of it.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933380-2a8d3e00-6003-11eb-9d7d-8ab740762028.png)\r\n\r\n### Bubble sort\r\n\r\nFinally, here is my favorite. This one too has data alignment, but after fixing the code alignment, we see less swing of measurements. In below graph, the first drop around October came after we started aligning methods at 32B boundary in https://github.com/dotnet/runtime/pull/42909 and the 2nd drop came after \"loop alignment\".\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105933893-08e08680-6004-11eb-92d6-d49da90b10a6.png)\r\n\r\nZoomed to \"loop alignment\" change:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/105934090-5bba3e00-6004-11eb-861a-7fd5e5f7211d.png)\r\n\r\nAll this happens because we align the [inner loop present in Bubble sort](https://github.com/dotnet/performance/blob/1894120c4ffb2e896cafd3cb31f7bb0768eb4c8a/src/benchmarks/micro/runtime/Benchstones/BenchI/BubbleSort2.cs#L19-L24). Note that we have added 5 bytes padding in `IG03` to align the loop. However, `IG03` has `weight=4` because it is part of the outer loop. We could get more performance benefits had we added the padding in `IG01` or `IG02` which has `weight=1`.\r\n\r\n<details>\r\n<summary>Assembly code of Inner() method</summary>\r\n\r\n```asm\r\n; Assembly listing for method MiniBench.BubbleSort2:Inner(System.Int32[])\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n;\r\n; Lcl frame size = 32\r\n\r\nG_M27289_IG01:              ;; offset=0000H\r\n       56                   push     rsi\r\n       4883EC20             sub      rsp, 32\r\n                                                ;; bbWeight=1    PerfScore 1.25\r\nG_M27289_IG02:              ;; offset=0005H\r\n       B801000000           mov      eax, 1\r\n                                                ;; bbWeight=1    PerfScore 0.25\r\nG_M27289_IG03:              ;; offset=000AH\r\n       8BD0                 mov      edx, eax\r\n       81FA4C1D0000         cmp      edx, 0x1D4C\r\n       7F3F                 jg       SHORT G_M27289_IG07\r\n       448B4108             mov      r8d, dword ptr [rcx+8]\r\n       4C63C8               movsxd   r9, eax\r\n       0F1F440000           align\r\n                                                ;; bbWeight=4    PerfScore 16.00\r\nG_M27289_IG04:              ;; offset=0020H\r\n       413BC0               cmp      eax, r8d\r\n       733D                 jae      SHORT G_M27289_IG09\r\n       468B548910           mov      r10d, dword ptr [rcx+4*r9+16]\r\n       413BD0               cmp      edx, r8d\r\n       7333                 jae      SHORT G_M27289_IG09\r\n       4C63DA               movsxd   r11, edx\r\n       468B5C9910           mov      r11d, dword ptr [rcx+4*r11+16]\r\n       453BD3               cmp      r10d, r11d\r\n       7E0D                 jle      SHORT G_M27289_IG06\r\n                                                ;; bbWeight=16    PerfScore 128.00\r\nG_M27289_IG05:              ;; offset=003CH\r\n       4863F2               movsxd   rsi, edx\r\n       448954B110           mov      dword ptr [rcx+4*rsi+16], r10d\r\n       46895C8910           mov      dword ptr [rcx+4*r9+16], r11d\r\n                                                ;; bbWeight=8    PerfScore 18.00\r\nG_M27289_IG06:              ;; offset=0049H\r\n       FFC2                 inc      edx\r\n       81FA4C1D0000         cmp      edx, 0x1D4C\r\n       7ECD                 jle      SHORT G_M27289_IG04\r\n                                                ;; bbWeight=16    PerfScore 24.00\r\nG_M27289_IG07:              ;; offset=0053H\r\n       FFC0                 inc      eax\r\n       3D4B1D0000           cmp      eax, 0x1D4B\r\n       7EAE                 jle      SHORT G_M27289_IG03\r\n                                                ;; bbWeight=4    PerfScore 6.00\r\nG_M27289_IG08:              ;; offset=005CH\r\n       4883C420             add      rsp, 32\r\n       5E                   pop      rsi\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.75\r\nG_M27289_IG09:              ;; offset=0062H\r\n       E8D9E8095F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3\r\n                                                ;; bbWeight=0    PerfScore 0.00\r\n```\r\n</details>\r\n\r\nThanks to @adamsitnik  for helping me do faster analysis by pointing at the presence of loop inside benchmark code.",
          "createdAt": "2021-01-27T02:24:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-28T18:37:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzk2NzYwMw=="
        },
        {
          "author": "danmoseley",
          "body": "Nice analysis @kunalspathak. There were 2 or 3 todo's in your summary above, do they need issues, and listing in the tracking list at the top of this issue? I am happy to see this continuing progress.\r\n\r\nAs an aside, is there more than BDN can do to help regularize data alignment, when the buffer is allocated by the test and reused? Presumably by doing some tricks with padding in a struct and some unsafe code one can organize an array to have a certain alignment. Maybe BDN could handle such ugly tricks and expose an API for a test to allocate an array nicely aligned. @adamsitnik ",
          "createdAt": "2021-01-27T03:16:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T03:16:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzk4NzY4Nw=="
        },
        {
          "author": "kunalspathak",
          "body": "Another benchmark that I would like to highlight the impact on stability and performance is `LoopReturn`:\r\n\r\nUbuntu x64\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106020775-f3f20a80-6078-11eb-9a7d-07c8524f2d46.png)\r\n\r\nSource: https://pvscmdupload.blob.core.windows.net/reports/allTestHistory%2frefs%2fheads%2fmaster_x64_ubuntu%2018.04%2fLayout.SearchLoops.LoopReturn.html\r\n\r\n\r\nWindows x64\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106020704-e76db200-6078-11eb-984e-d6de18c340f3.png)\r\n\r\nSource: https://pvscmdupload.blob.core.windows.net/reports/allTestHistory%2frefs%2fheads%2fmaster_x64_Windows%2010.0.18362%2fLayout.SearchLoops.LoopReturn.html",
          "createdAt": "2021-01-27T16:24:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T16:24:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODQwMjc3Mw=="
        },
        {
          "author": "kunalspathak",
          "body": "> There were 2 or 3 todo's in your summary above, do they need issues, and listing in the tracking list at the top of this issue?\r\n\r\nSome of them were tracked in this issue's description. I have updated it to include my other findings.",
          "createdAt": "2021-01-27T16:42:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T16:42:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODQxNDc2Mg=="
        },
        {
          "author": "danmoseley",
          "body": "> As an aside, is there more than BDN can do to help regularize data alignment, when the buffer is allocated by the test and reused?\r\n\r\nNever mind, I forgot about https://github.com/dotnet/performance/pull/1587 etc. we're attacking both sides. 😊",
          "createdAt": "2021-01-27T21:38:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-27T21:38:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODU5NDAzNQ=="
        },
        {
          "author": "kunalspathak",
          "body": "Another round of analysis. \r\n\r\n## Stability\r\n\r\nI went through the stability data for [windows x64](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows%2010.0.18362/AllTestindex.html) and [linux x64](https://pvscmdupload.blob.core.windows.net/reports/01_18_2021/report_Weekly_ca=x64_cb=refs-heads-master_co=Ubuntu1804_cr=dotnetruntime_cc=CompliationMode=tiered-RunKind=micro_2021-01-18.html#Improvements) that @DrewScoggins  shared with me. In this report, \"regression\" means that loop alignment introduced more variance to the measurements and thus made the benchmark instable, while \"improvements\" meant that the loop alignment work actually stabilized the benchmark and reduced the variance. I analyzed around 150 benchmarks to see if the regressions were real by checking at the historical data of [Windows x64](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows%2010.0.18362/AllTestindex.html) and [Linux x64](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_ubuntu%2018.04/AllTestindex.html) for each of the 150 benchmark. If I see that the benchmark had lot of variance historically, I concluded that the loop alignment didn't added to the variance. There were few exceptions like `Perf_Enumerable.Count` and `Single.Max` where post-loop alignment we saw some variance, but other than that, most of the regression pointed out in report were not related to the loop alignment work.\r\n\r\n## Performance\r\n\r\nHere are some of the take away points:\r\n- JIT maintains a loop table to track all the loops it has seen and use it to perform various optimizations and analysis. It turns out that there is a bug (or a missing feature, whatever you call) where we do not record the cloned loop inside loop table. With that, we miss out opportunities to do the required analysis on cloned loops. Tracking issue: https://github.com/dotnet/runtime/issues/43713\r\n\r\n- We sometimes add \"NOP compensation\" for the over-estimated instruction. Most of the over-estimated instructions are jumps and that that happens because branch tightening happens before loop alignment adjustment phase. In branch tightening we adjust the size of jump instructions depending on the target offset, but later, the loop alignment adjustment can further shorten the IG offsets resulting in over-estimated jump instruction. To address this, we need to combine branch tightening and loop alignment adjustment in same phase rather than separating them. I have updated the work item list to capture this explicitly. After doing this, we might further think about adding the compensation behind `jmp` or in cold block.\r\n\r\n- Often the encoding of jump instruction before vs. after loop alignment might increase because of added padding instructions. I do not think we can do much about it.\r\n\r\n### FannkuchRedux_9\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106822899-dacafa00-6634-11eb-8cb1-b04ddde9263f.png)\r\n\r\nThe regression happens because of extra padding we added to align some of the loops inside benchmark code. Asmdiffs: https://www.diffchecker.com/ryZqqO6I. \r\n\r\n\r\n### MulMatrix\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106822997-0a7a0200-6635-11eb-8ba8-ef14f24e69b5.png)\r\n\r\nThe regression happens because of addition of 5 \"NOP overestimate compensation\" in hot blocks. The overestimation happened for jump instructions. The way to address is by combining branch tightening with loop alignment adjustments (already planned work). Asmdiffs: https://www.diffchecker.com/IcktyNPi\r\n\r\n\r\n### TryGetUInt16:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106823269-7b211e80-6635-11eb-8b4b-ac6e37c361bb.png)\r\n\r\nIn this method, `TryParseUInt16D()` is the hot method as seen from VTune screenshot:\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106823363-a9066300-6635-11eb-9af3-66c59035bc18.png)\r\n![image](https://user-images.githubusercontent.com/12488060/106823367-ab68bd00-6635-11eb-91c3-7d0d4d80a5ac.png)\r\n\r\nWith loop alignment, we ended up adding padding at the end of hot block that VTune pointed above (Block 2). \r\nAsmdiffs: https://www.diffchecker.com/jHt5pv99\r\n\r\n### GetTypeCode\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106823797-62fdcf00-6636-11eb-88f6-c1158cdf8cd8.png)\r\n\r\nAlthough this shows regression, I verified that there is no loop inside the benchmark, nor a loop in the libraries method that it test. Further, I also compared the asm diffs and there is no \"align\" instruction.\r\n\r\n### ContainsTrue/ContainsFalse\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106800888-e529cb80-6615-11eb-82d1-d6c35d93cbd8.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106800925-f07cf700-6615-11eb-8363-9f4d4bf541d3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/106800954-fb378c00-6615-11eb-9ae1-cbd1e33a749d.png)\r\n\r\nThis one is interesting. The hot method for all these benchmarks is [GenericEqualityComparer`1[__Canon][System.__Canon]:IndexOf](https://source.dot.net/#System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.CoreCLR.cs,19). In this method, we clone a loop, but later decide to not align it because it had call. However, we do not record that fact in the cloned loop because of which we have to align the cloned loop containing call. Additionally, until we emit the padding in the cloned loop, we have to also compensate the over-estimated instructions. One of the place where such overestimated instruction is compensated happen to be the actual hot loop that the method executes. You can see my detail analysis in https://github.com/dotnet/runtime/issues/43713#issuecomment-772781240.",
          "createdAt": "2021-02-04T00:04:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-04T00:04:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3MjkxNDExMA=="
        },
        {
          "author": "JulieLeeMSFT",
          "body": "Good analysis that loop alignment work didn’t introduce regression.\n\nWhat is cloned loop in the loop table?\n\nThanks,\nJulie\n________________________________\nFrom: Kunal Pathak <notifications@github.com>\nSent: Wednesday, February 3, 2021 4:04:47 PM\nTo: dotnet/runtime <runtime@noreply.github.com>\nCc: Julie Lee <Julie.Lee@microsoft.com>; State change <state_change@noreply.github.com>\nSubject: Re: [dotnet/runtime] Stabilize performance measurement (#43227)\n\n\nAnother round of analysis.\n\nStability\n\nI went through the stability data for windows x64<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpvscmdupload.blob.core.windows.net%2Freports%2FallTestHistory%2Frefs%2Fheads%2Fmaster_x64_Windows%252010.0.18362%2FAllTestindex.html&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906853966%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=JzoKgDiI6s4aPuzmEKLXLKYP4p6D3%2FFBUcfTHMqQTh8%3D&reserved=0> and linux x64<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpvscmdupload.blob.core.windows.net%2Freports%2F01_18_2021%2Freport_Weekly_ca%3Dx64_cb%3Drefs-heads-master_co%3DUbuntu1804_cr%3Ddotnetruntime_cc%3DCompliationMode%3Dtiered-RunKind%3Dmicro_2021-01-18.html%23Improvements&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906863969%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=0Sh17Vl9rR2A1VHzGPvVg6o4sdok3Oo8xHLIGOE1n68%3D&reserved=0> that @DrewScoggins<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FDrewScoggins&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906873964%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=jC4vx7YwI%2BkeytbEAgtoYZ5olJYzSwRrMRIXtuxH9Yw%3D&reserved=0> shared with me. In this report, \"regression\" means that loop alignment introduced more variance to the measurements and thus made the benchmark instable, while \"improvements\" meant that the loop alignment work actually stabilized the benchmark and reduced the variance. I analyzed around 150 benchmarks to see if the regressions were real by checking at the historical data of Windows x64<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpvscmdupload.blob.core.windows.net%2Freports%2FallTestHistory%2Frefs%2Fheads%2Fmaster_x64_Windows%252010.0.18362%2FAllTestindex.html&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906873964%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=a0d01xOt9ES%2FDK47JR%2Bkte69X56LDC8eFrZigjIkED8%3D&reserved=0> and Linux x64<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpvscmdupload.blob.core.windows.net%2Freports%2FallTestHistory%2Frefs%2Fheads%2Fmaster_x64_ubuntu%252018.04%2FAllTestindex.html&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906883953%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=iQCzzCL2iCnirJk6AdsVNDHx9F3roGI1ooUe5yOwflY%3D&reserved=0> for each of the 150 benchmark. If I see that the benchmark had lot of variance historically, I concluded that the loop alignment didn't added to the variance. There were few exceptions like Perf_Enumerable.Count and Single.Max where post-loop alignment we saw some variance, but other than that, most of the regression pointed out in report were not related to the loop alignment work.\n\nPerformance\n\nHere are some of the take away points:\n\n  *   JIT maintains a loop table to track all the loops it has seen and use it to perform various optimizations and analysis. It turns out that there is a bug (or a missing feature, whatever you call) where we do not record the cloned loop inside loop table. With that, we miss out opportunities to do the required analysis on cloned loops. Tracking issue: #43713<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F43713&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906893953%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=J5enp6slL3eR8bofOKJRQ%2FPWD%2FcytuF5%2BJ%2FdZeAO%2FpE%3D&reserved=0>\n\n  *   We sometimes add \"NOP compensation\" for the over-estimated instruction. Most of the over-estimated instructions are jumps and that that happens because branch tightening happens before loop alignment adjustment phase. In branch tightening we adjust the size of jump instructions depending on the target offset, but later, the loop alignment adjustment can further shorten the IG offsets resulting in over-estimated jump instruction. To address this, we need to combine branch tightening and loop alignment adjustment in same phase rather than separating them. I have updated the work item list to capture this explicitly. After doing this, we might further think about adding the compensation behind jmp or in cold block.\n\n  *   Often the encoding of jump instruction before vs. after loop alignment might increase because of added padding instructions. I do not think we can do much about it.\n\nFannkuchRedux_9\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106822899-dacafa00-6634-11eb-8cb1-b04ddde9263f.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906893953%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Q54HzNgvPNQTXtwAQuPmzfTRqjVfhARvx1IAfrLJqNQ%3D&reserved=0>\n\nThe regression happens because of extra padding we added to align some of the loops inside benchmark code. Asmdiffs: https://www.diffchecker.com/ryZqqO6I<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.diffchecker.com%2FryZqqO6I&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906903947%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=XFuE8AbjSsS%2B1%2Bpz4%2FrC9WrMKjw1s%2FvR8T6M9X6jSUg%3D&reserved=0>.\n\nMulMatrix\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106822997-0a7a0200-6635-11eb-8ba8-ef14f24e69b5.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906913945%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=f9kEpNalgN%2BN97G1T%2FoizEOzW0RFIlhxPqz7MT3%2Bnf4%3D&reserved=0>\n\nThe regression happens because of addition of 5 \"NOP overestimate compensation\" in hot blocks. The overestimation happened for jump instructions. The way to address is by combining branch tightening with loop alignment adjustments (already planned work). Asmdiffs: https://www.diffchecker.com/IcktyNPi<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.diffchecker.com%2FIcktyNPi&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906913945%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=rN6BDyNV4K0SxjzZspVE0HiLjWSTnNFxwg9qc72mFic%3D&reserved=0>\n\nTryGetUInt16:\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106823269-7b211e80-6635-11eb-8b4b-ac6e37c361bb.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906923938%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Hguv6A8Lir65jIlpbWgYcqk2n5ZClcGBnbkP8r9aoHU%3D&reserved=0>\n\nIn this method, TryParseUInt16D() is the hot method as seen from VTune screenshot:\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106823363-a9066300-6635-11eb-9af3-66c59035bc18.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906933933%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=dDmX2yMppcyPM74kCdYxNOqxleIveSFuOrdGM9NNwGg%3D&reserved=0>\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106823367-ab68bd00-6635-11eb-91c3-7d0d4d80a5ac.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906933933%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=8BT8fuTpmy05kjuMYqijLaCQvci84j9HcWexcFpXSw4%3D&reserved=0>\n\nWith loop alignment, we ended up adding padding at the end of hot block that VTune pointed above (Block 2).\nAsmdiffs: https://www.diffchecker.com/jHt5pv99<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.diffchecker.com%2FjHt5pv99&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906943929%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=H0s2zpi8O9CZmNbx4LzRh%2BdCKb%2Fo8JaIkBc42CN81Us%3D&reserved=0>\n\nGetTypeCode\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106823797-62fdcf00-6636-11eb-88f6-c1158cdf8cd8.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906953929%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=mFhfJ7Gil4MqAWvEbHRQp2Y1S2iHq1etBCHqYcYj%2F%2BU%3D&reserved=0>\n\nAlthough this shows regression, I verified that there is no loop inside the benchmark, nor a loop in the libraries method that it test. Further, I also compared the asm diffs and there is no \"align\" instruction.\n\nContainsTrue/ContainsFalse\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106800888-e529cb80-6615-11eb-82d1-d6c35d93cbd8.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906953929%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=DmNJfqNMuKephBI0ZUD0V2Uj2US%2FN%2BMeKZqtNcah%2FkA%3D&reserved=0>\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106800925-f07cf700-6615-11eb-8363-9f4d4bf541d3.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906963923%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=rumBw9wW%2FIhj%2BA%2BogbUobw%2BGY6v1YvFvMWajnDjdgfQ%3D&reserved=0>\n\n[image]<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F12488060%2F106800954-fb378c00-6615-11eb-9ae1-cbd1e33a749d.png&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906973917%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=6JSCGxq6Hdv7TJWfo3AZB3qxMd9dzkaOXbEG0IVGZJ0%3D&reserved=0>\n\nThis one is interesting. The hot method for all these benchmarks is GenericEqualityComparer`1[__Canon][System.__Canon]:IndexOf<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fsource.dot.net%2F%23System.Private.CoreLib%2Fsrc%2FSystem%2FCollections%2FGeneric%2FEqualityComparer.CoreCLR.cs%2C19&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906973917%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=toPQAni6Sdcvh%2FhulUnwGD4NQDMT6uOHyPNo62h0VLo%3D&reserved=0>. In this method, we clone a loop, but later decide to not align it because it had call. However, we do not record that fact in the cloned loop because of which we have to align the cloned loop containing call. Additionally, until we emit the padding in the cloned loop, we have to also compensate the over-estimated instructions. One of the place where such overestimated instruction is compensated happen to be the actual hot loop that the method executes. You can see my detail analysis in #43713 (comment)<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F43713%23issuecomment-772781240&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906983912%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=AKs3N1ZEhFiuSi0Dq%2BQ9Siw6pGkwZpX6gWduhLDE4jE%3D&reserved=0>.\n\n—\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F43227%23issuecomment-772914110&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906983912%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=k0HxgSTDJXOxNGULPrXMlejqz%2FymJc%2Fy5AMHDYFvhcA%3D&reserved=0>, or unsubscribe<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAPELRBZH4L5R756AJOYEI73S5HQB7ANCNFSM4SKMJJGA&data=04%7C01%7Cjulie.lee%40microsoft.com%7Cfe1560c80afe4e308df708d8c8a07c96%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637479938906993908%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Lrq9LPegknla%2BZBF8NfSKIb30FWp0pJkGAAevYlr5GA%3D&reserved=0>.\n",
          "createdAt": "2021-02-04T15:21:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-04T15:21:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzM4ODc1Nw=="
        },
        {
          "author": "kunalspathak",
          "body": "> What is cloned loop in the loop table? Thanks, Julie\r\n\r\nSometimes, if a loop has checks like array's bound check, we will clone a loop. One variant of the loop will have no bound checks (and hence will be fast loop) while other variant will have bound checks (and will be a slow loop). Depending on the input, we decide whether to execute fast loop or the cloned (slow) loop. You can see an example [here](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAZgAJiAmcgYXIG8BYAKHPcoEYlKVyBZTgAoAlgDsMAbQC65ADYwAZhjTlxU2VBEBzABYYAlKw6NjJjoujlREteQC85AAwBuOwB5yAVjciA1H5GbObszMEhJgrKkiKyjpwuZhEcWnpSsQ7kCUnmAL45ueSsuUA===). Here, fast loop is `L003e ~ L0058` while cloned slow loop is `L005c ~ L0080`. During JIT, we track all the loops in a data structure called `optLoopTable`. Whenever we want to do any analysis on loops, we iterate over this table to decide whether the given loop needs any update/optimization. When we clone a loop, we do not inserted an entry of cloned loop inside `optLoopTable` because of which further analysis doesn't happen on cloned loop. Towards the end of my comment in https://github.com/dotnet/runtime/issues/43713#issuecomment-772781240, I have listed what type of analysis we miss out on cloned loop because of lack of recording its entry inside `optLoopTable`. \r\n\r\n",
          "createdAt": "2021-02-04T16:18:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-04T21:49:37Z",
                "user": "JulieLeeMSFT"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBe8xMw=="
          },
          "updatedAt": "2021-02-04T16:18:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzQyOTE1NA=="
        },
        {
          "author": "JulieLeeMSFT",
          "body": "Moved future since .NET 6 scope items are complete now.",
          "createdAt": "2021-03-22T20:28:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-22T20:28:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDM3MTg3Nw=="
        },
        {
          "author": "MithrilMan",
          "body": "I read your article here about loop alignment here <https://devblogs.microsoft.com/dotnet/loop-alignment-in-net-6/> and it mentions that a loop like this\r\n```\r\nfor (int l = 0; l < M; l++) {\r\n        // body\r\n        OtherMethod();\r\n    }\r\n```\r\nisn't a candidate for inlining because contains a call to a method\r\nWhat about methods that are inlined?\r\nShouldn't inline method be considered like loop body and be eligible for alignment if their body is small enough? ",
          "createdAt": "2021-08-13T00:15:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-13T00:15:47Z",
          "id": "IC_kwDODI9FZc41h0SN"
        },
        {
          "author": "kunalspathak",
          "body": "> What about methods that are inlined?\r\n\r\nInlining decision happens in early phase of compilation and when we decide whether to align a loop or not, we already know that it was inlined or not. We won't align the loop if we know for sure that the method will not be inlined.",
          "createdAt": "2021-08-13T00:19:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-13T09:52:37Z",
                "user": "MithrilMan"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB2Pmxw=="
          },
          "updatedAt": "2021-08-13T00:19:02Z",
          "id": "IC_kwDODI9FZc41h0mA"
        }
      ],
      "totalCount": 24,
      "endCursor": "Y3Vyc29yOnYyOpHONYdJgA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/43227",
    "title": "Stabilize performance measurement"
  },
  {
    "author": "safern",
    "labels": [
      "area-Meta",
      "runtime-mono"
    ],
    "createdAt": "2020-10-14T00:00:36Z",
    "body": "We added the following build pipeline: https://dev.azure.com/dnceng/public/_build?definitionId=896&_a=summary which runs libraries outerloop tests on mono runtime. It has a considerable amount of failures, so this issue is to track getting it green:\r\n\r\n### Linux-Release-arm\r\n\r\n> Helix Queue: (Debian.9.Arm32.Open)Ubuntu.1804.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-9-helix-arm32v7-bfcd90a-20200121150037\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Buffers.Tests/console.eb0e53cc.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.IO.Pipes.Tests/console.3778bac9.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Net.Security.Tests/console.03004039.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.Net.Sockets.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Net.Sockets.Tests/console.595cfd58.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Runtime.Tests/console.2d554b85.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.Threading.Tasks.Dataflow.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Threading.Tasks.Dataflow.Tests/console.a378aceb.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4763d3111af0492d85/System.Threading.Tasks.Tests/console.9c4254f1.log?sv=2019-07-07&se=2020-10-28T23%3A45%3A04Z&sr=c&sp=rl&sig=8mR8xqK%2Ffr%2BBdbxeWEeIArYgeA8QFqfPnoAWz%2FNxH%2BM%3D))\r\n\r\n### Linux_musl-Release-x64\r\n\r\n> Helix Queue: (Alpine.312.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.12-helix-20200601195603-e06dc59\r\n\r\nAll workitems failing with:\r\n```\r\n----- start Thu Oct 8 23:49:58 UTC 2020 =============== To repro directly: =====================================================\r\npushd .\r\n/root/helix/work/correlation/dotnet exec --runtimeconfig Common.Tests.runtimeconfig.json --depsfile Common.Tests.deps.json xunit.console.dll Common.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/root/helix/work/workitem /root/helix/work/workitem\r\nFailed to load /root/helix/work/correlation/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.so, error: Error loading shared library libexecinfo.so.1: No such file or directory (needed by /root/helix/work/correlation/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.so)\r\n./RunTests.sh: line 161:    21 Segmentation fault      (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Common.Tests.runtimeconfig.json --depsfile Common.Tests.deps.json xunit.console.dll Common.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem\r\n----- end Thu Oct 8 23:49:58 UTC 2020 ----- exit code 139 ----------------------------------------------------------\r\nexit code 139 means SIGSEGV Illegal memory access. Deref invalid pointer, overrunning buffer, stack overflow etc. Core dumped.\r\n```\r\n\r\n### Linux-Release-x64\r\n\r\n> Helix Queue: Centos.7.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-a66c75423c684ff4af/System.Buffers.Tests/console.83bf2c8f.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=SgwO1Ebwzi1T0VdErI2PmgjIdqdEtSbf3tex5yNZ%2BWU%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-a66c75423c684ff4af/System.IO.Pipes.Tests/console.b929c469.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=SgwO1Ebwzi1T0VdErI2PmgjIdqdEtSbf3tex5yNZ%2BWU%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-a66c75423c684ff4af/System.Net.Security.Tests/console.d27cdfe1.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=SgwO1Ebwzi1T0VdErI2PmgjIdqdEtSbf3tex5yNZ%2BWU%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-a66c75423c684ff4af/System.Runtime.Tests/console.09725a81.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=SgwO1Ebwzi1T0VdErI2PmgjIdqdEtSbf3tex5yNZ%2BWU%3D))\r\n- [ ] System.Text.RegularExpressions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-a66c75423c684ff4af/System.Text.RegularExpressions.Tests/console.8150fd16.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=SgwO1Ebwzi1T0VdErI2PmgjIdqdEtSbf3tex5yNZ%2BWU%3D))\r\n\r\n> Helix Queue: RedHat.7.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-50576e7433364788a6/System.Buffers.Tests/console.112b2188.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=17VKtV5tdq1yusK80etasx0k%2F8YtR6lLXpMjQsoOey0%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-50576e7433364788a6/System.IO.Pipes.Tests/console.3c2a052f.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=17VKtV5tdq1yusK80etasx0k%2F8YtR6lLXpMjQsoOey0%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-50576e7433364788a6/System.Net.Security.Tests/console.1ef4239f.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=17VKtV5tdq1yusK80etasx0k%2F8YtR6lLXpMjQsoOey0%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-50576e7433364788a6/System.Runtime.Tests/console.357bc5fe.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A10Z&sr=c&sp=rl&sig=17VKtV5tdq1yusK80etasx0k%2F8YtR6lLXpMjQsoOey0%3D))\r\n\r\n> Helix Queue: SLES.15.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f9c6883011044a4a88/System.Buffers.Tests/console.670903cd.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A11Z&sr=c&sp=rl&sig=tYQXvG19fDDJGU61s9PDJqVxjUkNBcHRhBR%2BDz7ptas%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f9c6883011044a4a88/System.IO.Pipes.Tests/console.50e2e41b.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A11Z&sr=c&sp=rl&sig=tYQXvG19fDDJGU61s9PDJqVxjUkNBcHRhBR%2BDz7ptas%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f9c6883011044a4a88/System.Net.Security.Tests/console.b6859edf.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A11Z&sr=c&sp=rl&sig=tYQXvG19fDDJGU61s9PDJqVxjUkNBcHRhBR%2BDz7ptas%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f9c6883011044a4a88/System.Runtime.Tests/console.80fd8b08.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A11Z&sr=c&sp=rl&sig=tYQXvG19fDDJGU61s9PDJqVxjUkNBcHRhBR%2BDz7ptas%3D))\r\n- [ ] System.Text.RegularExpressions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f9c6883011044a4a88/System.Text.RegularExpressions.Tests/console.7eee2c72.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A11Z&sr=c&sp=rl&sig=tYQXvG19fDDJGU61s9PDJqVxjUkNBcHRhBR%2BDz7ptas%3D))\r\n\r\n> Helix Queue: (Fedora.32.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-32-helix-20200512010618-efb9f14\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-fd4f183b2089414f85/System.Buffers.Tests/console.b75d00bd.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A12Z&sr=c&sp=rl&sig=YS7i7rsDOeWE5Eg6H8hrNaHlkRnTYqhQ2nzUjQhj5AU%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-fd4f183b2089414f85/System.IO.Pipes.Tests/console.623083a7.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A12Z&sr=c&sp=rl&sig=YS7i7rsDOeWE5Eg6H8hrNaHlkRnTYqhQ2nzUjQhj5AU%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-fd4f183b2089414f85/System.Net.Security.Tests/console.3e93e75e.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A12Z&sr=c&sp=rl&sig=YS7i7rsDOeWE5Eg6H8hrNaHlkRnTYqhQ2nzUjQhj5AU%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-fd4f183b2089414f85/System.Runtime.Tests/console.0c78cd27.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A12Z&sr=c&sp=rl&sig=YS7i7rsDOeWE5Eg6H8hrNaHlkRnTYqhQ2nzUjQhj5AU%3D))\r\n- [ ] System.Text.RegularExpressions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-fd4f183b2089414f85/System.Text.RegularExpressions.Tests/console.75bd69d3.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A12Z&sr=c&sp=rl&sig=YS7i7rsDOeWE5Eg6H8hrNaHlkRnTYqhQ2nzUjQhj5AU%3D))\r\n\r\n> Helix Queue: (Ubuntu.1910.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-19.10-helix-amd64-cfcfd50-20191030180623\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.Buffers.Tests/console.8e9e151f.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.IO.Pipes.Tests/console.e3b0bd47.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.Net.Security.Tests/console.65398c5e.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n- [ ] System.Net.Sockets.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.Net.Sockets.Tests/console.cd40588a.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.Runtime.Tests/console.74c90b74.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n- [ ] System.Text.RegularExpressions.Tests -- Exit:137 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-bc3739c5544b490c9b/System.Text.RegularExpressions.Tests/console.a5dffd33.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=WrpCpanz4xhcAQgSb2KZSo%2BvlE5yAC6eX8WGeObqYNQ%3D))\r\n\r\n> Helix Queue: (Debian.10.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-10-helix-amd64-bfcd90a-20200121150006\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5fd2f10326734cd78e/System.Buffers.Tests/console.88addf53.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=X88jzDzRKdUImcn%2BaemCU5ktePay%2B6qrGsXtj7YHYo4%3D))\r\n- [ ] System.IO.Pipes.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5fd2f10326734cd78e/System.IO.Pipes.Tests/console.297d05ed.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=X88jzDzRKdUImcn%2BaemCU5ktePay%2B6qrGsXtj7YHYo4%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5fd2f10326734cd78e/System.Net.Security.Tests/console.0381bfea.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=X88jzDzRKdUImcn%2BaemCU5ktePay%2B6qrGsXtj7YHYo4%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5fd2f10326734cd78e/System.Runtime.Tests/console.1d551d81.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=X88jzDzRKdUImcn%2BaemCU5ktePay%2B6qrGsXtj7YHYo4%3D))\r\n- [ ] System.Text.RegularExpressions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5fd2f10326734cd78e/System.Text.RegularExpressions.Tests/console.38ae9bf7.log?sv=2019-07-07&se=2020-10-28T23%3A43%3A13Z&sr=c&sp=rl&sig=X88jzDzRKdUImcn%2BaemCU5ktePay%2B6qrGsXtj7YHYo4%3D))\r\n\r\n### Browser-Release-wasm\r\n\r\n> Helix Queue: Ubuntu.1804.Amd64.Open\r\n\r\n- [ ] System.Collections.Concurrent.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Collections.Concurrent.Tests/console.3accd23f.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Collections.NonGeneric.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Collections.NonGeneric.Tests/console.b3a9ec53.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Console.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Console.Tests/console.e46e6b46.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Diagnostics.DiagnosticSource.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Diagnostics.DiagnosticSource.Tests/console.7e9dff41.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Globalization.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Globalization.Tests/console.f3a8f93f.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.IO.Compression.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.IO.Compression.Tests/console.772f915a.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.IO.FileSystem.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.IO.FileSystem.Tests/console.82ac9a95.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Memory.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Memory.Tests/console.cf88c273.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Net.WebSockets.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Net.WebSockets.Tests/console.5f6fc928.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Net.WebSockets.WebSocketProtocol.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Net.WebSockets.WebSocketProtocol.Tests/console.c0194b06.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Runtime.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Runtime.Tests/console.492be8ca.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Security.SecureString.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Security.SecureString.Tests/console.4ceb48db.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Text.Json.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Text.Json.Tests/console.588aff6c.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Threading.Tasks.Dataflow.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Threading.Tasks.Dataflow.Tests/console.de2e463b.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Threading.Tasks.Parallel.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Threading.Tasks.Parallel.Tests/console.7580b5cc.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Threading.Tasks.Tests/console.5445adb5.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Threading.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Threading.Tests/console.4aaf752a.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Threading.Timer.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Threading.Timer.Tests/console.1f46a021.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n- [ ] System.Transactions.Local.Tests -- Exit:233 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-5f70fa8847334a28bd/System.Transactions.Local.Tests/console.9e15c473.log?sv=2019-07-07&se=2020-10-28T23%3A34%3A23Z&sr=c&sp=rl&sig=%2FUKDjzEPCZIACJHSWNz9GmldFvOSR4Z4wyP6wtfhOwY%3D))\r\n\r\n### OSX-Release-x64\r\n\r\n> Helix Queue: OSX.1015.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Buffers.Tests/console.27f46635.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n- [ ] System.Diagnostics.DiagnosticSource.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Diagnostics.DiagnosticSource.Tests/console.e604800b.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Net.Security.Tests/console.ccaf0c8a.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Runtime.Tests/console.c5a01006.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n- [ ] System.Threading.Tasks.Dataflow.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Threading.Tasks.Dataflow.Tests/console.7698287f.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-89fd13e89e1a49f0a4/System.Threading.Tasks.Tests/console.08ea6ffa.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A40Z&sr=c&sp=rl&sig=KZ8WhcQO37onNUYinFkHwfyxeoaUQCyKeXkcr3EPH3g%3D))\r\n\r\n> Helix Queue: OSX.1014.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Buffers.Tests/console.54fc2414.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n- [ ] System.Diagnostics.DiagnosticSource.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Diagnostics.DiagnosticSource.Tests/console.3f9b726a.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Net.Security.Tests/console.0ba3c8f1.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Runtime.Tests/console.da54e0b3.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n- [ ] System.Threading.Tasks.Dataflow.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Threading.Tasks.Dataflow.Tests/console.db485ccd.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f40135e123ff4315bd/System.Threading.Tasks.Tests/console.92013d1f.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A39Z&sr=c&sp=rl&sig=bC6e9ob5hgWkVoBlDycEAfR9CXFtEMxB%2BFWl0HUJYBQ%3D))\r\n\r\n> Helix Queue: OSX.1013.Amd64.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Buffers.Tests/console.ec51ff98.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n- [ ] System.Diagnostics.DiagnosticSource.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Diagnostics.DiagnosticSource.Tests/console.f956dd00.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n- [ ] System.Net.Security.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Net.Security.Tests/console.04e1ebc7.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Runtime.Tests/console.e4818fe6.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n- [ ] System.Text.Json.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Text.Json.Tests/console.6a61e1c7.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-90ac9a4533b94ef3a4/System.Threading.Tasks.Tests/console.ffba2aa5.log?sv=2019-07-07&se=2020-10-28T23%3A15%3A37Z&sr=c&sp=rl&sig=191Kp14HSYNwKDU9bXF%2Fw6gMW0x3fet1ZeK66MSWuz0%3D))\r\n\r\n### Windows_NT-Release-x64\r\n\r\n> Helix Queue: Windows.10.Amd64.Server19H1.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Buffers.Tests/console.51b994a2.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Diagnostics.Process.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Diagnostics.Process.Tests/console.a7a839d7.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.DirectoryServices.AccountManagement.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.DirectoryServices.AccountManagement.Tests/console.a5e68e4c.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.DirectoryServices.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.DirectoryServices.Tests/console.a8cd0add.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.IO.Compression.Brotli.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.IO.Compression.Brotli.Tests/console.483e3e6f.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.IO.Compression.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.IO.Compression.Tests/console.b1553ec1.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.IO.FileSystem.Watcher.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.IO.FileSystem.Watcher.Tests/console.c39201e9.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Management.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Management.Tests/console.ad95b962.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Net.WebSockets.Client.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Net.WebSockets.Client.Tests/console.c9a6f847.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Net.WebSockets.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Net.WebSockets.Tests/console.b111a125.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Net.WebSockets.WebSocketProtocol.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Net.WebSockets.WebSocketProtocol.Tests/console.d187b0cf.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Runtime.Tests/console.e2b614d4.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Text.Json.Tests -- Exit:-3 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Text.Json.Tests/console.98a584a7.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Threading.Tasks.Dataflow.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Threading.Tasks.Dataflow.Tests/console.ac9b8dbe.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Threading.Tasks.Tests/console.24280ce8.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n- [ ] System.Windows.Extensions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-4348a07dee2e4a71bb/System.Windows.Extensions.Tests/console.06c553fa.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A29Z&sr=c&sp=rl&sig=8CnrrzkTjER%2FV0y9lPzGndDDfhJL9UuS6jE9d%2BLY%2Bb4%3D))\r\n\r\n### Windows_NT-Release-x86\r\n\r\n> Helix Queue: Windows.10.Amd64.ServerRS5.Open\r\n\r\n- [ ] System.Buffers.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Buffers.Tests/console.2e0f7741.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Diagnostics.Process.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Diagnostics.Process.Tests/console.5d4fbdb9.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.DirectoryServices.AccountManagement.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.DirectoryServices.AccountManagement.Tests/console.9b41bc7b.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.DirectoryServices.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.DirectoryServices.Tests/console.e299050a.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.IO.Compression.Brotli.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.IO.Compression.Brotli.Tests/console.414ee108.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.IO.Compression.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.IO.Compression.Tests/console.dd4803c1.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.IO.FileSystem.Watcher.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.IO.FileSystem.Watcher.Tests/console.14a38c5f.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Management.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Management.Tests/console.34c980bf.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Net.WebSockets.Client.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Net.WebSockets.Client.Tests/console.3625dbc2.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Net.WebSockets.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Net.WebSockets.Tests/console.153f3512.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Net.WebSockets.WebSocketProtocol.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Net.WebSockets.WebSocketProtocol.Tests/console.300a6170.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Runtime.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Runtime.Tests/console.f510c272.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Threading.Tasks.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Threading.Tasks.Tests/console.625683c7.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n- [ ] System.Windows.Extensions.Tests -- Exit:1 ([Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-48fca00188cd47109e/System.Windows.Extensions.Tests/console.4be83ddb.log?sv=2019-07-07&se=2020-10-28T23%3A23%3A58Z&sr=c&sp=rl&sig=qkwG1CpzYcHCNsSrw2StrFdDdwPd5dUBiDRpNSxoEdw%3D))\r\n\r\ncc: @directhex @akoeplinger @steveisok @lewing @marek-safar ",
    "number": 43378,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2020-10-14T00:11:59Z",
          "user": "lewing"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-14T09:07:13Z",
          "user": "MaximLipnin"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOBTbF7g=="
    },
    "updatedAt": "2022-07-07T18:19:52Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "safern",
          "body": "By the way, to run outerloop tests, you need to pass either: `-testscope outerloop` when using the root build scripts or, when invoking an individual test project you can use MSBuild property: `/p:TestScope=outerloop`. \r\n\r\nAlso, to run this pipeline in a PR you can comment on your PR:\r\n\r\n```\r\n/azp run runtime-libraries-mono outerloop\r\n```",
          "createdAt": "2020-10-14T00:02:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-14T00:26:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwODA3MzQ2MQ=="
        },
        {
          "author": "steveisok",
          "body": "Thanks for putting this together",
          "createdAt": "2020-10-14T00:14:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-14T00:15:55Z",
                "user": "safern"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-14T00:27:03Z",
                "user": "lewing"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBTYm1A=="
          },
          "updatedAt": "2020-10-14T00:14:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcwODA3NzA3NA=="
        },
        {
          "author": "danmoseley",
          "body": "@mdh1418 where are we at with this one -- is there updated data? Do you expect more here for 6.0?",
          "createdAt": "2021-08-12T00:24:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-08-12T00:24:40Z",
          "id": "IC_kwDODI9FZc41evyT"
        },
        {
          "author": "danmoseley",
          "body": "All the logs here are gone... suggest moving this to 7.0 and pursuing after GA.",
          "createdAt": "2021-08-12T00:26:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-12T14:32:13Z",
                "user": "akoeplinger"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOB2HXkw=="
          },
          "updatedAt": "2021-08-12T00:26:05Z",
          "id": "IC_kwDODI9FZc41ev9i"
        },
        {
          "author": "carlossanlop",
          "body": "Hit a System.Net.Security.Tests failure in mono Linux x64 here: https://github.com/dotnet/runtime/pull/71770\r\n\r\nBut it's Debug, so I'm not entirely sure if it's the same. Just wanted to put it in your radar, @dotnet/ncl",
          "createdAt": "2022-07-07T18:19:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-07T18:19:52Z",
          "id": "IC_kwDODI9FZc5GN2If"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHORjdiHw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/43378",
    "title": "[MONO] Fix libraries outerloop tests"
  },
  {
    "author": "samsp-msft",
    "labels": [
      "area-Meta",
      "User Story",
      "Priority:2",
      "Team:Runtime"
    ],
    "createdAt": "2020-10-16T22:41:22Z",
    "body": "The assembly load context has been rather successful in solving a large set of customer problems. The most prominent one is the so called “plugin” model where the application (host) loads other components to augment its functionality in some way. Such components are typically loaded into separate load contexts to avoid dependency collisions. Additionally, in some apps it’s also desirable to be able to eventually unload such components either to free resources or to enable update of the component.\r\n\r\nProducing such applications has proven rather challenging in the current state of .NET Core because there are certain parts of the frameworks produces by us which are not compatible with multiple load contexts and/or unload ability.\r\nWe should drive the frameworks we own to fix these issues so that customer’s code doesn’t have to handle issues in frameworks they rely on. We should focus this effort on certain application types first to prioritize the work. We’ve seen feedback on mainly ASP.NET and WPF applications. There might be overlap with the “faster inner loop” effort which would affect the prioritization as well.\r\n\r\nThe work can be split into two parts (and prioritized differently):\r\n* Given feature works correctly in presence of secondary load context – for example XamlParser has problems when used with assemblies in non-default load context. Similarly, ASP.NET’s hosting code also doesn’t work well in such a scenario. It might be possible to use static analyzers to detect some of the problems in this area.\r\n* Usage of a given feature doesn’t prevent secondary load context from unloading correctly – for example TypeConverter holds onto all types which were used with it, and thus prevents unloading of such types. Static analyzers are probably not going to help in this area.\r\n\r\nIn both cases an important part of the work should be a general approach to testing – for example reuse existing test assets but run them under different conditions and providing customer guidance for first & third parties.\r\n\r\n# Work Items\r\n- [ ] TBD",
    "number": 43544,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-17T06:30:58Z",
          "user": "tibel"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-20T13:41:45Z",
          "user": "wall-code-solutions"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-10-22T20:19:37Z",
          "user": "rgwood"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-05T23:17:53Z",
          "user": "srxqds"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-29T22:33:39Z",
          "user": "shtratos"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-23T10:43:25Z",
          "user": "campersau"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-09-15T14:25:35Z",
          "user": "WeihanLi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-12T07:33:56Z",
          "user": "Delsin-Yu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-21T20:01:39Z",
          "user": "raulsntos"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-20T11:48:26Z",
          "user": "govert"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHOC80Qiw=="
    },
    "updatedAt": "2021-08-11T14:55:45Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Pilchie",
          "body": "https://github.com/dotnet/aspnetcore/issues/21159 is a related workitem.",
          "createdAt": "2020-10-19T19:55:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-19T19:55:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjQwNjMyNg=="
        },
        {
          "author": "srxqds",
          "body": "excited，thank you.\r\nthe monovm runtime is not full supported.\r\nwe hope you can keep more focus on it.\r\nwe are waiting for it everyday.\r\nthank you.",
          "createdAt": "2020-11-05T23:18:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-05T23:22:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMjcwMDY3NA=="
        },
        {
          "author": "danmoseley",
          "body": "@jeffschwMSFT this seems primarily runtime work. Is there a better epic to parent it under than the libraries one?",
          "createdAt": "2020-12-09T00:28:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-09T00:28:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTMxMTk3NQ=="
        },
        {
          "author": "jeffschwMSFT",
          "body": "I don't have a strong feeling about where it would parent.  It was in the theme of developer experience and hence why it ended up here.  At this point there is no specific ask but once the dev inner loop work is settled it could become more important.  So it could either become bottoms up or parent under dev inner loop.  ",
          "createdAt": "2020-12-09T00:36:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-09T00:36:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTMyNDc2MA=="
        },
        {
          "author": "danmoseley",
          "body": "@stephentoub when he's back can perhaps help clarify whether this is necessary for dev inner loop.",
          "createdAt": "2020-12-16T05:15:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-16T05:15:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTc2OTQxNA=="
        },
        {
          "author": "govert",
          "body": "I am loading the runtime and a managed assembly from native code using the [hostfxr](https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting) hosting interfaces. I find that my managed assembly is loaded into a new `IsolatedComponentLoadContext` as expected. I then create a new `CustomAssemblyLoadContext` of my own, into which further code is loaded. I can never unload the library that contains the initial managed entry point as it will be loaded into the `IsolatedComponentLoadContext` , and this type is not created as `IsCollectible`. \r\n\r\nI want to suggest as part of this issue that the hostfxr gets some mechanism to make a collectible managed extension, loaded from the native host interfaces. (I am not trying to unload the runtime from the process, just my own native & managed libraries, for example to update and reload it.) Ideally, I want my (collectible) `CustomAssemblyLoadContext` to be instantiated as part of my initial managed code load, and then have some mechanism to (attempt to) unload this collectible ALC from the native hostfxr side.\r\n\r\nI'm not quite there yet, but I think I would also like a way to know (from the native hostfxr side) when the unload attempt is complete, and whether it was successful. Maybe some callback would work for this.\r\n\r\nUnder the .NET Framework, such unloading works through the `AppDomain` support and `ICorRuntimeHost->UnloadDomain(...)`\r\n",
          "createdAt": "2021-02-27T22:20:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-27T22:23:45Z",
                "user": "jazzdelightsme"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-30T23:21:34Z",
                "user": "devpreview"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-07T03:56:23Z",
                "user": "rgwood"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCI67Xg=="
          },
          "updatedAt": "2021-02-28T12:38:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzE5NjM2Ng=="
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOLuupzg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/43544",
    "title": "Developers can create scopes to support load/unload scenarios because AssemblyLoadContext is supported throughout .NET "
  },
  {
    "author": "carlossanlop",
    "labels": [
      "documentation",
      "area-Meta",
      "tracking",
      "Team:Libraries"
    ],
    "createdAt": "2020-10-26T21:34:00Z",
    "body": "As part of the 7.0 goals, we want to finish documenting APIs that were shipped without triple slash documentation in previous .NET Core versions.\r\n\r\nWe expect developers to add documentation directly in triple slash comments in source, since it's new documentation. Triple slash are still going to be used for seeding dotnet-api-docs, which is considered the source of truth after going through language review.\r\n\r\nDocumentation modifications or augmentations are not part of this effort. Those kinds of changes are expected to be done directly in dotnet-api-docs, since that is the source of truth.\r\n\r\nWe will include APIs from Runtime Libraries (System and Microsoft.Extensions namespaces), WPF and WinForms.\r\n\r\n### Total undocumented APIs per repo + namespace\r\n\r\n<details>\r\n  <summary>Runtime - System</summary>\r\n\r\n  System APIs | 1.x | 2.x | 5.x | Total debt\r\n  -- | -- | -- | -- | --\r\n  S.Reflection | 192 | 10 |  | 202\r\n  S.Reflection.PortableExecutable | 135 |   |  | 135\r\n  S.Reflection.Emit | 32 | 13 |  | 45\r\n  S.Security.Cryptography.Pkcs |   | 18 |  | 18\r\n  S.Collections.Immutable | 14 |   |  | 14\r\n  S.Formats.Cbor |  |  | 5 | 5\r\n  S.Diagnostics | 3 | 1 |  | 4\r\n  S.Linq | 3 |   |  | 3\r\n  S.Security.Cryptography | 1 | 2 |  | 3\r\n  S.ServiceModel.Channels | 3 |   |  | 3\r\n  S.ComponentModel | 2 |   |  | 2\r\n  S.Security.Permissions |   | 2 |  | 2\r\n  S.Net | 1 |   |  | 1\r\n  S.Net.Http |   | 1 |  | 1\r\n  Total | 386 | 47 | 5 | 438\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>Runtime - Microsoft.Extensions</summary>\r\n\r\n  Microsoft.Extensions   APIs | 1.x | 2.x | 3.x | 5.x | Total debt\r\n  -- | -- | -- | -- | -- | --\r\n  M.E.DependencyModel |   |   |   | 113 | 113\r\n  M.E.Logging.Console | 36 | 6 |   | 5 | 47\r\n  M.E.Logging | 37 | 9 |   |   | 46\r\n  M.E.Caching.Memory | 33 | 2 |   |   | 35\r\n  M.E.Primitives | 23 | 10 |   |   | 33\r\n  M.E.DependencyInjection | 18 | 9 | 1 | 2 | 30\r\n  M.E.Hosting |   | 19 | 6 |   | 25\r\n  M.E.DependencyModel.Resolution |   |   |   | 22 | 22\r\n  M.E.Caching.Distributed | 16 | 1 | 1 |   | 18\r\n  M.E.DiagnosticAdapter | 15 | 3 |   |   | 18\r\n  M.E.Options | 4 | 13 |   | 1 | 18\r\n  M.E.Configuration | 10 | 4 | 2 |   | 16\r\n  M.E.Logging.Abstractions | 5 | 7 |   | 1 | 13\r\n  M.E.Logging.EventLog | 12 | 1 |   |   | 13\r\n  M.E.Http.Logging |   | 7 |   | 2 | 9\r\n  M.E.Caching.Redis | 8 |   |   |   | 8\r\n  M.E.Hosting.Systemd |   |   | 8 |   | 8\r\n  M.E.Caching.SqlServer | 7 |   |   |   | 7\r\n  M.E.FileSystemGlobbing | 7 |   |   |   | 7\r\n  M.E.FileSystemGlobbing.Abstractions | 7 |   |   |   | 7\r\n  M.E.Hosting.WindowsServices |   |   | 6 |   | 6\r\n  M.E.Http |   | 6 |   |   | 6\r\n  M.E.Logging.Debug | 5 | 1 |   |   | 6\r\n  M.E.Logging.TraceSource | 5 |   |   |   | 5\r\n  M.E.Caching.StackExchangeRedis |   | 4 |   |   | 4\r\n  M.E.Configuration.Xml | 3 |   | 1 |   | 4\r\n  M.E.FileProviders | 4 |   |   |   | 4\r\n  M.E.Configuration.Ini | 2 |   | 1 |   | 3\r\n  M.E.Configuration.Json | 2 |   | 1 |   | 3\r\n  M.E.Configuration.NewtonsoftJson |   |   | 3 |   | 3\r\n  M.E.Logging.Configuration |   | 3 |   |   | 3\r\n  M.E.Logging.EventSource |   |   | 3 |   | 3\r\n  M.E.Configuration.CommandLine | 2 |   |   |   | 2\r\n  M.E.Configuration.EnvironmentVariables | 2 |   |   |   | 2\r\n  M.E.Configuration.Memory | 2 |   |   |   | 2\r\n  M.E.Configuration.UserSecrets | 2 |   |   |   | 2\r\n  M.E.DependencyInjection.Extensions | 1 | 1 |   |   | 2\r\n  M.E.DiagnosticAdapter.Infrastructure | 1 |   |   |   | 1\r\n  M.E.FileProviders.Composite | 1 |   |   |   | 1\r\n  M.E.FileProviders.Physical | 1 |   |   |   | 1\r\n  Total | 271 | 106 | 33 | 146 | 556\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>WinForms</summary>\r\n\r\n  WinForms APIs | 3.x | 5.x | Total debt\r\n  -- | -- | -- | --\r\n  System.Windows.Forms |   | 73 | 73\r\n  System.Windows.Diagnostics |   | 9 | 9\r\n  System.Windows.Markup |   | 8 | 8\r\n  System.Windows.Forms.VisualStyles |   | 1 | 1\r\n  Total | 0 | 91 | 91\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>WPF</summary>\r\n\r\n  WPF APIs | 3.x | Total debt\r\n  -- | -- | --\r\n  System.Xaml.Permissions | 2 | 2\r\n  Total | 2 | 2\r\n\r\n</details>\r\n\r\n### Issues tracking debt per area\r\n\r\n#### System\r\n\r\n- [x] https://github.com/dotnet/runtime/issues/43850\r\n- [x] https://github.com/dotnet/runtime/issues/43852\r\n- [x] https://github.com/dotnet/runtime/issues/43860\r\n- [x] https://github.com/dotnet/runtime/issues/43858\r\n- [x] https://github.com/dotnet/runtime/issues/43854\r\n- [x] https://github.com/dotnet/runtime/issues/43859\r\n- [ ] https://github.com/dotnet/runtime/issues/43864\r\n- [x] https://github.com/dotnet/runtime/issues/43861\r\n- [x] https://github.com/dotnet/runtime/issues/43855\r\n\r\n#### Microsoft.Extensions\r\n\r\n- [x] https://github.com/dotnet/runtime/issues/43868\r\n- [x] https://github.com/dotnet/runtime/issues/43869\r\n- [x] https://github.com/dotnet/runtime/issues/43871\r\n- [ ] https://github.com/dotnet/runtime/issues/43872\r\n- [x] https://github.com/dotnet/runtime/issues/43898\r\n- [ ] https://github.com/dotnet/runtime/issues/43900\r\n- [ ] https://github.com/dotnet/runtime/issues/43908\r\n- [x] https://github.com/dotnet/runtime/issues/43915\r\n- [x] https://github.com/dotnet/runtime/issues/43916\r\n- [x] https://github.com/dotnet/runtime/issues/43918\r\n- [x] https://github.com/dotnet/runtime/issues/43919\r\n- [x] https://github.com/dotnet/runtime/issues/43920\r\n\r\n#### WinForms\r\n\r\n- [x] https://github.com/dotnet/winforms/issues/4163\r\n\r\n#### WPF\r\n\r\n- [ ] https://github.com/dotnet/wpf/issues/3708",
    "number": 43849,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-08-27T17:51:35Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "reflectronic",
          "body": "There is a significant amount of missing documentation under [System.Reflection.Metadata](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata?view=netcore-3.1) and [System.Reflection.Metadata.Ecma335](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.ecma335?view=netcore-3.1). I do not see these two namespaces tracked by this issue. I suppose that these APIs are not the most critical (and many of the missing members are simply things like implicit conversions with little to elaborate on), but is the progress being tracked anywhere for these?",
          "createdAt": "2020-10-27T04:00:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-10-27T04:00:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjk2NDYwMg=="
        },
        {
          "author": "carlossanlop",
          "body": "> _I suppose that these APIs are not the most critical_\r\n\r\nCorrect, that is the main reason - These are advanced APIs, so we have not been considering them for documentation efforts.\r\n\r\nThe other reason is that their API surface is huge. Combined with the first reason, it does not make sense to spend so much time on these advanced APIs.\r\n\r\nWe made the same decision with `System.Runtime.Intrinsics`.\r\n\r\nWe will plan to address them at a later time.\r\n\r\nThis shouldn't stop user contributions though. If you feel like you have good knowledge on these APIs, feel free to document them.",
          "createdAt": "2020-10-27T16:57:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-10-28T01:18:30Z",
                "user": "reflectronic"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBU6Ulg=="
          },
          "updatedAt": "2020-10-27T17:59:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzM4MzQzMg=="
        },
        {
          "author": "Xyncgas",
          "body": "Meanwhile we can share https://source.dot.net with people\r\n",
          "createdAt": "2023-04-04T10:18:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-04T10:18:50Z",
          "id": "IC_kwDODI9FZc5ZJsAS"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOWSbAEg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/43849",
    "title": "Developers can access documentation for all .NET Core/.NET 5 APIs"
  },
  {
    "author": "aaronfranke",
    "labels": [
      "area-Meta",
      "os-mac-os-x",
      "packaging"
    ],
    "createdAt": "2020-11-01T05:30:18Z",
    "body": "## Background and Motivation\r\n\r\nThe name \"OSX\" is no longer correct. The name \"Mac OS X\" has been deprecated since 2016 when Apple rebranded their Mac operating system to \"macOS\". However, in addition to this, the name \"OSX\" is now just flat out wrong, since the \"X\" stands for \"10\", but [macOS Big Sur is version 11.0](https://en.wikipedia.org/wiki/MacOS_Big_Sur).\r\n\r\n## Proposed API\r\n\r\nRenaming \"OSX\" and \"osx\" to either \"macOS\" or \"MacOS\" or \"macos\" or similar would solve this problem.\r\n\r\nThis proposal does not have specific signature requirements.\r\n\r\n## Usage Examples\r\n\r\nN/A\r\n\r\n## Alternative Designs\r\n\r\n\"macOS\" (stylized), \"MacOS\" (PascalCase), \"macos\" (lowercase), and \"MACOS\" (uppercase) are all similar designs that would be appropriate depending on the desired naming convention.\r\n\r\n## Risks\r\n\r\nThis would break compatibility, but wrappers and aliases can be kept as needed, and upgrading shouldn't be too big of an issue.\r\n",
    "number": 44120,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-12T01:04:13Z",
          "user": "anatawa12"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2020-11-12T20:48:53Z",
          "user": "BreeceW"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-17T17:07:28Z",
          "user": "ChristopherJdL"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-17T19:17:37Z",
          "user": "anfomin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-17T23:45:39Z",
          "user": "wsimf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-18T02:14:16Z",
          "user": "FlsZen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-18T07:24:30Z",
          "user": "wengfatt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-18T14:18:18Z",
          "user": "bruno-garcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-23T19:01:01Z",
          "user": "xsoheilalizadeh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-22T17:03:35Z",
          "user": "Hennamann"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-03T12:47:54Z",
          "user": "baciucristian"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-07T10:08:37Z",
          "user": "iMonZ"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-22T09:51:29Z",
          "user": "aliveoutside"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-13T12:37:08Z",
          "user": "AmrAlSayed0"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-18T18:34:44Z",
          "user": "samuel-lucas6"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-01-10T18:44:12Z",
          "user": "akoeplinger"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-04T12:04:14Z",
          "user": "raulsntos"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-10T13:54:22Z",
          "user": "0xced"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-21T08:43:42Z",
          "user": "0xfeeddeadbeef"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHOC81_SQ=="
    },
    "updatedAt": "2025-08-13T15:40:41Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Dotnet-GitSync-Bot",
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2020-11-01T05:30:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-01T05:30:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDAzMTk2Ng=="
        },
        {
          "author": "huoyaoyuan",
          "body": "https://github.com/dotnet/runtime/issues/43313#issuecomment-707261960",
          "createdAt": "2020-11-01T06:06:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-01T06:44:03Z",
                "user": "aaronfranke"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-01T19:08:56Z",
                "user": "zdivelbiss"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-10T16:35:29Z",
                "user": "xsoheilalizadeh"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-07T10:14:58Z",
                "user": "iMonZ"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBp-6sg=="
          },
          "updatedAt": "2020-11-01T06:06:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDAzODc5MQ=="
        },
        {
          "author": "iMonZ",
          "body": "This is very important for .NET 6.\r\n\"osx\" could be the vintage x86 support\r\n and \"macOS\" could be the new universal binary combined with arm64 and x86_64.\r\nSo please add this to the .NET 6 release so that the new macOS support is complete.\r\nCould someone add this to the .NET 6 release log instead of \"future\"?",
          "createdAt": "2021-05-07T10:10:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-07T10:14:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzNDIzNzQ5MQ=="
        },
        {
          "author": "joperezr",
          "body": "@ericstj If we were to do this, would we need support for it from the NuGet or the SDK side or would it mostly just involve changes in our Microsoft.NETCore.Platforms package?",
          "createdAt": "2021-05-13T16:44:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-13T16:44:28Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDY4NTk3MA=="
        },
        {
          "author": "ericstj",
          "body": "WRT the RID graph: I believe we could either decide to make `macos` import `osx` or vice versa.  We'd need to decide what we actually build for our portable mac builds or runtime packs and host and use that.  I believe that's mostly within our control.\r\n\r\nNext is defining those who synthesize RIDs: so host would need to change, probably build scripts.  The SDK has a static list of known RIDs for the host and runtime packs that would need to change. Customer's building self-contained apps that want to target a portable Mac RID would also need to update (EG: osx-x64 -> macos-x64).\r\n\r\nThere's probably a ton of related stuff that would also need to change. \r\nhttps://github.com/dotnet/runtime/blob/d77854a16eaa29f1a141f1da267885dcf2675027/src/libraries/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs#L14\r\nPerhaps we can ignore\r\nhttps://github.com/dotnet/runtime/blob/d77854a16eaa29f1a141f1da267885dcf2675027/src/libraries/System.Private.CoreLib/src/System/PlatformID.cs#L16\r\nWe'd need to scrutinize every place that uses `osx` and decide what would be appropriate.\r\n\r\n@wfurt @sdmaclea @richlander what's your thinking around this?",
          "createdAt": "2021-05-13T17:32:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-13T17:32:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDcxNDMyMQ=="
        },
        {
          "author": "iMonZ",
          "body": "Can this issue be added to the [.NET 6.0 milestone](https://github.com/dotnet/runtime/milestone/69)?",
          "createdAt": "2021-05-20T11:02:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-20T11:03:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NDk4Mzg1Mg=="
        },
        {
          "author": "joperezr",
          "body": "@iMonZ before we do that we want to see what does @richlander @terrajobst @wfurt @sdmaclea think about it and then we can start planning the work and see if it is feasible to have it in scope for 6.0.",
          "createdAt": "2021-05-20T17:00:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-20T17:00:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTI5MTU2Mg=="
        },
        {
          "author": "aaronfranke",
          "body": "@joperezr .NET 6 has been released. Can we have this done for .NET 7?\r\n\r\nAs a quick reminder, the longer we wait to do this, the more things are developed using the old name, which means that in general it becomes more difficult to change the name as time goes on.",
          "createdAt": "2021-11-13T01:43:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-13T01:43:02Z",
          "id": "IC_kwDODI9FZc45rs8J"
        },
        {
          "author": "yaakov-h",
          "body": "FWIW at least, the `SupportedOSPlatform` analyser already treats the two interchangeably, so you can use `[SupportedOSPlatform(\"macos\")]` today.\r\n\r\nAlso, macOS is now version 12, so X is _two_ generations out of date.",
          "createdAt": "2021-11-13T12:23:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-13T12:23:57Z",
          "id": "IC_kwDODI9FZc45s2z5"
        },
        {
          "author": "joperezr",
          "body": "@terrajobst thoughts?",
          "createdAt": "2021-11-19T22:51:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-19T22:51:11Z",
          "id": "IC_kwDODI9FZc46Fgy5"
        },
        {
          "author": "jeffhandley",
          "body": "I'm going to put this into the .NET 7 milestone, and I'll connect with @ericstj and @terrajobst more on it. If we do move this forward, we'll need a pretty clear set of acceptance criteria to help us validate that the changes work throughout all end-to-end scenarios.",
          "createdAt": "2022-01-05T06:05:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-07T01:45:12Z",
                "user": "terrajobst"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCI6Vgw=="
          },
          "updatedAt": "2022-01-05T06:05:22Z",
          "id": "IC_kwDODI9FZc477Uwm"
        },
        {
          "author": "ericstj",
          "body": "cc @eerhardt @vitek-karas ",
          "createdAt": "2022-01-06T00:18:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-06T00:18:17Z",
          "id": "IC_kwDODI9FZc47-RsQ"
        },
        {
          "author": "terrajobst",
          "body": "I'm not opposed to be doing this, but it would help to see a proposed design for this. Which enums would we need to introduce & hide, which checks would need be augmented?\r\n\r\nRough sketch:\r\n\r\n#### Behavior changes\r\n\r\n* `OperatingSystem.Platform` would need to return `PlatformID.MacOS` on macOS (breaking change)\r\n* `OperatingSystem.IsOSPlatform[AtLeast](\"macOS\")` would return `true` on macOS\r\n* `RuntimeInformation.IsOSPlatform(OSPlatform.MacOS)` would return `true` on macOS\r\n\r\n#### Hidden\r\n\r\n* `PlatformID.MacOSX`\r\n* `OSPlatform.OSX`\r\n\r\n#### Added\r\n\r\n* `PlatformID.MacOS`\r\n* `OSPlatform.MacOS`\r\n",
          "createdAt": "2022-01-07T21:37:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-07T21:39:15Z",
          "id": "IC_kwDODI9FZc48ESws"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHOPBEsLA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44120",
    "title": "Change platform code for \"OSX\" to \"macOS\" or similar"
  },
  {
    "author": "sandreenko",
    "labels": [
      "area-Meta",
      "discussion",
      "runtime-coreclr",
      "Priority:3"
    ],
    "createdAt": "2020-11-01T23:52:54Z",
    "body": "- [x]  There are at least 3 asserts that are always true, because of a forgotten `!` before the message, when fixed they fail on some tests, see https://github.com/dotnet/runtime/pull/44095, PTAL @tannergooding.\r\n\r\n- [ ] `PORTABILITY_ASSERT(message)` (108 usages) are quite confusing because they don't check a condition and fail always. They could be replaced by `unreached` or `unimplemented` methods, also this block looks pretty outdated:\r\nhttps://github.com/dotnet/runtime/blob/df8e3f629afcf24e222b3d10d6c1061e4234b17e/src/coreclr/src/inc/palclr.h#L103-L111\r\nare not other platforms finished now? \r\nPTAL @BruceForstall, @davidwrighton, you had a similar discussion about IMPL_LIMIT recently, do you have preferences about assert/unimplemented/unreached usages?\r\n\r\n- [ ] There are 6 usages of `ASSERT(!\"message\")` and 360 usages of `ASSERT(\"message\")` with different defines, probably replace both with better debug only `unreached(\"message\")`?\r\n\r\ncc @dotnet/jit-contrib ",
    "number": 44132,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2021-03-29T17:57:23Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "> `PORTABILITY_ASSERT(message)` \r\n\r\nThe purpose of these is to mark places that need to be filled in for new platform ports. I do not think we should replace them with the generic `unreached`. We would lose the purpose. Renaming them to reduce confusion sounds good.\r\n\r\n> this block looks pretty outdated\r\n\r\nYes, this shoud be flipped to #if 1 since we do not have any platform ports in progress currently, and anything that does not compile fixed.\r\n\r\n\r\n",
          "createdAt": "2020-11-02T02:36:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-02T02:36:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDIwNDQ1OA=="
        },
        {
          "author": "sandreenko",
          "body": "> Yes, this shoud be flipped to #if 1 since we do not have any platform ports in progress currently, and anything that does not compile fixed.\r\n\r\nI have seen only 2 failures so far:\r\nhttps://github.com/dotnet/runtime/blob/ecd979c9860caee8326f8678736ae98a77bdae5b/src/coreclr/src/debug/di/valuehome.cpp#L454-L457\r\n\r\nhttps://github.com/dotnet/runtime/blob/ecd979c9860caee8326f8678736ae98a77bdae5b/src/coreclr/src/vm/threadsuspend.cpp#L5128-L5144\r\n\r\n\r\n",
          "createdAt": "2020-11-02T06:04:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-02T06:04:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDI1NzEzMA=="
        },
        {
          "author": "jkotas",
          "body": "threadsuspend.cpp: The ifdef should be changed to just `#if !defined(FEATURE_EH_FUNCLETS)` and the else part of the ifdef should be deleted.\r\n\r\nNot sure about the right fix for valuehome.cpp.",
          "createdAt": "2020-11-02T06:09:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-02T06:09:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDI1ODk0NQ=="
        },
        {
          "author": "davidwrighton",
          "body": "@sandreenko, looking at the valuehome code it's doing save/restore of the x87 registers. I believe we don't use them anymore for x86 codegen, and instead use the SSE registers. I suppose it might be there to support mixed mode debugging, but I don't have confidence in that. I would guess that this code in theory is used to modify register state in the registers window, or possibly to handle some optimized debugging scenarios that I suspect don't work very well.\r\n\r\n@tommcdon might have some context.",
          "createdAt": "2020-11-03T18:53:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-03T18:53:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTMxMzcyNQ=="
        },
        {
          "author": "davidwrighton",
          "body": "Also my general opinion is that a better name would be good, but something like unreached causes a bunch of compiler warning spew that is different between various compilers and optimization levels. I'd like to see what sort of changes are needed to get a clean PR build before having an opinion on that.",
          "createdAt": "2020-11-03T18:57:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-03T18:57:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTMxNTk4MA=="
        },
        {
          "author": "tannergooding",
          "body": "> I believe we don't use them anymore for x86 codegen, and instead use the SSE registers\r\n\r\nThe x86 (but not x64) ABI still requires floating-point values to be returned in `ST(0)`, so maybe it needs to account for that?",
          "createdAt": "2020-11-03T19:13:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-03T19:13:21Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTMyMzM4NQ=="
        },
        {
          "author": "tommcdon",
          "body": "Adding @sdmaclea to comment on the debugger ARM64 NYI assert https://github.com/dotnet/runtime/blob/ecd979c9860caee8326f8678736ae98a77bdae5b/src/coreclr/src/debug/di/valuehome.cpp#L454-L457",
          "createdAt": "2020-11-03T19:13:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-03T19:13:46Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTMyMzU4Mw=="
        },
        {
          "author": "BruceForstall",
          "body": "> There are 6 usages of ASSERT(!\"message\") and 360 usages of ASSERT(\"message\") with different defines, probably replace both with better debug only unreached(\"message\")?\r\n\r\nThe `ASSERT(\"message\")` cases are all in the PAL, which is \"unique\". The VM cases of `ASSERT(!\"message\")` maybe could be changed to use `_ASSERTE` like most everything else. It's not clear there's value in making it unreached, which as David says can cause warning problems with various compilers.",
          "createdAt": "2020-11-06T22:59:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-06T22:59:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzMzNzMzMw=="
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOKx1AdQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44132",
    "title": "Reconsider assert(!\"Message\") usage in coreclr."
  },
  {
    "author": "marek-safar",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2020-11-02T18:02:37Z",
    "body": "System.SecurityException is never thrown by the runtime and handling where such exception is caught can be removed.\r\n\r\nThere are one or two cases where this exception is thrown from libraries but maybe these could be revisited as well.",
    "number": 44159,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-07-06T22:30:54Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
          "createdAt": "2020-11-02T18:02:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-02T18:02:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDYzMzc1MQ=="
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOKvP_lw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44159",
    "title": "Remove System.SecurityException usage from managed libraries"
  },
  {
    "author": "marek-safar",
    "labels": [
      "arch-wasm",
      "area-Meta",
      "User Story",
      "Priority:1",
      "Cost:M"
    ],
    "createdAt": "2020-11-13T10:53:43Z",
    "body": "Developers would like to be able to easily consume NuGets for use in browser-wasm applications. NuGets which consist of managed libraries only are generally supported as long as they target net5.0+ and avoid APIs marked with the [UnsupportedOsPlatform(\"browser\")] attribute. We need to go beyond that and support NuGet packages that include also native/unmanaged code targeting `browser-wasm` RID.\r\n\r\n## Work Items\r\n\r\n- NuGet Packaging\r\n    - [ ] Document structure expectations\r\n    - [ ] ABI versioning\r\n    - [ ] Source builds\r\n- Tooling\r\n    - [x] Tooling installation (emscripten SDK)\r\n    - [ ] Expose version requirements with LTS considerations\r\n    - [x] Run pinvoke generator on NuGet assemblies\r\n    - [x] Relink runtime with native code in build and publish (https://github.com/dotnet/runtime/pull/57556)",
    "number": 44636,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-18T17:42:30Z",
          "user": "RChrisCoble"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-19T01:46:22Z",
          "user": "GeorgeS2019"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-27T23:47:45Z",
          "user": "bruno-garcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-04T05:57:54Z",
          "user": "RyoukoKonpaku"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-21T18:17:00Z",
          "user": "deviousasti"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-02-15T09:15:59Z",
          "user": "nor0x"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-05T17:49:31Z",
          "user": "ericstj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-13T22:48:30Z",
          "user": "raju-kumar"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-20T17:06:33Z",
          "user": "beto-rodriguez"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-08T04:10:17Z",
          "user": "lbargaoanu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-07-23T08:06:23Z",
          "user": "Martinn2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-08-21T18:10:15Z",
          "user": "charlesroddie"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-08-24T04:15:45Z",
          "user": "Nyrest"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-03T23:00:56Z",
          "user": "NUlliiON"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-05T21:45:09Z",
          "user": "malciin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-14T16:27:59Z",
          "user": "artemiusgreat"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-02T21:22:23Z",
          "user": "HurricanKai"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-05-26T00:54:38Z",
          "user": "pedoc"
        }
      ],
      "totalCount": 18,
      "endCursor": "Y3Vyc29yOnYyOpHOCwUBJg=="
    },
    "updatedAt": "2025-01-29T18:15:11Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "Potentially related https://github.com/NuGet/Home/issues/9631",
          "createdAt": "2020-11-13T22:25:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-13T22:25:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzA2NTczMQ=="
        },
        {
          "author": "danroth27",
          "body": "Specific libraries with native dependencies that we've heard customer interest in include SkiaSharp and Sqlite.",
          "createdAt": "2020-11-17T20:27:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2020-11-18T19:37:19Z",
                "user": "mattleibow"
              },
              {
                "content": "HEART",
                "createdAt": "2020-11-19T01:47:06Z",
                "user": "GeorgeS2019"
              },
              {
                "content": "HOORAY",
                "createdAt": "2020-12-01T20:50:17Z",
                "user": "mclose90"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-01-04T05:58:17Z",
                "user": "RyoukoKonpaku"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-01-06T06:48:51Z",
                "user": "deviousasti"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-05-05T05:48:23Z",
                "user": "ChristianWeyer"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-05-20T17:06:42Z",
                "user": "beto-rodriguez"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-06-07T17:15:56Z",
                "user": "JensKrumsieck"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-07-23T08:06:30Z",
                "user": "Martinn2"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-12T09:45:39Z",
                "user": "artemiusgreat"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-08-12T09:45:41Z",
                "user": "artemiusgreat"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-09-21T17:07:32Z",
                "user": "MatthewMancino"
              }
            ],
            "totalCount": 12,
            "endCursor": "Y3Vyc29yOnYyOpHOB7M1Uw=="
          },
          "updatedAt": "2020-11-17T20:27:05Z",
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTE4MTg0MA=="
        },
        {
          "author": "mattleibow",
          "body": "Has there been any updates to this? I see the other AOT issue is pretty long now :)",
          "createdAt": "2021-05-25T20:07:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-25T20:07:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0ODIyNDgxNg=="
        },
        {
          "author": "radical",
          "body": "> Has there been any updates to this? I see the other AOT issue is pretty long now :)\r\n\r\nI'm working on this.",
          "createdAt": "2021-05-26T03:04:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-05-26T15:29:19Z",
                "user": "mattleibow"
              },
              {
                "content": "HEART",
                "createdAt": "2021-06-05T18:03:06Z",
                "user": "raju-kumar"
              },
              {
                "content": "HEART",
                "createdAt": "2021-06-15T18:14:28Z",
                "user": "ChristianWeyer"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBuzuRQ=="
          },
          "updatedAt": "2021-05-26T03:04:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0ODQxODk3NA=="
        },
        {
          "author": "raju-kumar",
          "body": "Good to note this is being worked on.  This will help us to utilize skiasharp rendering in browser. Looking forward to see this feature in a preview.",
          "createdAt": "2021-06-05T18:24:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-05T18:24:53Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI3NzUwNQ=="
        },
        {
          "author": "jeromelaban",
          "body": "I've gone down that path for Uno, if you want to reuse the findings to include in the runtime: https://github.com/unoplatform/Uno.Wasm.Bootstrap#webassembly-module-linking-support, particularly the part with the multi-versioning of emscripten-targets.",
          "createdAt": "2021-06-05T21:02:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-07T05:31:04Z",
                "user": "radical"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-15T18:14:19Z",
                "user": "ChristianWeyer"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-12T09:46:59Z",
                "user": "artemiusgreat"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-12T10:38:31Z",
                "user": "artemiusgreat"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOB2FLTw=="
          },
          "updatedAt": "2021-06-05T21:02:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI5NTQyNg=="
        },
        {
          "author": "Xyncgas",
          "body": "hi",
          "createdAt": "2021-06-15T23:59:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-15T23:59:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2MTkwOTYzNA=="
        },
        {
          "author": "Xyncgas",
          "body": "came from #5466 dropping in to get notified",
          "createdAt": "2021-06-15T23:59:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-15T23:59:57Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg2MTkwOTc4NQ=="
        },
        {
          "author": "artemiusgreat",
          "body": "Why was this moved to Triage? \r\nAt the moment Blazor doesn't have any JS-free charting tool with acceptable real-time performance. \r\nAvailability of `SkiaSharp` would be a life-saver.",
          "createdAt": "2021-08-12T10:38:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-12T11:48:53Z",
                "user": "JensKrumsieck"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-13T17:02:48Z",
                "user": "jivanova"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-16T07:42:51Z",
                "user": "e1em3ntoDX"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-16T18:31:22Z",
                "user": "EydenJones"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T19:20:26Z",
                "user": "bruno-garcia"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-14T12:34:08Z",
                "user": "Martinn2"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-19T23:39:24Z",
                "user": "enghch"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHODy6L9Q=="
          },
          "updatedAt": "2021-08-12T10:38:10Z",
          "id": "IC_kwDODI9FZc41fz0y"
        },
        {
          "author": "lewing",
          "body": "We're still working on some details but the baseline functionality is in.",
          "createdAt": "2021-08-17T23:26:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-24T12:51:58Z",
                "user": "Nyrest"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-24T12:52:02Z",
                "user": "Nyrest"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T19:20:37Z",
                "user": "bruno-garcia"
              },
              {
                "content": "HEART",
                "createdAt": "2021-08-25T19:20:38Z",
                "user": "bruno-garcia"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-25T20:12:34Z",
                "user": "EydenJones"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-08-26T14:11:46Z",
                "user": "beto-rodriguez"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-03T23:00:48Z",
                "user": "NUlliiON"
              }
            ],
            "totalCount": 7,
            "endCursor": "Y3Vyc29yOnYyOpHOB5CoRg=="
          },
          "updatedAt": "2021-08-17T23:26:46Z",
          "id": "IC_kwDODI9FZc41r4vs"
        },
        {
          "author": "jeffhandley",
          "body": "@lewing Is this issue ready to close for 6.0.0?",
          "createdAt": "2021-10-09T02:06:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-09T02:06:08Z",
          "id": "IC_kwDODI9FZc43-yJc"
        },
        {
          "author": "mairaw",
          "body": "should this issue be removed from the .NET 6 project?",
          "createdAt": "2023-05-26T00:10:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-26T00:10:39Z",
          "id": "IC_kwDODI9FZc5dM3BW"
        }
      ],
      "totalCount": 12,
      "endCursor": "Y3Vyc29yOnYyOpHOXTNwVg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44636",
    "title": "User Story: Developers can easily use NuGets with native libraries to build fast wasm projects"
  },
  {
    "author": "jeffhandley",
    "labels": [
      "documentation",
      "area-Meta",
      "User Story",
      "Priority:3",
      "Cost:S",
      "Team:Libraries"
    ],
    "createdAt": "2020-11-19T02:21:11Z",
    "body": "<details>\r\n<summary>Original issue description</summary>\r\n\r\nThe [Platform Compatibility Analyzer](https://docs.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer) was introduced in .NET 5.0, raising new diagnostics when APIs are referenced that are unsupported on targeted platforms. These diagnostic messages result in build warnings, but there are no corresponding code fixers in place to automatically address the warnings or illustrate how to do so.  Instead, developers must turn to the documentation for the analyzer and the `CA1416` diagnostic ID to determine how to handle the warnings.\r\n\r\nThere are multiple ways to handle the warnings, and each of these could be supplied a possible fixer.\r\n\r\n1. [Guard platform-specific APIs with guard methods](https://docs.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer#guard-platform-specific-apis-with-guard-methods)\r\n2. [Mark call site as platform-specific](https://docs.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer#mark-call-site-as-platform-specific)\r\n3. [Assert the call-site with platform check](https://docs.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer#assert-the-call-site-with-platform-check)\r\n4. Suppress the warning\r\n</details>\r\n\r\nWhen developers encounter warnings from the Platform Compatibility analyzer, they can be uncertain which approach is best for resolving the warnings. To aide them we will collect our own best practices and document how we've decided to use each remediation approach in our own code base.\r\n\r\n- [ ] Review and document the patterns and practices that are emerging within the runtime code\r\n- [ ] Categorize the patterns into scenarios such that we can document refined guidance for when to use each pattern\r\n",
    "number": 44919,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-27T23:58:15Z",
          "user": "bruno-garcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-28T06:43:06Z",
          "user": "dymo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-17T11:16:23Z",
          "user": "AmrAlSayed0"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOBaS2mw=="
    },
    "updatedAt": "2022-08-11T03:51:52Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jeffhandley",
          "body": "I talked with @terrajobst about this story and we agreed that we’re not yet to a point where we can confidently define the fixer behaviors.  As we have applied more platform annotations throughout the runtime, we’ve been iterating on the patterns and practices we apply.  Before we build the fixer, we should:\r\n\r\n- Review and document the patterns and practices that are emerging within the runtime code\r\n- Categorize the patterns into scenarios such that we can document refined guidance for when to use each pattern\r\n- Determine if we should implement new SDK features related to assembly-level attributes\r\n- Implement the feature that allows for custom guard methods that assert platform compatibility\r\n- Finish annotating the runtime with the new 6.0 platforms\r\n- Feel comfortable that the annotation/guard method logic fully meets the needs in the runtime repo\r\n\r\nThereafter, we can define which fixes this code fixer would offer in which scenarios, and then implement it.\r\n\r\nBased on this status, I’m removing this story from scope for 6.0. But we will meet those preconditions above before 6.0 ships, allowing us to plan the fixer work.",
          "createdAt": "2021-04-21T06:38:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-21T17:24:59Z",
                "user": "buyaa-n"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBoDi9w=="
          },
          "updatedAt": "2021-04-21T06:38:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzgxNjc0Mg=="
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOMRpyJg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44919",
    "title": "Developers can follow documentation to resolve Platform Compatibility warnings"
  },
  {
    "author": "jeffhandley",
    "labels": [
      "area-Meta",
      "User Story",
      "Priority:2",
      "Cost:XL",
      "Team:Libraries"
    ],
    "createdAt": "2020-11-19T02:28:13Z",
    "body": "[AB#1255325](https://devdiv.visualstudio.com/10e66e43-9645-4201-b128-0fdc3769cc17/_workitems/edit/1255325)\r\nThe [Platform Compatibility Analyzer](https://docs.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer) was introduced in .NET 5.0, raising new diagnostics when APIs are referenced that are unsupported on targeted platforms. At present, this analysis can only be performed as part of compilation, providing an experience for identifying unsupported API calls within the IDE or during a build.\r\n\r\nThe projects which benefit most from the annotations are large scale solutions with many dependencies which are usually not available as a source code implementation. If the same analysis performed by the Platform Compatibility Analyzer could be performed against binaries, we could further improve the impact of this tooling. The analysis could potentially be integrated with the [.NET Portability Analyzer](https://docs.microsoft.com/dotnet/standard/analyzers/portability-analyzer) as well, helping those seeking to migrate from .NET Framework to identify not only which APIs are and are not available in .NET 5.0+, but which of those APIs were Windows-specific.",
    "number": 44920,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-27T23:58:42Z",
          "user": "bruno-garcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-11-28T06:42:40Z",
          "user": "dymo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-16T12:07:32Z",
          "user": "Saibamen"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOBq-0QQ=="
    },
    "updatedAt": "2025-08-01T18:16:09Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jeffhandley",
          "body": "@marek-safar and @bruno-garcia -- Do you have any specific scenarios in mind that can be used as acceptance criteria for this story? At present, this is vaguely defined and low-confidence; specific scenarios would help.",
          "createdAt": "2020-12-08T07:16:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-08T07:16:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDQzMjQzNA=="
        },
        {
          "author": "marek-safar",
          "body": "We have several major scenarios which would benefit from this support greatly and we could come up with more as this can have quite a broad impact.\r\n\r\nA few major ones\r\n- Blaze WASM developers\r\n- ios/Android developers\r\n- NativeAOT/SingleExe like scenarios\r\n\r\nAll of them would benefit from running compact analyzers for all pieces they deploy than for just parts they built from sources.\r\n",
          "createdAt": "2020-12-08T09:48:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-12-08T09:48:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDUxMTI1Mw=="
        },
        {
          "author": "jeffhandley",
          "body": "In order to study this further, we need to define some concrete scenarios for usage and expectations.\r\n\r\n1. What would the developer be analyzing?\r\n    a. Their source, but analyzing into the NuGet package dependencies they have\r\n    b. A DLL\r\n    c. A NuGet package\r\n2. Would this analysis happen inside or outside Visual Studio?\r\n3. How far into NuGet package dependencies would we traverse for analysis?\r\n4. What actions would we guide developers to take if a warning is discovered within a referenced assembly/package?\r\n5. Is the ultimate intent to find netcoreapp APIs that are platform-specific, but used in NuGet packages that are platform agnostic?\r\n\r\n@terrajobst @marek-safar -- @buyaa-n and I don't know the answers to these questions. Is the following what you had in mind, or were you thinking of something different?\r\n\r\n1. If we're analyzing the developer's code inside Visual Studio\r\n1. And the reference an API that comes from a NuGet package and that API does not have any `[SupportedOSPlatform]`/`[UnsupportedOSPlatform]` attributes applied\r\n1. But we're able to inspect the API calls made _within the API that is being called_ (recursively) down to `netcoreapp` **(it is unknown how we could do this)**\r\n1. And we find `[SupportedOSPlatform]`/`[UnsupportedOSPlatform]` attributes applied that have not been handled by the intermediate NuGet package's API\r\n1. Then we provide a warning to the developer that the API they are calling might not be supported on their platforms",
          "createdAt": "2021-01-30T01:22:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-30T01:22:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDEzMDUzNw=="
        },
        {
          "author": "marek-safar",
          "body": "There are multiple scenarios you could build on top of the original requirements. However, the core one is very simple.\r\n\r\nA developer is building Blazor/Win/Apple/etc. app and adds a dependency to NuGet to help him solve some of his problems. The NuGet is added to the project and builds successfully. The developer keeps working on the code and after few more iterations, the app suddenly throws PNSE. After some time spent the developer finds out that NuGet is targetting net6.0 but it's not compatible with Blazor/Win/Apple target and has to remove the library and rewrite the code written to use a different library or approach.",
          "createdAt": "2021-02-01T14:43:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-02-02T01:48:41Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBeeeNA=="
          },
          "updatedAt": "2021-02-01T14:43:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDkwNzgzNA=="
        },
        {
          "author": "terrajobst",
          "body": "@cathysull, FYI this is not gonna make the cut for .NET 6.",
          "createdAt": "2021-03-15T20:03:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-15T20:03:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5OTcxNDEyNQ=="
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOL6qrTQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44920",
    "title": "Developers can verify their NuGet dependencies compatibility against specific target platform"
  },
  {
    "author": "TheFanatr",
    "labels": [
      "design-discussion",
      "area-Meta"
    ],
    "createdAt": "2020-11-19T05:16:38Z",
    "body": "> By the time .NET 6 is released, it will have been more than five years since Apple renamed this operating system to \"macOS\". It's not called \"OS X\" any more. If it can be done correctly in TFMs, it can be done correctly in RIDs.\r\n\r\n_Originally posted by @warrenrumak in https://github.com/dotnet/runtime/issues/43313#issuecomment-707261960_\r\n\r\nThis is in reference to the fact that RIDs for macOS are still `osx-architecture` (and seems like it will be `osx-arm64` for Apple Silicon Macs); this should be fixed at this point before it becomes more set in stone.\r\n\r\n@richlander replied to the above quoted comment, for the OP to file an issue, but they haven't and it's been a month, so here is mine.\r\n\r\nHope this gets done; if there's already an issue for this or it was already done, I didn't find it or notice, and someone can close.",
    "number": 44931,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-08-13T15:41:26Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Dotnet-GitSync-Bot",
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2020-11-19T05:16:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T05:16:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDEzNTIzNg=="
        },
        {
          "author": "danmoseley",
          "body": "@terrajobst ?",
          "createdAt": "2020-11-19T05:34:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T05:34:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDE0MDc3OA=="
        },
        {
          "author": "am11",
          "body": "<kbd>\\* NO MERGE \\*</kbd>\r\nbut this is not a PR. 🙂",
          "createdAt": "2020-11-19T17:11:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2020-11-19T17:23:05Z",
                "user": "PathogenDavid"
              },
              {
                "content": "LAUGH",
                "createdAt": "2020-11-22T01:13:19Z",
                "user": "TheFanatr"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-01-17T20:31:02Z",
                "user": "aaronfranke"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-03-03T12:49:21Z",
                "user": "baciucristian"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBiDlEQ=="
          },
          "updatedAt": "2020-11-19T17:11:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDUxNDgxMg=="
        },
        {
          "author": "aaronfranke",
          "body": "@danmosemsft This issue is labeled `* NO MERGE *` but in #43313 it says \"Support compilation targeting osx-arm64\" and the box is checked. So this has already been merged, and should be fixed soon before it's too late.",
          "createdAt": "2021-01-17T20:32:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-17T20:32:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTg3NTIzMg=="
        },
        {
          "author": "danmoseley",
          "body": "Thanks for pointing that out. As much as it's not ideal as is, I expect doing this would require cutting work in other places including NuGet. Could you say a little more about what you believe the relative priority of this should be and why?\n\nCc @terrajobst @richlander @wfurt @sdmaclea ",
          "createdAt": "2021-01-18T00:17:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T00:17:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTkwNjcxOA=="
        },
        {
          "author": "aaronfranke",
          "body": "@danmosemsft The issue is that the longer we wait the bigger the potential breakage is. Since .NET 6 introduces new names (the mentioned inaccurate `osx-arm64`), the optimal strategy is to use the correct names from the start, and then the only breakages that have to be worried about are with the existing code. So I think this should be solved before .NET 6 is in preview; if .NET 6 follows [a similar schedule to .NET 5](https://devblogs.microsoft.com/dotnet/announcing-net-5-0-preview-1/), this means that this issue should be solved within the next few months.\r\n\r\nEDIT: I suggest throwing this issue and #44120 on a milestone of some sort so it's not forgotten. I see that there is a \"6.0.0\" milestone, but maybe it should also go on some other milestone or tracker so it gets done within the next few months.",
          "createdAt": "2021-01-18T00:41:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T00:53:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTkxMjMxMg=="
        },
        {
          "author": "danmoseley",
          "body": "Cc @ericstj @marek-safar ",
          "createdAt": "2021-01-18T01:34:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T01:34:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTkyNTQ5NQ=="
        },
        {
          "author": "sdmaclea",
          "body": "We will probably need to create `macos` & `macos-*` as an alias for `osx` & `osx-*`.  I am not sure `osx-arm64` makes the situation any worse as we would probably want to keep things symmetrical.",
          "createdAt": "2021-01-18T03:47:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T03:47:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk2MTIxMA=="
        },
        {
          "author": "TheFanatr",
          "body": "I think it's also somewhat useful to point out that not only is the operating system no longer called Mac OS X, macOS Big Sur is actually version 11 of the software, as opposed to 10.X for the multiple previous macOS releases, so it's incorrect on multiple levels due to \"OS X\" being version 10 by definition.",
          "createdAt": "2021-01-18T07:08:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2021-01-19T16:57:22Z",
                "user": "sdmaclea"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-01-23T02:12:52Z",
                "user": "TheFanatr"
              },
              {
                "content": "LAUGH",
                "createdAt": "2021-03-03T12:50:29Z",
                "user": "baciucristian"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBiDlog=="
          },
          "updatedAt": "2021-01-18T07:11:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjAzNDU5Mw=="
        },
        {
          "author": "marek-safar",
          "body": "> like it will be osx-arm64 for Apple Silicon Macs\r\n\r\nyep, that's correct, and [current setup](https://github.com/wfurt/runtime/blob/master/src/libraries/pkg/Microsoft.NETCore.Platforms/runtimeGroups.props#L121-L125)\r\n\r\nI agree there should be a way to alias OSX to macOS and vice-versa so developers can use both names on CLI and in their projects/NuGets. I don't think we should be pedantic and block osx-arm64 though.",
          "createdAt": "2021-01-18T08:06:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-18T08:06:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjA2NDMxMw=="
        },
        {
          "author": "ericstj",
          "body": "Looks like this issue might be tracking the same thing as https://github.com/dotnet/runtime/issues/44120",
          "createdAt": "2021-05-20T16:25:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-20T16:25:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTI2NzMwOA=="
        },
        {
          "author": "krwq",
          "body": "I assume this is now out of scope for 6.0?",
          "createdAt": "2021-07-22T14:36:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-22T14:36:49Z",
          "id": "IC_kwDODI9FZc40v3y6"
        },
        {
          "author": "krwq",
          "body": "Changed to future since the other issue is marked as Future",
          "createdAt": "2021-07-22T14:37:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-22T14:37:26Z",
          "id": "IC_kwDODI9FZc40v36d"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHONL9-nQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44931",
    "title": "macOS-architecture RIDs"
  },
  {
    "author": "carlossanlop",
    "labels": [
      "Epic",
      "area-Meta",
      "Cost:XL",
      "Team:Libraries"
    ],
    "createdAt": "2020-11-19T22:04:55Z",
    "body": "Today, some of our source code repos like Runtime, WPF, WinForms and WCF, consider the dotnet-api-docs repo the source of truth for their documentation. This poses some challenges:\r\n\r\n- We only use triple slash comments in source for seeding the documentation.\r\n- We have to manually port these comments to dotnet-api-docs so they show up both in MS Docs and in IntelliSense.\r\n- Before the ported comments get merged in dotnet-api-docs, they need to go through language review, which may change the contents considerably.\r\n- Once they get merged, the triple slash comments in source become obsolete.\r\n- We depend on the Docs build system to generate IntelliSense for us with the language-reviewed contents.\r\n- We need to consume the generated IntelliSense in the source code repos via a nuget package to make it available in the published SDK.\r\n- Any documentation changes/fixes need to be done in dotnet-api-docs, which may cause even greater discrepancies with the original triple slash comments, unless the developer also submits a PR to fix the comments there.\r\n- This complex manual process and the dependency round trip made it difficult to ensure APIs introduced in 1.x and 2.x were fully documented in MS Docs and IntelliSense. We improved our process for 3.x and 5.0 and prevented documentation debt in those versions, but we still had to do the whole process manually.\r\n- The fact that dotnet-api-docs shows shared documentation for .NET Core and .NET Framework is one of the main reasons why this process has remained the way it currently is.\r\n- We rarely add code examples to new APIs. The few examples we have, live in dotnet-api-docs. Some of the existing ones use obsolete APIs, or APIs that only exist in .NET Framework, or show old coding conventions.\r\n\r\nWe would like to propose a series of changes in our documentation process that will simplify the developer's role and automate some of the steps. During .NET 6, we piloted this new documentation process with a subset of the .NET Libraries. That pilot produced the following outputs:\r\n\r\n* Overall feasibility and promise of the new process\r\n* An assessment of contributor satisfaction with the new process\r\n* An understanding of the challenges that would need to be overcome across the remaining libraries\r\n* A project plan for either completing the migration or canceling the pilot and reverting to the previous process, with a new User Story created and all involved work estimated\r\n\r\nWe will continue this plan in .NET 8.\r\n\r\n---\r\n\r\n### Bring documentation from Docs to triple slash\r\n\r\nSubstitute all the triple slash comments in source code with the language-reviewed documentation that exists in dotnet-api-docs. We will do this on an assembly by assembly basis, and will enable the MSBuild property [`<GenerateDocumentationFile>`](https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#generatedocumentationfile) to ensure new public APIs cause a build warning when they don't have documentation.\r\n\r\nWe will be using the dotnet/api-docs-sync PortToTripleSlash tool for this effort, for which I added the feature to port dotnet-api-docs to triple slash comments: https://github.com/dotnet/api-docs-sync/tree/main/src/PortToTripleSlash\r\n\r\n#### Remarks\r\n\r\nWe won't backport remarks for the following reasons:\r\n\r\n- They are bulky. Really long remarks would have to be moved to external files and linked in the triple slash comments.\r\n- They aren't shown in VS intellisense.\r\n- Remarks usually contain links to code example external files. Files with code snippets will remain in the dotnet-api-docs repo, untouched. When (and if) we backport remarks containing links to those code snippets, the links will be relative to the dotnet-api-docs repo.\r\n- Remarks also contain embedded markdown code snippets. They would have to be moved to their own files and merged directly in dotnet-api-docs, to avoid having huge triple slash comments sections.\r\n\r\n#### .NET Framework-only APIs\r\n\r\nAPIs that only exist in .NET Framework will continue having dotnet-api-docs as its source of truth.\r\n\r\nAPIs that are shared by both .NET Core and .NET Framework will have their source of truth in triple slash comments in .NET Core, making sure we preserve the differences in behavior between versions.\r\n\r\n<details>\r\n  <summary>Tasks</summary>\r\n\r\nHere we will list the assemblies that got their documentation backported.\r\n\r\nTo do - Add one item per assembly and link to PRs as they are created.\r\n\r\n  - [X] System.IO.Compression.Brotli https://github.com/dotnet/runtime/pull/46716  - Need to revisit\r\n  - [X] System.Numerics.Vectors https://github.com/dotnet/runtime/pull/47725 - Need to revisit\r\n  - [X] System.Formats.Cbor - Need to revisit \r\n\r\n</details>\r\n\r\n---\r\n\r\n### Merge blocking label and docs reviewers\r\n\r\nWe already have a bot task that automatically adds the `new-api-needs-documentation` label to PRs that are introducing new public APIs, but we want to make sure it also becomes a merge blocker, like the `* NO MERGE *` label does.\r\n\r\nOnce the PR has been reviewed by a maintainer, and they confirmed the new APIs have proper documentation, the label can be manually removed to unblock merging.\r\n\r\nWe also want the bot to automatically add the @dotnet/docs members as PR reviewers for language review.\r\n\r\n<details>\r\n  <summary>Tasks</summary>\r\n\r\n  - [ ] Make the `new-api-needs-documentation` label mandatory.\r\n  - [ ] Automatically add language reviewers to PRs adding new APIs.\r\n  - [ ] Update our readmes to describe the purpose of the label and what to expect from a PR review.\r\n\r\n</details>\r\n\r\n---\r\n\r\n### Automatic Docs build\r\n\r\nNote: We can only begin this work if we finished backporting the documentation from all assemblies.\r\n\r\nCurrently, whenever new APIs are added to the source code repos, we send the updated ref assemblies to the Docs team so they feed them to the Docs build system, which causes the regeneration of the dotnet-api-docs xml files, showing the new APIs. After this point, we can then manually port the documentation from triple slash, using https://github.com/dotnet/api-docs-sync/tree/main/src/PortToTripleSlash\r\n\r\nFrom now on, we want to automate the process by automatically merging the ref assembly drop (it's just a commit in an internal repo). This drop will also contain the build-generated IntelliSense xmls, which would now contain the documentation source of truth, removing the step of manual porting.\r\n\r\n<details>\r\n  <summary>Tasks</summary>\r\n\r\n- [ ] Automatically ship our generated intellisense packages to customers, instead of the ones we normally would bring from the dotnet-api-docs internal feed.\r\n- [ ] Exclude assemblies with backported documentation from the ref assemblies drop. Instead, just include the intellisense xml.\r\n\r\n\r\n</details>\r\n\r\n---\r\n\r\n### Debt prevention and docs fixes\r\n\r\nAt the time of writing this document, we have 900+ issues open in the dotnet-api-docs repo. We would like to consider these as part of the regular work planning for our dev teams, and we want to make it easier to filter issues by area by automatically adding labels using a bot, and area owners should be notified (on a subscription basis, like in runtime).\r\n\r\nContributors will still be able to report documentation issues in dotnet-api-docs, but fixes will now be done directly in triple slash comments in source. PRs will be disabled in dotnet-api-docs except for maintainers.\r\n\r\nDocumentation for APIs that only exist .NET Framework will continue to be done directly in dotnet-api-docs (that will be its source of truth).\r\n\r\n<details>\r\n  <summary>Tasks</summary>\r\n\r\n  - [ ] Finish documenting APIs introduced in 1.x and 2.x, 3.x, 5.x, 6.x and 7.x ([dotnet/runtime/projects/60](https://github.com/dotnet/runtime/projects/60))\r\n  - [x] Add bot task to automatically add area labels to dotnet-api-docs issues.\r\n  - [x] Update fabric bot that auto-mention people, to be onboarded for dotnet-api-docs, so that only subscribed users can get mentioned in comments of new docs issues.\r\n  - [ ] Consider Docs for our sprint planning and triaging. cc @jeffhandley\r\n  - [ ] Update readme with new guidance on debt prevention and docs fixes.\r\n\r\n</details>\r\n\r\n---\r\n\r\n### Low pri / Nice to have\r\n\r\nThe following are tasks that are out of scope for this effort, but we would like to consider in the near future:\r\n\r\n- [X] - Add CI validation to the code snippets in the dotnet-api-docs repo.\r\n- [ ] - Redirect the MS Docs Edit button to the source code file instead of the dotnet-api-docs xml file. To achieve this, we would also have to include PDBs in the drop that contains the ref assemblies and xmls, and the Docs team would have to read them to determine the location of the source code for an API.\r\n- [ ] - Consider creating a new PR label `needs doc update` that would also become merge blocking, to ensure documentation gets updated when behavior is changed. [Here](https://github.com/dotnet/runtime/pull/43661#discussion_r509449225) is a good argument in favor of that.\r\n\r\n---\r\n\r\nQuestions and suggestions are welcome.",
    "number": 44969,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2020-12-15T20:03:03Z",
          "user": "adegeo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-04T10:02:06Z",
          "user": "MSDN-WhiteKnight"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-03-24T02:44:31Z",
          "user": "jeffhandley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-02T06:54:47Z",
          "user": "FilipToth"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-07T03:55:24Z",
          "user": "rgwood"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-27T10:27:47Z",
          "user": "ViktorHofer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-28T05:43:46Z",
          "user": "carlreinke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-09T19:12:17Z",
          "user": "colejohnson66"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOC2apTA=="
    },
    "updatedAt": "2025-01-13T21:09:53Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "Which source is the documentation going to live for APIs that have separate implementations per OS, per runtime or per architecture?",
          "createdAt": "2020-11-19T22:47:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T22:47:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDY4NDU2OQ=="
        },
        {
          "author": "safern",
          "body": "> Which source is the documentation going to live for APIs that have separate implementations per OS, per runtime or per architecture?\r\n\r\n@carlossanlop and I are still discussing this. I will write up a proposal design for that and discuss it with other people to make sure we have a good convention and the right features for people to specify the source of truth that makes it's way to the final ref pack. Once I have that I can loop you as well in the conversations, or just include it in this issue, but it feels like the description is quite large already. ",
          "createdAt": "2020-11-19T23:21:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T23:21:49Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDY5OTQzOQ=="
        },
        {
          "author": "safern",
          "body": "We also need to come up with a plan for APIs that live in `Private` assemblies (System.Private.CoreLib, System.Private.Uri, etc) on how we're going to have their documentation land in the .xml for the ref assembly that expose them, for example, `String` APIs should be under `System.Runtime.xml`. ",
          "createdAt": "2020-11-19T23:23:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T23:23:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDY5OTkxOQ=="
        },
        {
          "author": "carlossanlop",
          "body": "> _Does it mean contributors will have to open PRs to both the runtime repo and the docs repo_\r\n\r\n@SingleAccretion \r\n\r\n- If you are only adding or editing documentation, we expect contributors to create PRs in the source code repo (runtime/wpf/winforms/wcf). We will take care of automatically syncing that content with MS Docs.\r\n- Samples will still live in dotnet-api-docs. Adding a sample will require two PRs, one in dotnet-api-docs to add the sample file, and another in the source code repo to add the link in the API remarks (a link that will be relative to the dotnet-api-docs repo root).\r\n\r\nEdit: Seems the original comment I'm replying to got deleted?",
          "createdAt": "2020-11-19T23:23:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T23:53:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDcwMDA1MA=="
        },
        {
          "author": "carlossanlop",
          "body": "> _@carlossanlop and I are still discussing this._\r\n\r\nOne proposal we are considering (and it would be nice to hear some opinions on this) is to add documentation to one file, based on a pre-defined priority. The first file we would try to find is the `AnyOS` file. If not found, we try to find others, like `Windows`, then `Win32`, then `Unix`, etc. Again, we would have to define a priority.\r\n\r\nThen, once documentation is added to one file, the rest of them should also have triple slash comments to prevent the build warning, but the text would just be a boilerplate message indicating that is not the main documentation file.",
          "createdAt": "2020-11-19T23:28:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-19T23:29:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDcwMTY3Mw=="
        },
        {
          "author": "jkotas",
          "body": "> If not found, we try to find others, like Windows, then Win32, then Unix, etc. Again, we would have to define a priority.\r\n\r\nIt does not feel right to define priority ordering of OSes. Also, it would lead to odd situations like Unix specific behaviors having to be documented in .Windows.cs file, etc.\r\n\r\nMaybe would should have a dummy \"AnyOS\" or similar file for these cases that would have a throwing implementation and contain the documentation?",
          "createdAt": "2020-11-20T00:21:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T00:21:16Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDcxOTY2Mw=="
        },
        {
          "author": "carlossanlop",
          "body": "> _it would lead to odd situations like Unix specific behaviors having to be documented in .Windows.cs_\r\n\r\nSure, just keep in mind that's how we currently have our documentation in the dotnet-api-docs xmls: We do not have multiple `<summary>` sections for each OS/architecture/version. We put all our documentation in one place.\r\n\r\nWe need to keep in mind that we can only send to the Docs build system one build-generated intellisense xml file per ref assembly, from which all the documentation (for all OS/architectures/versions) will be copied and pasted into the ECMAxml files in dotnet-api-docs.\r\n\r\n@safern also suggested we could indicate in the csproj an MSBuild property that would indicate which file is the source of truth.\r\n\r\nBut your idea @jkotas of always having an `AnyOS` file makes sense if we want to avoid confusion and we want to avoid the MSBuild property.",
          "createdAt": "2020-11-20T03:04:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T03:04:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDgxNTIxNg=="
        },
        {
          "author": "safern",
          "body": "> But your idea @jkotas of always having an AnyOS file makes sense if we want to avoid confusion and we want to avoid the MSBuild property.\n\nWouldn't this be the equivalent of having a super long file with the APIs? Something like a ref assembly?",
          "createdAt": "2020-11-20T04:27:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T04:27:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDgzNzIxNw=="
        },
        {
          "author": "jkotas",
          "body": "I meant that we would follow the existing factoring - one file per type. For example, we would have `Path.cs`, `Path.Unix.cs`, `Path.Windows.cs` and `Path.AnyOS.cs`. `Path.AnyOS.cs` would have the docs.",
          "createdAt": "2020-11-20T04:53:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T04:54:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDg0OTUxOA=="
        },
        {
          "author": "krwq",
          "body": "How many of such OS/Arch specific APIs there are? Would it be possible to manually handle that? Also should APIs have generic description without implementation detail? If there are many of such perhaps we could combine the summaries into a single:\r\n\r\n```\r\nOn Windows:\r\n<Windows summary>\r\n\r\nOn Unix:\r\n<Unix summary>\r\n...\r\n```\r\n\r\nmaybe that wouldn't be perfect but it would temporarily solve the problem, list of such APIs could be gathered into an issue and later those could be improved by hand.\r\n\r\n(and not sure how would that work for arguments but still I'm curious about the numbers first, possibly this problem is very small)",
          "createdAt": "2020-11-20T07:57:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T07:58:20Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMDk5NDMyNA=="
        },
        {
          "author": "safern",
          "body": "> I meant that we would follow the existing factoring - one file per type. For example, we would have Path.cs, Path.Unix.cs, Path.Windows.cs and Path.AnyOS.cs. Path.AnyOS.cs would have the docs.\r\n\r\nI see. There are 2 things that make me wonder if that's the best approach:\r\n\r\n1) We have various projects (OOB packages) that cross compile with AnyOS and for the AnyOS configuration it generates the PNSE platform (the PNSE generator does filter per API if there are APIs included in the Compile item already, so that wouldn't be a problem), but that would mean, that for libraries that don't have an AnyOS configuration, we would need to add one (potentially impacting build times), we would also need to add one to their project references and also, we would need to exclude that asset from the product/package. So it would be a \"doc\" only build. \r\n\r\n2) People that create a OS specific file and want to add docs to APIs that are split in between those OS files, will need to remember to add an OS agnostic build configuration to their project, and an AnyOS file for those types, by having to manually include all APIs of that type there and add docs into that API.\r\n\r\nI still need to do an analysis on how many OS specific files we have and the patterns we use on the csproj to think on a better solution, but so far it seems like the \"most\" reasonable approach yet.\r\n\r\ncc: @ericstj any thougths? ",
          "createdAt": "2020-11-20T20:41:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T20:59:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMTM5Njk0OQ=="
        },
        {
          "author": "safern",
          "body": "Another idea that comes to mind, would be injecting a `tfm-docs` build that is done on every vertical to every project. And then for APIs that are OS Specific, people would have to add a `.Docs.cs` file that throw PNSE, and then we grab the .xml output from that vertical as the source of truth. ",
          "createdAt": "2020-11-20T20:46:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T20:46:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMTM5OTEzMQ=="
        },
        {
          "author": "carlossanlop",
          "body": "@krwq I haven't yet seen a `<summary>` that describes a different behavior between operating systems. This description split is usually seen in the exceptions an API throws, and even those are not that common.\r\n\r\nHaving a `<Unix summary>` wouldn't work because we still need a `<summary>` tag, otherwise the build warning will show up when the assembly gets the mandatory documentation MSBuild property enabled, because that required tag would be missing.\r\n\r\nBringing documentation from dotnet-api-docs into triple slash would mean bringing a single text description for each tag (`<summary>`, `<returns>`, etc.) that applies for all OS already, but if we were to follow your suggested approach, we would have to manually split each text for each OS, even though in the majority of the cases, the behavior doesn't really change. That is not the issue being discussed here - the issue is deciding in which file we want to paste those backported comments in triple slash.",
          "createdAt": "2020-11-20T21:01:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-20T21:01:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMTQwNTI3Mg=="
        },
        {
          "author": "GSPP",
          "body": "Could it be even easier for the general public to submit documentation improvements? Contributing to the GitHub repos is already quite a time investment. People need an account, and maybe they have never done anything like this. Nobody will casually do this.\r\n\r\nI sometimes read the documentation on the Microsoft website and think \"this really should be explained differently\". If there was a button that I could use to submit a documentation fix right there, and that would make it into the documentation eventually, I think a lot of people would do that. This might even become a bit of an addiction to power users such as contributing to Stack Overflow is addictive.\r\n",
          "createdAt": "2020-11-22T09:26:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-22T09:26:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMTcyMDYzMw=="
        },
        {
          "author": "huoyaoyuan",
          "body": "Some complain:\r\n\r\nFor certain simple APIs (namely `Math.Max`, `Math.Sin` and so on), their documentation are totally meaningless, and can be much longer than the implementation itself. It's even more meaningless for non-English speakers.\r\nPutting them into triple-slash doc in code will downgrade the code reading experience.",
          "createdAt": "2020-11-23T13:10:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-23T13:10:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMjE1MTg1Mg=="
        },
        {
          "author": "carlossanlop",
          "body": "> _their documentation are totally meaningless, and can be much longer than the implementation itself. It's even more meaningless for non-English speakers._\r\n\r\n@huoyaoyuan Whether the documentation is meaningless or not, is not the issue we are trying to solve. This issue is about making it easier for contributors to add documentation. People are more familiarized with triple slash comments in C# than with ECMAxmls from dotnet-api-docs.\r\n\r\n> _Putting them into triple-slash doc in code will downgrade the code reading experience._\r\n\r\nWhy? You can always press some key combinations collapse the comments sections. For example, in Visual Studio, you can press `Control+M+O`. In VS Code you can press `Control+K+0`.",
          "createdAt": "2020-11-23T20:17:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-23T21:37:07Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMjQwMjc4NQ=="
        },
        {
          "author": "huoyaoyuan",
          "body": "> Why? You can always press some key combinations collapse the comments sections. For example, in Visual Studio, you can press `Control+M+O`. In VS Code you can press `Control+K+0`.\r\n\r\nThanks for pointing out this. But, sometimes I need to read the code in GitHub or source.dot.net.",
          "createdAt": "2020-11-24T05:38:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2020-11-24T12:49:22Z",
                "user": "iSazonov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-08T06:33:15Z",
                "user": "KalleOlaviNiemitalo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-29T08:13:25Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-13T15:28:04Z",
                "user": "AristurtleDev"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOC3tXqg=="
          },
          "updatedAt": "2020-11-24T05:38:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMjY2NTYyMw=="
        },
        {
          "author": "krwq",
          "body": "@huoyaoyuan you should file a separate issue on that on https://github.com/dotnet/dotnet-api-docs or https://github.com/dotnet/docs (not sure which is the correct one but they will likely redirect you).",
          "createdAt": "2020-11-24T08:16:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-24T08:16:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczMjczMjQ2OQ=="
        },
        {
          "author": "danmoseley",
          "body": "@carlossanlop @jeffhandley I wonder whether it would be helpful to clarify what the .NET 6 goal is by changing the title? For example, perhaps the goal in the .NET 6 timeframe is to pilot and prove a mechanism for generating docs from sources, uncovering and resolving any unknowns (eg by applying to Brotli and/or a few others). If so we could mark this story marked P1. Presumably the goal of converting _all_ our docs is not P1  (P1 = \"very important to the release\")",
          "createdAt": "2021-01-13T18:30:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-13T18:33:24Z",
                "user": "carlossanlop"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBcWC3Q=="
          },
          "updatedAt": "2021-01-13T18:30:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTYzNjcxNA=="
        },
        {
          "author": "jeffhandley",
          "body": "@danmosemsft @carlossanlop I've updated the title, added outputs to the description, and updated the priority. Thanks for the suggestion, @danmosemsft.",
          "createdAt": "2021-01-20T21:37:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-21T17:52:02Z",
                "user": "carlossanlop"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBdQc6A=="
          },
          "updatedAt": "2021-01-20T21:37:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2Mzk2NDk1Nw=="
        },
        {
          "author": "carlossanlop",
          "body": "We are ready to ask each area pod to help backport the documentation for each one of the assemblies they own. **We will let each pod decide if they want to address the backporting of their documentation in 6.0 or in Future**: If your pod cannot get this done by 6.0 for one of your assemblies, MS Docs will continue being the source of truth for that assembly (and it won’t block shipping).\r\n\r\nWe [wrote a tool](https://github.com/carlossanlop/DocsPortingTool) that automates the process of copying the MS Docs documentation of a whole assembly to your source code repo: You just run the tool targeting an assembly, then submit a PR with the changes.\r\n\r\nDetailed instructions for the backporting process and how to use the tool can be found [here](https://github.com/carlossanlop/DocsPortingTool/blob/master/BackportInstructions.md).\r\n\r\nThe expectation for each area pod is to submit one PR per assembly, but some assemblies may also require a manual PR for dotnet-api-docs to keep lengthy remarks there as *.md files (to avoid saturating our source code files).\r\n\r\nHere are a couple of examples:\r\n-\tSystem.IO.Compression.ZipFile (backport PR, lengthy remarks PR)\r\n-\tSystem.Diagnostics.Process (backport PR, lengthy remarks PR)\r\n\r\n",
          "createdAt": "2021-03-02T02:54:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T02:54:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODUzNjk5OA=="
        },
        {
          "author": "sharwell",
          "body": "> We wrote a tool that automates the process of copying the MS Docs documentation of a whole assembly to your source code repo: You just run the tool targeting an assembly, then submit a PR with the changes.\r\n\r\nLet me know if there are any formatting or other discrepancies between the actual and desired output from this tool. I've written a bunch of code fixes for manipulating XML documentation comments in source code.",
          "createdAt": "2021-03-02T03:51:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T03:51:09Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODU1OTA1NA=="
        },
        {
          "author": "eiriktsarpalis",
          "body": "> Contributors will still be able to report documentation issues in dotnet-api-docs, but fixes will now be done directly in triple slash comments in source. PRs will be disabled in dotnet-api-docs except for maintainers.\r\n\r\nPresumably though there are aspects of documentation that cannot be backported to triple-slash comments? I'm thinking about examples and code snippets but surely there are others too.",
          "createdAt": "2021-03-02T11:11:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T11:12:47Z",
                "user": "SingleAccretion"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T11:40:09Z",
                "user": "KalleOlaviNiemitalo"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBh4WYw=="
          },
          "updatedAt": "2021-03-02T11:11:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODgyOTIzOQ=="
        },
        {
          "author": "carlossanlop",
          "body": "@eiriktsarpalis they could potentially be ported as markdown, but we are trying to encourage people to avoid that. For those cases, the suggestion is to move the whole remarks section to `*.md` files in dotnet-api-docs and link them as INCLUDE files in the remarks. That way, we don't get code examples backported to triple slash.\r\n\r\nInstructions: https://github.com/carlossanlop/DocsPortingTool/blob/master/BackportInstructions.md",
          "createdAt": "2021-03-02T18:44:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T18:44:17Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTEyNzk3MQ=="
        },
        {
          "author": "carlossanlop",
          "body": "For APIs that have multiple OS/platform implementations, this is what we decided to do:\r\n\r\n- All triple slash comments are defined in all public API definitions and have to match. The backporting tool is capable of copying the docs on top of all the implementations of the API.\r\n- We add validation that all the .xml's match in the all configurations build (csproj outer build).\r\n- We choose whichever *.xml from the list of xml's that match and binplace it side by side to the ref assembly. All the xmls will be the same.\r\n- We ignore PNSE output and not even enable xml generation for those.\r\n- We add a hook to disable docs generation and validation for a specific OS cross build.\r\n\r\ncc @jkotas ",
          "createdAt": "2021-03-02T19:54:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T19:54:43Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTE3MjIwOQ=="
        },
        {
          "author": "ViktorHofer",
          "body": "@carlossanlop I'm really about this change of direction and proposal. Just a few things that I want to mention that should be watched out for when implementing the underlying infrastructure:\r\n\r\n- Generating xml docs as part of the compiler invocation which happens in the inner build (i.e. per OS) will likely degrade performance. Measurements are important as a degradation of 200-300 managed libraries is likely noticeable.\r\n- Comparing the generated doc files and binplacing he right one is File I/O which per library won't be measurable but in total might add to the build times. Consider comparing files with a decent algorithm (might require an extra msbuild task).\r\n- Consider that in future we will collapse reference and source projects and if possible account for that in the infrastructure.",
          "createdAt": "2021-03-02T21:39:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T21:39:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTIzODQ2MQ=="
        },
        {
          "author": "sharwell",
          "body": "> Generating xml docs as part of the compiler invocation which happens in the inner build (i.e. per OS) will likely degrade performance\r\n\r\nOmitting documentation comments (and the subsequent reduction of language accuracy) is not a scenario I would expect users to follow in order to reach performance targets. This would be equivalent to disabling the use of Nullable Reference Types because it impacts build performance. Alternatives include:\r\n\r\n1. Disable documentation comments only for a select subset of builds where the output artifacts will not be used. The same optimization applies for nullable reference types.\r\n2. Optimize the compiler itself to improve output performance for these files.\r\n\r\nThe first option is the one we're using in dotnet/roslyn, and it's also the one we're looking to use for improving inner loop iteration times for builds invoked directly by the Run Tests command inside the IDE.",
          "createdAt": "2021-03-02T22:30:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T22:31:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTI2NzI5NQ=="
        },
        {
          "author": "RussKie",
          "body": "Seems I'm a little late to the party, didn't know this discussion existed. Thank you for doing this 👍 \r\n\r\n> Files with code snippets will remain in the dotnet-api-docs repo, untouched for now. When we backport remarks containing links to those code snippets, the links will be relative to the dotnet-api-docs repo.\r\n\r\nThis concerns me a little, _in the target state_ I'd like code samples to live with the code as well. \r\n\r\nAFAIK back in the days docs were often placed in external files and then linked by xml-doc like so, and perhaps we should continue using this approach for samples.\r\n```xml\r\n<include file='doc\\Control.uex' path='docs/doc[@for=\"Control.GetScaledBounds\"]/*' />\r\n```\r\nPerhaps we can build samples as part of build workflow on a special agent 🤔 \r\n\r\n",
          "createdAt": "2021-03-02T23:16:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T23:40:34Z",
                "user": "gewarren"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-02T23:51:42Z",
                "user": "carlossanlop"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBh-z7w=="
          },
          "updatedAt": "2021-03-02T23:16:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTI5MzE5NQ=="
        },
        {
          "author": "danmoseley",
          "body": ">  is not a scenario I would expect users to follow in order to reach performance targets. \r\n\r\nEven for the F5 scenario? As I recall, the F5 build already takes some shortcuts to be faster. It has to be a system of \"rings\". We would not argue eg that Prefast should run on F5. The question is just which goes in which ring.",
          "createdAt": "2021-03-02T23:31:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T23:31:45Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTI5OTY3Nw=="
        },
        {
          "author": "safern",
          "body": "> Comparing the generated doc files and binplacing he right one is File I/O which per library won't be measurable but in total might add to the build times. Consider comparing files with a decent algorithm (might require an extra msbuild task).\r\n\r\nYeah, we were thinking of an extra MSBuild task to compare the files. This would only be validation to make sure that we are producing the right .xml file that will ship side by side to the ref regardless of the OS compilation. This step of course will only run as part of the all configurations build which is where we build for all OSs. \r\n\r\n> Consider that in future we will collapse reference and source projects and if possible account for that in the infrastructure.\r\n\r\nI don't expect that to change significantly this infrastructure but is a good point to consider.",
          "createdAt": "2021-03-02T23:39:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T23:40:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTMwMzExMg=="
        },
        {
          "author": "gewarren",
          "body": "I didn't know about the [`<include>` tag](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/include). @carlossanlop we could use that for lengthy remarks and keep the included XML files in the dotnet/runtime repo?",
          "createdAt": "2021-03-02T23:42:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-03T00:02:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTMwNDIwOA=="
        },
        {
          "author": "ViktorHofer",
          "body": "> Yeah, we were thinking of an extra MSBuild task to compare the files. This would only be validation to make sure that we are producing the right .xml file that will ship side by side to the ref regardless of the OS compilation.\r\n\r\nSounds good.\r\n\r\n> This step of course will only run as part of the all configurations build which is where we build for all OSs.\r\n\r\nIt would also need to run as part of an individual library's build which builds all configurations by default and on which you can do a `dotnet pack` to generate the package.",
          "createdAt": "2021-03-02T23:44:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-02T23:44:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTMwNTI5NQ=="
        },
        {
          "author": "safern",
          "body": "> It would also need to run as part of an individual library's build which builds all configurations by default and on which you can do a dotnet pack to generate the package.\n\nYeah, good point.",
          "createdAt": "2021-03-03T00:01:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-03T00:01:12Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTMxMjQxMA=="
        },
        {
          "author": "carlossanlop",
          "body": "> in the target state I'd like code samples to live with the code as well.\r\n> Perhaps we can build samples as part of build workflow on a special agent\r\n\r\n@RussKie We have discussed the possibility of bringing the code samples to the source code repo, and validate them by building them alongside the unit tests, but the problem is that sending them to MS Docs becomes quite complex, so we decided to move this feature to the Future.\r\n\r\nMeanwhile, area owners are free to decide if they want to keep lengthy remarks, or even whole code snippets (instead of includes), in their triple slash comments. They also have the alternative of moving them to *.md files in dotnet-api-docs (I described that [here](https://github.com/carlossanlop/DocsPortingTool/blob/master/BackportInstructions.md)).\r\n\r\n> `<include file='doc\\Control.uex' path='docs/doc[@for=\"Control.GetScaledBounds\"]/*' />`\r\n\r\nThanks for the suggestion, @RussKie! \r\n\r\n> I didn't know about the `<include>` tag.\r\n\r\nMe neither, @gewarren . Let me do some tests locally to see if the intellisense xml files will publish those `<include>` elements. If they do, then we can open a thread with the Docs dev team to ask them if mdoc is capable of handling those, and if not, then ask for a feature request to handle them.",
          "createdAt": "2021-03-03T00:01:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-03T00:03:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTMxMjY4MQ=="
        },
        {
          "author": "iSazonov",
          "body": "From my experience in PowerShell repo processing docs in dev workflow is annoying and slow down dev process.\r\nObviously .Net team will have to add more CI checks for docs (to check syntax, gramma, cross links, external links and so on). This will lead to many negative consequences.\r\nIf only a line of code has been changed in a PR, then it makes no sense to rebuild all the documentation. And vice versa, if one typo in the documentation has been fixed, there is no point in compiling the entire code.\r\nIt is already clear that additional files are required to place the examples. Other additional files may be needed to support new features.\r\n\r\nCurrently we have async doc process in PowerShell. If we created a PR in the PowerShell repo and we need to update a documentation, then we add a link to the new issue / PR in the PowerShell-Docs repo. After the PR in the PowerShell repo is merged we can continue in the PowerShell-Docs repo. This gives freedom to both developers and doc writers and simplifies the process.\r\n\r\nMSFT PowerShell team has great plans for improve the process in the year. .Net team could look the experience.\r\nThey plan to enhance PlatyPS convertor to support new doc schema and markdig so that convert source md file to traditional xml format. After updating all infrastructure they want exclude old xml files at all.\r\nWhile this is different from .Net, it has a lot in common. The approach of MSFT PowerShell team opens up opportunities for introducing new features in the documentation.\r\nI would seriously consider making the .Net process asynchronous, placing the documentation in separate files (.csdoc ?) that would allow converting them to any format (traditional XML, HTML, Jupiter notebook, etc.).\r\nIf .Net team has decided to do this laborious work, then why not convert the documentation into something more convenient and extensible?\r\n",
          "createdAt": "2021-03-03T06:09:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-03T06:19:48Z",
                "user": "KalleOlaviNiemitalo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-03T07:49:38Z",
                "user": "huoyaoyuan"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBiBF5Q=="
          },
          "updatedAt": "2021-03-03T06:09:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTQ2MzEwNg=="
        },
        {
          "author": "KalleOlaviNiemitalo",
          "body": "> Let me do some tests locally to see if the intellisense xml files will publish those `<include>` elements.\n\nThe XML documentation files output by the C# compiler will contain elements from the included files, rather than `<include>` elements, so the included files will not be needed in further processing.\n\nExcept perhaps if there is a dangling [`xref:` link](<https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#different-syntax-of-cross-reference> \"Different syntax of cross reference — Links and Cross References — Getting Started with DocFX\") and you want the docs build to post a GitHub Checks report back to dotnet/runtime, with a warning that references the original line in the included file… but that would be difficult in any case, as long as you're building the HTML documentation from the compiler-generated XML, which does not refer back to the source lines. I imagine the compiler could be changed to generate some XML processing instructions akin to `#line` if it were important.",
          "createdAt": "2021-03-03T06:44:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-03T06:44:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTQ4MDEyNA=="
        },
        {
          "author": "RussKie",
          "body": "Thank you @iSazonov for the feedback. \r\n\r\nThis is a certainly complex issue - if we place xml-docs near the code than we'd have run 2 build pipelines, but if we don't we likely degrade the developer experience, and hence less likely get quality docs.\r\n\r\nWe can probably be smart about the pipelines, and with some heuristics decide whether to run one of the other, or both by checking git-diff for lines that start with triple-slash. The same mechanism can be used to apply necessary labels on PRs as well.\r\n\r\nI can see an issue with running docs outside PRs as well. What if the markup is broken? How long does it take to detect it? Who's going to fix it?\r\n",
          "createdAt": "2021-03-04T08:42:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-04T08:42:55Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDQzNjA1Mw=="
        },
        {
          "author": "MSDN-WhiteKnight",
          "body": "But if documentation is in triple slash comments, could the docs build be separated from code build? To my understanding, if we enable `GenerateDocumentationFile` property, the compiler would build both the assembly and documentation, validating that cref's in triple-slash actually bind to symbols available in current scope. Additional build task can be created to validate markdown in remarks, but the C# compilation still would have to run on every change in `summary`, `returns` etc., because only compiler can produce the list of valid symbols in given context. ",
          "createdAt": "2021-03-04T10:01:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-04T10:26:21Z",
                "user": "RussKie"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBiNX_w=="
          },
          "updatedAt": "2021-03-04T10:01:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDQ5MTc1OA=="
        },
        {
          "author": "RussKie",
          "body": "I was more alluding to runnable samples that require additional verifications, e.g. like https://github.com/dotnet/docs-desktop/pull/173. ",
          "createdAt": "2021-03-04T10:25:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-04T10:25:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDUwNzcxNQ=="
        },
        {
          "author": "iSazonov",
          "body": "> Thank you @iSazonov for the feedback.\r\n> \r\n> This is a certainly complex issue - if we place xml-docs near the code than we'd have run 2 build pipelines, but if we don't we likely degrade the developer experience, and hence less likely get quality docs.\r\n\r\nI already have an opened PR where MSFT reviewer ask we update XML docs. A problem is that English is not my native language and there was three(!) iteration with three(!) men before we get acceptable result. (I'm not even sure that every English man is capable of writing good documentation that fully complies with the repo standards.)\r\n\r\n_The only way to get good docs is to delegate updating the documentation to a professional writer and do it asynchronously._",
          "createdAt": "2021-03-04T15:18:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-04T15:18:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDY5MzMwOQ=="
        },
        {
          "author": "carlossanlop",
          "body": "Update:\r\n\r\nWe want to emphasize how important it is for us to ensure this effort does not become a ship blocker at any point. One of the main concerns was having a fully working \"source of truth hybrid mode\": having intellisense.xml files generated only for some assemblies, and use them as the source of truth, while other assemblies kept using dotnet-api-docs xmls as their source of truth.\r\n\r\nYesterday, [we tested this](https://github.com/dotnet/dotnet-api-docs/pull/5410) and we are happy to confirm the hybrid mode works:\r\n\r\n@safern created a ref assemblies drop with only two intellisense.xml files: `System.IO.Compression.Brotli` and `System.Numerics.Vectors`. @gewarren created a new test branch in the Docs build system and fed it with the assemblies drop. The output showed that all assemblies kept using their existing docs from dotnet-api-docs xmls, while only those two assemblies updated their docs using the contents from the passed intellisense.xml files.\r\n\r\ncc @jeffhandley @ericstj @danmoseley ",
          "createdAt": "2021-03-11T22:01:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-11T22:44:19Z",
                "user": "danmoseley"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-03-12T03:19:56Z",
                "user": "jeffhandley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-12T03:24:22Z",
                "user": "iSazonov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-12T03:28:02Z",
                "user": "safern"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOBjMTYA=="
          },
          "updatedAt": "2021-03-11T22:01:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzA3ODkxNw=="
        },
        {
          "author": "safern",
          "body": "Another thing to keep in mind here for the hybrid mode for the release if we end up using that mode to avoid blocking a release if not all docs are ported, is to think about the intellisense xml files that we ship with the product are correct and up to date. For example:\r\n\r\nWe have `System.Numerics.Vectors` using triple slash comments that means the intellisense xml file is produced from its buid; but we have others like `System.Runtime` that their source of truth is the docs repo and we update the docs for an API in System.Runtime.xml, then we need to produce a new intellisense package with the System.Runtime.xml updated, consume that in dotnet/runtime and ship that updated `System.Runtime.xml` as part of the ref pack.\r\n\r\nSo we need to be careful in this scenario that `System.Numerics.Vectors.xml` in the ref pack is the one produced from its build but others like `System.Runtime.xml` in my example that haven't been ported, are shipping the xml file coming from the docs repo and have the latest content. ",
          "createdAt": "2021-03-11T22:32:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-12T03:20:23Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBjMRVA=="
          },
          "updatedAt": "2021-03-11T22:32:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzA5Mzk0Mg=="
        },
        {
          "author": "jeffhandley",
          "body": "Update: I've moved this to Future and we are going to close all of the issues for backporting api docs to triple-slash comments for now. As we concluded early in the .NET 7.0 release cycle, we need to invest more into the DocsPortingTool to set this effort up for success. When we're able to revisit this, we will open new issues per area again.",
          "createdAt": "2022-07-08T00:01:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-08T00:01:05Z",
          "id": "IC_kwDODI9FZc5GPLr5"
        },
        {
          "author": "gewarren",
          "body": "> [Remarks] aren't shown in VS IntelliSense.\n\nThis is actually incorrect. If remarks are present, they're shown in IntelliSense. But the way IntelliSense files are generated from the dotnet-api-docs repo, remarks are currently excluded.",
          "createdAt": "2025-01-13T21:09:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-13T21:09:51Z",
          "id": "IC_kwDODI9FZc6aRP9J"
        }
      ],
      "totalCount": 44,
      "endCursor": "Y3Vyc29yOnYyOpHOmkT_SQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/44969",
    "title": "Libraries APIs are fully documented using efficient workflows"
  },
  {
    "author": "GrabYourPitchforks",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2020-11-25T22:03:53Z",
    "body": "We have [a managed implementation of SHA-1](https://github.com/dotnet/runtime/blob/fe80a77dac16de2451be60563123b8fbf8ea8355/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L1569) hanging around for use in `EventSource` and related APIs. We should consider ifdefing it away and relying on the OS's underlying implementation on runtimes where we know an OS implementation exists. This can help compliance, as getting an exemption for SHA-1 for compat purposes is far easier than getting an exemption for carrying our own implementation. There are also some small perf wins.\r\n\r\n<details><summary>Benchmark code below the fold</summary>\r\n<p>\r\n\r\n```cs\r\npublic class Sha1Runner\r\n{\r\n    private byte[] _input;\r\n    private byte[] _digest = new byte[20];\r\n\r\n    [Params(0, 8, 12, 24, 32, 64, 128, 256)]\r\n    public int InputSizeInBytes { get; set; }\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        _input = new byte[InputSizeInBytes];\r\n        RandomNumberGenerator.Fill(_input);\r\n    }\r\n\r\n    [Benchmark(Baseline = true)]\r\n    public byte[] UseManaged()\r\n    {\r\n        Sha1ForNonSecretPurposes sha1 = default;\r\n        sha1.Start();\r\n        sha1.Append(_input);\r\n        sha1.Finish(_digest);\r\n        return _digest;\r\n    }\r\n\r\n    [Benchmark(Baseline = false)]\r\n    public byte[] UseBCrypt()\r\n    {\r\n        SHA1.HashData(_input, _digest);\r\n        return _digest;\r\n    }\r\n\r\n    private struct Sha1ForNonSecretPurposes\r\n    {\r\n        private long length; // Total message length in bits\r\n        private uint[] w; // Workspace\r\n        private int pos; // Length of current chunk in bytes\r\n\r\n        /// <summary>\r\n        /// Call Start() to initialize the hash object.\r\n        /// </summary>\r\n        [SkipLocalsInit]\r\n        public void Start()\r\n        {\r\n            this.w ??= new uint[85];\r\n\r\n            this.length = 0;\r\n            this.pos = 0;\r\n            this.w[80] = 0x67452301;\r\n            this.w[81] = 0xEFCDAB89;\r\n            this.w[82] = 0x98BADCFE;\r\n            this.w[83] = 0x10325476;\r\n            this.w[84] = 0xC3D2E1F0;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Adds an input byte to the hash.\r\n        /// </summary>\r\n        /// <param name=\"input\">Data to include in the hash.</param>\r\n        [SkipLocalsInit]\r\n        public void Append(byte input)\r\n        {\r\n            this.w[this.pos / 4] = (this.w[this.pos / 4] << 8) | input;\r\n            if (64 == ++this.pos)\r\n            {\r\n                this.Drain();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Adds input bytes to the hash.\r\n        /// </summary>\r\n        /// <param name=\"input\">\r\n        /// Data to include in the hash. Must not be null.\r\n        /// </param>\r\n        [SkipLocalsInit]\r\n#if ES_BUILD_STANDALONE\r\n        public void Append(byte[] input)\r\n#else\r\n        public void Append(ReadOnlySpan<byte> input)\r\n#endif\r\n        {\r\n            foreach (byte b in input)\r\n            {\r\n                this.Append(b);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Retrieves the hash value.\r\n        /// Note that after calling this function, the hash object should\r\n        /// be considered uninitialized. Subsequent calls to Append or\r\n        /// Finish will produce useless results. Call Start() to\r\n        /// reinitialize.\r\n        /// </summary>\r\n        /// <param name=\"output\">\r\n        /// Buffer to receive the hash value. Must not be null.\r\n        /// Up to 20 bytes of hash will be written to the output buffer.\r\n        /// If the buffer is smaller than 20 bytes, the remaining hash\r\n        /// bytes will be lost. If the buffer is larger than 20 bytes, the\r\n        /// rest of the buffer is left unmodified.\r\n        /// </param>\r\n        [SkipLocalsInit]\r\n        public void Finish(byte[] output)\r\n        {\r\n            long l = this.length + 8 * this.pos;\r\n            this.Append(0x80);\r\n            while (this.pos != 56)\r\n            {\r\n                this.Append(0x00);\r\n            }\r\n\r\n            unchecked\r\n            {\r\n                this.Append((byte)(l >> 56));\r\n                this.Append((byte)(l >> 48));\r\n                this.Append((byte)(l >> 40));\r\n                this.Append((byte)(l >> 32));\r\n                this.Append((byte)(l >> 24));\r\n                this.Append((byte)(l >> 16));\r\n                this.Append((byte)(l >> 8));\r\n                this.Append((byte)l);\r\n\r\n                int end = output.Length < 20 ? output.Length : 20;\r\n                for (int i = 0; i != end; i++)\r\n                {\r\n                    uint temp = this.w[80 + i / 4];\r\n                    output[i] = (byte)(temp >> 24);\r\n                    this.w[80 + i / 4] = temp << 8;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Called when this.pos reaches 64.\r\n        /// </summary>\r\n        [SkipLocalsInit]\r\n        private void Drain()\r\n        {\r\n            for (int i = 16; i != 80; i++)\r\n            {\r\n                this.w[i] = BitOperations.RotateLeft(this.w[i - 3] ^ this.w[i - 8] ^ this.w[i - 14] ^ this.w[i - 16], 1);\r\n            }\r\n\r\n            unchecked\r\n            {\r\n                uint a = this.w[80];\r\n                uint b = this.w[81];\r\n                uint c = this.w[82];\r\n                uint d = this.w[83];\r\n                uint e = this.w[84];\r\n\r\n                for (int i = 0; i != 20; i++)\r\n                {\r\n                    const uint k = 0x5A827999;\r\n                    uint f = (b & c) | ((~b) & d);\r\n                    uint temp = BitOperations.RotateLeft(a, 5) + f + e + k + this.w[i]; e = d; d = c; c = BitOperations.RotateLeft(b, 30); b = a; a = temp;\r\n                }\r\n\r\n                for (int i = 20; i != 40; i++)\r\n                {\r\n                    uint f = b ^ c ^ d;\r\n                    const uint k = 0x6ED9EBA1;\r\n                    uint temp = BitOperations.RotateLeft(a, 5) + f + e + k + this.w[i]; e = d; d = c; c = BitOperations.RotateLeft(b, 30); b = a; a = temp;\r\n                }\r\n\r\n                for (int i = 40; i != 60; i++)\r\n                {\r\n                    uint f = (b & c) | (b & d) | (c & d);\r\n                    const uint k = 0x8F1BBCDC;\r\n                    uint temp = BitOperations.RotateLeft(a, 5) + f + e + k + this.w[i]; e = d; d = c; c = BitOperations.RotateLeft(b, 30); b = a; a = temp;\r\n                }\r\n\r\n                for (int i = 60; i != 80; i++)\r\n                {\r\n                    uint f = b ^ c ^ d;\r\n                    const uint k = 0xCA62C1D6;\r\n                    uint temp = BitOperations.RotateLeft(a, 5) + f + e + k + this.w[i]; e = d; d = c; c = BitOperations.RotateLeft(b, 30); b = a; a = temp;\r\n                }\r\n\r\n                this.w[80] += a;\r\n                this.w[81] += b;\r\n                this.w[82] += c;\r\n                this.w[83] += d;\r\n                this.w[84] += e;\r\n            }\r\n\r\n            this.length += 512; // 64 bytes == 512 bits\r\n            this.pos = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n|     Method | InputSizeInBytes |       Mean |    Error |  StdDev | Ratio |\r\n|----------- |----------------- |-----------:|---------:|--------:|------:|\r\n| UseManaged |                0 |   354.8 ns |  2.63 ns | 2.34 ns |  1.00 |\r\n|  UseBCrypt |                0 |   283.2 ns |  1.68 ns | 1.49 ns |  0.80 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |                8 |   367.5 ns |  5.09 ns | 4.76 ns |  1.00 |\r\n|  UseBCrypt |                8 |   287.1 ns |  1.42 ns | 1.26 ns |  0.78 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |               12 |   329.7 ns |  2.29 ns | 2.03 ns |  1.00 |\r\n|  UseBCrypt |               12 |   285.9 ns |  1.22 ns | 1.02 ns |  0.87 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |               24 |   352.7 ns |  2.24 ns | 2.09 ns |  1.00 |\r\n|  UseBCrypt |               24 |   292.6 ns |  1.75 ns | 1.63 ns |  0.83 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |               32 |   362.8 ns |  3.31 ns | 3.09 ns |  1.00 |\r\n|  UseBCrypt |               32 |   288.2 ns |  1.95 ns | 1.53 ns |  0.80 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |               64 |   597.5 ns |  3.44 ns | 3.22 ns |  1.00 |\r\n|  UseBCrypt |               64 |   373.3 ns |  2.31 ns | 2.16 ns |  0.62 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |              128 |   885.1 ns |  7.33 ns | 6.50 ns |  1.00 |\r\n|  UseBCrypt |              128 |   453.9 ns |  3.26 ns | 3.05 ns |  0.51 |\r\n|            |                  |            |          |         |       |\r\n| UseManaged |              256 | 1,450.3 ns | 11.29 ns | 9.42 ns |  1.00 |\r\n|  UseBCrypt |              256 |   603.9 ns |  3.42 ns | 2.85 ns |  0.42 |",
    "number": 45237,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-27T23:19:07Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "teo-tsirpanis",
          "body": "Should this issue be closed?",
          "createdAt": "2020-11-27T19:22:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-27T19:22:41Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNDk1OTgzNQ=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "No, the issue is still valid.",
          "createdAt": "2020-11-28T00:25:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2020-11-28T00:25:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDczNTAxNzI0Mw=="
        },
        {
          "author": "teo-tsirpanis",
          "body": "Will do it.",
          "createdAt": "2023-10-06T21:36:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-06T21:36:13Z",
          "id": "IC_kwDODI9FZc5oZK8f"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOaGSvHw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/45237",
    "title": "Consider ifdefing away Sha1ForNonSecretPurposes on Windows"
  },
  {
    "author": "adamsitnik",
    "labels": [
      "area-Meta",
      "test-enhancement",
      "discussion"
    ],
    "createdAt": "2021-01-11T14:10:33Z",
    "body": "#46774 has shown, that there are some Fire&Forget tasks that can throw an unnoticed exception when we introduce a bug in BCL (see https://github.com/dotnet/runtime/pull/46807#issue-552754169 for details)\r\n\r\nThis is of course very rare as we try to avoid Fire&Forget tasks, but anyway it is possible (at least for the `MemoryCache` tests).\r\n\r\nI wonder whether there is anything that we have done in the past to detect such issues? \r\n\r\nIf not, should we do something about it? Like for example extending xunit test runner to report a failure on `TaskScheduler.UnobservedTaskException` event? (I don't know if it's currently possible, it's just a hypothetical example to start a discussion)\r\n\r\n```cs\r\n[Fact]\r\npublic void ThrowingFireAndForgetThatPasses()\r\n{\r\n    Schedule(new object());\r\n\r\n    static void Schedule(object obj)\r\n    {\r\n        Task.Factory.StartNew(state =>\r\n        {\r\n            string text = (string)state; // fails\r\n            Console.WriteLine(text);\r\n        }, obj, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\r\n    }\r\n}\r\n```\r\n\r\n@stephentoub @eerhardt ",
    "number": 46808,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-01-06T15:54:19Z",
          "user": "IGx89"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOCsI68A=="
    },
    "updatedAt": "2023-01-06T15:59:48Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @safern, @viktorhofer\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n#46774 has shown, that there are some Fire&Forget tasks that can throw an unnoticed exception when we introduce a bug in BCL (see https://github.com/dotnet/runtime/pull/46807#issue-552754169 for details)\r\n\r\nThis is of course very rare as we try to avoid Fire&Forget tasks, but anyway it is possible (at least for the `MemoryCache` tests).\r\n\r\nI wonder whether there is anything that we have done in the past to detect such issues? \r\n\r\nIf not, should we do something about it? Like for example extending xunit test runner to report a failure on `TaskScheduler.UnobservedTaskException` event? (I don't know if it's currently possible, it's just a hypothetical example to start a discussion)\r\n\r\n```cs\r\n[Fact]\r\npublic void ThrowingFireAndForgetThatPasses()\r\n{\r\n    Schedule(new object());\r\n\r\n    static void Schedule(object obj)\r\n    {\r\n        Task.Factory.StartNew(state =>\r\n        {\r\n            string text = (string)state; // fails\r\n            Console.WriteLine(text);\r\n        }, obj, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\r\n    }\r\n}\r\n```\r\n\r\n@stephentoub @eerhardt \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>adamsitnik</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`Discussion`, `area-Infrastructure-libraries`, `test enhancement`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-01-11T14:10:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-11T14:10:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1Nzk3NTU3Mw=="
        },
        {
          "author": "stephentoub",
          "body": "> I wonder whether there is anything that we have done in the past to detect such issues?\r\n\r\nNot really; it's up to the test to not eat exceptions.  Even a TaskScheduler.UnobservedTaskException wouldn't necessarily help, as it would only trigger upon finalization happening; there are also some places where product code has done it, in some cases intentionally allowing exceptions to be eaten (for better or worse), which would make such an enabled feature problematic.\r\n\r\nEvery now and then I have done a search to ensure we don't have async void tests, but that's obviously just one manifestation of this.  At the end of the day, it's not all that different from a try/catch{} that any test code could have and similarly eat all exceptions, including assert failures.",
          "createdAt": "2021-01-11T14:37:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-11T14:37:13Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1Nzk5MTg0Mw=="
        },
        {
          "author": "Clockwork-Muse",
          "body": "....note that this is one of the big reasons TDD mandates writing a **failing** test first - if you don't know what failure looks like, you can't be sure of your success.",
          "createdAt": "2021-01-11T17:09:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-11T17:09:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODA5Mjc1OA=="
        },
        {
          "author": "ViktorHofer",
          "body": "Moving out of Infrastructure as this isn't specific to our test infrastructure (MSBuild, xunit aquisition, etc.)",
          "createdAt": "2021-02-23T18:32:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-23T18:32:36Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDQxODU2Ng=="
        },
        {
          "author": "IGx89",
          "body": "+1. We have an Azure App Service webapp occasionally crashing due to an unhandled exception thrown from an async void method. Easy to fix, but while attempting to follow TDD and write a failing test for that situation I've had no luck. Neither TaskScheduler.UnobservedTaskException nor AppDomain.CurrentDomain.UnhandledException catch the exception, and AppDomain.CurrentDomain.FirstChanceException does but catches all exceptions and not just unhandled.\r\n\r\nThe creator of Xunit says it's due to the VSTest engine swallowing the exception (https://github.com/xunit/xunit/issues/157).",
          "createdAt": "2023-01-06T15:58:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-06T15:59:48Z",
          "id": "IC_kwDODI9FZc5R4wLL"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOUeMCyw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/46808",
    "title": "Exceptions in Fire&Forget tasks can be missed by our tests"
  },
  {
    "author": "tannergooding",
    "labels": [
      "area-Meta",
      "size-reduction"
    ],
    "createdAt": "2021-01-13T20:43:58Z",
    "body": "### Issue\r\n\r\n`System.SR` is currently one of the largest types when looking at the trimmer dependency dump. As of `6.0.100-alpha.1.21057.4` it is reported at `23470` bytes.\r\n\r\n`System.SR` exists of over a thousand small properties that are effectively just `internal static string Name => GetResourceString(\"Name\");`. Given that each of these methods actually uses a different string constant, they each take up their own space in metadata and each user ends up having a call to the relevant method.\r\n\r\nI think there are two feasible fixes we could have here...\r\n\r\n### Proposal 1\r\n\r\nWe specially annotate the properties and have the IL Linker inline these at the usage site. Given that every one of these methods is auto-generated today and that they always follow the same format, this should be generally \"safe\" (and I believe similar to the `NonVersionable` attribute).\r\n\r\n### Proposal 2\r\n\r\nWe rework how resources are resolved so that, rather than going through a property (`SR.Name`) we do something like `SR.GetResourceString(nameof(SRID.Name))` instead.\r\n\r\nA local prototype of this (proposal 2) for `S.P.Corelib` in the default `blazor-wasm` project template shows a size reduction in `System.Private.CoreLib.dll.br` of 6.4kb (and a reduction of 26.5kb for the uncompressed `S.P.Corelib`).",
    "number": 46940,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-07-06T22:31:53Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to 'size-reduction': @eerhardt, @SamMonoRT, @marek-safar\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Issue\r\n\r\n`System.SR` is currently one of the largest types when looking at the trimmer dependency dump. As of `6.0.100-alpha.1.21057.4` it is reported at `23470` bytes.\r\n\r\n`System.SR` exists of over a thousand small properties that are effectively just `internal static string Name => GetResourceString(\"Name\");`. Given that each of these methods actually uses a different string constant, they each take up their own space in metadata and each user ends up having a call to the relevant method.\r\n\r\nI think there are two feasible fixes we could have here...\r\n\r\n### Proposal 1\r\n\r\nWe specially annotate the properties and have the IL Linker inline these at the usage site. Given that every one of these methods is auto-generated today and that they always follow the same format, this should be generally \"safe\" (and I believe similar to the `NonVersionable` attribute).\r\n\r\n### Proposal 2\r\n\r\nWe rework how resources are resolved so that, rather than going through a property (`SR.Name`) we do something like `SR.GetResourceString(nameof(SRID.Name))` instead.\r\n\r\nA local prototype of this (proposal 2) for `S.P.Corelib` in the default `blazor-wasm` project template shows a size reduction in `System.Private.CoreLib.dll.br` of 6.4kb (and a reduction of 26.5kb for the uncompressed `S.P.Corelib`).\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>tannergooding</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`size-reduction`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-01-13T20:44:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T20:44:00Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTcyNzk4Mg=="
        },
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-01-13T20:44:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T20:44:03Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTcyODAwOQ=="
        },
        {
          "author": "tannergooding",
          "body": "CC. @vitek-karas, @marek-safar, @agocke, @MichalStrehovsky, @eerhardt, @joperezr ",
          "createdAt": "2021-01-13T20:47:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T20:47:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTcyOTgzNA=="
        },
        {
          "author": "agocke",
          "body": "> We specially annotate the properties and have the IL Linker inline these at the usage site.\r\n\r\nI'm not sure I understand what's being inlined here. Is it the property body into the caller?",
          "createdAt": "2021-01-13T20:54:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T20:54:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTczMzY2Mg=="
        },
        {
          "author": "tannergooding",
          "body": "> I'm not sure I understand what's being inlined here. Is it the property body into the caller?\r\n\r\nYes. Today, if you decompile `S.P.Corelib` and look at say `InvalidOperationException..ctor()`, you will see:\r\n```csharp\r\npublic InvalidOperationException()\r\n    : base(SR.Arg_InvalidOperationException)\r\n{\r\n}\r\n```\r\n\r\nWith proposal 1, you would instead see (the linker having inlined `SR.Arg_InvalidOperationException` due to the proposed special attribute):\r\n```csharp\r\npublic InvalidOperationException()\r\n    : base(SR.GetResourceString(\"Arg_InvalidOperationException\"))\r\n{\r\n}\r\n```\r\n\r\nWith proposal 2, we manually change all the code and it becomes something like:\r\n```csharp\r\npublic InvalidOperationException()\r\n    : base(SR.GetResourceString(nameof(SRID.Arg_InvalidOperationException)))\r\n{\r\n}\r\n```\r\n\r\nThe last is what I manually did locally for a subset of `S.P.Corelib` to see the `6.4kb` of savings in the compressed `S.P.Corelib.br` file.\r\nHowever, the former (`proposal 1`) would functionally achieve the same thing and would likely be more maintainable for any similar situations that might come up in the future.\r\n\r\nI would suggest that it stay internal only and have similar semantics to `NonVersionable` in `Crossgen`.",
          "createdAt": "2021-01-13T21:37:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T21:37:39Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTc1NDkzOA=="
        },
        {
          "author": "danmoseley",
          "body": "Most of our libraries don't call `GetResourceString(string..)` directly. It might be nice if those libraries could specify (simple define) that it should be private, so their code always goes through the strongly typed mechanism. These proposals might make that difficult because it needs to be exposed beyond the SR class. I wonder whether we can avoid that problem?",
          "createdAt": "2021-01-13T22:16:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-13T22:17:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTc3MzEyNw=="
        },
        {
          "author": "jkotas",
          "body": "A very related problem to this one is outlining of the exception throwing into throw helpers. Ideally, we would have all exception throwing goo outlined into a helper methods that enables better code quality and code sharing. We do that manually today in CoreLib (https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/ThrowHelper.cs) and to lesser degree in other libraries too. The manually written ThrowHelpers are bug prone and not linker friendly (the linker is not able to trim unused strings and paths from the manually written ThrowHelpers).\r\n\r\nCan we solve both of these problems together?",
          "createdAt": "2021-01-14T04:48:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T04:51:19Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T07:09:07Z",
                "user": "tannergooding"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-27T01:33:53Z",
                "user": "pentp"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBdz6_Q=="
          },
          "updatedAt": "2021-01-14T04:49:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTkyMzMxMw=="
        },
        {
          "author": "agocke",
          "body": "I think we're blurring the lines between the linker and crossgen here. It's potentially a good reason to merge the two tools in the future",
          "createdAt": "2021-01-14T05:10:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T08:20:57Z",
                "user": "MichalStrehovsky"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBcaUAg=="
          },
          "updatedAt": "2021-01-14T05:10:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTkyOTc2OA=="
        },
        {
          "author": "MichalStrehovsky",
          "body": "This wouldn't have to be restricted to the SR class - if illink can prove the method/property is not a target of reflection, there's no side effects, and inlining would be profitable, illink could inline methods in general (and slap an IgnoreAccessChecks attribute on the assembly to shut up warnings about violating visibility/accessibility checks).\r\n\r\nWith the annotations we added in .NET 5 illink has a pretty good picture of what is visible from reflection.\r\n\r\nAs a cheaper alternative, we could consider illink stripping the properties on the SR class and leaving just the methods. We'll probably get close to half of the expected benefit of inlining with that and such change is pretty cheap (we get rid of the entry in the Property table, the extra name without the `get_` prefix, an entry in the MethodSemantics table).\r\n\r\nProperties are only interesting for reflection and the runtime doesn't care about them. Illink could strip properties on all types where it knows the type is not a target of a `GetProperty(ies)` call.",
          "createdAt": "2021-01-14T07:35:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T08:15:33Z",
                "user": "jkotas"
              },
              {
                "content": "HEART",
                "createdAt": "2021-01-14T08:15:38Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-27T01:35:12Z",
                "user": "pentp"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOBdz7YQ=="
          },
          "updatedAt": "2021-01-14T07:35:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTk4NTY1MA=="
        },
        {
          "author": "marek-safar",
          "body": "I'm wondering if we could use source generators for this during compilation time and do less or no special work in IL linker. We need to get rid of code like this https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/ThrowHelper.cs#L524-L716 anyway and why to rewrite the code if we could generate it as size optimal from the start.\r\n\r\nThere is also the aspect of and resources and the resources accessors duplication between all runtime assemblies which has a size impact too.",
          "createdAt": "2021-01-14T13:04:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-14T13:04:33Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDE4NDE4Mg=="
        },
        {
          "author": "stephentoub",
          "body": "> Ideally, we would have all exception throwing goo outlined into a helper methods that enables better code quality and code sharing. We do that manually today in CoreLib (https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/ThrowHelper.cs) and to lesser degree in other libraries too\r\n\r\nRelated, note that with https://github.com/dotnet/csharplang/issues/2145 / https://github.com/dotnet/csharplang/blob/master/proposals/null-arg-checking.md, which is on track for C# 10, for at least argument null validation the C# compiler will generate code like that used for ThrowHelper.\r\ncc: @jaredpar\r\nIt's only partially related, though, as there aren't custom messages for those.",
          "createdAt": "2021-01-14T14:34:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-14T14:35:27Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDIzNDg5Mw=="
        },
        {
          "author": "jkotas",
          "body": "> I'm wondering if we could use source generators for this during compilation time and do less or no special work in IL linker. We need to get rid of code like this\r\n\r\nHow would you make it linker friendly without losing compactness of the current manually written ThrowHelper?",
          "createdAt": "2021-01-14T15:12:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-14T15:12:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDI1OTM5MQ=="
        },
        {
          "author": "marek-safar",
          "body": "> How would you make it linker friendly without losing compactness of the current manually written ThrowHelper?\r\n\r\nI was thinking about something like this (not sure if it's possible with source generators). \r\n\r\n```c#\r\nclass SomeType\r\n{\r\n    public void Method(int startIndex, int length)\r\n    {\r\n        if (length < 0)\r\n            throw new ArgumentOutOfRangeException(nameof(length), \"Length cannot be less than zero.\");\r\n\r\n        if (startIndex < 0)\r\n            throw new ArgumentOutOfRangeException(nameof(startIndex), \"StartIndex cannot be less than zero.\");\r\n    }\r\n\r\n    // Compiler rewritten/generated version of same method\r\n    public void Method(int startIndex, int length)\r\n    {\r\n        if (length < 0)\r\n            Global.Throw1 ();\r\n\r\n        if (startIndex < 0)\r\n            Global.Throw2 ();\r\n    }\r\n}\r\n\r\nstatic class Global\r\n{\r\n\t// It will be reused when the data match\r\n    public static void Throw1 ()\r\n    {\r\n        throw new ArgumentOutOfRangeException(\"length\", \"Length cannot be less than zero.\");\r\n    }\r\n\r\n    public static void Throw2 ()\r\n    {\r\n        throw new ArgumentOutOfRangeException(\"startIndex\", \"StartIndex cannot be less than zero.\");\r\n    }\r\n}\r\n```",
          "createdAt": "2021-01-14T16:08:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-14T16:08:59Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDI5NTQ0Nw=="
        },
        {
          "author": "tannergooding",
          "body": "Source generators don't currently allow you to replace the contents of a method, only to define new code.",
          "createdAt": "2021-01-14T17:12:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-14T19:01:23Z",
                "user": "jkoritzinsky"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBcfmEg=="
          },
          "updatedAt": "2021-01-14T17:12:22Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDMzNTE5Mg=="
        },
        {
          "author": "eerhardt",
          "body": "@vitek-karas @marek-safar - is this something we should do for 6.0? Or can it be moved to 'Future'?",
          "createdAt": "2021-05-11T19:12:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T19:12:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzOTAyNDI3Mw=="
        },
        {
          "author": "SamMonoRT",
          "body": "Moving to 7.0.0",
          "createdAt": "2021-07-12T20:06:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-12T20:06:52Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3ODU1ODkzMA=="
        }
      ],
      "totalCount": 16,
      "endCursor": "Y3Vyc29yOnYyOpHONF2-0g=="
    },
    "url": "https://github.com/dotnet/runtime/issues/46940",
    "title": "Trimming System.SR"
  },
  {
    "author": "janvorli",
    "labels": [
      "area-Meta",
      "os-linux",
      "os-windows",
      "arch-x64",
      "tracking",
      "User Story",
      "Bottom Up Work"
    ],
    "createdAt": "2021-01-22T01:11:22Z",
    "body": "Recent Intel x64 CPUs support a new security feature called CET (Control-flow Enforcement Technology). We plan to support it in the .NET 6.0.\r\n\r\n## Windows and Linux\r\n- [x] Add Shadow stack popping during stack unwinding.\r\n## Windows\r\n- [x] Add proper compiler and linker options to support CET for the C/C++ code.\r\n- [x] Implement our own version of RtlRestoreContext for exception handling (done on Windows only for now)\r\n- [x] Implement new way of thread suspension using a new user mode APC that would work the same way as on Unix.\r\n- [x] Implement new way of return address hijacking compatible with the CET.\r\n- [x] Make ThreadAbort work with CET enabled\r\n- [X] Make GC stress 4/8 work with CET enabled\r\n- [x]  Enable CI for CET\r\n- [x]  Enable non-strict mode by default\r\n- [ ]  Performance is comparable without CET enabled\r\n- [x] Debugging support is not restricted with CET enabled\r\n\r\n## Linux\r\n- [ ] Add proper compiler options to enable IBT (indirect branch tracing) support and `.note.gnu.property` section to indicate our native runtime binaries are compatible with shadow stack and IBT.\r\n- [ ] Add ENDBR instructions at the beginning of asm helper functions that can be called using indirect jumps or calls.\r\n- [ ] Modify JIT to add ENDBR instructions at the beginning of all methods that can be called via indirect jumps or calls.\r\n- [ ] The Linux work depends on the availability of the CET support in the mainstream Linux kernel. There is a patch that adds some `arch_prctl` operations for the Intel CET.\r\n",
    "number": 47309,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-22T15:10:21Z",
          "user": "jkotas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-22T16:46:10Z",
          "user": "omajid"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-22T16:51:19Z",
          "user": "mangod9"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-23T18:31:50Z",
          "user": "filipnavara"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-01-24T18:02:56Z",
          "user": "dmpe"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-04-28T05:53:43Z",
          "user": "FilipToth"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-26T07:42:34Z",
          "user": "veikkoeeva"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-09-10T21:13:14Z",
          "user": "akhanalcs"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-30T04:20:28Z",
          "user": "colejohnson66"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOC5yj7g=="
    },
    "updatedAt": "2024-08-02T16:50:01Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "tannergooding",
          "body": "Is the AMD shadow stack support the same as Intel CET or is it a different feature/ISA?",
          "createdAt": "2021-01-22T01:29:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-01-23T17:32:53Z",
                "user": "GiorgioG"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-18T17:29:33Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODM-gKQ=="
          },
          "updatedAt": "2021-01-22T01:29:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NTA1MjI0OA=="
        },
        {
          "author": "janvorli",
          "body": "@tannergooding I am not aware of AMD releasing a spec of their shadow stack technology.",
          "createdAt": "2021-01-25T11:09:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-25T11:09:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjczOTkwNg=="
        },
        {
          "author": "tannergooding",
          "body": "@janvorli, AMD published it back in August (at the very least) in preparation of the Zen3 release. Most of their developer manuals can be found here: https://developer.amd.com/resources/developer-guides-manuals/\r\n\r\nThe core information on their shadow stack support, as far as I'm aware, is in Volume 2, Chapter 18: https://www.amd.com/system/files/TechDocs/24593.pdf\r\n\r\n--------------\r\n\r\nAt least comparing to Intel's own manuals (https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html), it looks like they use the same CPUID register/name: `CPUID Fn0000_0007 ECX:CET_SS=1` (bit 7) and `CR4.CET=1` (bit 23). It also looks like at least a handful of the instructions match, so that seems hopeful 😄 ",
          "createdAt": "2021-01-25T16:08:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-01-25T16:08:08Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjkyNDQzNA=="
        },
        {
          "author": "mangod9",
          "body": "Windows functionality is complete, but Linux will be done in 7. ",
          "createdAt": "2021-07-29T18:41:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-29T18:41:58Z",
          "id": "IC_kwDODI9FZc41AsR-"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHONQLEfg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/47309",
    "title": "Epic: Support Intel CET"
  },
  {
    "author": "neeraj9",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2021-02-26T13:41:01Z",
    "body": "There are preview versions of the following available in nuget.org [1], [2]. What is the plan to move them out of preview? What is the timeline for those and how can we track the progress?\r\n\r\n[1] https://www.nuget.org/packages/Microsoft.DotNet.PlatformAbstractions/5.0.0-preview.5.20278.1\r\n[2] https://www.nuget.org/packages/Microsoft.Extensions.DiagnosticAdapter/5.0.0-preview.3.20215.2",
    "number": 48815,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-09-09T08:14:32Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-02-26T13:41:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-26T13:41:04Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjY1NDM1OA=="
        },
        {
          "author": "huoyaoyuan",
          "body": "PlatformAbstractions is removed since preview 6 and no longer produced (#36707). To avoid confusion, they could be hidden for all the 5.0-previewx versions.",
          "createdAt": "2021-02-26T14:19:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-03-09T18:32:46Z",
                "user": "joperezr"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBizxIQ=="
          },
          "updatedAt": "2021-02-26T14:19:10Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjY3NDg0MA=="
        },
        {
          "author": "huoyaoyuan",
          "body": "DiagnosticAdapter is also removed: https://github.com/dotnet/extensions/pull/3165",
          "createdAt": "2021-02-26T14:21:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-26T14:21:19Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjY3NjA0Mg=="
        },
        {
          "author": "neeraj9",
          "body": "Thanks @huoyaoyuan . What is the replacement for DiagnosticAdapter?",
          "createdAt": "2021-02-26T18:08:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-02-26T18:08:47Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjgwNzQ1Mw=="
        },
        {
          "author": "joperezr",
          "body": "As @huoyaoyuan suggests, PlatformExtensions is no longer being built so you should just use the last stable NuGet (3.1.6) in case you need it. For DiagnosticAdapter, @JunTaoLuo do you know if there is a replacement for it or is it just that we are not going to ship/change DiagnosticAdapter in the future?",
          "createdAt": "2021-03-09T18:37:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-09T18:37:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5NDI4Mzg5Mg=="
        },
        {
          "author": "pentp",
          "body": "`DiagnosticAdapter` is still used in many projects and there's no direct replacement available AFAIK.",
          "createdAt": "2025-09-09T08:14:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-09-09T08:14:18Z",
          "id": "IC_kwDODI9FZc7C3_Ec"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOwt_xHA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/48815",
    "title": "When will Microsoft.DotNet.PlatformAbstractions move out of preview for 5.0.0"
  },
  {
    "author": "blackcross86",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-03-14T17:10:30Z",
    "body": "```\r\nNAME=\"ROSA Desktop Fresh R12\"\r\nVERSION=\"2019.1 (EE 2019.1 Desktop)\"\r\nID=\"rosa\"\r\nVERSION_ID=\"2019.1\"\r\nBUILD_ID=\"20201213.21\"\r\nPRETTY_NAME=\"ROSA Desktop Fresh R12 2019.1 (EE 2019.1 Desktop)\"\r\nVERSION_CODENAME=\"(EE 2019.1 Desktop)\"\r\nANSI_COLOR=\"1;43\"\r\nCPE_NAME=\"cpe:/o:rosa:rosalinux:2019.1\"\r\nHOME_URL=\"http://www.rosalinux.com//\"\r\nBUG_REPORT_URL=\"https://bugs.rosalinux.ru/\"\r\nSUPPORT_URL=\"https://forum.rosalinux.ru/\"\r\nPRIVACY_POLICY_URL=\"https://www.rosalinux.ru/products/rosa-fresh/\"\r\n\r\n```\r\n![2021-03-14_20-17](https://user-images.githubusercontent.com/74768319/111077556-640e0000-8502-11eb-80b0-3d7faedd5a87.png)\r\n",
    "number": 49607,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2021-04-06T06:33:48Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-03-14T17:10:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-14T17:10:34Z",
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODk0Mjk0NA=="
        },
        {
          "author": "joperezr",
          "body": "@janvorli sorry if you are not the right person to look into this, but I'm not sure who else can help provide info on new platform bring-up. If not you, do you mind tagging someone that can help out here?",
          "createdAt": "2021-03-31T17:51:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-31T17:51:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTI4Nzk0MQ=="
        },
        {
          "author": "janvorli",
          "body": "@blackcross86 here are the instructions:\r\nhttps://github.com/dotnet/corefx/tree/release/3.1/pkg/Microsoft.NETCore.Platforms#adding-a-new-os\r\nPlease let me know if you need more details.",
          "createdAt": "2021-03-31T18:20:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-31T18:20:37Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTMwNjUwNA=="
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOMFuOCA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/49607",
    "title": "How to make a RID"
  },
  {
    "author": "AndyAyersMS",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-03-30T17:10:11Z",
    "body": "Now that we have static managed PGO data flowing around, we need a way to track and audit the data:\r\n* updates to the managed PGO data should be visible as commits in the repo, so we can reproduce old build behaviors and have a marker point in the perf history for when updates happen\r\n  * also would be useful for perf investigations to be able to mix and match data (say using newer data in an old build)\r\n* we should be able to determine the build that was used to gather the PGO data, and (perhaps) audit changes made to the collection process\r\n  * in particular the time lag between collection and consumption is interesting. If this value gets too large we might need some way to raise priority of investigation on why there is no new data\r\n* it would be good to develop tooling that can compare sets of PGO data to describe in some manner how similar/different the data is, and generate and make those delta summaries available\r\n* it would be good to have some characterization of how much PGO data gets rejected in crossgen due to versioning lag (native PGO tools produce similar reports)\r\n* Perf lab runs should do some non-PGO runs alongside the now default PGO runs (say via `COMPlus_JitDisablePgo=1`), so we can\r\n  * keep tabs on the overall impact of static PGO\r\n  * more easily spot when a perf change is solely due to a change in static PGO data\r\n\r\ncc @davidwrighton @DrewScoggins",
    "number": 50432,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2021-03-31T17:35:48Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-03-30T17:10:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-30T17:10:14Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDQzMTA1MQ=="
        },
        {
          "author": "davidwrighton",
          "body": "@AndyAyersMS updates the the managed pgo data are handled by dependency flow, so they are already visible as commits. Updates are visible as changes to eng/Versions.props  and in particular when optimizationwindows_ntx64MIBCRuntimeVersion or the other related variables change. However, the rest of your points are quite interesting.",
          "createdAt": "2021-03-30T22:48:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-30T22:48:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDYyODcxMw=="
        },
        {
          "author": "AndyAyersMS",
          "body": "@davidwrighton thanks. So I take it we have not had an update since the initial checkin, and that data was gathered on 3/17?\r\n\r\nhttps://github.com/dotnet/runtime/blame/082af357d39f9df590fb4b123bcb6c21b0dd4369/eng/Versions.props#L120-L122\r\n\r\nHave you any ideas on a reasonable cadence for updates? \r\n\r\n@DrewScoggins another possibility for what we were seeing in some of those perf tests is that the FX code (at the IL level) has shifted away from what it was back on 3/17 or thereabouts, and so PGO data no longer applies. Currently we can only tell this is happening indirectly.\r\n\r\nIn general if we don't update PGO data we expect to see a decline in perf over time as mismatches between what was measured and what is being prejitted or jitted  become more and more pronounced. For any given test the jumps may be at particular points; if we could \"integrate\" all these over a lot of test we'd see more of a smooth overall degradation.",
          "createdAt": "2021-03-31T00:42:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-04-01T17:15:29Z",
                "user": "DrewScoggins"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBlut0A=="
          },
          "updatedAt": "2021-03-31T01:12:11Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDY2OTY3Mw=="
        },
        {
          "author": "davidwrighton",
          "body": "Correct, we haven't had an update since initial checkin. @Lxiamail is working on the build so that we'll have regular flow, but the build infrastructure has proven difficult to update. Once that is up and running it should be straightforward to receive updates about once a day.",
          "createdAt": "2021-03-31T16:57:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-03-31T16:57:15Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTI1MTQ3Nw=="
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOMFq3FQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/50432",
    "title": "Managed PGO auditing"
  },
  {
    "author": "filipnavara",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-05-11T15:33:43Z",
    "body": "Follow up to https://github.com/dotnet/runtime/issues/41299, https://github.com/dotnet/runtime/issues/52482#issuecomment-838290365, https://github.com/dotnet/runtime/issues/52482#issuecomment-838596561\r\n\r\nXamarin consumes the .NET static native libraries (System.Native, System.Security.Cryptography.Native.Apple, Mono runtime, etc.) through NuGet packages. For the iOS/tvOS scenarios Xamarin links the static libraries from the pack into the final executable. In some cases additional linker flags may need to be specified to the final linking command to ensure all the libraries are linked properly.\r\n\r\nThe current situation on the Xamarin side is that it [hard-codes some of the linker flags](https://github.com/xamarin/xamarin-macios/blob/5ef7fb27847109973998f8a925f3e7cdd1972829/dotnet/targets/Xamarin.Shared.Sdk.targets#L627-L629). Frameworks seem to be imported thanks to references from the managed bindings and finally the rest works through the [auto-link magic](https://milen.me/writings/auto-linking-on-ios-and-macos/).\r\n\r\nOn single-file host scenarios on the dotnet/runtime side `extra_libs.cmake` files are sprinkled around the repository that do the linker flag resolution and plug into the single-file pipeline.\r\n\r\nI'd like some feedback from the stakeholders whether there is some solution to improve the status quo. For example, if we could produce a linker response file (.rsp) with the necessary linker flags as part of the dotnet/runtime static library builds. The response files could be consumed by the single file host instead of the `extra_libs.cmake` files, shipped in the runtime NuGets and also consumed as part of the MSBuild pipeline on the Xamarin side.\r\n\r\ncc @VSadov @rolfbjarne @jkoritzinsky @AaronRobinsonMSFT @grendello @akoeplinger \r\n",
    "number": 52603,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-11T16:39:09Z",
          "user": "rolfbjarne"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOBqboBw=="
    },
    "updatedAt": "2021-05-13T16:43:08Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-05-11T15:33:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T15:33:48Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzODY5MDA3MQ=="
        },
        {
          "author": "VSadov",
          "body": "The purpose of `extra_libs.cmake` is to have requirements of a particular library in one place - so that anything that builds or statically links the library could just include a corresponding `extra_libs.cmake` file. \r\n\r\nI am not familiar enough with .rsp to tell if it is expressive enough to replace `extra_libs.cmake`. \r\nIf response file could serve the same purpose and used in more scenarios, like in NuGets, it could be a better option.  ",
          "createdAt": "2021-05-11T17:04:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T17:04:38Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzODgzNzc0OQ=="
        },
        {
          "author": "filipnavara",
          "body": "The problem with `extra_libs.cmake` is two-fold. First, it requires CMake and possibly may even use some CoreCLR specific functions from other included CMake files. Second, it's not shipped along with the static libraries.\r\n\r\nThe `.rsp` files were merely an example suggestion of something that would be easily consumable by both CMake and MSBuild. It's just a file with linker parameters, no additional build time logic. I am not sure if there is something that needs to be explicitly dynamic (in case of replacing `extra_libs.cmake` it would not be a big deal since both the consumer and producer run on the same machine within the same pipeline; it would be problem for the NuGets though).\r\n\r\nAlternative approach could be leaving pretty much everything as-is on the dotnet/runtime side but produce a .props files in the runtime NuGet that sets MSBuild property/item group with linker flags in a variable recognizable by Xamarin.",
          "createdAt": "2021-05-11T17:13:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T17:13:25Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzODg0OTMyNw=="
        },
        {
          "author": "VSadov",
          "body": "The reason why these are cmake-specific is purely historical.\r\nEvery .NET native library has a set or requirements - build time dependencies, headers, linker settings. We used to have them hardcoded in the libraries cmake files. When we started also linking the libraries into the host, we realized that now we would need to hardcode in two places and, who knows, maybe in more places later. So the parts that deal with dependencies and requirements were factored out.\r\n\r\nIt might not be the only solution and not even the best solution. It just happen to work. I would be open to alternatives.",
          "createdAt": "2021-05-11T17:32:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T17:33:18Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzODg3ODQyMQ=="
        },
        {
          "author": "filipnavara",
          "body": "> So the parts that deal with dependencies and requirements were factored out.\r\n\r\nThat's totally sensible and I am really happy that it was done. I am just pointing out that Xamarin is a third place where these things are hard-coded at the moment (or work by sheer luck) and that it would be nice to find a solution where that hard-coding is removed. I'm not exactly sure what the best solution would be though.\r\n\r\nMaybe it makes sense to state the requirements first?\r\n- Consumable by both MSBuild and CMake tooling\r\n- Transportable through NuGet for linking the static libraries on a different machine than where the static libraries were produced",
          "createdAt": "2021-05-11T17:38:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-11T17:38:42Z",
          "id": "MDEyOklzc3VlQ29tbWVudDgzODg4NjgzMQ=="
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOMgBlrw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/52603",
    "title": "Passing of linker flags in the runtime NuGet packs"
  },
  {
    "author": "HavenDV",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2021-05-23T09:03:27Z",
    "body": "Without studying the LINQ source code and documentation for specific methods, it is sometimes difficult to quickly grasp the algorithmic complexity of a specific method.\r\nI think it would add more clarity to the development.\r\nI also admit that this can be a very small problem and you can close this issue.\r\n\r\nExample: I had to dig into the source code to find out the LINQ complexity of the `Contains` method for the `HashSet` class. It could be either O(n) or O(1) if LINQ contains a check for a specific class.\r\n\r\nFor LINQ, I suggest adding a list of classes for which optimization is supported. An example for the `Contains` method:\r\nFor `ICollection<T>`, the complexity is the complexity of the original collection.\r\nFor other cases, the complexity is O(n).\r\n\r\nAlternatively, add a separate extension method for the `ICollection<T>` type with a separate description, and specify the complexity for the original method.",
    "number": 53142,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T09:17:34Z",
          "user": "i3arnon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T12:36:18Z",
          "user": "Frulfump"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T16:28:01Z",
          "user": "angshuman-agarwal"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T16:37:30Z",
          "user": "bcronje"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T16:38:17Z",
          "user": "LogicalPhallacy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T17:21:56Z",
          "user": "stevenaw"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T17:31:18Z",
          "user": "Zoxive"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T18:05:43Z",
          "user": "michalczerwinski"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T19:02:29Z",
          "user": "KSemenenko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T19:17:04Z",
          "user": "cjbhaines"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T19:41:57Z",
          "user": "Daniel-Svensson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-23T20:49:01Z",
          "user": "aluhrs13"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T00:11:03Z",
          "user": "giladfrid009"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T08:07:17Z",
          "user": "Mijalski"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T08:59:05Z",
          "user": "ForNeVeR"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T11:04:47Z",
          "user": "KrzysztofBranicki"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T11:30:13Z",
          "user": "hez2010"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T13:26:45Z",
          "user": "Takoooooo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-24T13:50:24Z",
          "user": "HavenDV"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-05-26T19:02:09Z",
          "user": "kronic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-06-03T12:26:13Z",
          "user": "Enderlook"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-28T21:20:53Z",
          "user": "N0D4N"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-02-21T20:06:08Z",
          "user": "deeprobin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-07T09:42:38Z",
          "user": "Tragetaschen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-19T05:08:24Z",
          "user": "WeihanLi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-30T09:23:53Z",
          "user": "StijnOttenVMT"
        }
      ],
      "totalCount": 26,
      "endCursor": "Y3Vyc29yOnYyOpHODFIr6g=="
    },
    "updatedAt": "2021-11-01T18:31:47Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-05-23T09:03:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-23T09:03:29Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjUyOTQzMw=="
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @eiriktsarpalis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nWithout studying the LINQ source code and documentation for specific methods, it is sometimes difficult to quickly grasp the algorithmic complexity of a specific method.\r\nI think it would add more clarity to the development.\r\nI also admit that this can be a very small problem and you can close this issue.\r\n\r\nExample: I had to dig into the source code to find out the LINQ complexity of the `Contains` method for the `HashSet` class. It could be either O(n) or O(1) if LINQ contains a check for a specific class.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>HavenDV</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-05-23T15:31:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-23T15:31:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjU4MTMzNg=="
        },
        {
          "author": "GrabYourPitchforks",
          "body": "FWIW, I believe it would be _extremely_ difficult to provide this information reliably. LINQ is an abstraction around arbitrary code, and the algorithmic complexity of any LINQ method is going to depend on the algorithmic complexity of the underlying enumeration.\r\n\r\nTake `Enumerable.Any<T>(IEnumerable<T>)` as an example. The complexity is _O(1)_ if it wraps a known collection type. But it's _O(?)_ if it wraps a generic `IEnumerable<T>`, as it depends on the implementation of `IEnumerator<T>.MoveNext()`. For most collection types this should be fairly fast, but what if you have the following?\r\n\r\n```cs\r\nIEnumerable<T> theEnumerable = GetEnumerable();\r\nIEnumerable<T> reversed = theEnumerable.Reverse();\r\nbool isNonEmpty = reversed.Any(); // what's the runtime of this method?\r\n\r\nprivate IEnumerable<T> GetEnumerable()\r\n{\r\n    while (condition)\r\n    {\r\n        yield /* ... */;\r\n    }\r\n}\r\n```\r\n\r\nThis could be _O(n)_ (because the _Reverse_ operation must be eagerly enumerated in its entirety). It could be _O(n ln n)_ (if the call to `GetEnumerable` returned an enumerable wrapped within an _OrderBy_ clause). It could be worse. And so on.\r\n\r\nI think there's definite value to documenting the algorithmic complexity of operations on other collection operations: `List<T>`, `HashSet<T>`, `Dictionary<TKey, TValue>`, `string`, `T[]`, `MemoryExtensions`, etc. But those are known quantities because we fully control the code being executed; or at least we control _enough_ of the code being executed that we can define the complexity in terms of the parameters passed in. But when you have something like LINQ that's fundamentally an abstraction, I hesitate to make anything that could be construed as a guarantee.",
          "createdAt": "2021-05-23T18:07:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T18:12:20Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T18:52:40Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T18:58:45Z",
                "user": "stephentoub"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T19:39:06Z",
                "user": "Frulfump"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T19:53:22Z",
                "user": "Tornhoof"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T20:11:34Z",
                "user": "wilka"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T20:44:54Z",
                "user": "kiapanahi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-23T21:49:28Z",
                "user": "aluhrs13"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T00:12:00Z",
                "user": "giladfrid009"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T01:15:07Z",
                "user": "wzchua"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T04:37:08Z",
                "user": "strangeman375"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T05:52:31Z",
                "user": "zlatanov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T09:05:52Z",
                "user": "eiriktsarpalis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T10:50:30Z",
                "user": "WhiteBlackGoose"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-25T06:36:37Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-07T09:43:34Z",
                "user": "Tragetaschen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-22T17:09:37Z",
                "user": "jgh07"
              }
            ],
            "totalCount": 17,
            "endCursor": "Y3Vyc29yOnYyOpHODbkvaA=="
          },
          "updatedAt": "2021-05-23T18:08:23Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjYwMjQwMQ=="
        },
        {
          "author": "jmarolf",
          "body": "This might make more sense as a tooling feature. Language services could know if the IEnumerable being called is implemented in the framework or not",
          "createdAt": "2021-05-23T20:36:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-23T20:36:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjYyMTE2MA=="
        },
        {
          "author": "HavenDV",
          "body": "For LINQ, I suggest adding a list of classes for which optimization is supported. An example for the `Contains` method:\r\nFor `ICollection<T>`, the complexity is the complexity of the original collection.\r\nFor other cases, the complexity is O(n).\r\n\r\nAlternatively, add a separate extension method for the `ICollection<T>` type with a separate description, and specify the complexity for the original method.",
          "createdAt": "2021-05-23T23:23:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-23T23:30:35Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY0MTQ3NQ=="
        },
        {
          "author": "stephentoub",
          "body": "It's much more complex than just the original data type.  LINQ operators flow information from one to the other, and the sequence of operators can impact the algorithmic complexity of the operation.  For example, OrderBy might generally be O(n log n), but it can end up being O(n) for example if you have OrderBy(...).First(...).  Cataloguing all possible combinations, in concert with various inputs and their characteristics, in concert with all the various modes of consumption, would make trying to document all possible algorithmic complexities an uphill battle, as Levi says, and also something difficult to reason about.  I do not believe it's worth while.",
          "createdAt": "2021-05-24T01:51:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-06-05T19:06:14Z",
                "user": "AndreyAkinshin"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOBtiD9Q=="
          },
          "updatedAt": "2021-05-24T01:51:56Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY3ODA2OA=="
        },
        {
          "author": "poke",
          "body": "I believe a rough outline, similar to how [Python does it in their wiki](https://wiki.python.org/moin/TimeComplexity) would be very useful. It doesn't need to attempt to be complete, and still could list some good-to-know corner cases (e.g. Contains on sets, or the OrserBy.First optimization).\r\n\r\nI don't think this should be on the LINQ method's own doc page, simply because then there would be an expection that it's both complete and accurate, but maybe we can collect this and place it as some aside article into the docs.",
          "createdAt": "2021-05-24T02:13:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-24T02:13:40Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY4NDU0Mw=="
        },
        {
          "author": "davidfowl",
          "body": "I think it would be good to provide a best effort doc for the operations. I don't know if it needs to be 100% precise, maybe we can leave room for some nuance by saying there are optimizations depending on the operations chained or the collection type. I don't know if *not* documenting it because its not perfect is useful...",
          "createdAt": "2021-05-24T02:35:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-24T11:06:40Z",
                "user": "KrzysztofBranicki"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-05-25T06:42:31Z",
                "user": "Dreamescaper"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOBsC7ng=="
          },
          "updatedAt": "2021-05-24T02:35:26Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY5MDU5NA=="
        },
        {
          "author": "stephentoub",
          "body": "Does it really help?  For example, Enumerable.Contain's documentation already states that it will delegate to ICollection.Contains if the source implements that, otherwise it'll enumerate.  OrderBy performs a sort, and any reasonable implementation is going to have average O(n log n) complexity in the common case (if we're not trying to document the complete matrix).  I'm just not clear what the effort yields.",
          "createdAt": "2021-05-24T02:41:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-24T02:41:32Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY5MjI0MQ=="
        },
        {
          "author": "HavenDV",
          "body": "Side note - my proposal is rather aimed at giving the \"average\" developer a better understanding of what they are using. Because I'm not sure if the average developer would go through the documentation for the sake of optimization. Therefore, I mean exactly the built-in xml documentation.\r\nIt is also sometimes useful to quickly brush up on knowledge.",
          "createdAt": "2021-05-24T02:57:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-24T02:57:24Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY5Njc4Nw=="
        },
        {
          "author": "davidfowl",
          "body": "I would read this thread https://www.reddit.com/r/dotnet/comments/npno3k/new_linq_extensions_in_net_6_and_benchmarks/. It has some discussion around the Big O of some of these methods. FWIW this doesn't belong in the doc comments IMO just a table would be enough of the various operations with various optimizations made to some specific collection types.",
          "createdAt": "2021-06-03T07:34:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-06-03T07:34:44Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg1MzY0OTcxNQ=="
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHOMuGpMw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/53142",
    "title": "Add Big O notation to API docs"
  },
  {
    "author": "yaakov-h",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-05-24T02:24:03Z",
    "body": "Lifting this out of the discussion at https://github.com/dotnet/designs/pull/217:\r\n\r\n## Overview\r\n\r\n.NET apps, at the very end of the day, have to communicate with native APIs. Not everything is done in managed code. Many third-party libraries and SDKs are written in code that gets compiled to native CPU instructions, and its not just C/C++ code, there is also a trend now to rewrite common libraries in Rust.\r\n\r\nSome platforms have a concept of \"fat binaries\" or \"universal binaries\", which are binaries that contain CPU instructions for multiple CPUs.\r\n\r\nIn Apple's environments this has been a feature since NeXTSTEP 3.1, and has been critical in the migration from PowerPC processor to Intel processors, from Intel 32-bit to Intel 64-bit, and again now from Intel processors to Apple Silicon (Arm). It has also been used heavily (though relatively quietly) in iPhone OS/iOS/iPadOS as Apple have moved through armv6, armv7, armv7s and arm64.\r\n\r\nThough I'm not familiar with the details, https://github.com/dotnet/sdk/issues/16896 suggests that Windows now has a similar mechanism to produce universal binaries.\r\n\r\nAs it currently stands I believe that the .NET Runtime does not take this into consideration when searching for files when attempting to load native binaries, which results in extra development effort or wasted resources.\r\n\r\n## Use-Case\r\n\r\nLet's say I have a really cool library named Foo, as all great things are named. For Windows I would generally produce a x86 foo.dll and a x64 foo.dll. For Linux I would generally produce a i386 libfoo.so and a x86-64 libfoo.so.\r\n\r\nFor macOS, there is no need to follow this pattern. I can produce a single `libfoo.dylib` that contains x86 code, x86_64 code, and arm64e code all in the same file. For iOS it is similar but with different platforms.\r\n\r\nPackage managers or proprietary 3rd-party SDKs may ship in this format, so this becomes input for the .NET SDK and .NET Runtime.\r\n\r\nAs it stands, I believe there are only two ways to consume such a binary, neither of which are satisfactory:\r\n\r\n### 1. Duplicate the binary:\r\n\r\nI can take the existing `libfoo.dylib` and copy it into multiple locations. I don't know the runtime paths off the top of my head but for a NuGet package I would need to copy it to:\r\n\r\n- runtimes/osx-x64/native/libfoo.dylib\r\n- runtimes/osx-arm64/native/libfoo.dylib\r\n\r\nThis is wasteful as it consumes:\r\n\r\n- additional disk space when unpacked\r\n- additional disk space when packaged, as ZIP files (`.nupkg`) do not apply compression across multiple entries,\r\n- additional network transfer (see above, additional disk space when packaged)\r\n\r\n### 2. Split the binary:\r\n\r\nI can take the existing `libfoo.dylib` and use `lipo` to split it into multiple slices. I can then place each of these slices at `runtimes/osx-<arch>/native/libfoo.dylib`.\r\n\r\nThis requires additional effort on the consumer's part to subvert the native operating system's capabilities and split the binary into separate files just so that .NET's loader will find them in the correct locations.\r\n\r\n## Proposal\r\n\r\nI would like to suggest that .NET should be able to consume universal binaries as-is, without duplication or splitting. In the example above, I expect there would be a universal RID defined for each platform (e.g. `osx` or `osx-universal`, `ios` or `ios-universal`, etc.) and I can place the native assembly in that folder.\r\n\r\nThen, when .NET attempts to load the universal binary, the native operating system dynamic library loader should automatically select the correct architecture slice to match the CPU architecture of the .NET runtime process, as it does for any other application/platform/runtime.",
    "number": 53156,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-24T15:40:52Z",
          "user": "kyle-seongwoo-jun"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-11T01:42:51Z",
          "user": "say25"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-16T12:42:32Z",
          "user": "jzebedee"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-24T17:39:19Z",
          "user": "kalikin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-04-23T04:03:37Z",
          "user": "dahlia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-07-23T11:15:48Z",
          "user": "yamachu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-07T07:00:29Z",
          "user": "Rjvs"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-09-01T05:46:05Z",
          "user": "jakerdy"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-29T11:24:12Z",
          "user": "adadurov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-07-13T19:32:33Z",
          "user": "prvyk"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHODGzHJQ=="
    },
    "updatedAt": "2022-07-06T22:31:46Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-05-24T02:24:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-05-24T02:24:06Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjY4NzMzNg=="
        },
        {
          "author": "krwq",
          "body": "cc: @terrajobst ",
          "createdAt": "2021-07-12T17:53:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-12T17:53:31Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3ODQ3NTQ0OQ=="
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHONFx4uQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/53156",
    "title": "Runtime Identifier for Universal Binaries"
  },
  {
    "author": "bartonjs",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2021-07-02T22:35:43Z",
    "body": "Consider lessons from https://github.com/eiriktsarpalis/dim-versioning-issues/, and other corner case discovery.\r\n\r\nMainly the concerns would be the impact of DIMs on existing (any previous stable version) interfaces.\r\n\r\nDIMs on new interfaces are only a concern when that interface is also applied to an existing type.  So also consider that.",
    "number": 55106,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-08-11T02:39:34Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "MichalStrehovsky",
          "body": "It's kind of covered by the set of rules added in https://github.com/dotnet/corefx/pull/41949 but could be spelled out for clarity (this looks to be a case of:\r\n* adding a default implementation\r\n* of interface method from a different interface\r\n* to an existing interface).\r\n\r\nIt might be better to just spell out when it's safe to add a default implementation, because it rarely is.",
          "createdAt": "2021-07-04T20:37:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-07-04T20:37:50Z",
          "id": "MDEyOklzc3VlQ29tbWVudDg3MzY1ODEwMw=="
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHONBL29w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/55106",
    "title": "Document the breaking change concerns with Default Interface Members"
  },
  {
    "author": "buyaa-n",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-08-11T18:17:37Z",
    "body": "In 6.0 we have updated the PCA analyzer to use the guard attributes on the `OperatingSystem.IsXYZ` methods in order to communicate the platform compat relationship between platforms, this approach can be used for macOS/OSX instead of hard coding the relation. This could include the following steps:\r\n1. [ ] Add SupportedOSPlatformGuard(\"OSX\") to the `OperatingSystem.IsMacOS()` to express the relation OSX is MacOS \r\n2. [ ] Figure how to add the MacOS is OSX relation\r\n3. [ ] Figure out how to handle the backward compatibility and remove the hardcoded macOS/OSX relation in the analyzer\r\n\r\n_Originally posted by @jeffhandley in https://github.com/dotnet/runtime/issues/53084#issuecomment-878722932_",
    "number": 57225,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-07-06T22:32:59Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "url": "https://github.com/dotnet/runtime/issues/57225",
    "title": "Model the macOS/OSX alias through the guard attributes "
  },
  {
    "author": "Anipik",
    "labels": [
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2021-08-19T19:55:29Z",
    "body": "It’s time to start looking ahead to ensure we have a smooth landing for our GA release in November! To do this predictably we progressively stabilize starting from this repo upwards. This process will very much like [last year]( https://github.com/dotnet/runtime/issues/38286).\r\n\r\n## Branches\r\n\r\nWe have moved 6.0 development to the **release/6.0** branch. We will be releasing the first live release next month.\r\nThe **main** branch is now open for 7.0 work.\r\n \r\n## Milestones\r\n\r\nThe 6.0 milestone will only be used for critical and blocking issues which are required to complete feature work and make a high quality release. All other issues have been moved to 7.0.\r\n\r\n\r\n## How you can help\r\n\r\nAs always, we welcome any and all bug reports and pull requests We also ask for your understanding when we cannot fix something – and if you believe we mis-prioritized an issue, we welcome [your feedback](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md).\r\n\r\n\r\ncc @ericstj @danmoseley ",
    "number": 57770,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "ROCKET",
          "createdAt": "2021-08-26T03:23:29Z",
          "user": "rgwood"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-08-31T00:38:01Z",
          "user": "danmoseley"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOB4XX4A=="
    },
    "updatedAt": "2021-09-16T11:27:02Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "danmoseley",
          "body": "Changing perversely to Future milestone so it doesn't show up in a list of work remaining.",
          "createdAt": "2021-09-02T02:36:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-02T02:36:26Z",
          "id": "IC_kwDODI9FZc42TbJl"
        },
        {
          "author": "GSPP",
          "body": "I'd be curious what the burn-down chart looks like currently. Is it publicly accessible?",
          "createdAt": "2021-09-14T08:47:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-14T08:47:27Z",
          "id": "IC_kwDODI9FZc42xf9_"
        },
        {
          "author": "danmoseley",
          "body": "@GSPP not sure how useful it is to you, but this is the latest graph -- maybe @jeffschwMSFT has a version that goes back further.\r\n\r\nYou can see the steep drop to RC1 branching as we fixed/moved/closed issues, then it's been more steady since then as there are always incoming, etc. We are on track.\r\n\r\n![image](https://user-images.githubusercontent.com/6385855/133324577-3591bbe0-fca4-4c82-90ef-365d451a4664.png)\r\n",
          "createdAt": "2021-09-14T19:53:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-14T19:54:34Z",
                "user": "jeffschwMSFT"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-16T11:26:24Z",
                "user": "GSPP"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-01T12:43:00Z",
                "user": "aepot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-12T14:29:07Z",
                "user": "esben2000"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-14T07:56:27Z",
                "user": "tonyqus"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOB-Qe8g=="
          },
          "updatedAt": "2021-09-14T19:53:35Z",
          "id": "IC_kwDODI9FZc42zfNy"
        },
        {
          "author": "danmoseley",
          "body": "the thin line is issues marked 'blocking-release' -- which we're using to distinguish the must fix issues.",
          "createdAt": "2021-09-14T19:54:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-14T19:54:39Z",
          "id": "IC_kwDODI9FZc42zfYW"
        },
        {
          "author": "jeffschwMSFT",
          "body": "![image](https://user-images.githubusercontent.com/9561583/133325153-a5798909-89bc-461c-840f-c11781aa2830.png)\r\n",
          "createdAt": "2021-09-14T19:56:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-16T11:26:52Z",
                "user": "GSPP"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-01T12:57:00Z",
                "user": "aepot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-14T07:55:37Z",
                "user": "tonyqus"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB-QebA=="
          },
          "updatedAt": "2021-09-14T19:56:57Z",
          "id": "IC_kwDODI9FZc42zfug"
        },
        {
          "author": "GSPP",
          "body": "That's cool to see. Thanks!",
          "createdAt": "2021-09-16T11:27:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T11:27:02Z",
          "id": "IC_kwDODI9FZc424pGh"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHONuKRoQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/57770",
    "title": "Path to .NET 6"
  },
  {
    "author": "briangru",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-09-16T20:23:09Z",
    "body": "### Description\r\n\r\nHey guys, please help me out.  My CLR loader knowledge is from 2012, and I need to be reeducated.  I'm happy to swing by campus if you guys still eat lunch in Building 18 or 25.\r\n\r\nOne of my .NET 5 executables worked earlier this week, but broke now due to a FileNotFoundException for System.Security.Cryptography.Csp version 5.  In the intervening time we installed the latest Windows Update and VS builds, and I am sure one of them included a new .NET 5 update, version 5.0.10.  This may have broken it.  \r\n\r\nThere is no version 5 of this assembly outside of .NET 5 internal \"packages\", as far as I can tell.  There is a version in this directory, I guess it's the new GAC for .NET Core, but only for reference assemblies?\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\5.0.0\\ref\\net5.0\r\n\r\nNote - if we have installed something like .NET 5.0.10, should that update these libraries?  There is no 5.0.10 reference assembly directory.\r\n\r\nI copied the reference assembly (which has no code!) to my application's directory and of course the loader was able to find the file.  My app even seemed to work.  (I changed the .NET Framework's loader to explicitly throw an exception if we stupidly loaded a reference assembly for execution, as opposed to the reflection-only loader context, but that is exactly what I'm doing and it doesn't fail.  I guess my error check didn't translate over to .NET Core, or the loader is now more complicated than I think.)  But my file copying hack doesn't seem like a smart thing to do.  And I don't know if the code was returning something intelligent, vs. maybe null or just being a noop.\r\n\r\nI looked at the System.Security.Cryptography.Csp Nuget package and added a reference to it in my project.  Building this was disappointing for two reasons:\r\n1) The assembly version number in the Nuget package is 4:2:1:0\r\n2) VS did not copy the DLL to the output directory.  Perhaps it did this because the Nuget package contains NET 4.6, 4.61 and 4.6.2 versions of this binary ONLY.  No .NET Standard 2.1 build exists, nor a .NET 5 version.\r\n\r\nMy code:\r\n```\r\n        private static String GenerateRandomToken()\r\n        {\r\n            byte[] bytes = new byte[Constants.TokenLength];\r\n            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\r\n                rng.GetNonZeroBytes(bytes);\r\n            return Convert.ToBase64String(bytes);\r\n        }\r\n```\r\n\r\nRelevant parts of the stack are here:\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\nFile name: 'System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n   at FlexCharging.EnergyNet.AccountServerV3.GenerateRandomToken()\r\n\r\n\r\n### Configuration\r\n\r\nThis is a .NET 5 app running on Windows Server 2019 (an Azure Hyper-V image of Windows).  WinVer says Version 1809, build 17763.2183.\r\n\r\nHere's my .NET installation status.  Tell me if there's some dotnet --downloadAllMissing.NETTeamPackages option I should regularly run, or a dotnet --deleteObsolete.NETCoreBuilds.\r\n\r\n```\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\5.0.0\\ref\\net5.0>dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.401\r\n Commit:    4bef5f3dbf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.401\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.10\r\n  Commit:  e1825b4928\r\n\r\n.NET SDKs installed:\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nYes this worked earlier this week.  Broken by either VS 16.11.3 or maybe .NET 5 build, version 5.0.10 perhaps?\r\n",
    "number": 59224,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-04-21T04:41:51Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-09-16T20:23:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T20:23:12Z",
          "id": "IC_kwDODI9FZc426K9Q"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @GrabYourPitchForks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\r\n\r\nHey guys, please help me out.  My CLR loader knowledge is from 2012, and I need to be reeducated.  I'm happy to swing by campus if you guys still eat lunch in Building 18 or 25.\r\n\r\nOne of my .NET 5 executables worked earlier this week, but broke now due to a FileNotFoundException for System.Security.Cryptography.Csp version 5.  In the intervening time we installed the latest Windows Update and VS builds, and I am sure one of them included a new .NET 5 update, version 5.0.10.  This may have broken it.  \r\n\r\nThere is no version 5 of this assembly outside of .NET 5 internal \"packages\", as far as I can tell.  There is a version in this directory, I guess it's the new GAC for .NET Core, but only for reference assemblies?\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\5.0.0\\ref\\net5.0\r\n\r\nNote - if we have installed something like .NET 5.0.10, should that update these libraries?  There is no 5.0.10 reference assembly directory.\r\n\r\nI copied the reference assembly (which has no code!) to my application's directory and of course the loader was able to find the file.  My app even seemed to work.  (I changed the .NET Framework's loader to explicitly throw an exception if we stupidly loaded a reference assembly for execution, as opposed to the reflection-only loader context, but that is exactly what I'm doing and it doesn't fail.  I guess my error check didn't translate over to .NET Core, or the loader is now more complicated than I think.)  But my file copying hack doesn't seem like a smart thing to do.  And I don't know if the code was returning something intelligent, vs. maybe null or just being a noop.\r\n\r\nI looked at the System.Security.Cryptography.Csp Nuget package and added a reference to it in my project.  Building this was disappointing for two reasons:\r\n1) The assembly version number in the Nuget package is 4:2:1:0\r\n2) VS did not copy the DLL to the output directory.  Perhaps it did this because the Nuget package contains NET 4.6, 4.61 and 4.6.2 versions of this binary ONLY.  No .NET Standard 2.1 build exists, nor a .NET 5 version.\r\n\r\nMy code:\r\n```\r\n        private static String GenerateRandomToken()\r\n        {\r\n            byte[] bytes = new byte[Constants.TokenLength];\r\n            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\r\n                rng.GetNonZeroBytes(bytes);\r\n            return Convert.ToBase64String(bytes);\r\n        }\r\n```\r\n\r\nRelevant parts of the stack are here:\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\nFile name: 'System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n   at FlexCharging.EnergyNet.AccountServerV3.GenerateRandomToken()\r\n\r\n\r\n### Configuration\r\n\r\nThis is a .NET 5 app running on Windows Server 2019 (an Azure Hyper-V image of Windows).  WinVer says Version 1809, build 17763.2183.\r\n\r\nHere's my .NET installation status.  Tell me if there's some dotnet --downloadAllMissing.NETTeamPackages option I should regularly run, or a dotnet --deleteObsolete.NETCoreBuilds.\r\n\r\n```\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\5.0.0\\ref\\net5.0>dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.401\r\n Commit:    4bef5f3dbf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.401\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.10\r\n  Commit:  e1825b4928\r\n\r\n.NET SDKs installed:\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nYes this worked earlier this week.  Broken by either VS 16.11.3 or maybe .NET 5 build, version 5.0.10 perhaps?\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>briangru</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Security`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-09-16T20:48:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T20:48:08Z",
          "id": "IC_kwDODI9FZc426Op9"
        },
        {
          "author": "jeffschwMSFT",
          "body": "cc @agocke ",
          "createdAt": "2021-09-16T20:48:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T20:48:14Z",
          "id": "IC_kwDODI9FZc426Oqx"
        },
        {
          "author": "bartonjs",
          "body": "Aside from the obvious (inside joke of) replacing the entire body with `throw new PrinterOnFireException();`, things that can make the symptoms go away without actually identifying the problem:\r\n\r\n```diff\r\n        private static String GenerateRandomToken()\r\n        {\r\n            byte[] bytes = new byte[Constants.TokenLength];\r\n-           using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\r\n+           using (RandomNumberGenerator rng = RandomNumberGenerator.Create())\r\n                rng.GetNonZeroBytes(bytes);\r\n            return Convert.ToBase64String(bytes);\r\n        }\r\n```\r\n\r\nOr, if you're targeting the .NET (nee Core) line specifically, you can get fancier:\r\n\r\n```C#\r\n        private static String GenerateRandomToken()\r\n        {\r\n            Span<byte> bytes = stackalloc byte[Constants.TokenLength];\r\n            RandomNumberGenerator.Fill(bytes); // Of course, some zeroes can appear now.\r\n            string ret = Convert.ToBase64String(bytes);\r\n            bytes.Clear(); // if you care.\r\n            return ret;\r\n        }\r\n```",
          "createdAt": "2021-09-16T21:26:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T21:26:26Z",
          "id": "IC_kwDODI9FZc426ViD"
        },
        {
          "author": "agocke",
          "body": "I wouldn't try to work around this, because something fishy seems to be going on.\r\n\r\nThere shouldn't be anything fancy in assembly loading here -- the ref assembly should have a real runtime assembly that should go along with it in this case, no fancy type forwarding or facades.\r\n\r\nAssuming you're using the shared runtime, the files in the .NET 5 shared runtime should be in `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\` directory. If I look in there I find `System.Security.Cryptography.Csp.dll` and it has assembly version `5.0.0` (patch releases don't change assembly version).\r\n\r\n@briangru Can you check if that file is present on your machine as well? If it's not, I think your installation is just broken. If it is, your installation may still be broken, but it's more interesting. 😄 ",
          "createdAt": "2021-09-16T21:40:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T21:40:33Z",
          "id": "IC_kwDODI9FZc426Yif"
        },
        {
          "author": "agocke",
          "body": "Ah, one more thing -- if you have a `<appname>.deps.json` next to your app that you can share, that may indicate the cause as well. If the assembly somehow got dropped, this might lead to failure to load.",
          "createdAt": "2021-09-16T21:41:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T21:42:11Z",
          "id": "IC_kwDODI9FZc426YsI"
        },
        {
          "author": "briangru",
          "body": "Ah.  I do have the right file in C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\.  That is a real binary with \"real\" IL instead of a reference assembly, and the version is correct.  I do have a .deps.json file, which I'll attach here.\r\n[EnergyNetSchedulingServer.deps.ThisIsAJsonFile.txt](https://github.com/dotnet/runtime/files/7181259/EnergyNetSchedulingServer.deps.ThisIsAJsonFile.txt)\r\n\r\n",
          "createdAt": "2021-09-16T22:20:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T22:20:41Z",
          "id": "IC_kwDODI9FZc426eah"
        },
        {
          "author": "briangru",
          "body": "I will try one of Jeremy's suggestions, like maybe some span related code, or possibly replacing the entire method with a PrinterIsOnFireException.  It would be nice to get to the bottom of this though.\r\n\r\nAbsolutely essential historical note: When Sun Microsystems was around in the 1990's, SunOS or Solaris defined several signals standard to Unix for interprocess communication from the command line to something running.  These included SIG_HUP (for hang-up) and SIG_KILL (like sending a control-C, which can be caught & reacted to, like Console.Break). Sun also included a SIG_PRINTER_FIRE.  PrinterIsOnFireException was obviously necessary for interoperability.  I also added YouMoronException, because that just seemed necessary sometimes, and the ASP.NET team seemed to have used it.  \r\n\r\nAnd while I was not involved, to help out our PM, DateTime.Parse(\"Brad's Wedding\") was added to ensure he didn't forget his anniversary.",
          "createdAt": "2021-09-16T22:30:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T22:38:48Z",
          "id": "IC_kwDODI9FZc426fZB"
        },
        {
          "author": "agocke",
          "body": "Huh, this deps.json looks a lot like an app that was compiled for the desktop framework, not .NET 5. What's the `TargetFramework` in your project file?",
          "createdAt": "2021-09-16T23:37:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-16T23:37:48Z",
          "id": "IC_kwDODI9FZc426nG7"
        },
        {
          "author": "briangru",
          "body": "It was originally compiled for .NET 4.5 or 4.6 in 2016, then upgraded to .NET 5.\r\n    <TargetFramework>net5.0</TargetFramework>\r\n",
          "createdAt": "2021-09-17T04:55:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-17T04:55:59Z",
          "id": "IC_kwDODI9FZc427KIO"
        },
        {
          "author": "agocke",
          "body": "I see, in that case it may be an artifact of the porting that causes the problem. The best long-term strategy will be to take a look at your project file and make sure that everything's compatible with .NET 5 and that any extraneous NuGet references are removed. The `deps.json` file isn't supposed to be edited by hand, so if something is going wrong it's likely because the inputs to the SDK are somehow wrong. If you can share it, I might be able to eyeball it. Alternatively, if you can share a binlog I might be able to figure it out from that.\r\n\r\nHowever, I'm curious about one more thing. I'd also expect a `<app>.runtimeconfig.json` next to your app, that should have content almost identical to the following:\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net5.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"5.0.0\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nDo you have that as well?",
          "createdAt": "2021-09-17T05:14:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-17T05:15:15Z",
          "id": "IC_kwDODI9FZc427QaU"
        },
        {
          "author": "briangru",
          "body": "The .runtimeconfig.json file exactly matches what you listed here.\r\n\r\nThere is one oddity - I am using some Nuget packages.  I'm using PushSharp version 4.0.10, and I get a warning message saying it has been restored using a .NET Framework version between 4.6 and 4.8, but not net5.  \r\nThere are other PushSharp Nuget packages, but it's not immediately obvious which to use.  PushSharp.Core?  PushSharp.NetCore2.1?  PushSharp.NETStandard?  Or PushSharpCore.Core?  I realize that's my problem to solve, but you all may want to be aware of the level of fragmentation & confusion that got introduced into the Nuget package ecosystem.  And while VS has a way of marking packages obsolete, there doesn't seem to be any good way of flagging \"this package isn't what you should use for .NET 5 or higher\", except the error message from VS above.  And people seem to be on their own at guessing what the replacement is.  \r\n\r\nWhile this is something that needs to work at another level, have you considered a \"Nuget package forwarder\", even as a manual step so that VS can more aggressively detect & help people migrate?  Kinda like the TypeForwardedToAttribute or a slightly more structured ObsoleteAttribute, only it would be on a Nuget package and work during Nuget package restoration time.  No CLR loader support needed, but if done right, it might reduce your support burden by giving the ecosystem tools to succeed with less handholding.\r\n",
          "createdAt": "2021-09-20T17:30:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-20T17:30:53Z",
          "id": "IC_kwDODI9FZc43BeF7"
        },
        {
          "author": "logicaloud",
          "body": "Possibly related to https://github.com/dotnet/runtime/issues/60144",
          "createdAt": "2024-04-21T04:41:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-04-21T04:41:50Z",
          "id": "IC_kwDODI9FZc57Qa6_"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHOe0Guvw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/59224",
    "title": "FileNotFoundException for System.Security.Cryptography.Csp version 5.  .NET doesn't know to look in C:\\Program Files\\dotnet directory?"
  },
  {
    "author": "eiriktsarpalis",
    "labels": [
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2021-09-29T10:50:25Z",
    "body": "Starting this month, the runtime repo will be trialing the triage role for a small number of community contributors. The goal of this experiment is to expand engagement opportunities for the community and determine if the triage role enables that. At this stage, community triagers will be routing and labelling incoming issues. Longer term, we are hoping to further integrate community contributors in maintainer teams.\r\n \r\nThe following community members have kindly agreed to join the runtime repo as triagers: @huoyaoyuan, @SingleAccretion, and @tmds. All three are highly engaged contributors that have been providing quality input to many .NET repos. We hope that their new triage permissions will help them pursue their passion even more effectively.",
    "number": 59744,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T11:25:20Z",
          "user": "Rekkonnect"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T11:29:51Z",
          "user": "wzchua"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T11:34:08Z",
          "user": "PathogenDavid"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T12:42:42Z",
          "user": "Wraith2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T12:43:53Z",
          "user": "richlander"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T13:51:49Z",
          "user": "ufcpp"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-29T14:39:10Z",
          "user": "vcsjones"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-29T15:05:07Z",
          "user": "jeffschwMSFT"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T15:35:07Z",
          "user": "martincostello"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T15:53:27Z",
          "user": "danmoseley"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-29T15:53:29Z",
          "user": "danmoseley"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T15:53:31Z",
          "user": "danmoseley"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-29T15:53:33Z",
          "user": "danmoseley"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T16:34:55Z",
          "user": "ShreyasJejurkar"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-29T16:34:56Z",
          "user": "ShreyasJejurkar"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-29T16:34:56Z",
          "user": "ShreyasJejurkar"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T16:34:57Z",
          "user": "ShreyasJejurkar"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-29T17:57:08Z",
          "user": "jeffhandley"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-29T17:57:23Z",
          "user": "jeffhandley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-29T17:57:27Z",
          "user": "jeffhandley"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-29T17:57:28Z",
          "user": "jeffhandley"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-29T18:53:34Z",
          "user": "JulieLeeMSFT"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T03:26:36Z",
          "user": "huoyaoyuan"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T10:14:02Z",
          "user": "hoyosjs"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-30T10:42:45Z",
          "user": "ViktorHofer"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T10:46:32Z",
          "user": "antonfirsov"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T10:53:31Z",
          "user": "karelz"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-30T13:53:00Z",
          "user": "lambdageek"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-30T13:53:44Z",
          "user": "dleeapho"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-30T14:02:06Z",
          "user": "aik-jahoda"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T14:05:46Z",
          "user": "kunalspathak"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T14:54:09Z",
          "user": "elinor-fung"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-30T15:19:04Z",
          "user": "eerhardt"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T15:45:25Z",
          "user": "carlossanlop"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-09-30T16:11:48Z",
          "user": "mateoatr"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-09-30T16:11:49Z",
          "user": "mateoatr"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T16:11:51Z",
          "user": "mateoatr"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-09-30T16:11:52Z",
          "user": "mateoatr"
        },
        {
          "content": "HEART",
          "createdAt": "2021-09-30T16:26:07Z",
          "user": "ericstj"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-10-01T02:44:35Z",
          "user": "scalablecory"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-02T13:55:30Z",
          "user": "expcat"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-02T17:28:01Z",
          "user": "tmds"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-04T09:33:52Z",
          "user": "avsorokin"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-04T17:33:47Z",
          "user": "emmairwin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-05T15:18:19Z",
          "user": "AraHaan"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-05T15:18:20Z",
          "user": "AraHaan"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-10-05T15:18:21Z",
          "user": "AraHaan"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-10-05T15:18:21Z",
          "user": "AraHaan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-06T04:05:53Z",
          "user": "hez2010"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-10T15:51:39Z",
          "user": "pedrobsaila"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-10T17:44:31Z",
          "user": "eriawan"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-10T22:10:30Z",
          "user": "lofcz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-11T15:13:26Z",
          "user": "rgwood"
        },
        {
          "content": "HEART",
          "createdAt": "2021-10-11T15:13:28Z",
          "user": "rgwood"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-10-11T15:13:30Z",
          "user": "rgwood"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-10-11T15:13:30Z",
          "user": "rgwood"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-14T11:34:57Z",
          "user": "filipnavara"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-21T02:21:07Z",
          "user": "ericmutta"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-10-26T21:49:05Z",
          "user": "spottedmahn"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-15T21:51:47Z",
          "user": "Aaronontheweb"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-11-18T13:47:08Z",
          "user": "bjsmiley"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-12-01T17:52:48Z",
          "user": "berkansasmaz"
        },
        {
          "content": "HEART",
          "createdAt": "2021-12-01T17:52:49Z",
          "user": "berkansasmaz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2021-12-08T17:48:07Z",
          "user": "HeroMaxPower"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-12-08T17:48:07Z",
          "user": "HeroMaxPower"
        },
        {
          "content": "HEART",
          "createdAt": "2021-12-08T17:48:08Z",
          "user": "HeroMaxPower"
        },
        {
          "content": "ROCKET",
          "createdAt": "2021-12-08T17:48:11Z",
          "user": "HeroMaxPower"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-17T22:51:38Z",
          "user": "YohanSciubukgian"
        },
        {
          "content": "ROCKET",
          "createdAt": "2022-01-26T06:37:51Z",
          "user": "SommerEngineering"
        },
        {
          "content": "HEART",
          "createdAt": "2022-01-26T06:37:53Z",
          "user": "SommerEngineering"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-26T06:37:54Z",
          "user": "SommerEngineering"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-11T13:26:36Z",
          "user": "N0D4N"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-06T03:20:08Z",
          "user": "WeihanLi"
        },
        {
          "content": "HEART",
          "createdAt": "2023-09-06T03:21:03Z",
          "user": "WeihanLi"
        }
      ],
      "totalCount": 74,
      "endCursor": "Y3Vyc29yOnYyOpHOB9reZQ=="
    },
    "updatedAt": "2023-11-09T22:03:04Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "ShreyasJejurkar",
          "body": "This is a great initiative! Hope to see the same for other .NET repo's as well! :) ",
          "createdAt": "2021-09-29T15:08:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-29T15:40:19Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-30T16:11:03Z",
                "user": "mateoatr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-05T15:18:31Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB9CdCA=="
          },
          "updatedAt": "2021-09-29T15:08:59Z",
          "id": "IC_kwDODI9FZc43csPU"
        },
        {
          "author": "richlander",
          "body": "There are community triagers at dotnet/iot and dotnet/roslyn already. Agree, that we should expand the program to other repos.",
          "createdAt": "2021-09-29T15:41:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T15:41:29Z",
          "id": "IC_kwDODI9FZc43czZ1"
        },
        {
          "author": "danmoseley",
          "body": "@ShreyasJejurkar which repos did you have in mind particularly?",
          "createdAt": "2021-09-29T15:53:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T15:53:12Z",
          "id": "IC_kwDODI9FZc43c1zY"
        },
        {
          "author": "ShreyasJejurkar",
          "body": "Aspnetcore, ef and if possible every repo.\r\n\r\nI haven't been selected triage role as of now. But having a triage role is a big achievement I consider. Being a entry level software engineer, I cannot work (because I do not see entry level openings on #ddjl and .NET at careers website) with you all .NET guys. But having a triage role or something similar is a big thing for me and for other people as well, so hope to see this thing spans across repos! 🙌",
          "createdAt": "2021-09-29T16:34:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-09-29T17:58:09Z",
                "user": "jeffhandley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-09-29T17:59:37Z",
                "user": "richlander"
              },
              {
                "content": "HEART",
                "createdAt": "2021-10-05T15:18:43Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOB9CdMg=="
          },
          "updatedAt": "2021-09-30T04:09:18Z",
          "id": "IC_kwDODI9FZc43c-Nx"
        },
        {
          "author": "danmoseley",
          "body": "@ShreyasJejurkar I passed your comment on to aspnetcore folks. With respect to adding more triagers here, we'll see how it goes. As @eiriktsarpalis mentioned above, I expect we will look for things like consistent engagement, proven expertise (specific or general), and consistently being friendly/inclusive to others in the community as attributes of a great triager. Meanwhile we welcome your contributions of whatever kind!",
          "createdAt": "2021-09-29T17:17:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-29T18:01:03Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-05T15:18:46Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB9CdOw=="
          },
          "updatedAt": "2021-09-29T17:17:29Z",
          "id": "IC_kwDODI9FZc43dGRw"
        },
        {
          "author": "ShreyasJejurkar",
          "body": "@danmoseley sure Dan. Great to see this stuff! Thanks! ",
          "createdAt": "2021-09-29T17:20:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-09-29T17:20:10Z",
          "id": "IC_kwDODI9FZc43dG0S"
        },
        {
          "author": "richlander",
          "body": "We intentionally went with a very small group to start to allow us to fine-tune this model while avoiding people feeling left out. If we'd started with a dozen people, then others would more naturally feel left out. Let's hope that this experiment is a wild success and we can expand this group.",
          "createdAt": "2021-09-29T18:00:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-29T18:17:16Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-29T18:46:28Z",
                "user": "jeffhandley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-30T03:58:48Z",
                "user": "ShreyasJejurkar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-30T08:11:30Z",
                "user": "eiriktsarpalis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-09-30T16:11:40Z",
                "user": "mateoatr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-04T09:35:09Z",
                "user": "avsorokin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-05T15:18:51Z",
                "user": "AraHaan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-10-21T02:22:00Z",
                "user": "ericmutta"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-10T00:49:23Z",
                "user": "WeihanLi"
              }
            ],
            "totalCount": 9,
            "endCursor": "Y3Vyc29yOnYyOpHODMRntg=="
          },
          "updatedAt": "2021-09-29T18:00:51Z",
          "id": "IC_kwDODI9FZc43dQGg"
        },
        {
          "author": "ericstj",
          "body": "Welcome @huoyaoyuan, @SingleAccretion, and @tmds! Thank you so much for your help!",
          "createdAt": "2021-09-30T16:27:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2021-10-04T21:38:20Z",
                "user": "jeffhandley"
              },
              {
                "content": "HEART",
                "createdAt": "2021-10-05T15:18:53Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOB9CdTA=="
          },
          "updatedAt": "2021-09-30T16:27:44Z",
          "id": "IC_kwDODI9FZc43hTlZ"
        },
        {
          "author": "danmoseley",
          "body": "We've had this program in place for a month -- any feedback or thoughts from folks in our repo about where to go from here are welcome. I believe aspnetcore is considering a similar program, but would like to see that it is successful here first. What would success look like?",
          "createdAt": "2021-10-29T19:24:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-29T19:24:32Z",
          "id": "IC_kwDODI9FZc447A6J"
        },
        {
          "author": "AraHaan",
          "body": "I think it was a success, however I think there should be a few more triagers for this repository (for api proposals for when an proposer thinks that their api is ready for review). Also could triagers help triage their own issues as well to help speed things up as well for area owners who might not notice that something they proposed is ready for review?",
          "createdAt": "2022-02-10T13:03:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-10T13:03:46Z",
          "id": "IC_kwDODI9FZc49r0f7"
        },
        {
          "author": "eiriktsarpalis",
          "body": "Please join me in welcoming @teo-tsirpanis, who is the latest community member to join the repo as a community triager! 🎉 ",
          "createdAt": "2022-02-17T12:46:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T12:47:23Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T12:47:59Z",
                "user": "SingleAccretion"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T12:57:40Z",
                "user": "jakobbotsch"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T14:08:53Z",
                "user": "AraHaan"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T14:12:13Z",
                "user": "ShreyasJejurkar"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T15:24:15Z",
                "user": "danmoseley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T15:48:44Z",
                "user": "PathogenDavid"
              },
              {
                "content": "HOORAY",
                "createdAt": "2022-02-17T19:52:39Z",
                "user": "Droppers"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOCPP4Jg=="
          },
          "updatedAt": "2022-02-17T12:46:16Z",
          "id": "IC_kwDODI9FZc4-KZmT"
        },
        {
          "author": "AraHaan",
          "body": "Honestly if I was to join the community triagers I would probably use it only to mark issues that issue owners think as ready for review (which I would have 2 of my own on the list to mark) for whenever the next api review is.\r\n\r\nHowever it would only happen when I have time to look at the repository.",
          "createdAt": "2022-02-17T14:23:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-17T14:26:16Z",
          "id": "IC_kwDODI9FZc4-KvQM"
        },
        {
          "author": "teo-tsirpanis",
          "body": "My understanding is that this is exclusively the prerogative of the area owners themselves and not something the community triagers would do. There was a very simple API suggestion I had made that was left unnoticed and I moved it forward after asking what was stalling it. I wouldn't mark it as ready for review myself no matter how trivial it would be.",
          "createdAt": "2022-02-17T14:30:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-17T14:30:07Z",
          "id": "IC_kwDODI9FZc4-KxEJ"
        },
        {
          "author": "AraHaan",
          "body": "I see",
          "createdAt": "2022-02-17T14:35:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-17T14:35:15Z",
          "id": "IC_kwDODI9FZc4-KyTM"
        },
        {
          "author": "danmoseley",
          "body": "We have added two more triagers -- @am11 and @filipnavara. Both of these community members have a long history of contributions and of helping others in this repo. Please join me in welcoming them too!\r\n\r\nBy the way, you don't need any special permissions to get a notification of a new issue or PR in an area you're interested in. Anyone can add themselves to the list the bot notifies for a particular area -- just offer a PR similar to [this one](https://github.com/dotnet/runtime/pull/66628)\r\n\r\ncc @AaronRobinsonMSFT @vitek-karas ",
          "createdAt": "2022-03-17T16:17:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-03-17T16:22:47Z",
                "user": "vitek-karas"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-17T16:23:30Z",
                "user": "filipnavara"
              },
              {
                "content": "ROCKET",
                "createdAt": "2022-03-17T16:24:11Z",
                "user": "SingleAccretion"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-17T16:24:46Z",
                "user": "am11"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-17T16:26:07Z",
                "user": "teo-tsirpanis"
              },
              {
                "content": "ROCKET",
                "createdAt": "2022-03-17T16:46:43Z",
                "user": "eiriktsarpalis"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-17T17:10:15Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-17T17:32:26Z",
                "user": "AraHaan"
              },
              {
                "content": "ROCKET",
                "createdAt": "2022-03-17T17:32:27Z",
                "user": "AraHaan"
              },
              {
                "content": "HEART",
                "createdAt": "2022-03-18T06:42:21Z",
                "user": "huoyaoyuan"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOCTkaVQ=="
          },
          "updatedAt": "2022-03-17T16:23:19Z",
          "id": "IC_kwDODI9FZc4_1rhT"
        },
        {
          "author": "danmoseley",
          "body": "> I think it was a success, however I think there should be a few more triagers for this repository (for api proposals for when an proposer thinks that their api is ready for review). \r\n\r\n@AraHaan the limiting factor on taking API proposals is the throughput of the API review process itself. Marking 'api-ready-for-review' not only means that the proposal is ready, it means that someone is available to speak to the API at the meetings. You've put your finger on something we'd like to improve one way or another though -- there's about 1,000 API proposals in one shape or another. Some would make worthy API's, some (many?) would not. Some probably should be triaged away as they didn't gather enough momentum. Certainly, interested in thoughts on this.",
          "createdAt": "2022-03-17T17:13:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-17T17:13:43Z",
          "id": "IC_kwDODI9FZc4_19Ct"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "Please welcome @Sergio0694 as our newest triager. Welcome Sergio!",
          "createdAt": "2023-11-09T22:03:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2023-11-09T22:03:58Z",
                "user": "teo-tsirpanis"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-09T22:04:48Z",
                "user": "filipnavara"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-09T22:09:09Z",
                "user": "SingleAccretion"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-09T23:25:02Z",
                "user": "eiriktsarpalis"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-09T23:26:50Z",
                "user": "Sergio0694"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-10T00:48:29Z",
                "user": "WeihanLi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-10T01:36:06Z",
                "user": "danmoseley"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-10T02:03:26Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-10T02:16:47Z",
                "user": "am11"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-14T02:19:51Z",
                "user": "AraHaan"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-14T02:19:53Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 11,
            "endCursor": "Y3Vyc29yOnYyOpHODMhUQA=="
          },
          "updatedAt": "2023-11-09T22:03:04Z",
          "id": "IC_kwDODI9FZc5rklg-"
        }
      ],
      "totalCount": 17,
      "endCursor": "Y3Vyc29yOnYyOpHOa5JYPg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/59744",
    "title": "Community Triagers"
  },
  {
    "author": "MaximLipnin",
    "labels": [
      "area-Meta",
      "help wanted",
      "tracking",
      "os-ios"
    ],
    "createdAt": "2021-10-08T11:30:20Z",
    "body": "Based on library test runs in https://github.com/dotnet/runtime/pull/59503\r\n\r\n- [ ] Microsoft.Extensions.FileProviders.PhysicalFileProviderTests\r\n\r\n- Microsoft.Extensions.FileProviders.PhysicalFileProviderTests.UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetNotExists\r\n- Microsoft.Extensions.FileProviders.PhysicalFileProviderTests.UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetDeleted\r\n- Microsoft.Extensions.FileProviders.PhysicalFileProviderTests.UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink\r\n- Microsoft.Extensions.FileProviders.PhysicalFileProviderTests.UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetChanged\r\n\r\n```\r\n<message><![CDATA[System.UnauthorizedAccessException : Access to the path '/private/var/mobile/Containers/Data/Application/027F40C3-2589-473D-8541-4800824101CB/tmp/xfahk5ff.tnv/zwjqmpn5.ypj' is denied.\\n---- System.IO.IOException : Operation not permitted]]></message>\r\n<stack-trace><![CDATA[   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at System.IO.File.CreateSymbolicLink(String path, String pathToTarget)\r\n   at Microsoft.Extensions.FileProviders.PhysicalFileProviderTests.UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetNotExists(Boolean useWildcard)\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n]]></stack-trace>\r\n```\r\n\r\n- [ ] Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests\r\n\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddArchitectureToExistingGroups\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddParentVersionsToExistingGroups\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddNewGroups\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddVersionsToExistingGroups\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddMajorVersionsToExistingGroups\r\n- Microsoft.NETCore.Platforms.BuildTasks.Tests.GenerateRuntimeGraphTests.CanAddArchitectureAndVersionToExistingGroups\r\n```\r\nSystem.UnauthorizedAccessException : Access to the path '/private/var/containers/Bundle/Application/20F50DD0-94A3-441C-9135-A31FCA194CDF/Microsoft.NETCore.Platforms.Tests.app/CanAddArchitectureAndVersionToExistingGroups.runtime.json' is denied.\\n---- System.IO.IOException : Operation not permitted\r\n```\r\n\r\n- [ ] Microsoft.Extensions.Hosting.Tests.HostTests.CreateDefaultBuilder_SecretsDoesReload\r\n```\r\nSystem.UnauthorizedAccessException : Access to the path '/private/var/mobile/Containers/Data/Application/3D12C305-9DD6-43FC-9155-B802DB4335FA/.microsoft/usersecrets/Microsoft.Extensions.Hosting.Unit.Tests' is denied.\\n---- System.IO.IOException : Operation not permitted\r\n```\r\n\r\n- [ ] System.Tests.AppDomainTests.ExecuteAssembly\r\n```\r\n <message><![CDATA[System.UnauthorizedAccessException : Access to the path '/private/var/containers/Bundle/Application/F619D96B-45D3-4BD0-922B-778BE8E3E0C1/System.Runtime.Extensions.Tests.app/AssemblyResolveTestApp' is denied.\\n---- System.IO.IOException : Operation not permitted]]></message>\r\n          <stack-trace><![CDATA[   at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at System.Tests.AppDomainTests.CopyTestAssemblies()\r\n   at System.Tests.AppDomainTests.ExecuteAssembly()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n----- Inner Stack Trace -----\r\n]]></stack-trace>\r\n```\r\n\r\n- [ ] Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest\r\n- Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_With_SecretsId_Passed_Explicitly\r\n- Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_FindsAssemblyAttribute\r\n- Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_FindsAssemblyAttributeFromType\r\n```\r\n<message><![CDATA[System.UnauthorizedAccessException : Access to the path '/private/var/mobile/Containers/Data/Application/5DB7D0CE-A85B-4B83-B874-253B7837EFCA/.microsoft/usersecrets/d6076a6d3ab24c00b2511f10a56c68cc' is denied.\\n---- System.IO.IOException : Operation not permitted]]></message>\r\n<stack-trace><![CDATA[   at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.SetSecret(String id, String key, String value)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_FindsAssemblyAttributeFromType()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n----- Inner Stack Trace -----\r\n]]></stack-trace>\r\n```\r\n\r\n- [ ] System.Diagnostics.Tests.FileVersionInfoTest.FileVersionInfo_RelativePath_CorrectFilePath\r\n```\r\n          <message><![CDATA[System.UnauthorizedAccessException : Access to the path '/private/var/containers/Bundle/Application/A950EB9A-ADA0-497F-8BC6-43CF23744FAA/System.Diagnostics.FileVersionInfo.Tests.app/kernelbase.dll' is denied.\\n---- System.IO.IOException : Operation not permitted]]></message>\r\n          <stack-trace><![CDATA[   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.StreamWriter.ValidateArgsAndOpenPath(String path, Boolean append, Encoding encoding, Int32 bufferSize)\r\n   at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize)\r\n   at System.IO.StreamWriter..ctor(String path)\r\n   at System.IO.File.WriteAllText(String path, String contents)\r\n   at System.Diagnostics.Tests.FileVersionInfoTest.FileVersionInfo_RelativePath_CorrectFilePath()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n----- Inner Stack Trace -----\r\n]]></stack-trace>\r\n```\r\n\r\n- [ ] Microsoft.Extensions.Configuration.FunctionalTests\r\n- Microsoft.Extensions.Configuration.FunctionalTests.ArrayTests.DifferentConfigSources_Merged_WithOverwrites\r\n- Microsoft.Extensions.Configuration.FunctionalTests.ArrayTests.DifferentConfigSources_Merged_KeysAreSorted\r\n- Microsoft.Extensions.Configuration.Test.ConfigurationTests.GetDefaultBasePathForSources\r\n- Microsoft.Extensions.Configuration.Test.ConfigurationTests.OnLoadErrorWillBeCalledOnJsonParseError\r\n```\r\nSystem.UnauthorizedAccessException : Access to the path '/private/var/containers/Bundle/Application/1E339736-D94F-4E6B-AC7F-994E01D7D1C0/Microsoft.Extensions.Configuration.Functional.Tests.app/error.json' is denied.\\n---- System.IO.IOException : Operation not permitted\r\n```\r\n\r\n- [ ] System.Tests.DoubleTests.ParsePatterns\r\n```\r\n          <message><![CDATA[System.UnauthorizedAccessException : Access to the path '/private/var/containers/Bundle/Application/1516667D-0316-4696-8C59-E73A07BD090E/System.Runtime.Tests.app/ibm-fpgen.txt' is denied.\\n---- System.IO.IOException : Operation not permitted]]></message>\r\n          <stack-trace><![CDATA[   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode)\r\n   at System.Tests.DoubleTests.ParsePatterns()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n----- Inner Stack Trace -----\r\n]]></stack-trace>\r\n```\r\ncc @steveisok ",
    "number": 60168,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-07-06T22:41:58Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "steveisok",
          "body": "In general, we need to tweak theses tests to use paths that are writeable on device.  Depending on the tests are doing, it may be easier to copy the content to `Path.GetTempPath` and use from there.",
          "createdAt": "2021-10-08T11:56:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-08T11:56:11Z",
          "id": "IC_kwDODI9FZc438aMb"
        },
        {
          "author": "ViktorHofer",
          "body": "Moving out of area-Infrastructure-libraries as I believe this doesn't require any infrastructure work from our side.",
          "createdAt": "2021-10-26T09:24:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-10-26T09:24:07Z",
          "id": "IC_kwDODI9FZc44upBW"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOOLqQVg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/60168",
    "title": "[tvOS] Library test suites complain about paths"
  },
  {
    "author": "Evangelink",
    "labels": [
      "api-approved",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2021-11-22T13:30:47Z",
    "body": "VS rule description: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1011?view=vs-2022&redirectedfrom=MSDN&viewFallbackFrom=vs-2015\r\n\r\nI think we should file a separate issue on dotnet\\runtime and allow the runtime team to triage the correct severity/enabled by default state of this ported FxCop rule. @buyaa-n @carlossanlop\r\n\r\n_Originally posted by @mavasani in https://github.com/dotnet/roslyn-analyzers/pull/5356#discussion_r735440377_\r\n\r\nIf I get the green light from you, I will address the few comments made by @mavasani and will wait for your input in term of severity and enabled by default state.",
    "number": 61916,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-02-01T21:05:03Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-11-22T13:30:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-22T13:30:50Z",
          "id": "IC_kwDODI9FZc46JVJL"
        },
        {
          "author": "carlossanlop",
          "body": "The usage is pretty straightforward.\r\n\r\nThe original issue is [here](https://github.com/dotnet/roslyn-analyzers/issues/375).\r\n\r\nThere is already a [PR porting this fixer from FxCop](https://github.com/dotnet/roslyn-analyzers/pull/5356), and it's blocked by having this proposal approved (or not).\r\n\r\nExisting MS Docs for CA1011: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1011?view=vs-2022\r\n\r\n- Suggested category: Design (same as FxCop)\r\n- Suggested severity: Hidden, because it's currently labeled as an analyzer/fixer that can cause a breaking change, and could potentially be noisy.\r\n- Suggested milestone: Future\r\n\r\n### Flag\r\n```cs\r\n        // Before\r\n        public void ReadNextByte(FileStream stream)\r\n        {\r\n            while (stream.ReadByte() != -1) { /*...*/ }\r\n        }\r\n\r\n        // After\r\n        public void ReadNextByte(Stream anyStream)\r\n        {\r\n            while (anyStream.ReadByte() != -1) { /*...*/ }\r\n        }\r\n```\r\n\r\n### Do not flag\r\n```cs\r\n        // Before\r\n        public void ReadHandle(FileStream stream)\r\n        {\r\n            while (anyStream.ReadByte() != -1) { /*...*/ } // ReadByte is available in Stream\r\n            var handle = stream.SafeFileHandle; // But SafeFileHandle is only available in FileStream\r\n        }\r\n```\r\n\r\n### (Maybe) do not flag\r\n\r\nThe alternative to \"not flagging\" is to give the suggestion anyway, but let the user supress it / ignore it\r\n```cs\r\ninterface IResource\r\n{\r\n    string Location { get; }\r\n}\r\n\r\nclass FileResource : IResource\r\n{\r\n    // Location represents a file path\r\n}\r\nclass HttpResource : IResource\r\n{\r\n    // Location represents an HTTP url\r\n}\r\n\r\n// Should not be corrected to IResource\r\nstring GetContent(FileResource res)\r\n{\r\n    return File.ReadAllText(res.Location); // the type encodes information about what the object represents\r\n}\r\n```\r\n",
          "createdAt": "2021-11-23T21:45:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-30T18:54:30Z",
          "id": "IC_kwDODI9FZc46PtA-"
        },
        {
          "author": "bartonjs",
          "body": "[Video](https://www.youtube.com/watch?v=9fAW50_edfM&t=0h50m29s)\n\n* Generally looks good as proposed, but we changed Hidden to IdeSuggestion\r\n\r\nCategory: Design\r\nSeverity: IdeSuggestion",
          "createdAt": "2021-11-30T20:00:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2021-11-30T21:12:23Z",
                "user": "Evangelink"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-12-01T01:14:48Z",
                "user": "carlossanlop"
              },
              {
                "content": "ROCKET",
                "createdAt": "2021-12-04T17:23:43Z",
                "user": "AraHaan"
              },
              {
                "content": "HOORAY",
                "createdAt": "2021-12-04T17:23:43Z",
                "user": "AraHaan"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOCFPaKg=="
          },
          "updatedAt": "2021-11-30T20:03:23Z",
          "id": "IC_kwDODI9FZc46lv2P"
        },
        {
          "author": "carlossanlop",
          "body": "PR implementing this: https://github.com/dotnet/roslyn-analyzers/pull/5356",
          "createdAt": "2022-02-01T21:05:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-02-01T21:05:03Z",
          "id": "IC_kwDODI9FZc49OyQH"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOPTskBw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/61916",
    "title": "Port rule CA1011 - Consider passing base types as parameters"
  },
  {
    "author": "Evangelink",
    "labels": [
      "Epic",
      "area-Meta",
      "code-analyzer",
      "Priority:3",
      "Team:Libraries"
    ],
    "createdAt": "2021-11-23T13:12:23Z",
    "body": "In [roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers) there is a bunch of tickets open related to porting some old FxCop rules. Because most of these are dated from 2015, we were wondering if it would be worth having them under review as their relevance or the context in which they apply may have changed.\r\n\r\nI have tried to filter down the ones related to .NET API but I may have missed or included incorrect ones (if you want to review them all, please look at https://github.com/dotnet/roslyn-analyzers/issues?q=is%3Aopen+label%3AFxCop-Port+-label%3A%22Needs-Fixer%22):\r\n\r\n(tagging @mavasani )\r\n\r\n### Native resources/Interop\r\n- [x] dotnet/roslyn-analyzers#395\r\n- [x] dotnet/roslyn-analyzers#418\r\n- [x] dotnet/roslyn-analyzers#419\r\n- [ ] dotnet/roslyn-analyzers#420\r\n- [ ] dotnet/roslyn-analyzers#421\r\n- [x] dotnet/roslyn-analyzers#423\r\n- [x] dotnet/roslyn-analyzers#424\r\n- [ ] dotnet/roslyn-analyzers#425\r\n- [x] dotnet/roslyn-analyzers#426\r\n- [x] dotnet/roslyn-analyzers#427\r\n- [ ] dotnet/roslyn-analyzers#428\r\n- [x] dotnet/roslyn-analyzers#429\r\n- [ ] dotnet/roslyn-analyzers#430\r\n- [x] dotnet/roslyn-analyzers#431\r\n- [x] dotnet/roslyn-analyzers#479\r\n- [x] dotnet/roslyn-analyzers#480\r\n- [x] dotnet/roslyn-analyzers#530\r\n\r\n### WinForms\r\n- [x] dotnet/roslyn-analyzers#408\r\n- [ ] dotnet/roslyn-analyzers#409\r\n- [ ] dotnet/roslyn-analyzers#545\r\n\r\n### Serialization\r\n- [x] dotnet/roslyn-analyzers#548\r\n- [x] dotnet/roslyn-analyzers#549\r\n- [x] dotnet/roslyn-analyzers#550\r\n- [x] dotnet/roslyn-analyzers#551\r\n\r\n### Others\r\n- [ ] dotnet/runtime#64647\r\n- [ ] dotnet/roslyn-analyzers#378\r\n- [ ] dotnet/roslyn-analyzers#401\r\n- [ ] dotnet/roslyn-analyzers#414\r\n- [ ] dotnet/roslyn-analyzers#438\r\n- [ ] dotnet/roslyn-analyzers#439\r\n- [ ] dotnet/roslyn-analyzers#477",
    "number": 61964,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-01-22T17:14:19Z",
          "user": "maxkoshevoi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-11T11:44:03Z",
          "user": "Frulfump"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHODDos-Q=="
    },
    "updatedAt": "2023-01-25T22:00:19Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2021-11-23T13:12:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-23T13:12:28Z",
          "id": "IC_kwDODI9FZc46NGXS"
        },
        {
          "author": "mavasani",
          "body": "@jmarolf @mikadumont ",
          "createdAt": "2021-11-23T13:29:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-23T13:29:55Z",
          "id": "IC_kwDODI9FZc46NMFm"
        },
        {
          "author": "stephentoub",
          "body": "We should just close any of these that are no longer relevant / stale / etc.\r\n\r\n@AaronRobinsonMSFT / @jkoritzinsky / @elinor-fung to comment on the interop rules.\r\n\r\nI suggest we close all of the serialization ones.  We're in the process of deprecating BinaryFormatter, we're no longer encouraging implementation of ISerializable nor implementing it ourselves on new types, etc. @GrabYourPitchforks\r\n\r\n@merriemcgaw for WinForms.",
          "createdAt": "2021-11-23T15:49:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-11-23T16:08:39Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-22T03:32:35Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCLEuYQ=="
          },
          "updatedAt": "2021-11-23T15:49:46Z",
          "id": "IC_kwDODI9FZc46OAtH"
        },
        {
          "author": "Evangelink",
          "body": "@stephentoub Out of curiosity, are you simply no longer encouraging the implementation of `ISerializable` or shall we go even one step further and have analyzers guarding against (there could be a dotnet version check)?",
          "createdAt": "2021-11-25T14:46:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-11-25T14:46:49Z",
          "id": "IC_kwDODI9FZc46Xobt"
        },
        {
          "author": "merriemcgaw",
          "body": "@RussKie can you look at the WinForms ones and see if they make any sense in the current context?",
          "createdAt": "2021-12-01T23:34:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-01T23:34:22Z",
          "id": "IC_kwDODI9FZc46qQMF"
        },
        {
          "author": "GrabYourPitchforks",
          "body": "@Evangelink Basically, we're no longer marking any new types as `[Serializable]` or applying the `ISerializable` interface. There are some exceptions for the sake of compatibility, but those use cases are definitely in the minority.",
          "createdAt": "2021-12-02T00:23:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-02T00:23:14Z",
          "id": "IC_kwDODI9FZc46qV6P"
        },
        {
          "author": "RussKie",
          "body": "> WinForms:\r\n> \r\n> * [Port FxCop rule CA1300: SpecifyMessageBoxOptions roslyn-analyzers#408](https://github.com/dotnet/roslyn-analyzers/issues/408)\r\n> * [Port FxCop rule CA1301: AvoidDuplicateAccelerators roslyn-analyzers#409](https://github.com/dotnet/roslyn-analyzers/issues/409)\r\n> * [Port FxCop rule CA2232: MarkWindowsFormsEntryPointsWithStaThread roslyn-analyzers#545](https://github.com/dotnet/roslyn-analyzers/issues/545)\r\n\r\nThese look worthy of a port. \r\n\r\nOver the months we had several team discussions and bounced ideas about how we can enhance the developer and end user experiences with various Windows Forms analyzers. I also had an offline thread with @jmarolf @sharwell @mavasani about the same subject, and for the general purpose analyzers (like these) https://github.com/dotnet/roslyn-analyzers looked like a good home.",
          "createdAt": "2021-12-06T02:48:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-06T23:32:56Z",
                "user": "merriemcgaw"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-07T20:45:59Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCJCQDQ=="
          },
          "updatedAt": "2022-02-01T21:56:46Z",
          "id": "IC_kwDODI9FZc46yxmF"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "The Interop team has gone through the list. The below list contains what we think makes sense to port. All others can be closed.\r\n\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/420\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/421\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/425\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/428\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/430",
          "createdAt": "2022-01-07T19:42:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-07T20:46:05Z",
                "user": "Evangelink"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-22T03:34:50Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCLEumg=="
          },
          "updatedAt": "2022-01-07T19:42:32Z",
          "id": "IC_kwDODI9FZc48EBY3"
        },
        {
          "author": "Evangelink",
          "body": "@AaronRobinsonMSFT  Would it be possible to get a short description on why the team thinks the following two rules are not worth being implemented?\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/395\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/530",
          "createdAt": "2022-01-07T20:39:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-07T20:39:58Z",
          "id": "IC_kwDODI9FZc48EK11"
        },
        {
          "author": "Evangelink",
          "body": "@stephentoub @GrabYourPitchforks Could you please confirm that's ok to close all the tickets about serialization?\r\n\r\nThe tickets in the `Other` section are still waiting for review/decision.",
          "createdAt": "2022-01-07T20:47:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-07T20:47:53Z",
          "id": "IC_kwDODI9FZc48EL86"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "@Evangelink Sure. Would you like the comments here or in the specific issues?",
          "createdAt": "2022-01-07T21:05:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-07T21:06:50Z",
          "id": "IC_kwDODI9FZc48EOQP"
        },
        {
          "author": "Evangelink",
          "body": "Maybe directly on the tickets but I am fine here too. The two rules seem to make sense to me (like if you own native or disposable resources you must be disposable, and for the 2nd what's the point of using an interop if the fwk allows for the same fnctionality).",
          "createdAt": "2022-01-08T14:58:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-08T14:58:41Z",
          "id": "IC_kwDODI9FZc48FRhu"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "@Evangelink I've commented on each issue directly.",
          "createdAt": "2022-01-09T15:59:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-01-09T15:59:57Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCJG0xQ=="
          },
          "updatedAt": "2022-01-09T15:59:36Z",
          "id": "IC_kwDODI9FZc48GdBo"
        },
        {
          "author": "stephentoub",
          "body": "> @stephentoub @GrabYourPitchforks Could you please confirm that's ok to close all the tickets about serialization?\r\n\r\nYes, go ahead. Thanks.",
          "createdAt": "2022-01-21T02:05:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-22T20:59:41Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCLGW5Q=="
          },
          "updatedAt": "2022-01-21T02:05:39Z",
          "id": "IC_kwDODI9FZc48rudY"
        },
        {
          "author": "jeffhandley",
          "body": "@buyaa-n & @carlossanlop Please review the analyzers in the 'Other' category to determine if we want to bring those for API Review and include them in our plans. Thanks!",
          "createdAt": "2022-01-22T03:55:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-22T03:55:26Z",
          "id": "IC_kwDODI9FZc48vUcW"
        },
        {
          "author": "jeffhandley",
          "body": "> that's ok to close all the tickets about serialization\r\n\r\nDone",
          "createdAt": "2022-01-22T03:55:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2022-01-22T20:59:39Z",
                "user": "Evangelink"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCLGW4g=="
          },
          "updatedAt": "2022-01-22T03:55:51Z",
          "id": "IC_kwDODI9FZc48vUeK"
        },
        {
          "author": "jeffhandley",
          "body": "We were not able to finish this list. Changing the milestone to Future to keep the epic alive. More of these analyzers will be considered as part of .NET 8 planning.",
          "createdAt": "2022-08-11T04:13:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-11T04:13:56Z",
          "id": "IC_kwDODI9FZc5INo7M"
        }
      ],
      "totalCount": 17,
      "endCursor": "Y3Vyc29yOnYyOpHOSDaOzA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/61964",
    "title": "Port remaining FxCop rules into .NET as Roslyn Analyzers"
  },
  {
    "author": "eiriktsarpalis",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-12-07T19:16:47Z",
    "body": "## Background & Motivation\r\n\r\nAs part of our initiative to improve our responsiveness metrics in dotnet/runtime, this issue outlines a proposal to formalize and document common workflows for issue triage and community pull request reviews. It is based on the hypothesis originally expressed in https://github.com/microsoft/contributor-community-experiments/issues/1, namely that issues and community PRs that go stale tend to do so for the following reasons:\r\n\r\n* Area owners have no good way of tracking what tickets require their immediate attention (versus the ones waiting on feedback from authors or need further discussion). In other words, as an area owner I want to be able to write a query showing all untriaged issues or community pull requests where \"the ball is firmly on my court\".\r\n* We don't have a universal mechanism for closing stale issues or community PRs where action is required from the author. This is covered in part by the `needs more info` label in issues but we have no corresponding automation for duplicate or `question` issues or for PRs that have been reviewed as \"changes requested\".\r\n\r\nAt a high level this is a proposal to:\r\n\r\n* Define and document common workflows and states of the issue triage process and PR review process. This is inspired by aspnetcore's [TriageProcess.md](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md) and VS Code's [Issue Triaging](https://github.com/microsoft/vscode/wiki/Issues-Triaging) documentation. It should be a public document intended to communicate expectations to issue and PR authors (complementing our existing [CONTRIBUTING.md](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md) documentation).\r\n* Use existing labels or introduce new ones to make workflow states queryable.\r\n* Introduce FabricBot rules that assist and automate aspects of the workflows, either by providing automated replies (aka \"canned responses\") when a label is applied manually or pinging/closing tickets that have gone stale.\r\n\r\nIt should be noted that defining triage guidelines or a community PR playbook is not in scope for this particular initiative. In other words a workflow document focuses on _what_ state transitions are to be expected but not _when_ and _why_ such state transitions should be applied by the area owner. While authoring triage/PR review guidelines for area owners is something that we want to eventually add to the repo, it addresses an independent concern and should be a separate document.\r\n\r\nThis proposal was created in consultation with @ericstj, @jeffhandley and @joperezr.\r\n\r\n## Issue Triage workflows\r\n\r\nThe issue triage workflow document would include the following information:\r\n\r\n* An overview of area labels, area owners and the issue labeling bot.\r\n* A definition of \"Triaged\" (e.g. \"an issue is considered triaged if it has been given milestone or has been closed\")\r\n* An overview of common labels applied after triage is complete: `bug`, `enhancement`, `tenet-performance`, `api-suggestion`, etc.\r\n* A definition of the workflow used to automatically close stale issues.\r\n\r\nThe document would also define a diagram such as the following:\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/152024137-b84f68f1-0df9-463b-8c22-e3c10f9f7b45.png)\r\n\r\n## PR review workflows\r\n\r\nWe currently don't have a process defined for community PR reviews. As part of this proposal we would like to introduce the following concepts/policies:\r\n\r\n* Every pull request must have a **PR champion**: an assignee who is an area owner or member of the wider team. The PR champion is accountable for getting the pull request merged in a timely manner, shepherding reviews, addressing CI issues and merge conflicts, hitting the merge button. A PR champion might be the author or a reviewer but these concepts don't necessarily overlap.\r\n* Introduce the concept of **PR triage**: the area owners determine the motivation for the PR, decide whether it aligns with our goals, link any relevant issues and elect a PR champion. This should be an optional step; it should still be possible to immediately review trivial PRs without enforcing a lot of ceremony.\r\n* Introduce a `needs-author-action` label to denote PRs needing more work from the author. PRs with \"Request Changes\" reviews are tagged `needs-author-action` automatically. Stale PRs with `needs-author-action` get pinged automatically after 15 days and gets closed automatically if no further action occurs after another 15 days. The `needs-author-action` concept is a generalization of `needs more info` in issues and it's likely we would want to consolidate the two eventually.\r\n\r\nHere's what a PR review diagram could look like:\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/145090705-816481b5-1e1a-42d2-8538-d17707ce3f9d.png)\r\n\r\ncc @danmoseley @jeffschwMSFT @marek-safar @karelz @JulieLeeMSFT for feedback.",
    "number": 62496,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2021-12-07T20:04:24Z",
          "user": "danmoseley"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-12-07T20:21:03Z",
          "user": "joperezr"
        },
        {
          "content": "HOORAY",
          "createdAt": "2021-12-07T20:32:08Z",
          "user": "jeffhandley"
        },
        {
          "content": "HEART",
          "createdAt": "2021-12-07T20:32:10Z",
          "user": "jeffhandley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-11T14:21:12Z",
          "user": "WeihanLi"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOCShqeA=="
    },
    "updatedAt": "2025-01-17T12:11:04Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n## Background & Motivation\r\n\r\nAs part of our initiative to improve our responsiveness metrics in dotnet/runtime, this issue outlines a proposal to formalize and document common workflows for issue triage and community pull request reviews. It is based on the hypothesis originally expressed in https://github.com/microsoft/contributor-community-experiments/issues/1, namely that issues and community PRs that go stale tend to do so for the following reasons:\r\n\r\n* Area owners have no good way of tracking what tickets require their immediate attention (versus the ones waiting on feedback from authors or need further discussion). In other words, as an area owner I want to be able to write a query showing all untriaged issues or community pull requests where \"the ball is firmly on my court\".\r\n* We don't have a universal mechanism for closing stale issues or community PRs where action is required from the author. This is covered in part by the `needs more info` label in issues but we have no corresponding automation for duplicate or `question` issues or for PRs that have been reviewed as \"changes requested\".\r\n\r\nAt a high level this is a proposal to:\r\n\r\n* Define and document common workflows and states of the issue triage process and PR review process. This is inspired by aspnetcore's [TriageProcess.md](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md) and VS Code's [Issue Triaging](https://github.com/microsoft/vscode/wiki/Issues-Triaging) documentation. It should be a public document intended to communicate expectations to issue and PR authors (complementing our existing [CONTRIBUTING.md](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md) documentation).\r\n* Use existing labels or introduce new ones to make workflow states queryable.\r\n* Introduce FabricBot rules that assist and automate aspects of the workflows, either by providing automated replies (aka \"canned responses\") when a label is applied manually or pinging/closing tickets that have gone stale.\r\n\r\nIt should be noted that defining triage guidelines or a community PR playbook is not in scope for this particular initiative. In other words a workflow document focuses on _what_ state transitions are to be expected but not _when_ and _why_ such state transitions should be applied by the area owner. While authoring triage/PR review guidelines for area owners is something that we want to eventually add to the repo, it addresses an independent concern and should be a separate document.\r\n\r\nThis proposal was created in consultation with @ericstj, @jeffhandley and @joperezr.\r\n\r\n## Issue Triage workflows\r\n\r\nThe issue triage workflow document would include the following information:\r\n\r\n* An overview of area labels, area owners and the issue labeling bot.\r\n* A definition of \"Triaged\" (e.g. \"an issue is considered triaged if it has been given milestone or has been closed\")\r\n* An overview of common labels applied after triage is complete: `bug`, `enhancement`, `tenet-performance`, `api-suggestion`, etc.\r\n* A definition of the workflow used to automatically close stale issues.\r\n\r\nThe document would also define a diagram such as the following:\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/145084944-fcac5f72-354a-4e23-8ace-3da0d9ee144f.png)\r\n\r\n## PR review workflows\r\n\r\nWe currently don't have a process defined for community PR reviews. As part of this proposal we would like to introduce the following concepts/policies:\r\n\r\n* Every pull request must have a **PR champion**: an assignee who is an area owner or member of the wider team. The PR champion is accountable for getting the pull request merged in a timely manner, shepherding reviews, addressing CI issues and merge conflicts, hitting the merge button. A PR champion might be the author or a reviewer but these concepts don't necessarily overlap.\r\n* Introduce the concept of **PR triage**: the area owners determine the motivation for the PR, decide whether it aligns with our goals, link any relevant issues and elect a PR champion. This should be an optional step; it should still be possible to immediately review trivial PRs without enforcing a lot of ceremony.\r\n* Introduce a `needs-author-action` label to denote PRs needing more work from the author. PRs with \"Request Changes\" reviews are tagged `needs-author-action` automatically. Stale PRs with `needs-author-action` get pinged automatically after 15 days and gets closed automatically if no further action occurs after another 15 days. The `needs-author-action` concept is a generalization of `needs more info` in issues and it's likely we would want to consolidate the two eventually.\r\n\r\nHere's what a PR review diagram could look like:\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/145090705-816481b5-1e1a-42d2-8538-d17707ce3f9d.png)\r\n\r\ncc @danmoseley @jeffschwMSFT @marek-safar @karelz @JulieLeeMSFT for feedback.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>eiriktsarpalis</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-12-07T19:16:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-07T19:16:50Z",
          "id": "IC_kwDODI9FZc465rsc"
        },
        {
          "author": "jeffschwMSFT",
          "body": "Several of these elements are defined in this document: https://github.com/dotnet/runtime/blob/main/docs/issues-pr-management.md.  We should consider either merging this document with these proposed resources or enhance the existing one.",
          "createdAt": "2021-12-07T19:45:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T13:16:03Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFuusQ=="
          },
          "updatedAt": "2021-12-07T19:45:54Z",
          "id": "IC_kwDODI9FZc465v1G"
        },
        {
          "author": "jeffschwMSFT",
          "body": "cc @mangod9 @agocke @tommcdon @JulieLeeMSFT ",
          "createdAt": "2021-12-07T19:47:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-07T19:47:03Z",
          "id": "IC_kwDODI9FZc465wAG"
        },
        {
          "author": "danmoseley",
          "body": "Thanks for writing this out. For PR's, we rarely use the Github \"changes requested\" state. We just make comments. \"needs-author-action\" would need to be applied manually -- do you expect that to be applied often? Or just when there's been a pause and we just want to clarify where next action lies?\r\n\r\nOne concern that's been expressed about \"needs-author-action\" workflow on PR's is that sometimes the delay is on the reviewer side. I think we simply need to continue to hold reviewers accountable for being timely as well. We have been doing that with an internal mailer and I think it's improved. As well we've discussed that we could sometimes do better at rejecting PR's early if they're not ones it makes sense to take.\r\n\r\nInterested in any feedback here from our community on the issue and PR workflow here. ",
          "createdAt": "2021-12-07T20:04:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T20:35:07Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFnvSQ=="
          },
          "updatedAt": "2021-12-07T20:04:11Z",
          "id": "IC_kwDODI9FZc465ykE"
        },
        {
          "author": "joperezr",
          "body": ">do you expect that to be applied often? Or just when there's been a pause and we just want to clarify where next action lies?\r\n\r\nI do expect this to have to be applied often, and I do agree with you that we rarely use the changes-requested review option but that is the only way that we thought of for hooking to automation for this. Another option would be to subscribe to PR review events and set this label whenever one non-approving event happens, although that might be too noisy and/or not work for single-comment reviews.\r\n\r\nBasically the idea of the PR automation is to easily tell if the \"ball is on the author's court\" or in ours. So basically to know who is waiting on who, and who is responsible for the next action in order for the PR to move forward. Once the PR is open, then maintainers are expected to review, and that state is denoted by not  having the \"needs-author-action\" label. Once the maintainer reviews the PR, then the label is applied, and so it is clear that we are now waiting on the author to comment/respond/address feedback. This helps to manage better that delay on the reviewer side, as maintainers can easily filter out and see all the PRs where the author is waiting on them (basically all Prs where that label isn't applied).\r\n\r\nWe are open to suggestions on how this could be better expressed/automated, but just wanted to more or less go through the thought process that went on while designing this.",
          "createdAt": "2021-12-07T20:28:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T20:35:52Z",
                "user": "jeffhandley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T21:07:46Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T13:23:01Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCFuzFQ=="
          },
          "updatedAt": "2021-12-07T20:28:31Z",
          "id": "IC_kwDODI9FZc4652Bu"
        },
        {
          "author": "jeffhandley",
          "body": "> One concern that's been expressed about \"needs-author-action\" workflow on PR's is that sometimes the delay is on the reviewer side. I think we simply need to continue to hold reviewers accountable for being timely as well. We have been doing that with an internal mailer and I think it's improved.\r\n\r\nAs @joperezr and @eiriktsarpalis described, we would never have the \"needs-author-action\" label on a PR when the PR is in the reviewers' court. We've also been testing out some private GitHub project boards that area pod/owners could use to show their PRs in a view similar to how we look at issue triage boards. With those tools, the \"which PRs are waiting on us\" efficiency should be significantly improved, and PRs should go stale _because of us_ far less often. The internal mailer is then our backstop only, not the primary mechanism for accountability.\r\n\r\n> As well we've discussed that we could sometimes do better at rejecting PR's early if they're not ones it makes sense to take.\r\n\r\nThe feedback from area owners is that right now this is just too hard to do because we don't have good structure around how/when/why to do that. Formalizing that PRs get _triaged_ before review gives us a familiar mechanism for doing that (by making PR triage very similar to issue triage).",
          "createdAt": "2021-12-07T20:42:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T21:07:44Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T13:16:28Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCFuu-A=="
          },
          "updatedAt": "2021-12-07T20:42:37Z",
          "id": "IC_kwDODI9FZc4653-e"
        },
        {
          "author": "danmoseley",
          "body": "For PR's from regular committers, we today most often add comments (so there's work for the author) but sign off (because from past experience, we're confident they'll address them satisfactorily). For less familiar contributors, we generally don't do that -- we don't mark needs changes, but we don't mark approved either. It sounds like it's that second category that we'd likely more consistently mark needs changes. Seems like a reasonable experiment to me.\r\n\r\n@stephentoub @jkotas any thoughts?",
          "createdAt": "2021-12-07T21:07:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-07T21:07:35Z",
          "id": "IC_kwDODI9FZc4657aR"
        },
        {
          "author": "stephentoub",
          "body": "For regular contributors with merge rights, it's common to leave comments but sign off; after all, that contributor has the ability to merge themselves whenever they need to.  They address the feedback and merge.  There's no need in many cases for someone else to get involved, and I'm not sure we should be adding additional process around that.  I can't tell if that's being suggested or not.\r\n\r\nFor regular contributors without merge rights, today someone with merge permissions needs to come along and merge it anyway, and they're responsible for validating that all changes were successfully addressed.  I'm not sure how the proposed automation helps with that.  Frequently today when I leave comments that do need to be addressed, I simply leave the comments and don't change the state of the PR.  If the request is to _always_ change the state, e.g. to leave comments and then change the state to changes requested, for such contributors that seems ok to try, though I'm a little skeptical of the overhead it'll add to the process.  If I leave a comment here or there, am I required to change the state to changes requested?  What if I'm not the assigned PR champion?  What if it's a question rather than a change actually being requested?  What if someone comments, changes the state to changes requested, and then I suggest that change not be made / offer a reason for why it's the way it is (it's not my PR)? Etc.",
          "createdAt": "2021-12-07T21:16:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T21:20:06Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-17T08:41:59Z",
                "user": "Eli-Black-Work"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCdKhrQ=="
          },
          "updatedAt": "2021-12-07T21:16:57Z",
          "id": "IC_kwDODI9FZc4658oT"
        },
        {
          "author": "danmoseley",
          "body": "There is no reason to necessarily ask anyone to set \"changes requested\" any more than they do today. If they do, needs-author-action would applied; if they don't, they could apply the label manually (exactly as for issues today), or not use it at all. And then see how that experiment goes?",
          "createdAt": "2021-12-07T21:28:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T21:44:10Z",
                "user": "joperezr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T23:09:13Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCFo3ow=="
          },
          "updatedAt": "2021-12-07T21:28:22Z",
          "id": "IC_kwDODI9FZc465-Ij"
        },
        {
          "author": "jkotas",
          "body": "I only use \"changes requested\" when the PR has something very questionable that I really do not want to see merged. It is very rare. \r\n\r\nNote that \"changes requested\" state blocks merging, unless you are elevated to admin. It is mildly annoying when the PR is good to go, but it cannot be merged (without elevating to admin) because the person that flagged it as \"change requested\" is on vacation.",
          "createdAt": "2021-12-07T21:28:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T21:28:58Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T01:42:31Z",
                "user": "jkoritzinsky"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCFpwQg=="
          },
          "updatedAt": "2021-12-07T21:28:28Z",
          "id": "IC_kwDODI9FZc465-Jf"
        },
        {
          "author": "joperezr",
          "body": "yeah, I wouldn't force everyone to start using \"changes requested\" for every review, the only ask in order to better follow the process, would be to make sure that after you are done reviewing and you want to signal that you are now waiting on the author (aka the ball is not on your court any longer) just add the label manually. When the author comments, pushes new commits, or makes any change on the PR, the label will be automatically removed again, signaling you that you should probably take another look.\r\n\r\n>If I leave a comment here or there, am I required to change the state to changes requested?\r\n\r\n@stephentoub the idea here is that this label really is more for you as a maintainer to better manage which PRs are waiting on you, and which ones aren't. The idea here is basically that, if the comments or questions you added means you are done reviewing, and now you want to wait on author's input (whether that be author's commit or just a comment as a response) then you add the label. That will help you better manage the PRs you need to review, as you will be able to easily just filter out all of the PRs which don't have that label to get all of the ones were you are not waiting on author's input.",
          "createdAt": "2021-12-07T21:49:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T23:09:30Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T23:10:12Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCFo39w=="
          },
          "updatedAt": "2021-12-07T21:49:40Z",
          "id": "IC_kwDODI9FZc466A6n"
        },
        {
          "author": "jeffhandley",
          "body": "> The idea here is basically that, if the comments or questions you added means you are done reviewing, and now you want to wait on author's input\r\n\r\nThis should also help other team members quickly/easily see that the ball is in the author's court. I know I've had times when I was unsure if a comment someone else made was \"blocking\" or not. Should I also review? It looks good to me; should I merge it? Wait, who's supposed to be doing what here? All of that should be more clear with the label applied, with or without changes requested.",
          "createdAt": "2021-12-07T23:13:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-07T23:20:27Z",
                "user": "joperezr"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFo7mQ=="
          },
          "updatedAt": "2021-12-07T23:13:37Z",
          "id": "IC_kwDODI9FZc466Lpj"
        },
        {
          "author": "vcsjones",
          "body": "> The issue triage workflow document would include the following information\r\n> Interested in any feedback here from our community on the issue and PR workflow here.\r\n\r\nI would be interested in knowing if or how community triagers can contribute to this workflow.\r\n\r\nIs there an eventual goal for say, triagers to close duplicates where we have _high_ confidence it is a duplicate? What about applying `needs-more-info` where clearly the issue is waiting for input from the author?\r\n\r\nI largely have a decent understanding of things going on in the `area-System.Security`). You do have some active community members that are able to help, and, it would seem useful to define a path which they (we) can contribute their efforts to it. It would probably be non-trivial to define very clear guidelines of what community members can and can't do in that regard, and how to remediate when mistakes are made, but I think an effort worth exploring.",
          "createdAt": "2021-12-08T00:22:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T02:08:04Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFp6Pg=="
          },
          "updatedAt": "2021-12-08T00:22:48Z",
          "id": "IC_kwDODI9FZc466VcC"
        },
        {
          "author": "huoyaoyuan",
          "body": "The triagers should get tagged here since we are doing a part of this job.",
          "createdAt": "2021-12-08T09:21:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2021-12-08T13:06:36Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCFuo4g=="
          },
          "updatedAt": "2021-12-08T09:21:19Z",
          "id": "IC_kwDODI9FZc467Wgu"
        },
        {
          "author": "eiriktsarpalis",
          "body": "Good point, cc @SingleAccretion @tmds",
          "createdAt": "2021-12-08T13:06:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-08T13:06:53Z",
          "id": "IC_kwDODI9FZc467-Dp"
        },
        {
          "author": "eiriktsarpalis",
          "body": "> For regular contributors without merge rights, today someone with merge permissions needs to come along and merge it anyway, and they're responsible for validating that all changes were successfully addressed. I'm not sure how the proposed automation helps with that. \r\n\r\nThat would be a concern addressed by having \"PR champions\" and not with any of the proposed review automation. Ultimately the PR champion is accountable for resolving the PR on time, and it is they that need to keep track of their open PR backlogs. Consequently the `needs-author-action` label and related automation is intended to be used by PR champions and not the casual reviewer that leaves a few comments and moves on. Casual reviewers might still apply the label if appropriate but ultimately it's only there to help champions.\r\n\r\n> It would probably be non-trivial to define very clear guidelines of what community members can and can't do in that regard, and how to remediate when mistakes are made, but I think an effort worth exploring.\r\n\r\nPublishing a set of triage/review guidelines or playbook is something that @ericstj is looking at, and would complement a workflow document very nicely.",
          "createdAt": "2021-12-08T13:46:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-08T13:46:01Z",
          "id": "IC_kwDODI9FZc468E_c"
        },
        {
          "author": "stephentoub",
          "body": "Ok,  so to summarize, nothing would change here for anyone _except_ for a PR's champion who might add that label. No one else need add the label,  no one else need \"request changes\", etc. Yes?\r\n\r\nBy whom and when in the flow is a champion assigned?",
          "createdAt": "2021-12-08T13:52:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-08T13:52:42Z",
          "id": "IC_kwDODI9FZc468GKq"
        },
        {
          "author": "eiriktsarpalis",
          "body": "> Yes?\r\n\r\nYep. The goal is to reduce stale PRs and more clearly communicate expectations to community contributors, not change how reviews are being done.\r\n\r\n> By whom and when in the flow is a champion assigned?\r\n\r\nBy the area owners during triage meetings, as early as possible in the PR's lifetime.",
          "createdAt": "2021-12-08T14:01:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-08T14:01:39Z",
          "id": "IC_kwDODI9FZc468H32"
        },
        {
          "author": "eiriktsarpalis",
          "body": "I think this has been mentioned by @joperezr already, but I should clarify that this is not a proposal to mandate \"request changes\" in PR reviews, it is however recognizing that \"request changes\" is github's first-class representation of our `needs-author-action` label. I've generally avoided using \"request changes\" in the past, however I've recently been experimenting with applying it more liberally where it makes sense. I suspect it helps communicating expectations more clearly to the author.",
          "createdAt": "2021-12-08T14:08:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-08T14:08:44Z",
          "id": "IC_kwDODI9FZc468Ja1"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHOOvCWtQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/62496",
    "title": "Documenting Issue Triage and Pull Request workflows"
  },
  {
    "author": "AdaskoTheBeAsT",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2021-12-12T20:29:17Z",
    "body": "HI,\r\nI am working on wrapper to native WkhtmlToX library - library is published with version for Amazon Linux (https://github.com/wkhtmltopdf/packaging/releases/tag/0.12.6-1)\r\n\r\nAs I saw issues with adding amazon linux to runtime was closed (https://github.com/dotnet/runtime/issues/22509) PR (https://github.com/dotnet/corefx/pull/22105).\r\n\r\nHow in dotnet core obtain that information and load native lib targeted at that platform?\r\nThere are some traces that in such  cases custom created runtime.json needs to be distributed in adapter lib - but still I can't find clear documentation about this.",
    "number": 62694,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-07-06T22:34:35Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nHI,\r\nI am working on wrapper to native WkhtmlToX library - library is published with version for Amazon Linux (https://github.com/wkhtmltopdf/packaging/releases/tag/0.12.6-1)\r\n\r\nAs I saw issues with adding amazon linux to runtime was closed (https://github.com/dotnet/runtime/issues/22509) PR (https://github.com/dotnet/corefx/pull/22105).\r\n\r\nHow in dotnet core obtain that information and load native lib targeted at that platform?\r\nThere are some traces that in such  cases custom created runtime.json needs to be distributed in adapter lib - but still I can't find clear documentation about this.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>AdaskoTheBeAsT</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2021-12-12T20:29:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-12T20:29:22Z",
          "id": "IC_kwDODI9FZc47IC-n"
        },
        {
          "author": "danmoseley",
          "body": "Is what you really need to know, whether the lib is available (not what distro you are on)? If so can you just attempt to load it? That would also be more robust.",
          "createdAt": "2021-12-12T22:37:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-12T22:37:13Z",
          "id": "IC_kwDODI9FZc47IHl8"
        },
        {
          "author": "am11",
          "body": "The official .NET (previously .NET Core) packages for linux are agnostic of distro. Only .NET SDK parses that information on runtime for telemetry and `dotnet --info` purposes. In .NET Core v1.x, it was not the case, the packages were made distro specific, In later versions, while we can build runtime with distro-specific RID (`-portable=false` which RHEL uses to build their package via dotnet/source-build repo), the portable version is the default packaging behavior.\r\n\r\nThe difference between portable and non-portable is that the latter allows distros to provide a distro-specifc package. It was realized that majority distros have no such requirement and I think it was because it's a very rare case when someone wants to make a linux package that:\r\n* is available _only_ for a certain distro &&\r\n* should be unsupported (as in unsearchable via nuget package management) on others\r\n\r\nThere is no real need for such overly-restrictive and niche use-case to be baked into the tooling. So it is very unlikely that adding distro-specific RID will give us any benefit in realworld.\r\n\r\nWhen portable, distro-specific, runtime package is selected, the corehost (`dotnet(1)` aka the \"dotnet muxer\") first finds the distro-specific package, then fallsback to it's parent RID in the RID graph, which looks like this: `rhel.6-x64 -> rhel-x64 -> {rhel, linux-x64} -> {linux, unix-x64} -> unix`. In case of distro-agnostic muxer, it also uses the same fallback logic, but the graph starts with (arch-specific) portable RID: `linux-x64 -> {linux, unix-x64} -> unix`.\r\n\r\nTherefore, IMHO, we should rather discourage adding any more distro-specific RIDs in the graph.",
          "createdAt": "2021-12-13T05:26:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-13T05:27:01Z",
          "id": "IC_kwDODI9FZc47IpjD"
        },
        {
          "author": "AdaskoTheBeAsT",
          "body": "Hi,\r\n\r\nI understand reasoning behind .NET trying to limit number of linux flavours specific builds.\r\nAnyway I am not sure what to do if some native lib is build in more granular way - when .net is one distro for some two flavours of linux but native libs are specific for two. If there is a way of using existing mechanism in nuget to have possibility to distinguish between them...",
          "createdAt": "2021-12-23T19:13:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-23T19:13:09Z",
          "id": "IC_kwDODI9FZc47oikj"
        },
        {
          "author": "am11",
          "body": "> lib is build in more granular way\r\n\r\nThere is no limit to granularity. You can have multiple build time configurations `--with-libssl --without-libx --with-liby ...` so each permutation forms a new flavor. \"Distro\" or any such down level granularity is therefore not something which should be supported with concrete implementation IMHO. Typically folks compile their native libraries on oldest CentOS (5 or 6) to maximize portability across glibc-based distros.\r\n\r\n> when .net is one distro for some two flavours of linux but native libs are specific for two\r\n\r\nJust curious, how do you handle that on other programming platforms like rust, node.js, python etc.?\r\nYou can bundle all flavors of `libFoo.so` you want to support in a nuget package, then in your managed library (which is also part of same nuget.package), set custom resolver (https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.nativelibrary.setdllimportresolver?view=net-6.0) something like this: https://gist.github.com/am11/e53442f76f3d0f751dde818d446fc424.",
          "createdAt": "2021-12-23T21:05:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-23T21:05:23Z",
          "id": "IC_kwDODI9FZc47osWw"
        },
        {
          "author": "AdaskoTheBeAsT",
          "body": "@am11 thanks for pointing me into setdllimportresolver - I will need to make some PoC\r\ni thinks some combination of nuget  .props /.targets (to not force developer o download nuget packages with all flavours of native libs) with dllimportresolver which in runtime will load proper flavour of lib should do the trick",
          "createdAt": "2021-12-29T19:21:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2021-12-29T19:21:25Z",
          "id": "IC_kwDODI9FZc47xKb3"
        },
        {
          "author": "ericstj",
          "body": "cc @eerhardt @tmds.  It'd be interesting to consider how unknown RIDs might get some default mapping so that certain things work even if they aren't specifically known by the RID graph.",
          "createdAt": "2022-01-14T17:44:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-14T17:44:37Z",
          "id": "IC_kwDODI9FZc48ZioD"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOPGYqAw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/62694",
    "title": "Amazon Linux Runtime IDs native dependencies"
  },
  {
    "author": "danmoseley",
    "labels": [
      "area-Meta",
      "source-generator"
    ],
    "createdAt": "2022-01-31T15:57:05Z",
    "body": "Logging, Interop, Regex and JSON generators include `// <auto-generated/>` at the top of their emitted .g.cs. \r\nEventSource generator does not. \r\n\r\nLogging, Regex and JSON generators include something like ` [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"42.42.42.42\")]` \r\nEventSource and Interop generators do not.\r\n\r\nAfter https://github.com/dotnet/runtime/pull/64534, all 5 of them use `.g.cs` extensions when writing to disk.\r\n\r\n@jaredpar is it reasonable that all three of these should be required by convention in generators? I'm not sure what effect each one has. For example, we discovered that coverlet looks for `.g.cs`.",
    "number": 64541,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-21T20:36:31Z",
          "user": "Xpl0itR"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOC3YGog=="
    },
    "updatedAt": "2024-01-03T15:11:59Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nLogging, Interop, Regex and JSON generators include `// <auto-generated/>` at the top of their emitted .g.cs. \r\nEventSource generator does not. \r\n\r\nLogging, Regex and JSON generators include something like ` [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"42.42.42.42\")]` \r\nEventSource and Interop generators do not.\r\n\r\nAfter https://github.com/dotnet/runtime/pull/64534, all 5 of them use `.g.cs` extensions when writing to disk.\r\n\r\n@jaredpar is it reasonable that all three of these should be required by convention in generators? I'm not sure what effect each one has. For example, we discovered that coverlet looks for `.g.cs`.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>danmoseley</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `source-generator`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-01-31T16:00:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T16:00:55Z",
          "id": "IC_kwDODI9FZc49Joq_"
        },
        {
          "author": "jaredpar",
          "body": "> I'm not sure what effect each one has. For example, we discovered that coverlet looks for .g.cs. \r\n\r\nThat seems like a bug in coverlet, not something we should be designing our generators around. \r\n\r\n> [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"42.42.42.42\")]\r\n\r\nThis has no impact on code that I am aware of. \r\n\r\n",
          "createdAt": "2022-01-31T17:16:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T17:16:10Z",
          "id": "IC_kwDODI9FZc49J76w"
        },
        {
          "author": "stephentoub",
          "body": "> That seems like a bug in coverlet, not something we should be designing our generators around.\r\n\r\nI agree. In the case of https://github.com/dotnet/runtime/pull/64534 I was fine \"fixing\" it because we already use \".g.cs\" everywhere else and this was the one outlier, with no good reason, so changing it made it more consistent with little downside.  But if coverlet actually breaks if someone uses a different suffix (or no suffix) with a source generator, that certainly seems like a coverlet bug.\r\n\r\n> is it reasonable that all three of these should be required by convention in generators?\r\n\r\nFrom my perspective, the `<auto-generated/>` is valuable in source to highlight to someone reading the source that trying to change it will be futile as it will be regenerated, the `.g.cs` suffix is valuable for someone looking at files on disk to know what's been created by a tool rather than by hand, and `[GeneratedCode]` is useful for tools that inspect metadata.",
          "createdAt": "2022-01-31T17:20:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-31T17:22:17Z",
                "user": "jaredpar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-31T19:40:13Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-29T14:23:43Z",
                "user": "IS4Code"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-21T20:35:04Z",
                "user": "Xpl0itR"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODe_gIQ=="
          },
          "updatedAt": "2022-01-31T17:20:07Z",
          "id": "IC_kwDODI9FZc49J86u"
        },
        {
          "author": "danmoseley",
          "body": "Does VS respect both `<auto-generated/>` and `[GeneratedCode]`?\r\n\r\nCoverlet aside, consistency is good; we should try to be consistent across our own generators, and if these two annotations have value, we should likely recommend them as well.\r\n\r\n@dotnet/interop-contrib do you want me to open a specific issue for your generator to include GeneratedCodeAttribute, like the others?",
          "createdAt": "2022-01-31T19:11:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T19:11:23Z",
          "id": "IC_kwDODI9FZc49KUXF"
        },
        {
          "author": "jaredpar",
          "body": "> Does VS respect both <auto-generated/> and [GeneratedCode]?\r\n\r\nCan you be more specefic in what you expect from VS here? There are many layers of VS and, unfortunately, there are differing heuristics for detecting and different responses to generated code",
          "createdAt": "2022-01-31T19:13:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T19:13:00Z",
          "id": "IC_kwDODI9FZc49KUsx"
        },
        {
          "author": "danmoseley",
          "body": "I meant \"are there components of VS that look for one but not the other, such that it is necessary to apply both for all components to identify generated code\"?\r\n\r\nFor example, MSBuild writes XX.AssemblyInfo.cs with\r\n```xml\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n```\r\nbut no `[GeneratedCode]` attribute. WPF's XAML code behind files have that plus `[System.CodeDom.Compiler.GeneratedCodeAttribute(\"PresentationBuildTasks\", \"7.0.0.0\")]` (and end in '.g.cs' incidentally)\r\n\r\nYes, I wasn't intending to suggest we should cater to Coverlet's bugs. The extension would purely have the value of consistency for humans.",
          "createdAt": "2022-01-31T19:17:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T19:17:02Z",
          "id": "IC_kwDODI9FZc49KVly"
        },
        {
          "author": "jaredpar",
          "body": "> I meant \"are there components of VS that look for one but not the other, such that it is necessary to apply both for all components to identify generated code\"?\r\n\r\nYes. Across VS there are different heuristics for identifying generated code. The one we are trying to standardize on is the compiler heuristic around generated code.\r\n\r\nhttps://sourceroslyn.io/#Microsoft.CodeAnalysis/InternalUtilities/GeneratedCodeUtilities.cs,1c5dbec99946c19e,references\r\n\r\nThis takes into account several popular existing hueristics, including extensions. That is genenerally not a great approach. The one we'd prefer is that people have the `<auto-generated>` header. ",
          "createdAt": "2022-01-31T19:20:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T20:04:37Z",
          "id": "IC_kwDODI9FZc49KWdL"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "> @dotnet/interop-contrib do you want me to open a specific issue for your generator to include GeneratedCodeAttribute, like the others?\r\n\r\nWe have been discussing this in our team meeting. Adding a tracking issue would be helpful and adding it to the productization issue - https://github.com/dotnet/runtime/issues/60595.",
          "createdAt": "2022-01-31T19:48:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T19:48:32Z",
          "id": "IC_kwDODI9FZc49Kb8v"
        },
        {
          "author": "danmoseley",
          "body": "> This takes into account several popular existing hueristics, including extensions. That is genenerally not a great approach. The one we'd prefer is that people have the `<auto-generated>` header.\r\n\r\n@stephentoub are you aware of tools in the ecosystem that only respect `[GeneratedCode]` such that we can't realistically just use `<auto-generated>` ? (I have zero opinion just trying to record consensus here)\r\n",
          "createdAt": "2022-01-31T20:05:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T20:05:54Z",
          "id": "IC_kwDODI9FZc49KfYB"
        },
        {
          "author": "stephentoub",
          "body": "> @stephentoub are you aware of tools in the ecosystem that only respect [GeneratedCode]\r\n\r\nAnything that only has access to binaries / metadata / reflection and not source, e.g.\r\nhttps://grep.app/search?q=%3CGeneratedCodeAttribute%3E\r\nhttps://grep.app/search?q=typeof%28GeneratedCodeAttribute%29",
          "createdAt": "2022-01-31T20:07:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-01-31T20:11:32Z",
          "id": "IC_kwDODI9FZc49KfqV"
        },
        {
          "author": "stephentoub",
          "body": "(In particular, I think it's important for source generated code to include `[GeneratedCode(version)]` so if there are any discovered bugs in the generator, binaries can be more easily audited to understand which ones are likely impacted.)",
          "createdAt": "2022-01-31T20:35:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-01-31T21:29:59Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-02-03T11:23:13Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCM5hLA=="
          },
          "updatedAt": "2022-01-31T20:35:40Z",
          "id": "IC_kwDODI9FZc49Klb0"
        },
        {
          "author": "danmoseley",
          "body": "@jaredpar if you agree, where should guidance go - in https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview? and perhaps samples?",
          "createdAt": "2022-01-31T20:50:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-03T15:06:34Z",
                "user": "Guiorgy"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODRIedw=="
          },
          "updatedAt": "2022-01-31T20:50:06Z",
          "id": "IC_kwDODI9FZc49KoQ6"
        },
        {
          "author": "Guiorgy",
          "body": "I only came across the `GeneratedCodeAttribute` attribute while reviewing some generator sources.",
          "createdAt": "2024-01-03T15:11:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-03T15:11:58Z",
          "id": "IC_kwDODI9FZc5vykXP"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHOb8pFzw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/64541",
    "title": "Generated code should include [GeneratedCodeAttribute] and // <auto-generated/>"
  },
  {
    "author": "adamsitnik",
    "labels": [
      "area-Meta",
      "tenet-performance",
      "tracking"
    ],
    "createdAt": "2022-03-30T13:24:26Z",
    "body": "Recently @kunalspathak asked me if I could produce a report similar to https://github.com/dotnet/runtime/issues/66848 for x64 vs arm64 comparison.\r\n\r\nI took .NET 7 Preview2 results provided by @AndyAyersMS, @kunalspathak and myself for https://github.com/dotnet/runtime/issues/66848, hacked the tool a little bit (it was not designed to compare different architecture results) and compared x64 vs arm64 using the following configs:\r\n\r\n* my old 4 year old macBook Pro x64: macOS Monterey 12.2.1, Intel Core i7-5557U CPU 3.10GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores vs @AndyAyersMS M1 Max arm64: macOS Monterey 12.2.1, Apple M1 Max 2.40GHz, 1 CPU, 10 logical and 10 physical cores\r\n* @kunalspathak  Windows 10 (10.0.20348.587) Intel Xeon Platinum 8272CL CPU 2.60GHz, 2 CPU, 104 logical and 52 physical cores vs @kunalspathak Windows 11 (10.0.25058.1000) ARM64 machine with lots of cores\r\n\r\nOf course it was not an apples-to-apples comparision, just the best thing we could do right now.\r\n\r\nFull public results (without absolute values, as I don't have the permission to share them) can be found [here](https://gist.github.com/adamsitnik/3df04e23d5a88806204153593bc5f420).\r\nInternal MS results (with absolute values) can be found [here](https://microsofteur-my.sharepoint.com/:t:/g/personal/adsitnik_microsoft_com/ESIzrKQkyZdHhnrdw_utqzsBVRhvNQpxXFRTI57V2D7TxA?e=mjbwcC). If you don't have the access please ping me on Teams.\r\n\r\nAs usual, I've focused on the benchmarks that take longer to execute on arm64 compared to x64. If you are interested in benchmarks that take less to execute, you need to read the report linked above in the reverse order.\r\n\r\nBenchmarks:\r\n\r\n\r\n@kunalspathak\r\n* [x] `System.Numerics.Tests.Perf_BitOperations.PopCount_ulong` is 5-8 time slower (most likely due to lack of vectorization). `PopCount_uint` is slower only on Windows.\r\n\r\n@tannergooding @GrabYourPitchforks\r\n* [x] lot of `Base64Encode` benchmarks like `System.Buffers.Text.Tests.Base64Tests.Base64Encode(NumberOfBytes: 1000)` are 6 up to 16 times slower  #35033\r\n\r\n@stephentoub @kouvel\r\n* [ ] Some `RentReturnArrayPoolTests` benchmarks are up to few times slower, but these are multi-threaded and very often multimodal benchmarks. #63619\r\n* [ ] `System.Threading.Tests.Perf_Timer.AsynchronousContention` is 2-3 times slower.\r\n\r\n@wfurt @MihaZupan\r\n* [ ] A lot of `SocketSendReceivePerfTest` benchmarks like`System.Net.WebSockets.Tests.SocketSendReceivePerfTest.ReceiveSend` are 2 times slower.\r\n\r\n@dotnet/area-system-drawing\r\n* [ ] `System.Drawing.Tests.Perf_Image_Load.Image_FromStream_NoValidation` are few times slower on Windows. Only the `NoValidation` benchmarks seem to run slower.\r\n\r\n@stephentoub\r\n* [x] Few `RegularExpressions` benchmarks like `System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?i)Sher[a-z]+|Hol[a-z]+\", Options: Compiled)` are 40-50% slower. This pattern uses `IndexOfAny(\"HOho\")` to find the next possible match location.  It has a 256-bit vectorization path on x64 but only 128-bit on ARM64.\r\n\r\n@jkotas @AndyAyersMS\r\n* [ ] `PerfLabTests.LowLevelPerf.GenericClassGenericStaticField` benchmark can be from 16% to x3 times slower. Same goes for `PerfLabTests.LowLevelPerf.GenericClassGenericStaticMethod`.\r\n\r\n@dotnet/jit-contrib\r\n* [ ] `System.Security.Cryptography.Tests.Perf_Hashing.Sha1` is 17-55% slower. (Potentially differences in the GDI+ code)\r\n* [ ] `System.IO.Tests.Perf_StreamWriter.WriteString(writeLength: 100)` is 21-46% slower. \r\n* [ ] `System.Text.Json.Serialization.Tests.WriteJson<BinaryData>.SerializeToStream` benchmark can be from 16% to x4 times slower. #35033\r\n* [ ] `SIMD.ConsoleMandel` benchmarks are 40% slower . #66993\r\n* [ ] `Burgers.Test3` is 12-59% slower #66993\r\n* [ ] A lot of `System.Collections.Contains` benchmarks are 2-3 times slower (most likely due to lack of vectorization). Same goes for `System.Memory.Span<Char>.IndexOfValue`, `System.Memory.Span<Char>.Fill`, `System.Memory.Span<Int32>.StartsWith`, `System.Memory.Span<Byte>.IndexOfAnyTwoValues` and `System.Memory.ReadOnlySpan.IndexOfString(Ordinal)`. #66993\r\n* [ ] A lot of `SequenceCompareTo` benchmarks are 30% up to 4 times slower #66993\r\n\r\n@tannergooding\r\n* [ ] `System.MathBenchmarks.Double.Exp` and `System.MathBenchmarks.Single.Exp` are 35% slower. #62302\r\n\r\n@dotnet/area-system-globalization\r\n* [ ] `System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: ja)` benchmark can be from 20% to x7 times slower (it's most likely an ICU problem). #31273\r\n\r\n* [x] Various `Perf_Interlocked` benchmarks are slower, but this is expected due to memory model differences.\r\n* [ ] Various `Perf_Process.Start` benchmarks are slower, but only on macOS so it's most likely a macOS issue.\r\n\r\n",
    "number": 67339,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2022-03-30T15:15:52Z",
          "user": "danmoseley"
        },
        {
          "content": "HEART",
          "createdAt": "2022-03-30T15:18:20Z",
          "user": "EgorBo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-30T17:02:22Z",
          "user": "eerhardt"
        },
        {
          "content": "HEART",
          "createdAt": "2022-03-30T18:25:52Z",
          "user": "jeffhandley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-03-30T21:10:34Z",
          "user": "BruceForstall"
        },
        {
          "content": "HEART",
          "createdAt": "2022-04-06T11:59:34Z",
          "user": "mafshin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-04-07T21:51:47Z",
          "user": "kunalspathak"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-28T20:49:20Z",
          "user": "msedi"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOC0SYeg=="
    },
    "updatedAt": "2022-08-11T03:53:42Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nRecently @kunalspathak asked me if I could produce a report similar to https://github.com/dotnet/runtime/issues/66848 for x64 vs arm64 comparison.\r\n\r\nI took .NET 7 Preview2 results provided by @AndyAyersMS, @kunalspathak and myself for https://github.com/dotnet/runtime/issues/66848, hacked the tool a little bit (it was not designed to compare different architecture results) and compared x64 vs arm64 using the following configs:\r\n\r\n* my old 4 year old macBook Pro x64: macOS Monterey 12.2.1, Intel Core i7-5557U CPU 3.10GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores vs @AndyAyersMS M1 Max arm64: macOS Monterey 12.2.1, Apple M1 Max 2.40GHz, 1 CPU, 10 logical and 10 physical cores\r\n* @kunalspathak  Windows 10 (10.0.20348.587) Intel Xeon Platinum 8272CL CPU 2.60GHz, 2 CPU, 104 logical and 52 physical cores vs @kunalspathak Windows 11 (10.0.25058.1000) ARM64 machine with lots of cores\r\n\r\nOf course it was not an apples-to-apples comparision, just the best thing we could do right now.\r\n\r\nFull public results (without absolute values, as I don't have the permission to share them) can be found [here](https://gist.github.com/adamsitnik/3df04e23d5a88806204153593bc5f420).\r\nInternal MS results (with absolute values) can be found [here](https://microsofteur-my.sharepoint.com/:t:/g/personal/adsitnik_microsoft_com/ESIzrKQkyZdHhnrdw_utqzsBVRhvNQpxXFRTI57V2D7TxA?e=mjbwcC). If you don't have the access please ping me on Teams.\r\n\r\nAs usual, I've focused on the benchmarks that take longer to execute on arm64 compared to x64. If you are interested in benchmarks that take less to execute, you need to read the report linked above in the reverse order.\r\n\r\nBenchmarks:\r\n* A lot of `Base64Encode` benchmarks like `System.Buffers.Text.Tests.Base64Tests.Base64Encode(NumberOfBytes: 1000)` are 6 up to 16 times slower (most likely due to lack of vectorization). @tannergooding @GrabYourPitchforks is it expected?\r\n* `System.Numerics.Tests.Perf_BitOperations.PopCount_ulong` is 5-8 time slower (most likely due to lack of vectorization). `PopCount_uint` is slower only on Windows. @kunalspathak is this expected?\r\n* Some `RentReturnArrayPoolTests` benchmarks are up to few times slower, but these are multi-threaded and very often multimodal benchmarks. @stephentoub @kouvel is it expected?\r\n* `System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: ja)` benchmark can be from 20% to x7 times slower (it's most likely an ICU problem). @dotnet/area-system-globalization is it expected?\r\n* A lot of `System.Collections.Contains` benchmarks are 2-3 times slower (most likely due to lack of vectorization). Same goes for `System.Memory.Span<Char>.IndexOfValue`,  `System.Memory.Span<Char>.Fill`, `System.Memory.Span<Int32>.StartsWith`, `System.Memory.Span<Byte>.IndexOfAnyTwoValues` and `System.Memory.ReadOnlySpan.IndexOfString(Ordinal)`. @tannergooding @EgorBo is it expected?\r\n* A lot of `SequenceCompareTo` benchmarks are 30% up to 4 times slower (most likely due to lack of vectorization). @tannergooding @EgorBo is it expected?\r\n* `System.Text.Json.Serialization.Tests.WriteJson<BinaryData>.SerializeToStream` benchmark can be from 16% to x4 times slower. @dotnet/jit-contrib is this expected?\r\n* `System.Threading.Tests.Perf_Timer.AsynchronousContention` is 2-3 times slower. @stephentoub @kouvel is it expected?\r\n* A lot of `SocketSendReceivePerfTest` benchmarks like`System.Net.WebSockets.Tests.SocketSendReceivePerfTest.ReceiveSend` are 2 times slower. @wfurt @MihaZupan is it expected?\r\n* `System.Drawing.Tests.Perf_Image_Load.Image_FromStream_NoValidation` are few times slower on Windows. @dotnet/area-system-drawing is it expected? Only the `NoValidation` benchmarks seem to run slower.\r\n* `PerfLabTests.LowLevelPerf.GenericClassGenericStaticField` benchmark can be from 16% to x3 times slower. Same goes for `PerfLabTests.LowLevelPerf.GenericClassGenericStaticMethod`. @jkotas @AndyAyersMS is it expected?\r\n* Few `RegularExpressions` benchmarks like `System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?i)Sher[a-z]+|Hol[a-z]+\", Options: Compiled)` are 40-50% slower (most likely it's using a method that has not been vectorized). @stephentoub is it expected?\r\n* `Burgers.Test3` is 12-59% slower (most likely it's using a method that has not been vectorized). @dotnet/jit-contrib is it expected?\r\n* `System.Security.Cryptography.Tests.Perf_Hashing.Sha1` is 17-55% slower (most likely due to lack of vectorization). @dotnet/jit-contrib is it expected?\r\n* `SIMD.ConsoleMandel` benchmarks are 40% slower (most likely due to lack of vectorization). @dotnet/jit-contrib is it expected?\r\n* `System.IO.Tests.Perf_StreamWriter.WriteString(writeLength: 100)` is 21-46% slower (most likely due to lack of vectorization). @dotnet/jit-contrib is it expected?\r\n* `System.MathBenchmarks.Double.Exp` and `ystem.MathBenchmarks.Single.Exp` are 35% slower.  @tannergooding is it expected?\r\n* Various `Perf_Interlocked` benchmarks are slower, but this is expected due to memory model differences.\r\n* Various `Perf_Process.Start` benchmarks are slower, but only on macOS so it's most likely a macOS issue.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>adamsitnik</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `tenet-performance`, `tracking`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-03-30T13:24:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T13:24:32Z",
          "id": "IC_kwDODI9FZc5Aj1yh"
        },
        {
          "author": "EgorBo",
          "body": "Nice! I did a [similar report](https://microsofteur-my.sharepoint.com/:x:/g/personal/yabah_microsoft_com/ERjE8kdvwghOhe5SjigoN90BNPRGsZUbfDpZRmglzpD5RA?e=BHSSCj) last week and shared on our perf meeting last Monday\r\n\r\n> A lot of Base64Encode benchmarks like System.Buffers.Text.Tests.Base64Tests.Base64Encode(NumberOfBytes: 1000) are 6 up to 16 times slower (most likely due to lack of vectorization). @tannergooding @GrabYourPitchforks is it expected?\r\n\r\nBase64 (for utf8) is only vectorized for x64, there is an issue for arm64 https://github.com/dotnet/runtime/issues/35033 (I think we wanted to assign it to someone to ramp up)\r\n\r\n---\r\n\r\n> System.Numerics.Tests.Perf_BitOperations.PopCount_ulong is 5-8 time slower (most likely due to lack of vectorization).\r\n\r\nit is properly accelerated (I compared it with [__builtin_popcnt in LLVM](https://godbolt.org/z/6d146vsd4)), the problem that popcnt is vector only on arm64 so we have some overhead on packing/extracting - 5 instructions vs 1 on x64\r\n\r\n---\r\n\r\n> Some RentReturnArrayPoolTests benchmarks are up to few times slower\r\n\r\nMy guess that Rent-Return is most likely bottle-necked on TLS access speed, can be improved with https://github.com/dotnet/runtime/issues/63619 if arm64 has special registers for that.\r\n\r\n---\r\n\r\n> A lot of System.Collections.Contains benchmarks are 2-3 times slower (most likely due to lack of vectorization).\r\n\r\n> A lot of SequenceCompareTo benchmarks are 30% up to 4 times slower (most likely due to lack of vectorization\r\n\r\nThat is expected due to lack of Vector256 I believe, I proposed to add dual-vector128 for arm64 here https://github.com/dotnet/runtime/pull/66993\r\n\r\n> Burgers.Test3 is 12-59% slower (most likely it's using a method that has not been vectorized)\r\n\r\n> SIMD.ConsoleMandel benchmarks are 40% slower\r\n\r\nSame here, it uses `Vector<T>` so it's Vector256 on x64 vs Vector128 on arm64\r\n\r\n---\r\n\r\n> Various Perf_Interlocked benchmarks are slower, but this is expected due to memory model differences.\r\n\r\nCorrect, the codegen for interlocked ops is completely fine on both arm64 8.0 and 8.1 (Atomics)\r\n\r\n---\r\n\r\n> System.MathBenchmarks.Double.Exp and ystem.MathBenchmarks.Single.Exp are 35% slower. \r\n\r\nIf arm64 was M1 than it's the jump-stubs issue, see https://github.com/dotnet/runtime/issues/62302#issuecomment-1013874430\r\n\r\n---\r\n\r\n> PerfLabTests.LowLevelPerf.GenericClassGenericStaticField benchmark can be from 16% to x3 times slower. Same goes for  PerfLabTests.LowLevelPerf.GenericClassGenericStaticMethod. @jkotas @AndyAyersMS is it expected?\r\n\r\nMy guess that it's because we don't use relocs on arm64 and have to compose full 64bit address using several instructions to access a static field. E.g.:\r\n```csharp\r\nstatic int field;\r\n\r\nvoid IncrementField() => field++;\r\n```\r\nX64:\r\n```asm\r\n       FF05C6CC4200         inc      dword ptr [(reloc 0x7ffeb73eac3c)]\r\n```\r\narm64:\r\n```asm\r\n        D2958780          movz    x0, #0xac3c\r\n        F2B6E760          movk    x0, #0xb73b LSL #16\r\n        F2CFFFC0          movk    x0, #0x7ffe LSL #32\r\n        B9400001          ldr     w1, [x0]\r\n        11000421          add     w1, w1, #1\r\n        B9000001          str     w1, [x0]\r\n```\r\n\r\nOverall, I have a feeling that we might get a very nice boost for many benchmarks/GC if we integrate PGO for native code (VM/GC)",
          "createdAt": "2022-03-30T14:14:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-30T14:33:54Z",
                "user": "MihaZupan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-30T15:17:23Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCVaMAA=="
          },
          "updatedAt": "2022-03-30T15:16:58Z",
          "id": "IC_kwDODI9FZc5AkDot"
        },
        {
          "author": "vcsjones",
          "body": "> System.Security.Cryptography.Tests.Perf_Hashing.Sha1 is 17-55% slower (most likely due to lack of vectorization). `jit-contrib` is it expected?\r\n\r\nThe `SHA1.ComputeHash` is going to be backed by the platform's SHA1 implementation (OpenSSL, CNG, SecurityTransforms) and doesn't do any vectorization itself anywhere. It's possible that the platform the tests were run under do not have optimized ARM64 implementations of SHA1.",
          "createdAt": "2022-03-30T14:56:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T14:56:34Z",
          "id": "IC_kwDODI9FZc5AkQLP"
        },
        {
          "author": "danmoseley",
          "body": "> Nice! I did a [similar report](https://microsofteur-my.sharepoint.com/:x:/g/personal/yabah_microsoft_com/ERjE8kdvwghOhe5SjigoN90BNPRGsZUbfDpZRmglzpD5RA?e=BHSSCj) last week and shared on our perf meeting last Monday\r\n\r\n@EgorBo that data seems like something you could share on a gist for everyone? (Or perhaps just the scenarios with unusual ratios)",
          "createdAt": "2022-03-30T15:11:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T15:11:41Z",
          "id": "IC_kwDODI9FZc5AkUqx"
        },
        {
          "author": "danmoseley",
          "body": "The System.Drawing ones may just be a difference in Windows GDI+ performance since it's largely a wrapper. ",
          "createdAt": "2022-03-30T15:49:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T15:49:27Z",
          "id": "IC_kwDODI9FZc5AkhDf"
        },
        {
          "author": "AndyAyersMS",
          "body": "> > PerfLabTests.LowLevelPerf.GenericClassGenericStaticField benchmark can be from 16% to x3 times slower. Same goes for  PerfLabTests.LowLevelPerf.GenericClassGenericStaticMethod. @jkotas @AndyAyersMS is it expected?\r\n> \r\n> My guess that it's because we don't use relocs on arm64 and have to compose full 64bit address using several instructions to access a static field.\r\n\r\nhttps://github.com/dotnet/performance/blob/d7dac8a7ca12a28d099192f8a901cf8e30361384/src/benchmarks/micro/runtime/perflab/LowLevelPerf.cs#L320-L325\r\n\r\nAccess for *generic* statics (for shared generics at least, maybe for all?) can more complicated -- the address must be looked up in runtime data structures. Worth investigating.",
          "createdAt": "2022-03-30T15:58:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T15:58:09Z",
          "id": "IC_kwDODI9FZc5AkjX-"
        },
        {
          "author": "tarekgh",
          "body": ">  System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: ja) benchmark can be from 20% to x7 times slower (it's most likely an ICU problem).\r\n\r\nMost likely it is because of ICU. We already having the issue https://github.com/dotnet/runtime/issues/31273 tracking that. I don't know though why ARM64 runs make more slower.",
          "createdAt": "2022-03-30T18:20:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-30T18:21:11Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCVcoZg=="
          },
          "updatedAt": "2022-03-30T18:20:06Z",
          "id": "IC_kwDODI9FZc5AlGKf"
        },
        {
          "author": "danmoseley",
          "body": "> Access for generic statics (for shared generics at least, maybe for all?) can more complicated -- the address must be looked up in runtime data structures. Worth investigating.\r\n\r\n@EgorBo perhaps you could open an issue and update the top post?",
          "createdAt": "2022-03-30T18:31:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-30T18:35:08Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCVcyfQ=="
          },
          "updatedAt": "2022-03-30T18:31:19Z",
          "id": "IC_kwDODI9FZc5AlJIW"
        },
        {
          "author": "EgorBo",
          "body": "> @EgorBo perhaps you could open an issue and update the top post?\r\n\r\n> Access for generic statics (for shared generics at least, maybe for all?) can more complicated -- the address must be looked up in runtime data structures. Worth investigating.\r\n\r\nright, but it doesn't look to be the case here since it's not shared\r\n\r\n> @EgorBo that data seems like something you could share on a gist for everyone?\r\n\r\nSure, let me see how to export an excel sheet to gist 😄 ",
          "createdAt": "2022-03-30T18:56:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T22:09:10Z",
          "id": "IC_kwDODI9FZc5AlPzE"
        },
        {
          "author": "ericstj",
          "body": "> The System.Drawing ones may just be a difference in Windows GDI+ performance since it's largely a wrapper.\r\n\r\nThere is a lot of interop in this scenario.   Could be differences in interop or performance of this callback https://github.com/dotnet/runtime/blob/3ae87395f638a533f37b8e3385f6d3f199a72f4f/src/libraries/System.Drawing.Common/src/System/Drawing/Internal/GPStream.COMWrappers.cs#L29\r\nCould compare to performance of a load that doesn't use stream, and thus would be more of a GDI+ baseline.  cc @eerhardt ",
          "createdAt": "2022-03-30T20:31:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T20:31:50Z",
          "id": "IC_kwDODI9FZc5All4w"
        },
        {
          "author": "danmoseley",
          "body": "@jkoritzinsky for that interop possibility. Jeremy anything notable in the interop here - any potentially relevant known issue on Arm64?",
          "createdAt": "2022-03-30T20:33:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T20:33:03Z",
          "id": "IC_kwDODI9FZc5AlmJm"
        },
        {
          "author": "EgorBo",
          "body": ">  System.Text.Json.Serialization.Tests.WriteJson<BinaryData>.SerializeToStream benchmark can be from 16% to x4 times slower.\r\n\r\nthis one serializes an array of bytes so it spends most of the time encoding data into base64. So it's the same as https://github.com/dotnet/runtime/issues/35033\r\n\r\n![image](https://user-images.githubusercontent.com/523221/160939146-c8441c4f-865f-4cb6-9aca-d76ae72c68c4.png)\r\n",
          "createdAt": "2022-03-30T22:08:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T22:08:18Z",
          "id": "IC_kwDODI9FZc5Al6HH"
        },
        {
          "author": "jkoritzinsky",
          "body": "> for that interop possibility. Jeremy anything notable in the interop here - any potentially relevant known issue on Arm64?\r\n\r\nWe don't have any notable differences (or even any differences I can think of) in the portion of interop used there for ARM64 vs x64. I definitely wouldn't be amazed at all if some portion of GDI+ is better optimized for x64 and we're just seeing that here. @dotnet/interop-contrib if anyone else on the interop team has any issues that come to mind.",
          "createdAt": "2022-03-30T22:10:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T22:10:42Z",
          "id": "IC_kwDODI9FZc5Al6xf"
        },
        {
          "author": "danmoseley",
          "body": "For the regex ones -- do we know we have vectorization gaps that are specific to Arm64 in any areas like -- StartsWith, IndexOf, IndexOfAny - @EgorBo ? (For char, not byte)",
          "createdAt": "2022-03-30T22:55:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-30T22:56:53Z",
          "id": "IC_kwDODI9FZc5AmDu8"
        },
        {
          "author": "stephentoub",
          "body": ">> Few RegularExpressions benchmarks like System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?i)Sher[a-z]+|Hol[a-z]+\", Options: Compiled) are 40-50% slower (most likely it's using a method that has not been vectorized).\r\n\r\n> For the regex ones -- do we know we have vectorization gaps that are specific to Arm64 in any areas like -- StartsWith, IndexOf, IndexOfAny - @EgorBo ? (For char, not byte)\r\n\r\nThe cited pattern will use `IndexOfAny(\"HOho\")` to find the next possible match location.  It has a 256-bit vectorization path on x64 but only 128-bit on ARM64.",
          "createdAt": "2022-03-31T01:53:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-31T13:45:39Z",
                "user": "EgorBo"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCVm4Ag=="
          },
          "updatedAt": "2022-03-31T01:53:50Z",
          "id": "IC_kwDODI9FZc5AnDbP"
        },
        {
          "author": "danmoseley",
          "body": "@EgorBo is that IndexOfAny(char, char..) work part of https://github.com/dotnet/runtime/pull/66993 ? ",
          "createdAt": "2022-03-31T17:39:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-31T17:39:43Z",
          "id": "IC_kwDODI9FZc5AqnZ7"
        },
        {
          "author": "EgorBo",
          "body": "> @EgorBo is that IndexOfAny(char, char..) work part of #66993 ?\r\n\r\nIt is, but I start to think that we won't be able to properly lower Vector256 to double Vector128s in JIT, so I wonder if we should do that on C#/IL level instead e.g. Source-Generators if we really want to - some say that generally these APIs mostly work with small data and cases when we need to open a 0.5Mb book and find a word in it are rare..",
          "createdAt": "2022-03-31T18:34:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-31T18:35:32Z",
          "id": "IC_kwDODI9FZc5AqzWu"
        },
        {
          "author": "tannergooding",
          "body": "I really don't think its worth focusing on or investing in that.\r\n\r\n-----------------\r\n\r\nLike you mentioned, doing it in the JIT is somewhat problematic because you have to take `Vector256<T>` which is a user-defined non HVA struct (not equivalent to `struct Hva256<T> { Vector128<T> _lower; Vector128<T> _upper; }`) and then decompose it into 2x efficient `128-bit` operations.\r\n\r\nDecomposition here isn't necessarily trivial and has questionable perf throughput for various operations leading users to a potential pit of failure, particularly when running on low-power devices (may negatively impact Mobile).\r\n\r\nWe could do some clever things here and other various optimizations to make it work nicely (including treating it as an HVA), but its not a small amount of work.\r\n\r\n-----------------\r\n\r\nOn top of that, it won't really \"close\" the gap. The places where doing `2x 128-bit` ops on ARM64 are likely the same places where doing `2x 256-bit` ops on x64 would provide similar gains.\r\n\r\nWe simply shouldn't be trying to compare `128-bit Arm64` vs `256-bit x64`, just like we shouldn't compare `256-bit x64` to `512-bit x64` (or `128-bit x64` to `256-bit x64`); nor should we try to compare `ARM SVE` (if/when we get that support) against `x64`.\r\n\r\nWe should instead, when doing x64 vs Arm64 comparisons compare `128-bit Arm64` to `128-bit x64`. The \"simplest\" way to do that here is generally `COMPlus_EnableAVX2=0`, but more ideally we'd just have a way to force 128-bit code paths without disabling any ISAs.",
          "createdAt": "2022-03-31T18:48:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-03-31T18:55:01Z",
                "user": "AaronRobinsonMSFT"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCVq-Sw=="
          },
          "updatedAt": "2022-03-31T18:48:35Z",
          "id": "IC_kwDODI9FZc5Aq3up"
        },
        {
          "author": "danmoseley",
          "body": "> some say that generally these APIs mostly work with small data and cases when we need to open a 0.5Mb book and find a word in it are rare..\r\n\r\nI don't think you can assume this given they're critical to regex matching. @stephentoub @joperezr may have a better sense of typical regex text lengths (of course it also depends on how common hits are)\r\n\r\n> We simply shouldn't be trying to compare 128-bit Arm64 vs 256-bit x64\r\n\r\nComparing across hardware is inevitably bogus -- I thought the purpose of this exercise was to look for unusual ratios that might suggest room for targeted improvement by whatever means. Just sounds like there may not be a means, in this case.",
          "createdAt": "2022-03-31T20:39:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-04-01T06:52:17Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCVvvKA=="
          },
          "updatedAt": "2022-03-31T20:39:41Z",
          "id": "IC_kwDODI9FZc5ArQ_r"
        },
        {
          "author": "EgorBo",
          "body": "> On top of that, it won't really \"close\" the gap. The places where doing 2x 128-bit ops on ARM64 are likely the same places where doing 2x 256-bit ops on x64 would provide similar gains.\r\n\r\nI support your point, however, I think `SpanHelpers` methods are core performance primitives (just like memset and memcpy) in many things, especially `IndexOf`, `IndexOfAny` and `SequenceEqual`, I've seen these 3 in a lot of profiles in different apps (but I've not measured the average input size they worked on) so they might deserve to have 2x256 path or even 4x256 - that's what native compilers do when you ask them to unroll a loop on e.g. Skylake - they will even do 2*(4*256) per iteration. Although, in order to close the gap here for arm64 we need SVE2 😄 \r\n\r\nWe can add JIT support here, e.g. JIT will be responsible to replace SpanHelpers.IndexOf with a call to a heavily optimized pipelined version if inputs are usually big (PGO)",
          "createdAt": "2022-03-31T20:48:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-31T20:54:25Z",
          "id": "IC_kwDODI9FZc5ArTzt"
        },
        {
          "author": "EgorBo",
          "body": "https://godbolt.org/z/MxhGPPvaj\r\n\r\nhere I wrote a simple loop to add `2` to all elements in an array of integers.\r\n1) arm64 with all ISAs available - two SVE2 vectors\r\n2) arm64 for Apple-M1 - two Vector128 operations\r\n3) x64 Skylake - 2 groups of 4 Vector256 operations\r\n\r\nI didn't even use -O3 here 😐 \r\n",
          "createdAt": "2022-03-31T20:59:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-31T21:01:05Z",
          "id": "IC_kwDODI9FZc5ArXXy"
        },
        {
          "author": "tannergooding",
          "body": "> I support your point, however, I think SpanHelpers methods are core performance primitives (just like memset and memcpy) in many things, especially IndexOf, IndexOfAny and SequenceEqual, I've seen these 3 in a lot of profiles in different apps (but I've not measured the average input size they worked on) so they might deserve to have 2x256 path or even 4x256 - that's what native compilers do when you ask them to unroll a loop on e.g. Skylake - they will even do 2*(4*256) per iteration. Although, in order to close the gap here for arm64 we need SVE2 😄\r\n\r\nRight. My point is that we shouldn't drive the work solely based on closing some non-representative Arm64 vs x64 perf gap, because that will be impossible given the two sets of hardware we have (particularly if we actually try and do our best for each platform).\r\n\r\nIf it is perf critical, we should be hand tuning this to fit our needs for all the relevant platforms. If that includes manually unrolling and pipelining, then that's fine (assuming numbers across the hardware we care about show the respective gains).\r\n\r\n",
          "createdAt": "2022-03-31T23:07:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-03-31T23:07:45Z",
          "id": "IC_kwDODI9FZc5ArxjZ"
        },
        {
          "author": "danmoseley",
          "body": "These API's are perf critical (certainly for 'char', if it matters)-- if we think it's feasible at reasonable cost to make them significantly faster on this architecture by whatever means, can we get an issue open for that?",
          "createdAt": "2022-04-01T01:10:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-01T01:10:55Z",
          "id": "IC_kwDODI9FZc5AsDfw"
        },
        {
          "author": "EgorBo",
          "body": "> These API's are perf critical (certainly for 'char', if it matters)-- if we think it's feasible at reasonable cost to make them significantly faster on this architecture by whatever means, can we get an issue open for that?\r\n\r\nSure, but I'd love to mine some data first for some apps, 1st parties, benchmarks to understand typical inputs better",
          "createdAt": "2022-04-01T09:20:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-01T09:20:30Z",
          "id": "IC_kwDODI9FZc5Atfj9"
        }
      ],
      "totalCount": 24,
      "endCursor": "Y3Vyc29yOnYyOpHOQLX4_Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/67339",
    "title": "x64 vs ARM64 Microbenchmarks Performance Study Report"
  },
  {
    "author": "elinor-fung",
    "labels": [
      "area-Meta",
      "test-enhancement",
      "help wanted"
    ],
    "createdAt": "2022-04-21T17:36:31Z",
    "body": "Some libraries don't have tests using every type (for example, internal types only used in hard to automate scenarios). It may be valuable to have a test that just loads all types in runtime libraries.\r\n\r\nSee:\r\nhttps://github.com/dotnet/runtime/issues/68240#issuecomment-1103343367\r\nhttps://github.com/dotnet/runtime/pull/68274#discussion_r854468777\r\n\r\ncc @danmoseley ",
    "number": 68341,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-04-29T04:07:33Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-04-21T17:36:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T17:36:34Z",
          "id": "IC_kwDODI9FZc5B5KYt"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSome libraries don't have tests using every type (for example, internal types only used in hard to automate scenarios). It may be valuable to have a test that just loads all types in runtime libraries.\r\n\r\nSee:\r\nhttps://github.com/dotnet/runtime/issues/68240#issuecomment-1103343367\r\nhttps://github.com/dotnet/runtime/pull/68274#discussion_r854468777\r\n\r\ncc @danmoseley \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>elinor-fung</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`, `test-enhancement`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-04-21T17:39:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T17:39:39Z",
          "id": "IC_kwDODI9FZc5B5LBX"
        },
        {
          "author": "ViktorHofer",
          "body": "@elinor-fung  As this is a test coverage problem I'm removing the infrastructure label and changing it to Meta.",
          "createdAt": "2022-04-21T19:22:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T19:22:18Z",
          "id": "IC_kwDODI9FZc5B5xg8"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSome libraries don't have tests using every type (for example, internal types only used in hard to automate scenarios). It may be valuable to have a test that just loads all types in runtime libraries.\r\n\r\nSee:\r\nhttps://github.com/dotnet/runtime/issues/68240#issuecomment-1103343367\r\nhttps://github.com/dotnet/runtime/pull/68274#discussion_r854468777\r\n\r\ncc @danmoseley \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>elinor-fung</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `test-enhancement`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-04-21T19:22:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T19:22:31Z",
          "id": "IC_kwDODI9FZc5B5xkA"
        },
        {
          "author": "danmoseley",
          "body": "as mentioned in the original comment -- do folks think this trick would work, so we only write a single test: we put it in a common file that was included in all test assemblies, with a single test that enumerates all loaded assemblies and does GetTypes on each.\r\npotential issues\r\n- does it matter that the same fully qualified test name is in multiple assemblies\r\n- how do we make this test run late (last?) so to ensure any relevant product assembly is already loaded",
          "createdAt": "2022-04-21T19:58:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T19:58:11Z",
          "id": "IC_kwDODI9FZc5B55pI"
        },
        {
          "author": "elinor-fung",
          "body": "> enumerates all loaded assemblies and does GetTypes on each\r\n\r\nIt'd be nice if we could narrow it down more, since I think there would be a lot of duplication in what is being tested. Do libraries tests assemblies have any tracking / way of determining what the product assembly under test is? If the test 'knows' what the target product assembly is, it could explicitly load and get all types.",
          "createdAt": "2022-04-21T20:12:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-04-21T20:12:59Z",
          "id": "IC_kwDODI9FZc5B59QK"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOQefUCg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/68341",
    "title": "Add common test for getting all types in each runtime library implementation assembly"
  },
  {
    "author": "teo-tsirpanis",
    "labels": [
      "area-Meta",
      "help wanted",
      "in-pr"
    ],
    "createdAt": "2022-05-10T09:12:58Z",
    "body": "Similar to what #68950 and #68888 have done with CoreRT, we could rename mentions of Redhawk to NativeAOT. I see 1182 occurences of it in this repo.",
    "number": 69115,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-06-05T20:55:50Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSimilar to what #68950 and #68888 have done with CoreRT, we could rename mentions of Redhawk to NativeAOT. I see 1182 occurences of it in this repo.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>teo-tsirpanis</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `up-for-grabs`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-05-10T09:13:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-10T09:13:03Z",
          "id": "IC_kwDODI9FZc5C4muD"
        },
        {
          "author": "huoyaoyuan",
          "body": "And remember to add it to historical glossary to explain the `Rh` prefix.",
          "createdAt": "2022-05-11T06:38:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-11T14:50:59Z",
                "user": "AaronRobinsonMSFT"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCcTRQg=="
          },
          "updatedAt": "2022-05-11T06:38:58Z",
          "id": "IC_kwDODI9FZc5C81gk"
        },
        {
          "author": "prasanta10",
          "body": "> And remember to add it to historical glossary to explain the `Rh` prefix.\r\ncan i work on it?\r\n",
          "createdAt": "2022-05-11T11:28:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-11T11:28:19Z",
          "id": "IC_kwDODI9FZc5C-QOG"
        },
        {
          "author": "teo-tsirpanis",
          "body": "Sure @prasanta10, go ahead.",
          "createdAt": "2022-05-11T11:29:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-11T11:29:01Z",
          "id": "IC_kwDODI9FZc5C-QnR"
        },
        {
          "author": "danmoseley",
          "body": "Cc @jkotas . Are there places where this would not be a good rename?",
          "createdAt": "2022-05-11T13:55:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-11T13:55:44Z",
          "id": "IC_kwDODI9FZc5C-8L2"
        },
        {
          "author": "prasanta10",
          "body": "#69187 ",
          "createdAt": "2022-05-11T14:44:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-11T14:44:17Z",
          "id": "IC_kwDODI9FZc5C_ONs"
        },
        {
          "author": "jkotas",
          "body": "We should be able to remove all mentions of redhawk. \r\n\r\nThe simple rename does not always work well in comments, the comment is sometimes completely obsolete, etc.\r\n\r\nI would recommend doing this in two phases. Submit a simple find&replace of the most frequently used terms in one PR (e.g. `FEATURE_REDHAWK` -> `FEATURE_NATIVEAOT`, `REDHAWK_API` -> `NATIVEAOT_API`) and do the remaining renames that require manual tweaks in second PR once the first one is merged.\r\n\r\n> the Rh prefix.\r\n\r\nThe Rh prefix can be go away too. Again, I would recommend to do that in a separate PR and have some upfront discussion about the naming pattern to use to eliminate the Rh prefix.",
          "createdAt": "2022-05-11T14:45:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-11T14:51:27Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-11T14:52:20Z",
                "user": "prasanta10"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-05-30T08:42:18Z",
                "user": "GSPP"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-03T18:45:28Z",
                "user": "mahara"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOEVKxww=="
          },
          "updatedAt": "2022-05-11T14:45:53Z",
          "id": "IC_kwDODI9FZc5C_OtD"
        },
        {
          "author": "prasanta10",
          "body": "> We should be able to remove all mentions of redhawk.\r\n> \r\n> The simple rename does not always work well in comments, the comment is sometimes completely obsolete, etc.\r\n> \r\n> I would recommend doing this in two phases. Submit a simple find&replace of the most frequently used terms in one PR (e.g. `FEATURE_REDHAWK` -> `FEATURE_NATIVEAOT`, `REDHAWK_API` -> `NATIVEAOT_API`) and do the remaining renames that require manual tweaks in second PR once the first one is merged.\r\n> \r\n> > the Rh prefix.\r\n> \r\n> The Rh prefix can be go away too. Again, I would recommend to do that in a separate PR and have some upfront discussion about the naming pattern to use to eliminate the Rh prefix.\r\n\r\nThank you for the advice,Sir. I will be the doing the same that you told me.",
          "createdAt": "2022-05-11T14:55:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-11T14:55:18Z",
          "id": "IC_kwDODI9FZc5C_SfL"
        },
        {
          "author": "danmoseley",
          "body": "@prasanta10 do you plan to continue ? no obligation.",
          "createdAt": "2022-07-12T03:39:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-12T03:39:00Z",
          "id": "IC_kwDODI9FZc5GaN7V"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHORmje1Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/69115",
    "title": "Rename mentions of Redhawk to NativeAOT."
  },
  {
    "author": "xtqqczze",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2022-05-10T20:06:40Z",
    "body": "Fix [IDE0075](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0075) rule violations in the  `dotnet/runtime` repository, as suggested in https://github.com/dotnet/runtime/pull/63095#discussion_r869381948\r\n\r\nWe will need to ensure there are no codegen regressions.\r\n\r\ncc: @huoyaoyuan",
    "number": 69156,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-06-14T23:34:48Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nnull\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>xtqqczze</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Linq.Expressions`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-05-10T20:06:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-05-10T20:06:45Z",
          "id": "IC_kwDODI9FZc5C7L6d"
        },
        {
          "author": "xtqqczze",
          "body": "Depends on #65370 (to prevent suboptimal codegen).",
          "createdAt": "2022-05-10T20:17:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-11T12:43:45Z",
          "id": "IC_kwDODI9FZc5C7OAf"
        },
        {
          "author": "xtqqczze",
          "body": "Depends on #66245 to avoid a zero-extend (was merged as 5635905f134a3329a15112bd4975acef3f661eb2).",
          "createdAt": "2022-05-10T20:37:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-14T23:34:48Z",
          "id": "IC_kwDODI9FZc5C7SK8"
        },
        {
          "author": "corngood",
          "body": "[could this be related?](https://sharplab.io/#v2:CYLg1APgBDUAICYCMBYAULeAGeSAsA3OupnAMzwJQAqApgLYAOAwgPZMCGATrVwDzUAfFBBQAkgFEAjgFcOAGwCWAFwCebTj35CoAb3QBIAzw7BWAO3mr4AVgEAaGo4BGrVvOGKAztLnyoALxQ5jLy8kRoRiZmltZwdtSOiubKwgDmtMoAEhxeABZswLSBwaHhxJEG5DQMLOyM3LwAFPEOTlCu7p4+sgqOrYlQyalQGdm5BaxFAJR6hkbKed4AdN6+CiVrveWVBosrYzn5hcVBhxMnEUYAvhVG1Z3+6/JeTdRQAB6O76qzAYLzAwfQJBEJhKAAMghUGsAVBZUBAH4oMouDJiqJgXDSmEkVAAGYKLwYmEgnHyPGEl4krZ+Mlgim7ZEfZbPV6/ERDHp+JpfGHTCLzarDKAAcUyR0mRTenz+wix8PByJwonOxymp0V/mZy3F43V0tmqolFw1vIFhluaCAA=)\r\n\r\nIf I try to fix these using `dotnet format` 6.3.322007+dc5c84e776364e1c23a5cf2d1a848d4022f8634f, I get:\r\n\r\n```\r\nFailed to apply code fix SimplifyConditionalCodeFixProvider for IDE0075: GetCurrentNode returned null with the following node: x == null\r\n                        ? false : y == null\r\n                        ? false : isEqual == null\r\n                        ? x.Equals(y) : isEqual(x, y) - line 281\r\nFailed to apply code fix SimplifyConditionalCodeFixProvider for IDE0075: GetCurrentNode returned null with the following node: x == null\r\n                        ? false : y == null\r\n                        ? false : isEqual == null\r\n                        ? x.Equals(y) : isEqual(x, y) - line 281\r\nFailed to apply code fix SimplifyConditionalCodeFixProvider for IDE0075: GetCurrentNode returned null with the following node: x == null\r\n                        ? false : y == null\r\n                        ? false : isEqual == null\r\n                        ? x.Equals(y) : isEqual(x, y) - line 281\r\n```",
          "createdAt": "2022-07-20T02:53:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-01T13:42:56Z",
          "id": "IC_kwDODI9FZc5G6h_K"
        },
        {
          "author": "xtqqczze",
          "body": "@corngood This issue is regarding rule violations in the `runtime` repository.\r\n\r\n<strike>Please make a bug report in regard to your analyzer issue over at [dotnet/roslyn](https://github.com/dotnet/roslyn/issues/new?assignees=&labels=&template=bug-report.md).</strike>\r\n\r\nThanks for the bug report at https://github.com/dotnet/roslyn/issues/62827, I suggest you now hide your previous https://github.com/dotnet/runtime/issues/69156#issuecomment-1189748682 as off-topic.",
          "createdAt": "2022-07-20T21:24:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-15T18:36:32Z",
          "id": "IC_kwDODI9FZc5G-b8S"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nFix [IDE0075](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0075) rule violations in the  `dotnet/runtime` repository, as suggested in https://github.com/dotnet/runtime/pull/63095#discussion_r869381948\r\n\r\nWe will need to ensure there are no codegen regressions.\r\n\r\ncc: @huoyaoyuan\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>xtqqczze</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `area-System.Linq.Expressions`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-08-01T00:10:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-01T00:10:27Z",
          "id": "IC_kwDODI9FZc5Hjrjc"
        },
        {
          "author": "xtqqczze",
          "body": "Depends on https://github.com/dotnet/runtime/issues/8363.",
          "createdAt": "2024-09-15T18:37:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-11T12:44:02Z",
          "id": "IC_kwDODI9FZc6MLLMD"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOjCyzAw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/69156",
    "title": "Fix `IDE0075` (Conditional expression can be simplified) violations"
  },
  {
    "author": "carlreinke",
    "labels": [
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2022-06-01T03:23:21Z",
    "body": "### Background and motivation\r\n\r\n[IDE0058](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058) is a noisy diagnostic.  I generally find it valuable enough to enable it despite the noise, but in some cases it's *annoyingly* noisy — particularly when using `StringBuilder`.\r\n\r\nIt would be nice to have a way to enlighten IDE0058 that some return values are entirely redundant.\r\n\r\nThe bar for applying this attribute would necessarily be set pretty high.  I'd suggest only applying it if the return value is a something you definitely already have. So, for example, it would be applied to `StringBuilder.Append(...)` but not to `Stream.Seek(...)`. \r\n\r\nA class method that always returns `this` would be a good candidate to have this attribute applied to it's return value.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    [AttributeUsage(AttributeTargets.ReturnValue, AllowMultiple = false, Inherited = true)]\r\n    public sealed class MayIgnoreAttribute : Attribute\r\n    {\r\n        public MayIgnoreAttribute() {}\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```diff\r\n namespace System.Text\r\n {\r\n     public partial class StringBuilder\r\n     {\r\n+        [return: MayIgnore]\r\n         public StringBuilder Append(string? value);\r\n\r\n         // Et cetera.\r\n     }\r\n }\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* Don't add an attribute and hard-code the analyzer to allow ignoring the return value of some methods.\r\n\r\n### Risks\r\n\r\n* Checking for the attribute may make the IDE0058 analyzer more expensive.\r\n\r\n(Initially suggested in https://github.com/dotnet/runtime/issues/34098#issuecomment-1141482997.)",
    "number": 70064,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-01T03:26:27Z",
          "user": "jl0pd"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-01T08:29:46Z",
          "user": "hez2010"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-05T18:18:18Z",
          "user": "Sergio0694"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOCgRujw=="
    },
    "updatedAt": "2022-08-02T03:42:41Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-06-01T03:23:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-01T03:23:23Z",
          "id": "IC_kwDODI9FZc5EIfO5"
        },
        {
          "author": "danmoseley",
          "body": "I believe there's a proposal for a more refined analyzer that will only flag cases where it's for sure a bug. Cc @eerhardt ",
          "createdAt": "2022-06-01T04:54:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-01T04:54:41Z",
          "id": "IC_kwDODI9FZc5EIpNI"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Background and motivation\r\n\r\n[IDE0058](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058) is a noisy diagnostic.  I generally find it valuable enough to enable it despite the noise, but in some cases it's *annoyingly* noisy — particularly when using `StringBuilder`.\r\n\r\nIt would be nice to have a way to enlighten IDE0058 that some return values are entirely redundant.\r\n\r\nThe bar for applying this attribute would necessarily be set pretty high.  I'd suggest only applying it if the return value is a something you definitely already have. So, for example, it would be applied to `StringBuilder.Append(...)` but not to `Stream.Seek(...)`. \r\n\r\nA class method that always returns `this` would be a good candidate to have this attribute applied to it's return value.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    [AttributeUsage(AttributeTargets.ReturnValue, AllowMultiple = false, Inherited = true)]\r\n    public sealed class MayIgnoreAttribute : Attribute\r\n    {\r\n        public MayIgnoreAttribute() {}\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```diff\r\n namespace System.Text\r\n {\r\n     public partial class StringBuilder\r\n     {\r\n+        [return: MayIgnore]\r\n         public StringBuilder Append(string? value);\r\n\r\n         // Et cetera.\r\n     }\r\n }\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* Don't add an attribute and hard-code the analyzer to allow ignoring the return value of some methods.\r\n\r\n### Risks\r\n\r\n* Checking for the attribute may make the IDE0058 analyzer more expensive.\r\n\r\n(Initially suggested in https://github.com/dotnet/runtime/issues/34098#issuecomment-1141482997.)\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>carlreinke</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`, `code-analyzer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-06-01T04:55:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-01T04:55:08Z",
          "id": "IC_kwDODI9FZc5EIpQP"
        },
        {
          "author": "danmoseley",
          "body": "Oops, that's #34098 which you already referenced.",
          "createdAt": "2022-06-01T04:57:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-01T04:58:00Z",
          "id": "IC_kwDODI9FZc5EIpgx"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHORCKYMQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/70064",
    "title": "[API Proposal]: MayIgnoreAttribute to enlighten IDE0058"
  },
  {
    "author": "huoyaoyuan",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2022-06-04T12:47:13Z",
    "body": "Versioning of C++ has been painful for a long time. A large amount of CLR code was written almost 20 years ago, before a usable C++ standard existed. During examination about modernizing the code base, I'm quite unsure for what C++ features we can depend on. And I don't have all the environment we target to.\r\n\r\nThe things I can find in the repo is the C 11/C++ 11 standard configuration, and some GCC/clang version detection. However, C++ standard has always been abstract that we need to consider every actual implementation we use. Moreover, a feature exists don't mean we should use it, with concerns about deployment or binary size.\r\n\r\nWith adding documentation, we should be able to use modern C/C++ features with more confident.\r\n\r\nThe documentation should contain the following points:\r\n\r\n- The versions of compilers we use in CI, retail and daily workflow\r\nThis should be a hard limit. Any feature not supported by these versions should not be used.\r\nThis should especially focus on infamous platforms. For example, the [linux requirement](https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/linux-requirements.md) doc specifies clang9 which supports quite recent features, however [tizen build](https://github.com/dotnet/runtime/issues/13440) mentions clang5. I can't figure out what compiler FreeBSD build uses without inspecting the build scripts manually. This helps tracking which platforms are requiring old compilers.\r\n- The versions of OS and distros we need intentionally support, and there libc version.\r\nIt can be found [here](https://github.com/dotnet/runtime/issues/13440), but not clear to every runtime contributor (I found it just when writing this issue).\r\n- The components of C/C++ standard library we are allowed and not allowed to use.\r\nSometimes we couldn't accept the cost of binary size, for example some C++ STL. Sometimes the behavior varies between platforms, for example `atol` which depends on `sizeof(long)`. For some cases I can easily infer the reason based on our replacement implementation, but for many cases I have totally no idea.\r\n\r\nThe reason for asking for this documentation is I have got several questions related, for instance:\r\n- We were using and mimicking MSVC `_finite` instead of C standard `isfinite`. The IEEE754 semantic is clear and should not differ between implementation, but the two functions are end up calling different underlying implementations, which are both available in `ucrtbase.dll`.\r\nIs it safe to switch to the standard one since they are both available in UCRT? Are there any performance considerations? (Though I guess there's not, since CLR shouldn't be using FP a lot, and for managed side we have managed implementation.)\r\n- Why don't we enable `STDCPP_COMPACT` for MSVC, and ends up using self-defined `type_traits` etc? With UCRT, the versioning concerns should be decreased for Windows, and we are requiring a very recent version of MSVC.\r\n- There are a lot of different flavors of numbers defined and used in the codebase, except newly written JIT and hosting code. Can we convert them to `stdint` in a batch? Some of them (for example windows `ULONG` are really confusing.",
    "number": 70239,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2022-06-06T17:58:42Z",
          "user": "jack-pappas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-06-07T18:32:19Z",
          "user": "stakx"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOCgp_ww=="
    },
    "updatedAt": "2023-08-28T13:47:04Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-06-04T12:47:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-04T12:47:16Z",
          "id": "IC_kwDODI9FZc5EV8RL"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nVersioning of C++ has been painful for a long time. A large amount of CLR code was written almost 20 years ago, before a usable C++ standard existed. During examination about modernizing the code base, I'm quite unsure for what C++ features we can depend on. And I don't have all the environment we target to.\r\n\r\nThe things I can find in the repo is the C 11/C++ 11 standard configuration, and some GCC/clang version detection. However, C++ standard has always been abstract that we need to consider every actual implementation we use. Moreover, a feature exists don't mean we should use it, with concerns about deployment or binary size.\r\n\r\nWith adding documentation, we should be able to use modern C/C++ features with more confident.\r\n\r\nThe documentation should contain the following points:\r\n\r\n- The versions of compilers we use in CI, retail and daily workflow\r\nThis should be a hard limit. Any feature not supported by these versions should not be used.\r\nThis should especially focus on infamous platforms. For example, the [linux requirement](https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/linux-requirements.md) doc specifies clang9 which supports quite recent features, however [tizen build](https://github.com/dotnet/runtime/issues/13440) mentions clang5. I can't figure out what compiler FreeBSD build uses without inspecting the build scripts manually. This helps tracking which platforms are requiring old compilers.\r\n- The versions of OS and distros we need intentionally support, and there libc version.\r\nIt can be found [here](https://github.com/dotnet/runtime/issues/13440), but not clear to every runtime contributor (I found it just when writing this issue).\r\n- The components of C/C++ standard library we are allowed and not allowed to use.\r\nSometimes we couldn't accept the cost of binary size, for example some C++ STL. Sometimes the behavior varies between platforms, for example `atol` which depends on `sizeof(long)`. For some cases I can easily infer the reason based on our replacement implementation, but for many cases I have totally no idea.\r\n\r\nThe reason for asking for this documentation is I have got several questions related, for instance:\r\n- We were using and mimicking MSVC `_finite` instead of C standard `isfinite`. The IEEE754 semantic is clear and should not differ between implementation, but the two functions are end up calling different underlying implementations, which are both available in `ucrtbase.dll`.\r\nIs it safe to switch to the standard one since they are both available in UCRT? Are there any performance considerations? (Though I guess there's not, since CLR shouldn't be using FP a lot, and for managed side we have managed implementation.)\r\n- Why don't we enable `STDCPP_COMPACT` for MSVC, and ends up using self-defined `type_traits` etc? With UCRT, the versioning concerns should be decreased for Windows, and we are requiring a very recent version of MSVC.\r\n- There are a lot of different flavors of numbers defined and used in the codebase, except newly written JIT and hosting code. Can we convert them to `stdint` in a batch? Some of them (for example windows `ULONG` are really confusing.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>huoyaoyuan</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-06-04T12:47:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-04T12:47:48Z",
          "id": "IC_kwDODI9FZc5EV8SQ"
        },
        {
          "author": "danmoseley",
          "body": "@AaronRobinsonMSFT ",
          "createdAt": "2022-06-04T13:49:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-04T13:49:35Z",
          "id": "IC_kwDODI9FZc5EV_kf"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "@huoyaoyuan This is a huge but welcome ask - thank you. This is an area I am passionate about and am endeavoring to mitigate. Official document on our path forward is a good idea and I will take this upon myself to provide a design document on how I see moving toward the eventual goal to modernize our use of C++ in the dotnet/runtime code base.\r\n\r\nA few issues related to C++ and the runtime that are worth linking:\r\n- https://github.com/dotnet/runtime/issues/66154\r\n- https://github.com/dotnet/runtime/issues/37310\r\n- https://github.com/dotnet/runtime/issues/67470\r\n- https://github.com/dotnet/runtime/issues/31721\r\n- https://github.com/dotnet/runtime/issues/4107\r\n- https://github.com/dotnet/runtime/issues/91004",
          "createdAt": "2022-06-04T15:08:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-04T17:44:58Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-06-07T19:43:56Z",
                "user": "stakx"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCgqw1Q=="
          },
          "updatedAt": "2023-08-27T20:53:27Z",
          "id": "IC_kwDODI9FZc5EWDJg"
        },
        {
          "author": "huoyaoyuan",
          "body": "I want to gather GCC/Clang/glibc requirements first, especially for Tizen/FreeBSD.\r\n\r\nThere are already some STL components used in newly written libs, and should be marked as safe first.",
          "createdAt": "2022-06-04T17:45:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-04T17:45:28Z",
          "id": "IC_kwDODI9FZc5EWJyB"
        },
        {
          "author": "huoyaoyuan",
          "body": "I really want to use `std::filesystem`, but it comes from C++17.\r\nIf clang5 is no longer used, we can investigate and try it, at least in test suites.",
          "createdAt": "2022-06-05T08:43:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-05T08:43:45Z",
          "id": "IC_kwDODI9FZc5EWkMA"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "> I really want to use `std::filesystem`, but it comes from C++17. If clang5 is no longer used, we can investigate and try it, at least in test suites.\r\n\r\nIn the test suites this is a possibility. In the product, this is likely a non-starter - at least for quite a while. The biggest issue with many C++ APIs is exceptions. Many C++ APIs with throw exceptions that are simply not expected in many code paths and can play havoc if they occur. This is something I and others would like to address but it is a very long term goal. In the near term the goal would be to simply be able to consume the official system headers instead of our mocked out versions.",
          "createdAt": "2022-06-05T21:02:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-27T20:54:13Z",
          "id": "IC_kwDODI9FZc5EXArJ"
        },
        {
          "author": "huoyaoyuan",
          "body": "> The biggest issue with many C++ APIs is exceptions.\r\n\r\nYes, I realized this.\r\nIn newly written code we are defining real PAL abstracting Windows and Unix, instead of calling simulations \"pal\", there is real abstraction under `coreclr\\minipal`. If we want to add more \"real PAL\", when would it be placed?",
          "createdAt": "2022-06-06T05:40:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-06T05:40:24Z",
          "id": "IC_kwDODI9FZc5EXt3s"
        },
        {
          "author": "janvorli",
          "body": "I hope to spend some time after the .NET 7 features are finished to migrate some stuff in the runtime to use the new minipal on all platforms instead of using the Windows simulating PAL on Unix. ",
          "createdAt": "2022-06-06T14:19:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-06T14:19:02Z",
          "id": "IC_kwDODI9FZc5EZXhD"
        },
        {
          "author": "huoyaoyuan",
          "body": "We need also share some abstractions between corehost and coreclr, namely UTF-8/UTF-16 parity handling. Where would it be placed to?",
          "createdAt": "2022-06-08T08:05:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-08T08:05:58Z",
          "id": "IC_kwDODI9FZc5EhXLQ"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "> We need also share some abstractions between corehost and coreclr, namely UTF-8/UTF-16 parity handling.\r\n\r\nI don't know if that is true. The corehost default and remains in the host's default encoding UTF16 for Windows and UTF8 everywhere else. This dichotomy isn't the same in coreclr. Coreclr is presently UTF16-centric the majority of the time. I'd like to change this but that again isn't the same as corehost which is based on the host platform. There might be opportunities here but that discussion is a long way off I think.",
          "createdAt": "2022-06-08T14:51:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-08T14:51:12Z",
          "id": "IC_kwDODI9FZc5Ei_4w"
        },
        {
          "author": "huoyaoyuan",
          "body": "@AaronRobinsonMSFT is it safe to use STL containers like vector and string?\r\n\r\nThe basic dynamic sized containers have wide usage. Concerns I can see:\r\n\r\n- OOM, while our custom implementations aren't handling at all.\r\n- They shouldn't be throwing exceptions?\r\n- Optimized storage. If we can bring some dependencies from boost, we can use `small_vector`\r\n- Heap management. It should be not a problem if our custom implementations are already using standard `new`?",
          "createdAt": "2023-08-27T14:45:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-27T14:45:54Z",
          "id": "IC_kwDODI9FZc5lAt4o"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "> @AaronRobinsonMSFT is it safe to use STL containers like vector and string?\r\n\r\nNo it is not. We cannot currently permit exceptions coming from any STL collection.\r\n\r\n> OOM, while our custom implementations aren't handling at all.\r\n> They shouldn't be throwing exceptions?\r\n\r\nCorrect.\r\n\r\n> Optimized storage. If we can bring some dependencies from boost, we can use small_vector\r\n\r\nBoost is not going to be an option for this repo.\r\n\r\n> Heap management. It should be not a problem if our custom implementations are already using standard new?\r\n\r\nCan you elaborate on this? I don't understand the question/comment.",
          "createdAt": "2023-08-27T15:21:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-27T15:21:25Z",
          "id": "IC_kwDODI9FZc5lAv0O"
        },
        {
          "author": "huoyaoyuan",
          "body": "> > Heap management. It should be not a problem if our custom implementations are already using standard new?\r\n> \r\n> Can you elaborate on this? I don't understand the question/comment.\r\n\r\nSTL containers can be customized for allocators, so it shouldn't be a problem if we need one.\r\n\r\n> We cannot currently permit exceptions coming from any STL collection.\r\n\r\nDid a search for STL containers with noexcept. C++ is so complex. Ouch.\r\n\r\n> Boost is not going to be an option for this repo.\r\n\r\nI wonder the reason. Boost license looks similar to MIT, but does have difference.",
          "createdAt": "2023-08-27T17:18:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-27T17:18:46Z",
          "id": "IC_kwDODI9FZc5lA1t3"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "> STL containers can be customized for allocators, so it shouldn't be a problem if we need one.\r\n\r\nYes, that is true and something I think we should explore. However, there are very complex rules around STL allocators and they have severe limitations in practice. It isn't an impossible approach but not something we are anywhere close to being able to start considering.\r\n\r\n> Did a search for STL containers with noexcept. C++ is so complex. Ouch.\r\n\r\nYes it is. C++ is complex because of the performance ethos it aligns with and the diverse platforms it is designed to support - all of them.\r\n\r\n> I wonder the reason. Boost license looks similar to MIT, but does have difference.\r\n\r\nThis isn't a license perspective, but more akin to the perspective that Boost aligns with. It is a diverse and useful suite of APIs but doesn't have the rigor or governance that ISO-C++ has. Boost often has APIs that eventually get into the standard and that is a good thing, but it is only after a lot of time and consideration that that occurs. I value Boost, but the .NET runtime is not the place to consume non-standard libraries that don't adhere to the same requirements as the C++ standard.",
          "createdAt": "2023-08-27T19:08:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-28T13:47:04Z",
          "id": "IC_kwDODI9FZc5lA6nS"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "@huoyaoyuan You might want to checkout the [native containers](https://github.com/dotnet/runtime/tree/main/src/native/containers) that have been written in C. These are designed to be used in all runtime implementations (NativeAOT, CoreCLR, Mono) and are immediately consumable in CoreCLR in many cases. These aren't C++ for reasons around sharing and least-surprise, but one could see an argument for creating C++ wrappers around them that adhere to C++ idioms and allow us to use common APIs found in the [`algorithms` library](https://en.cppreference.com/w/cpp/algorithm).\r\n\r\nOther more modern C++ libraries like `filesystem` are, as I've mentioned, a long way off. They impose certain semantics that don't always align with the .NET runtime codebase and this makes using them more effort and less benefit in the long run. Not something we shouldn't strive for, but I am dubious using them could ever be justified in the cost/benefit calculus.",
          "createdAt": "2023-08-27T21:02:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-27T21:02:06Z",
          "id": "IC_kwDODI9FZc5lBAFE"
        }
      ],
      "totalCount": 16,
      "endCursor": "Y3Vyc29yOnYyOpHOZQQBRA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/70239",
    "title": "Add explicit documentation about C/C++ feature usage rule"
  },
  {
    "author": "JulieLeeMSFT",
    "labels": [
      "arch-arm64",
      "area-Meta",
      "User Story",
      "Priority:2",
      "Cost:XL"
    ],
    "createdAt": "2022-06-09T23:18:28Z",
    "body": "# Overview\r\nIn .NET 6, we improved Arm64 **throughput** and **latency** on **TechEmpower** benchmarks against .NET 5. In .NET 7, we will continue to improve Arm64 throughput and latency on **real world server workload** for Arm64. Also, we will explore areas that runtime and libraries have significant x64 optimizations or bias in order to narrow the performance gap.  \r\n\r\n## Work Items\r\n### In the JIT \r\n- [x] Loop alignment for Arm64\r\n- [x] https://github.com/dotnet/runtime/issues/64820\r\n\r\n### In runtime and Libraries\r\n- [ ] Identify work required to support comparable runtime and libraries optimizations\r\n\r\n## Benchmarks to use\r\n- BenchmarkGames\r\n- Edit: TechEmpower JSON benchmarks\r\n\r\n## What Success Looks Like\r\n- Improve performance on 2 applications such as customer server apps or community apps.\r\n- Edit: Improve TechEmpower JSON benchmarks  \r\n- Edit: (Not a goal anymore) Improve TechEmpower Composite score  \r\n\r\n## Move to future\r\n- [ ] #https://github.com/dotnet/runtime/issues/35853\r\n- [ ] #https://github.com/dotnet/runtime/issues/55365 **WIP**",
    "number": 70527,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-10-13T15:17:38Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n# Overview\r\nIn .NET 6, we improved Arm64 **throughput** and **latency** on **TechEmpower** benchmarks against .NET 5. In .NET 7, we will continue to improve Arm64 throughput and latency on **real world server workload** for Arm64. Also, we will explore areas that runtime and libraries have significant x64 optimizations or bias in order to narrow the performance gap.  \r\n\r\n## Work Items\r\n### In the JIT \r\n\r\n- [ ] #https://github.com/dotnet/runtime/issues/55365 **WIP**\r\n- [x] Loop alignment for Arm64\r\n\r\n### In runtime and Libraries\r\n- [ ] Identify work required to support comparable runtime and libraries optimizations\r\n\r\n## Benchmarks to use\r\n- BenchmarkGames\r\n- Edit: TechEmpower JSON benchmarks\r\n\r\n## What Success Looks Like\r\n- Improve performance on 2 applications such as customer server apps or community apps.\r\n- Edit: Improve TechEmpower JSON benchmarks  \r\n- Edit: (Not a goal anymore) Improve TechEmpower Composite score  \r\n\r\n## Move to future\r\n- [ ] #https://github.com/dotnet/runtime/issues/35853\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>JulieLeeMSFT</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>JulieLeeMSFT</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `User Story`, `Priority:2`, `Cost:XL`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>7.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-06-09T23:18:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-06-09T23:18:48Z",
          "id": "IC_kwDODI9FZc5EpZ_z"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHORKWf8w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/70527",
    "title": "Arm64v8 ISA optimization, both in the JIT and where runtime and libraries have significant x64 optimizations"
  },
  {
    "author": "deeprobin",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2022-07-02T19:54:28Z",
    "body": "![grafik](https://user-images.githubusercontent.com/10373452/177014542-744c4674-0c08-46c5-9318-53ab74c1bf9c.png)\r\nA small suggestion. Currently, GitHub only archives the source code and offers it for download.\r\n\r\nI think it would make sense to add some executables like `dotnet.exe`, maybe `corerun.exe`, `ilasm.exe`, ... are made available. Of course this should not be an official download but I think the theoretical possibility should be there to download executables for completeness.\r\n\r\n(Maybe also just put the installer there, but I think that would be more of an SDK issue).",
    "number": 71586,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-28T02:08:32Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-07-02T19:54:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-02T19:54:32Z",
          "id": "IC_kwDODI9FZc5F6dTJ"
        },
        {
          "author": "hypeartist",
          "body": "@deeprobin Doesn't https://github.com/dotnet/installer/blob/main/README.md#installers-and-binaries fit the issue's proposal?",
          "createdAt": "2022-07-02T20:27:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-02T20:27:08Z",
          "id": "IC_kwDODI9FZc5F6eOM"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n![grafik](https://user-images.githubusercontent.com/10373452/177014542-744c4674-0c08-46c5-9318-53ab74c1bf9c.png)\r\nA small suggestion. Currently, GitHub only archives the source code and offers it for download.\r\n\r\nI think it would make sense to add some executables like `dotnet.exe`, maybe `corerun.exe`, `ilasm.exe`, ... are made available. Of course this should not be an official download but I think the theoretical possibility should be there to download executables for completeness.\r\n\r\n(Maybe also just put the installer there, but I think that would be more of an SDK issue).\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>deeprobin</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-07-03T01:00:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-03T01:00:01Z",
          "id": "IC_kwDODI9FZc5F6lvb"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "/cc @richlander ",
          "createdAt": "2022-07-03T01:00:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-03T01:00:24Z",
          "id": "IC_kwDODI9FZc5F6lv9"
        },
        {
          "author": "richlander",
          "body": "AFAIK, we have builds for:\r\n\r\n- CI\r\n- Nightly\r\n- Official release\r\n\r\nWe could add the runtime downloads, the same ones as https://dotnet.microsoft.com/download. However, I don't think we have an official download for `corerun` for example.\r\n\r\nI think we've never listed binaries because our official build is pretty separation from GitHub, both repos and Actions. I'm not sure what to offer that would make sense.\r\n\r\nWe have some plans for .NET 8 that could potentially make something like this make more sense.",
          "createdAt": "2022-07-03T01:53:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-07-03T07:58:02Z",
                "user": "deeprobin"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCk5Dfg=="
          },
          "updatedAt": "2022-07-03T01:53:44Z",
          "id": "IC_kwDODI9FZc5F6m_R"
        },
        {
          "author": "richlander",
          "body": "> we have plans\r\n\r\nhttps://github.com/dotnet/source-build/issues/2956",
          "createdAt": "2022-08-02T05:30:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-02T05:30:42Z",
          "id": "IC_kwDODI9FZc5HpZkl"
        },
        {
          "author": "ericstj",
          "body": "@rbhanda creates these tags.  Can't we just include links to the bits?  ",
          "createdAt": "2023-08-11T00:35:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-11T00:35:36Z",
          "id": "IC_kwDODI9FZc5jyI_S"
        },
        {
          "author": "richlander",
          "body": "That's a fair request. It would be straightforward to generate the appropriate markdown from releases.json.\r\n\r\nThat said, do we have binary links to the specific binaries requested?",
          "createdAt": "2023-08-11T00:46:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-11T00:47:31Z",
          "id": "IC_kwDODI9FZc5jyKoS"
        },
        {
          "author": "ericstj",
          "body": "I think the zips contain all these.  @deeprobin was just making a suggestion with examples.  IMO the zips satisfy the suggestion here.",
          "createdAt": "2023-08-11T04:33:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-11T04:33:38Z",
          "id": "IC_kwDODI9FZc5jykU_"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOY8pFPw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/71586",
    "title": "Upload artifacts to Releases"
  },
  {
    "author": "Youssef1313",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2022-07-17T07:30:41Z",
    "body": "See https://github.com/dotnet/runtime/issues/57349 for details.\r\nThere are currently usages of this API, these should be replaced with `GetBestTypeByMetadataName` and also BannedApiAnalyzers should be used to prevent any accidental future usages.",
    "number": 72336,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-08-02T04:20:41Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-07-17T07:30:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-17T07:30:46Z",
          "id": "IC_kwDODI9FZc5Gt3wd"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSee https://github.com/dotnet/runtime/issues/57349 for details.\r\nThere are currently usages of this API, these should be replaced with `GetBestTypeByMetadataName` and also BannedApiAnalyzers should be used to prevent any accidental future usages.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>Youssef1313</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-07-17T09:43:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-07-17T09:43:30Z",
          "id": "IC_kwDODI9FZc5Gt_dc"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHORrf3XA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/72336",
    "title": "`GetTypeByMetadataName` should be banned"
  },
  {
    "author": "buyaa-n",
    "labels": [
      "api-approved",
      "area-Meta",
      "help wanted",
      "code-analyzer",
      "code-fixer"
    ],
    "createdAt": "2022-08-24T19:05:01Z",
    "body": "Related to https://github.com/dotnet/runtime/issues/72348\r\n\r\nWith  [numeric IntPtr feature](https://github.com/dotnet/csharplang/issues/6065) code simplification opportunities now available that could be suggested by this analyzer\r\n\r\n  * `U?IntPtr.Zero` ➡ `0` or `nu?int.Zero` if it would introduce ambiguity\r\n  ```cs\r\n    // Flag:\r\n    IntPtr intPtr = IntPtr.Zero;      // or nint intPtr1 = IntPtr.Zero;\r\n    UIntPtr uintPtr1 = UIntPtr.Zero;  // nuint uintPtr1 = UIntPtr.Zero; \r\n\r\n    // Violations fixed\r\n    nint intPtr1 = 0; // or void* intPtr1 = null; if it needs to be pointer\r\n    nuint uintPtr1 = 0;\r\n  ```\r\n  * `new U?IntPtr(x)` ➡ `x` or `(nu?int)x` if it would introduce ambiguity, or `unchecked((nu?int)x)` if we are in a `checked` context.\r\n  ```cs\r\n    // Flag:\r\n    IntPtr intPtr1 = new IntPtr(x);\r\n    uintPtr1 = new UIntPtr(x);\r\n\r\n    // Fixed\r\n    nint intPtr1 = x; \r\n    uintPtr1 = (nuint)x;\r\n  ```\r\n  * `x.ToU?Int32()` ➡ `checked((u?int)x)` or `(u?int)x` if we are in a `checked` context\r\n  ```cs\r\n    // Flag:\r\n    int i = intPtr1.ToInt32();\r\n    uint ui = uintPtr1.ToUInt32();\r\n\r\n    // Fixed\r\n    int i = (int)intPtr1;\r\n    uint ui = (uint)uintPtr1;\r\n  ```\r\n  * `x.ToU?Int64()` ➡ `(u?long)x`\r\n\r\n  ```cs\r\n    // Flag:\r\n    long longValue = intPtr1.ToInt64();\r\n    ulong uLongValue = uintPtr1.ToUInt64();\r\n\r\n    // Fixed\r\n    long longValue = (long)intPtr1;\r\n    ulong uLongValue = (ulong)uintPtr1;\r\n  ```\r\n  * `x.ToPointer()` ➡ `(void*) x`\r\n  ```cs\r\n    // Flag:\r\n    void* ptr1 = intPtr1.ToPointer();\r\n    void* ptr2 = uintPtr1.ToPointer();\r\n\r\n    // Fixed\r\n    void* ptr1 = (void*)intPtr1;\r\n    void* ptr2 = (void*)uintPtr1; \r\n  ```\r\nSuggested severity : \"Info\"\r\nSuggested category : \"Style\" or \"Usage\" \r\n\r\nThis analyzer should be triggered only if the underlying runtime supports [numeric IntPtr feature](https://github.com/dotnet/csharplang/issues/6065), i.e. if `System.Runtime.CompilerServices.RuntimeFeature.NumericIntPtr` is available in corelib.\r\n\r\nOther related questions: \r\n  - In case the statement includes a variable declaration with `U?IntPt`, the type also could be converted to `nu?int` which also could be covered by [IDE0049 should be updated to suggest converting IntPtr to nint and UIntPtr to nuint](https://github.com/dotnet/roslyn/issues/63421), so these scenarios might also could be added to that issue to fix all references with appropriate values.\r\n  - Also, as @jkotas suggested `it would be nice for the code-fixer to suggest replacing IntPtr with actual pointer types where the code is actually operating on pointers.` It might be not easy to determine if actual pointer should be suggested instead of nu?int\r\n\r\nCC @tannergooding @jeffhandley ",
    "number": 74518,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-08-25T07:21:19Z",
          "user": "PaulusParssinen"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOCqSH7A=="
    },
    "updatedAt": "2024-04-02T20:31:25Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-08-24T19:05:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-24T19:05:05Z",
          "id": "IC_kwDODI9FZc5JFTT_"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nRelated to https://github.com/dotnet/runtime/issues/72348#issuecomment-1213543299\r\n\r\nWith  [numeric IntPtr feature](https://github.com/dotnet/csharplang/issues/6065) code simplification opportunities now available that could be suggested by this analyzer\r\n  * `U?IntPtr.Zero` ➡ `0` or `(nu?int)0` if it would introduce ambiguity\r\n  * `new U?IntPtr(x)` ➡ `x` or `(nu?int)x` if it would introduce ambiguity, or `unchecked((nu?int)x)` if we are in a `checked` context.\r\n  * `x.ToU?Int32()` ➡ `checked((u?int)x)` or `(u?int)x` if we are in a `checked` context\r\n  * `x.ToU?Int64()` ➡ `(u?long)x`\r\n  * `x.ToPointer()` ➡ `(void*) x`\r\n  \r\nThese analyzer should be triggered only if the underlying runtime supports [numeric IntPtr feature](https://github.com/dotnet/csharplang/issues/6065), i.e. if `System.Runtime.CompilerServices.RuntimeFeature.NumericIntPtr` is available in corelib.\r\n\r\nSuggested severity : \"Info\"\r\nSuggested category : \"Style\" or \"Usage\" \r\n\r\nExamples: \r\n```cs\r\nclass Example\r\n{\r\n    int intValue;\r\n    uint uintValue;\r\n\r\n    void Test ()\r\n    {\r\n        // Examples to flag:\r\n        IntPtr  intPtr1 = IntPtr.Zero;\r\n        UIntPtr  uintPtr1 = UIntPtr.Zero;\r\n\r\n        // Violations fixed\r\n        intPtr1 = 0; \r\n        uintPtr1 = 0;\r\n\r\n\r\n        // flag:\r\n        intPtr1 = new IntPtr(intValue);\r\n        uintPtr1 = new UIntPtr(uintValue);\r\n\r\n        // fixed\r\n        intPtr1 = intValue; \r\n        uintPtr1 = uintValue;\r\n\r\n\r\n        // flag:\r\n        intValue = intPtr1.ToInt32();\r\n        uintValue = uintPtr1.ToUInt32();\r\n\r\n        // fixed\r\n        intValue = (int)intPtr1;\r\n        uintValue = (uint)uintPtr1;\r\n\r\n\r\n        // flag:\r\n        long longValue = intPtr1.ToInt64();\r\n        ulong uLongValue = uintPtr1.ToUInt64();\r\n\r\n        // fixed\r\n        longValue = intPtr1;\r\n        uLongValue = uintPtr1;\r\n\r\n\r\n        // flag:\r\n        void* ptr1 = intPtr1.ToPointer();\r\n        void* ptr2 = uintPtr1.ToPointer();\r\n\r\n        // fixed\r\n        ptr1 = (void*)intPtr1;\r\n        ptr2 = (void*)uintPtr1;\r\n    }\r\n}\r\n```\r\n\r\nCC @tannergooding @jeffhandley \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>buyaa-n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`, `code-analyzer`, `code-fixer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-08-24T19:05:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-08-24T19:05:58Z",
          "id": "IC_kwDODI9FZc5JFTjM"
        },
        {
          "author": "iSazonov",
          "body": "It would be great to have in .Net 8!",
          "createdAt": "2022-12-02T04:42:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-12-02T04:42:23Z",
          "id": "IC_kwDODI9FZc5Pjshx"
        },
        {
          "author": "GrabYourPitchforks",
          "body": "We did an unofficial (lacking quorum) review of this. Some notes:\r\n\r\n- Would we prefer to use `nint.Zero` instead of `(nint)0` to avoid ambiguity at call sites where we can't use simply `0`?\r\n- It's common enough for projects to compile debug in checked, release in unchecked. This could complicate the fixer's logic as to whether any given call site is checked or unchecked, since it could be influenced by external factors unknown to the fixer. Might be safest to have it insert an explicit `checked(...)` statement, regardless of what the fixer believes the current context is.\r\n- For conversions to `void*` and `[u]long`, no need to worry about checked / unchecked context. These conversions are guaranteed lossless so will never fail.",
          "createdAt": "2022-12-06T20:14:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-06T20:18:30Z",
                "user": "jeffhandley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-06T21:19:04Z",
                "user": "buyaa-n"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-12-07T05:32:43Z",
                "user": "iSazonov"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCw0t8Q=="
          },
          "updatedAt": "2022-12-06T20:14:02Z",
          "id": "IC_kwDODI9FZc5P3gbo"
        },
        {
          "author": "buyaa-n",
          "body": "> - Would we prefer to use nint.Zero instead of (nint)0 to avoid ambiguity at call sites where we can't use simply 0?\r\n\r\nSounds good, updated the description accordingly\r\n\r\n> - It's common enough for projects to compile debug in checked, release in unchecked. This could complicate the fixer's logic as to whether any given call site is checked or unchecked, since it could be influenced by external factors unknown to the fixer. Might be safest to have it insert an explicit checked(...) statement, regardless of what the fixer believes the current context is.\r\n\r\nThe operations coming from `roslyn` provide `Checked` property we could use for determining checked/unchecked context , I am not sure that covers the scenario you mentioned, most likely it is. Anyway, instead of trying to check the context and offer an appropriate fixer or always offering explicit `checked(...)` we could just offer the 2 options both: `checked((u?int)x)` and `(u?int)x`, and let the user choose.\r\n\r\n> - For conversions to void* and [u]long, no need to worry about checked / unchecked context. These conversions are guaranteed lossless so will never fail.\r\n\r\nRight, updated conversions to [u]long,",
          "createdAt": "2023-01-04T22:31:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-01-04T22:31:08Z",
          "id": "IC_kwDODI9FZc5Rv370"
        },
        {
          "author": "bartonjs",
          "body": "Looks good as proposed. The only representative case that's not explicitly mentioned is `var nint = IntPtr.Zero`, which needs special handling because of var.",
          "createdAt": "2023-02-28T19:29:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-28T19:29:23Z",
          "id": "IC_kwDODI9FZc5WWgzt"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOVloM7Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/74518",
    "title": "[Analyzer] Adjust/simplify code for numeric IntPtr"
  },
  {
    "author": "deeprobin",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "feature-request"
    ],
    "createdAt": "2022-09-14T18:58:50Z",
    "body": "I have noticed that there is still a big flaw in printing in the .NET environment.\r\n\r\nEven in an age of digitalization, printers are used extensively. In companies to print labels, delivery bills or labels, in the private environment to print documents, tax returns and many other applications.\r\n\r\nUnfortunately, there is still no really good print library in the .NET environment. There is [`System.Drawing.Printing`](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Drawing.Common/src/System/Drawing/Printing) and the C++/CLI library in the WPF repository [`System.Printing`](https://github.com/dotnet/wpf/tree/main/src/Microsoft.DotNet.Wpf/src/System.Printing).\r\nBoth are strictly limited to Windows, already very legacy and very limited.\r\n\r\nThe more companies move into the cloud, the more important it is to make the whole thing platform-independent.\r\n\r\nMy suggestion is to add an API that \r\n* provides low level access to the printing protocols\r\n  * IPP Naming suggestion: `System.Printing.Ipp` (the protocol which is used by CUPS)\r\n  * SMB - Naming suggestion: `System.Printing.Smb` (if there are no licensing problems, because SMB is proprietary)\r\n  * Native printers (Windows printing apis / installed printers) - `System.Printing.Builtin` \r\n* An abstraction over these protocols / universal api: `System.Printing`\r\n\r\nAs you can easily see my suggestion is to recreate `System.Printing` even if this API already exists in WPF (I could well imagine that WPF would then use this API in the long run).\r\n\r\nIt would make sense to distribute this API as a Nuget package for this reason instead of including it in the BCL.\r\n\r\n---\r\n\r\nThe whole thing here is just a rough wish. I have heard especially in the company where I work as well as from other companies that they really want something like this and therefore a real-world case is there.\r\n\r\nFeel free to leave your feedback. Since this would be a larger project, if there is an interest on the part of Microsoft and the community, I would deal with it in detail and create API Proposals.\r\n",
    "number": 75628,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-10-01T18:46:35Z",
          "user": "1337Nirflector"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-11-12T02:22:56Z",
          "user": "Baka632"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2022-11-24T00:52:26Z",
          "user": "JacksonCribb"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-29T21:59:09Z",
          "user": "workgroupengineering"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-23T14:03:04Z",
          "user": "jespersh"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-05T02:02:49Z",
          "user": "Varorbc"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-13T04:39:15Z",
          "user": "MineCake147E"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-20T18:55:32Z",
          "user": "Jimmys20"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-08T18:07:08Z",
          "user": "edwardneal"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-26T17:44:14Z",
          "user": "mhrastegari"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-27T09:36:17Z",
          "user": "Kalyxt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-22T07:45:37Z",
          "user": "wstaelens"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-25T22:17:16Z",
          "user": "renrutsirhc"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-07T21:26:23Z",
          "user": "mazanuj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-08T03:02:56Z",
          "user": "SongOfYouth"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-08T03:30:55Z",
          "user": "John0King"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-23T16:07:55Z",
          "user": "Stroniax"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-09T09:32:07Z",
          "user": "thomasklammer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-28T17:45:52Z",
          "user": "dbenzhuser"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-06T12:22:52Z",
          "user": "obleshev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-07T15:21:11Z",
          "user": "Bett-A-Fish"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-19T15:58:21Z",
          "user": "Applesauce314"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-22T01:21:32Z",
          "user": "QuillFancyson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-11T12:01:12Z",
          "user": "om1512"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-16T02:22:34Z",
          "user": "nadirvishun"
        }
      ],
      "totalCount": 25,
      "endCursor": "Y3Vyc29yOnYyOpHODAIOjQ=="
    },
    "updatedAt": "2025-03-24T16:03:14Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-09-14T18:58:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-14T18:58:53Z",
          "id": "IC_kwDODI9FZc5KVnh9"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nI have noticed that there is still a big flaw in printing in the .NET environment.\r\n\r\nEven in an age of digitalization, printers are used extensively. In companies to print labels, delivery bills or labels, in the private environment to print documents, tax returns and many other applications.\r\n\r\nUnfortunately, there is still no really good print library in the .NET environment. There is [`System.Drawing.Printing`](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Drawing.Common/src/System/Drawing/Printing) and the C++/CLI library in the WPF repository [`System.Printing`](https://github.com/dotnet/wpf/tree/main/src/Microsoft.DotNet.Wpf/src/System.Printing).\r\nBoth are strictly limited to Windows, already very legacy and very limited.\r\n\r\nThe more companies move into the cloud, the more important it is to make the whole thing platform-independent.\r\n\r\nMy suggestion is to add an API that \r\n* provides low level access to the printing protocols\r\n  * IPP Naming suggestion: `System.Printing.Ipp` (the protocol which is used by CUPS)\r\n  * SMB - Naming suggestion: `System.Printing.Smb` (if there are no licensing problems, because SMB is proprietary)\r\n  * Native printers (Windows printing apis / installed printers) - `System.Printing.Builtin` \r\n* An abstraction over these protocols / universal api: `System.Printing`\r\n\r\nAs you can easily see my suggestion is to recreate `System.Printing` even if this API already exists in WPF (I could well imagine that WPF would then use this API in the long run).\r\n\r\nIt would make sense to distribute this API as a Nuget package for this reason instead of including it in the BCL.\r\n\r\n---\r\n\r\nThe whole thing here is just a rough wish. I have heard especially in the company where I work as well as from other companies that they really want something like this and therefore a real-world case is there.\r\n\r\nFeel free to leave your feedback. Since this would be a larger project, if there is an interest on the part of Microsoft and the community, I would deal with it in detail and create API Proposals.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>deeprobin</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Runtime`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-09-15T14:04:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-15T14:04:34Z",
          "id": "IC_kwDODI9FZc5KZT2E"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-drawing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nI have noticed that there is still a big flaw in printing in the .NET environment.\r\n\r\nEven in an age of digitalization, printers are used extensively. In companies to print labels, delivery bills or labels, in the private environment to print documents, tax returns and many other applications.\r\n\r\nUnfortunately, there is still no really good print library in the .NET environment. There is [`System.Drawing.Printing`](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Drawing.Common/src/System/Drawing/Printing) and the C++/CLI library in the WPF repository [`System.Printing`](https://github.com/dotnet/wpf/tree/main/src/Microsoft.DotNet.Wpf/src/System.Printing).\r\nBoth are strictly limited to Windows, already very legacy and very limited.\r\n\r\nThe more companies move into the cloud, the more important it is to make the whole thing platform-independent.\r\n\r\nMy suggestion is to add an API that \r\n* provides low level access to the printing protocols\r\n  * IPP Naming suggestion: `System.Printing.Ipp` (the protocol which is used by CUPS)\r\n  * SMB - Naming suggestion: `System.Printing.Smb` (if there are no licensing problems, because SMB is proprietary)\r\n  * Native printers (Windows printing apis / installed printers) - `System.Printing.Builtin` \r\n* An abstraction over these protocols / universal api: `System.Printing`\r\n\r\nAs you can easily see my suggestion is to recreate `System.Printing` even if this API already exists in WPF (I could well imagine that WPF would then use this API in the long run).\r\n\r\nIt would make sense to distribute this API as a Nuget package for this reason instead of including it in the BCL.\r\n\r\n---\r\n\r\nThe whole thing here is just a rough wish. I have heard especially in the company where I work as well as from other companies that they really want something like this and therefore a real-world case is there.\r\n\r\nFeel free to leave your feedback. Since this would be a larger project, if there is an interest on the part of Microsoft and the community, I would deal with it in detail and create API Proposals.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>deeprobin</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Drawing`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-09-15T14:15:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-15T14:15:37Z",
          "id": "IC_kwDODI9FZc5KZXip"
        },
        {
          "author": "krwq",
          "body": "@danmoseley this might fit better in dotnet/iot",
          "createdAt": "2022-09-17T09:34:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-17T09:34:26Z",
          "id": "IC_kwDODI9FZc5KghE7"
        },
        {
          "author": "deeprobin",
          "body": "@krwq What does printing have to do with IoT?",
          "createdAt": "2022-09-18T13:56:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-18T13:56:17Z",
          "id": "IC_kwDODI9FZc5Khkgj"
        },
        {
          "author": "krwq",
          "body": "@deeprobin dotnet/iot is about hardware and printer is a physical device like any other. Printer doesn't really fit runtime repo in my eyes since most apps won't need it - APIs sounds super useful but it's a bit of its own beast. It seems like it would need either a separate package or be added to other repo. IMO from dotnet org dotnet/iot seems might fit best.",
          "createdAt": "2022-09-19T08:48:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-19T08:48:55Z",
          "id": "IC_kwDODI9FZc5KjMJL"
        },
        {
          "author": "deeprobin",
          "body": "@krwq \r\nThanks for your clarification.\r\n\r\nI assumed that [`dotnet/iot`](https://github.com/dotnet/iot) is only for IoT specific purposes like controlling small microcontrollers with interfaces like GPIO and not controlling printers which is mostly done over the network nowadays. For example, the [IPP protocol](https://en.wikipedia.org/wiki/Internet_Printing_Protocol)[^1] is an HTTP-based protocol that works over the network (and not over serial ports, for example).\r\nAs I see it, there are currently only APIs for some microcontrollers under dotnet/iot (see [src/devices](https://github.com/dotnet/iot/tree/main/src/devices)), so I don't see this project there.\r\n\r\nI would also like to refer to the description in the [README.md](https://github.com/dotnet/iot#net-iot-libraries) here:\r\n\r\n> .NET can be used to build applications for [IoT](https://en.wikipedia.org/wiki/Internet_of_things) devices and scenarios. IoT applications typically interact with sensors, displays and input devices that require the use of [GPIO pins](https://en.wikipedia.org/wiki/General-purpose_input/output), serial ports or similar hardware.\r\n\r\nSince, depending on the implementation, the Windows API[^2] (using GDI or XPS) can be used instead of, say, IPP, I thought the `dotnet/runtime` repository would be a consideration.\r\nOne consideration would be to make the naming similar to IoT projects in `System.Device`. Like for example `System.Device.Printers` (by the way, I don't understand why \"Device\" is singular here), but the [`dotnet/iot`](https://github.com/dotnet/iot) repository seems wrong to me.\r\n\r\n@richlander I saw you are active in [`dotnet/iot`](https://github.com/dotnet/iot) repository. I'd like to hear your thoughts on this.\r\n\r\nHowever, we could also consider starting a separate repository for this. A repository like `dotnet/printing`.\r\n\r\nI am also willing to support the printing project, but this will be a somewhat larger project (especially in the design of the API shape - the implementation is rather secondary) and I would definitely need support.\r\n\r\n[^1]: \r\n       **IPP 1.0**\r\n       * [RFC 2565 - Internet Printing Protocol/1.0: Encoding and Transport](https://datatracker.ietf.org/doc/html/rfc2565)\r\n       * [RFC 2566 - Internet Printing Protocol/1.0: Model and Semantics](https://datatracker.ietf.org/doc/html/rfc2566)\r\n       * [RFC 2567 - Design Goals for an Internet Printing Protocol](https://www.rfc-editor.org/rfc/rfc2567.html)\r\n       * [RFC 2568 - Rationale for the Structure of the Model and Protocol for the Internet Printing Protocol](https://www.rfc-editor.org/rfc/rfc2568)\r\n       * [RFC 2639 - Internet Printing Protocol/1.0: Implementor's Guide](https://www.rfc-editor.org/rfc/rfc2639)\r\n       * [RFC 2569 - Mapping between LPD and IPP Protocols](https://www.rfc-editor.org/rfc/rfc2569.html)\r\n       \r\n       **IPP 1.1**\r\n       * [~RFC 2910 (obsolete) - Internet Printing Protocol/1.1: Encoding and Transport~](https://www.rfc-editor.org/rfc/rfc2910)\r\n       * [~RFC 2911 (obsolete) - Internet Printing Protocol/1.1: Model and Semantics~](https://www.rfc-editor.org/rfc/rfc2911)\r\n       * [RFC 3196 - Internet Printing Protocol/1.1: Implementor's Guide](https://www.rfc-editor.org/rfc/rfc3196.html)\r\n       * [RFC 3510 - Internet Printing Protocol/1.1: IPP URL Scheme](https://www.rfc-editor.org/rfc/rfc3510.html)\r\n       * [RFC 7472 - Internet Printing Protocol (IPP) over HTTPS Transport Binding and the 'ipps' URI Scheme](https://www.rfc-editor.org/rfc/rfc7472.html)\r\n       * [RFC 8010 - Internet Printing Protocol/1.1: Encoding and Transport](https://www.rfc-editor.org/rfc/rfc8010.html)\r\n       * [RFC 8011 - Internet Printing Protocol/1.1: Model and Semantics](https://www.rfc-editor.org/rfc/rfc8011.html)\r\n       \r\n       **IPP 2.0, 2.1 and 2.2**\r\n       * [PWG 5100.10-2009](https://ftp.pwg.org/pub/pwg/candidates/cs-ipp20-20090731-5100.10.pdf)\r\n       * [PWG 5100.12-2015](https://ftp.pwg.org/pub/pwg/standards/std-ipp20-20151030-5100.12.pdf)\r\n\r\n[^2]:\r\n    **Win32 APIs** \r\n    * [Print Spooler API](https://learn.microsoft.com/en-us/windows/win32/printdocs/print-spooler-api)\r\n    * [Print Document Package API](https://learn.microsoft.com/en-us/windows/win32/printdocs/tailored-app-printing-api)\r\n    * [Print Ticket API](https://learn.microsoft.com/en-us/windows/win32/printdocs/print-ticket-api)\r\n    * [GDI Print API](https://learn.microsoft.com/en-us/windows/win32/printdocs/gdi-printing)\r\n    * [~XPS Print API (depr.)~](https://learn.microsoft.com/en-us/windows/win32/printdocs/xps-printing)",
          "createdAt": "2022-09-19T18:06:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-06T16:13:53Z",
          "id": "IC_kwDODI9FZc5KlluE"
        },
        {
          "author": "krwq",
          "body": "@deeprobin it's true majority of the devices are I2C/SPI based but there are some exceptions, i.e. [still picture](https://github.com/dotnet/iot/blob/main/src/devices/Media/README.md) or [RFID/NFC](https://github.com/dotnet/iot/tree/main/src/devices#rfidnfc-modules) devices - while device itself would maybe sometimes match criteria, reading data is way out of scope and is super complex but it would make device pointless without it. Then we have some other border-line devices i.e. [NMEA 0183](https://github.com/dotnet/iot/blob/main/src/devices/Nmea0183/README.md) - the device is serial port but protocol is essentially rather advanced parser or [FT4222](https://github.com/dotnet/iot/blob/main/src/devices/Ft4222/README.md) which is a USB device which requires external driver but exposes GPIO/I2C/SPI so we added it for easier interop between that and other devices.\r\n\r\nAs for naming it predates me but System.Device.Gpio is only used for implementing generic purpose protocols and I think singular refers to specific protocol in use at a moment. Iot.Device.Bindings has plural form though and that's where devices live.\r\n\r\nRegardless dotnet/iot seems like better match than dotnet/runtime even if it's not perfect and can be used as a stop (Iot.Device.Bindings specifically where making justified breaking changes is ok). If it grows too large we could potentially make this a separate nuget package.",
          "createdAt": "2022-09-21T08:25:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-21T08:26:49Z",
          "id": "IC_kwDODI9FZc5KtPIr"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nI have noticed that there is still a big flaw in printing in the .NET environment.\r\n\r\nEven in an age of digitalization, printers are used extensively. In companies to print labels, delivery bills or labels, in the private environment to print documents, tax returns and many other applications.\r\n\r\nUnfortunately, there is still no really good print library in the .NET environment. There is [`System.Drawing.Printing`](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Drawing.Common/src/System/Drawing/Printing) and the C++/CLI library in the WPF repository [`System.Printing`](https://github.com/dotnet/wpf/tree/main/src/Microsoft.DotNet.Wpf/src/System.Printing).\r\nBoth are strictly limited to Windows, already very legacy and very limited.\r\n\r\nThe more companies move into the cloud, the more important it is to make the whole thing platform-independent.\r\n\r\nMy suggestion is to add an API that \r\n* provides low level access to the printing protocols\r\n  * IPP Naming suggestion: `System.Printing.Ipp` (the protocol which is used by CUPS)\r\n  * SMB - Naming suggestion: `System.Printing.Smb` (if there are no licensing problems, because SMB is proprietary)\r\n  * Native printers (Windows printing apis / installed printers) - `System.Printing.Builtin` \r\n* An abstraction over these protocols / universal api: `System.Printing`\r\n\r\nAs you can easily see my suggestion is to recreate `System.Printing` even if this API already exists in WPF (I could well imagine that WPF would then use this API in the long run).\r\n\r\nIt would make sense to distribute this API as a Nuget package for this reason instead of including it in the BCL.\r\n\r\n---\r\n\r\nThe whole thing here is just a rough wish. I have heard especially in the company where I work as well as from other companies that they really want something like this and therefore a real-world case is there.\r\n\r\nFeel free to leave your feedback. Since this would be a larger project, if there is an interest on the part of Microsoft and the community, I would deal with it in detail and create API Proposals.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>deeprobin</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-09-21T18:48:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-21T18:48:11Z",
          "id": "IC_kwDODI9FZc5Kv_yR"
        },
        {
          "author": "ericstj",
          "body": "@deeprobin do you know of any community projects that aim to fill this gap?  While we are .NET library experts we aren't aiming to write every possible library that applications might need.",
          "createdAt": "2022-09-21T18:51:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-21T18:51:55Z",
          "id": "IC_kwDODI9FZc5KwApf"
        },
        {
          "author": "deeprobin",
          "body": "> do you know of any community projects that aim to fill this gap? \r\n\r\nSpecifically this gap as I have described not.\r\n\r\nThere is a project called [SharpIpp](https://github.com/Zelenov/SharpIpp) which implements an IPP client although this implementation has probably fallen asleep a bit and only supports limited features of this protocol.\r\n\r\ntagging the author to possibly give his mustard here: @Zelenov\r\n\r\n\r\n> While we are .NET library experts we aren't aiming to write every possible library that applications might need.\r\n\r\nThat is, of course, clear. But this is an essential API in my opinion.\r\n\r\nMany companies (at least in Germany) that do not use SAP and have their own ERP system mostly use C#.\r\nPrinting is needed for a good supply chain like e.g. label printing.\r\nMany currently map this via Windows and then run their WebApp via Windows on a server.\r\n\r\n\r\nPrinting is an essential function. And the .NET libraries are there for essential functions in my opinion.\r\n\r\nOf course, a small e-commerce company probably only needs something like this in exceptional cases. But as soon as it goes in the direction of logistics, there are, for example, customs documents that are printed, etc..\r\n\r\nI'm not talking about adding this to the runtime repository anymore. But as an external NuGet package this is certainly very used.\r\n\r\n> While we are .NET library experts we aren't aiming to write every possible library that applications might need.\r\n\r\nIn addition, there are currently already libraries in the .NET runtime that not every use case needs. Without downplaying the value of these libraries, one could for example use Tar, Brotli, Cbor, ... could also be classified as \"every possible library\".\r\n\r\nThe implementation is important, even if the actual demand is probably not too big.\r\n",
          "createdAt": "2022-09-21T20:07:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-10-12T08:52:08Z",
                "user": "sicklittlemonkey"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-12-13T04:41:22Z",
                "user": "MineCake147E"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-28T23:17:17Z",
                "user": "edwardneal"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-09T21:33:47Z",
                "user": "julealgon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-24T05:19:34Z",
                "user": "Varorbc"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOELIMPg=="
          },
          "updatedAt": "2022-09-21T20:08:11Z",
          "id": "IC_kwDODI9FZc5KwTIw"
        },
        {
          "author": "edwardneal",
          "body": "This'd be quite useful, and there seems to be a gap for it. .NET's printing ecosystem needs a little attention over the next few versions. Some of it is tightly coupled to the GUI, (albeit for good reason at the time) while other parts haven't kept pace with the cross-platform transition.\r\n\r\nIf we want to print a document right now, we've got a few different options:\r\n* Windows Forms has PrintDocument\r\n* UWP/WinRT has Windows.Graphics.Printing.PrintManager\r\n* WPF has System.Printing\r\n* WinUI has nothing ([sort of](https://github.com/microsoft/microsoft-ui-xaml/issues/4419))\r\n* Maui has nothing\r\n* Blazor has a third-party component\r\nStepping from the simplest view of a UI-based print application, backend services like Windows services need to draw in System.Windows.Forms. Sending a document to a cloud print queue (such as Azure Universal Print) isn't possible using the normal interfaces, and if we want to print from Linux applications of any kind then we need to use a third-party library like SharpIpp.\r\n\r\nThere are also other tasks which we'd reasonably view as printing, but which don't necessarily fit into the current object model. This can include things like barcode/label printing, and 3D printing.\r\n\r\nIf .NET had a clear printing-related object model, we'd be able to provide a common interface for all of the above, and eventually expand it with cross-platform implementations; the current options could then be deprecated. I think there might be a case for .NET to have two implementations (for Windows and Linux/MacOS support) at some point, but just having that common interface would be a useful starting point. I'd eventually hope to see libraries for third-part printer types (whether that's a cloud printing service, a Klipper/Moonraker 3D print API, or something else.)\r\n\r\nThis model would only cover submitting, managing and streaming data to print jobs. The hardware-specific tasks (paper tray status, printer bed temperature, ink levels) could easily go in dotnet/iot, as suggested - it's too tied to the physical hardware, when the Windows spooler and CUPS both work with print queues.\r\n\r\nWith this type of approach, a user would be able to print a document in one or two ways:\r\n* Generate an [EMF](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/91c257d7-c39d-4a36-9b1f-63e3f73d30ca) context using System.Drawing.Common and submit it to a Winspool \"print queue provider\", streaming it page by page\r\n* Read a PDF document from disk and submit it to an IPP Anywhere print queue provider\r\n* Use a custom provider to generate ZPL commands and submit it to either of these print queue providers, sending it to a Zebra label printer\r\nData would effectively flow from a typed object, through a translation layer, into the print queue provider. The print queue provider manages the underlying queue.\r\n\r\nI think this'd mean that less work is taken on than we'd expect: a common design for the object model, one (perhaps two) translation layers (the first being a simple \"pass through from Stream\", the second possibly allowing the rendering of a Graphics object to an EMF HDC) and either one or two print queue providers for the Windows spooler or CUPS.\r\n\r\nCould we consider starting this work for .NET 9/10?",
          "createdAt": "2024-01-29T07:52:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-29T07:52:39Z",
          "id": "IC_kwDODI9FZc5yF3x4"
        },
        {
          "author": "edwardneal",
          "body": "I've thought about an API design, hopefully to start a discussion of the amount of work required. I'd be happy to help with that work, but it's foundational enough that I think it should definitely be part of a .NET package rather than a community library. Windows Forms, WPF and WinRT have the functionality built in, so there's some precedent there (and being able to unlock printing on Linux is nice too.)\r\n\r\nI'd suggest three layers:\r\n1. Base object model, which models a generic set of print queues, jobs and job segments\r\n2. \"Guardrail object model\" which inherits from 1. and gives developers a point to inherit from if they want to print a paginated document or similar\r\n3. Implementation - largely platform-specific, but following the base object model\r\n\r\n### Base object model ###\r\nThis lays down the fundamental structure of the printing model:\r\n1. A platform and/or service has one or more PrintQueueProviders. These might be Winspool on Windows, CUPS on Linux, a 3D printer, etc. The PQP has the responsibility to handle transport to the service, authentication and enumeration of print queues.\r\n2. A PrintQueueProvider has multiple PrintQueues. Each print queue just maps to a single native queue. It's addressable by name, we don't put any further constraint on it. It doesn't refer to hardware at all - if we want, that's handled by something in dotnet/iot. A PrintQueue may print one kind of PrintJob.\r\n3. A PrintJob is exactly as expected. It's got a unique identifier, name, status, etc., and it can be paused, resumed, cancelled. It might also have other properties depending upon its derived types. Most importantly, it also has one or more linked lists of JobSegments. Every linked list refers to one kind of JobSegment. I've added this simply to leave the door open for more complex operations, most of the time there'll be exactly one linked list of JobSegments.\r\n4. A JobSegment is usually a page in the document. It has a sequence number, it has a byte array associated with it, it might have other properties (in the case of pages, this could be orientation, margins, etc.)\r\n\r\nI'd only expect these to have basic routing in them, providing an interface for the creation of jobs, and the streaming of job segments (probably from an IAsyncEnumerable)\r\n\r\n<details>\r\n<summary>Initial API shape</summary>\r\n\r\n```csharp\r\npublic abstract class PrintQueueProvider\r\n{\r\n    // Gets all queues capable of handling a specific type of print job.\r\n    public abstract IAsyncEnumerable<IPrintQueue<TPrintJob>> EnumerateQueuesAsync<TPrintJob>()\r\n        where TPrintJob : PrintJob<TPrintJob>;\r\n    // Gets a queue by its name and print job type. A print queue might support multiple\r\n    // job types (e.g. sending raw printer command jobs, and printing a raster image.)\r\n    // In such a case, the queue class would implement IPrintQueue of each job type.\r\n    public abstract ValueTask<IPrintQueue<TPrintJob>> GetQueueAsync<TPrintJob>(string name)\r\n        where TPrintJob : PrintJob<TPrintJob>;\r\n}\r\n\r\npublic interface IPrintQueue<TPrintJob>\r\n    where TPrintJob : PrintJob<TPrintJob>\r\n{\r\n    // Creates a single job of type TPrintJob, using segmentFactory to convert from a managed\r\n    // object into a list of job segments. This might cover a single segment of raw printer commands, or\r\n    // it might accept a paginated document's list of pages.\r\n    ValueTask<TPrintJob> CreateJobAsync<T, TJobSegment>(T sourceObject,\r\n        Func<T, IAsyncEnumerable<TJobSegment>> segmentFactory)\r\n        where TJobSegment : JobSegment<TJobSegment>;\r\n\r\n    // Enumerates all jobs in the queue.\r\n    IAsyncEnumerable<TPrintJob> EnumerateJobs();\r\n}\r\n\r\npublic abstract class PrintJob<TSelf>\r\n    where TSelf : PrintJob<TSelf>\r\n{\r\n    // <common properties - DateQueued, DateStarted, TotalSegments, SegmentsPrinted, SegmentsGenerated>\r\n    public JobStatus Status { get; protected set; }\r\n    public string Title { get; private set; }\r\n    public int Identifier { get; protected set; }\r\n\r\n    // Gets the first segment in the linked list - page one, or the initial setup commands for a 3D printer.\r\n    public abstract ValueTask<TJobSegment> GetFirstSegmentAsync()\r\n        where TJobSegment : JobSegment<TJobSegment>;\r\n\r\n    // Indicates whether this print job will ever allow a particular job segment type.\r\n    public abstract bool SupportsSegmentType<TJobSegment>()\r\n        where TJobSegment : JobSegment<TJobSegment>;\r\n\r\n    // Command and wait methods\r\n    public abstract ValueTask PauseAsync();\r\n    public abstract ValueTask ResumeAsync();\r\n    public abstract ValueTask CancelAsync();\r\n    public abstract ValueTask WaitForStatusAsync(JobStatus status);\r\n    public abstract ValueTask WaitForSegmentAsync(int segmentNumber);\r\n}\r\n\r\npublic abstract class JobSegment<TSelf>\r\n    where TSelf : JobSegment<TSelf>\r\n{\r\n    public int SequenceNumber { get; private set; }\r\n\r\n    // Gets the data to be sent to the printer in a printer-recognisable format (e.g. EMF, PostScript, GCode)\r\n    public abstract ValueTask<ReadOnlyMemory<byte>> GetSegmentDataAsync();\r\n\r\n    // Gets the next segment. Returns null if this is the last segment.\r\n    public async ValueTask<TSelf?> GetNextSegmentAsync();\r\n}\r\n```\r\n</details>\r\n\r\n### \"Friendly\" object model ###\r\nThis abstracts the raw model which treats print job page data as a binary blob, and exposes it as an object model which a developer could reasonably work with - and more importantly, it means that all downstream clients have a consistent view of obvious abstractions, such as a paginated print job.\r\n\r\n<details>\r\n<summary>Initial API shape</summary>\r\n\r\n```csharp\r\npublic abstract class PaginatedRasterPrintJob : PaginatedPrintJob\r\n{\r\n}\r\n\r\npublic abstract class PaginatedPrintJob : PrintJob<PaginatedPrintJob>\r\n{\r\n    public override bool SupportsSegmentType<TJobSegment>()\r\n        => typeof(Page).IsAssignableFrom(typeof(TJobSegment));\r\n}\r\n\r\npublic abstract class Page : JobSegment<Page>\r\n{\r\n}\r\n```\r\n</details>\r\n\r\n### Implementation ###\r\nMost of the above work is design-based, with some code to plumb data through to individual job segments. The core implementation work here would be to fold Windows' print spooler into this design, then to add an IPP Anywhere implementation to enable CUPS on Linux and Mac. I'm happy to help with that.\r\n\r\nI'd also add the two higher-level utility classes I mentioned a while ago: one which reads from a Stream and outputs a single JobSegment, and another which accepts a Graphics object and outputs it to a printer as a raster image. These enable three scenarios:\r\n1. Direct signalling of a more complex printer (such as a Zebra printer, which uses a different control language.)\r\n2. Sending PDF and OpenXPS documents to an IPP printer capable of processing them, cutting out all GUI components which are currently in the middle\r\n3. Clears the way for Windows Forms to use it (and eventually, WPF/WinRT/WinUI/Maui)",
          "createdAt": "2024-02-10T21:06:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-10T23:38:01Z",
                "user": "Varorbc"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-11T00:04:55Z",
                "user": "Khitiara"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-27T09:36:44Z",
                "user": "Kalyxt"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODYZUGA=="
          },
          "updatedAt": "2024-02-10T21:06:35Z",
          "id": "IC_kwDODI9FZc5zdn4q"
        },
        {
          "author": "deeprobin",
          "body": "@edwardneal \r\n\r\nThank you for your initiative and the first draft proposal for the API shape.\r\nI really like it in principle.\r\n\r\nI'd still like a few refinements such as cancellation tokens for the asynchronous methods, but otherwise I think it's a good place to start.\r\n\r\nHowever, I'm still a little undecided myself.\r\nFunctions such as pause, resume and cancel are of course important functions in the area of printing. \r\n\r\nThe Windows Print Queue & (probably) CUPS also support this in any case.\r\nIPP also supports these functions - but again, I'm not sure if it's guaranteed.\r\n\r\nHowever, if we manually communicate \"RAW\" with our printer via TCP, I have no idea how we can pause or even cancel the print - these are perhaps special functions in e.g. ZPL or PCL, but nothing related to the print transport.\r\n\r\nMaybe it would make sense to introduce a property like \"IsPauseSupported\" and throw a NotSupportedException in the method if it is not supported.\r\n\r\nAnother idea would be to build individual interfaces for the individual functions, similar to BCL with Generic Math.\r\n\r\n@krwq What do you think of this proposal?",
          "createdAt": "2024-02-18T17:22:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-18T17:22:57Z",
          "id": "IC_kwDODI9FZc50T987"
        },
        {
          "author": "edwardneal",
          "body": "Thanks. I've split the responsibilities apart into three main areas:\r\n* Communication with the spooler/queue provider (whether contacted via PInvoke or HttpClient) is handled by the PrintQueueProvider instance. This is essentially the transport and authentication layer.\r\n* Conversion of a managed .NET object (such as a Bitmap, or a pass-through Stream) to a stream of `JobSegment` objects is the responsibility of `IPrintQueue.CreateJobAsync`'s `segmentFactory` parameter.\r\n* Within each JobSegment, `GetSegmentDataAsync` is responsible for generating data to be sent to the spooler (whether that's a PDF or OpenXPS document sent to IPP, PostScript commands sent to the Windows spooler, etc.)\r\n\r\nI'd personally expect the cancellation of the print job to signal the print spooler, and the spooler would handle the underlying printer comms. Azure Universal Print is a useful example here: the client will probably never be able to contact the underlying printer, but that doesn't matter because it's sending the command to the AUP service. In some restricted enterprise networks, the \"local queue\" presented by the Windows print spooler might actually sit on a remote print server, and the client is firewalled away from the printer itself.\r\n\r\nThis should hopefully simplify things a little, because it means that we don't need to worry about developing for an unbounded set of printer protocols - we could just call [SetJob](https://learn.microsoft.com/en-us/windows/win32/printdocs/setjob) or invoke a Cancel-Job operation and run.\r\n\r\nCancellationTokens make a lot of sense. It could be unexpected if we're making REST calls and we invoke the CancellationToken after the IPP server has performed the action but before it's returned a response to the client. I think that's just a matter of documentation though - practically anything could fall into that category, it's just more obvious when there's something coming out the printer!\r\n\r\nWe might need quite a few properties like \"IsPauseSupported\". I'm not sure whether we'd want to have that, a Stream-style `CanPause` property on the PrintJob, a `CapabilitySupported(PrintCapability.Pause)` approach or an `IPrintQueueProviderWhichSupportsPausingJobs` interface. It probably needs to support situations where the PrintQueueProvider supports pausing print jobs, but one specific print job has transitioned to a state which is unpausable (e.g., it's being cancelled, or it's in the final stages of completing.)",
          "createdAt": "2024-02-18T18:21:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-18T18:21:01Z",
          "id": "IC_kwDODI9FZc50UBcg"
        },
        {
          "author": "deeprobin",
          "body": "> I'd personally expect the cancellation of the print job to signal the print spooler, and the spooler would handle the underlying printer comms. Azure Universal Print is a useful example here: the client will probably never be able to contact the underlying printer, but that doesn't matter because it's sending the command to the AUP service. In some restricted enterprise networks, the \"local queue\" presented by the Windows print spooler might actually sit on a remote print server, and the client is firewalled away from the printer itself.\r\n \r\nPerhaps we could include the product owners of Azure Universal Print in this topic. \r\n\r\nThey already have this Universal Print product, which could benefit from this API.\r\nAs far as I know, Universal Print is currently implemented in .NET.\r\n\r\n> CancellationTokens make a lot of sense. It could be unexpected if we're making REST calls and we invoke the CancellationToken after the IPP server has performed the action but before it's returned a response to the client. I think that's just a matter of documentation though - practically anything could fall into that category, it's just more obvious when there's something coming out the printer!\r\n\r\nI think a cancellation token must be present on the asynchronous methods in any case.\r\n\r\nIn this case, a cancellation would only affect the current operation and not the entire print job.\r\nAs far as I know, this is also the usual scheme.\r\n\r\nIf a REST call is cancelled (e.g. socket close), I would expect the remote not to execute it either.\r\n\r\nBut as you say, this would have to be documented.\r\n\r\n\r\n---\r\n\r\nWhat I have now noticed afterwards:\r\n\r\nIn your proposal, you also define a \"Status\" property at PrintJob level.\r\n\r\nStatus is a frequently changing property. Especially where the print queues are \"externally managed\" (e.g. on the printer or print server), you would have to execute a request every time to keep them up to date.\r\n\r\nWouldn't an asynchronous method with a ValueTask return make sense here?\r\n\r\nSomething like:\r\n```cs\r\npublic abstract partial class PrintJob<TSelf>\r\n    where TSelf : PrintJob<TSelf>\r\n{\r\n    public ValueTask<JobStatus> GetJobStatusAsync(CancellationToken cancellationToken = default);\r\n}\r\n```\r\n\r\n---\r\n\r\nI think we should generally try to stick to the Print Working Group (PWG) in this area, as these printing topics are already dealt with very thoroughly there. \r\n\r\nThere is generally a [semantic model](https://www.pwg.org/sm/model.html) there, which could perhaps help us in future proposals.",
          "createdAt": "2024-02-24T17:33:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-24T17:33:21Z",
          "id": "IC_kwDODI9FZc50-FJ3"
        },
        {
          "author": "edwardneal",
          "body": "Making the Status property an async function sounds sensible to me. The Windows spooler is synchronous, but on Linux (and for anything remote) that probably won't hold true.\r\n\r\nThe PWG have some useful publications. Pages 35-37 of the [IPP Shared Infrastructure Extensions](https://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf) list common operations, which would help inform the appropriate interface on PrintJob and PrintQueue. A lot of their data model also makes sense, and at a glance, there's a lot of overlap with the Windows print spooler - there are only so many ways to reinvent that wheel!\r\n\r\nThe mandated operations for an IPP client look pretty sensible:\r\n* Cancel-Job / Cancel-My-Jobs\r\n* Close-Job\r\n* Create-Job\r\n* Get-Job-Attributes\r\n* Get-Printer-Attributes\r\n* Send-Document\r\n\r\nThe recommended ones also seem reasonable:\r\n* Cancel-Subscription / Create-Job-Subscriptions / Create-Printer-Subscriptions / Get-Notifications / Renew-Subscription\r\n* Identify-Printer\r\n* Validate-Document / Validate-Job\r\n\r\nI'd also add a few of the optional operations too:\r\n* Get-Jobs / Set-Job-Attributes\r\n* Get-Printer-Supported-Values\r\n* Get-Subscriptions / Get-Subscription-Attributes\r\n* Hold-Job / Resume-Job / Resubmit-Job\r\n\r\nI think there's value in looking for overlap between the widest variety of printers: the PWG standards, Winspool's prior art, one of the more unusual printers (I've referred to Zebra printers, but the goal's just to find a printer which isn't a standard inkjet / laser printer) and a 3D printer. Hopefully if there's anything key which overlaps between them, it can go in the root PrintJob class.\r\n\r\nSpeaking more widely to anyone looking at this from the .NET teams: which way around should this go? Do we need a firm API proposal to request a `System.Printing` library, or should we start with agreement in principle to provide a `System.Printing` library and then start fleshing out the API proposals?",
          "createdAt": "2024-02-24T21:56:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-24T21:56:18Z",
          "id": "IC_kwDODI9FZc50_QzA"
        },
        {
          "author": "deeprobin",
          "body": "> Making the Status property an async function sounds sensible to me. The Windows spooler is synchronous, but on Linux (and for anything remote) that probably won't hold true.\r\n\r\nYes, CUPS seems to be very \"async\" - many functions have callbacks.\r\nBut android.print seems very synchronous (but I think this is still common in the Java environment - no CompletableFutures, ...)\r\n\r\nIs perhaps the person responsible for the WinNT Print Spooler also here somewhere on GitHub? (cc MSFT)\r\nMaybe he can also give us some information in this context as far as it does not violate internal things at Microsoft.\r\n\r\n> Speaking more widely to anyone looking at this from the .NET teams: which way around should this go? Do we need a firm API proposal to request a `System.Printing` library, or should we start with agreement in principle to provide a `System.Printing` library and then start fleshing out the API proposals?\r\n\r\nIn principle, such APIs should always be proposed at some point in order to comply with the typical API review process.\r\nHowever, I think it will be sufficient to deal with them in detail only when the maintainers have given the green light, as this API probably goes beyond a few methods.\r\n\r\n@ericstj @bartonjs \r\nCould one of you take a look at the topic and possibly address it internally before we discuss it further?\r\n\r\n",
          "createdAt": "2024-02-24T22:36:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-25T16:07:22Z",
                "user": "edwardneal"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODYJZzg=="
          },
          "updatedAt": "2024-02-24T22:36:36Z",
          "id": "IC_kwDODI9FZc50_Sgq"
        },
        {
          "author": "deeprobin",
          "body": "Hey @michaelrsweet,\r\n\r\nI hope you don't mind me pinging you here.\r\n\r\nWe are currently discussing what a universal printing API in the .NET environment could look like in general.\r\nDo you have any fundamental additions to the current \"draft proposal\" from the PWG's point of view?\r\n",
          "createdAt": "2024-02-26T17:38:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-26T17:38:15Z",
          "id": "IC_kwDODI9FZc51G15j"
        },
        {
          "author": "wstaelens",
          "body": "2024 and still no printing in MAUI. What a joke.\r\n\r\n\r\nhttps://github.com/dotnet/runtime/issues/78629",
          "createdAt": "2024-05-15T09:25:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-15T09:26:12Z",
          "id": "IC_kwDODI9FZc594tEC"
        },
        {
          "author": "michaelrsweet",
          "body": "@deeprobin Sorry I just saw this bug (not sure why I didn't get the notification)... I'll add my comments later today...\r\n",
          "createdAt": "2024-05-15T14:42:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-15T14:42:36Z",
          "id": "IC_kwDODI9FZc597dFz"
        },
        {
          "author": "michaelrsweet",
          "body": "OK, so initial comments:\r\n\r\n- Base your Client API on [IPP Everywhere](https://ftp.pwg.org/pub/pwg/candidates/cs-ippeve11-20200515-5100.14.pdf) since all of the driverless network/USB printing \"standards\" are either based on it or compatible with it.\r\n- While you will have some use cases for using printer-specific \"Page Description Languages\" (PDLs) like ZPL, the focus should be on higher-level formats like PDF for documents and JPEG/PNG for images.\r\n- The local spooler (whatever it is) should handle the actual communication with the printer since most printers can't handle spooling.\r\n- Some platforms have persistent print queues, others are transient lasting only as long as print jobs are active, some are a hybrid (CUPS is like this).\r\n\r\nWRT printing not being commonly used by applications, that is IMHO a fairly myopic view of things. Printing is a key part of shipping (200,000,000,000 packages per year with shipping labels, packing lists, and hazard labels), medicine (wrist bands, drug prescriptions, test reports, \"replacement parts\", etc.), and commerce (invoices, receipts, etc.)  In some cases the content you are printing might be provided electronically (particularly packing lists, test reports, invoices, and receipts) but you still need to produce the content even if you don't print it.\r\n\r\nSo I think a key part of any printing API is an API for producing (paginated) documents that can be printed, emailed, saved, etc.\r\n\r\n",
          "createdAt": "2024-05-15T15:22:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-15T15:26:09Z",
                "user": "jamesport079"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-15T23:10:40Z",
                "user": "Khitiara"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-16T18:36:57Z",
                "user": "edwardneal"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-22T08:02:12Z",
                "user": "deeprobin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T08:46:53Z",
                "user": "kitgrose"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODjDiKQ=="
          },
          "updatedAt": "2024-05-15T15:22:04Z",
          "id": "IC_kwDODI9FZc5973eb"
        },
        {
          "author": "wstaelens",
          "body": "> * XPS Print API (depr.)\r\n\r\nXPS Print isn't depricated @deeprobin ...",
          "createdAt": "2024-05-22T07:46:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-22T07:46:36Z",
          "id": "IC_kwDODI9FZc5-myhI"
        },
        {
          "author": "deeprobin",
          "body": "> > * XPS Print API (depr.)\r\n> \r\n> XPS Print isn't depricated @deeprobin ...\r\n\r\n@wstaelens \r\nAre you sure? \r\nMaybe \"de facto deprecated\".\r\n\r\nThe Win32 docs don't recommend them very good.\r\nSee https://learn.microsoft.com/en-us/windows/win32/printdocs/xps-printing\r\n\r\n> [The XPS Print API is not supported and may be altered or unavailable in the future. Client applications should use the [Print Document Package API](https://learn.microsoft.com/en-us/windows/win32/printdocs/tailored-app-printing-api) instead.]",
          "createdAt": "2024-05-22T07:55:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-09T21:35:11Z",
                "user": "julealgon"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODtfV-w=="
          },
          "updatedAt": "2024-05-22T07:55:49Z",
          "id": "IC_kwDODI9FZc5-m2n5"
        },
        {
          "author": "wstaelens",
          "body": "Still seeing it a lot in the wild....",
          "createdAt": "2024-05-22T08:55:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-22T08:55:21Z",
          "id": "IC_kwDODI9FZc5-nT2h"
        },
        {
          "author": "edwardneal",
          "body": "Thanks @michaelrsweet, modelling a client API round IPP Everywhere makes perfect sense. Your point around temporary print queues is also helpful: it seems to me that if .NET gains printing support in the future, it'd be best to think in terms of \"print destinations\" or similar, so as to specifically avoid a situation where .NET refers to something as a \"print queue\", while Windows might send the data to a Print Document Package-style printing app, CUPS might send it to a Printer Application's IPP endpoint, etc.\r\n\r\nAny future object model should probably separate concerns similarly to CUPS and IPP. I think the Windows printing API (whether that's Winspool or a Print Document Package API) can fit fairly tidily within this:\r\n* Discovery (which might be a set of API calls to the Windows spooler API or to CUPS, direct multicast discovery, web API calls to Azure Universal Print, etc.)\r\n    * This would need to include some capability discovery for things like media types, etc.\r\n* Transport. In some cases, the \"transport\" might just be calls to the Windows spooler/CUPS API. In other cases, I imagine someone might want to write their own.\r\n* Job management. This would always need to be handled by the OS' spooler.\r\n* Document and page management. The Windows spooler runs page-by-page and assumes exactly one document per job. The CUPS/IPP object model seems to expect at least one document per job.\r\n* Streamed PDL / binary blobs within a document.\r\n    * There's some overlap here with the discovery process, as the client selects the PDL it prefers.\r\n\r\nSome implementations of the discovery and the transport layers would be a better fit for the dotnet/iot repo, or for user libraries. I'd expect the generation of the PDL / paginated documents to also be handled completely by user libraries. However, for printing support to be useful in things like Windows services, WPF, ASP.NET Core and Windows Forms, a core object model needs to be in the basic runtime, as does an implementation of Winspool / CUPS which is exposed via that model.\r\n\r\nThis would go a long way to undoing the fragmentation which is currently in place across WinForms, UWP and WPF, and also provides a starting point for Maui (and perhaps ASP.NET Core.) A community library can't cover these platforms: even if it takes a long time, the end goal would hopefully be for the OOTB common controls for each UI framework to wrap around the same common object model (ideally, with community libraries building pluggable platform-specific discovery, data formatting or transport components.)\r\n\r\nComing back to the wider point about printing in general: it's probably not a headline feature of a major .NET release, but it remains important. Physical paper documents are sometimes required for legal/contractual reasons; paginated reports are generated by software like SQL Server Reporting Services; practically any warehouse will print finished goods labels. At the moment, .NET doesn't present a clear, cross-platform way for developers to engage with printing (whether that's a traditional printer in an office, something in an industrial setting which requires lower-level control over the same operations like a label printer, or something more unusual such as a 3D printer.)\r\n\r\nIf .NET 10 has an object model and 2-3 basic implementations which expose Winspool, CUPS and potentially the Print Document Package API, it starts to unblock consistent cross-platform functionality in most of the downstream implementations.",
          "createdAt": "2024-05-22T19:03:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-19T16:12:23Z",
                "user": "Applesauce314"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEG6K7Q=="
          },
          "updatedAt": "2024-05-22T19:03:37Z",
          "id": "IC_kwDODI9FZc5-sVEH"
        },
        {
          "author": "GuildOfCalamity",
          "body": "Printing in **WinUI3** is still broken and it doesn't seem like anyone is trying to fix it. Many of us still need the ability to print to PDF, print to file, etc. [similar issue](https://github.com/microsoft/microsoft-ui-xaml/issues/4419)\r\n",
          "createdAt": "2024-08-09T19:14:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-12T12:13:46Z",
                "user": "rufw91"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEJj8Wg=="
          },
          "updatedAt": "2024-08-09T19:14:17Z",
          "id": "IC_kwDODI9FZc6H0Hho"
        },
        {
          "author": "Varorbc",
          "body": "@jeffhandley What do you think about this? Is it possible to include it in the .NET 10 plan?",
          "createdAt": "2025-03-24T05:28:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2025-03-24T08:05:17Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOELJMiQ=="
          },
          "updatedAt": "2025-03-24T05:28:04Z",
          "id": "IC_kwDODI9FZc6jutlG"
        },
        {
          "author": "jeffhandley",
          "body": "We will not be able to include this in our team's backlog for .NET 10. It's unlikely the .NET team will be able to invest in this any time soon. If there are folks interested in starting up a community project to fill this gap, that is likely the best course of action.",
          "createdAt": "2025-03-24T16:03:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "CONFUSED",
                "createdAt": "2025-05-08T09:43:16Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOERTVxw=="
          },
          "updatedAt": "2025-03-24T16:03:13Z",
          "id": "IC_kwDODI9FZc6j1PGi"
        }
      ],
      "totalCount": 29,
      "endCursor": "Y3Vyc29yOnYyOpHOo9Txog=="
    },
    "url": "https://github.com/dotnet/runtime/issues/75628",
    "title": "[Feature Request]: Modern library for printer communication and print control"
  },
  {
    "author": "lbussell",
    "labels": [
      "area-Meta",
      "source-build"
    ],
    "createdAt": "2022-09-27T16:33:21Z",
    "body": "We are encountering build errors when building with the latest internal compiler in source-build. It gives error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type. It also gives several CS8500 warnings.\r\n\r\nHere is a link to the internal build failure: https://dev.azure.com/dnceng/internal/_build/results?buildId=2004504&view=logs&j=2d3d5aef-8fa7-5ecd-0b12-6aebb43b720c&t=9b89cfd5-8b4c-5686-5153-a3d2912d1018&l=25741 (internal MS link)\r\n\r\n```\r\n/tarball/src/runtime/artifacts/source-build/self/src/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/DynamicInvokeInfo.cs(329,26): error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('ByReference') [/tarball/src/runtime/artifacts/source-build/self/src/src/coreclr/nativeaot/System.Private.CoreLib/src/System.Private.CoreLib.csproj]\r\n```\r\n\r\nHere is a link to the [CS0208 Documentation](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0208).\r\n\r\nIs there a simple fix for this that we can implement as a patch ASAP?\r\n\r\ncc @AaronRobinsonMSFT @MichaelSimons @crummel ",
    "number": 76255,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2022-09-27T17:24:11Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2022-09-27T16:33:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-27T16:33:24Z",
          "id": "IC_kwDODI9FZc5LFnqM"
        },
        {
          "author": "jkotas",
          "body": "We need the change that @jcouv prepared here: https://github.com/dotnet/roslyn/pull/64064#issue-1375174558",
          "createdAt": "2022-09-27T17:04:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-09-27T17:06:48Z",
                "user": "AaronRobinsonMSFT"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCs5iZQ=="
          },
          "updatedAt": "2022-09-27T17:04:22Z",
          "id": "IC_kwDODI9FZc5LFwKK"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nWe are encountering build errors when building with the latest internal compiler in source-build. It gives error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type. It also gives several CS8500 warnings.\r\n\r\nHere is a link to the internal build failure: https://dev.azure.com/dnceng/internal/_build/results?buildId=2004504&view=logs&j=2d3d5aef-8fa7-5ecd-0b12-6aebb43b720c&t=9b89cfd5-8b4c-5686-5153-a3d2912d1018&l=25741 (internal MS link)\r\n\r\n```\r\n/tarball/src/runtime/artifacts/source-build/self/src/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/DynamicInvokeInfo.cs(329,26): error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('ByReference') [/tarball/src/runtime/artifacts/source-build/self/src/src/coreclr/nativeaot/System.Private.CoreLib/src/System.Private.CoreLib.csproj]\r\n```\r\n\r\nHere is a link to the [CS0208 Documentation](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0208).\r\n\r\nIs there a simple fix for this that we can implement as a patch ASAP?\r\n\r\ncc @AaronRobinsonMSFT @MichaelSimons @crummel \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lbussell</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `source-build`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>Future</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-09-27T17:12:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-27T17:12:20Z",
          "id": "IC_kwDODI9FZc5LFyUk"
        },
        {
          "author": "jcouv",
          "body": "Here's the [change](https://github.com/dotnet/runtime/pull/75935) @cston had prepared for the runtime repo (picking up new Roslyn compiler and adjusting runtime code accordingly). I'm not sure how Source Build fits in relation to that change.",
          "createdAt": "2022-09-27T17:24:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-09-27T17:24:11Z",
          "id": "IC_kwDODI9FZc5LF1rk"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOSxda5A=="
    },
    "url": "https://github.com/dotnet/runtime/issues/76255",
    "title": "Runtime fails to build with latest compiler: CS0208"
  },
  {
    "author": "jozkee",
    "labels": [
      "area-Meta",
      "tenet-performance",
      "tenet-performance-benchmarks",
      "tracking"
    ],
    "createdAt": "2022-10-18T05:36:05Z",
    "body": "## Data\r\n\r\nThis time we have covered following configurations comparing .NET 7.0 RC2 vs. .NET 6.0:\r\n\r\n* architectures: arm64, x64\r\n* Unix: debian 11, ubuntu 18.04, ubuntu 20.04, macOS Monterey 12.6, macOS Big Sur 11.7\r\n* Windows: 10 & 11\r\n\r\n<details>   \r\n \r\n| Operating System    | Bit   | Processor Name                                |\r\n| ------------------- | ----- | --------------------------------------------- |\r\n| ubuntu 18.04        | Arm64 | Unknown processor                             |\r\n| Windows 11          | Arm64 | Unknown processor                             |\r\n| Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |\r\n| Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |\r\n| macOS Monterey 12.6 | Arm64 | Apple M1                                      |\r\n| macOS Monterey 12.6 | Arm64 | Apple M1 Max                                  |\r\n| Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |\r\n| Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |\r\n| Windows 11          | X64   | AMD Ryzen 9 5900X                             |\r\n| Windows 11          | X64   | AMD Ryzen 9 7950X                             |\r\n| Windows 11          | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| debian 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| ubuntu 18.04        | X64   | AMD Ryzen 9 5900X                             |\r\n| ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |\r\n| ubuntu 20.04        | X64   | AMD Ryzen 9 5900X                             |\r\n| ubuntu 20.04        | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |\r\n| ubuntu 20.04        | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| macOS Big Sur 11.7  | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)     |\r\n| macOS Monterey 12.6 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)    |\r\n\r\n</details>\r\n\r\nMost of the benchmarks were run on bare-metal machines, some were executed via WSL.\r\n\r\nThis would not be possible without the help from: @adamsitnik, @brianrob, @carlossanlop, @dakersnar, @janvorli, @jeffhandley, @cincuranet, @tannergooding, and @wfurt who contributed their results and time. An addtional thank you to @dakersnar and @EgorBo for shadowing the creation of this report and helping with the vetting of the results!\r\n\r\nThe full report generated by the tool is available [here](https://gist.github.com/Jozkee/54d7e86adf16381b32ce7178e0435618). You will have to click \"Raw\" to see the entire file. The report is sorted from most regressed to most improved, so scroll to the bottom in the full report to see improvements. There are plenty of them! \r\n\r\nAgain, the [full historical data](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/TestHistoryIndexIndex.html) turned out to be **extremely useful**. For details about methodology please read https://github.com/dotnet/runtime/issues/41871. RC1 report can be found [here](https://github.com/dotnet/runtime/issues/76320).\r\n\r\n## Improvements\r\n\r\nWe will be analyzing improvements more thoroughly in the upcoming .NET 6 vs .NET 7 GA report. This report is focused on regressions.\r\n  \r\n## Regressions\r\n\r\n### By Design\r\n* [x] `Benchstone.BenchI.Array2.Test`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/71059 \r\n  * Explained by: https://github.com/dotnet/runtime/issues/71059#issuecomment-1203196867\r\n  * This regression was included in .NET 7.0 Preview 7 report https://github.com/dotnet/runtime/issues/73866.\r\n\r\n* [x] `Benchstone.MDBenchI.MDMulMatrix.Test`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/72030\r\n  * Explained by: https://github.com/dotnet/runtime/issues/72030#issuecomment-1213512373\r\n  * This regression was included in .NET 7.0 Preview 7 report https://github.com/dotnet/runtime/issues/73866.\r\n  * Note: We noticed arm64 improvements despite x64 regressions.\r\n\r\n* [x] `System.Collections.Concurrent.IsEmpty<String>.Dictionary(Size: 512)`, `System.Collections.Concurrent.IsEmpty<Int32>.Dictionary(Size: 512)`\r\n  * Introduced by https://github.com/dotnet/runtime/pull/73488 - \r\n  * Explained by: https://github.com/dotnet/runtime/pull/73488#issuecomment-1245922399\r\n  * This regression was included in .NET 7.0 RC1 report https://github.com/dotnet/runtime/issues/76320.\r\n\r\n* [x] `System.Collections.IndexerSet<String>.Array(Size: 512)`\r\n  * Detected by: https://github.com/dotnet/perf-autofiling-issues/issues/6746\r\n  * Added comment: https://github.com/dotnet/runtime/pull/71659#issuecomment-1278221030\r\n\r\n* [x] `System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-US, IgnoreCase, False))`\r\n  * Explained by: https://github.com/dotnet/runtime/pull/69878\r\n  * Added comment: https://github.com/dotnet/runtime/pull/69878#issuecomment-1281528243\r\n  * This regression was incldued in .NET 7.0 preview 7 report https://github.com/dotnet/runtime/pull/69878.\r\n\r\n* [x] `System.IO.Compression.Brotli.Compress(level: Optimal, file: \"alice29.txt\")`, `System.IO.Compression.Brotli.Compress(level: Optimal, file: \"TestDocument.pdf\")`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/73391\r\n  * Explained by: https://github.com/dotnet/runtime/issues/73391#issuecomment-1205619431\r\n  * Note: Perf test bug, will be fixed in https://github.com/dotnet/performance/pull/2567. Already discussed in .NET 7.0 RC1 report https://github.com/dotnet/runtime/issues/76320.\r\n\r\n* [x] `System.IO.Tests.StringReaderReadLineTests.ReadLine(LineLengthRange: [   0,    0])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLine(LineLengthRange: [   1,    1])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLineAsync(LineLengthRange: [   0,    0])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLineAsync(LineLengthRange: [   1,    1])`\r\n  * Explained by: https://github.com/dotnet/runtime/pull/60463#issuecomment-945828201\r\n  * For all other cases, the perf drastically improved.\r\n\r\n* [x] `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 1024,1024 bits)`, `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 65536,65536 bits)`\r\n  * Regression was reported by the bot (https://github.com/dotnet/runtime/issues/60293), but not for this particular argument\r\n  * Added comment: https://github.com/dotnet/runtime/issues/60293#issuecomment-1072434031\r\n  * Explained by: https://github.com/dotnet/runtime/issues/60293#issuecomment-1083543708\r\n  * This regression was included in .NET 7.0 Preview 2 report https://github.com/dotnet/runtime/issues/66848.\r\n\r\n* [x] `System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark`, `System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark`\r\n  * Introduced by: https://github.com/dotnet/runtime/pull/68691\r\n\r\n* [x] `System.Numerics.Tests.Perf_VectorConvert.Convert_double_long`:\r\n    * Tracked by: https://github.com/dotnet/runtime/issues/65189\r\n    * Explained by: https://github.com/dotnet/runtime/issues/65189#issuecomment-1036388904\r\n    * This regression was included in .NET 7.0 preview 1 report https://github.com/dotnet/runtime/issues/65200\r\n    * Note: As per @tannergooding, this regression can be fixed.\r\n\r\n* [x] `System.Security.Cryptography.Tests.Perf_Rfc2898DeriveBytes.DeriveBytes`\r\n    * specific to Unix, Windows seems to be unaffected\r\n    * Explained by: https://github.com/dotnet/runtime/issues/65719#issuecomment-1048339034\r\n    * This regression was included in .NET 7.0 preview 2 report https://github.com/dotnet/runtime/issues/66848\r\n\r\n* [x] `System.Text.RegularExpressions.Tests.Perf_Regex_Common.CtorInvoke(Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Common.CtorInvoke(Options: IgnoreCase, Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_BoostDocs_Simple.IsMatch(Id: 0, Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?m)^Sherlock Holmes|Sherlock Holmes$\", Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"Sherlock|Holmes|Watson|Irene|Adler|John|Baker\", Options: Compiled)`\r\n  * Explained by: https://github.com/dotnet/runtime/issues/65187#issuecomment-1036287653\r\n  * Note: While we were looking at the results, we noticed a mono-specific regression, created issue https://github.com/dotnet/runtime/issues/77129.\r\n\r\n* [x] `System.Text.RegularExpressions.Tests.Perf_Regex_Industry_Mariomkas.Ctor(Pattern: \"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\", Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_Mariomkas.Ctor(Pattern: \"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\", Options: None)`\r\n  * Explained by: https://github.com/dotnet/runtime/issues/67915#issuecomment-1096979972\r\n  * This regression was included in .NET 7.0 Preview 4 report https://github.com/dotnet/runtime/issues/69396.\r\n\r\n### Investigation In Progress\r\n\r\n* [x] `Benchmark.GetChildKeysTests.AddChainedConfigurationEmpty`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/77900\r\n  * Added comment: https://github.com/dotnet/runtime/issues/77900\r\n\r\n* [ ] `FractalPerf.Launch.Test`\r\n  * Detected by: https://github.com/dotnet/perf-autofiling-issues/issues/4414, but not solved\r\n  * the group of benchmark regressions in the above issue were addressed in https://github.com/dotnet/runtime/issues/67594\r\n  * Explained by: https://github.com/dotnet/runtime/issues/67594#issuecomment-1089180924\r\n  * Added comment as this went unresolved since preview 4 report: https://github.com/dotnet/runtime/issues/67594#issuecomment-1278172793\r\n\r\n* [ ] `PerfLabTests.LowLevelPerf.GenericClassWithSTringGenericInstanceMethod`,\r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [   1,    1])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [  33,  128])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [ 129, 1024])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEndAsync(LineLengthRange: [   0,    0])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [ 0, 1024]`, \r\n`System.Text.Tests.Perf_Encoding.GetEncoder*`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/74014.\r\n  * Explained by: https://github.com/dotnet/runtime/issues/74014#issuecomment-1230319972\r\n  * Added comments: https://github.com/dotnet/runtime/issues/74014#issuecomment-1278190959\r\n  * Note: GC related.\r\n\r\n* [ ] `System.Collections.Sort<BigStruct>.Array_ComparerClass(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.Array_ComparerStruct(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.Array_Comparison(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.LinqQuery(Size: 512)`.\r\n  * Seems like noise on macOS and we thought that it would be good to ask for a re-run to the contributor.\r\n\r\n* [ ] `System.Buffers.Tests.ReadOnlySequenceTests<Char>.IterateGetPositionArray`\r\n  * Created issue: https://github.com/dotnet/runtime/issues/77028\r\n  * Note: Gradual regression detected over .NET 7 release cycle.\r\n\r\n* [x] `System.Linq.Tests.Perf_Enumerable.FirstWithPredicate_LastElementMatches(input: List)`\r\n  * Added comment: https://github.com/dotnet/runtime/pull/65738#issuecomment-1279259957\r\n\r\n* [ ] `System.Numerics.Tests.Perf_Matrix4x4.MultiplyByScalarOperatorBenchmark` , `System.Numerics.Tests.Perf_Matrix4x4.NegateBenchmark`, `System.Numerics.Tests.Perf_Matrix4x4.Transpose`, `System.Numerics.Tests.Perf_Matrix4x4.SubtractOperatorBenchmark`, `System.Numerics.Tests.Perf_Matrix4x4.NegationOperatorBenchmark`\r\n  * Tracked here, added comment: https://github.com/dotnet/runtime/issues/65191#issuecomment-1279304302  \r\n  * Already included in .NET 7.0 Preview 1 https://github.com/dotnet/runtime/issues/65200.\r\n\r\n* [ ] `System.Tests.Perf_GC<Byte>.AllocateUninitializedArray(length: 10000, pinned: True)`, `System.Tests.Perf_GC<Char>.AllocateUninitializedArray(length: 10000, pinned: True)`\r\n  * Added comment: https://github.com/dotnet/runtime/issues/65198#issuecomment-1279474550\r\n  * For non-macOS configurations, historical data indicates that this regression is solved already. We don't have historical data for Mac machines, so this is technically under investigation.\r\n\r\n* [x] `System.Tests.Perf_String.CtorCharCount(size: 1)`, `System.Tests.Perf_String.CtorCharCount(size: 10)`, `System.Tests.Perf_String.Remove_IntInt(s: \"dzsdzsDDZSDZSDZSddsz\", i1: 0, i2: 8)`, `System.Text.Tests.Perf_StringBuilder.ctor_capacity(length: 100000)`, `System.Tests.Perf_String.Trim(s: \" Test\")` \r\n  * Added comment: https://github.com/dotnet/runtime/issues/77064#issuecomment-1279505432\r\n\r\n* [x] `System.Text.Perf_Utf8Encoding.GetByteCount(Input: Cyrillic)`, `System.Text.Perf_Utf8Encoding.GetByteCount(Input: Chinese)`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/68405\r\n  * Added comment: https://github.com/dotnet/runtime/issues/68405#issuecomment-1279535304\r\n\r\n\r\n### Noise, Flaky or Multimodal\r\n\r\nThe following benchmarks showed up in the report generated by the tool, but were not actual regressions:\r\n\r\n* [x] `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 1024,1024 bits)`\r\n  * We are seeing 15-25% regressions in the report data but this doesn't match the historical data.\r\n\r\n* [x] `System.Numerics.Tests.Perf_Matrix4x4.LerpBenchmark`\r\n* [x] `System.Numerics.Tests.Perf_VectorOf<*>.*`\r\n\r\n\r\n## Statistics\r\n\r\nTotal:   86862\r\nSame:    55.57 %\r\nSlower:  7.85 %\r\nFaster:  23.65 %\r\nNoise:   12.88 %\r\nUnknown: 0.04 %\r\n\r\n## Statistics per Architecture\r\n\r\n| Architecture | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| ------------ | ------- | ------- | ------- | ------- | ------- |\r\n| Arm64        | 50.16 % | 2.66 %  | 34.81 % | 12.31 % | 0.05 % |\r\n| X64          | 58.07 % | 10.24 % | 18.51 % | 13.15 % | 0.04 % |\r\n\r\n## Statistics per Operating System\r\n\r\n| Operating System    | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| ------------------- | ------- | ------- | ------- | ------- | ------- |\r\n| macOS Monterey 12.6 | 49.99 % | 2.60 %  | 34.20 % | 13.16 % | 0.05 % |\r\n| ubuntu 18.04        | 61.50 % | 6.66 %  | 21.50 % | 10.25 % | 0.09 % |\r\n| Windows 11          | 57.64 % | 6.26 %  | 22.91 % | 13.15 % | 0.03 % |\r\n| debian 11           | 63.41 % | 7.07 %  | 16.30 % | 13.17 % | 0.04 % |\r\n| macOS Big Sur 11.7  | 63.45 % | 3.35 %  | 19.18 % | 13.94 % | 0.07 % |\r\n| ubuntu 20.04        | 49.65 % | 13.46 % | 22.58 % | 14.29 % | 0.01 % |\r\n| Windows 10          | 42.13 % | 26.62 % | 18.84 % | 12.42 % | 0.00 % |\r\n\r\n## Statistics per Namespace\r\n\r\n<details>\r\n\r\n| Namespace                                                 | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| --------------------------------------------------------- | ------- | ------- | ------- | ------- | ------- |\r\n| Benchmark                                                 | 56.58 % | 32.89 % | 10.53 % | 0.00 %  | 0.00 % |\r\n| BenchmarksGame                                            | 65.41 % | 8.52 %  | 26.07 % | 0.00 %  | 0.00 % |\r\n| Benchstone.BenchF                                         | 76.84 % | 6.05 %  | 17.11 % | 0.00 %  | 0.00 % |\r\n| Benchstone.BenchI                                         | 53.95 % | 10.09 % | 35.96 % | 0.00 %  | 0.00 % |\r\n| Benchstone.MDBenchF                                       | 42.11 % | 3.16 %  | 54.74 % | 0.00 %  | 0.00 % |\r\n| Benchstone.MDBenchI                                       | 20.00 % | 9.47 %  | 70.53 % | 0.00 %  | 0.00 % |\r\n| Devirtualization                                          | 65.26 % | 2.11 %  | 1.05 %  | 31.58 % | 0.00 % |\r\n| Exceptions                                                | 77.05 % | 1.32 %  | 21.64 % | 0.00 %  | 0.00 % |\r\n| FractalPerf                                               | 5.26 %  | 89.47 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| GuardedDevirtualization                                   | 69.42 % | 0.00 %  | 4.51 %  | 26.07 % | 0.00 % |\r\n| IfStatements                                              | 33.68 % | 0.00 %  | 66.32 % | 0.00 %  | 0.00 % |\r\n| Inlining                                                  | 33.33 % | 0.00 %  | 1.75 %  | 64.91 % | 0.00 % |\r\n| Interop                                                   | 89.47 % | 0.00 %  | 10.53 % | 0.00 %  | 0.00 % |\r\n| JetStream                                                 | 34.21 % | 2.63 %  | 63.16 % | 0.00 %  | 0.00 % |\r\n| Layout                                                    | 84.21 % | 0.00 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| Lowering                                                  | 84.21 % | 0.00 %  | 0.00 %  | 15.79 % | 0.00 % |\r\n| MicroBenchmarks.Serializers                               | 62.27 % | 3.75 %  | 33.98 % | 0.00 %  | 0.00 % |\r\n| Microsoft.AspNetCore.Server.Kestrel.Performance           | 63.16 % | 10.53 % | 26.32 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Caching.Memory.Tests                 | 69.38 % | 13.88 % | 16.75 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Configuration                        | 65.50 % | 25.15 % | 9.36 %  | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Configuration.Xml                    | 65.79 % | 5.26 %  | 28.95 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.DependencyInjection                  | 45.67 % | 3.57 %  | 48.90 % | 1.87 %  | 0.00 % |\r\n| Microsoft.Extensions.Logging                              | 64.66 % | 3.16 %  | 28.42 % | 3.76 %  | 0.00 % |\r\n| Microsoft.Extensions.Primitives.Performance               | 50.00 % | 0.66 %  | 1.32 %  | 48.03 % | 0.00 % |\r\n| Microsoft.Extensions.Primitives                           | 42.40 % | 0.29 %  | 17.84 % | 39.47 % | 0.00 % |\r\n| PerfLabTests                                              | 56.18 % | 12.70 % | 24.47 % | 6.64 %  | 0.00 % |\r\n| PerfLabTests.CastingPerf2                                 | 49.12 % | 14.04 % | 36.84 % | 0.00 %  | 0.00 % |\r\n| SciMark2                                                  | 64.21 % | 1.05 %  | 34.74 % | 0.00 %  | 0.00 % |\r\n| SIMD                                                      | 90.06 % | 0.58 %  | 9.36 %  | 0.00 %  | 0.00 % |\r\n| Span                                                      | 79.79 % | 0.42 %  | 19.79 % | 0.00 %  | 0.00 % |\r\n| StoreBlock                                                | 52.81 % | 0.00 %  | 4.04 %  | 43.16 % | 0.00 % |\r\n| System.Buffers.Binary.Tests                               | 43.42 % | 4.61 %  | 25.66 % | 26.32 % | 0.00 % |\r\n| System.Buffers.Tests                                      | 54.36 % | 10.93 % | 28.04 % | 6.67 %  | 0.00 % |\r\n| System.Buffers.Text.Tests                                 | 48.22 % | 3.79 %  | 21.52 % | 26.47 % | 0.00 % |\r\n| System.Collections                                        | 63.24 % | 7.83 %  | 27.74 % | 1.19 %  | 0.00 % |\r\n| System.Collections.Concurrent                             | 67.46 % | 7.75 %  | 12.96 % | 11.83 % | 0.00 % |\r\n| System.Collections.Tests                                  | 53.76 % | 5.46 %  | 28.87 % | 11.90 % | 0.00 % |\r\n| System.ComponentModel.Tests                               | 38.76 % | 0.48 %  | 60.77 % | 0.00 %  | 0.00 % |\r\n| System.ConsoleTests                                       | 69.30 % | 8.77 %  | 21.93 % | 0.00 %  | 0.00 % |\r\n| System.Diagnostics                                        | 49.47 % | 7.11 %  | 43.42 % | 0.00 %  | 0.00 % |\r\n| System.Diagnostics.Tracing                                | 75.00 % | 9.21 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| System.Formats.Cbor.Tests                                 | 65.99 % | 4.05 %  | 29.96 % | 0.00 %  | 0.00 % |\r\n| System.Globalization.Tests                                | 75.37 % | 6.03 %  | 15.79 % | 2.81 %  | 0.00 % |\r\n| System                                                    | 65.20 % | 3.51 %  | 28.07 % | 3.22 %  | 0.00 % |\r\n| System.IO.Compression                                     | 80.92 % | 3.29 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| System.IO.MemoryMappedFiles.Tests                         | 26.36 % | 4.09 %  | 69.55 % | 0.00 %  | 0.00 % |\r\n| System.IO.Pipelines.Tests                                 | 69.74 % | 1.32 %  | 28.95 % | 0.00 %  | 0.00 % |\r\n| System.IO.Pipes.Tests                                     | 73.68 % | 16.67 % | 9.65 %  | 0.00 %  | 0.00 % |\r\n| System.IO.Tests                                           | 60.55 % | 12.12 % | 24.61 % | 2.72 %  | 0.00 % |\r\n| System.Linq.Tests                                         | 77.64 % | 7.45 %  | 14.17 % | 0.73 %  | 0.00 % |\r\n| System.MathBenchmarks                                     | 87.83 % | 1.81 %  | 8.47 %  | 1.89 %  | 0.00 % |\r\n| System.Memory                                             | 51.32 % | 1.89 %  | 19.58 % | 27.21 % | 0.00 % |\r\n| System.Net.Http.Tests                                     | 42.11 % | 31.58 % | 26.32 % | 0.00 %  | 0.00 % |\r\n| System.Net.NetworkInformation.Tests                       | 42.11 % | 19.74 % | 38.16 % | 0.00 %  | 0.00 % |\r\n| System.Net.Primitives.Tests                               | 60.29 % | 9.57 %  | 15.55 % | 14.59 % | 0.00 % |\r\n| System.Net.Security.Tests                                 | 74.10 % | 14.43 % | 11.48 % | 0.00 %  | 0.00 % |\r\n| System.Net.Sockets.Tests                                  | 49.45 % | 23.08 % | 27.47 % | 0.00 %  | 0.00 % |\r\n| System.Net.Tests                                          | 71.56 % | 13.76 % | 14.68 % | 0.00 %  | 0.00 % |\r\n| System.Net.WebSockets.Tests                               | 47.37 % | 39.47 % | 13.16 % | 0.00 %  | 0.00 % |\r\n| System.Numerics.Tests                                     | 44.69 % | 5.24 %  | 6.04 %  | 44.03 % | 0.00 % |\r\n| System.Reflection                                         | 30.50 % | 2.15 %  | 64.35 % | 2.99 %  | 0.00 % |\r\n| System.Runtime.InteropServices.Tests                      | 78.95 % | 2.63 %  | 15.79 % | 2.63 %  | 0.00 % |\r\n| System.Runtime.Serialization.Formatters.Tests             | 42.11 % | 52.63 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.Primitives.Tests.Performance | 84.87 % | 9.21 %  | 5.92 %  | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.Tests                        | 69.59 % | 7.02 %  | 23.39 % | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.X509Certificates.Tests       | 73.68 % | 12.28 % | 14.04 % | 0.00 %  | 0.00 % |\r\n| System.Tests                                              | 50.35 % | 12.24 % | 25.46 % | 11.95 % | 0.00 % |\r\n| System.Text.Encodings.Web.Tests                           | 72.59 % | 14.47 % | 11.84 % | 1.10 %  | 0.00 % |\r\n| System.Text.Json.Document.Tests                           | 60.21 % | 10.53 % | 29.26 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Reader.Tests                             | 46.05 % | 15.79 % | 38.16 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Serialization.Tests                      | 57.60 % | 11.37 % | 31.03 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Tests                                    | 67.98 % | 11.07 % | 20.59 % | 0.35 %  | 0.00 % |\r\n| System.Text                                               | 63.51 % | 24.21 % | 12.28 % | 0.00 %  | 0.00 % |\r\n| System.Text.RegularExpressions.Tests                      | 16.73 % | 5.44 %  | 76.91 % | 0.00 %  | 0.92 % |\r\n| System.Text.Tests                                         | 57.52 % | 21.93 % | 18.67 % | 1.88 %  | 0.00 % |\r\n| System.Threading.Channels.Tests                           | 54.39 % | 17.54 % | 28.07 % | 0.00 %  | 0.00 % |\r\n| System.Threading.Tasks.Tests                              | 47.37 % | 19.30 % | 33.33 % | 0.00 %  | 0.00 % |\r\n| System.Threading.Tasks                                    | 69.55 % | 17.67 % | 11.65 % | 1.13 %  | 0.00 % |\r\n| System.Threading.Tests                                    | 58.90 % | 11.31 % | 17.13 % | 12.65 % | 0.00 % |\r\n| System.Xml.Linq                                           | 59.00 % | 9.70 %  | 22.16 % | 9.14 %  | 0.00 % |\r\n| System.Xml.Tests                                          | 5.26 %  | 2.11 %  | 92.63 % | 0.00 %  | 0.00 % |\r\n| V8.Crypto                                                 | 78.95 % | 15.79 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| V8.Richards                                               | 73.68 % | 5.26 %  | 21.05 % | 0.00 %  | 0.00 % |\r\n| XmlDocumentTests.XmlDocumentTests                         | 40.35 % | 22.81 % | 21.05 % | 15.79 % | 0.00 % |\r\n| XmlDocumentTests.XmlNodeListTests                         | 86.84 % | 5.26 %  | 2.63 %  | 5.26 %  | 0.00 % |\r\n| XmlDocumentTests.XmlNodeTests                             | 36.84 % | 2.63 %  | 0.00 %  | 60.53 % | 0.00 % |\r\n| System.Drawing.Tests                                      | 77.50 % | 1.87 %  | 15.00 % | 5.63 %  | 0.00 % |\r\n| HardwareIntrinsics.RayTracer                              | 76.92 % | 7.69 %  | 15.38 % | 0.00 %  | 0.00 % |\r\n\r\n</details>\r\n\r\n **Big thanks to everyone involved!**",
    "number": 77150,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HOORAY",
          "createdAt": "2022-10-18T07:41:21Z",
          "user": "adamsitnik"
        },
        {
          "content": "HOORAY",
          "createdAt": "2022-10-18T09:10:56Z",
          "user": "EgorBo"
        },
        {
          "content": "HOORAY",
          "createdAt": "2022-10-18T15:56:25Z",
          "user": "dakersnar"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOCrDi5Q=="
    },
    "updatedAt": "2022-12-03T00:02:50Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n## Data\r\n\r\nThis time we have covered following configurations comparing .NET 7.0 RC2 vs. .NET 6.0:\r\n\r\n* architectures: arm64, x64\r\n* Unix: debian 11, ubuntu 18.04, ubuntu 20.04, macOS Monterey 12.6, macOS Big Sur 11.7\r\n* Windows: 10 & 11\r\n\r\n<details>   \r\n \r\n| Operating System    | Bit   | Processor Name                                |\r\n| ------------------- | ----- | --------------------------------------------- |\r\n| ubuntu 18.04        | Arm64 | Unknown processor                             |\r\n| Windows 11          | Arm64 | Unknown processor                             |\r\n| Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |\r\n| Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |\r\n| macOS Monterey 12.6 | Arm64 | Apple M1                                      |\r\n| macOS Monterey 12.6 | Arm64 | Apple M1 Max                                  |\r\n| Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |\r\n| Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |\r\n| Windows 11          | X64   | AMD Ryzen 9 5900X                             |\r\n| Windows 11          | X64   | AMD Ryzen 9 7950X                             |\r\n| Windows 11          | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| debian 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| ubuntu 18.04        | X64   | AMD Ryzen 9 5900X                             |\r\n| ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |\r\n| ubuntu 20.04        | X64   | AMD Ryzen 9 5900X                             |\r\n| ubuntu 20.04        | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |\r\n| ubuntu 20.04        | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |\r\n| macOS Big Sur 11.7  | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)     |\r\n| macOS Monterey 12.6 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)    |\r\n\r\n</details>\r\n\r\nMost of the benchmarks were run on bare-metal machines, some were executed via WSL.\r\n\r\nThis would not be possible without the help from: @adamsitnik, @brianrob, @carlossanlop, @dakersnar, @janvorli, @jeffhandley, @cincuranet, @tannergooding, and @wfurt who contributed their results and time. An addtional thank you to @dakersnar and @EgorBo for shadowing the creation of this report and helping with the vetting of the results!\r\n\r\nThe full report generated by the tool is available [here](https://gist.github.com/Jozkee/54d7e86adf16381b32ce7178e0435618). You will have to click \"Raw\" to see the entire file. The report is sorted from most regressed to most improved, so scroll to the bottom in the full report to see improvements. There are plenty of them! \r\n\r\nAgain, the [full historical data](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/TestHistoryIndexIndex.html) turned out to be **extremely useful**. For details about methodology please read https://github.com/dotnet/runtime/issues/41871. RC1 report can be found [here](https://github.com/dotnet/runtime/issues/76320).\r\n\r\n## Improvements\r\n\r\nWe will be analyzing improvements more thoroughly in the upcoming .NET 6 vs .NET 7 GA report. This report is focused on regressions.\r\n  \r\n## Regressions\r\n\r\n### By Design\r\n* [x] `Benchstone.BenchI.Array2.Test`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/71059 \r\n  * Explained by: https://github.com/dotnet/runtime/issues/71059#issuecomment-1203196867\r\n  * This regression was included in .NET 7.0 Preview 7 report https://github.com/dotnet/runtime/issues/73866.\r\n\r\n* [x] `Benchstone.MDBenchI.MDMulMatrix.Test`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/72030\r\n  * Explained by: https://github.com/dotnet/runtime/issues/72030#issuecomment-1213512373\r\n  * This regression was included in .NET 7.0 Preview 7 report https://github.com/dotnet/runtime/issues/73866.\r\n  * Note: We noticed arm64 improvements despite x64 regressions.\r\n\r\n* [x] `System.Collections.Concurrent.IsEmpty<String>.Dictionary(Size: 512)`, `System.Collections.Concurrent.IsEmpty<Int32>.Dictionary(Size: 512)`\r\n  * Introduced by https://github.com/dotnet/runtime/pull/73488 - \r\n  * Explained by: https://github.com/dotnet/runtime/pull/73488#issuecomment-1245922399\r\n  * This regression was included in .NET 7.0 RC1 report https://github.com/dotnet/runtime/issues/76320.\r\n\r\n* [x] `System.Collections.IndexerSet<String>.Array(Size: 512)`\r\n  * Detected by: https://github.com/dotnet/perf-autofiling-issues/issues/6746\r\n  * Added comment: https://github.com/dotnet/runtime/pull/71659#issuecomment-1278221030\r\n\r\n* [x] `System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, IgnoreCase, False))`,\r\n`System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-US, IgnoreCase, False))`\r\n  * Explained by: https://github.com/dotnet/runtime/pull/69878\r\n  * Added comment: https://github.com/dotnet/runtime/pull/69878#issuecomment-1281528243\r\n  * This regression was incldued in .NET 7.0 preview 7 report https://github.com/dotnet/runtime/pull/69878.\r\n\r\n* [x] `System.IO.Compression.Brotli.Compress(level: Optimal, file: \"alice29.txt\")`, `System.IO.Compression.Brotli.Compress(level: Optimal, file: \"TestDocument.pdf\")`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/73391\r\n  * Explained by: https://github.com/dotnet/runtime/issues/73391#issuecomment-1205619431\r\n  * Note: Perf test bug, will be fixed in https://github.com/dotnet/performance/pull/2567. Already discussed in .NET 7.0 RC1 report https://github.com/dotnet/runtime/issues/76320.\r\n\r\n* [x] `System.IO.Tests.StringReaderReadLineTests.ReadLine(LineLengthRange: [   0,    0])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLine(LineLengthRange: [   1,    1])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLineAsync(LineLengthRange: [   0,    0])`,\r\n`System.IO.Tests.StringReaderReadLineTests.ReadLineAsync(LineLengthRange: [   1,    1])`\r\n  * Explained by: https://github.com/dotnet/runtime/pull/60463#issuecomment-945828201\r\n  * For all other cases, the perf drastically improved.\r\n\r\n* [x] `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 1024,1024 bits)`, `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 65536,65536 bits)`\r\n  * Regression was reported by the bot (https://github.com/dotnet/runtime/issues/60293), but not for this particular argument\r\n  * Added comment: https://github.com/dotnet/runtime/issues/60293#issuecomment-1072434031\r\n  * Explained by: https://github.com/dotnet/runtime/issues/60293#issuecomment-1083543708\r\n  * This regression was included in .NET 7.0 Preview 2 report https://github.com/dotnet/runtime/issues/66848.\r\n\r\n* [x] `System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark`, `System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark`\r\n  * Introduced by: https://github.com/dotnet/runtime/pull/68691\r\n\r\n* [x] `System.Numerics.Tests.Perf_VectorConvert.Convert_double_long`:\r\n    * Tracked by: https://github.com/dotnet/runtime/issues/65189\r\n    * Explained by: https://github.com/dotnet/runtime/issues/65189#issuecomment-1036388904\r\n    * This regression was included in .NET 7.0 preview 1 report https://github.com/dotnet/runtime/issues/65200\r\n    * Note: As per @tannergooding, this regression can be fixed.\r\n\r\n* [x] `System.Security.Cryptography.Tests.Perf_Rfc2898DeriveBytes.DeriveBytes`\r\n    * specific to Unix, Windows seems to be unaffected\r\n    * Explained by: https://github.com/dotnet/runtime/issues/65719#issuecomment-1048339034\r\n    * This regression was included in .NET 7.0 preview 2 report https://github.com/dotnet/runtime/issues/66848\r\n\r\n* [x] `System.Text.RegularExpressions.Tests.Perf_Regex_Common.CtorInvoke(Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Common.CtorInvoke(Options: IgnoreCase, Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_BoostDocs_Simple.IsMatch(Id: 0, Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?m)^Sherlock Holmes|Sherlock Holmes$\", Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"Sherlock|Holmes|Watson|Irene|Adler|John|Baker\", Options: Compiled)`\r\n  * Explained by: https://github.com/dotnet/runtime/issues/65187#issuecomment-1036287653\r\n  * Note: While we were looking at the results, we noticed a mono-specific regression, created issue https://github.com/dotnet/runtime/issues/77129.\r\n\r\n* [x] `System.Text.RegularExpressions.Tests.Perf_Regex_Industry_Mariomkas.Ctor(Pattern: \"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\", Options: Compiled)`,\r\n`System.Text.RegularExpressions.Tests.Perf_Regex_Industry_Mariomkas.Ctor(Pattern: \"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\", Options: None)`\r\n  * Explained by: https://github.com/dotnet/runtime/issues/67915#issuecomment-1096979972\r\n  * This regression was included in .NET 7.0 Preview 4 report https://github.com/dotnet/runtime/issues/69396.\r\n\r\n### Investigation In Progress\r\n\r\n* [ ] `Benchmark.GetChildKeysTests.AddChainedConfigurationEmpty`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/77900\r\n  * Added comment: https://github.com/dotnet/runtime/issues/77900\r\n\r\n* [ ] `FractalPerf.Launch.Test`\r\n  * Detected by: https://github.com/dotnet/perf-autofiling-issues/issues/4414, but not solved\r\n  * the group of benchmark regressions in the above issue were addressed in https://github.com/dotnet/runtime/issues/67594\r\n  * Explained by: https://github.com/dotnet/runtime/issues/67594#issuecomment-1089180924\r\n  * Added comment as this went unresolved since preview 4 report: https://github.com/dotnet/runtime/issues/67594#issuecomment-1278172793\r\n\r\n* [ ] `PerfLabTests.LowLevelPerf.GenericClassWithSTringGenericInstanceMethod`,\r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [   1,    1])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [  33,  128])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [ 129, 1024])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEndAsync(LineLengthRange: [   0,    0])`, \r\n`System.IO.Tests.StreamReaderReadToEndTests.ReadToEnd(LineLengthRange: [ 0, 1024]`, \r\n`System.Text.Tests.Perf_Encoding.GetEncoder*`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/74014.\r\n  * Explained by: https://github.com/dotnet/runtime/issues/74014#issuecomment-1230319972\r\n  * Added comments: https://github.com/dotnet/runtime/issues/74014#issuecomment-1278190959\r\n  * Note: GC related.\r\n\r\n* [ ] `System.Collections.Sort<BigStruct>.Array_ComparerClass(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.Array_ComparerStruct(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.Array_Comparison(Size: 512)`, \r\n`System.Collections.Sort<BigStruct>.LinqQuery(Size: 512)`.\r\n  * Seems like noise on macOS and we thought that it would be good to ask for a re-run to the contributor.\r\n\r\n* [ ] `System.Buffers.Tests.ReadOnlySequenceTests<Char>.IterateGetPositionArray`\r\n  * Created issue: https://github.com/dotnet/runtime/issues/77028\r\n  * Note: Gradual regression detected over .NET 7 release cycle.\r\n\r\n* [ ] `System.Linq.Tests.Perf_Enumerable.FirstWithPredicate_LastElementMatches(input: List)`\r\n  * Added comment: https://github.com/dotnet/runtime/pull/65738#issuecomment-1279259957\r\n\r\n* [ ] `System.Numerics.Tests.Perf_Matrix4x4.MultiplyByScalarOperatorBenchmark` , `System.Numerics.Tests.Perf_Matrix4x4.NegateBenchmark`, `System.Numerics.Tests.Perf_Matrix4x4.Transpose`, `System.Numerics.Tests.Perf_Matrix4x4.SubtractOperatorBenchmark`, `System.Numerics.Tests.Perf_Matrix4x4.NegationOperatorBenchmark`\r\n  * Tracked here, added comment: https://github.com/dotnet/runtime/issues/65191#issuecomment-1279304302  \r\n  * Already included in .NET 7.0 Preview 1 https://github.com/dotnet/runtime/issues/65200.\r\n\r\n* [ ] `System.Tests.Perf_GC<Byte>.AllocateUninitializedArray(length: 10000, pinned: True)`, `System.Tests.Perf_GC<Char>.AllocateUninitializedArray(length: 10000, pinned: True)`\r\n  * Added comment: https://github.com/dotnet/runtime/issues/65198#issuecomment-1279474550\r\n  * For non-macOS configurations, historical data indicates that this regression is solved already. We don't have historical data for Mac machines, so this is technically under investigation.\r\n\r\n* [ ] `System.Tests.Perf_String.CtorCharCount(size: 1)`, `System.Tests.Perf_String.CtorCharCount(size: 10)`, `System.Tests.Perf_String.Remove_IntInt(s: \"dzsdzsDDZSDZSDZSddsz\", i1: 0, i2: 8)`, `System.Text.Tests.Perf_StringBuilder.ctor_capacity(length: 100000)`, `System.Tests.Perf_String.Trim(s: \" Test\")` \r\n  * Added comment: https://github.com/dotnet/runtime/issues/77064#issuecomment-1279505432\r\n\r\n* [ ] `System.Text.Perf_Utf8Encoding.GetByteCount(Input: Cyrillic)`, `System.Text.Perf_Utf8Encoding.GetByteCount(Input: Chinese)`\r\n  * Detected by: https://github.com/dotnet/runtime/issues/68405\r\n  * Added comment: https://github.com/dotnet/runtime/issues/68405#issuecomment-1279535304\r\n\r\n\r\n### Noise, Flaky or Multimodal\r\n\r\nThe following benchmarks showed up in the report generated by the tool, but were not actual regressions:\r\n\r\n* [x] `System.Numerics.Tests.Perf_BigInteger.Add(arguments: 1024,1024 bits)`\r\n  * We are seeing 15-25% regressions in the report data but this doesn't match the historical data.\r\n\r\n* [x] `System.Numerics.Tests.Perf_Matrix4x4.LerpBenchmark`\r\n* [x] `System.Numerics.Tests.Perf_VectorOf<*>.*`\r\n\r\n\r\n## Statistics\r\n\r\nTotal:   86862\r\nSame:    55.57 %\r\nSlower:  7.85 %\r\nFaster:  23.65 %\r\nNoise:   12.88 %\r\nUnknown: 0.04 %\r\n\r\n## Statistics per Architecture\r\n\r\n| Architecture | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| ------------ | ------- | ------- | ------- | ------- | ------- |\r\n| Arm64        | 50.16 % | 2.66 %  | 34.81 % | 12.31 % | 0.05 % |\r\n| X64          | 58.07 % | 10.24 % | 18.51 % | 13.15 % | 0.04 % |\r\n\r\n## Statistics per Operating System\r\n\r\n| Operating System    | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| ------------------- | ------- | ------- | ------- | ------- | ------- |\r\n| macOS Monterey 12.6 | 49.99 % | 2.60 %  | 34.20 % | 13.16 % | 0.05 % |\r\n| ubuntu 18.04        | 61.50 % | 6.66 %  | 21.50 % | 10.25 % | 0.09 % |\r\n| Windows 11          | 57.64 % | 6.26 %  | 22.91 % | 13.15 % | 0.03 % |\r\n| debian 11           | 63.41 % | 7.07 %  | 16.30 % | 13.17 % | 0.04 % |\r\n| macOS Big Sur 11.7  | 63.45 % | 3.35 %  | 19.18 % | 13.94 % | 0.07 % |\r\n| ubuntu 20.04        | 49.65 % | 13.46 % | 22.58 % | 14.29 % | 0.01 % |\r\n| Windows 10          | 42.13 % | 26.62 % | 18.84 % | 12.42 % | 0.00 % |\r\n\r\n## Statistics per Namespace\r\n\r\n<details>\r\n\r\n| Namespace                                                 | Same    | Slower  | Faster  | Noise   | Unknown|\r\n| --------------------------------------------------------- | ------- | ------- | ------- | ------- | ------- |\r\n| Benchmark                                                 | 56.58 % | 32.89 % | 10.53 % | 0.00 %  | 0.00 % |\r\n| BenchmarksGame                                            | 65.41 % | 8.52 %  | 26.07 % | 0.00 %  | 0.00 % |\r\n| Benchstone.BenchF                                         | 76.84 % | 6.05 %  | 17.11 % | 0.00 %  | 0.00 % |\r\n| Benchstone.BenchI                                         | 53.95 % | 10.09 % | 35.96 % | 0.00 %  | 0.00 % |\r\n| Benchstone.MDBenchF                                       | 42.11 % | 3.16 %  | 54.74 % | 0.00 %  | 0.00 % |\r\n| Benchstone.MDBenchI                                       | 20.00 % | 9.47 %  | 70.53 % | 0.00 %  | 0.00 % |\r\n| Devirtualization                                          | 65.26 % | 2.11 %  | 1.05 %  | 31.58 % | 0.00 % |\r\n| Exceptions                                                | 77.05 % | 1.32 %  | 21.64 % | 0.00 %  | 0.00 % |\r\n| FractalPerf                                               | 5.26 %  | 89.47 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| GuardedDevirtualization                                   | 69.42 % | 0.00 %  | 4.51 %  | 26.07 % | 0.00 % |\r\n| IfStatements                                              | 33.68 % | 0.00 %  | 66.32 % | 0.00 %  | 0.00 % |\r\n| Inlining                                                  | 33.33 % | 0.00 %  | 1.75 %  | 64.91 % | 0.00 % |\r\n| Interop                                                   | 89.47 % | 0.00 %  | 10.53 % | 0.00 %  | 0.00 % |\r\n| JetStream                                                 | 34.21 % | 2.63 %  | 63.16 % | 0.00 %  | 0.00 % |\r\n| Layout                                                    | 84.21 % | 0.00 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| Lowering                                                  | 84.21 % | 0.00 %  | 0.00 %  | 15.79 % | 0.00 % |\r\n| MicroBenchmarks.Serializers                               | 62.27 % | 3.75 %  | 33.98 % | 0.00 %  | 0.00 % |\r\n| Microsoft.AspNetCore.Server.Kestrel.Performance           | 63.16 % | 10.53 % | 26.32 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Caching.Memory.Tests                 | 69.38 % | 13.88 % | 16.75 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Configuration                        | 65.50 % | 25.15 % | 9.36 %  | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.Configuration.Xml                    | 65.79 % | 5.26 %  | 28.95 % | 0.00 %  | 0.00 % |\r\n| Microsoft.Extensions.DependencyInjection                  | 45.67 % | 3.57 %  | 48.90 % | 1.87 %  | 0.00 % |\r\n| Microsoft.Extensions.Logging                              | 64.66 % | 3.16 %  | 28.42 % | 3.76 %  | 0.00 % |\r\n| Microsoft.Extensions.Primitives.Performance               | 50.00 % | 0.66 %  | 1.32 %  | 48.03 % | 0.00 % |\r\n| Microsoft.Extensions.Primitives                           | 42.40 % | 0.29 %  | 17.84 % | 39.47 % | 0.00 % |\r\n| PerfLabTests                                              | 56.18 % | 12.70 % | 24.47 % | 6.64 %  | 0.00 % |\r\n| PerfLabTests.CastingPerf2                                 | 49.12 % | 14.04 % | 36.84 % | 0.00 %  | 0.00 % |\r\n| SciMark2                                                  | 64.21 % | 1.05 %  | 34.74 % | 0.00 %  | 0.00 % |\r\n| SIMD                                                      | 90.06 % | 0.58 %  | 9.36 %  | 0.00 %  | 0.00 % |\r\n| Span                                                      | 79.79 % | 0.42 %  | 19.79 % | 0.00 %  | 0.00 % |\r\n| StoreBlock                                                | 52.81 % | 0.00 %  | 4.04 %  | 43.16 % | 0.00 % |\r\n| System.Buffers.Binary.Tests                               | 43.42 % | 4.61 %  | 25.66 % | 26.32 % | 0.00 % |\r\n| System.Buffers.Tests                                      | 54.36 % | 10.93 % | 28.04 % | 6.67 %  | 0.00 % |\r\n| System.Buffers.Text.Tests                                 | 48.22 % | 3.79 %  | 21.52 % | 26.47 % | 0.00 % |\r\n| System.Collections                                        | 63.24 % | 7.83 %  | 27.74 % | 1.19 %  | 0.00 % |\r\n| System.Collections.Concurrent                             | 67.46 % | 7.75 %  | 12.96 % | 11.83 % | 0.00 % |\r\n| System.Collections.Tests                                  | 53.76 % | 5.46 %  | 28.87 % | 11.90 % | 0.00 % |\r\n| System.ComponentModel.Tests                               | 38.76 % | 0.48 %  | 60.77 % | 0.00 %  | 0.00 % |\r\n| System.ConsoleTests                                       | 69.30 % | 8.77 %  | 21.93 % | 0.00 %  | 0.00 % |\r\n| System.Diagnostics                                        | 49.47 % | 7.11 %  | 43.42 % | 0.00 %  | 0.00 % |\r\n| System.Diagnostics.Tracing                                | 75.00 % | 9.21 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| System.Formats.Cbor.Tests                                 | 65.99 % | 4.05 %  | 29.96 % | 0.00 %  | 0.00 % |\r\n| System.Globalization.Tests                                | 75.37 % | 6.03 %  | 15.79 % | 2.81 %  | 0.00 % |\r\n| System                                                    | 65.20 % | 3.51 %  | 28.07 % | 3.22 %  | 0.00 % |\r\n| System.IO.Compression                                     | 80.92 % | 3.29 %  | 15.79 % | 0.00 %  | 0.00 % |\r\n| System.IO.MemoryMappedFiles.Tests                         | 26.36 % | 4.09 %  | 69.55 % | 0.00 %  | 0.00 % |\r\n| System.IO.Pipelines.Tests                                 | 69.74 % | 1.32 %  | 28.95 % | 0.00 %  | 0.00 % |\r\n| System.IO.Pipes.Tests                                     | 73.68 % | 16.67 % | 9.65 %  | 0.00 %  | 0.00 % |\r\n| System.IO.Tests                                           | 60.55 % | 12.12 % | 24.61 % | 2.72 %  | 0.00 % |\r\n| System.Linq.Tests                                         | 77.64 % | 7.45 %  | 14.17 % | 0.73 %  | 0.00 % |\r\n| System.MathBenchmarks                                     | 87.83 % | 1.81 %  | 8.47 %  | 1.89 %  | 0.00 % |\r\n| System.Memory                                             | 51.32 % | 1.89 %  | 19.58 % | 27.21 % | 0.00 % |\r\n| System.Net.Http.Tests                                     | 42.11 % | 31.58 % | 26.32 % | 0.00 %  | 0.00 % |\r\n| System.Net.NetworkInformation.Tests                       | 42.11 % | 19.74 % | 38.16 % | 0.00 %  | 0.00 % |\r\n| System.Net.Primitives.Tests                               | 60.29 % | 9.57 %  | 15.55 % | 14.59 % | 0.00 % |\r\n| System.Net.Security.Tests                                 | 74.10 % | 14.43 % | 11.48 % | 0.00 %  | 0.00 % |\r\n| System.Net.Sockets.Tests                                  | 49.45 % | 23.08 % | 27.47 % | 0.00 %  | 0.00 % |\r\n| System.Net.Tests                                          | 71.56 % | 13.76 % | 14.68 % | 0.00 %  | 0.00 % |\r\n| System.Net.WebSockets.Tests                               | 47.37 % | 39.47 % | 13.16 % | 0.00 %  | 0.00 % |\r\n| System.Numerics.Tests                                     | 44.69 % | 5.24 %  | 6.04 %  | 44.03 % | 0.00 % |\r\n| System.Reflection                                         | 30.50 % | 2.15 %  | 64.35 % | 2.99 %  | 0.00 % |\r\n| System.Runtime.InteropServices.Tests                      | 78.95 % | 2.63 %  | 15.79 % | 2.63 %  | 0.00 % |\r\n| System.Runtime.Serialization.Formatters.Tests             | 42.11 % | 52.63 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.Primitives.Tests.Performance | 84.87 % | 9.21 %  | 5.92 %  | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.Tests                        | 69.59 % | 7.02 %  | 23.39 % | 0.00 %  | 0.00 % |\r\n| System.Security.Cryptography.X509Certificates.Tests       | 73.68 % | 12.28 % | 14.04 % | 0.00 %  | 0.00 % |\r\n| System.Tests                                              | 50.35 % | 12.24 % | 25.46 % | 11.95 % | 0.00 % |\r\n| System.Text.Encodings.Web.Tests                           | 72.59 % | 14.47 % | 11.84 % | 1.10 %  | 0.00 % |\r\n| System.Text.Json.Document.Tests                           | 60.21 % | 10.53 % | 29.26 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Reader.Tests                             | 46.05 % | 15.79 % | 38.16 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Serialization.Tests                      | 57.60 % | 11.37 % | 31.03 % | 0.00 %  | 0.00 % |\r\n| System.Text.Json.Tests                                    | 67.98 % | 11.07 % | 20.59 % | 0.35 %  | 0.00 % |\r\n| System.Text                                               | 63.51 % | 24.21 % | 12.28 % | 0.00 %  | 0.00 % |\r\n| System.Text.RegularExpressions.Tests                      | 16.73 % | 5.44 %  | 76.91 % | 0.00 %  | 0.92 % |\r\n| System.Text.Tests                                         | 57.52 % | 21.93 % | 18.67 % | 1.88 %  | 0.00 % |\r\n| System.Threading.Channels.Tests                           | 54.39 % | 17.54 % | 28.07 % | 0.00 %  | 0.00 % |\r\n| System.Threading.Tasks.Tests                              | 47.37 % | 19.30 % | 33.33 % | 0.00 %  | 0.00 % |\r\n| System.Threading.Tasks                                    | 69.55 % | 17.67 % | 11.65 % | 1.13 %  | 0.00 % |\r\n| System.Threading.Tests                                    | 58.90 % | 11.31 % | 17.13 % | 12.65 % | 0.00 % |\r\n| System.Xml.Linq                                           | 59.00 % | 9.70 %  | 22.16 % | 9.14 %  | 0.00 % |\r\n| System.Xml.Tests                                          | 5.26 %  | 2.11 %  | 92.63 % | 0.00 %  | 0.00 % |\r\n| V8.Crypto                                                 | 78.95 % | 15.79 % | 5.26 %  | 0.00 %  | 0.00 % |\r\n| V8.Richards                                               | 73.68 % | 5.26 %  | 21.05 % | 0.00 %  | 0.00 % |\r\n| XmlDocumentTests.XmlDocumentTests                         | 40.35 % | 22.81 % | 21.05 % | 15.79 % | 0.00 % |\r\n| XmlDocumentTests.XmlNodeListTests                         | 86.84 % | 5.26 %  | 2.63 %  | 5.26 %  | 0.00 % |\r\n| XmlDocumentTests.XmlNodeTests                             | 36.84 % | 2.63 %  | 0.00 %  | 60.53 % | 0.00 % |\r\n| System.Drawing.Tests                                      | 77.50 % | 1.87 %  | 15.00 % | 5.63 %  | 0.00 % |\r\n| HardwareIntrinsics.RayTracer                              | 76.92 % | 7.69 %  | 15.38 % | 0.00 %  | 0.00 % |\r\n\r\n</details>\r\n\r\n **Big thanks to everyone involved!**\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>Jozkee</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `tenet-performance`, `tenet-performance-benchmarks`, `tracking`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>Future</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-10-18T05:36:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-04T16:24:01Z",
          "id": "IC_kwDODI9FZc5MZ09E"
        },
        {
          "author": "jjxtra",
          "body": "Hoping BigInteger performance improves. C# getting smoked by python computing pi digits is no bueno. https://programming-language-benchmarks.vercel.app/problem/pidigits",
          "createdAt": "2022-10-27T15:22:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-27T15:22:56Z",
          "id": "IC_kwDODI9FZc5NHElk"
        },
        {
          "author": "jeffhandley",
          "body": "Thank you, @jjxtra -- it's helpful to know that BigInteger performance is important to you. We've been accumulating issues around BigInteger and we've been thinking about what it might look like to reimplement it for better performance and reliability. That effort isn't going to be committed for .NET 8, but it is on our radar for the future.\r\n\r\nIt would be helpful data if you could add a comment to #41495 describing your scenarios and how BigInteger's performance affects you. Thanks again!",
          "createdAt": "2022-10-28T16:44:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-28T16:55:00Z",
                "user": "jjxtra"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-28T17:18:56Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOCurX_g=="
          },
          "updatedAt": "2022-10-28T16:44:06Z",
          "id": "IC_kwDODI9FZc5NM4lZ"
        },
        {
          "author": "jjxtra",
          "body": "To be honest, it's probably not impacting anyone severely outside of either:\r\n\r\n1] Benchmarks, which give C# a sour taste\r\n2] Scientific calculations, which I don't have a use case for\r\n\r\nAs I mentioned above, someone seeing a benchmark where python beats C# would be puzzling",
          "createdAt": "2022-10-28T16:52:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T16:54:15Z",
          "id": "IC_kwDODI9FZc5NM6mp"
        },
        {
          "author": "tannergooding",
          "body": "It's worth noting that just looking at \"raw numbers\" is also often not sufficient. You often have to compare the actual implementations, considering where devs have diverged algorithms or done customization as well.\r\n\r\nIn the case of using `BigInteger` to compute digits of `PI`, that's really the \"naive\" approach and isn't necessarily representative of a \"real world use-case\" for `BigInteger`. If you wanted to compute digits of `PI` fast, you'd likely use one of the \"spigot\" algorithms that allow computing digits without knowing or maintaining the state of all prior digits. This allows you to more easily parallelize and optimize the algorithm, all while taking up less memory/data.\r\n\r\nThere are certainly cases where we could/should improve the performance of `BigInteger`, but I'd like to try and drive those off of scenarios that matter the most and which are representative of practical use-cases.",
          "createdAt": "2022-10-28T17:43:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-28T17:44:40Z",
                "user": "gfoidl"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-10-28T18:32:32Z",
                "user": "dakersnar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-02T12:52:52Z",
                "user": "adamsitnik"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOCu5dgQ=="
          },
          "updatedAt": "2022-10-28T17:43:06Z",
          "id": "IC_kwDODI9FZc5NNGJ_"
        },
        {
          "author": "danmoseley",
          "body": "I don't know about that site, but the CLBG which it is based on has two categories -- one for the big integer abstractions, and one for anything goes. On the latter, C# is faster than most.\r\nhttps://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/pidigits.html#intrinsics",
          "createdAt": "2022-10-28T18:56:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T18:56:10Z",
          "id": "IC_kwDODI9FZc5NNWyy"
        },
        {
          "author": "danmoseley",
          "body": "As always its great when community members help improve our submissions in both sites..",
          "createdAt": "2022-10-28T18:56:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-28T18:56:35Z",
          "id": "IC_kwDODI9FZc5NNW4f"
        },
        {
          "author": "jjxtra",
          "body": "> I don't know about that site, but the CLBG which it is based on has two categories -- one for the big integer abstractions, and one for anything goes. On the latter, C# is faster than most. https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/pidigits.html#intrinsics\r\n\r\nVery interesting, thanks for the link.",
          "createdAt": "2022-10-30T16:34:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-30T16:34:52Z",
          "id": "IC_kwDODI9FZc5NQ-4x"
        },
        {
          "author": "danmoseley",
          "body": "Now I look at the impls there they are all using the GNU arbitrary precision library, so not too interesting perhaps from a .NET point of view. Anyway -- if this stuff interests you perhaps you'd like to look further at what could be done to make things faster, assuming it didn't impact other scenarios.",
          "createdAt": "2022-10-31T15:53:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-10-31T15:53:58Z",
          "id": "IC_kwDODI9FZc5NU0av"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOTVNGrw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/77150",
    "title": ".NET 7.0 RC2 Microbenchmarks Performance Study Report"
  },
  {
    "author": "marek-safar",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2022-11-15T18:38:31Z",
    "body": "There are several analyzers that check for code style that runtime repo could benefit from if enabled. They are not too pedantic and could help to make the large codebase more readable.\r\n\r\nFor example\r\n- [x] #94827\r\n- [ ] SA1107: Code should not contain multiple statements on one line\r\n- [ ] SA1119: A C# statement contains parenthesis which are unnecessary and should be removed.\r\n- [ ] SA1123: Region should not be located within a code element\r\n- [ ] SA1128: Put constructor initializers on their own line\r\n- [ ] SA1130: Use lambda syntax\r\n- [x] #94098\r\n- [ ] SA1507: Code should not contain multiple blank lines in a row\r\n\r\n\r\n",
    "number": 78414,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-16T06:03:09Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThere are several analyzers that check for code style that runtime repo could benefit from if enabled. They are not too pedantic and could help to make the large codebase more readable.\r\n\r\nFor example\r\n- SA1021: Negative sign should be preceded by a space\r\n- SA1107: Code should not contain multiple statements on one line\r\n- SA1119: A C# statement contains parenthesis which are unnecessary and should be removed.\r\n- SA1123: Region should not be located within a code element\r\n- SA1128: Put constructor initializers on their own line\r\n- SA1130: Use lambda syntax\r\n- SA1136: Enum values should be on separate lines\r\n- SA1507: Code should not contain multiple blank lines in a row\r\n\r\n\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>marek-safar</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-11-15T18:38:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-15T18:38:38Z",
          "id": "IC_kwDODI9FZc5ObEJF"
        },
        {
          "author": "ericstj",
          "body": "@stephentoub thoughts on this?  Seems reasonable, but not for 8.0 at this point.  Let's move this to 9.0 and do it early.",
          "createdAt": "2023-07-20T15:47:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-20T15:47:45Z",
          "id": "IC_kwDODI9FZc5iAAHR"
        },
        {
          "author": "stephentoub",
          "body": "Most of these look fine. Someone can try (one at a time, please), and we can look at the impact to see if there's anything unexpected we don't like.",
          "createdAt": "2023-07-20T15:53:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-20T15:53:16Z",
          "id": "IC_kwDODI9FZc5iAC1e"
        },
        {
          "author": "danmoseley",
          "body": "This is labeled analyzer but there's no analyzer work here, right? isn't it just a regular work item in area-meta?\nThen we can change to check boxes and encourage community help.",
          "createdAt": "2023-07-20T16:59:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-21T15:44:35Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODBbH3A=="
          },
          "updatedAt": "2023-07-20T16:59:11Z",
          "id": "IC_kwDODI9FZc5iAZ6S"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThere are several analyzers that check for code style that runtime repo could benefit from if enabled. They are not too pedantic and could help to make the large codebase more readable.\r\n\r\nFor example\r\n- SA1021: Negative sign should be preceded by a space\r\n- SA1107: Code should not contain multiple statements on one line\r\n- SA1119: A C# statement contains parenthesis which are unnecessary and should be removed.\r\n- SA1123: Region should not be located within a code element\r\n- SA1128: Put constructor initializers on their own line\r\n- SA1130: Use lambda syntax\r\n- SA1136: Enum values should be on separate lines\r\n- SA1507: Code should not contain multiple blank lines in a row\r\n\r\n\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>marek-safar</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`, `code-analyzer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-07-21T15:23:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-21T15:23:59Z",
          "id": "IC_kwDODI9FZc5iGETt"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThere are several analyzers that check for code style that runtime repo could benefit from if enabled. They are not too pedantic and could help to make the large codebase more readable.\r\n\r\nFor example\r\n- SA1021: Negative sign should be preceded by a space\r\n- SA1107: Code should not contain multiple statements on one line\r\n- SA1119: A C# statement contains parenthesis which are unnecessary and should be removed.\r\n- SA1123: Region should not be located within a code element\r\n- SA1128: Put constructor initializers on their own line\r\n- SA1130: Use lambda syntax\r\n- SA1136: Enum values should be on separate lines\r\n- SA1507: Code should not contain multiple blank lines in a row\r\n\r\n\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>marek-safar</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `help wanted`, `code-analyzer`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-07-21T15:42:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-21T15:42:22Z",
          "id": "IC_kwDODI9FZc5iGKJS"
        },
        {
          "author": "ViktorHofer",
          "body": "@jeffschwMSFT I moved this back to area-Meta as there's no infrastructure work necessary for this.",
          "createdAt": "2023-07-21T15:43:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-21T15:43:03Z",
          "id": "IC_kwDODI9FZc5iGKWC"
        },
        {
          "author": "danmoseley",
          "body": "if anyone wants to look at these, start by editing eng\\CodeAnalysis.src.globalconfig and/or eng\\CodeAnalysis.test.globalconfig then open things up in VS and build.",
          "createdAt": "2023-10-03T00:49:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-03T08:16:24Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODIc2Qg=="
          },
          "updatedAt": "2023-10-03T00:49:09Z",
          "id": "IC_kwDODI9FZc5n8y0x"
        },
        {
          "author": "artl93",
          "body": "@danmoseley - do we typically prefer these as warnings or errors? I can see value in both.\r\nFrom an implementation standpoint, should we just remove the configuration from our .props files, or set the value explicitly do make the configuration self-documenting, i.e., we're doing this _on purpose_? (See WIP: #94100)",
          "createdAt": "2023-10-27T17:33:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-27T18:03:16Z",
          "id": "IC_kwDODI9FZc5qSprw"
        },
        {
          "author": "danmoseley",
          "body": "@artl93 i don't know what current thinking is in this repo - @stephentoub can say.\n\nIn general we've discussed that (a) we don't like PR validation to fail merely because of a trivial style issue leaving us with no test results and (b) we like to be able to code locally without the build failing merely because of trivial style issues in work that's not finished. The @jaredpar approach I believe is for them to be warnings locally and in some but not all PR validation flavors. Not sure what thinking is in this repo.",
          "createdAt": "2023-10-27T19:16:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-27T19:17:27Z",
          "id": "IC_kwDODI9FZc5qTGcN"
        },
        {
          "author": "jaredpar",
          "body": "The way we've approach code style warning is: \r\n\r\n1. On local dev boxes\r\n    1. Do not run them by default on command line \r\n    2. Do run them in VS but at info level, not warning\r\n2. On CI \r\n    1. For any leg that feeds into unit tests do not run style checking. In fact we disable all analyzers here, do not promote warnings to errors, etc ...\r\n    2. Have a specific leg that builds the code with style checking enabled, `/warnAsError`, all possible analyzers, etc ... \r\n\r\nThe rationale for this setup is ...\r\n\r\nThe goal of CI should be to provide the maximum amount of information possible, in the fastest amount of time, for any given change. As such do not run code style checks on the paths that feed to unit tests. It's potentially introducing warnings that risk promoting to errors and stopping tests from running (as well as impacting build time). There is no reason a trailing space should stop a unit test from even running. This is also why the same jobs disable `/warnAsError`, analyzers, etc ... Test legs should get unit test results as often and fast as possible. In parallel have a dedicated job that builds with all code style warnings, all analyzers, `/warnAsError`, etc ... that serves as the style enforcement check.\r\n\r\nAs for local developer setup there was a lot of back and forth about the tradeoffs for running style checks locally. There is a measurable perf hit for some rules, particularly when dealing with repos the size of roslyn / runtime. After discussion we decided most devs were more comfortable with having info level diagnostics only in VS, but nothing in the command line. 99% of time VS is just going to auto-format it the correct way any who. Devs who want to have it run locally can specify an environment variable that enables all that checking on their machine (very small minority do this)\r\n\r\nAnother way to think about all this is a sure fire way to upset developers enough to reach for their pitchforks is ...:\r\n\r\n1. If they send a PR, go to lunch, come back and find that zero tests ran because they had an extra blank line, trailing space after a paren, etc ... \r\n2. If they are inner loop debugging and F5 fails after a long build cause of a trailing space somewhere. \r\n\r\nHope that helps.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-10-27T19:32:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-02T16:47:21Z",
                "user": "am11"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-02T22:29:45Z",
                "user": "MichalStrehovsky"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODLtJ8w=="
          },
          "updatedAt": "2023-10-27T19:38:54Z",
          "id": "IC_kwDODI9FZc5qTKb1"
        },
        {
          "author": "artl93",
          "body": "Thanks! That totally makes sense. How would this practically translate to changes I would need to make the to globalgonfig file, as I am working on in #94100? Would I just be removing the line in eng/CodeAnalysis.src.globalconfig, and then leaving eng/CodeAnalysis.test.globalconfig alone? ",
          "createdAt": "2023-10-27T20:29:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-27T20:29:10Z",
          "id": "IC_kwDODI9FZc5qTZvb"
        },
        {
          "author": "artl93",
          "body": "One more thing - (again, displaying my ignorance) I'm on a Mac, so I use VS on Windows by exception, not as a rule (though, that's likely to change). Is there a way to see all the potential errors my global change will cause across all projects? Looking at the repo and docs, it seems I'd have to load them individually. FWIW - is there a way to get this same error information to show on the command line, or (for bonus points) in VS Code? ",
          "createdAt": "2023-10-27T20:43:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-27T20:43:48Z",
          "id": "IC_kwDODI9FZc5qTerb"
        },
        {
          "author": "stephentoub",
          "body": "> i don't know what current thinking is in this repo - @stephentoub can say.\r\n\r\nThus far in runtime, we've taken a different approach from what Jared outlines: all analyzer rules we've explicitly decided to get clean against are enabled as warnings (which are then promoted by default via warnings-as-errors) and run as such everywhere, command-line, in VS, and in CI. If a developer doesn't want them as errors locally, they disable warnings-as-errors.",
          "createdAt": "2023-10-30T15:57:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-30T15:57:11Z",
          "id": "IC_kwDODI9FZc5qbPPG"
        },
        {
          "author": "stephentoub",
          "body": "> Would I just be removing the line in eng/CodeAnalysis.src.globalconfig, and then leaving eng/CodeAnalysis.test.globalconfig alone?\r\n\r\nWe've tried to be explicit about every analyzer, so you wouldn't remove a line from the globalconfig, you'd just change the severity on the line that's already there (or if for some reason we're missing a line for the analyzer in question, add it).",
          "createdAt": "2023-10-30T15:58:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-30T15:58:31Z",
          "id": "IC_kwDODI9FZc5qbQBM"
        },
        {
          "author": "stephentoub",
          "body": "> Is there a way to see all the potential errors my global change will cause across all projects?\r\n\r\nYou can just build from root but with warnings-as-errors disabled, e.g.\r\n```\r\n./build.sh clr+libs -rc release -warnaserrors 0\r\n```",
          "createdAt": "2023-10-30T16:00:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-30T16:00:04Z",
          "id": "IC_kwDODI9FZc5qbQ0C"
        },
        {
          "author": "jaredpar",
          "body": "> all analyzer rules we've explicitly decided to get clean against are enabled as warnings (which are then promoted by default via warnings-as-errors) and run as such everywhere, command-line, in VS, and in CI.\r\n\r\nDo you all do this on test legs too? When we were designing our system the only item that had universal agreement was to turn off analyzers and `/warnaserror` for builds that feed into test legs (and virtually nothing has universal agreement with style conversations). The rationale being that getting test feedback was very valuable even if there are style errors. Basically when you come back from lunch and see all tests pass but style failed cause there was an extra space that was much more valuable than having no tests run at all. That mentality ended up driving a lot of our decision process. \r\n\r\n",
          "createdAt": "2023-10-30T16:50:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-30T16:50:02Z",
          "id": "IC_kwDODI9FZc5qbthl"
        }
      ],
      "totalCount": 17,
      "endCursor": "Y3Vyc29yOnYyOpHOam7YZQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/78414",
    "title": "Enable more style checking analyzers"
  },
  {
    "author": "wstaelens",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2022-11-21T11:31:02Z",
    "body": "### Description\n\nSince the first release of .NET Core not everything seems to be fully implemented or ported from .NET Framework to .NET Core. \nNow we are ~~at .net 7~~ at .net 8, and still we are not being able to e.g. open XPS documents generated by the XPSDrv because code was not ported or contains bugs. The list of XPS and print related tickets, issues is long, I list a few from several domains.\n\nThis is a cry for help to get some attention to the XPS/print thing. \n\n**We know XPS and printing aren't sexy, but just because they're unpopular doesn't mean they shouldn't be given attention.**\n\n- **https://github.com/dotnet/runtime/issues/51929**\n- **https://github.com/dotnet/wpf/issues/3546**\n- https://github.com/dotnet/runtime/pull/78374\n- **https://github.com/dotnet/wpf/issues/4000** \n**- -->ongoing: https://github.com/dotnet/wpf/issues/10361**\n- https://developercommunity.visualstudio.com/t/Improve-XPS-printing-STA/690912\n- https://github.com/dotnet/wpf/pull/9250\n- https://github.com/dotnet/wpf/issues/8406\n- https://github.com/dotnet/wpf/issues/6426\n- https://github.com/dotnet/wpf/issues/6842\n- https://github.com/dotnet/wpf/issues/3750\n- https://github.com/dotnet/runtime/issues/51930\n- https://github.com/dotnet/wpf/issues/6386\n- https://github.com/dotnet/runtime/issues/39430\n- https://github.com/dotnet/wpf/issues/6301\n- https://github.com/dotnet/runtime/issues/66756\n- https://github.com/dotnet/wpf/issues/3745\n- https://github.com/dotnet/wpf/issues/4479\n- https://github.com/microsoft/Windows-driver-samples/issues/762\n- https://github.com/dotnet/wpf/issues/2106\n- https://github.com/dotnet/wpf/pull/6843 \n- https://github.com/dotnet/wpf/issues/3206\n- https://github.com/dotnet/wpf/issues/2085\n- https://github.com/dotnet/wpf/issues/2047\n- https://github.com/dotnet/wpf/issues/470\n- https://github.com/dotnet/wpf/issues/6842\n- https://github.com/microsoft/Windows-driver-samples/issues?q=XPS\n- https://github.com/dotnet/runtime/issues?q=XPS\n- https://github.com/dotnet/wpf/issues?q=XPS\n- https://github.com/dotnet/wpf/issues/7436 \n- https://developercommunity.visualstudio.com/t/KB5022083---Broken-XPS-prinintg-in-WPF-A/10233950?q=xps\n- https://github.com/dotnet/runtime/issues/78629#issuecomment-1386307405  (thread safety issue, since 2013)\n- https://github.com/dotnet/wpf/issues/7499 - https://github.com/dotnet/wpf/pull/7545\n- https://github.com/dotnet/wpf/issues/7494\n- https://github.com/dotnet/wpf/issues/7711\n- https://github.com/dotnet/wpf/discussions/7714 \n- https://github.com/dotnet/runtime/issues/75628\n- https://github.com/dotnet/wpf/issues/7259\n- https://github.com/dotnet/wpf/issues/5305\n- https://github.com/dotnet/wpf/issues/7563\n- https://github.com/dotnet/wpf/issues/2609\n- https://github.com/dotnet/wpf/issues/8339\n- https://github.com/dotnet/runtime/issues/80815\n- https://github.com/dotnet/wpf/issues/8355\n- https://github.com/dotnet/wpf/issues/8529\n- https://github.com/dotnet/winforms/issues/9034\n- https://github.com/dotnet/winforms/issues/8839\n- https://github.com/dotnet/winforms/issues/3540\n- https://github.com/dotnet/wpf/issues/6768\n- https://github.com/dotnet/wpf/issues/8447\n- https://github.com/dotnet/maui/issues/9931\n- https://github.com/CommunityToolkit/Maui/discussions/562 \n- https://github.com/MicrosoftEdge/WebView2Feedback/issues/42\n- https://github.com/dotnet/wpf/issues/9418 \n- https://github.com/dotnet/wpf/issues/8940\n- https://github.com/dotnet/winforms/issues/13264\n- https://github.com/dotnet/wpf/issues/10322 \n- https://github.com/dotnet/wpf/issues/10595 \n- https://github.com/dotnet/wpf/pull/9948 \n\n- **https://stackoverflow.com/search?q=xps+memory** \n\n### Reproduction Steps\n\nuse XPS\n\n### Expected behavior\n\nfast, multi-threaded, bug-free XPS drivers, libraries, runtime, sdk's, ...\n\nXPS is a great format (knowing what garbage you can find in PDF documents).\n\n### Actual behavior\n\nSlow, high memory, high cpu, unable to open xps files, bugs, ...\n\n### Regression?\n\n.NET Framework is somewhat ok, but .net core/.net versions are not.\n\n### Known Workarounds\n\nnone :sad:\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThe frustrations towards Microsoft are high, very high, after all these years. Please give some attention to XPS and printing.",
    "number": 78629,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2023-11-16T11:31:04Z",
          "user": "sicklittlemonkey"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-05T00:50:22Z",
          "user": "lindexi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-12T16:02:45Z",
          "user": "Delapro"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-24T22:30:07Z",
          "user": "JohnKiller"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-05T10:26:45Z",
          "user": "gee12"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-20T19:39:06Z",
          "user": "hellobody"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-04T16:32:26Z",
          "user": "Jappi88"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-08T08:53:58Z",
          "user": "truboxl"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHODA9pzQ=="
    },
    "updatedAt": "2025-09-16T14:06:34Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\n\nSince the first release of .NET Core not everything seems to be fully implemented or ported from .NET Framework to .NET Core. \r\nNow we are at .net 7, and still we are not being able to e.g. open XPS documents generated by the XPSDrv because code was not ported or contains bugs. The list of XPS tickets, issues is long, I list a few from several domains.\r\n\r\nThis is a cry for help to get some attention to the XPS/print thing. \r\n\r\nWe know XPS and printing aren't sexy, but just because they're unpopular doesn't mean they shouldn't be given attention.\r\n\r\n- https://github.com/dotnet/runtime/issues/51929\r\n- https://github.com/dotnet/wpf/issues/3546\r\n- https://github.com/dotnet/wpf/issues/6842\r\n- https://github.com/dotnet/wpf/issues/3750\r\n- https://github.com/dotnet/runtime/issues/51930\r\n- https://github.com/dotnet/wpf/issues/6386\r\n- https://github.com/dotnet/runtime/issues/39430\r\n- https://github.com/dotnet/wpf/issues/6301\r\n- https://github.com/dotnet/runtime/issues/66756\r\n- https://github.com/dotnet/wpf/issues/3745\r\n- https://github.com/dotnet/wpf/issues/4479\r\n- https://github.com/microsoft/Windows-driver-samples/issues/762\r\n- https://github.com/dotnet/wpf/issues/2106\r\n- https://github.com/dotnet/wpf/pull/6843 \r\n- https://github.com/dotnet/wpf/issues/3206\r\n- https://github.com/dotnet/wpf/issues/2085\r\n- https://github.com/dotnet/wpf/issues/2047\r\n- https://github.com/dotnet/wpf/issues/470\r\n- https://github.com/dotnet/wpf/issues/6842\r\n- https://github.com/microsoft/Windows-driver-samples/issues?q=XPS\r\n- https://github.com/dotnet/runtime/issues?q=XPS\r\n- https://github.com/dotnet/wpf/issues?q=XPS\n\n### Reproduction Steps\n\nuse XPS\n\n### Expected behavior\n\nfast, multi-threaded, bug-free XPS drivers, libraries, runtime, sdk's, ...\r\n\r\nXPS is a great format (knowing what garbage you can find in PDF documents).\n\n### Actual behavior\n\nSlow, high memory, high cpu, unable to open xps files, bugs, ...\n\n### Regression?\n\n.NET Framework is somewhat ok, but .net core/.net versions are not.\n\n### Known Workarounds\n\nnone :sad\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThe frustrations towards Microsoft are high, very high, after all these years. Please give some attention to XPS and printing.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>wstaelens</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2022-11-21T11:31:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-11-21T11:31:10Z",
          "id": "IC_kwDODI9FZc5Oys_G"
        },
        {
          "author": "jeffhandley",
          "body": "Thank you for organizing this info @wstaelens; that's very helpful. We will review further to see if there are opportunities for some small wins during .NET 8 and/or if there are issues where we can apply the https://github.com/dotnet/runtime/labels/help%20wanted label and give guidance for how we think the issues should be addressed.",
          "createdAt": "2022-11-23T04:00:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2022-11-23T07:38:34Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOCwDxVQ=="
          },
          "updatedAt": "2022-11-23T04:00:45Z",
          "id": "IC_kwDODI9FZc5O8o7H"
        },
        {
          "author": "Terumasa1972",
          "body": "There has been a little development  from .NetFrameWork 4.8 to 4.8.1 on GabageCollection.\r\nBut there seems to be some bugs still.\r\nXpsDocumentWriter never release its resource and cannot be desposed.So I am suffering from printing a second fixedpage made by my custom FixedDocumentPaginator.It writes the same fixedpage to one in first time. \r\n",
          "createdAt": "2022-11-24T13:16:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2022-11-24T13:19:41Z",
                "user": "wstaelens"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-26T15:03:14Z",
                "user": "gee12"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODUPk7Q=="
          },
          "updatedAt": "2022-11-24T13:16:03Z",
          "id": "IC_kwDODI9FZc5PD-Nl"
        },
        {
          "author": "bradleypeet",
          "body": "Anyone know if the thread safety issue in **System.Windows.Xps.Serialization.SerializableObjectContext** was ever fixed?  I escalated a case with Microsoft and came up with my own workaround back in 2013.\r\n![image](https://user-images.githubusercontent.com/47610242/213054790-5bf0c78c-a59a-4691-875b-3486bc26bb27.png)\r\n",
          "createdAt": "2023-01-18T00:58:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2023-01-18T08:29:48Z",
                "user": "wstaelens"
              },
              {
                "content": "EYES",
                "createdAt": "2023-02-23T19:50:56Z",
                "user": "Trinitek"
              },
              {
                "content": "EYES",
                "createdAt": "2023-11-16T11:24:33Z",
                "user": "sicklittlemonkey"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODMxrQA=="
          },
          "updatedAt": "2023-01-18T00:58:37Z",
          "id": "IC_kwDODI9FZc5SoV9N"
        },
        {
          "author": "wstaelens",
          "body": "> Anyone know if the thread safety issue in **System.Windows.Xps.Serialization.SerializableObjectContext** was ever fixed? I escalated a case with Microsoft and came up with my own workaround back in 2013. ![image](https://user-images.githubusercontent.com/47610242/213054790-5bf0c78c-a59a-4691-875b-3486bc26bb27.png)\r\n\r\nno idea, added it to the list @bradleypeet maybe you can mention the original case number? I really do hope it is fixed but I doubt it...",
          "createdAt": "2023-01-18T08:33:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-01-19T01:38:33Z",
                "user": "bradleypeet"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC0bcAw=="
          },
          "updatedAt": "2023-01-18T08:33:01Z",
          "id": "IC_kwDODI9FZc5Spu4Q"
        },
        {
          "author": "wstaelens",
          "body": "Updated the list with new tickets regarding XPS and printing.",
          "createdAt": "2023-03-23T08:03:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-23T08:03:39Z",
          "id": "IC_kwDODI9FZc5YQmp3"
        },
        {
          "author": "wstaelens",
          "body": "Any updates on .net 8 regarding XPS?",
          "createdAt": "2023-09-19T07:28:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-19T07:28:40Z",
          "id": "IC_kwDODI9FZc5m0Pkm"
        },
        {
          "author": "wstaelens",
          "body": "wish @davidfowl worked on this. 😅 ",
          "createdAt": "2023-10-20T12:59:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-20T12:59:08Z",
          "id": "IC_kwDODI9FZc5pqTQP"
        },
        {
          "author": "neplan",
          "body": "Hi to all,\r\n\r\nWe have an application where the printing is quite an important task!\r\nAt the moment all our Windows 11 users have problems with the print preview. The settings from our application are not applied to the print preview. This is a big problem for us!\r\nIs there any workaround to solve this problem? The bug is there since one year and nothing is done since then?\r\n\r\nBest regards,\r\n\r\nAlessandro",
          "createdAt": "2023-12-01T08:55:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2023-12-01T08:56:30Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODOJ_6Q=="
          },
          "updatedAt": "2023-12-01T08:55:18Z",
          "id": "IC_kwDODI9FZc5tar8t"
        },
        {
          "author": "wstaelens",
          "body": "Good luck @neplan  I don't think @jeffhandley  and his team are spending any time on this. 😞 Been waiting for years.",
          "createdAt": "2023-12-01T09:42:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-01T09:42:20Z",
          "id": "IC_kwDODI9FZc5ta8O2"
        },
        {
          "author": "neplan",
          "body": "@wstaelens this is really terrible that such a basing thing is ignored completely! You didn't find any workaround or an external library or so?",
          "createdAt": "2023-12-01T10:48:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-01T10:48:13Z",
          "id": "IC_kwDODI9FZc5tbTxN"
        },
        {
          "author": "wstaelens",
          "body": "@neplan printing in Windows is internally XPS (gdi is being converted to XPS).\r\nXPS is a subset of XAML (whohoo!!) .  I also don't understand why nobody gives a #!@§! about it (for years already...)\r\n\r\nLooking forward to reading the next excuse again. \r\n\r\n@neplan  I would suggest to wait for @jeffhandley and his team....\r\n",
          "createdAt": "2023-12-01T10:54:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-01T10:54:39Z",
          "id": "IC_kwDODI9FZc5tbV82"
        },
        {
          "author": "wstaelens",
          "body": "(off-side: but print related: https://www.tomshardware.com/peripherals/printers/windows-update-renames-every-installed-printer-hp-laserjet-ultra-m106-changes-icons-and-forces-install-of-hp-smart-app ) 🤷‍♂️🤦‍♂️",
          "createdAt": "2023-12-05T08:01:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-31T01:10:48Z",
          "id": "IC_kwDODI9FZc5tr0Ud"
        },
        {
          "author": "znakeeye",
          "body": "> Anyone know if the thread safety issue in **System.Windows.Xps.Serialization.SerializableObjectContext** was ever fixed? I escalated a case with Microsoft and came up with my own workaround back in 2013. ![image](https://user-images.githubusercontent.com/47610242/213054790-5bf0c78c-a59a-4691-875b-3486bc26bb27.png)\r\n\r\nWow. I came up with the exact same hack, though calling the `Clear()` method instead. It's a bit unfortunate that you didn't provide this in text format. Googling this `SerializableObjectContext` leak takes you nowhere.",
          "createdAt": "2024-03-30T20:52:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-30T20:52:49Z",
          "id": "IC_kwDODI9FZc545_Dh"
        },
        {
          "author": "wstaelens",
          "body": "The list received some updates (new items added, items closed)",
          "createdAt": "2024-10-29T07:43:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-29T07:43:13Z",
          "id": "IC_kwDODI9FZc6RpG-d"
        },
        {
          "author": "mdell-seradex",
          "body": "Glad to see that there has been a little progress on addressing printing issues!\n\nI really hope those issues which can cause generic slowdowns and exceptions for most if not all attempts at printing in .NET, get fixed soon, and get ported back to older versions of .NET where applicable.  Some of those have been plaguing systems intermittently for years without a permanent solution for our clients, and they ask about them everytime.",
          "createdAt": "2024-11-06T18:11:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-06T18:11:22Z",
          "id": "IC_kwDODI9FZc6Sp572"
        },
        {
          "author": "WolfgangHG",
          "body": "Maybe also for this list: same problem for the WinForms \"PrintDialog\": https://github.com/dotnet/winforms/issues/13264",
          "createdAt": "2025-04-08T08:49:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-04-08T12:06:10Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOENVLpA=="
          },
          "updatedAt": "2025-04-08T08:49:03Z",
          "id": "IC_kwDODI9FZc6mCnsg"
        },
        {
          "author": "mdell-seradex",
          "body": "I hope this has not been forgotten.\nPrinting performance is still a major issue for some of our clients.",
          "createdAt": "2025-07-17T21:10:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-18T07:07:58Z",
                "user": "wstaelens"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEbDVHA=="
          },
          "updatedAt": "2025-07-17T21:10:46Z",
          "id": "IC_kwDODI9FZc636LkY"
        },
        {
          "author": "wstaelens",
          "body": "> I hope this has not been forgotten. Printing performance is still a major issue for some of our clients.\n\nI think @edwardneal  is busy on improving/removing STA and the XPS document APIs:\nhttps://github.com/dotnet/wpf/issues/10361 \n\nHe's doing a great job.",
          "createdAt": "2025-07-18T07:07:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-18T14:58:57Z",
                "user": "mdell-seradex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-09-18T02:44:06Z",
                "user": "sicklittlemonkey"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEiwhfQ=="
          },
          "updatedAt": "2025-07-18T07:07:44Z",
          "id": "IC_kwDODI9FZc64CAJ5"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHOuAgCeQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/78629",
    "title": "The big XPS-issue and printing thread"
  },
  {
    "author": "Youssef1313",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2022-12-13T11:04:42Z",
    "body": "- [ ] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/SetLocaleForDataTypes.cs\r\n\r\n- [ ] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/AvoidDuplicateAccelerators.cs\r\n\r\n- [ ] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/CallBaseClassMethodsOnISerializableTypes.cs\r\n\r\n- [ ] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/DoNotMarkServicedComponentsWithWebMethod.cs\r\n\r\n- [x] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/MarkWindowsFormsEntryPointsWithStaThread.cs\r\n    - This doesn't look specific to .NET Framework, but it's in this directory. cc @RussKie for whether we need to implement this one.\r\n\r\n- [x] https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/SpecifyMessageBoxOptions.cs\r\n    - This doesn't look specific to .NET Framework, but it's in this directory. cc @RussKie for whether we need to implement this one.",
    "number": 79602,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2023-02-14T22:45:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "RussKie",
          "body": "> * [ ]  [dotnet/roslyn-analyzers@`main`/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/MarkWindowsFormsEntryPointsWithStaThread.cs](https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/MarkWindowsFormsEntryPointsWithStaThread.cs?rgh-link-date=2022-12-13T11%3A04%3A42Z)\r\n>   \r\n>   * This doesn't look specific to .NET Framework, but it's in this directory. cc @RussKie\r\n>                 \r\n>                 Igor Velikorossov\r\n>                 FTE for whether we need to implement this one.\r\n> * [ ]  [dotnet/roslyn-analyzers@`main`/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/SpecifyMessageBoxOptions.cs](https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/Microsoft.NetFramework.Analyzers/SpecifyMessageBoxOptions.cs?rgh-link-date=2022-12-13T11%3A04%3A42Z)\r\n>   \r\n>   * This doesn't look specific to .NET Framework, but it's in this directory. cc @RussKie\r\n>                 \r\n>                 Igor Velikorossov\r\n>                 FTE for whether we need to implement this one.\r\n\r\nThank you for tagging me, @Youssef1313. I've moved teams and no longer look after dotnet/winforms. Tagging @merriemcgaw and @dreddy-work.\r\nI _think_ these two may still be useful, and could be moved to dotnet/winforms in https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms.Analyzers or https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms.Analyzers.CSharp. I'm sure the team would welcome community contributions in this area.",
          "createdAt": "2022-12-14T05:26:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-12-14T05:26:19Z",
          "id": "IC_kwDODI9FZc5Qfb2_"
        },
        {
          "author": "Youssef1313",
          "body": "Thanks @RussKie\r\n\r\nOpened https://github.com/dotnet/winforms/issues/8384 and https://github.com/dotnet/winforms/issues/8385",
          "createdAt": "2022-12-14T13:24:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-12-14T13:24:53Z",
          "id": "IC_kwDODI9FZc5Qi_Pk"
        },
        {
          "author": "merriemcgaw",
          "body": "Thanks all!",
          "createdAt": "2022-12-14T18:03:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2022-12-14T18:03:44Z",
          "id": "IC_kwDODI9FZc5Qk-2Q"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOUJPtkA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/79602",
    "title": "Revise unimplemented NetFramework-specific analyzers"
  },
  {
    "author": "schmitch",
    "labels": [
      "arch-wasm",
      "area-Meta"
    ],
    "createdAt": "2023-02-01T21:33:44Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nat the moment a lot of blazor apps are probably only published for a select few non english languages. however for them one can either use the invariant localization and than you would have no icu data at all or you can use the whole icu data there is no inbetween.\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nit would be great that instead of having something like that:\r\n\r\nhttps://learn.microsoft.com/aspnet/core/blazor/globalization-localization?view=aspnetcore-7.0&pivots=webassembly#invariant-globalization\r\n\r\nOne should be able to specify which locales to use, like <Locales>de-de,en-us,en-gb</Locales> and blazor would strip the data, so that it will be way smaller.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "number": 81552,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-02-14T10:46:31Z",
          "user": "jirisykora83"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-03-02T15:17:02Z",
          "user": "schmitch"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-07T21:56:24Z",
          "user": "Andrzej-W"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-02T22:42:09Z",
          "user": "marcusbooyah"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOC1nkYQ=="
    },
    "updatedAt": "2024-07-28T01:51:03Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nat the moment a lot of blazor apps are probably only published for a select with non english languages. however for them one can either use the invariant localization and than you would have no icu data at all or you can use the whole icu data there is no inbetween.\r\n\n\n### Describe the solution you'd like\n\nit would be great that instead of having something like that:\r\n\r\nhttps://learn.microsoft.com/aspnet/core/blazor/globalization-localization?view=aspnetcore-7.0&pivots=webassembly#invariant-globalization\r\n\r\nOne should be able to specify which locales to use, like <Locales>de-de,en-us,en-gb</Locales> and blazor would strip the data, so that it will be way smaller.\n\n### Additional context\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>schmitch</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Globalization`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-02-02T17:40:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-02T17:40:41Z",
          "id": "IC_kwDODI9FZc5USdVj"
        },
        {
          "author": "mkArtakMSFT",
          "body": "@lewing FYI",
          "createdAt": "2023-02-02T17:40:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-02T17:40:43Z",
          "id": "IC_kwDODI9FZc5USdWB"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nat the moment a lot of blazor apps are probably only published for a select with non english languages. however for them one can either use the invariant localization and than you would have no icu data at all or you can use the whole icu data there is no inbetween.\r\n\n\n### Describe the solution you'd like\n\nit would be great that instead of having something like that:\r\n\r\nhttps://learn.microsoft.com/aspnet/core/blazor/globalization-localization?view=aspnetcore-7.0&pivots=webassembly#invariant-globalization\r\n\r\nOne should be able to specify which locales to use, like <Locales>de-de,en-us,en-gb</Locales> and blazor would strip the data, so that it will be way smaller.\n\n### Additional context\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>schmitch</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`arch-wasm`, `area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-02-02T18:37:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-02T18:37:26Z",
          "id": "IC_kwDODI9FZc5USt88"
        },
        {
          "author": "saber-wang",
          "body": "We also hope to implement the same functions outside of blazer, such as aspnetcore, because there is no need for globalization.",
          "createdAt": "2023-02-07T01:45:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-02-07T01:45:49Z",
          "id": "IC_kwDODI9FZc5UpDOZ"
        },
        {
          "author": "ilonatommy",
          "body": "It is connected with https://github.com/dotnet/runtime/pull/80421. The solution is not as described in the issue, as we do not produce the ICU package on the build but it provides a bit more flexibility. We should introduce it in Blazor as well.",
          "createdAt": "2023-03-15T12:43:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-15T12:43:29Z",
          "id": "IC_kwDODI9FZc5XnX1g"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOV519YA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/81552",
    "title": "allow stripping the icu data for blazor apps"
  },
  {
    "author": "MrPippin66",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "feature-request"
    ],
    "createdAt": "2023-03-12T16:09:54Z",
    "body": "This has been requested multiple times, and I see no progress.\r\n\r\nIn the end, this boils down to PowerShell not supporting YAML conversion, like XML and JSON currently is.\r\n\r\nThe response is always \"We don't support YAML, becuase the .Net runtime doesn't support YAML.\r\n\r\nYAML is  a base format in Linux based systems, etc, and a common format supported in a major language, like Python.\r\n\r\nI don't understand why YAML isn't natively supported in .Net, and thus eliminate the reason why PowerShell doesn't natively support YAML.",
    "number": 83313,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2023-03-12T17:34:14Z",
          "user": "Enderlook"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-03T21:15:11Z",
          "user": "SteveL-MSFT"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-05-31T09:47:45Z",
          "user": "Ogglas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-16T13:02:21Z",
          "user": "StephenHodgson"
        },
        {
          "content": "HEART",
          "createdAt": "2024-01-16T13:12:42Z",
          "user": "StephenHodgson"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-16T20:29:24Z",
          "user": "fMichaleczek"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-22T15:40:10Z",
          "user": "amilochau"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-23T12:10:22Z",
          "user": "sineme"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-11T17:45:43Z",
          "user": "colejohnson66"
        },
        {
          "content": "HEART",
          "createdAt": "2024-07-18T16:54:05Z",
          "user": "StartAutomating"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-18T16:54:26Z",
          "user": "deadlydog"
        },
        {
          "content": "HEART",
          "createdAt": "2024-07-18T16:54:27Z",
          "user": "deadlydog"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-18T16:54:49Z",
          "user": "ThomasNieto"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-18T16:56:59Z",
          "user": "peetrike"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-18T19:05:42Z",
          "user": "ronascentes"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-18T20:35:00Z",
          "user": "ccthomps"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-02T21:57:03Z",
          "user": "dafzor"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-25T17:15:37Z",
          "user": "stasberkov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-26T13:14:41Z",
          "user": "RokeJulianLockhart"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-09T21:37:34Z",
          "user": "rosieks"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-11T17:19:14Z",
          "user": "zotabee"
        },
        {
          "content": "HEART",
          "createdAt": "2024-12-11T17:19:17Z",
          "user": "zotabee"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-05T06:30:06Z",
          "user": "zacuke"
        },
        {
          "content": "HEART",
          "createdAt": "2025-01-05T06:30:07Z",
          "user": "zacuke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-08T18:15:01Z",
          "user": "raresChelariu"
        }
      ],
      "totalCount": 25,
      "endCursor": "Y3Vyc29yOnYyOpHODA--fQ=="
    },
    "updatedAt": "2025-09-16T12:18:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
          "createdAt": "2023-03-12T16:09:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T16:09:58Z",
          "id": "IC_kwDODI9FZc5XVcGR"
        },
        {
          "author": "MrPippin66",
          "body": "Should be 'area-Serialization'",
          "createdAt": "2023-03-12T17:02:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T17:02:51Z",
          "id": "IC_kwDODI9FZc5XVevO"
        },
        {
          "author": "teo-tsirpanis",
          "body": "`area-Serialization` refers to the older Data Contract and XML serializers; assigning to `area-Meta`.",
          "createdAt": "2023-03-12T19:15:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T19:15:49Z",
          "id": "IC_kwDODI9FZc5XVlwo"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThis has been requested multiple times, and I see no progress.\r\n\r\nIn the end, this boils down to PowerShell not supporting YAML conversion, like XML and JSON currently is.\r\n\r\nThe response is always \"We don't support YAML, becuase the .Net runtime doesn't support YAML.\r\n\r\nYAML is  a base format in Linux based systems, etc, and a common format supported in a major language, like Python.\r\n\r\nI don't understand why YAML isn't natively supported in .Net, and thus eliminate the reason why PowerShell doesn't natively support YAML.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>MrPippin66</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-03-12T19:16:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T19:16:01Z",
          "id": "IC_kwDODI9FZc5XVlxC"
        },
        {
          "author": "davidfowl",
          "body": "> YAML is a base format in Linux based systems, etc, and a common format supported in a major language, like Python.\r\n\r\nIs YAML suppoted natively by python? What other languages come with YAML support in the standard library?",
          "createdAt": "2023-03-12T19:43:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T19:43:25Z",
          "id": "IC_kwDODI9FZc5XVnGQ"
        },
        {
          "author": "MrPippin66",
          "body": "Apologies. It's not a standard part of Python.\r\n\r\nPyYAML has become ubiquitous, but is not a part of the standard distribution.",
          "createdAt": "2023-03-12T20:59:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-12T20:59:02Z",
          "id": "IC_kwDODI9FZc5XVqyj"
        },
        {
          "author": "MrPippin66",
          "body": "But the desire to have this function natively within PowerShell is still desirable due the native use of YAML within container and Ansible envioronments.",
          "createdAt": "2023-03-12T21:01:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-18T19:04:59Z",
                "user": "ronascentes"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODqeBvg=="
          },
          "updatedAt": "2023-03-12T21:01:23Z",
          "id": "IC_kwDODI9FZc5XVq8J"
        },
        {
          "author": "stephentoub",
          "body": "What prevents PowerShell from using one of the myriad of yaml libraries available via nuget? eg\r\nhttps://www.nuget.org/packages/YamlDotNet\r\n\r\nI see PowerShell relying on other such libraries, eg\r\nhttps://github.com/PowerShell/PowerShell/blob/b58db8b8f70756301d63ca9c52d0cca69756ef73/src/Microsoft.PowerShell.Commands.Utility/Microsoft.PowerShell.Commands.Utility.csproj#L11",
          "createdAt": "2023-03-12T22:34:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-12T23:02:45Z",
                "user": "MihaZupan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-04T15:30:29Z",
                "user": "ericstj"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOC5Nxpw=="
          },
          "updatedAt": "2023-03-12T22:35:08Z",
          "id": "IC_kwDODI9FZc5XVvsE"
        },
        {
          "author": "MrPippin66",
          "body": "My desire to have this supplied as a standard part of .Net (and thus resolving a reason PowerShell doesn't support it, natively) is primarily a support issue.\r\n\r\nThis isn't a niche solution, but a major infrastructure piece used by many mainstream products/solutions (beyond just Ansible and container solutions).\r\n\r\nY, PyYaml isn't s standard module in Python. But it is a solution Red Hat provides support for. (at least as a solution for other Red Hat products that also leverage this).\r\n\r\nAnd it's not like Microsoft isn't internally using YAML for their own products (Azure Pipelines being one).\r\n\r\nLastly, yaml is a formal specification.\r\n\r\nI would think all of the above would merit this being a technology provided within the core framework.",
          "createdAt": "2023-03-13T11:19:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-16T13:11:44Z",
                "user": "StephenHodgson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-22T15:41:34Z",
                "user": "amilochau"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODX172w=="
          },
          "updatedAt": "2023-03-13T11:19:12Z",
          "id": "IC_kwDODI9FZc5XYL4w"
        },
        {
          "author": "davidfowl",
          "body": "I don't think I've seen a YAML serializer built into any language's standard library. YAML certainly is ubiquitous in the cloud native space and https://www.nuget.org/packages/YamlDotNet is the defacto YAML implementation for .NET. I don't see a super strong argument for why it needs to go into the standard library (nothing in the standard library or anything that ships with .NET depends on it).",
          "createdAt": "2023-03-14T05:57:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-29T15:55:33Z",
                "user": "ericstj"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-01-16T13:04:08Z",
                "user": "StephenHodgson"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-02-22T15:41:28Z",
                "user": "amilochau"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-03T19:38:56Z",
                "user": "jeremyj563"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-11T17:46:01Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-18T18:19:55Z",
                "user": "Jaykul"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-07-18T19:05:07Z",
                "user": "ronascentes"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-11T23:06:35Z",
                "user": "MihaZupan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-19T03:12:21Z",
                "user": "raulsntos"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-04-08T18:16:05Z",
                "user": "raresChelariu"
              }
            ],
            "totalCount": 10,
            "endCursor": "Y3Vyc29yOnYyOpHOENYrLA=="
          },
          "updatedAt": "2023-03-14T05:57:14Z",
          "id": "IC_kwDODI9FZc5XduuZ"
        },
        {
          "author": "amis92",
          "body": "Just to point out one argument that seems to be a strong one from a perspective of user/customer, is having a *good*, *stable*, *performant*, *supported*, *documented* and hopefully standards-compliant implementation. Especially the support and documentation are major selling points for .NET I think. So, that's why I think it'd be great to have in BCL.\r\n\r\nBut another is, similarly as ASP.NET *helped* BCL embrace native JSON implementation, containerization and ubiquitous-ness of YAML in CI/CD pipelines is an argument I'd use. GitHub Actions and Azure Pipelines runners are both C#-based, so that's one major player at least potentially interested in YAML support :D\r\n\r\nEdit: I've recently found https://github.com/hadashiA/VYaml to be a good, simple and perf-optimized yaml package, if anyone else stumbles upon this thread.",
          "createdAt": "2023-07-04T21:26:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2024-01-16T13:03:46Z",
                "user": "StephenHodgson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODSxFSw=="
          },
          "updatedAt": "2023-07-04T21:32:34Z",
          "id": "IC_kwDODI9FZc5gmtPU"
        },
        {
          "author": "StephenHodgson",
          "body": "> I don't think I've seen a YAML serializer built into any language's standard library. YAML certainly is ubiquitous in the cloud native space and https://www.nuget.org/packages/YamlDotNet is the defacto YAML implementation for .NET. I don't see a super strong argument for why it needs to go into the standard library (nothing in the standard library or anything that ships with .NET depends on it).\r\n\r\nDavid, I love the stuff you do, but I have to respectfully disagree here. Just because there is a community supported library, doesn't mean it should not be a native runtime component to dotnet. In fact, I'd argue the opposite, since the community needed to come up with an alternative solution.\r\n\r\nI agree with @amis92, since the Azure and [Github runners](https://github.com/actions/runner) are both c# based, it only makes sense that they should be able to natively parse the build workflow files.\r\n\r\nI heard over and over again the same exact arguments for JSON, yet today we have `System.Text.Json` it only stands to reason we also need `System.Text.Yaml` to complete the loop.",
          "createdAt": "2024-01-16T13:08:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-07-18T18:19:47Z",
                "user": "Jaykul"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODqc7qg=="
          },
          "updatedAt": "2024-09-18T16:52:36Z",
          "id": "IC_kwDODI9FZc5w38OL"
        },
        {
          "author": "am11",
          "body": "> What other languages have YAML support directly in the standard library?\n\nI only know of two: Ruby and Crystal (yep, the programming languages 😜).\n\nWhen we were overhauling the YDN [parser](https://github.com/aaubry/YamlDotNet/blob/7923dd8e600f7fea7710f3b45f3fadcfa1aa589c/YamlDotNet/Core/Parser.cs) to add YAML 1.2 support back when source generators were still a new thing, we discussed potential corner cases with the YAML spec team https://github.com/yaml/yaml-spec/issues/113#issuecomment-904092900. That conversation got me thinking: instead of manually handling every parsing nuance, why not use a source generator to process the intermediate representation (IR) from the spec tool and automatically emit the YAML parser?\n\nOf course, we ultimately ended up adding the support manually, and I got sidetracked with other projects, but building it out as a source generator could still be a pretty neat project to tackle (someday 😅)\n",
          "createdAt": "2024-10-25T16:55:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2024-10-25T17:06:07Z",
                "user": "StephenHodgson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD4G5CA=="
          },
          "updatedAt": "2024-10-25T16:55:16Z",
          "id": "IC_kwDODI9FZc6RVgsE"
        },
        {
          "author": "crhaglun",
          "body": "So if I understand this correctly, the main motivation to not provide a YAML serializer is that there's no dependency on that format in the standard runtime, unlike XML and JSON. \n\nThere seems to be an element of trust (and perhaps to some extent discoverability?) driving the requests for a first-party solution. Would it be  appropriate with a framework extension providing this functionality, `Microsoft.Extensions.Yaml` rather than `System.Text.Yaml`?",
          "createdAt": "2024-12-11T10:00:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-11T10:00:07Z",
          "id": "IC_kwDODI9FZc6XHqf5"
        },
        {
          "author": "davidfowl",
          "body": "Over time certain formats may become more and more ubiquitous and there may be a point in the future where yaml is a given. The cloud native world certainly has adopted it but it hasn't made it over the threshold of importance to spend the time building a new serializer from scratch to put into the core libraries. **System.Text.Json** is enough work as it is already and that's without the newly added support for JSON schema etc. \n\nTL;DR at some point there may be enough motivation for this to tip over from nice to have to must have but it's not there yet. It's a mixture of science (data gathering), art (do we as maintainers think it's the right thing for the runtime) and capacity (do we have the resources to do a good job and maintain thing forever).",
          "createdAt": "2024-12-11T22:49:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-12T17:32:25Z",
                "user": "julealgon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-04-08T18:16:30Z",
                "user": "raresChelariu"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOENYrbg=="
          },
          "updatedAt": "2024-12-11T22:49:03Z",
          "id": "IC_kwDODI9FZc6XPQqN"
        },
        {
          "author": "iSazonov",
          "body": "[From MSFT PowerShell team](https://github.com/PowerShell/PowerShell/issues/24654#issuecomment-2593560652)\n> We understand and agree that YAML is used heavily in the industry and would also like to see it supported natively within PS7. Adding a new dependency on an external assembly will introduce dependency collisions. We've already experienced such issues in the past. We also recognize that the popularity of the YAML modules on PSGallery means that YAML support is needed, but also that many folks are ok using 3rd party modules for YAML. _If YAML support shows up in .NET runtime_, we would certainly approve of builtin YAML cmdlets in PS7.\n\nThe circle never ends. 😃 ",
          "createdAt": "2025-01-16T04:38:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2025-01-16T17:53:58Z",
                "user": "zotabee"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOECzhcA=="
          },
          "updatedAt": "2025-01-16T04:38:08Z",
          "id": "IC_kwDODI9FZc6apGyY"
        },
        {
          "author": "StephenHodgson",
          "body": "> The circle never ends. 😃\n\nCircle of life 😂 Just grateful to see some traction and movement. Especially with all the API specs and DevOps platforms all requiring YAML serialization these days.",
          "createdAt": "2025-01-16T13:08:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-16T13:08:45Z",
          "id": "IC_kwDODI9FZc6atbB1"
        },
        {
          "author": "kilasuit",
          "body": "> TL;DR at some point there may be enough motivation for this to tip over from nice to have to must have but it's not there yet. It's a mixture of science (data gathering), art (do we as maintainers think it's the right thing for the runtime) and capacity (do we have the resources to do a good job and maintain thing forever).\n\n<details>\n<summary>TL;DR - are we likely to see this happen in 2025 at all? (expand for a fuller reply) </summary>\n\nThe longer version\n\nThis I can fully understand, and that will only come when Microsoft & others start doing more to get those in the community more better onboarded with helping in maintaining projects, and not doing so just on goodwill alone because they want to see things improve. Discussing these things is great but doing so is taxing on us, especially those of us doing so without proper financial support behind us to properly maintain and sustain ourselves & all our downstream dependencies.\n\nThis will only truly change when there is a stronger process at governmental levels as well as organisational and individual levels to help those that are passionate, build out software like dotnet and others and not only are willing to provide constructive criticism, but recieve it too.\n\nIn respect to YAML, I'd like to see this in dotnet by the end of the year so that downstream in PowerShell we could add this functionality in, which I don't feel is an unreasonable ask in the grand scheme of things & would allow us to move on from this conversation onto other more interesting ones.\n\nIf that means Microsoft has to go and buy licenses or support contracts or shell out the development on a multi-year contract or even look to aquire businesses to do so, then that that's what I feel is what needs to start happening to get some of these things moving. That then changes the dynamic of these conversations somewhat, and overall I feel would help the community for the better. As someone that understands business, it's a big thing to say `Hey I have backing and support from the likes of Microsoft` whether that be via investment from Microsoft as a whole or from just a smaller segment of the organisation, like in my case the PowerShell Team. Investment doesn't always need to be finanical, but it sure helps those that could do with it. It also would go far in saying how you support those both in your partner network and out of it too.\n\nWe have a lot of interwoven trusts in the community, and trusts of different types, and I know that the `We can't do this right now, due to resource constraints` frustrates us all much more than it should & is definitely more visible with open source discussions like this. I am glad we can have these discussions, as are so many of us in the community too.\n\nTaking dotnet Open Source was the right thing to do to allow more open discussions like this, but only gets the full benefits when the community behind it is properly supported & can access the required tools & tooling they need to be able to do so. We certainly are getting there, even if there is more that we could do.\n\nSome are in better positions to sustain themselves than others, and have better supporting infrastructure and systems behind them (especially when you think internationally) and can continue to engage because those systems exist. If the UK didn't have the support processes & systems that we have, even though they need improvement, I'm not sure if I'd be here right now & able to type this after some rough times in recent years, but who knows, I'm still here. Moving forward, I know there is more that we as a collective can do to progress & keeping true to Microsoft's mission statement, which resonates with many in and outside of Microsoft, myself included.\n\nSo a simple ask @davidfowl, **could** we see built-in yaml support, whether built from scratch and directly maintained by Microsoft or via one of the 3rd party packages already out there that you then ship as part of the runtime by the end of this year? Or is the bar for inclusion in dotnet so high, that it can only be a 1st party solution, because it certainly isn't for Windows. \n\nWe can always revist whether or not if we go down the 3rd party package then requires a rebuild as a Microsoft 1st party solution at a later date. I know theres a number of other elements like risk when it's a 3rd party solution that come into consideration, like the Edgio issue recently, so just an indication of yes/no/maybe right now would be great & would help us downstream in projects like PowerShell to either give a timeline for inclusion, or a recommendation where we take dependencies on ourselves, which is what many are looking for here. Those that aren't willing to wait for this to happen & are willing to take the risks that come with that, can already make use of the 3rd party solutions available to us, so it's not for what I can see mission critical as such, at least not right now, however others are already seeing it that way. \n\nFrom a Configuration Management perspective, which PowerShell, DSC, winget and other products in the market already require a way to work with yaml & is certainly something we could have done with as far back as 2016 as that was when it started being more used in those areas & would be really **really** nice for loads of us to not to be going into 2026 without it in dotnet in one way or another.\n</details>",
          "createdAt": "2025-01-18T04:57:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-18T04:57:50Z",
          "id": "IC_kwDODI9FZc6a8aoz"
        },
        {
          "author": "davidfowl",
          "body": "> So a simple ask @davidfowl, could we see built-in yaml support, whether built from scratch and directly maintained by Microsoft or via one of the 3rd party packages already out there that you then ship as part of the runtime by the end of this year? Or is the bar for inclusion in dotnet so high, that it can only be a 1st party solution, because it certainly isn't for Windows.\n\nNo, I doubt we will ever do this again (like we did with JSON.NET in the early days of .NET Core). \n\n> From a Configuration Management perspective, which PowerShell, DSC, winget and other products in the market already require a way to work with yaml & is certainly something we could have done with as far back as 2016 as that was when it started being more used in those areas & would be really really nice for loads of us to not to be going into 2026 without it in dotnet in one way or another.\n\nI have no doubt that somethings might push us in this direction like I said, but it's definitely not happening in .NET 10. As you know building a serializer is a HUGE undertaking, even for a big company like Microsoft.",
          "createdAt": "2025-01-18T06:27:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-18T11:21:43Z",
                "user": "kilasuit"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-06T18:41:02Z",
                "user": "IonKiwi"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEI0y-g=="
          },
          "updatedAt": "2025-01-18T06:31:08Z",
          "id": "IC_kwDODI9FZc6a8mSA"
        },
        {
          "author": "kilasuit",
          "body": "> but it's definitely not happening in .NET 10.\n\nThanks for adding this additional bit of clarity @davidfowl - this certainly helps us with messaging to others when asked in downstream projects like PowerShell where we regularly get asked for support to be built in. I know I and others will look forward to it when it does end up making it into a future dotnet release.\n\n> As you know building a serializer is a HUGE undertaking, even for a big company like Microsoft.\n\nYeah, I & many others certainly **do not** doubt the scale of the task to bring this kind of functionality natively into DotNet. Though, perhaps we may have hoped that with the help provided via AI tooling that something as big as this may have been feasible for it to make the bar for inclusion in DotNet 10 and then could be available for downstream projects like PowerShell to make use of.",
          "createdAt": "2025-01-18T11:10:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-18T16:19:01Z",
                "user": "StephenHodgson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEDGJCg=="
          },
          "updatedAt": "2025-01-18T12:29:28Z",
          "id": "IC_kwDODI9FZc6a8-JG"
        },
        {
          "author": "StephenHodgson",
          "body": "> As you know building a serializer is a HUGE undertaking, even for a big company like Microsoft.\n\nSo instead we push the effort to the community to maintain such a critical part of so much of our DevOps and automated workflows? There is also precedent for Microsoft to just incorporate the community projects into their own first party while working with those authors on integration.\n\n> Though, perhaps we may have hoped that with the help provided via AI tooling\n\n💯 This. With source generators and the like it really shouldn't be that big a lift. \n\nThere are a few oddities and edge cases in yaml but it is a superset of json.",
          "createdAt": "2025-01-18T16:21:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-18T16:21:11Z",
          "id": "IC_kwDODI9FZc6a9Wsg"
        },
        {
          "author": "davidfowl",
          "body": "AFAIK YamlDotNot is a pretty high quality yaml implementation maintained by the community.\n\n<img width=\"652\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/26375292-0ff4-49ad-83e4-bbf236a7c456\" />\n\n",
          "createdAt": "2025-01-18T16:31:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-18T16:42:56Z",
                "user": "MihaZupan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-19T08:47:59Z",
                "user": "zotabee"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-21T21:48:34Z",
                "user": "elovelan"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOEK74TQ=="
          },
          "updatedAt": "2025-01-18T16:31:48Z",
          "id": "IC_kwDODI9FZc6a9Xc0"
        },
        {
          "author": "StephenHodgson",
          "body": "> AFAIK YamlDotNot is a pretty high quality yaml implementation maintained by the community.\n\nIt's exactly the point I'm trying to make. Why isn't it too hard for people to do this in their spare time, but you guys push back about wanting to do a first party support?\n\nWhich is it? It's hard to do? Or you just don't want to do it?",
          "createdAt": "2025-01-18T16:43:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-18T16:43:35Z",
          "id": "IC_kwDODI9FZc6a9YcA"
        },
        {
          "author": "MihaZupan",
          "body": "Two things can be true at the same time.\nA community maintained project being of high quality does not imply that the problem it's solving is trivial.",
          "createdAt": "2025-01-18T16:49:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2025-01-18T16:51:36Z",
                "user": "davidfowl"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-19T08:48:30Z",
                "user": "zotabee"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEDIsYA=="
          },
          "updatedAt": "2025-01-18T16:49:02Z",
          "id": "IC_kwDODI9FZc6a9ZAA"
        },
        {
          "author": "davidfowl",
          "body": "Our JSON implementation took about 4 versions (aka years) to get to a decent place, trying to support features that JSON.NET supported, taking security and async into consideration, AOT support etc. etc. I *do* think building the next one means we can go in with LOTS of experience, and yes, we can use AI to help write the code, but writing code is not shipping and maintaining professional production quality software in 20+ year old ecosystem.",
          "createdAt": "2025-01-18T16:55:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-19T08:49:04Z",
                "user": "zotabee"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEDIsdg=="
          },
          "updatedAt": "2025-01-18T16:55:47Z",
          "id": "IC_kwDODI9FZc6a9Zqj"
        },
        {
          "author": "am11",
          "body": "> AFAIK YamlDotNet is a pretty high-quality YAML implementation maintained by the community.\n\nYup, YDN is currently garnering around 62K downloads per day and ranks <span>#</span>49 top package on nuget.org https://www.nuget.org/stats/packages. With platforms like GitHub Actions and Azure Pipelines utilizing YDN for configuration, it shows even first party platforms depend on open-source tools and libraries that are NIH where it makes sense.\n\n> There are a few oddities and edge cases in YAML, but it is a superset of JSON.\n\nIf parsing JSON is (famously dubbed as) navigating a minefield, parsing YAML can be twice as tricky (to put it lightly 😅). Thankfully, there are tools available to help streamline the process; sourcegen from specs to programming languages or validate implementations against the official YAML spec test suite. Using these tools, developers can quickly deliver implementations with high confidence (e.g., 100% spec-suite compliance). However, as @davidfowl pointed out, designing an intuitive and robust API experience on top of it, gathering real-world use cases from the community and maturing the implementation has its own set of challenges.",
          "createdAt": "2025-01-18T17:37:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-18T19:36:35Z",
                "user": "kasperk81"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-06T18:46:51Z",
                "user": "IonKiwi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-21T21:49:12Z",
                "user": "elovelan"
              },
              {
                "content": "LAUGH",
                "createdAt": "2025-09-16T12:17:35Z",
                "user": "StephenHodgson"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOEic3IQ=="
          },
          "updatedAt": "2025-01-18T17:37:39Z",
          "id": "IC_kwDODI9FZc6a9djm"
        },
        {
          "author": "rosieks",
          "body": "Not sure if YDN is still actively maintained by the community. The last commit was 8 months ago. I opened a PR almost a year ago to fix a bug, and although there are people interested in having it merged, there has been no feedback from any maintainer.",
          "createdAt": "2025-09-16T11:10:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-09-16T12:17:38Z",
                "user": "StephenHodgson"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEic3Jw=="
          },
          "updatedAt": "2025-09-16T11:10:20Z",
          "id": "IC_kwDODI9FZc7EkZN2"
        },
        {
          "author": "StephenHodgson",
          "body": "Exactly, these community lead \"solutions\" aren't going to maintain themselves which is why a trusted partner needs to take up the mantle.",
          "createdAt": "2025-09-16T12:18:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-09-16T12:18:17Z",
          "id": "IC_kwDODI9FZc7EmYuc"
        }
      ],
      "totalCount": 28,
      "endCursor": "Y3Vyc29yOnYyOpHOxJmLnA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/83313",
    "title": "Feature Request: Provide a base serializer for YAML"
  },
  {
    "author": "ViktorHofer",
    "labels": [
      "area-Meta",
      "discussion",
      "source-generator"
    ],
    "createdAt": "2023-03-14T11:24:19Z",
    "body": "See https://github.com/dotnet/runtime/pull/82179#issuecomment-1466613610 for the initial conversation.\r\n\r\nPackages which include source generators are growing unboundedly because they not just contain assemblies targeting the current roslyn but also carry along all the previous targeted source generators, i.e. roslyn3.11, roslyn4.0 and roslyn4.4. Those never get deleted because the package could be loaded in an environment (SDK / Visual Studio) that doesn't support the newer version of the compiler.\r\n\r\nThat effectively means that we need to support our roslyn3.11 source generators until the minimum version of Visual Studio that supports the generators is EOL. Based on the [official lifecycle document](https://learn.microsoft.com/en-us/lifecycle/products/visual-studio-2019), that is April 2029.\r\n\r\nConsequences based on that:\r\n- Packages are growing unboundedly whenever their underlying source generators target a new version of roslyn. \r\n- Old / legacy source generator source code can't be removed. In the example of roslyn3.11 source generators, they aren't incremental and cause performance issues.\r\n- Custom infrastructure for polyfilling SDK features in older environments adds complexity to packages. That infrastructure is repository specific (their is no shared code today at all) and written in msbuild. A package consumer needs to pay for evaluating that custom infrastructure even on a current environment.\r\n- Whenever a new source generator is added, we need to add new projects and grow the build graph as msbuild doesn't allow multi-targeting based on the compiler version.\r\n\r\nThose pain points could be mitigated by applying a [required toolset version](https://learn.microsoft.com/en-us/nuget/reference/nuspec#minclientversion) to our packages. While the toolset version refers to the minimum NuGet client version, the compiler and NuGet both ship in the SDK and Visual Studio and by picking a specific NuGet version, a compiler version is enforced as well. Alternatively we could discuss if we want to add another metadata to the nuspec file that indicates the required compiler version. Downside of that is that we would need to backport that support into those very old versions of the SDK and Visual Studio.\r\n\r\nBy applying a minimum required toolset version, we could remove those old source generators, their underlying infrastructure and with that make our packages smaller and less complex. The downside in doing that is that we would prevent customers on older environments to reference the very latest versions of our packages.\r\n\r\ncc @ericstj @eerhardt @jaredpar @stephentoub @jkotas",
    "number": 83383,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2023-03-14T13:23:11Z",
          "user": "eiriktsarpalis"
        },
        {
          "content": "HEART",
          "createdAt": "2023-03-14T15:26:58Z",
          "user": "ericstj"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOCu3lDg=="
    },
    "updatedAt": "2025-07-16T06:53:22Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSee https://github.com/dotnet/runtime/pull/82179#issuecomment-1466613610 for the initial conversation.\r\n\r\nPackages which include source generators are growing unboundedly because they not just contain assemblies targeting the current roslyn but also carry along all the previous targeted source generators, i.e. roslyn3.11, roslyn4.0 and roslyn4.4. Those never get deleted because the package could be loaded in an environment (SDK / Visual Studio) that doesn't support the newer version of the compiler.\r\n\r\nThat effectively means that we need to support our roslyn3.11 source generators until the minimum version of Visual Studio that supports the generators is EOL. Based on the [official lifecycle document](https://learn.microsoft.com/en-us/lifecycle/products/visual-studio-2019), that is April 2029.\r\n\r\nConsequences based on that:\r\n- Packages are growing unboundedly whenever their underlying source generators target a new version of roslyn. \r\n- Old / legacy source generator source code can't be removed. In the example of roslyn3.11 source generators, they aren't incremental and cause performance issues.\r\n- Custom infrastructure for polyfilling SDK features in older environments adds complexity to packages. That infrastructure is repository specific (their is no shared code today at all) and written in msbuild. A package consumer needs to pay for evaluating that custom infrastructure even on a current environment.\r\n- Whenever a new source generator is added, we need to add new projects and grow the build graph as msbuild doesn't allow multi-targeting based on the compiler version.\r\n\r\nThose pain points could be mitigated by applying a [required toolset version](https://learn.microsoft.com/en-us/nuget/reference/nuspec#minclientversion) to our packages. While the toolset version refers to the minimum NuGet client version, the compiler and NuGet both ship in the SDK and Visual Studio and by picking a specific NuGet version, a compiler version is enforced as well. Alternatively we could discuss if we want to add another metadata to the nuspec file that indicates the required compiler version. Downside of that is that we would need to backport that support into those very old versions of the SDK and Visual Studio.\r\n\r\nBy applying a minimum required toolset version, we could remove those old source generators, their underlying infrastructure and with that make our packages smaller and less complex. The downside in doing that is that we would prevent customers on older environments to reference the very latest versions of our packages.\r\n\r\ncc @ericstj @eerhardt @jaredpar @stephentoub @jkotas\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>ViktorHofer</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`, `discussion`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>8.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-03-14T11:24:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T11:24:25Z",
          "id": "IC_kwDODI9FZc5Xfqsj"
        },
        {
          "author": "sharwell",
          "body": "> ... In the example of roslyn3.11 source generators, they aren't incremental and cause performance issues. ...\r\n\r\nThis isn't really the case. In practice, one of two things is going to happen:\r\n\r\n1. The source generator is being used in a non-incremental environment (e.g. build0, where `ISourceGenerator` and `IIncrementalGenerator` exhibit very similar performance characteristics.\r\n1. The environment doesn't support something newer, in which case the generators are running as fast as is possible for the environment.",
          "createdAt": "2023-03-14T13:29:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-14T14:05:47Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC3zDGg=="
          },
          "updatedAt": "2023-03-14T13:29:14Z",
          "id": "IC_kwDODI9FZc5XgYcK"
        },
        {
          "author": "sharwell",
          "body": "> Packages are growing unboundedly whenever their underlying source generators target a new version of roslyn.\r\n\r\nNote that it's possible this has a natural upper bound. As the performance of the infrastructure is tuned to the source generators and stabilizes, we may find that newer releases of Roslyn require little to no changes to the source generators themselves. I'm concerned that by posing the question so soon after the introduction of significant features targeting runtime source generator scenarios (resulting in relatively large changes to the generator implementations), our outlook on the past year may be biasing our view of what the next 6 years look like for the same generators.",
          "createdAt": "2023-03-14T13:34:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T13:34:11Z",
          "id": "IC_kwDODI9FZc5XgafT"
        },
        {
          "author": "jkotas",
          "body": "> our roslyn3.11 source generators until the minimum version of Visual Studio that supports the generators is EOL. Based on the [official lifecycle document](https://learn.microsoft.com/en-us/lifecycle/products/visual-studio-2019), that is April 2029.\r\n\r\n.NET Core lifecycle forces you to upgrade Visual Studio much faster. Why do we need to worry about Visual Studio lifecycle? ",
          "createdAt": "2023-03-14T14:12:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-19T09:33:55Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODTQdlw=="
          },
          "updatedAt": "2023-03-14T14:12:35Z",
          "id": "IC_kwDODI9FZc5XgqBn"
        },
        {
          "author": "ViktorHofer",
          "body": "While that lifecycle applies to modern .NET, packages like System.Text.Json support netstandard2.0 as well and include source generators. AFAIK, nothing hinders you from consuming an 8.0.x package on and old Visual Studio installation and target netstandard2.0.",
          "createdAt": "2023-03-14T14:23:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T14:23:15Z",
          "id": "IC_kwDODI9FZc5XgufK"
        },
        {
          "author": "jkotas",
          "body": "The linked PR has the tests ifdefed for netcoreapp - https://github.com/dotnet/runtime/pull/82179/files#diff-415bb466216b8b4fd07992787af62f30e8a2d6d83fff4b627b88176628db7731R14 . I assume that this source generator is not going to support netstandard2.0. Is that correct?\r\n\r\nI expect that it is going to be common for new source generators to depend on new C# language features that will make it hard to target netstandard2.0. We do not generally support new C# language features with netstandard2.0. Can we limit source generators to netcoreapp targets only? \r\n\r\nIf we have shipped some netstandard2.0 targeting source generators already, can we tell how many people are actually using them with netstandard2.0? If the set is small, can we drop that support or require Visual Studio upgrade?",
          "createdAt": "2023-03-14T14:37:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T14:37:45Z",
          "id": "IC_kwDODI9FZc5Xg0Y1"
        },
        {
          "author": "ViktorHofer",
          "body": "> I assume that this source generator is not going to support netstandard2.0. Is that correct?\r\n\r\nYou mean the new one that @layomia is working on, right? He currently targets netstandard2.0: https://github.com/dotnet/runtime/pull/82179/files#diff-5cd2b9bb815efd906e5edd5f1c4bc5b1a3e5dc6e6d34195fd313e75b989c2ed5R3\r\n\r\nWhen targeting modern .NET, how would Roslyn running on .NET Framework inside Visual Studio handle loading a .NETCoreApp only source generator?",
          "createdAt": "2023-03-14T14:42:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T14:44:31Z",
          "id": "IC_kwDODI9FZc5Xg3Jo"
        },
        {
          "author": "stephentoub",
          "body": ">> I expect that it is going to be common for new source generators to depend on new C# language features that will make it hard to target netstandard2.0. \r\n\r\n> You mean the new one that @layomia is working on, right? He currently targets netstandard2.0:\r\n\r\nThere are two relevant versions with a source generator: what the source generator requires in order for itself to run, and what the code it generates requires.  I believe (though he can correct me if I'm wrong) what Jan is asking about is the latter, e.g. that source generator is emitting code that uses nullable (https://github.com/dotnet/runtime/pull/82179/files#diff-eaa3c60ce61aebffabb88f108fdbb371de78fdd4b2d0526c26b24bc60e2047bbR2), which requires a C# language version of at least C# 8, but .NET Framework and .NET Standard 2.0 only officially support using language version 7.3.",
          "createdAt": "2023-03-14T14:52:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-14T14:58:29Z",
                "user": "ViktorHofer"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-14T14:58:36Z",
                "user": "jkotas"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOC3zXdA=="
          },
          "updatedAt": "2023-03-14T14:52:47Z",
          "id": "IC_kwDODI9FZc5Xg7Ex"
        },
        {
          "author": "jkotas",
          "body": "Yes, I am talking about the language version required by the source generator.",
          "createdAt": "2023-03-14T14:58:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T14:58:38Z",
          "id": "IC_kwDODI9FZc5Xg-gh"
        },
        {
          "author": "jaredpar",
          "body": " > Why do we need to worry about Visual Studio lifecycle?\r\n\r\nEven though the .NET lifecycle for runtimes moves faster, the lifecycle for TFMs does not in the .NET SDK. It is still legal and supported to target `netcoreapp3.1` for libraries for build and design time and will be until we change the .NET SDK to put a finite lifetime on it (seems unlikely). That means by extension it's supported to do this in Visual Studio. \r\n\r\nOnce source generators enter the picture it means that the .NET SDK has design time assets that are a part of the editing experience. Those need to be setup for servicing for the lifetime of the Visual Studio they run in. How the servicing works is a bit more flexible but they do need to be setup for servicing. ",
          "createdAt": "2023-03-14T15:17:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T15:17:40Z",
          "id": "IC_kwDODI9FZc5XhIGt"
        },
        {
          "author": "jkotas",
          "body": "> It is still legal and supported to target netcoreapp3.1\r\n\r\nHow can that be still legal and supported when the .NET Core 3.1 is out of support and we are not shipping servicing updates for it anymore? If we are not shipping servicing updates -> it is not supported.",
          "createdAt": "2023-03-14T15:28:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T15:28:08Z",
          "id": "IC_kwDODI9FZc5XhMaJ"
        },
        {
          "author": "eerhardt",
          "body": ">  I assume that this source generator is not going to support netstandard2.0.\r\n\r\nFor this specific source generator, we would like to use it ourselves in a `netstandard2.0` library -  `Microsoft.Extensions.Logging.Console` (see #82098 where we hand-wrote the code that we would like to be replaced with the source generator). I assume we have other potential consumers of it that are targeting `netstandard2.0`, but I haven't verified it.",
          "createdAt": "2023-03-14T15:31:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T15:31:04Z",
          "id": "IC_kwDODI9FZc5XhNod"
        },
        {
          "author": "jaredpar",
          "body": "> How can that be still legal and supported when the .NET Core 3.1 is out of support and we are not shipping servicing updates for it anymore? If we are not shipping servicing updates -> it is not supported.\r\n\r\nFor the .NET SDK it remains a supported story to build apps, libs, etc ... targeting older TFMs. There is nothing stopping customers from doing this and we go to lots of lengths to continue making it work. \r\n\r\n@marcpopMSFT ",
          "createdAt": "2023-03-14T16:01:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T16:01:34Z",
          "id": "IC_kwDODI9FZc5XhbZm"
        },
        {
          "author": "ViktorHofer",
          "body": "While you are talking about netcoreapp3.1, it isn't clear to me why this doesn't apply to netstandard2.0 and net462 as well. Am I missing something? When consuming our packages, the sdk automatically picks up the source generators which are all compiled against netstandard2.0, and roslyn then loads them.\r\n\r\nI.e. a customers using VS 2019 can use our source generators when building a netstandard2.0 library and that version of VS only supports roslyn3.11. How does the .NET Core lifecycle policy come into play here?\r\n\r\nEDIT:\r\nNote that @stephentoub just found out that our out-of-band source generators produce non-compileable code when targeting .NET Framework or netstandard2.0 and using official supported lang versions:\r\n- https://github.com/dotnet/runtime/issues/83392\r\n- https://github.com/dotnet/runtime/issues/83393",
          "createdAt": "2023-03-14T16:08:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T16:10:44Z",
          "id": "IC_kwDODI9FZc5XheDh"
        },
        {
          "author": "sharwell",
          "body": "> Note that @stephentoub just found out that our out-of-band source generators produce non-compileable code when targeting .NET Framework or netstandard2.0 and using official supported lang versions:\r\n\r\nThe Microsoft.CodeAnalysis.Testing library can significantly help with this. It allows testing a source generator against a specific defined target framework, with options to either fully validate the output content produced by the generator, or just validate that the code produced by the generator builds without errors.",
          "createdAt": "2023-03-14T16:12:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-14T16:14:12Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC3z0AQ=="
          },
          "updatedAt": "2023-03-14T16:12:56Z",
          "id": "IC_kwDODI9FZc5XhgWy"
        },
        {
          "author": "stephentoub",
          "body": "> The Microsoft.CodeAnalysis.Testing library can significantly help with this.\r\n\r\nWe don't require any new components: the tests there simply aren't setting a language version.  When I add the one argument to do so, the tests stop passing as expected.",
          "createdAt": "2023-03-14T16:15:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T16:15:53Z",
          "id": "IC_kwDODI9FZc5Xhhtx"
        },
        {
          "author": "jaredpar",
          "body": "> While you are talking about netcoreapp3.1, it isn't clear to me why this doesn't apply to netstandard2.0 and net462 as well. Am I missing something?\r\n\r\nIt applies to all TFM that I'm aware of. We fairly regularly get support bugs where customers are targeting all manner of TFM. \r\n\r\n> I.e. a customers using VS 2019 can use our source generators when building a netstandard2.0 library and that version of VS only supports roslyn3.11. How does the .NET Core lifecycle policy come into play here?\r\n\r\nI don't believe the .NET Core lifecycle applies there at all. It's fully supported to build those `netstandard2.0` libraries irrespective of the .NET Core lifecycle. If we supported generators in that setup for VS2019 RTM, we're supporting them through the servicing lifetime of VS ",
          "createdAt": "2023-03-14T16:29:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T16:29:27Z",
          "id": "IC_kwDODI9FZc5XhntF"
        },
        {
          "author": "jkotas",
          "body": "> For the .NET SDK it remains a supported story to build apps, libs, etc ... targeting older TFMs. There is nothing stopping customers from doing this and we go to lots of lengths to continue making it work.\r\n\r\nTargeting older TFMs requires ref packs. Ref packs include analyzers and source generators. What are we going to do when a customer reports a (security) bug in the source generator that is part of ref pack for out-of-support runtime (e.g. netcoreapp3.1)? I am pretty sure that we are going to say that it is unsupported scenario and tell the customer to upgrade.\r\n\r\nThere is a difference between .NET SDK not actively blocking targeting out-of-support TFMs, and the scenario being a supported story.",
          "createdAt": "2023-03-14T18:17:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T18:49:44Z",
          "id": "IC_kwDODI9FZc5XiSHq"
        },
        {
          "author": "jaredpar",
          "body": "> Targeting older TFMs requires ref packs. Ref packs include analyzers and source generators. \r\n\r\nUnderstood. I brought this up with @ericstj and @ViktorHofer several times when we were initially working on the runtime generator story specifically to point out the ramifications this had for Visual Studio servicing. \r\n\r\n>  What are we going to do when a customer reports a (security) bug in the source generator that is part of ref pack for out-of-support runtime (e.g. netcoreapp3.1)?\r\n\r\nI'm more concerned about performance bugs as they're far more common and tend to be greater drivers of servicing requests for Visual Studio.\r\n",
          "createdAt": "2023-03-14T18:23:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T18:23:53Z",
          "id": "IC_kwDODI9FZc5XiU2M"
        },
        {
          "author": "marcpopMSFT",
          "body": "Including @leecow in case he knows if this is documented anywhere officially. We allow SDKs to continue to target all prior runtimes and try to avoid any changes that would break those scenarios. We didn't want customers to have their builds broken just by updating their SDK. \r\n\r\nHowever, as Jan points out, that's different than the scenario being supported. We would not fix even security bugs when targeting out of support runtimes and if a default scenario broke entirely (eg. building for netcoreapp2.0 completely broke for some reason), we might do a limited investigation to see if it were possible to unblock. If less common scenarios broke (ie anything outside of maybe build/restore), we likely would leave it broken without investigating.",
          "createdAt": "2023-03-14T18:27:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T18:27:32Z",
          "id": "IC_kwDODI9FZc5XiWR3"
        },
        {
          "author": "leecow",
          "body": "> ... .NET SDK not actively blocking targeting out-of-support TFMs\r\n\r\nThis has been the best effort intent from the very beginning though I'm unable to find that we wrote it down in any support-related document. \r\n\r\ncc @richlander and @DamianEdwards as they were also part of the original discussions and may remember. ",
          "createdAt": "2023-03-14T20:12:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-14T20:12:25Z",
          "id": "IC_kwDODI9FZc5Xi5WO"
        },
        {
          "author": "richlander",
          "body": "Initially, we wanted to make it possible for people to target old TFMs, even if they were out of support. The ref packs for those TFMs only exposed shape so folks using them seemed fine and the ROI of moving seemed low. I agree with @jkotas that source generators significantly change the game here.\r\n\r\nI propose that we update our guidance that we no longer support old TFMs (even for libraries) once a given .NET version goes out of support. The maintenance cost I'm reading about here seems much too high and we should find a way (as proposed) to reduce it.\r\n\r\nI believe we already warn at build time when an old TFM is detected. It's likely overkill turning that to an error. We could also make it a warning to reference a package w/only unsupported TFM assets. That would be symmetric.",
          "createdAt": "2023-03-15T14:37:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-15T14:37:07Z",
          "id": "IC_kwDODI9FZc5XoFaM"
        },
        {
          "author": "jaredpar",
          "body": "> I believe we already warn at build time when an old TFM is detected. It's likely overkill turning that to an error. \r\n\r\nMaking that an error is not an option. It would be an explicit adoption blocker for many of our largest customers. For example you couldn't even deploy .NET SDK 8 to our own builds if you did this. There are **many** other 1P customers who reference TFM we consider out of date than we constantly push to grab new .NET SDK for other reasons. \r\n\r\n",
          "createdAt": "2023-03-15T15:56:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-03-15T20:21:22Z",
                "user": "DamianEdwards"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC36VCw=="
          },
          "updatedAt": "2023-03-15T15:56:11Z",
          "id": "IC_kwDODI9FZc5XowU_"
        },
        {
          "author": "marcpopMSFT",
          "body": "Agreed that we can't make it an error. Is there any alternative for source generators that isn't as high cost as a continuously growing package?  Could we have separate packages for the out of support ones that we download independently so the in-support versions at least are a controlled size?",
          "createdAt": "2023-03-15T17:17:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-15T17:17:47Z",
          "id": "IC_kwDODI9FZc5XpRvc"
        },
        {
          "author": "DamianEdwards",
          "body": "Just echoing what @jaredpar said and @marcpopMSFT agreed to: it's much too high of an adoption blocker to remove the ability to build for unsupported TFMs in new SDKs. New tools must continue to build the older TFMs past that TFM's support lifecycle. That said, I'm not sure it needs to support it indefinitely. We can be data-driven and consider dropping support for older TFMs once their usage drops to levels where we believe the trade-off is worthwhile and the number of impacted users is low.\r\n\r\n> Could we have separate packages for the out of support ones that we download independently so the in-support versions at least are a controlled size?\r\n\r\nThis line of thinking seems good. While understanding it likely introduces a new packaging boundary, being able to push out of support elements out of the SDK but allow them to be downloaded on demand seems worthy of discussion/investigation.",
          "createdAt": "2023-03-15T20:25:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-19T15:01:17Z",
          "id": "IC_kwDODI9FZc5Xqn7T"
        },
        {
          "author": "richlander",
          "body": "Here's a support statement to consider: https://github.com/dotnet/core/pull/8305",
          "createdAt": "2023-03-18T21:35:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-03-18T21:35:14Z",
          "id": "IC_kwDODI9FZc5X6rh3"
        },
        {
          "author": "teo-tsirpanis",
          "body": "> Packages are growing unboundedly whenever their underlying source generators target a new version of roslyn.\r\n\r\n> a continuously growing package\r\n\r\nHow about we distribute source generators only for Roslyn versions 3.11 (to support VS 2019), 4.0 and the latest it has an interesting feature, and remove the others? If a future 4.x version has an API we want to use, we could drop 4.4 and users on earlier versions of VS 2022 will fall back to the 4.0 edition. Performance will be worse (but not the worst; at least it will still be using incremental generators), but we will be always targeting three Roslyn versions and keep the package's size bounded.",
          "createdAt": "2023-05-21T13:02:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-21T13:02:07Z",
          "id": "IC_kwDODI9FZc5cwVet"
        },
        {
          "author": "sharwell",
          "body": "Source generators shouldn't need to constantly grow in size. To date, they only grew in size when we built a targeted API to address the high-level performance of one or more specific source generators. The opportunities for broad-scoped performance improvements like this is reducing over time, and for some of them (e.g. FAWMN) where the new API only uses types that can also be represented in the older versions, the package could use lightup/reflection to either polyfill or use the compiler feature as necessary from a single assembly.",
          "createdAt": "2023-05-23T13:11:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-23T13:11:02Z",
          "id": "IC_kwDODI9FZc5c8TJI"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nSee https://github.com/dotnet/runtime/pull/82179#issuecomment-1466613610 for the initial conversation.\r\n\r\nPackages which include source generators are growing unboundedly because they not just contain assemblies targeting the current roslyn but also carry along all the previous targeted source generators, i.e. roslyn3.11, roslyn4.0 and roslyn4.4. Those never get deleted because the package could be loaded in an environment (SDK / Visual Studio) that doesn't support the newer version of the compiler.\r\n\r\nThat effectively means that we need to support our roslyn3.11 source generators until the minimum version of Visual Studio that supports the generators is EOL. Based on the [official lifecycle document](https://learn.microsoft.com/en-us/lifecycle/products/visual-studio-2019), that is April 2029.\r\n\r\nConsequences based on that:\r\n- Packages are growing unboundedly whenever their underlying source generators target a new version of roslyn. \r\n- Old / legacy source generator source code can't be removed. In the example of roslyn3.11 source generators, they aren't incremental and cause performance issues.\r\n- Custom infrastructure for polyfilling SDK features in older environments adds complexity to packages. That infrastructure is repository specific (their is no shared code today at all) and written in msbuild. A package consumer needs to pay for evaluating that custom infrastructure even on a current environment.\r\n- Whenever a new source generator is added, we need to add new projects and grow the build graph as msbuild doesn't allow multi-targeting based on the compiler version.\r\n\r\nThose pain points could be mitigated by applying a [required toolset version](https://learn.microsoft.com/en-us/nuget/reference/nuspec#minclientversion) to our packages. While the toolset version refers to the minimum NuGet client version, the compiler and NuGet both ship in the SDK and Visual Studio and by picking a specific NuGet version, a compiler version is enforced as well. Alternatively we could discuss if we want to add another metadata to the nuspec file that indicates the required compiler version. Downside of that is that we would need to backport that support into those very old versions of the SDK and Visual Studio.\r\n\r\nBy applying a minimum required toolset version, we could remove those old source generators, their underlying infrastructure and with that make our packages smaller and less complex. The downside in doing that is that we would prevent customers on older environments to reference the very latest versions of our packages.\r\n\r\ncc @ericstj @eerhardt @jaredpar @stephentoub @jkotas\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>ViktorHofer</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>ViktorHofer</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `discussion`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-01-18T16:25:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-18T16:25:43Z",
          "id": "IC_kwDODI9FZc5xLYi-"
        },
        {
          "author": "ericstj",
          "body": "Refreshing this issue for some discussion in 9.0.  For some scoping -- this issue is to discuss the source generators we ship in **NuGet packages**.  The targeting-pack generators are already tied to a specific minimum roslyn version and have a servicing lifecycle -- those are out of scope for this issue.\r\n\r\nThis issue is to discuss the removal of source generators from the build and nuget packages for very old versions of Roslyn - which are no longer supported in the latest Visual Studio version, but are supported in older Visual Studio versions (2019).\r\n\r\nToday we have to keep those working in the latest releases, and make them support new features that are added to the OOB packages.  This is acutely a problem for System.Text.Json, Microsoft.Extensions.Logging - which [still target Roslyn 3.11](https://github.com/search?q=repo%3Adotnet%2Fruntime%20MicrosoftCodeAnalysisVersion_3_11&type=code).  It's less of a problem for other packages (Options and Configuration) since those first introduced the generator to target a much more recent version of Roslyn and can track it's support lifecycle in the latest VS.  Whatever we decide for Json and Logging can also be applied to the other generators.\r\n\r\nOne suggestion above was to split the generators out into another package -- while that could serve to remove the generator from the current package it doesn't really solve the maintenance challenges of keeping the generators targeting that old version building, testing, and getting new features.\r\n\r\nWhatever we do here is going to be perceived as a breaking change by some set (could be small) of customers who are trying to use the source generators on VS 2019 when targeting .NETFramework or .NETStandard.  I think we need to accept and coument that as a breaking, and provide a workaround.  They could download and manually reference the old generator if they wish - or check-in it's output.  ",
          "createdAt": "2024-01-18T17:30:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-18T17:53:48Z",
          "id": "IC_kwDODI9FZc5xLzGX"
        },
        {
          "author": "jaredpar",
          "body": "I think removing support for older Roslyn versions in NuGet is reasonable. The impact is updating to a new version on a fairly old VS is a breaking change. There are  existing scenarios where that happens. Many of our build task NuGet packages take dependencies on newer versions of MSBuild and hence won't work in older versions of VS. \n\nThe one caveat is security issue which forces us to fix a generators. Could end up in a position where we have to service an old NuGet vs asking customers to upgrade to latest. Becuase this proposal is creating a scenario where updating to latest can break tooling and likely won't be acceptable in a security fix. ",
          "createdAt": "2024-01-19T01:23:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-19T09:50:35Z",
                "user": "eiriktsarpalis"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODTQmow=="
          },
          "updatedAt": "2024-01-19T01:23:57Z",
          "id": "IC_kwDODI9FZc5xN9eD"
        },
        {
          "author": "eiriktsarpalis",
          "body": "What is the precise nature of the breaking change when referencing a Roslyn >= 4.0 source generator in VS 2019? (apologies, I don't have it installed on my machine). Is it making it impossible to add the NuGet dependency altogether or is it just a matter of not being able to view the generated source files in the IDE and getting relevant intellisense hints?",
          "createdAt": "2024-01-19T09:54:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-19T09:54:06Z",
          "id": "IC_kwDODI9FZc5xQRUH"
        },
        {
          "author": "ViktorHofer",
          "body": "The same as outside of Visual Studio when you reference a source generator that requires a newer version of Roslyn than the version of the compiler being used:\r\n\r\n> The analyzer assembly 'C:\\Program Files\\dotnet\\sdk\\9.0.100-alpha.1.24068.28\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll' references version '4.10.0.0' of the compiler, which is newer than the currently running version '4.9.0.0'.\r\n\r\nFor packages like System.Text.Json which specify the minimum required roslyn version, the analyzer assembly wouldn't even get passed to the compiler. I.e. if you remove `roslyn3.11` from System.Text.Json, VS2019 wouldn't receive the `roslyn4.0` or `roslyn4.4` source generators.",
          "createdAt": "2024-01-19T10:48:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-19T10:50:13Z",
          "id": "IC_kwDODI9FZc5xQmKC"
        },
        {
          "author": "sharwell",
          "body": "@ericstj Do we have reason to believe https://github.com/dotnet/runtime/issues/83383#issuecomment-1559310920 is not going to be correct? I understand that the current state caused (past tense) additional work, but it's not clear to me that the current state would be likely to lead to burdensome future work.",
          "createdAt": "2024-01-19T14:04:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-19T14:05:00Z",
          "id": "IC_kwDODI9FZc5xRwhQ"
        },
        {
          "author": "ericstj",
          "body": "> The one caveat is security issue which forces us to fix a generators. Could end up in a position where we have to service an old NuGet vs asking customers to upgrade to latest. Becuase this proposal is creating a scenario where updating to latest can break tooling and likely won't be acceptable in a security fix.\r\n\r\nWhich is why we would want to proactively message to folks that it's no longer going to be supported in the future with enough time to get them to move, before the version (in 8.0 package, for example) goes out of support.  Such a path requires us to follow some deprecation messaging.\r\n\r\n> @ericstj Do we have reason to believe https://github.com/dotnet/runtime/issues/83383#issuecomment-1559310920 is not going to be correct?\r\n\r\n@sharwell I don't think we grow indefinitely.  Probably just a finite set.  We just want to determine what rules we follow for adding new targets, and removing the ones we have.",
          "createdAt": "2024-01-19T19:04:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-19T19:04:02Z",
          "id": "IC_kwDODI9FZc5xTksy"
        },
        {
          "author": "MauNguyenVan",
          "body": "We should update the docs first. Currently, the main doc and it's examples is still using ISourceGenerator, nothing mentioned to IIncrementalGenerator. So newbies don't know about IIncrementalGenerator and will still use ISourceGenerator. ",
          "createdAt": "2024-08-03T05:28:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-03T15:50:21Z",
                "user": "richlander"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODssGmQ=="
          },
          "updatedAt": "2024-08-03T05:28:37Z",
          "id": "IC_kwDODI9FZc6HFj30"
        }
      ],
      "totalCount": 36,
      "endCursor": "Y3Vyc29yOnYyOpHOhxY99A=="
    },
    "url": "https://github.com/dotnet/runtime/issues/83383",
    "title": "Consider deprecating older source generators and their associated infrastructure"
  },
  {
    "author": "gbalykov",
    "labels": [
      "area-Meta",
      "help wanted",
      "arch-riscv"
    ],
    "createdAt": "2023-04-14T12:34:23Z",
    "body": "## Current status\r\n\r\nOur initial goal was to get to 100% pass rate for CodeGen BringUp tests in Debug mode. We've achieved this both on qemu and on StarFive VisionFive2 board.\r\n\r\nFor this, all changes are currenlty in PRs created by my colleagues @clamp03 @t-mustafin:\r\n- already merged (https://github.com/dotnet/runtime/pull/82379, https://github.com/dotnet/runtime/pull/82382, https://github.com/dotnet/runtime/pull/84584, https://github.com/dotnet/runtime/pull/84608, https://github.com/dotnet/runtime/pull/82380)\r\n- not yet merged at the moment of writing (https://github.com/dotnet/runtime/pull/84748, https://github.com/dotnet/runtime/pull/82381, https://github.com/dotnet/runtime/pull/84797).\r\n\r\nSo, when all of the above are merged, CodeGen BringUp tests launched on main branch should pass both on VisionFive2 and qemu (*for StarFive VisionFive2 board `GC_REGIONS` also need to be disabled currently, we are already investigating this*).\r\n\r\nCurrent test results for full JIT directory on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 4737\r\n# Passed           : 4304\r\n# Failed           : 413\r\n# Skipped          : 20\r\n```\r\n\r\nCurrent test results for all tests on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 6565\r\n# Passed           : 5663\r\n# Failed           : 861\r\n# Skipped          : 41\r\n```\r\n\r\n## Further plans\r\n\r\n#### Our further plans for near future:\r\n- [x] focus on full JIT tests directory to make tests pass in Release/Debug/Checked mode and with/without `DOTNET_GCgen0size=99999999`\r\n- fix TODOs, which are not related to jit optimizations\r\n- [x] add build CI in dotnet/runtime repo for RISC-V\r\n- ~~add CI in dotnet/runtime repo for RISC-V with some tests run on qemu~~\r\n- [x] enable JitDisasm and JitDump\r\n- [x] fix or disable `GC_REGIONS` on VisionFive2\r\n- [x] focus on more tests dirs with Release/Debug/Checked build of runtime after all of the above\r\n- [ ] focus on libraries (corefx) tests to make innerloop/outerloop tests pass\r\n- [ ] jitstress, jitstressregs, gcstress testing\r\n\r\n#### What's currently not in our plans for near future:\r\n- full jit optimizations with all optimization passes (i.e. disabled MinOpt, tiered compilation, etc.)\r\n- optimizations of codegen itself\r\n- crossgen2 support\r\n- SIMD and intrinsics support\r\n- GC (not sure about this yet, need to check current status without `DOTNET_GCgen0size=99999999` and with/without `FEATURE_CONSERVATIVE_GC`)\r\n- EH, stackwalking, and interop portions (also not sure, need to check current status)\r\n- stubs optimizations, GC optimizations, etc.\r\n\r\n## Process\r\n\r\nIn overall, we basically follow https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/jit/porting-ryujit.md and https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/guide-for-porting.md. We categorize failing tests by error type. Soon we'll open separate issue on what's currently being worked on.\r\n\r\n## Related issues\r\n\r\nhttps://github.com/dotnet/runtime/issues/36748, https://github.com/dotnet/runtime/issues/75749",
    "number": 84834,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T12:47:03Z",
          "user": "jakobbotsch"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T12:51:53Z",
          "user": "clamp03"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T12:54:41Z",
          "user": "En3Tho"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T15:19:25Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T15:59:59Z",
          "user": "strangeman375"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-14T18:26:36Z",
          "user": "BruceForstall"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-15T09:54:29Z",
          "user": "archanox"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-15T10:52:29Z",
          "user": "t-mustafin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-16T00:56:25Z",
          "user": "pedoc"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-18T18:15:25Z",
          "user": "alpencolt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-25T06:48:08Z",
          "user": "omariom"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-04-26T20:45:29Z",
          "user": "omariom"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-04-28T22:44:22Z",
          "user": "jupjohn"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-05-01T04:02:50Z",
          "user": "MineCake147E"
        },
        {
          "content": "HEART",
          "createdAt": "2023-06-09T11:48:25Z",
          "user": "omariom"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-12T06:28:00Z",
          "user": "ptasev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-21T05:58:08Z",
          "user": "myungjoo"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-07-10T19:24:43Z",
          "user": "xoofx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-10T16:03:47Z",
          "user": "mmarinchenko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-15T13:48:53Z",
          "user": "aeb-dev"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-15T13:48:56Z",
          "user": "aeb-dev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-23T12:20:03Z",
          "user": "arkadiuszwojcik"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-01T10:27:18Z",
          "user": "mmarinchenko"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-03T07:38:04Z",
          "user": "jquirke"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-03T07:38:07Z",
          "user": "jquirke"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-04T06:05:32Z",
          "user": "atrauzzi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-06T23:39:06Z",
          "user": "expcat"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-16T09:07:28Z",
          "user": "zuev56"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-12T05:24:40Z",
          "user": "zezba9000"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-18T18:58:26Z",
          "user": "dcuccia"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-12-23T15:38:32Z",
          "user": "am11"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-23T15:38:37Z",
          "user": "am11"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-23T15:38:39Z",
          "user": "am11"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-14T13:22:18Z",
          "user": "ghishadow"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-25T00:11:10Z",
          "user": "microhobby"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-25T00:11:10Z",
          "user": "microhobby"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-02-25T00:11:11Z",
          "user": "microhobby"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-04T06:56:05Z",
          "user": "startewho"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-04T09:55:33Z",
          "user": "dkurt"
        },
        {
          "content": "HEART",
          "createdAt": "2024-03-04T09:55:36Z",
          "user": "dkurt"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-03-04T09:55:38Z",
          "user": "dkurt"
        },
        {
          "content": "HEART",
          "createdAt": "2024-06-02T01:46:16Z",
          "user": "ghishadow"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-06-02T01:46:18Z",
          "user": "ghishadow"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-03T21:43:52Z",
          "user": "juergenpf"
        },
        {
          "content": "HEART",
          "createdAt": "2024-06-03T21:43:59Z",
          "user": "juergenpf"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-06-03T21:44:13Z",
          "user": "juergenpf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-17T23:47:31Z",
          "user": "EgorBo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-18T12:00:16Z",
          "user": "SimonIT"
        },
        {
          "content": "HEART",
          "createdAt": "2024-12-18T12:00:18Z",
          "user": "SimonIT"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-18T13:19:54Z",
          "user": "anpin"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-18T14:43:10Z",
          "user": "WeihanLi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-18T16:43:36Z",
          "user": "RokeJulianLockhart"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-07T18:54:10Z",
          "user": "blackhat-coder"
        },
        {
          "content": "HEART",
          "createdAt": "2025-03-19T18:49:10Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "ROCKET",
          "createdAt": "2025-03-19T18:49:11Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "HEART",
          "createdAt": "2025-04-01T11:27:31Z",
          "user": "baioc"
        },
        {
          "content": "HEART",
          "createdAt": "2025-04-01T11:30:48Z",
          "user": "dviererbe"
        }
      ],
      "totalCount": 57,
      "endCursor": "Y3Vyc29yOnYyOpHOC9kguA=="
    },
    "updatedAt": "2025-07-18T16:37:56Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch, @kunalspathak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n## Current status\r\n\r\nOur initial goal was to get to 100% pass rate for CodeGen BringUp tests in Debug mode. We've achieved this both on qemu and on StarFive VisionFive2 board.\r\n\r\nFor this, all changes are currenlty in PRs created by my colleagues @clamp03 @t-mustafin:\r\n- already merged (https://github.com/dotnet/runtime/pull/82379, https://github.com/dotnet/runtime/pull/82382, https://github.com/dotnet/runtime/pull/84584, https://github.com/dotnet/runtime/pull/84608, https://github.com/dotnet/runtime/pull/82380)\r\n- not yet merged at the moment of writing (https://github.com/dotnet/runtime/pull/84748, https://github.com/dotnet/runtime/pull/82381, https://github.com/dotnet/runtime/pull/84797).\r\n\r\nSo, when all of the above are merged, CodeGen BringUp tests launched on main branch should pass both on VisionFive2 and qemu (*for StarFive VisionFive2 board `GC_REGIONS` also need to be disabled currently, we are already investigating this*).\r\n\r\nCurrent test results for full JIT directory on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 4737\r\n# Passed           : 4304\r\n# Failed           : 413\r\n# Skipped          : 20\r\n```\r\n\r\nCurrent test results for all tests on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 6565\r\n# Passed           : 5663\r\n# Failed           : 861\r\n# Skipped          : 41\r\n```\r\n\r\n## Further plans\r\n\r\n#### Our further plans for near future:\r\n- focus on full JIT tests directory to make tests pass in Debug mode and with `DOTNET_GCgen0size=99999999`\r\n- fix TODOs, which are not related to jit optimizations\r\n- add CI in dotnet/runtime repo for RISC-V with some tests run on qemu\r\n- enable JitDisasm and JitDump\r\n- fix or disable `GC_REGIONS` on VisionFive2\r\n- focus on more tests dirs with Debug build of runtime after all of the above\r\n\r\n#### What's currently not in our plans for near future:\r\n- full jit optimizations with all optimization passes (i.e. disabled MinOpt, tiered compilation, etc.)\r\n- optimizations of codegen itself\r\n- crossgen2 support\r\n- SIMD and intrinsics support\r\n- jitstress, jitstressregs, gcstress testing\r\n- GC (not sure about this yet, need to check current status without `DOTNET_GCgen0size=99999999` and with/without `FEATURE_CONSERVATIVE_GC`)\r\n- EH, stackwalking, and interop portions (also not sure, need to check current status)\r\n- running libraries (corefx) tests\r\n- stubs optimizations, GC optimizations, etc.\r\n\r\n## Process\r\n\r\nIn overall, we basically follow https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/jit/porting-ryujit.md and https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/guide-for-porting.md. We categorize failing tests by error type. Soon we'll open separate issue on what's currently being worked on.\r\n\r\n## Related issues\r\n\r\nhttps://github.com/dotnet/runtime/issues/36748, https://github.com/dotnet/runtime/issues/75749\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>gbalykov</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-CodeGen-coreclr`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-04-14T12:34:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-14T12:34:32Z",
          "id": "IC_kwDODI9FZc5Z6PfX"
        },
        {
          "author": "gbalykov",
          "body": "CC @wscho77 @HJLeee @JongHeonChoi @t-mustafin @clamp03 @alpencolt @jakobbotsch ",
          "createdAt": "2023-04-14T12:36:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-14T12:36:18Z",
          "id": "IC_kwDODI9FZc5Z6P8q"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n## Current status\r\n\r\nOur initial goal was to get to 100% pass rate for CodeGen BringUp tests in Debug mode. We've achieved this both on qemu and on StarFive VisionFive2 board.\r\n\r\nFor this, all changes are currenlty in PRs created by my colleagues @clamp03 @t-mustafin:\r\n- already merged (https://github.com/dotnet/runtime/pull/82379, https://github.com/dotnet/runtime/pull/82382, https://github.com/dotnet/runtime/pull/84584, https://github.com/dotnet/runtime/pull/84608, https://github.com/dotnet/runtime/pull/82380)\r\n- not yet merged at the moment of writing (https://github.com/dotnet/runtime/pull/84748, https://github.com/dotnet/runtime/pull/82381, https://github.com/dotnet/runtime/pull/84797).\r\n\r\nSo, when all of the above are merged, CodeGen BringUp tests launched on main branch should pass both on VisionFive2 and qemu (*for StarFive VisionFive2 board `GC_REGIONS` also need to be disabled currently, we are already investigating this*).\r\n\r\nCurrent test results for full JIT directory on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 4737\r\n# Passed           : 4304\r\n# Failed           : 413\r\n# Skipped          : 20\r\n```\r\n\r\nCurrent test results for all tests on VisionFive2 in Debug with `DOTNET_GCgen0size=99999999`:\r\n```\r\n# Tests Discovered : 6565\r\n# Passed           : 5663\r\n# Failed           : 861\r\n# Skipped          : 41\r\n```\r\n\r\n## Further plans\r\n\r\n#### Our further plans for near future:\r\n- focus on full JIT tests directory to make tests pass in Debug mode and with `DOTNET_GCgen0size=99999999`\r\n- fix TODOs, which are not related to jit optimizations\r\n- add CI in dotnet/runtime repo for RISC-V with some tests run on qemu\r\n- enable JitDisasm and JitDump\r\n- fix or disable `GC_REGIONS` on VisionFive2\r\n- focus on more tests dirs with Debug build of runtime after all of the above\r\n\r\n#### What's currently not in our plans for near future:\r\n- full jit optimizations with all optimization passes (i.e. disabled MinOpt, tiered compilation, etc.)\r\n- optimizations of codegen itself\r\n- crossgen2 support\r\n- SIMD and intrinsics support\r\n- jitstress, jitstressregs, gcstress testing\r\n- GC (not sure about this yet, need to check current status without `DOTNET_GCgen0size=99999999` and with/without `FEATURE_CONSERVATIVE_GC`)\r\n- EH, stackwalking, and interop portions (also not sure, need to check current status)\r\n- running libraries (corefx) tests\r\n- stubs optimizations, GC optimizations, etc.\r\n\r\n## Process\r\n\r\nIn overall, we basically follow https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/jit/porting-ryujit.md and https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/guide-for-porting.md. We categorize failing tests by error type. Soon we'll open separate issue on what's currently being worked on.\r\n\r\n## Related issues\r\n\r\nhttps://github.com/dotnet/runtime/issues/36748, https://github.com/dotnet/runtime/issues/75749\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>gbalykov</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-04-14T13:11:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-14T13:11:21Z",
          "id": "IC_kwDODI9FZc5Z6ahS"
        },
        {
          "author": "JakeSays",
          "body": "At first I was excited to see this RISCV work, but the list of 'not planned' stuff is significant.",
          "createdAt": "2023-04-14T14:49:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-14T14:49:42Z",
          "id": "IC_kwDODI9FZc5Z7OW9"
        },
        {
          "author": "shushanhf",
          "body": "@gbalykov @t-mustafin @clamp03 \r\nYou should be careful before pushing PRs to avoid destroying the LoongArch64's code, liking #84584 #82381",
          "createdAt": "2023-04-21T09:27:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-21T09:42:30Z",
          "id": "IC_kwDODI9FZc5ac-UC"
        },
        {
          "author": "alpencolt",
          "body": "`JitDisasm` and `JitDump` work on RISC-V. Could be excluded from list.",
          "createdAt": "2023-04-21T13:53:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-21T13:53:10Z",
          "id": "IC_kwDODI9FZc5aeNcr"
        },
        {
          "author": "JulieLeeMSFT",
          "body": "cc @mangod9 ",
          "createdAt": "2023-04-21T21:38:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-21T21:38:38Z",
          "id": "IC_kwDODI9FZc5agEw8"
        },
        {
          "author": "shushanhf",
          "body": "@clamp03  @BruceForstall @jakobbotsch \r\n\r\nAs https://github.com/dotnet/runtime/pull/82294, the RISCV64 is based on LoongArch64, the RISCV64 is so similarity with LoongArch64.\r\n\r\nWhen I push LA64's PR, if also fix the RISCV64 with LoongArch64, while the LA64's patch I had tested on LA64's PC but I don't have the RISCV64 and can't test the RISCV64.\r\n\r\nWhat do you mean?",
          "createdAt": "2023-04-24T03:33:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-24T03:35:49Z",
          "id": "IC_kwDODI9FZc5ajzvp"
        },
        {
          "author": "BruceForstall",
          "body": "@shushanhf I don't quite understand what you are asking.\r\n\r\nI think you are saying: you can change LA64 and test LA64, but cannot build/test RISC-V. Is the question: how to do this? Or, what kind of testing is expected?\r\n\r\nCurrently, there is no building/testing of LA64 or RISC-V in the CI system. I don't expect that to change. Perhaps it would be a good idea to make it easy to build and possibly even do minimal testing (\"smoke testing\") of both platforms. I don't expect Microsoft will ever want to make that a pre-checkin requirement for changes to this repository -- the RISC-V and LA64 teams will still be responsible for actively monitoring for changes, and reacting to required changes in the VM and JIT. But if building/testing is easy, perhaps it will give better advanced notice to all teams of potential issues or work.\r\n",
          "createdAt": "2023-04-24T19:08:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-04-24T19:08:00Z",
          "id": "IC_kwDODI9FZc5ao9Np"
        },
        {
          "author": "jkotas",
          "body": "We are open to sponsor CI build-only legs for community supported targets to prevent trivial build breaks from getting in. Tizen and FreeBSD ports are on this plan today. If you are interested, create build environment with Linux x64 hosted cross-build environment in https://github.com/dotnet/dotnet-buildtools-prereqs-docker/ repo first.",
          "createdAt": "2023-04-24T21:08:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-24T21:17:08Z",
                "user": "HJLeee"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-25T01:58:48Z",
                "user": "clamp03"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-04-25T17:58:22Z",
                "user": "alpencolt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-06-09T11:49:22Z",
                "user": "omariom"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-06-21T05:57:33Z",
                "user": "myungjoo"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOC-jAfg=="
          },
          "updatedAt": "2023-04-24T21:08:14Z",
          "id": "IC_kwDODI9FZc5apgLD"
        },
        {
          "author": "t-mustafin",
          "body": "### JIT tests fails classification on VisionFive2\r\n#### Launch results\r\n```\r\n# Overlay          : /home/tmustafin/coreclr_tests/../main_riscv_oom_fix/\r\n# Tests Discovered : 4736\r\n# Passed           : 4319\r\n# Failed           : 397\r\n# Skipped          : 20\r\n```\r\n\r\n#### Fail types\r\n<details> <summary>\r\n\r\n#### 237 Segmentation fault </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun value_numbering_checked_arithmetic_with_constants_ro.dll ''\r\n               'checked(one * max)' was evaluated to '4294967295'. Expected: '4294967295'.\r\n               'checked(half * half)' did not throw OverflowException.\r\n               'checked(half * max)' did not throw OverflowException.\r\n               'checked(max * one)' was evaluated to '4294967295'. Expected: '4294967295'.\r\n               'checked(max * half)' did not throw OverflowException.\r\n               'checked(max * max)' did not throw OverflowException.\r\n               'checked(min + min)' did not throw OverflowException.\r\n               'checked(min + minusHalf)' did not throw OverflowException.\r\n               'checked(min + minusOne)' did not throw OverflowException.\r\n               'checked(minusHalf + min)' did not throw OverflowException.\r\n               'checked(minusOne + min)' did not throw OverflowException.\r\n               'checked(one + max)' did not throw OverflowException.\r\n               'checked(half + max)' did not throw OverflowException.\r\n               'checked(max + one)' did not throw OverflowException.\r\n               'checked(max + half)' did not throw OverflowException.\r\n               'checked(max + max)' did not throw OverflowException.\r\n               'checked(min - one)' did not throw OverflowException.\r\n               'checked(min - half)' did not throw OverflowException.\r\n               'checked(min - max)' did not throw OverflowException.\r\n               'checked(minusHalf - max)' did not throw OverflowException.\r\n               'checked(zero - min)' did not throw OverflowException.\r\n               'checked(one - min)' did not throw OverflowException.\r\n               'checked(half - min)' did not throw OverflowException.\r\n               'checked(max - min)' did not throw OverflowException.\r\n               'checked(max - minusHalf)' did not throw OverflowException.\r\n               'checked(max - minusOne)' did not throw OverflowException.\r\n               'checked(min * min)' did not throw OverflowException.\r\n               'checked(min * minusHalf)' did not throw OverflowException.\r\n               'checked(min * minusOne)' did not throw OverflowException.\r\n               Unhandled exception. ./value_numbering_checked_arithmetic_with_constants_ro.sh: line 306: 143454 Segmentation fault      $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 139\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/ConstantFolding/value_numbering_checked_arithmetic_with_constants_ro/value_numbering_checked_arithmetic_with_constants_ro.sh\r\nJIT/Directed/ExcepFilters/excepobj/excepobj/excepobj.sh\r\nJIT/Directed/IL/mutualrecur-tailcall/MutualRecur-TailCall/MutualRecur-TailCall.sh\r\nJIT/Directed/aliasing_retbuf/aliasing_retbuf/aliasing_retbuf.sh\r\nJIT/Directed/callconv/CdeclMemberFunction/CdeclMemberFunctionTest/CdeclMemberFunctionTest.sh\r\nJIT/Directed/callconv/PlatformDefaultMemberFunction/PlatformDefaultMemberFunctionTest/PlatformDefaultMemberFunctionTest.sh\r\nJIT/Directed/callconv/StdCallMemberFunction/StdCallMemberFunctionTest/StdCallMemberFunctionTest.sh\r\nJIT/Directed/callconv/ThisCall/EmptyThisCallTest/EmptyThisCallTest.sh\r\nJIT/Directed/callconv/ThisCall/ThisCallTest/ThisCallTest.sh\r\nJIT/Directed/coverage/compiler/FilterToHandler/FilterToHandler.sh\r\nJIT/Directed/coverage/importer/Desktop/badendfinally_il_d/badendfinally_il_d.sh\r\nJIT/Directed/coverage/importer/Desktop/badendfinally_il_r/badendfinally_il_r.sh\r\nJIT/Directed/coverage/importer/Desktop/badldsfld_il_d/badldsfld_il_d.sh\r\nJIT/Directed/coverage/importer/Desktop/badldsfld_il_r/badldsfld_il_r.sh\r\nJIT/Directed/coverage/importer/Desktop/ceeillegal_il_d/ceeillegal_il_d.sh\r\nJIT/Directed/coverage/importer/Desktop/ceeillegal_il_r/ceeillegal_il_r.sh\r\nJIT/Directed/coverage/importer/badendfinally/badendfinally.sh\r\nJIT/Directed/coverage/importer/ceeillegal/ceeillegal.sh\r\nJIT/Directed/debugging/debuginfo/tester/tester.sh\r\nJIT/Directed/perffix/primitivevt/callconv3_il_r/callconv3_il_r.sh\r\nJIT/Directed/perffix/primitivevt/identity3_il_r/identity3_il_r.sh\r\nJIT/Directed/perffix/primitivevt/mixed1_cs_d/mixed1_cs_d.sh\r\nJIT/Directed/perffix/primitivevt/mixed1_cs_do/mixed1_cs_do.sh\r\nJIT/Directed/perffix/primitivevt/mixed1_cs_r/mixed1_cs_r.sh\r\nJIT/Directed/perffix/primitivevt/mixed1_cs_ro/mixed1_cs_ro.sh\r\nJIT/Generics/ConstrainedCall/class2_cs_d/class2_cs_d.sh\r\nJIT/Generics/ConstrainedCall/class2_cs_do/class2_cs_do.sh\r\nJIT/Generics/ConstrainedCall/class2_cs_r/class2_cs_r.sh\r\nJIT/Generics/ConstrainedCall/class2_cs_ro/class2_cs_ro.sh\r\nJIT/Generics/ConstrainedCall/class2_il_d/class2_il_d.sh\r\nJIT/Generics/ConstrainedCall/class2_il_r/class2_il_r.sh\r\nJIT/Generics/Coverage/chaos65204782cs/chaos65204782cs.sh\r\nJIT/Generics/Coverage/chaos65204782cs_o/chaos65204782cs_o.sh\r\nJIT/Generics/Exceptions/general_class_instance01/general_class_instance01.sh\r\nJIT/Generics/Exceptions/general_class_static01/general_class_static01.sh\r\nJIT/Generics/Exceptions/general_struct_instance01/general_struct_instance01.sh\r\nJIT/Generics/Exceptions/general_struct_static01/general_struct_static01.sh\r\nJIT/Generics/Exceptions/specific_class_static02/specific_class_static02.sh\r\nJIT/Generics/Exceptions/specific_struct_static02/specific_struct_static02.sh\r\nJIT/Generics/Instantiation/Structs/struct02/struct02.sh\r\nJIT/Generics/MemberAccess/interface_struct01/interface_struct01.sh\r\nJIT/HardwareIntrinsics/HardwareIntrinsics_r/HardwareIntrinsics_r.sh\r\nJIT/HardwareIntrinsics/HardwareIntrinsics_ro/HardwareIntrinsics_ro.sh\r\nJIT/HardwareIntrinsics/X86/X86Base/Pause_r/X86_Pause_r.sh\r\nJIT/HardwareIntrinsics/X86/X86Base/Pause_ro/X86_Pause_ro.sh\r\nJIT/IL_Conformance/IL_Conformance/IL_Conformance.sh\r\nJIT/Intrinsics/TypeIntrinsics_r/TypeIntrinsics_r.sh\r\nJIT/Intrinsics/TypeIntrinsics_ro/TypeIntrinsics_ro.sh\r\nJIT/Methodical/Arrays/lcs/lcs2_d/lcs2_d.sh\r\nJIT/Methodical/Arrays/lcs/lcs2_do/lcs2_do.sh\r\nJIT/Methodical/Arrays/lcs/lcs2_r/lcs2_r.sh\r\nJIT/Methodical/Arrays/lcs/lcs2_ro/lcs2_ro.sh\r\nJIT/Methodical/Arrays/lcs/lcsvalbox_d/lcsvalbox_d.sh\r\nJIT/Methodical/Arrays/lcs/lcsvalbox_do/lcsvalbox_do.sh\r\nJIT/Methodical/Arrays/lcs/lcsvalbox_r/lcsvalbox_r.sh\r\nJIT/Methodical/Arrays/lcs/lcsvalbox_ro/lcsvalbox_ro.sh\r\nJIT/Methodical/Arrays/misc/arrres_d/arrres_d.sh\r\nJIT/Methodical/Arrays/misc/arrres_do/arrres_do.sh\r\nJIT/Methodical/Arrays/misc/arrres_r/arrres_r.sh\r\nJIT/Methodical/Arrays/misc/arrres_ro/arrres_ro.sh\r\nJIT/Methodical/Arrays/misc/gcarr_d/gcarr_d.sh\r\nJIT/Methodical/Arrays/misc/gcarr_do/gcarr_do.sh\r\nJIT/Methodical/Arrays/misc/gcarr_r/gcarr_r.sh\r\nJIT/Methodical/Arrays/misc/gcarr_ro/gcarr_ro.sh\r\nJIT/Methodical/Boxing/boxunbox/KeepAliveBoxOpt/KeepAliveBoxOpt.sh\r\nJIT/Methodical/Methodical_d1/Methodical_d1.sh\r\nJIT/Methodical/Methodical_d2/Methodical_d2.sh\r\nJIT/Methodical/Methodical_do/Methodical_do.sh\r\nJIT/Methodical/Methodical_others/Methodical_others.sh\r\nJIT/Methodical/Methodical_r1/Methodical_r1.sh\r\nJIT/Methodical/Methodical_r2/Methodical_r2.sh\r\nJIT/Methodical/Methodical_ro/Methodical_ro.sh\r\nJIT/Methodical/VT/port/lcs_gcref_d/lcs_gcref_d.sh\r\nJIT/Methodical/VT/port/lcs_gcref_do/lcs_gcref_do.sh\r\nJIT/Methodical/VT/port/lcs_gcref_r/lcs_gcref_r.sh\r\nJIT/Methodical/VT/port/lcs_gcref_ro/lcs_gcref_ro.sh\r\nJIT/Methodical/cctor/misc/threads1_cs_d/threads1_cs_d.sh\r\nJIT/Methodical/cctor/misc/threads1_cs_do/threads1_cs_do.sh\r\nJIT/Methodical/cctor/misc/threads1_cs_r/threads1_cs_r.sh\r\nJIT/Methodical/cctor/misc/threads1_cs_ro/threads1_cs_ro.sh\r\nJIT/Methodical/cctor/misc/threads2_cs_d/threads2_cs_d.sh\r\nJIT/Methodical/cctor/misc/threads2_cs_do/threads2_cs_do.sh\r\nJIT/Methodical/cctor/misc/threads2_cs_r/threads2_cs_r.sh\r\nJIT/Methodical/cctor/misc/threads2_cs_ro/threads2_cs_ro.sh\r\nJIT/Methodical/cctor/xassem/xprecise1_cs_d/xprecise1_cs_d.sh\r\nJIT/Methodical/cctor/xassem/xprecise1_cs_do/xprecise1_cs_do.sh\r\nJIT/Methodical/cctor/xassem/xprecise1_cs_r/xprecise1_cs_r.sh\r\nJIT/Methodical/cctor/xassem/xprecise1_cs_ro/xprecise1_cs_ro.sh\r\nJIT/Methodical/cctor/xassem/xprecise1b_cs_d/xprecise1b_cs_d.sh\r\nJIT/Methodical/cctor/xassem/xprecise1b_cs_do/xprecise1b_cs_do.sh\r\nJIT/Methodical/cctor/xassem/xprecise1b_cs_r/xprecise1b_cs_r.sh\r\nJIT/Methodical/cctor/xassem/xprecise1b_cs_ro/xprecise1b_cs_ro.sh\r\nJIT/Methodical/cctor/xassem/xprecise2_cs_d/xprecise2_cs_d.sh\r\nJIT/Methodical/cctor/xassem/xprecise2_cs_do/xprecise2_cs_do.sh\r\nJIT/Methodical/cctor/xassem/xprecise2_cs_r/xprecise2_cs_r.sh\r\nJIT/Methodical/cctor/xassem/xprecise2_cs_ro/xprecise2_cs_ro.sh\r\nJIT/Methodical/cctor/xassem/xprecise4_cs_d/xprecise4_cs_d.sh\r\nJIT/Methodical/cctor/xassem/xprecise4_cs_do/xprecise4_cs_do.sh\r\nJIT/Methodical/cctor/xassem/xprecise4_cs_r/xprecise4_cs_r.sh\r\nJIT/Methodical/cctor/xassem/xprecise4_cs_ro/xprecise4_cs_ro.sh\r\nJIT/Methodical/doublearray/dblarray1_cs_d/dblarray1_cs_d.sh\r\nJIT/Methodical/doublearray/dblarray1_cs_do/dblarray1_cs_do.sh\r\nJIT/Methodical/doublearray/dblarray1_cs_r/dblarray1_cs_r.sh\r\nJIT/Methodical/doublearray/dblarray1_cs_ro/dblarray1_cs_ro.sh\r\nJIT/Methodical/doublearray/dblarray2_cs_d/dblarray2_cs_d.sh\r\nJIT/Methodical/doublearray/dblarray2_cs_do/dblarray2_cs_do.sh\r\nJIT/Methodical/doublearray/dblarray2_cs_r/dblarray2_cs_r.sh\r\nJIT/Methodical/doublearray/dblarray2_cs_ro/dblarray2_cs_ro.sh\r\nJIT/Methodical/doublearray/dblarray3_cs_d/dblarray3_cs_d.sh\r\nJIT/Methodical/doublearray/dblarray3_cs_do/dblarray3_cs_do.sh\r\nJIT/Methodical/doublearray/dblarray3_cs_r/dblarray3_cs_r.sh\r\nJIT/Methodical/doublearray/dblarray3_cs_ro/dblarray3_cs_ro.sh\r\nJIT/Methodical/doublearray/dblarray4_cs_d/dblarray4_cs_d.sh\r\nJIT/Methodical/doublearray/dblarray4_cs_do/dblarray4_cs_do.sh\r\nJIT/Methodical/doublearray/dblarray4_cs_r/dblarray4_cs_r.sh\r\nJIT/Methodical/doublearray/dblarray4_cs_ro/dblarray4_cs_ro.sh\r\nJIT/Methodical/eh/interactions/gcincatch_d/gcincatch_d.sh\r\nJIT/Methodical/eh/interactions/gcincatch_do/gcincatch_do.sh\r\nJIT/Methodical/eh/interactions/gcincatch_r/gcincatch_r.sh\r\nJIT/Methodical/eh/interactions/gcincatch_ro/gcincatch_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_c_d/refarg_c_d.sh\r\nJIT/Methodical/explicit/basic/refarg_c_do/refarg_c_do.sh\r\nJIT/Methodical/explicit/basic/refarg_c_r/refarg_c_r.sh\r\nJIT/Methodical/explicit/basic/refarg_c_ro/refarg_c_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_f4_d/refarg_f4_d.sh\r\nJIT/Methodical/explicit/basic/refarg_f4_do/refarg_f4_do.sh\r\nJIT/Methodical/explicit/basic/refarg_f4_r/refarg_f4_r.sh\r\nJIT/Methodical/explicit/basic/refarg_f4_ro/refarg_f4_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_f8_d/refarg_f8_d.sh\r\nJIT/Methodical/explicit/basic/refarg_f8_do/refarg_f8_do.sh\r\nJIT/Methodical/explicit/basic/refarg_f8_r/refarg_f8_r.sh\r\nJIT/Methodical/explicit/basic/refarg_f8_ro/refarg_f8_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_i1_d/refarg_i1_d.sh\r\nJIT/Methodical/explicit/basic/refarg_i1_do/refarg_i1_do.sh\r\nJIT/Methodical/explicit/basic/refarg_i1_r/refarg_i1_r.sh\r\nJIT/Methodical/explicit/basic/refarg_i1_ro/refarg_i1_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_i2_d/refarg_i2_d.sh\r\nJIT/Methodical/explicit/basic/refarg_i2_do/refarg_i2_do.sh\r\nJIT/Methodical/explicit/basic/refarg_i2_r/refarg_i2_r.sh\r\nJIT/Methodical/explicit/basic/refarg_i2_ro/refarg_i2_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_i4_d/refarg_i4_d.sh\r\nJIT/Methodical/explicit/basic/refarg_i4_do/refarg_i4_do.sh\r\nJIT/Methodical/explicit/basic/refarg_i4_r/refarg_i4_r.sh\r\nJIT/Methodical/explicit/basic/refarg_i4_ro/refarg_i4_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_o_d/refarg_o_d.sh\r\nJIT/Methodical/explicit/basic/refarg_o_do/refarg_o_do.sh\r\nJIT/Methodical/explicit/basic/refarg_o_r/refarg_o_r.sh\r\nJIT/Methodical/explicit/basic/refarg_o_ro/refarg_o_ro.sh\r\nJIT/Methodical/explicit/basic/refarg_s_d/refarg_s_d.sh\r\nJIT/Methodical/explicit/basic/refarg_s_do/refarg_s_do.sh\r\nJIT/Methodical/explicit/basic/refarg_s_r/refarg_s_r.sh\r\nJIT/Methodical/explicit/basic/refarg_s_ro/refarg_s_ro.sh\r\nJIT/Methodical/fp/exgen/10w5d_cs_d/10w5d_cs_d.sh\r\nJIT/Methodical/fp/exgen/10w5d_cs_r/10w5d_cs_r.sh\r\nJIT/Methodical/refany/stress1_d/stress1_d.sh\r\nJIT/Methodical/refany/stress1_r/stress1_r.sh\r\nJIT/Methodical/refany/stress1_ro/stress1_ro.sh\r\nJIT/Methodical/refany/virtcall_d/virtcall_d.sh\r\nJIT/Methodical/refany/virtcall_do/virtcall_do.sh\r\nJIT/Methodical/refany/virtcall_r/virtcall_r.sh\r\nJIT/Methodical/refany/virtcall_ro/virtcall_ro.sh\r\nJIT/PGO/ProfileCastClassAndIsInst/ProfileCastClassAndIsInst/ProfileCastClassAndIsInst.sh\r\nJIT/PGO/ProfileCastClassAndIsInst/ProfileCastClassAndIsInst_random1/ProfileCastClassAndIsInst_random1.sh\r\nJIT/PGO/ProfileCastClassAndIsInst/ProfileCastClassAndIsInst_random2/ProfileCastClassAndIsInst_random2.sh\r\nJIT/PGO/ProfileCastClassAndIsInst/ProfileCastClassAndIsInst_random3/ProfileCastClassAndIsInst_random3.sh\r\nJIT/Performance/CodeQuality/BenchmarksGame/fasta/fasta-1/fasta-1.sh\r\nJIT/Performance/CodeQuality/BenchmarksGame/regex-redux/regex-redux-1/regex-redux-1.sh\r\nJIT/Performance/CodeQuality/BenchmarksGame/regex-redux/regex-redux-5/regex-redux-5.sh\r\nJIT/Performance/CodeQuality/Bytemark/Bytemark/Bytemark.sh\r\nJIT/Performance/CodeQuality/Roslyn/CscBench/CscBench.sh\r\nJIT/Performance/CodeQuality/Serialization/Deserialize/Deserialize.sh\r\nJIT/Performance/CodeQuality/Serialization/Serialize/Serialize.sh\r\nJIT/Performance/CodeQuality/Span/SpanBench/SpanBench.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M09.5-PDC/b13569/b13569/b13569.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M09/b14779/b14779/b14779.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M11-Beta1/b41621/b41621/b41621.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b53980/b53980/b53980.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b65423/b65423/b65423.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b70964/b70964/b70964.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b71120/b71120/b71120.sh\r\nJIT/Regression/CLR-x86-JIT/V1.2-M01/b02345/b02345/b02345.sh\r\nJIT/Regression/CLR-x86-JIT/V1.2-M01/b07900/b07900/b07900.sh\r\nJIT/Regression/CLR-x86-JIT/V1.2-M01/b13452/b13452/b13452.sh\r\nJIT/Regression/CLR-x86-JIT/V1.2-M01/b16399/b16399/b16399.sh\r\nJIT/Regression/CLR-x86-JIT/V2.0-Beta2/b321799/b321799/b321799.sh\r\nJIT/Regression/CLR-x86-JIT/V2.0-Beta2/b353858/b353858/b353858.sh\r\nJIT/Regression/CLR-x86-JIT/V2.0-Beta2/b399444/b399444/b399444.sh\r\nJIT/Regression/CLR-x86-JIT/V2.0-Beta2/b441487/b441487/b441487.sh\r\nJIT/Regression/CLR-x86-JIT/v2.1/DDB/B168384/LdfldaHack/LdfldaHack.sh\r\nJIT/Regression/CLR-x86-JIT/v2.1/DDB/b33183/b33183/b33183.sh\r\nJIT/Regression/Dev11/Dev11_468598/Test_HndIndex_10_Plain/Test_HndIndex_10_Plain.sh\r\nJIT/Regression/Dev11/Dev11_468598/Test_HndIndex_10_Reordered/Test_HndIndex_10_Reordered.sh\r\nJIT/Regression/Dev11/dev11_4421/Dev11_4421/Dev11_4421.sh\r\nJIT/Regression/JitBlue/DevDiv_461649/DevDiv_461649/DevDiv_461649.sh\r\nJIT/Regression/JitBlue/GitHub_17777/GitHub_17777/GitHub_17777.sh\r\nJIT/Regression/JitBlue/GitHub_24185/GitHub_24185/GitHub_24185.sh\r\nJIT/Regression/JitBlue/GitHub_25027/GitHub_25027/GitHub_25027.sh\r\nJIT/Regression/JitBlue/GitHub_25134/GitHub_25134/GitHub_25134.sh\r\nJIT/Regression/JitBlue/GitHub_25468/GitHub_25468/GitHub_25468.sh\r\nJIT/Regression/JitBlue/GitHub_36614/GitHub_36614/GitHub_36614.sh\r\nJIT/Regression/JitBlue/Runtime_72845/Runtime_72845/Runtime_72845.sh\r\nJIT/Regression/VS-ia64-JIT/M00/b112982/b112982/b112982.sh\r\nJIT/Regression/VS-ia64-JIT/V1.2-M02/b26496/b26496/b26496.sh\r\nJIT/Regression/VS-ia64-JIT/V1.2-M02/b27077/b27077/b27077.sh\r\nJIT/Regression/VS-ia64-JIT/V2.0-Beta2/b302558/b302558/b302558.sh\r\nJIT/Regression/VS-ia64-JIT/V2.0-Beta2/b309539/b309539/b309539.sh\r\nJIT/Regression/VS-ia64-JIT/V2.0-Beta2/b309576/b309576/b309576.sh\r\nJIT/Regression/VS-ia64-JIT/V2.0-RTM/b539509/b539509/b539509.sh\r\nJIT/SIMD/Vector3Interop_r/Vector3Interop_r.sh\r\nJIT/SIMD/Vector3Interop_ro/Vector3Interop_ro.sh\r\nJIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh\r\nJIT/jit64/localloc/ehverify/eh05_dynamic/eh05_dynamic.sh\r\nJIT/jit64/localloc/ehverify/eh05_large/eh05_large.sh\r\nJIT/jit64/localloc/ehverify/eh05_small/eh05_small.sh\r\nJIT/jit64/localloc/ehverify/eh06_dynamic/eh06_dynamic.sh\r\nJIT/jit64/localloc/ehverify/eh06_large/eh06_large.sh\r\nJIT/jit64/localloc/ehverify/eh06_small/eh06_small.sh\r\nJIT/jit64/localloc/ehverify/eh07_dynamic/eh07_dynamic.sh\r\nJIT/jit64/localloc/ehverify/eh07_large/eh07_large.sh\r\nJIT/jit64/localloc/ehverify/eh07_small/eh07_small.sh\r\nJIT/jit64/localloc/ehverify/eh08_dynamic/eh08_dynamic.sh\r\nJIT/jit64/localloc/ehverify/eh08_large/eh08_large.sh\r\nJIT/jit64/localloc/ehverify/eh08_small/eh08_small.sh\r\nJIT/jit64/opt/cse/staticFieldExprUnchecked1_r_loop/staticFieldExprUnchecked1_r_loop.sh\r\nJIT/jit64/opt/inl/caninline_d/caninline_d.sh\r\nJIT/jit64/opt/inl/caninline_do/caninline_do.sh\r\nJIT/jit64/opt/inl/caninline_r/caninline_r.sh\r\nJIT/jit64/opt/inl/caninline_ro/caninline_ro.sh\r\nJIT/jit64/regress/vsw/539509/test1/test1.sh\r\nJIT/jit64/verif/sniff/fg/ver_fg_13/ver_fg_13.sh\r\nJIT/opt/Devirtualization/GitHub_10311/GitHub_10311.sh\r\nJIT/opt/Devirtualization/box2/box2.sh\r\nJIT/opt/Inline/regression/mismatch32/mismatch32/mismatch32.sh\r\nJIT/opt/Inline/regression/mismatch64/mismatch64/mismatch64.sh\r\nJIT/opt/Inline/tests/InlineThrow/InlineThrow.sh\r\nJIT/opt/InstructionCombining/UbfizSbfiz/UbfizSbfiz.sh\r\nJIT/opt/Structs/structcopies/structcopies.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 62 others </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun callconv2_cs_do.dll ''\r\n               Expected: 100\r\n               Actual: 1\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/PREFIX/PrimitiveVT/callconv2_cs_do/callconv2_cs_do.sh\r\nJIT/Directed/PREFIX/PrimitiveVT/callconv2_cs_ro/callconv2_cs_ro.sh\r\nJIT/Directed/coverage/oldtests/lclfldadd_cs_d/lclfldadd_cs_d.sh\r\nJIT/Directed/coverage/oldtests/lclfldadd_cs_do/lclfldadd_cs_do.sh\r\nJIT/Directed/coverage/oldtests/lclfldadd_cs_r/lclfldadd_cs_r.sh\r\nJIT/Directed/coverage/oldtests/lclfldadd_cs_ro/lclfldadd_cs_ro.sh\r\nJIT/Directed/coverage/oldtests/lclflddiv_cs_d/lclflddiv_cs_d.sh\r\nJIT/Directed/coverage/oldtests/lclflddiv_cs_do/lclflddiv_cs_do.sh\r\nJIT/Directed/coverage/oldtests/lclflddiv_cs_r/lclflddiv_cs_r.sh\r\nJIT/Directed/coverage/oldtests/lclflddiv_cs_ro/lclflddiv_cs_ro.sh\r\nJIT/Directed/coverage/oldtests/lclfldmul_cs_d/lclfldmul_cs_d.sh\r\nJIT/Directed/coverage/oldtests/lclfldmul_cs_do/lclfldmul_cs_do.sh\r\nJIT/Directed/coverage/oldtests/lclfldmul_cs_r/lclfldmul_cs_r.sh\r\nJIT/Directed/coverage/oldtests/lclfldmul_cs_ro/lclfldmul_cs_ro.sh\r\nJIT/Directed/coverage/oldtests/lclfldrem_cs_d/lclfldrem_cs_d.sh\r\nJIT/Directed/coverage/oldtests/lclfldrem_cs_r/lclfldrem_cs_r.sh\r\nJIT/Directed/coverage/oldtests/lclfldsub_cs_d/lclfldsub_cs_d.sh\r\nJIT/Directed/coverage/oldtests/lclfldsub_cs_do/lclfldsub_cs_do.sh\r\nJIT/Directed/coverage/oldtests/lclfldsub_cs_r/lclfldsub_cs_r.sh\r\nJIT/Directed/coverage/oldtests/lclfldsub_cs_ro/lclfldsub_cs_ro.sh\r\nJIT/Directed/perffix/primitivevt/callconv2_cs_do/callconv2_cs_do.sh\r\nJIT/Directed/perffix/primitivevt/callconv2_cs_ro/callconv2_cs_ro.sh\r\nJIT/Generics/Exceptions/specific_struct_instance02/specific_struct_instance02.sh\r\nJIT/Intrinsics/MemoryMarshalGetArrayDataReference_r/MemoryMarshalGetArrayDataReference_r.sh\r\nJIT/Intrinsics/MemoryMarshalGetArrayDataReference_ro/MemoryMarshalGetArrayDataReference_ro.sh\r\nJIT/Regression/JitBlue/GitHub_23147/GitHub_23147/GitHub_23147.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd2A_d/hfa_nd2A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd2A_r/hfa_nd2A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd2A_d/hfa_sd2A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd2A_r/hfa_sd2A_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_nd2B_d/hfa_nd2B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_nd2B_r/hfa_nd2B_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_sd2B_d/hfa_sd2B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_sd2B_r/hfa_sd2B_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd0C_d/hfa_nd0C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd0C_r/hfa_nd0C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd1C_d/hfa_nd1C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd1C_r/hfa_nd1C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd2C_d/hfa_nd2C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nd2C_r/hfa_nd2C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf0C_d/hfa_nf0C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf0C_r/hfa_nf0C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf1C_d/hfa_nf1C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf1C_r/hfa_nf1C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf2C_d/hfa_nf2C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_nf2C_r/hfa_nf2C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd0C_d/hfa_sd0C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd0C_r/hfa_sd0C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd1C_d/hfa_sd1C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd1C_r/hfa_sd1C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd2C_d/hfa_sd2C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sd2C_r/hfa_sd2C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf0C_d/hfa_sf0C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf0C_r/hfa_sf0C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf1C_d/hfa_sf1C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf1C_r/hfa_sf1C_r.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf2C_d/hfa_sf2C_d.sh\r\nJIT/jit64/hfa/main/testC/hfa_sf2C_r/hfa_sf2C_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf2G_d/hfa_nf2G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf2G_r/hfa_nf2G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf2G_d/hfa_sf2G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf2G_r/hfa_sf2G_r.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 41 genRegMask(regNum) & RBM_FLTARG_REGS' in  </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun GitHub_19537.dll ''\r\n               \r\n               Assert failure(PID 328417 [0x000502e1], Thread: 328417 [0x502e1]): Assertion failed 'genRegMask(regNum) & RBM_FLTARG_REGS' in 'Test+Matrix4x4:.ctor(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float):this' during 'Generate code' (IL size 126; hash 0x15ca5034; Tier0)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/compiler.hpp Line: 2902\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./GitHub_19537.sh: line 306: 328417 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Regression/JitBlue/GitHub_19537/GitHub_19537/GitHub_19537.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd0A_d/hfa_nd0A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd0A_r/hfa_nd0A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd1A_d/hfa_nd1A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_nd1A_r/hfa_nd1A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_nf0A_d/hfa_nf0A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_nf0A_r/hfa_nf0A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_nf1A_d/hfa_nf1A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_nf1A_r/hfa_nf1A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd0A_d/hfa_sd0A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd0A_r/hfa_sd0A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd1A_d/hfa_sd1A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_sd1A_r/hfa_sd1A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_sf0A_d/hfa_sf0A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_sf0A_r/hfa_sf0A_r.sh\r\nJIT/jit64/hfa/main/testA/hfa_sf1A_d/hfa_sf1A_d.sh\r\nJIT/jit64/hfa/main/testA/hfa_sf1A_r/hfa_sf1A_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_nd0B_d/hfa_nd0B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_nd0B_r/hfa_nd0B_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_nf0B_d/hfa_nf0B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_nf0B_r/hfa_nf0B_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_sd0B_d/hfa_sd0B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_sd0B_r/hfa_sd0B_r.sh\r\nJIT/jit64/hfa/main/testB/hfa_sf0B_d/hfa_sf0B_d.sh\r\nJIT/jit64/hfa/main/testB/hfa_sf0B_r/hfa_sf0B_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_nd0G_d/hfa_nd0G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nd0G_r/hfa_nd0G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_nd1G_d/hfa_nd1G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nd1G_r/hfa_nd1G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf0G_d/hfa_nf0G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf0G_r/hfa_nf0G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf1G_d/hfa_nf1G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nf1G_r/hfa_nf1G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd0G_d/hfa_sd0G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd0G_r/hfa_sd0G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd1G_d/hfa_sd1G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd1G_r/hfa_sd1G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf0G_d/hfa_sf0G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf0G_r/hfa_sf0G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf1G_d/hfa_sf1G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sf1G_r/hfa_sf1G_r.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 19 Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt. </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun straccess2_cs_ro.dll ''\r\n               Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n               \r\n               Assert failure(PID 150465 [0x00024bc1], Thread: 150465 [0x24bc1]): !\"About to FailFast. set DOTNET_AssertOnFailFast=0 if this is expected\"\r\n                   File: /home/runtime/src/coreclr/vm/jithelpers.cpp Line: 4441\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./straccess2_cs_ro.sh: line 306: 150465 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/StrAccess/straccess2_cs_ro/straccess2_cs_ro.sh\r\nJIT/Directed/VectorABI/VectorMgdMgdArray_r/VectorMgdMgdArray_r.sh\r\nJIT/Directed/VectorABI/VectorMgdMgdArray_ro/VectorMgdMgdArray_ro.sh\r\nJIT/Directed/VectorABI/VectorMgdMgdStatic_r/VectorMgdMgdStatic_r.sh\r\nJIT/Directed/VectorABI/VectorMgdMgdStatic_ro/VectorMgdMgdStatic_ro.sh\r\nJIT/Directed/VectorABI/VectorMgdMgd_r/VectorMgdMgd_r.sh\r\nJIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\nJIT/Directed/tailcall/more_tailcalls/more_tailcalls.sh\r\nJIT/Generics/Coverage/chaos55915408cs/chaos55915408cs.sh\r\nJIT/Generics/Coverage/chaos55915408cs_o/chaos55915408cs_o.sh\r\nJIT/Generics/Coverage/chaos56200037cs/chaos56200037cs.sh\r\nJIT/Generics/Coverage/chaos56200037cs_o/chaos56200037cs_o.sh\r\nJIT/Generics/Instantiation/Interfaces/struct02/struct02.sh\r\nJIT/Generics/Instantiation/Interfaces/struct03/struct03.sh\r\nJIT/Regression/CLR-x86-JIT/v2.1/b611219/b611219/b611219.sh\r\nJIT/Regression/Dev11/External/Dev11_243742/app/app.sh\r\nJIT/SIMD/ShiftOperations/ShiftOperations.sh\r\nJIT/jit64/opt/cse/staticFieldExprUnchecked1_ro_loop/staticFieldExprUnchecked1_ro_loop.sh\r\nJIT/opt/InstructionCombining/ArrayLengthArithmetic/ArrayLengthArithmetic.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 8 Killed </summary>\r\nTests killed due to executing over 900sec or use more than 768Mb of memory.\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun specific_class_instance02.dll ''\r\n               ./specific_class_instance02.sh: line 306: 207542 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 137\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Generics/Exceptions/specific_class_instance02/specific_class_instance02.sh\r\nJIT/Methodical/Boxing/misc/concurgc_il_r/concurgc.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b59782/b59782/b59782.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b60142/b60142/b60142.sh\r\nJIT/Regression/JitBlue/GitHub_19438/GitHub_19438/GitHub_19438.sh\r\nJIT/Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.sh\r\nJIT/jit64/opt/cse/staticFieldExprUnchecked1_d_loop_try/staticFieldExprUnchecked1_d_loop_try.sh\r\nJIT/jit64/opt/cse/staticFieldExprUnchecked1_r_loop_try/staticFieldExprUnchecked1_r_loop_try.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 5 Stack overflow. </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun callconv1_cs_do.dll ''\r\n               Stack overflow.\r\n                  at System.StartupHookProvider.ProcessStartupHooks()\r\n               ./callconv1_cs_do.sh: line 306: 145720 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/PREFIX/PrimitiveVT/callconv1_cs_do/callconv1_cs_do.sh\r\nJIT/Directed/PREFIX/PrimitiveVT/callconv1_cs_ro/callconv1_cs_ro.sh\r\nJIT/Directed/perffix/primitivevt/callconv1_cs_do/callconv1_cs_do.sh\r\nJIT/Directed/perffix/primitivevt/callconv1_cs_ro/callconv1_cs_ro.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M11-Beta1/b43963/b43963/b43963.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 4  Assertion failed 'emitCurIG != emitPrologIG' in  </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun hfa_nd2G_d.dll ''\r\n               [Add01 HFA 01]\tPASSED\r\n               [Add01 HFA 02]\tPASSED\r\n               [Add01 HFA 03]\tFAILED => expected = 1462763, actual = 1462756\r\n               [Add01 HFA 05]\tFAILED => expected = 1462784, actual = 1462763\r\n               [Add01 HFA 08]\tFAILED => expected = 1462812, actual = 1462777\r\n               [Add01 HFA 11]\tPASSED\r\n               \r\n               Assert failure(PID 438975 [0x0006b2bf], Thread: 438975 [0x6b2bf]): Assertion failed 'emitCurIG != emitPrologIG' in '(dynamicClass):IL_STUB_PInvoke(HFATest.HFA19,float,HFATest.HFA19,int,HFATest.HFA19,short,double,HFATest.HFA19,HFATest.HFA19,float,long,float,HFATest.HFA19,float,HFATest.HFA19):double' during 'Generate code' (IL size 170; hash 0xb2866470; MinOpts)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/emit.cpp Line: 9513\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./hfa_nd2G_d.sh: line 306: 438975 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/jit64/hfa/main/testG/hfa_nd2G_d/hfa_nd2G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_nd2G_r/hfa_nd2G_r.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd2G_d/hfa_sd2G_d.sh\r\nJIT/jit64/hfa/main/testG/hfa_sd2G_r/hfa_sd2G_r.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 4 Assertion failed '(INS_bne & 0xefff) == INS_beq </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun Not-Int32.dll ''\r\n               \r\n               Assert failure(PID 99068 [0x000182fc], Thread: 99068 [0x182fc]): Assertion failed '(INS_bne & 0xefff) == INS_beq' in 'Test_Not_Int32:Main():int' during 'Emit code' (IL size 127208; hash 0x311cc90d; MinOpts)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/emitriscv64.cpp Line: 2449\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./Not-Int32.sh: line 306: 99068 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/BBT/Scenario4/Not-Int32/Not-Int32.sh\r\nJIT/jit64/opt/cse/arrayexpr2_d_loop_try/arrayexpr2_d_loop_try.sh\r\nJIT/jit64/opt/cse/arrayexpr2_r_loop/arrayexpr2_r_loop.sh\r\nJIT/jit64/opt/cse/arrayexpr2_r_loop_try/arrayexpr2_r_loop_try.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 3 Fatal error. The RX block to map as RW was not found </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun Vector256_1_r.dll ''\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunGenericScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunBasicScenario\r\n               Beginning scenario: RunReflectionScenario\r\n               Fatal error. The RX block to map as RW was not found\r\n                  at DynamicClass.InvokeStub_Vector256.GetElement(System.Object, System.Object, IntPtr*)\r\n                  at System.Reflection.MethodInvoker.Invoke(System.Object, IntPtr*, System.Reflection.BindingFlags)\r\n                  at System.Reflection.MethodInvoker.InlinedInvoke(System.Object, IntPtr*, System.Reflection.BindingFlags)\r\n                  at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n                  at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n                  at JIT.HardwareIntrinsics.General._Vector256_1.VectorGetAndWithElement__GetAndWithElementInt640.RunReflectionScenario(Int32, Boolean)\r\n                  at JIT.HardwareIntrinsics.General._Vector256_1.VectorGetAndWithElement__GetAndWithElementInt640.RunArgumentOutOfRangeScenario()\r\n                  at JIT.HardwareIntrinsics.General._Vector256_1.Program.GetAndWithElementInt640()\r\n                  at Program.<Main>$(System.String[])\r\n               ./Vector256_1_r.sh: line 306: 217835 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_r/Vector256_1_r.sh\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_ro/Vector256_1_ro.sh\r\nJIT/opt/Vectorization/StringEquals/StringEquals.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 2 Illegal instruction </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun Runtime_58877.dll ''\r\n               ./Runtime_58877.sh: line 306: 344411 Illegal instruction     $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 132\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Regression/JitBlue/Runtime_58877/Runtime_58877/Runtime_58877.sh\r\nJIT/opt/Vectorization/UnrollEqualsStartsWIth/UnrollEqualsStartsWIth.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 2 exceptionhandling.cpp Line: 4643 </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun b82249.dll ''\r\n               \r\n               Assert failure(PID 294144 [0x00047d00], Thread: 294144 [0x47d00]): Reached the \"unreachable\": FAILED: <unreachable>\r\n                   File: /home/runtime/src/coreclr/vm/exceptionhandling.cpp Line: 4643\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./b82249.sh: line 306: 294144 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Regression/CLR-x86-JIT/V1-M12-Beta2/b82249/b82249/b82249.sh\r\nJIT/Regression/CLR-x86-JIT/V1.2-Beta1/b210352/csharptester/csharptester.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 2 Assertion failed '(INS_bge & 0xefff) == INS_blt </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun test2.dll ''\r\n               \r\n               Assert failure(PID 465516 [0x00071a6c], Thread: 465516 [0x71a6c]): Assertion failed '(INS_bge & 0xefff) == INS_blt' in 'Test_test2:func(int):int:this' during 'Emit code' (IL size 122413; hash 0xcb884f2b; Tier0)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/emitriscv64.cpp Line: 2471\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./test2.sh: line 306: 465516 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/jit64/regress/vsw/524070/test2/test2.sh\r\nJIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 2 About to FailFast. set DOTNET_AssertOnFailFast=0 if this is expected </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun straccess2_cs_do.dll ''\r\n               \r\n               Assert failure(PID 150404 [0x00024b84], Thread: 150404 [0x24b84]): !\"About to FailFast. set DOTNET_AssertOnFailFast=0 if this is expected\"\r\n                   File: /home/runtime/src/coreclr/vm/jithelpers.cpp Line: 4441\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./straccess2_cs_do.sh: line 306: 150404 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/StrAccess/straccess2_cs_do/straccess2_cs_do.sh\r\nJIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 2 System.Runtime.InteropServices.SEHException (0x80004005) </summary>\r\n\r\nTypical message\r\n```\r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun binarytrees-6.dll ''\r\n               stretch tree of depth 7   check: 255\r\n               64    trees of depth 4    check: 1984\r\n               16    trees of depth 6    check: 2032\r\n               Fatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n                  at System.Runtime.InteropServices.MemoryMarshal.GetReference[[System.Int64, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.ReadOnlySpan`1<Int64>)\r\n                  at System.Buffers.Text.FormattingHelpers.CountDigits(UInt32)\r\n                  at System.Number.UInt32ToDecStr_NoSmallNumberCheck(UInt32)\r\n                  at System.Number.<UInt32ToDecStrForKnownSmallNumber>g__CreateAndCacheString|70_0(UInt32)\r\n                  at System.Number.UInt32ToDecStrForKnownSmallNumber(UInt32)\r\n                  at System.Number.UInt32ToDecStr(UInt32)\r\n                  at System.Number.Int32ToDecStr(Int32)\r\n                  at System.Int32.ToString()\r\n                  at BenchmarksGame.BinaryTrees_6+<>c__DisplayClass4_0.<Bench>b__1()\r\n                  at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n                  at System.Threading.Tasks.Task+<>c.<.cctor>b__277_0(System.Object)\r\n                  at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n                  at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n                  at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n                  at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n                  at System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(System.Object, System.Threading.Thread)\r\n                  at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n                  at System.Threading.PortableThreadPool+WorkerThread.WorkerDoWork(System.Threading.PortableThreadPool, Boolean ByRef)\r\n                  at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n                  at System.Threading.Thread+StartHelper.RunWorker()\r\n                  at System.Threading.Thread+StartHelper.Run()\r\n                  at System.Threading.Thread.StartCallback()\r\n               ./binarytrees-6.sh: line 313: 234685 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Performance/CodeQuality/BenchmarksGame/binarytrees/binarytrees-6/binarytrees-6.sh\r\nJIT/Regression/JitBlue/Runtime_53549/Runtime_53549_1/Runtime_53549_1.sh\r\n```\r\nSometimes this exception appears in another tests. During another launches SEHException also catched on:\r\n```\r\nJIT/Regression/CLR-x86-JIT/V1.2-M01/b08046cs/b08046cs/b08046cs.sh\r\nJIT/Performance/CodeQuality/V8/Crypto/Crypto/Crypto.sh\r\nJIT/opt/OSR/synchronized/synchronized.sh\r\nJIT/Performance/CodeQuality/SIMD/RayTracer/RayTracer/RayTracer.sh\r\n```\r\n\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 1 Assertion failed 'objChild->isContained()' in 'DevDiv_714266:Main():int' during 'Linear scan register alloc' </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun DevDiv_718151.dll ''\r\n               \r\n               Assert failure(PID 319205 [0x0004dee5], Thread: 319205 [0x4dee5]): Assertion failed 'objChild->isContained()' in 'DevDiv_714266:Main():int' during 'Linear scan register alloc' (IL size 51; hash 0x8bf9636f; Tier0)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/lsrariscv64.cpp Line: 1010\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./DevDiv_718151.sh: line 306: 319205 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Regression/JitBlue/DevDiv_718151/DevDiv_718151/DevDiv_718151.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 1 AV in DispatchStub at unknown instruction </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun GitHub_17585.dll ''\r\n               \r\n               Assert failure(PID 324932 [0x0004f544], Thread: 324932 [0x4f544]): !\"AV in DispatchStub at unknown instruction\"\r\n                   File: /home/runtime/src/coreclr/vm/riscv64/stubs.cpp Line: 876\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./GitHub_17585.sh: line 306: 324932 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Regression/JitBlue/GitHub_17585/GitHub_17585/GitHub_17585.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 1 Cannot print exception string because Exception.ToString </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun tailcall.dll ''\r\n               Test Start\r\n               Unhandled exception. \r\n                  Cannot print exception string because Exception.ToString() failed.\r\n               ./tailcall.sh: line 306: 199136 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Directed/tailcall/tailcall/tailcall.sh\r\n```\r\n</details>\r\n\r\n<details> <summary>\r\n\r\n#### 1 Assertion failed 'varDsc->IsAlwaysAliveInMemory() || ((regSet.GetMaskVars() & regMask) == 0)' in 'BenchmarksGame.KNucleotide_9:find </summary>\r\n\r\nTypical message\r\n```\r\n               \r\n               BEGIN EXECUTION\r\n               /home/tmustafin/coreclr_tests/../main_riscv_oom_fix//corerun k-nucleotide-9.dll ''\r\n               \r\n               Assert failure(PID 235346 [0x00039752], Thread: 235346 [0x39752]): Assertion failed 'varDsc->IsAlwaysAliveInMemory() || ((regSet.GetMaskVars() & regMask) == 0)' in 'BenchmarksGame.KNucleotide_9:find(ubyte[],ubyte[],int,byref):int' during 'Generate code' (IL size 99; hash 0x1610184c; Tier0-FullOpts)\r\n               \r\n                   File: /home/runtime/src/coreclr/jit/codegencommon.cpp Line: 560\r\n                   Image: /home/tmustafin/main_riscv_oom_fix/corerun\r\n               \r\n               ./k-nucleotide-9.sh: line 306: 235346 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\nTests list\r\n\r\n```\r\nJIT/Performance/CodeQuality/BenchmarksGame/k-nucleotide/k-nucleotide-9/k-nucleotide-9.sh\r\n```\r\n</details>\r\n\r\n\r\n#### State\r\nupstream/main branch on 4772b5d + PR84797\r\n\r\n#### Platform\r\nStarfive VisionFive2 board\r\nDebian Bookworm/sid\r\n\r\n#### Full log\r\n[debug.JIT.runtest.log](https://github.sec.samsung.net/dotnet/runtime/files/48482/debug.JIT.runtest.log)\r\n\r\n#### Other details\r\n3 tests skipped cause infinite printing to output:\r\n```\r\nJIT/Directed/coverage/oldtests/lclfldrem_cs_ro/lclfldrem_cs_ro.sh\r\nJIT/Directed/coverage/oldtests/lclfldrem_cs_do/lclfldrem_cs_do.sh\r\nJIT/jit64/opt/cse/HugeField2/HugeField2.sh\r\n```\r\n**UPD** SEHException category added.",
          "createdAt": "2023-05-11T14:35:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-05-11T14:39:43Z",
                "user": "gbalykov"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-05-12T02:19:04Z",
                "user": "clamp03"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-05-18T14:11:42Z",
                "user": "alpencolt"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOC7-njw=="
          },
          "updatedAt": "2023-05-16T11:50:45Z",
          "id": "IC_kwDODI9FZc5cCSLa"
        },
        {
          "author": "clamp03",
          "body": "`41 genRegMask(regNum) & RBM_FLTARG_REGS' in` are fixed by https://github.com/dotnet/runtime/pull/85900\r\n`4 Assertion failed '(INS_bne & 0xefff) == INS_beq` and `2 Assertion failed '(INS_bge & 0xefff) == INS_blt` will be fixed by https://github.com/dotnet/runtime/pull/86078. However, some tests still fail with other errors.",
          "createdAt": "2023-05-12T02:23:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-12T02:23:24Z",
          "id": "IC_kwDODI9FZc5cFwnx"
        },
        {
          "author": "alpencolt",
          "body": "> We are open to sponsor CI build-only legs for community supported targets to prevent trivial build breaks from getting in. Tizen and FreeBSD ports are on this plan today. If you are interested, create build environment with Linux x64 hosted cross-build environment in https://github.com/dotnet/dotnet-buildtools-prereqs-docker/ repo first.\r\n\r\n@jkotas is it possible to run also small amount of tests or just HelloWorld on every PR for RISC-V with QEMU?",
          "createdAt": "2023-05-18T17:47:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-18T17:47:15Z",
          "id": "IC_kwDODI9FZc5clxld"
        },
        {
          "author": "jkotas",
          "body": "We do not have a good experience with QEMU. It has not been reliable enough for our CI, and it has known issues that are hit by .NET runtime that nobody is fixing.\r\n\r\nDo you see \"Hello world\" to be frequently broken on RISC-V by changes going into the repo?",
          "createdAt": "2023-05-18T18:21:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-18T18:21:18Z",
          "id": "IC_kwDODI9FZc5cl7Fl"
        },
        {
          "author": "alpencolt",
          "body": "> Do you see \"Hello world\" to be frequently broken on RISC-V by changes going into the repo?\r\n\r\nIn common not often . If it's not reliable I think our nightly builds can cover it.\r\n",
          "createdAt": "2023-05-18T18:43:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-18T18:43:39Z",
          "id": "IC_kwDODI9FZc5cmDvi"
        },
        {
          "author": "gbalykov",
          "body": "\r\nCurrent CoreCLR tests results in Debug mode on main branch (f695b49f77df6509253f0811be3ca42f5aa72326) on StarFive VisionFive2 board:\r\n```\r\n# Tests Discovered : 10599\r\n# Passed           : 10508\r\n# Failed           : 45\r\n# Skipped          : 46\r\n```\r\nSimilar results are observed with different values of JitStress and JitStressRegs in Debug.\r\n\r\nCurrent CoreCLR tests results in Release mode on main branch (d672bccdcf1d9037b1fd1ab87549662dd793ef27) on StarFive VisionFive2 board:\r\n```\r\n# Tests Discovered : 10599\r\n# Passed           : 10503\r\n# Failed           : 50\r\n# Skipped          : 46\r\n```\r\n\r\nThese are the results without not yet merged PRS: https://github.com/dotnet/runtime/pull/88510 and https://github.com/dotnet/runtime/pull/88657.\r\n\r\nRight now we are investigating libraries (CoreFX) tests and will focus on fixing them and porting different parts of libraries as well. Also, we are currently investigating some GC stability issues. Then we'll focus on GCStress testing support, fixing of additionally failing tests in checked/debug/release builds, addition of RV64C all over runtime and crossgen2 porting.",
          "createdAt": "2023-07-21T10:20:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2023-07-21T11:02:12Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-21T11:14:35Z",
                "user": "alpencolt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-21T12:57:14Z",
                "user": "innovoix"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-21T13:04:15Z",
                "user": "t-mustafin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-21T16:24:24Z",
                "user": "BruceForstall"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-24T02:34:04Z",
                "user": "clamp03"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-24T05:21:33Z",
                "user": "myungjoo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-24T22:40:28Z",
                "user": "0xStuart"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-07-24T22:41:22Z",
                "user": "0xStuart"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-25T18:10:56Z",
                "user": "ghishadow"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-07-25T18:10:57Z",
                "user": "ghishadow"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-17T11:56:26Z",
                "user": "filipnavara"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-08-20T01:25:16Z",
                "user": "KitsuneAlex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-20T01:25:21Z",
                "user": "KitsuneAlex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-30T10:00:21Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-14T01:32:02Z",
                "user": "JaneConan"
              }
            ],
            "totalCount": 16,
            "endCursor": "Y3Vyc29yOnYyOpHODGvZHA=="
          },
          "updatedAt": "2023-07-21T10:20:31Z",
          "id": "IC_kwDODI9FZc5iEheM"
        },
        {
          "author": "myungjoo",
          "body": "Can you share the RISC-V unit test results of recent versions?",
          "createdAt": "2023-11-06T23:14:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-06T23:14:09Z",
          "id": "IC_kwDODI9FZc5rHDqs"
        },
        {
          "author": "gbalykov",
          "body": "## Current CoreCLR tests results on main branch on StarFive VisionFive2 board\r\n\r\nDebug mode (764d3e0cfab629bb6e594f3399c9ba7362a621c3):\r\n```\r\n# Tests Discovered : 10680\r\n# Passed           : 10616\r\n# Failed           : 16\r\n# Skipped          : 48\r\n```\r\n\r\nRelease mode (764d3e0cfab629bb6e594f3399c9ba7362a621c3):\r\n```\r\n# Tests Discovered : 10680\r\n# Passed           : 10621\r\n# Failed           : 11\r\n# Skipped          : 48\r\n```\r\n\r\n## Current libraries tests results on main branch  on StarFive VisionFive2 board\r\n\r\ninnerloop, Release mode (34bf55cd6448b3a19288623dca087151efe00367):\r\n```\r\n# Tests Discovered : 597501\r\n# Passed           : 595907\r\n# Failed           : 83\r\n# Skipped          : 1511\r\n#\r\n# Errored dlls     : 5 (from 247)\r\n```\r\n\r\nouterloop, Release mode (34bf55cd6448b3a19288623dca087151efe00367):\r\n```\r\n# Tests Discovered : 193727\r\n# Passed           : 193663\r\n# Failed           : 24\r\n# Skipped          : 40\r\n#\r\n# Errored dlls     : 7 (from 247)\r\n```\r\n\r\nRight now we are still investigating failed clr/libraries tests and errored libraries tests dlls (the ones that had crashed during execution for some reason). Also, I'll share libraries (CoreFX) tests results in Debug mode soon.\r\n",
          "createdAt": "2023-11-07T08:41:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T08:53:13Z",
                "user": "tomeksowi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T09:42:17Z",
                "user": "myungjoo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T09:49:49Z",
                "user": "martenf"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T10:29:46Z",
                "user": "clamp03"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T15:42:37Z",
                "user": "Haltroy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T17:18:35Z",
                "user": "alpencolt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-07T18:07:36Z",
                "user": "expcat"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-08T07:08:27Z",
                "user": "taishi-sama"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-13T00:07:06Z",
                "user": "mmarinchenko"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-15T05:47:22Z",
                "user": "Xeonacid"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-12-07T19:52:40Z",
                "user": "hangy"
              }
            ],
            "totalCount": 11,
            "endCursor": "Y3Vyc29yOnYyOpHODO345g=="
          },
          "updatedAt": "2023-11-07T08:41:34Z",
          "id": "IC_kwDODI9FZc5rLARC"
        },
        {
          "author": "am11",
          "body": "Noticed a TODO in exception dispatcher, could be this: https://github.com/am11/runtime/commit/172991ca67e11f6ae610df516fec75c9451731ed (+ callsite adjustments).",
          "createdAt": "2024-05-23T12:39:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T07:33:08Z",
                "user": "gbalykov"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODjC7TA=="
          },
          "updatedAt": "2024-05-23T12:39:06Z",
          "id": "IC_kwDODI9FZc5-x4l_"
        },
        {
          "author": "hnedelciuc",
          "body": "Is there any progress on RISC-V support? Do you have any updates? Thanks.",
          "createdAt": "2025-05-08T01:46:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-05-08T01:46:28Z",
          "id": "IC_kwDODI9FZc6qihD1"
        },
        {
          "author": "tomeksowi",
          "body": "@hnedelciuc Apart from build & NativeAOT progress mentioned in https://github.com/dotnet/runtime/issues/36748#issuecomment-2861225601, we've been mainly focusing on optimizations lately, fixing any outstanding bugs as we find them. You can get more details by looking at the pull requests mentioned in the timeline of this issue.",
          "createdAt": "2025-05-08T06:49:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-08T11:10:45Z",
                "user": "am11"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOERUGcA=="
          },
          "updatedAt": "2025-05-08T06:49:38Z",
          "id": "IC_kwDODI9FZc6qljfz"
        },
        {
          "author": "filipnavara",
          "body": "Since VMR builds are finally fixed I published the .NET 10 Preview 5 build of SDK: https://github.com/filipnavara/dotnet-riscv/releases/tag/v10.0.0-preview.5.25277.114",
          "createdAt": "2025-06-11T10:42:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2025-06-11T10:51:04Z",
                "user": "am11"
              },
              {
                "content": "HOORAY",
                "createdAt": "2025-06-11T11:23:27Z",
                "user": "aeb-dev"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-11T13:23:06Z",
                "user": "tomeksowi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-11T15:11:45Z",
                "user": "sirntar"
              },
              {
                "content": "HOORAY",
                "createdAt": "2025-06-11T18:54:12Z",
                "user": "YohanSciubukgian"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOEWPuUg=="
          },
          "updatedAt": "2025-06-11T10:42:57Z",
          "id": "IC_kwDODI9FZc6wjzVN"
        },
        {
          "author": "am11",
          "body": ".NET 10 Preview 6 build of SDK: https://github.com/filipnavara/dotnet-riscv/releases/tag/v10.0.100-preview.6.25365.199",
          "createdAt": "2025-07-18T16:37:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-18T19:36:18Z",
                "user": "tomeksowi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-28T06:09:01Z",
                "user": "clamp03"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEcHTMA=="
          },
          "updatedAt": "2025-07-18T16:37:56Z",
          "id": "IC_kwDODI9FZc64LiCn"
        }
      ],
      "totalCount": 23,
      "endCursor": "Y3Vyc29yOnYyOpHOuC4gpw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/84834",
    "title": "CoreCLR RISC-V architecture port"
  },
  {
    "author": "lambdageek",
    "labels": [
      "documentation",
      "arch-wasm",
      "area-Meta"
    ],
    "createdAt": "2023-05-19T18:45:16Z",
    "body": "(Contributes to https://github.com/dotnet/runtime/issues/80807)\r\n\r\nThe upstream mailing list is https://mailman.astron.com/pipermail/file/\r\na readonly mirror of the git repo is https://github.com/file/file\r\n\r\nWe should identify .wasm files containing a webcil payload as something more than just\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP)\r\n```\r\n\r\nBy contrast `.dll` files print out:\r\n\r\n```\r\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\r\n```\r\n\r\nSo ideally for a webcil file we print\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP), .NET assembly Webcil wrapper version 0x0 payload version 0.0 \r\n```\r\n\r\nthat includes the version of the wasm wrapper (and possibly the version of the webcil payload - not sure how hard it would be to write a magic rule to extract that)\r\n\r\nThe webcil format is documented in https://github.com/dotnet/runtime/blob/main/docs/design/mono/webcil.md\r\n",
    "number": 86522,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-04T13:19:38Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to 'arch-wasm': @lewing\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe upstream mailing list is https://mailman.astron.com/pipermail/file/\r\na readonly mirror of the git repo is https://github.com/file/file\r\n\r\nWe should identify .wasm files containing a webcil payload as something more than just\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP)\r\n```\r\n\r\nBy contrast `.dll` files print out:\r\n\r\n```\r\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\r\n```\r\n\r\nSo ideally for a webcil file we print\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP), Webcil version 0x0 .NET assembly\r\n```\r\n\r\nthat includes the version of the wasm wrapper (and possibly the version of the webcil payload - not sure how hard it would be to write a magic rule to extract that\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lambdageek</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`documentation`, `arch-wasm`, `untriaged`, `needs-area-label`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-05-19T18:45:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-19T18:45:48Z",
          "id": "IC_kwDODI9FZc5csMVY"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe upstream mailing list is https://mailman.astron.com/pipermail/file/\r\na readonly mirror of the git repo is https://github.com/file/file\r\n\r\nWe should identify .wasm files containing a webcil payload as something more than just\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP)\r\n```\r\n\r\nBy contrast `.dll` files print out:\r\n\r\n```\r\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\r\n```\r\n\r\nSo ideally for a webcil file we print\r\n\r\n```\r\nWebAssembly (wasm) binary module version 0x1 (MVP), Webcil version 0x0 .NET assembly\r\n```\r\n\r\nthat includes the version of the wasm wrapper (and possibly the version of the webcil payload - not sure how hard it would be to write a magic rule to extract that\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lambdageek</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`documentation`, `arch-wasm`, `area-Meta`, `untriaged`, `needs-area-label`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-05-19T18:46:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-19T18:46:01Z",
          "id": "IC_kwDODI9FZc5csMZE"
        },
        {
          "author": "lambdageek",
          "body": "Is it even possible to decode uleb128 values using magic(5)? if not, it will be pretty difficult to traverse the file.  Although maybe it's good enough to look for 'webcilVersion' and 'WbIL' and match what follows them - the nearby bytes are probably pretty distinctive\r\n",
          "createdAt": "2023-05-19T18:57:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-05-19T18:58:38Z",
          "id": "IC_kwDODI9FZc5csO97"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOXLDvew=="
    },
    "url": "https://github.com/dotnet/runtime/issues/86522",
    "title": "Create and upstream a magic(5) entry for webcil"
  },
  {
    "author": "sandrohanea",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2023-06-22T14:49:45Z",
    "body": "### Background and motivation\n\nIt will be great to have support for visionOS runtime: https://developer.apple.com/visionos/\r\n\n\n### API Proposal\n\nChanges similar to https://github.com/dotnet/runtime/commit/44f8f0faee42367bdd39277d8295f6e914ad7f4a\n\n### API Usage\n\n<TargetFramework>net8.0-visionos</TargetFramework>\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
    "number": 87929,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "EYES",
          "createdAt": "2023-06-23T07:22:16Z",
          "user": "ivanpovazan"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-08T01:53:11Z",
          "user": "maxkatz6"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-21T11:51:10Z",
          "user": "lemonmojo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-06T21:39:01Z",
          "user": "maxkatz6"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOC1sWZg=="
    },
    "updatedAt": "2023-07-21T12:36:21Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Background and motivation\n\nIt will be great to have support for visionOS runtime: https://developer.apple.com/visionos/\r\n\n\n### API Proposal\n\nChanges similar to https://github.com/dotnet/runtime/commit/44f8f0faee42367bdd39277d8295f6e914ad7f4a\n\n### API Usage\n\n<TargetFramework>net8.0-visionos</TargetFramework>\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>sandrohanea</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-06-22T16:26:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-22T16:26:13Z",
          "id": "IC_kwDODI9FZc5fi2ix"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOX4tosQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/87929",
    "title": "[API Proposal]: Add visionOS runtime"
  },
  {
    "author": "jkoritzinsky",
    "labels": [
      "area-Meta",
      "source-generator"
    ],
    "createdAt": "2023-06-29T22:26:52Z",
    "body": "We have 4 libraries that are still using runtime-based COM interop. Once main is .NET 9 and main drops support for versions of .NET that will be out of support when .NET 9 releases (so .NET 6 and 7), we can move these libraries to use source-generated COM as they will only target .NET Standard and .NET 8+ and the .NET Standard implementation is a PNSE (PlatformNotSupportedException-throwing) assembly.\r\n\r\n- [ ] Convert System.DirectoryServices to use source-generated COM.\r\n- [ ] Convert System.DirectoryServices.AccountManagement to use source-generated COM.\r\n- [ ] Convert System.Speech to use source-generated COM.\r\n- [ ] Convert System.Management to use source-generated COM.\r\n  - [ ] We should also remove the dependency on the .NET Framework-provided `wminet_utils.dll` if we're already updating the library to use source-generated COM as most of the point of `wminet_utils` is to assist with the COM interop.",
    "number": 88220,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2023-06-30T02:30:38Z",
          "user": "MichalStrehovsky"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-06-30T08:31:35Z",
          "user": "ViktorHofer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-17T18:45:48Z",
          "user": "AaronRobinsonMSFT"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-08T10:43:00Z",
          "user": "expcat"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-07T12:54:45Z",
          "user": "Nukepayload2"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-05T11:37:23Z",
          "user": "nrudakov"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHODDT_Tg=="
    },
    "updatedAt": "2025-07-16T06:20:14Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nWe have 4 libraries that are still using runtime-based COM interop. Once main is .NET 9 and main drops support for versions of .NET that will be out of support when .NET 9 releases (so .NET 6 and 7), we can move these libraries to use source-generated COM as they will only target .NET Standard and .NET 8+ and the .NET Standard implementation is a PNSE (PlatformNotSupportedException-throwing) assembly.\r\n\r\n- [ ] Convert System.DirectoryServices to use source-generated COM.\r\n- [ ] Convert System.DirectoryServices.AccountManagement to use source-generated COM.\r\n- [ ] Convert System.Speech to use source-generated COM.\r\n- [ ] Convert System.Management to use source-generated COM.\r\n  - [ ] We should also remove the dependency on the .NET Framework-provided `wminet_utils.dll` if we're already updating the library to use source-generated COM as most of the point of `wminet_utils` is to assist with the COM interop.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>jkoritzinsky</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `source-generator`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>Future</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-06-29T22:26:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-29T22:26:58Z",
          "id": "IC_kwDODI9FZc5gMdSw"
        },
        {
          "author": "jkoritzinsky",
          "body": "cc: @dotnet/area-infrastructure-libraries as I know some of these packages have been considered for moving to [dotnet/maintenance-packages](https://github.com/dotnet/maintenance-packages).",
          "createdAt": "2023-06-29T22:36:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-29T22:36:52Z",
          "id": "IC_kwDODI9FZc5gMe6C"
        },
        {
          "author": "stephentoub",
          "body": "We have very poor test coverage for these libraries. What is our confidence that we can switch to use source-generated COM interop in a close-to-zero-risk manner? I'd be inclined to leave them as-is unless our confidence is super high and there's a significant benefit to switching. ",
          "createdAt": "2023-06-29T22:41:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-06-29T23:43:28Z",
                "user": "jkotas"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC_dnTw=="
          },
          "updatedAt": "2023-06-29T22:43:50Z",
          "id": "IC_kwDODI9FZc5gMfra"
        },
        {
          "author": "jkoritzinsky",
          "body": "If the interop team does the switch-over and review, I have high confidence that we can get it right. When we moved over libraries to use `LibraryImport`, we moved over many of these libraries. There was some fallout then, but we have also taken the learnings from those conversions and used them to improve the interop source generators to lessen the chance of a break. With source-generated interop, we can get significant perf benefits and remove some complexity from the interactions with the underlying libraries in these APIs.\r\n\r\nWe can also get good perf improvements by just making the interop usage cleaner, which is much easier to do with source-generated interop as we have much better tooling to guide users to using high-performance interop (instead of something slow that works).",
          "createdAt": "2023-06-29T23:17:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-06-30T12:30:54Z",
                "user": "startewho"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC_gfQA=="
          },
          "updatedAt": "2023-06-29T23:17:15Z",
          "id": "IC_kwDODI9FZc5gMlSO"
        },
        {
          "author": "MichalStrehovsky",
          "body": "There were a couple customer requests for System.Management with Native AOT in the past and since we don't have built-in COM interop support in Native AOT, source generated COM is the only way to fix this.\r\n\r\nhttps://github.com/dotnet/corert/issues/6728\r\nhttps://github.com/dotnet/corert/issues/8184",
          "createdAt": "2023-06-30T02:29:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-06-30T02:29:50Z",
          "id": "IC_kwDODI9FZc5gNB-M"
        },
        {
          "author": "ViktorHofer",
          "body": "> https://github.com/orgs/dotnet/teams/area-infrastructure-libraries as I know some of these packages have been considered for moving to [dotnet/maintenance-packages](https://github.com/dotnet/maintenance-packages).\r\n\r\nOnly System.Speech and we never formalized those discussions into a plan. For now, that library will stay in runtime.",
          "createdAt": "2023-06-30T08:34:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-06-30T14:21:06Z",
                "user": "jkoritzinsky"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOC_hECg=="
          },
          "updatedAt": "2023-06-30T08:34:14Z",
          "id": "IC_kwDODI9FZc5gOJeE"
        },
        {
          "author": "jkoritzinsky",
          "body": "I've taken a look at these libraries and determined that there's more work we can do to make the migration easier:\r\n\r\n- System.DirectoryServices(.AccountManagement)\r\n  - Uses COM Activation, takes in a COM object and exposed COM objects through its API.\r\n- System.Management\r\n  - Uses VARIANT, so depends on #89543\r\n- System.Speech\r\n  -  Uses Com Activation.",
          "createdAt": "2023-08-31T21:02:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-31T21:02:51Z",
          "id": "IC_kwDODI9FZc5lbxHe"
        },
        {
          "author": "MichalStrehovsky",
          "body": "Another user reporting inability to use System.DirectoryServices.ActiveDirectory with native AOT due to built-in COM use: #101882",
          "createdAt": "2024-05-05T12:20:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-05T12:20:16Z",
          "id": "IC_kwDODI9FZc582-UJ"
        },
        {
          "author": "MichalStrehovsky",
          "body": "Internal partner ran into this for System.Management.",
          "createdAt": "2024-06-17T08:47:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-17T08:47:20Z",
          "id": "IC_kwDODI9FZc6BgQAT"
        },
        {
          "author": "MichalStrehovsky",
          "body": "Also linking to #61960 that is about System.Management with trimming/AOT and wasn't mentioned here yet. Found it as I was looking for this issue.",
          "createdAt": "2024-06-17T08:48:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-17T08:48:18Z",
          "id": "IC_kwDODI9FZc6BgQdu"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHOgYEHbg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/88220",
    "title": "Convert remaining COM-based libraries to use source-generated COM"
  },
  {
    "author": "just-ero",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2023-07-25T22:44:08Z",
    "body": ".NET 8 introduces some [performance-related warnings](https://github.com/dotnet/core/issues/8436#issuecomment-1586191968). This made me think of another commonly discussed issue; using constant sizes in `stackalloc` expressions.\r\n\r\nA dynamically-sized `stackalloc` array can potentially be worse for performance. An analyzer warning for such a situation could be beneficial.\r\n\r\n```cs\r\nSpan<byte> data = len <= 128 ? stackalloc[len] : new byte[len]; // warning: Use constant size in `stackalloc` expression\r\n\r\n// fix (have to use `.Slice(0, len)` when using the span)\r\nSpan<byte> data = len <= 128 ? stackalloc[128] : new byte[len];\r\n```\r\n\r\nHere are some relevant benchmark results: <https://gist.github.com/just-ero/7ef8dd2b49fa5c1cf8d47bbbc6112bd6>.",
    "number": 89478,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-25T22:44:35Z",
          "user": "MichalPetryka"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-26T09:14:19Z",
          "user": "DaZombieKiller"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-28T14:16:53Z",
          "user": "colejohnson66"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOCy6iLg=="
    },
    "updatedAt": "2023-08-07T22:16:36Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n.NET 8 introduces some [performance-related warnings](https://github.com/dotnet/core/issues/8436#issuecomment-1586191968). This made me think of another commonly discussed issue; using constant sizes in `stackalloc` expressions.\r\n\r\nA dynamically-sized `stackalloc` array can potentially be worse for performance. An analyzer warning for such a situation could be beneficial.\r\n\r\n```cs\r\nSpan<byte> data = len <= 128 ? stackalloc[len] : new byte[len]; // warning: Use constant size in `stackalloc` expression\r\n\r\n// fix (have to use `.Slice(0, len)` when using the span)\r\nSpan<byte> data = len <= 128 ? stackalloc[128] : new byte[len];\r\n```\r\n\r\nHere are some relevant benchmark results: <https://gist.github.com/just-ero/7ef8dd2b49fa5c1cf8d47bbbc6112bd6>.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>just-ero</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-07-25T22:44:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-25T22:44:16Z",
          "id": "IC_kwDODI9FZc5iYyDt"
        },
        {
          "author": "EgorBo",
          "body": "1) What's the threshold when analyzer should not suggest that, e.g. should we promote `len <= 4096 ? stackalloc[len]`?\r\n2) In some cases it might increase overall stack usage when the actual `len` is small. On macOS all secondary threads have 512Kb of stack by default.\r\n3) In some cases non-constant stackalloc might be faster if the actual length is small, I was able to reproduce it:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/523221/c9d769eb-9439-4ec8-8341-3bd1d60d1647)\r\n\r\n4) With `SkipLocalsInit` the performance difference might be similiar for sizes >= 32\r\n5) In theory, we could optimize this in JIT ",
          "createdAt": "2023-07-25T22:51:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-07-26T11:21:04Z",
                "user": "MihaZupan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-28T14:17:13Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODIEpwA=="
          },
          "updatedAt": "2023-07-25T22:53:14Z",
          "id": "IC_kwDODI9FZc5iYz6s"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOYmM-rA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/89478",
    "title": "[Analyzer]: Recommend usage of constant in `stackalloc` expressions"
  },
  {
    "author": "hez2010",
    "labels": [
      "area-Meta",
      "feature-request"
    ],
    "createdAt": "2023-07-31T17:13:58Z",
    "body": "# Const Generics\r\n\r\n\"Const Generics\" stands for allowing constant value to be used in a type parameter.\r\n\r\nA fully working MVP implementation for CoreCLR can be found here: https://github.com/dotnet/runtime/pull/89636\r\n\r\nAnd an implementation including the managed part can be found here: https://github.com/hez2010/runtime/tree/feature/const-generics-managed\r\n\r\nLink to the language proposal: https://github.com/dotnet/csharplang/discussions/7508\r\n\r\n## Background and Use Cases\r\n\"Const Generics\" enables the use cases where developers need to pass a const value through a type parameter. \r\n\r\nTypical use cases are templating for things like shuffle (its basically a guaranteed constant)\r\nas well as for numerics, tensors, matrices and etc.\r\n\r\nFor example, fixed buffer and vector types [1], jagged arrays/spans [2], constrained shape of arrays [3], numeric types and multiplier types especially in graphics programming [4], expression abstractions [5], and value specialization [6].\r\n\r\nFor [1], we can have a type `struct ValueArray<T, int N>` to define a type of array of `T` with `N` elements.\r\nThis can also be useful in variadic parameters. For example, a `params ValueArray<int, 5>` can represent a variadic parameter that receives only 5 int arguments.\r\nBeside, we can also leverage the `ValueArray<T, int N>` type to implement `params {ReadOnly}Span<T>`.\r\n\r\nFor [2], we can use the const type parameter to define a `Span<T, int Dim>`, so we can use `Span` for multi-dimension arrays as well.\r\n\r\nFor [3], we can constrain the shape of an array. This is especially useful when you are dealing with matrix or vector computations.\r\nFor example, you now can define a matrix using `class Matrix<T, int Row, int Col>`. When you implement the multiplication algorithm, you can simply put a signature `Matrix<T, Row, NewCol> Multiply<NewCol>(Matrix<T, Col, NewCol> rMatrix)`. This can make sure users pass the correct shape of the matrix while doing multiplication operations.\r\n\r\nFor [4], we can embed the coefficient into a multiplier type. This is especially useful in graphics programming. For example, when you are working with things about illumination, you will definitely want some multiplier types with coefficients (which are basically floating point numbers) that are guaranteed to be constants. While building AI/ML models, we are also often use such constant coefficients.\r\nAlso, we will be able to create a floating point type with user specified epsilon, such as\r\n\r\n```cs\r\nstruct EpsilonFloating<T, T Epsilon> where T : INumber<T>\r\n{\r\n    public static bool operator ==(EpsilonFloating<T, Epsilon> a, EpsilonFloating<T, Epsilon> b) => T.Abs(a.value - b.value) <= Epsilon;\r\n}\r\n```\r\n\r\nand then use it like `global using MyFloatWithEpsilon = EpsilonFloating<float, 1e-6f>`.\r\n\r\nFor [5], we can have several types that can embed constant values to abstract an expression, then we can validate the expression at compile time, hence no runtime exception will happen. For instance, we can have below interface types:\r\n\r\n- `abstract class BinOp`\r\n- `sealed class AddOp : BinOp`\r\n- `sealed class MulOp : BinOp`\r\n- `interface IExpr`\r\n- `interface IConstExpr<T, T Value> : IExpr`\r\n- `interface IBinExpr<TOp, TLeftExpr, TRightExpr> where TOp : BinOp where TLeftExpr : IExpr where TRightExpr IExpr`\r\n\r\nThen we can use `IBinExpr<MulOp, IBinExpr<AddOp, IConstExpr<int, 42>, IConstExpr<int, T>>, IConstExpr<int, 2>>` in a type `class Foo<int T>` to represent `42 * (T + 2)`, then we can use it like a type and let the compiler to verify whether the given const type argument satisfies the expression or not.\r\n\r\nFor [6], we will be able to provide a generic `Vector` type and specialize SIMD-width types with extensions:\r\n\r\n```cs\r\nstruct Vector<T, int Size> { }\r\n\r\nstatic class VectorExtension\r\n{\r\n    public Vector<int, 4> Multiply<T>(this Vector<int, 4> v, Vector<int, 4> right) { } // Vector64\r\n    public Vector<int, 8> Multiply<T>(this Vector<int, 8> v, Vector<int, 8> right) { } // Vector128\r\n    public Vector<int, 16> Multiply<T>(this Vector<int, 16> v, Vector<int, 16> right) { } // Vector256\r\n    public Vector<int, 32> Multiply<T>(this Vector<int, 32> v, Vector<int, 32> right) { } // Vector512\r\n    public Vector<int, Size> Multiply<int Size>(this Vector<int, Size> v, Vector<int, Size> right) { } // For other sizes allowing a software fallback\r\n    // ...\r\n    public Vector<T, Size> Multiply<T, int Size>(this Vector<T, Size> v, Vector<T, Size> right) { } // For other types and sizes allowing a software fallback\r\n}\r\n```\r\n\r\n## Design\r\n\r\n### Wording\r\n- Const type parameter: a type parameter that carries a const value.\r\n- Const type argument: the constant value for a type parameter in the instantiation.\r\n\r\n### Const Type Parameter\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nNew design: \r\n\r\nTo support const generics, we need a way to declare a const type parameter that will carry the const value after instantiation.\r\nDue to the fact that a const type parameter behaves no difference than a normal type parameter until instantiation, here we can treat the type of a const type parameter as a special generic constraint.\r\n\r\nWe want to emit the type of a const type parameter as `TypeSpec`, but in order to distinguish this type token from other generic constraints, we can introduce a `mdtGenericParamType` and then emit the type of const type parameter with `mdtGenericParamType`, and make sure it will always be the first entry in generic constraints.\r\n\r\nTo load the type of a type parameter, we simply look up the first entry in generic constraints and see if it's `mdtGenericParamType`. If yes, then replace it with `mdtTypeSpec` using `(token & ~mdtGenericParamType) | mdtTypeSpec`. When loading generic constraints, if we see a generic constraint has type `mdtGenericParamType`, we can skip it directly.\r\n\r\nWhile an alternative approach (which is also the approach I preferred) is, use a type like `System.Runtime.CompilerServices.LiteralType<T>` as the generic constraint, and special case it. So a `class Foo<int T>` will be emitted to `class Foo<T> where T : LiteralType<int>`. But in the MVP implementation I don't touch the managed libraries so I don't have the type can be used for this. \r\n\r\nOld design:\r\n\r\n> To support const generics, we need a way to declare a const type parameter that will carry the const value after instantiation.\r\nDue to the fact that a const type parameter behaves no difference than a normal type parameter until instantiation, here we can reuse the existing generic metadata and rules, and add a Type token to the `GenericParamRec` schema. To determine whether a type parameter is a const type parameter or not, simply check the Type token to see if it's valid by using `RidFromToken`.\r\n> \r\n> To summarize:\r\n> \r\n> Added a column to `GenericParameterRec` to save a `mdToken` which represents the type of a const generic parameter.\r\nChanged the reserved `DWORD` to `mdToken` to save the type of a const generic parameter.\r\nThis requires a change to the existing metamodel. But worth to note that we don't need a new COM interface as we are reusing the reserved parameter in `GetGenericParamProps`, both `mdToken` and the reserved DWORD are exactly DWORD.\r\n> \r\n> BTW: actually we have another way without upgrading the existing metadata: we can downgrade the metadata version from the current v2.0 to v1.1, where in v1.1 metadata the `GenericParamRec` table has a Kind field which is exactly what we need for const generics.\r\n\r\n### Const Type Argument\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nA const type argument contains the actual constant value in the instantiation. \r\nHere we can introduce a new element type `ELEMENT_TYPE_CTARG` which stands for const type argument.\r\n\r\nA const type argument can be encoded as follows:\r\n\r\n```\r\nELEMENT_TYPE_CTARG <element type of const value> <const value>\r\n```\r\n\r\nNote that the size of the const value is determined by its element type. \r\nFor example, an `int 42` will be encoded as:\r\n```\r\n ELEMENT_TYPE_CTARG ELEMENT_TYPE_I4     42\r\n|      1 byte      |     1 byte    | 4 bytes |\r\n```\r\nWhile a `double 3.1415926` will be encoded as:\r\n```\r\n ELEMENT_TYPE_CTARG ELEMENT_TYPE_R8 3.1415926\r\n|      1 byte      |     1 byte    | 8 bytes |\r\n```\r\n\r\n**While we'd better to save all constants to the constant table in the metadata, then instead of inlining the const value type and const value in the signature directly, we can use the constant token in the signature which is fix-sized and easier to decode, and use the type token instead of `CorElementType` so that we can also support const values of enums, int128, string and arbitrary value types as well.**\r\n\r\n### IL Parser\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe can reuse the keyword `literal` in IL to indicate the type argument contains a const value. Particularly, we can use the keyword `literal` to differentiate a const type argument/parameter from a type argument/parameter. For example, `literal int32 T`.\r\n\r\nFor const type argument, we can simply use `int32 (42)` to express an int constant with the value 42.\r\n\r\nThis is following the rule how we are expressing \"const field\" today.\r\n\r\nWe need to change the parser to parse `\"literal\" type typeName` as a const type parameter, and `type '(' value ')'` as a const type argument. You can define and use const generics as the examples at the bottom of this proposal.\r\n\r\n### Type Desc\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nA const type parameter has no more difference than the additional type token, so we can reuse the `TypeVarTypeDesc` and add a field `m_type` to save the type of const type if it's a const type parameter.\r\n\r\nA const type argument is exactly a constant value, so we need a separate `TypeDesc` for it. \r\nTherefore, a `ConstValueTypeDesc` can be added to save the type and the value of a const type argument.\r\n\r\nWe can support up to 8 bytes of constant value if we use a `uint64_t` as the storage.\r\n\r\n```cpp\r\nclass ConstValueTypeDesc : TypeDesc {\r\n    TypeHandle m_type;\r\n    uint64_t m_value;\r\n};\r\n```\r\n\r\nTo read the constant value from a `ConstValueTypeDesc`, we need to reinterpret the storage based on the type of constant value. For example, while reading a constant value which is a float, we can simply use `*(float*)&m_value`.\r\n\r\nActually I'm doubting whether an `uint64_t` is enough here, because we may support `int128` or other types as primitive types in the future. Should we use `size_t` here instead? This can make sure we are always able to save a pointer here and in case the size of `size_t` is not enough for some types, we can allocate to save the value on the Non-GC heap and save its pointer to the Non-GC heap in this field: \r\n\r\n```cpp\r\nenum {\r\n    CONST_VALUE_INLINE = 1,\r\n    CONST_VALUE_INDIRECT = 1 << 1,\r\n};\r\n\r\nclass ConstValueTypeDesc : TypeDesc {\r\n    TypeHandle m_type;\r\n    size_t m_value;\r\n    DWORD m_flag;\r\n};\r\n\r\nif ((m_flag & CONST_VALUE_INDIRECT) == CONST_VALUE_INDIRECT)\r\n{\r\n    // get size and layout info from m_type\r\n    // load the pointer from m_value\r\n    // deference the pointer to get the value\r\n}\r\nelse\r\n{\r\n    // get size and layout info from m_type\r\n    // load the value from m_value directly\r\n}\r\n```\r\n\r\nOr, if we go with the constant token approach which was mentioned in the \"Const Type Argument\" section, we may simply use the token of constant value instead:\r\n\r\n```cpp\r\nclass ConstValueTypeDesc : TypeDesc {\r\n    TypeHandle m_type;\r\n    mdToken m_value;\r\n};\r\n```\r\n\r\nBut this soon brings another issue where making a new const value type using reflection APIs will create a new constant record that is not present in the metadata. \r\n\r\n### Method Table\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nSimilar to function pointers, we don't need a `MethodTable` for const value.\r\n\r\n### Type Loader\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe can always load constant values in the CoreLib module because a constant value is independent from the assembly, the same constant value can be served from any assembly. \r\nTo avoid loading the same constant value other than once, once we load a constant value, we can save it into a hash table `m_pAvailableParamTypes`. \r\nWhenever we load a constant value, we first lookup in the hash table, if found then we load the `TypeHandle` from the hash table directly, otherwise we allocate a new `ConstValueTypeDesc` for it.\r\n\r\n### Value Loading\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe need to use the const value from a type parameter, here we can reuse the `ldtoken` instruction to achieve this.\r\nInstead of loading the `TypeHandle` of the type parameter, we need to load the constant value and push it to the stack directly when we see the type parameter is a const type parameter.\r\n\r\n### JIT\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe only need to handle `ldtoken` here, so we can change the `impResolveToken` to resolve the information about the const value as well, and then use the information to determine whether we should load a type handle or a const value to the stack. So we only need a minor necessary change in the importation phase.\r\n\r\nFurther changes would probably necessary after we introduce types like `Vector<T, int Length>`, as the JIT needs to recognize it to allow hardware acceleration. \r\n\r\n### Generic Sharing\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe don't share the implementation among const generic type parameters. Each const type argument gets specialized so we can always import the const type argument as a real type-rich constant value anytime. \r\n\r\n### Type Unloadability\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nThey are just constant values and can be reused by any other assemblies, so we don't need to unload them at all. \r\n\r\n### Type Validation\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe need to validate whether the const value type can be passed to a const type parameter.\r\nWe can do it during checking the generic constraints: whenever we meet a const value, we can simply check whether the const value type is equivalent to the type saved in generic param props.\r\nAlternatively, we can also do it at the token resolution. \r\n\r\n### Generic on Const Generic Type Parameter\r\n\r\n**⭕ This part is already implemented in the MVP implementation**\r\n\r\nWe can also support generic type on a const generic type parameter.\r\n\r\nFor example,\r\n\r\n```\r\n.class public auto ansi beforefieldinit Test`2<T, literal !T N>\r\n{\r\n  .method public hidebysig newslot virtual \r\n        instance void M<U, literal !!U V> () cil managed \r\n    { }\r\n}\r\n```\r\n\r\nHere we can leverage the `type` field in the `GenericParamRec` to save a type spec, then we will be able to look up the type parameter.\r\n\r\nThis will allow us to write something like `struct ValueArray<T, TSize, literal TSize Size>` and use it with `ValueArray<int, int, 42424242>`, `ValueArray<int, long, 42424242424242>`, and etc. \r\n\r\nAlso we can leverage this feature to define a `ConstValueExpression<TValue, TValue Value>` and use it while implementing a compiler/interpreter. \r\n\r\n### Overloading\r\n\r\n**❌ This part is NOT yet implemented in the MVP implementation**\r\n**🚧 This part still needs more discussions to reach a conclusion**\r\n\r\nIn this design, we are differentiating the calling target at the call site, so we can support overloading on const generic type parameters without any issues. \r\n\r\n```\r\ncall instance void Foo`1<float32 (42.42)>::.ctor(); // instantiate the Foo`1<float32 (42.42)>\r\ncall instance void Foo`1<int32 (42)>::.ctor(); // instantiate the Foo`1<int32 (42)>\r\ncall instance void Foo`1<int32 (42)>::A<int32 (42)>(); // calling the Foo`1<int32 (42)>::A<int32 (42)>()\r\ncall instance void Foo`1<int32 (42)>::A<float32 (42.42)>(); // calling the Foo`1<int32 (42)>::A<float32 (42.42)>()\r\n\r\n.class public auto ansi beforefieldinit Foo`1<literal int32 N>\r\n{\r\n    .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed { ... }\r\n\r\n    .method public hidebysig newslot virtual\r\n        instance void A<literal int32 X>() cil managed { ... }\r\n\r\n    .method public hidebysig newslot virtual\r\n        instance void A<literal float32 X>() cil managed { ... }\r\n}\r\n.class public auto ansi beforefieldinit Foo`1<literal float32 N>\r\n{\r\n    // ...\r\n}\r\n```\r\n\r\nThis would require us to consider the type of a type parameter while resolving tokens, i.e., making the type of a const type parameter part of the signature. We need to decide whether to support it or not before we are actually shipping const generics, because once we ship const generics, we can't afford a breaking change around signature encoding.\r\n\r\nWhile given the fact that we can support generics on const generic type parameter, the overloading support is not so much necessary IMO. \r\n\r\n## Constraints\r\n\r\n**❌ This part is NOT yet implemented in the MVP implementation**\r\n\r\nIt's useful to constraint a const type parameter. For example, the dimension of a nd-Span `ref struct Span<T, int Dimension>` should not be less than 1, and the length of a `struct ValueArray<T, int Length>` should not be less than 0.\r\n\r\nWe can add the below APIs to achieve arithmetic constraints. \r\n\r\n```csharp\r\nnamespace System.Runtime.CompilerServices;\r\n\r\npublic abstract class Operator\r\n{\r\n    public abstract class UnaryOperator : Operator \r\n    {\r\n        // ...\r\n    }\r\n    public abstract class BinaryOperator : Operator\r\n    {\r\n        public sealed class AdditionOperator : BinaryOperator { }\r\n        public sealed class SubtractionOperator : BinaryOperator { }\r\n        public sealed class MultiplyOperator : BinaryOperator { }\r\n        public sealed class DivisionOperator : BinaryOperator { }\r\n        public sealed class EqualityOperator : BinaryOperator { }\r\n        public sealed class LessThanOperator : BinaryOperator { }\r\n        public sealed class ConjunctionOperator : BinaryOperator { }\r\n        public sealed class DisjunctionOperator : BinaryOperator { }\r\n        // ...\r\n    }\r\n}\r\npublic interface IExpression\r\n{\r\n    public interface IUnaryExpression<TOperator, TOprand> : IExpression where TOperand : IExpression where TOperator : UnaryOperator { }\r\n    public interface IBinaryExpression<TOperator, TLeft, TRight> : IExpression where TLeft : IExpression where TRight : IExpression where TOperator : BinaryOperator { }\r\n    public interface IConstantExpression<TValue, TValue Value> : IExpression { }\r\n    ...\r\n}\r\n```\r\n\r\nThen we can evaluate the expression when we validate the generic constraints. For example, to constraint `N` to be greater than 0 and less than 20, we can use:\r\n\r\n```csharp\r\nclass Foo<int T> where T : > 0, < 20 { }\r\n```\r\n\r\nAnd this got lowered to:\r\n\r\n```\r\n.class public auto ansi beforefieldinit Foo<literal int32 (\r\n            class BinaryExpression`3<\r\n                class Operator/BinaryOperator/GreaterThanOperator,\r\n                class IExpression/IConstantExpression`2<int32, !!T>,\r\n                class IExpression/IConstantExpression`2<int32, int32 (0)>\r\n            >,\r\n            class BinaryExpression`3<\r\n                class Operator/BinaryOperator/LessThanOperator,\r\n                class IExpression/IConstantExpression`2<int32, !!T>,\r\n                class IExpression/IConstantExpression`2<int32, int32 (20)>\r\n            >\r\n        ) T>\r\n       extends [System.Runtime]System.Object { }\r\n```\r\n\r\nI have a naive prototype commit in another branch for show case only: https://github.com/hez2010/runtime/commit/e1fa0c307d5a38d0dd27e2d827a8752777d2e0d7\r\n\r\nHowever, those expression types are actually not being implemented by any types, but we still use them in the generic constraints which let them look like interface constraints but behave as expression evaluation, which is not intuitive.\r\n\r\nFor example, we can add something like `constexpr` constraints in the metadata and allow it to be emitted directly, so `class Foo<T, U, V> where V : == T + U where T : != 0` can be represented in IL as:\r\n\r\n```\r\n.class public auto ansi beforefieldinit Foo<literal int32 (constexpr (!T != int32 (0))) T, literal int32 U, literal int32 (constexpr (!V == !T + !U)) V>\r\n```\r\n\r\n### Const Arithmetic\r\n\r\n**❌ This part is NOT yet implemented in the MVP implementation**\r\n**🚧 This part still needs more discussions to reach a conclusion**\r\n\r\nIt's useful to have arithmetic support for const generics.\r\n\r\nFor example, the signature of a `Push` method of `ValueArray<T, int N>` type can be `ValueArray<T, N + 1> Push(T elem)`, and the signature of a `Concat` method can be `ValueArray<T, N + M> Concat<int M>(ValueArray<T, M> elems)`. \r\n\r\nThis would require embedding the arithmetic operations in the type and implementing dependent/associated types, which is a non-trivial work.\r\n\r\nWhile an alternative is to use constraints to achieve it. So for the example of `Push` method, we can use `ValueArray<T, U> Push<int U>(T elem) where U : (T + 1)`, and the constraint `T + 1` can be expressed using `IBinaryExpression<Add, IConstantExpression<int, T>, IConstantExpression<int, 1>>`. Then we can validate the constraint at runtime. \r\n\r\nAlthough we need to specify the value such as `Push<7>(42)` while calling on `ValueArray<int, 6>`, the C# compiler may automatically infer the type of `U` so developers don't have to explicitly specify the value of `U` every time.\r\n\r\nHowever, consider the below code:\r\n\r\n```csharp\r\nclass Foo<int T>\r\n{\r\n    private Foo<T + 1> foo;\r\n}\r\n```\r\n\r\nAre we going to enforce users to introduce a new type parameter on `Foo`? I.e.,\r\n\r\n```csharp\r\nclass Foo<int T, int U> where ...\r\n{\r\n    private Foo<U> foo;\r\n}\r\n```\r\n\r\nIf yes, whenever we want to introduce a new \"computed\" const type parameter on a method of the class, we will need to add it to the class signature, which will lead to breaking changes. This seems quite unfortunate, and unacceptable. \r\n\r\nTherefore, we cannot just rely on generic constraints to serve const arithmetic. \r\n\r\nHowever, if we have runtime support for dependent/associated types in the future, this can be simply resolved by using:\r\n\r\n```csharp\r\nclass Foo<int T>\r\n{\r\n    type N = T + 1;\r\n    private Foo<N> foo;\r\n}\r\n```\r\n\r\nAnd also, if we have the support for defining an associated type inside a method, we can do:\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    U Method<int T>()\r\n    {\r\n        type U = T + 1;\r\n    }\r\n}\r\n```\r\n\r\nWe still need some discussion to design around here. \r\n\r\nMaybe we can just skip const arithmetic for the first version, and implement const arithmetic in the future once we have proper runtime support?\r\n\r\n### Built-in `ValueArray` Intrinsic Type\r\n\r\n**❗ The implementation can be found [here](https://github.com/hez2010/runtime/tree/feature/const-generics-managed), though this part is not included in the MVP implementation**\r\n\r\nWe need a built-in `ValueArray`, aka. `FixedBuffer` type for use, and it will play an important role in public APIs. A `ValueArray` is basically the `InlineArray` we already have today plus the ability to specify arbitrary length without the need to define a new `InlineArray` type.\r\n\r\nBelow is the dummy C# code for `ValueArray`:\r\n\r\n```csharp\r\nstruct ValueArray<T, int N>\r\n{\r\n    private T elem; // Repeat the field elem for N times\r\n    public int Length { get; } // ldtoken !N; ret;\r\n    public ref T this[int index] { ... }\r\n}\r\n```\r\n\r\nThis can be used together with `params`: \r\n\r\n```csharp\r\nFoo(1, 2, 3, 4, 5);\r\n// a method that only receives 5 int arguments\r\nvoid Foo(params ValueArray<int, 5> args) { }\r\n```\r\n\r\nParticularly, in C# we can lower all fixed buffer types to `ValueArray`, and it can perfectly serve all features like `params Span<T>` and `stackalloc T[]`. \r\n\r\n### Reflection APIs\r\n\r\n**❗ The implementation can be found [here](https://github.com/hez2010/runtime/tree/feature/const-generics-managed), though this part is not included in the MVP implementation**\r\n\r\nTo support reflection, we need something like `MakeGenericType` for a const value as well, so I have the below API proposal:\r\n\r\n```csharp\r\nnamespace System;\r\npublic abstract class Type\r\n{\r\n    public virtual bool IsConstValue { get; }\r\n    public virtual object ConstValue { get; }\r\n\r\n    public static Type MakeConstValueType(object value);\r\n}\r\n```\r\n\r\nThis can make sure we can instantiate a type/method that contains const type parameters, and also get the const value from a constructed type argument.\r\n\r\nSome use patterns of reflection:\r\n\r\n```csharp\r\nclass Foo<T, int N> { }\r\n\r\nvar foo = new Foo<string, 42>();\r\nfoo.GetType(); // Foo<string, int (42)>\r\nfoo.GetType().GetGenericArguments()[0]; // Type: System.String\r\nfoo.GetType().GetGenericArguments()[1].IsConstValue; // true\r\nfoo.GetType().GetGenericArguments()[1].HasElementType; // true\r\nfoo.GetType().GetGenericArguments()[1].ConstValue; // 42\r\nfoo.GetType().GetGenericArguments()[1].GetElementType(); // System.Int32\r\n\r\nvar t = Type.MakeConstValue(42);\r\nvar d = typeof(Foo<,>);\r\nd.GetGenericArguments()[1].IsConstValue; // false\r\nd.GetGenericArguments()[1].HasElementType; // true\r\nd.GetGenericArguments()[1].ConstValue; // InvalidOperationException\r\nd.GetGenericArguments()[1].GetElementType(); // Type: System.Int32\r\nd.MakeGenericType(typeof(string), t); // Foo<string, int (42)>\r\n```\r\n\r\nAn interesting idea is to allow `typeof(value)` for the `Type.MakeConstValue`, for example, `typeof(42)` to get a `Type` that contains a value `42`. \r\n\r\nThis would either require us to:\r\n1. Use the `ldtoken` instruction for this, and we will need to introduce a new instruction for loading a const type argument to the stack, for example, an instruction called `ldctarg` (load const type argument).\r\n2. Introduce a new instruction for this.\r\n3. No new instruction, and just compile it to `Type.MakeConstValue`.\r\n\r\n### Changes to ECMA-335\r\nBasically the new element type `ELEMENT_TYPE_CTARG`.\r\n\r\n## Compatibility Concerns\r\n### Tooling\r\n#### Disassembler\r\nBoth ILSpy and dnSpy should able to special case the `mdtGenericParamType` while loading generic constraints.\r\n\r\n#### Profilers and Debuggers\r\nThey need to support decoding new types or methods which contain `ELEMENT_TYPE_CTARG`/`CORINFO_TYPE_CTARG` on the signature. \r\n\r\nAs for debuggers, they need to add support for the extended `ldtoken` instruction.\r\n\r\n#### EnC\r\nWe don't support modifying generic type signatures today, so no actions are needed.\r\n\r\n#### Other 3rd Party Tools\r\nWith the new design, we are not breaking the metadata so no concern here.\r\n\r\n## Other Useful APIs\r\nOther many APIs can make use of const generics to provide valuable features and abilities for users:\r\n\r\n1. `Matrix<T, int Row, int Col>`: fixed-sized matrix to supersede `Matrix3x3`, `Matrix4x4` and etc.\r\n2. `Vector<T, int N>`: fixed-sized vector to supersede `Vector2`, `Vector3` and etc.\r\n3. `Tensor<T, int Rank>`: tensor types for AI/ML purpose\r\n4. `Span<T, int Dim>`: ND-span that can support multiple dimension arrays\r\n5. `List<T, int N>`, `Array<T, int N>`...: arbitrary list types can have a fixed size now\r\n6. ... and more\r\n\r\n## Future Considerations\r\n### Support for Strings and Arbitrary Value Types\r\n\r\nThis can be done by changing the parser to allow strings and arbitrary value types as well. \r\n\r\nFor example, \r\n\r\n```\r\n// value types\r\n.class C`1<literal valuetype Foo T> { }\r\n\r\ncall C`1<valuetype Foo (bytearray ( 01 00 00 00 02 00 00 00 03 00 00 00))>::.ctor()\r\n\r\n// string\r\n.class D`1<literal string T> { }\r\n\r\ncall D`1<string (\"hello world\")>::.ctor()\r\n```\r\n\r\nwhere `Foo` is a `Vector3<int>`, so we are passing a `Vector3<int> { X = 1, Y = 2, Z = 3 }` here.\r\n\r\nAnd as for the implementation, we can use the `m_type` in `ConstValueTypeDesc` to save the `TypeHandle` of the type, and `m_value` to save the address or constant record token. In this way, we can extend Const Generics to strings and arbitrary value types as well. \r\n\r\nWe only need to extend the encoding of const type arguments as following:\r\n\r\n- For strings, we encode the binary following the rule: `ELEMENT_TYPE_CTARG ELEMENT_TYPE_STRING <constant record token>`, or `ELEMENT_TYPE_CTARG ELEMENT_TYPE_STRING <length> <qcompString>`\r\n- For arbitrary value types: `ELEMENT_TYPE_CTARG ELEMENT_TYPE_VALUETYPE <compressed type token> <constant record token>`, or `ELEMENT_TYPE_CTARG ELEMENT_TYPE_VALUETYPE <compressed type token> <length> <bytearray>`\r\n\r\nThis won't be a breaking change so we can do this later. \r\n\r\n## Fully Working Prototype\r\n\r\n**This prototype is based on the old design with a breaking change to the metadata, while the latest (current) design doesn't have any breaking changes to the metadata**\r\n\r\nI have done the fully working prototype of C# compiler, language server and CoreCLR runtime, and successfully built a SDK for it (Windows only).\r\n\r\nIf you want to have a try on const generics, you can download the SDK here: https://1drv.ms/u/s!ApWNk8G_rszRgrxP32IMKhW-V8iWug?e=JBn8wU\r\n\r\nBe sure to follow the README.txt in the SDK.\r\n\r\nVersion: 20230912 Build 1\r\nChecksum: a8c9ee29d1accd14797f60bedced312f9524391b\r\n\r\nThis prototype branch:\r\n\r\n- Roslyn: https://github.com/hez2010/roslyn/tree/feature/const-generics\r\n- Runtime: https://github.com/hez2010/runtime/tree/feature/const-generics-managed\r\n\r\nI may update the SDK without posting a new comment but change the version and checksum in the above, while the sharing link won't change.\r\n\r\nThis prototype supports all things in this proposal except generic constraints on const type parameter and const arithmetic.\r\nFor example, you can do the following things:\r\n\r\n1. Declare a const generic type, eg. `class Foo<T, int N>`.\r\n2. Use a const generic type, eg. `new Foo<int, 42>()`.\r\n3. Declare a const generic method, eg. `void Foo<int X>`.\r\n4. Use a const generic method, eg. `Foo<42>()`.\r\n5. Generics on const type parameter, eg. `class Foo<T, T X>`, then you can use it with `Foo<int, 42>` as well as `Foo<float, 42.42424f>`.\r\n6. Use const type parameter as constant directly. eg. calling `Console.WriteLine(X)` in the type `class Foo<int X>`.\r\n7. `typeof` support. eg. `typeof(42)`.\r\n8. Casting support in const type argument. eg. `new Foo<(short)42>`, `typeof((short)42)`\r\n9. A built-in value type `ValueArray<T, int X>` that can be used as a fix-sized type with type `T` and length `X`.\r\n10. A niche syntax for declaring a `ValueArray` type, eg. `int[42]`.\r\n11. Full reflection support.\r\n    - To check whether a type parameter is const type parameter, use `type.IsGenericParameter && type.HasElementType`.\r\n    - To get the type of a const type parameter, use `type.GetElementType()`.\r\n    - To check whether a type argument is const type argument, use `type.IsConstValue`.\r\n    - To get the type of a const type argument, use `type.GetElementType()`.\r\n    - To get the value of a const type argument, use `type.ConstValue`.\r\n    - To make a const value type, use `Type.MakeConstValueType()`\r\n\r\n## Code Examples\r\n\r\n### A basic example\r\n\r\n```il\r\n.assembly _ {}\r\n\r\n.class public auto ansi beforefieldinit Foo`2<T, literal int32 N>\r\n       extends [System.Runtime]System.Object\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void M<literal int32 V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 1\r\n        .locals init (\r\n            [0] int32 v\r\n        )\r\n\r\n\r\n        newobj instance void class Foo`2<string, int32 (42)>::.ctor()\r\n        call instance void class Foo`2<string, int32 (42)>::M<!!V, !!V>()\r\n        newobj instance void class Foo`2<string, !!V>::.ctor()\r\n        call instance void class Foo`2<string, !!V>::M<!N, int32 (42)>()\r\n        newobj instance void class Foo`2<string, !N>::.ctor()\r\n        call instance void class Foo`2<string, !N>::M<!!V, !!W>()\r\n\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nThis can be interpreted to the following dummy C# code:\r\n\r\n```csharp\r\nclass Foo<T, int N>\r\n{\r\n    public void M<int V, int W>()\r\n    {\r\n        new Foo<string, 42>().M<V, V>();\r\n        new Foo<string, V>().M<N, 42>();\r\n        new Foo<string, N>().M<V, W>();\r\n        Console.WriteLine(V);\r\n        Console.WriteLine(W);\r\n        Console.WriteLine(N);\r\n    }\r\n}\r\n```\r\n\r\n### Generic Virtual Method with Const Type Parameters\r\n\r\n```il\r\n.assembly _ {}\r\n\r\n.class private auto ansi beforefieldinit Program\r\n    extends [System.Runtime]System.Object\r\n{\r\n    .method private hidebysig static \r\n        void Main (\r\n            string[] args\r\n        ) cil managed \r\n    {\r\n\r\n        .maxstack 8\r\n        .entrypoint\r\n\r\n        newobj instance void class Bar`2<string, int32( 42 )>::.ctor()\r\n        call instance void class Bar`2<string, int32( 42 )>::N<int32( 42 ), int32( 42 )>()\r\n\r\n        ret\r\n    }\r\n\r\n    .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n}\r\n\r\n.class public auto ansi beforefieldinit Foo`2<T, literal int32 N>\r\n       extends [System.Runtime]System.Object\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void M<literal int32 V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldstr \"From Foo::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void N<literal int32 V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        newobj instance void class Foo`2<string, int32( 42 )>::.ctor()\r\n        call instance void class Foo`2<string, int32 (42)>::M<!!V, !!V>()\r\n        newobj instance void class Foo`2<string, !!V>::.ctor()\r\n        call instance void class Foo`2<string, !!V>::M<!N, int32 (42)>()\r\n        newobj instance void class Foo`2<string, !N>::.ctor()\r\n        call instance void class Foo`2<string, !N>::M<!!V, !!W>()\r\n        ret\r\n    }\r\n}\r\n\r\n.class public auto ansi beforefieldinit Bar`2<T, literal int32 N>\r\n       extends class Foo`2<!T, int32 (128)>\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, int32 (128)>::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void M<literal int32 V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n        .locals init (\r\n            [0] string v\r\n        )\r\n        ldstr \"From Bar::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void N<literal int32 V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, int32 (128)>::M<!!V, !!W>()\r\n\r\n        ldarg.0\r\n        callvirt instance void class Foo`2<!T, !N>::M<!!V, !!W>()\r\n\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nThis will yield the below execution result:\r\n\r\n```plaintext\r\nFrom Foo::M\r\n42\r\n42\r\n128\r\nFrom Bar::M\r\n42\r\n42\r\n42\r\n```\r\n\r\n### Generic Virtual Method with Generic on Const Type Parameters\r\n```il\r\n.assembly _ { }\r\n\r\n.class private auto ansi beforefieldinit Program\r\n    extends [System.Runtime]System.Object\r\n{\r\n    .method private hidebysig static \r\n        void Main (\r\n            string[] args\r\n        ) cil managed \r\n    {\r\n\r\n        .maxstack 8\r\n        .entrypoint\r\n\r\n        newobj instance void class Bar`2<float32, int32( 42 )>::.ctor()\r\n        call instance void class Bar`2<float32, int32( 42 )>::N<float32( 42.42 ), int32( 42 )>()\r\n\r\n        ret\r\n    }\r\n\r\n    .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n}\r\n\r\n.class public auto ansi beforefieldinit Foo`2<T, literal int32 N>\r\n       extends [System.Runtime]System.Object\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void M<literal !T V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldstr \"From Foo::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        box !T\r\n        call void [System.Console]System.Console::WriteLine(object)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void N<literal !T V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        newobj instance void class Foo`2<int32, int32( 42 )>::.ctor()\r\n        call instance void class Foo`2<int32, int32 (42)>::M<!!V, !!V>()\r\n        newobj instance void class Foo`2<int32, !!V>::.ctor()\r\n        call instance void class Foo`2<int32, !!V>::M<!N, int32 (42)>()\r\n        newobj instance void class Foo`2<int32, !N>::.ctor()\r\n        call instance void class Foo`2<int32, !N>::M<!!V, !!W>()\r\n        ret\r\n    }\r\n}\r\n\r\n.class public auto ansi beforefieldinit Bar`2<T, literal int32 N>\r\n       extends class Foo`2<!T, int32 (128)>\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, int32 (128)>::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void M<literal !T V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n        .locals init (\r\n            [0] string v\r\n        )\r\n        ldstr \"From Bar::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        box !T\r\n        call void [System.Console]System.Console::WriteLine(object)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void N<literal !T V, literal int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, int32 (128)>::M<!!V, !!W>()\r\n\r\n        ldarg.0\r\n        callvirt instance void class Foo`2<!T, !N>::M<!!V, !!W>()\r\n\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nThis will yield the below execution result:\r\n\r\n```plaintext\r\nFrom Foo::M\r\n42.42\r\n42\r\n128\r\nFrom Bar::M\r\n42.42\r\n42\r\n42\r\n```\r\n\r\n### Minimal ValueArray Type Implementation\r\n\r\n```\r\n.class public sequential ansi sealed beforefieldinit System.ValueArray`2<T, literal int32 Length>\r\n    extends [System.Runtime]System.ValueType\r\n{\r\n    .field private !T elem\r\n\r\n    .method public hidebysig specialname instance !T& get_Item (int32 index) cil managed \r\n    {\r\n        .custom instance void [System.Runtime]System.Diagnostics.CodeAnalysis.UnscopedRefAttribute::.ctor() = (01 00 00 00)\r\n        .maxstack 8\r\n\r\n        ldarg.1\r\n        ldc.i4.0\r\n        blt.s OutOfRange\r\n\r\n        ldarg.1\r\n        ldarg.0\r\n        call instance int32 valuetype System.ValueArray`2<!T, !Length>::get_Length()\r\n        blt.s GetItem\r\n\r\n        OutOfRange:\r\n        call void valuetype System.ValueArray`2<!T, !Length>::ThrowIndexOutOfRange()\r\n\r\n        GetItem:\r\n        ldarg.0\r\n        ldflda !0 valuetype System.ValueArray`2<!T, !Length>::elem\r\n        ldarg.1\r\n        call !!0& [System.Runtime]System.Runtime.CompilerServices.Unsafe::Add<!T>(!!0&, int32)\r\n        ret\r\n    }\r\n\r\n    .method public hidebysig specialname instance int32 get_Length () cil managed \r\n    {\r\n        .maxstack 8\r\n        ldtoken !Length\r\n        ret\r\n    }\r\n\r\n    .method private hidebysig static void ThrowIndexOutOfRange () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        newobj instance void [System.Runtime]System.IndexOutOfRangeException::.ctor()\r\n        throw\r\n    }\r\n\r\n    .property instance !T& Item(int32 index)\r\n    {\r\n        .get instance !0& System.ValueArray`2::get_Item(int32)\r\n    }\r\n\r\n    .property instance int32 Length()\r\n    {\r\n        .get instance int32 System.ValueArray`2::get_Length()\r\n    }\r\n}\r\n```",
    "number": 89730,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HEART",
          "createdAt": "2023-07-31T17:31:45Z",
          "user": "Sergio0694"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-07-31T17:31:48Z",
          "user": "Sergio0694"
        },
        {
          "content": "EYES",
          "createdAt": "2023-07-31T17:31:51Z",
          "user": "Sergio0694"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T18:08:09Z",
          "user": "Siroro"
        },
        {
          "content": "HEART",
          "createdAt": "2023-07-31T19:03:43Z",
          "user": "vcsjones"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T19:03:44Z",
          "user": "vcsjones"
        },
        {
          "content": "EYES",
          "createdAt": "2023-07-31T19:27:22Z",
          "user": "lambdageek"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T19:32:19Z",
          "user": "breadnone"
        },
        {
          "content": "HEART",
          "createdAt": "2023-07-31T19:32:23Z",
          "user": "breadnone"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T21:07:18Z",
          "user": "kronic"
        },
        {
          "content": "EYES",
          "createdAt": "2023-07-31T21:52:14Z",
          "user": "KennethHoff"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T22:09:10Z",
          "user": "EgorBo"
        },
        {
          "content": "EYES",
          "createdAt": "2023-07-31T22:12:26Z",
          "user": "neon-sunset"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T22:24:42Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "HEART",
          "createdAt": "2023-07-31T22:24:43Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "EYES",
          "createdAt": "2023-07-31T22:24:47Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-07-31T23:20:31Z",
          "user": "Szer"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-07-31T23:36:27Z",
          "user": "aloraman"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-07-31T23:36:30Z",
          "user": "aloraman"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-01T03:38:17Z",
          "user": "Executor-Cheng"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-01T05:42:38Z",
          "user": "AlexandrTolstuhin"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-01T06:03:48Z",
          "user": "inosik"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-01T06:46:02Z",
          "user": "DaZombieKiller"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-01T06:46:05Z",
          "user": "DaZombieKiller"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-01T06:46:10Z",
          "user": "DaZombieKiller"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-01T06:46:14Z",
          "user": "DaZombieKiller"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-01T11:48:36Z",
          "user": "KirillAldashkin"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-01T11:48:36Z",
          "user": "KirillAldashkin"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-01T19:33:54Z",
          "user": "aromaa"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-01T21:35:37Z",
          "user": "D3-LucaPiombino"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-01T21:35:47Z",
          "user": "D3-LucaPiombino"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-02T06:35:01Z",
          "user": "WhitWaldo"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-02T15:33:22Z",
          "user": "s341507"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-02T15:33:23Z",
          "user": "s341507"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-02T15:33:25Z",
          "user": "s341507"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-03T01:05:34Z",
          "user": "js6pak"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-03T01:05:36Z",
          "user": "js6pak"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-03T01:05:39Z",
          "user": "js6pak"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-06T01:41:17Z",
          "user": "AlgorithmsAreCool"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-06T05:12:20Z",
          "user": "SupinePandora43"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-06T09:55:38Z",
          "user": "0xfeeddeadbeef"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-06T14:19:33Z",
          "user": "NinoFloris"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-07T05:26:52Z",
          "user": "wanmyj"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-08T00:42:45Z",
          "user": "yicong1352013"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-08T12:05:05Z",
          "user": "Chaoses-Ib"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-09T18:03:59Z",
          "user": "FaustVX"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-09T18:04:02Z",
          "user": "FaustVX"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-09T18:04:04Z",
          "user": "FaustVX"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-10T14:45:10Z",
          "user": "sicl5300"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-15T03:10:39Z",
          "user": "gnaggnoyil"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-15T21:29:58Z",
          "user": "KennethHoff"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-15T21:30:01Z",
          "user": "KennethHoff"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-15T21:30:03Z",
          "user": "KennethHoff"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-22T05:08:33Z",
          "user": "En3Tho"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-22T19:04:57Z",
          "user": "SirCxyrtyx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-22T19:05:05Z",
          "user": "SirCxyrtyx"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-22T19:05:07Z",
          "user": "SirCxyrtyx"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-22T19:05:11Z",
          "user": "SirCxyrtyx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-23T19:17:15Z",
          "user": "Enderlook"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-29T11:26:00Z",
          "user": "rstm-sf"
        },
        {
          "content": "EYES",
          "createdAt": "2023-08-29T18:16:44Z",
          "user": "xparadoxical"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-29T18:16:47Z",
          "user": "xparadoxical"
        },
        {
          "content": "HEART",
          "createdAt": "2023-08-29T18:16:49Z",
          "user": "xparadoxical"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-08-29T19:40:24Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-08-29T21:54:48Z",
          "user": "aromaa"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-02T11:15:23Z",
          "user": "Rageking8"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-02T12:12:22Z",
          "user": "PJB3005"
        },
        {
          "content": "EYES",
          "createdAt": "2023-09-03T09:18:35Z",
          "user": "gotmachine"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-03T17:53:06Z",
          "user": "d2dyno1"
        },
        {
          "content": "HEART",
          "createdAt": "2023-09-03T17:53:10Z",
          "user": "d2dyno1"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-09-03T17:53:14Z",
          "user": "d2dyno1"
        },
        {
          "content": "EYES",
          "createdAt": "2023-09-03T17:53:16Z",
          "user": "d2dyno1"
        },
        {
          "content": "HEART",
          "createdAt": "2023-09-11T05:07:49Z",
          "user": "rameel"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-11T05:07:52Z",
          "user": "rameel"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-15T08:29:22Z",
          "user": "xcaptain"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-17T17:19:49Z",
          "user": "ds5678"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-09-24T05:48:35Z",
          "user": "saint4eva"
        },
        {
          "content": "EYES",
          "createdAt": "2023-09-24T05:48:39Z",
          "user": "saint4eva"
        },
        {
          "content": "HEART",
          "createdAt": "2023-09-24T05:48:44Z",
          "user": "saint4eva"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-09-25T05:24:11Z",
          "user": "OwnageIsMagic"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-03T10:50:57Z",
          "user": "MineCake147E"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-19T16:43:02Z",
          "user": "gerhard17"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-21T11:03:49Z",
          "user": "sveinungf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-16T20:39:42Z",
          "user": "msedi"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-16T20:39:44Z",
          "user": "msedi"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-16T20:39:49Z",
          "user": "msedi"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-16T20:47:36Z",
          "user": "Xyncgas"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-05T08:55:21Z",
          "user": "shin0kaze"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-09T23:25:50Z",
          "user": "Unknown6656"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-12-09T23:25:53Z",
          "user": "Unknown6656"
        },
        {
          "content": "EYES",
          "createdAt": "2023-12-09T23:25:54Z",
          "user": "Unknown6656"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-09T23:26:00Z",
          "user": "Unknown6656"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-02T14:59:52Z",
          "user": "Seb-stian"
        },
        {
          "content": "HEART",
          "createdAt": "2024-01-02T14:59:52Z",
          "user": "Seb-stian"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-01-02T14:59:53Z",
          "user": "Seb-stian"
        },
        {
          "content": "EYES",
          "createdAt": "2024-01-02T15:00:01Z",
          "user": "Seb-stian"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-17T14:34:30Z",
          "user": "FrankNiemeyer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-23T20:54:41Z",
          "user": "chairclr"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-07T19:45:40Z",
          "user": "Neme12"
        },
        {
          "content": "HEART",
          "createdAt": "2024-03-07T19:45:41Z",
          "user": "Neme12"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-16T13:36:24Z",
          "user": "NilFusion"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-08T09:21:12Z",
          "user": "svee4"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-11T17:43:25Z",
          "user": "colejohnson66"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-20T18:55:27Z",
          "user": "CooperMidnight"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-21T03:56:15Z",
          "user": "noelex"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-22T15:23:20Z",
          "user": "colejohnson66"
        },
        {
          "content": "HEART",
          "createdAt": "2024-05-22T15:23:21Z",
          "user": "colejohnson66"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-22T16:56:57Z",
          "user": "alexrp"
        },
        {
          "content": "HEART",
          "createdAt": "2024-05-25T20:34:30Z",
          "user": "adamfk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-26T00:24:30Z",
          "user": "aetherstrata"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-26T08:44:22Z",
          "user": "Rekkonnect"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-26T08:44:23Z",
          "user": "Rekkonnect"
        },
        {
          "content": "EYES",
          "createdAt": "2024-05-26T08:44:23Z",
          "user": "Rekkonnect"
        },
        {
          "content": "HEART",
          "createdAt": "2024-05-26T08:44:24Z",
          "user": "Rekkonnect"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-28T08:03:42Z",
          "user": "ForNeVeR"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-20T09:53:36Z",
          "user": "piotrbulkowski"
        },
        {
          "content": "HEART",
          "createdAt": "2024-07-10T07:15:43Z",
          "user": "SinnersSum"
        },
        {
          "content": "HEART",
          "createdAt": "2024-08-03T02:00:29Z",
          "user": "KiyanYang"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-21T07:04:51Z",
          "user": "AmrAlSayed0"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-28T06:43:08Z",
          "user": "xoofx"
        },
        {
          "content": "HEART",
          "createdAt": "2024-08-28T06:43:14Z",
          "user": "xoofx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-06T12:57:58Z",
          "user": "henrik-knudsen"
        },
        {
          "content": "HEART",
          "createdAt": "2024-09-06T12:57:59Z",
          "user": "henrik-knudsen"
        },
        {
          "content": "EYES",
          "createdAt": "2024-09-06T12:58:00Z",
          "user": "henrik-knudsen"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-09-06T12:58:02Z",
          "user": "henrik-knudsen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-11T05:19:42Z",
          "user": "hamarb123"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-30T23:11:18Z",
          "user": "timcassell"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-03T05:58:20Z",
          "user": "issue-dispenser"
        },
        {
          "content": "HEART",
          "createdAt": "2024-10-03T05:58:21Z",
          "user": "issue-dispenser"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-06T23:58:17Z",
          "user": "fice-t"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-10-12T07:46:45Z",
          "user": "SystematicChaos012"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-06T07:37:25Z",
          "user": "matherm-aboehm"
        },
        {
          "content": "HEART",
          "createdAt": "2025-01-19T04:18:07Z",
          "user": "fantasyzhjk"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-29T21:15:51Z",
          "user": "En3Tho"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-29T22:03:19Z",
          "user": "MihaZupan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-30T08:29:51Z",
          "user": "JoeTwizzle"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-30T11:21:01Z",
          "user": "raulsntos"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-01T20:08:18Z",
          "user": "poizan42"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-04T23:21:21Z",
          "user": "h3xds1nz"
        },
        {
          "content": "HEART",
          "createdAt": "2025-02-04T23:21:22Z",
          "user": "h3xds1nz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-07T13:29:21Z",
          "user": "nsentinel"
        },
        {
          "content": "HEART",
          "createdAt": "2025-02-16T16:54:24Z",
          "user": "SystematicChaos012"
        },
        {
          "content": "ROCKET",
          "createdAt": "2025-02-16T16:54:25Z",
          "user": "SystematicChaos012"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-19T17:58:46Z",
          "user": "Inurias"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-05-05T03:21:49Z",
          "user": "ArsenalAlex108"
        },
        {
          "content": "HEART",
          "createdAt": "2025-08-03T20:08:39Z",
          "user": "charlesroddie"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-10T08:13:25Z",
          "user": "TahirAhmadov"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-23T01:50:08Z",
          "user": "epeshk"
        }
      ],
      "totalCount": 148,
      "endCursor": "Y3Vyc29yOnYyOpHOCx8tjg=="
    },
    "updatedAt": "2024-07-23T17:22:19Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n# Const Generics\r\n\r\n\"Const Generics\" stands for allowing constant value to be used in a type parameter.\r\n\r\nAn MVP implementation for CoreCLR can be found here: https://github.com/dotnet/runtime/pull/89636\r\n\r\n## Background and Use Cases\r\n\"Const Generics\" enables the use cases where developers need to pass a const value through a type parameter. \r\n\r\nTypical use cases are templating for things like shuffle (its basically a guaranteed constant)\r\nas well as for numerics, tensors, matrices and etc.\r\n\r\nFor example, fixed buffers [1], multi-dimension arrays/spans [2] and constrained shape of arrays [3].\r\n\r\nFor [1], we can have a type `struct ValueArray<T, int N>` to define a type of array of T with N elements.\r\nThis can also be useful in variadic parameters. For example, a `params ValueArray<int, 5>` can represent a variadic parameter that receives only 5 `int` arguments.\r\n\r\nFor [2], we can use const type parameter to define a `Span<T, int Dim>`, so we can use `Span` for multi-dimension arrays as well.\r\n\r\nFor [3], we can constraint the shape of an array. This is especially useful when you are dealing with matrix/vector computations.\r\nFor example, you now can define a matrix using `class Matrix<T, int Row, int Col>`. When you implement the multiplication algorithm, you can simply put a signature `Matrix<T, Row, NewCol> Multiply<NewCol>(Matrix<T, Col, NewCol> rMatrix)`. This can make sure users pass the correct shape of matrix while doing multiplication operations. \r\n\r\n## Design\r\n\r\n### Wording\r\n- Const type parameter: a type parameter that carries a const value.\r\n- Const type argument: the constant value for a type parameter in the instantiation.\r\n\r\n### Const Type Parameter\r\nTo support const generics, we need a way to declare a const type parameter that will carry the const value after instantiation.\r\nDue to the fact that a const type parameter behaves no difference than a normal type parameter until instantiation, here we can reuse the existing generic metadata and rules, and add a `Type` token to the `GenericParamRec` schema. To determine whether a type parameter is a const type parameter or not, simply check the `Type` token to see if it's valid by using `RidFromToken`.\r\n\r\nTo summarize:\r\n\r\n- Added a column to `GenericParameterRec` to save a `mdToken` which represents the type of a const generic parameter.\r\n- Changed the reserved `DWORD` to `mdToken` to save the type of a const generic parameter.\r\n\r\nThis requires a change to the existing metamodel. But worth to note that we don't need a new COM interface as we are reusing the reserved parameter in `GetGenericParamProps`, both `mdToken` and the reserved `DWORD` are exactly `DWORD`. \r\n\r\n### Const Type Argument\r\nA const type argument contains the actual constant value in the instantiation. \r\nHere we can introduce a new element type `ELEMENT_TYPE_CTARG` which stands for const type argument.\r\n\r\nA const type argument can be encoded as follows:\r\n\r\n```\r\nELEMENT_TYPE_CTARG <element type of const value> <const value>\r\n```\r\n\r\nNote that the size of const value is determined by its element type. \r\nFor example, a `int 42` will be encoded as:\r\n```\r\n ELEMENT_TYPE_CTARG ELEMENT_TYPE_I4     42\r\n|      1 byte      |     1 byte    | 4 bytes |\r\n```\r\nWhile a `double 3.1415926` will be encoded as:\r\n```\r\n ELEMENT_TYPE_CTARG ELEMENT_TYPE_R8 3.1415926\r\n|      1 byte      |     1 byte    | 8 bytes |\r\n```\r\n\r\n### IL Parser\r\nWe can add a keyword `const` in IL to indicate the type argument contains a const value. Particularly, we can use the keyword `const` to differentiate a const type argument/parameter from a type argument/parameter. For example, `const int32 T` and `const int32 (42)`.\r\n\r\nWe need to change the parser to parse `\"const\" type typeName` as a const type parameter, and `\"const\" type '(' value ')'` as a const type argument. You can define and use const generics as the examples at the bottom of this proposal.\r\n\r\n### Metamodel Version\r\nGiven that we are changing the metamodel, we need to bump the version of metamodel.\r\n\r\nTo summarize what we need to do: \r\n\r\n- Bumped the metadata version to v3.0 (or v2.1?)\r\n- Handled back-compatibility for v2.0, this can be done by replacing the `GenericParamRec` schema to the old one while loading a dll with v2.0 metadata.\r\n\r\n### Type Desc\r\nA const type parameter has no more difference than the additional type token, so we can reuse the `TypeVarTypeDesc` and add a field `m_type` to save the type of const type if it's a const type parameter.\r\n\r\nA const type argument is exactly a constant value, so we need a separate `TypeDesc` for it. \r\nTherefore, a `ConstValueTypeDesc` can be added to save the type and the value of a const type argument.\r\n\r\nWe can support up to 8 bytes of constant value if we use a `uint64_t` as the storage.\r\n\r\n```cpp\r\nclass ConstValueTypeDesc : TypeDesc {\r\n    TypeHandle m_type;\r\n    uint64_t m_value;\r\n};\r\n```\r\n\r\nTo read the constant value from a `ConstValueTypeDesc`, we need to reinterpret the storage based on the type of constant value. For example, while reading a constant value which is a float, we can simply use `*(float*)&m_value`.\r\n\r\n### Method Table\r\nSimilar to function pointers, we don't need a `MethodTable` for const value.\r\n\r\n### Type Loader\r\nWe can always load constant values in the CoreLib module because a constant value is independent from the assembly, a same constant value can be served from any assembly. \r\nTo avoid loading the same constant value other than once, once we load a constant value, we can save it into a hash table `m_pAvailableParamTypes`. \r\nWhenever we load a constant value, we first lookup in the hash table, if found then we load the `TypeHandle` from the hash table directly, otherwise we allocate a new `ConstValueTypeDesc` for it.\r\n\r\n### Value Loading\r\nWe may need to use the const value from a type parameter, here we can reuse the `ldtoken` instruction to achieve this.\r\nInstead of loading the `TypeHandle` of the type parameter, we need to load the constant value and push it to the stack directly when we see the type parameter is a const type parameter.\r\n\r\n### JIT\r\nWe only need to handle `ldtoken` here, so we changed the `impResolveToken` to resolve the information about the const value as well, and then use the information to determine whether we should load a type handle or a const value to the stack. So we only need a minor change on the importation phase.\r\n\r\n### Generic Sharing\r\nWe don't share the implementation among const generic type parameters. Each const type argument get specialized so we can always import const type argument as a real type-rich constant value anytime. \r\n\r\n### Overloading\r\nIn this design, we are differentiate the calling target at the callsite, so we can support overloading on const generic type parameters without any issue.\r\n\r\n```\r\ncall instance void Foo`1<const int32 (42)>::.ctor(); // calling the Foo`1<const int32>\r\ncall instance void Foo`1<const float32 (42.42)>::.ctor(); // calling the Foo`1<const float32>\r\n\r\n.class public auto ansi beforefieldinit Foo`1<const int32 N> { ... }\r\n.class public auto ansi beforefieldinit Foo`1<const float32 N> { ... }\r\n```\r\n\r\n### The Built-in `ValueArray` Intrinsic Type\r\nWe need a built-in `ValueArray`, aka. `FixedBuffer` type for use, and it will play an important role in public APIs. A `ValueArray` is basically the `InlineArray` we already have today plus the ability of specifying arbitrary length without need of define a new `InlineArray` type.\r\n\r\nBelow is the dummy C# code for `ValueArray`:\r\n\r\n```csharp\r\nstruct ValueArray<T, int N>\r\n{\r\n    private T elem; // Repeat the field elem for N times\r\n    public int Length { get; } // ldtoken N; ret;\r\n    public T this[int index] { ... }\r\n}\r\n```\r\n\r\nThis can be used together with `params`: \r\n\r\n```csharp\r\nFoo(1, 2, 3, 4, 5);\r\n// a method that only receives 5 int arguments\r\nvoid Foo(params ValueArray<int, 5> args) { }\r\n```\r\n\r\n### Reflection APIs\r\nTo support reflection, we need something like `MakeGenericType` for a const value as well, so I have the below API proposal:\r\n\r\n```csharp\r\nnamespace System;\r\npublic class Type\r\n{\r\n    public bool IsConstValue { get; }\r\n    public Type? ConstValueParameterType { get; }\r\n    public object? ConstValue { get; }\r\n\r\n    public static Type MakeConstValueType(object value);\r\n}\r\n```\r\n\r\nThis can make sure we can instantiate a type/method that contains const type parameters, and also can we get the const value from a constructed type argument.\r\n\r\nSome use patterns of reflection:\r\n\r\n```csharp\r\nclass Foo<T, int N> { }\r\n\r\nvar foo = new Foo<string, 42>();\r\nfoo.GetType(); // Foo<string, const int (42)>\r\nfoo.GetType().GetGenericArguments()[0]; // Type: System.String\r\nfoo.GetType().GetGenericArguments()[1].IsConstValue; // true\r\nfoo.GetType().GetGenericArguments()[1].ConstValue; // 42\r\nfoo.GetType().GetGenericArguments()[1].ConstTypeParameterType; // null\r\n\r\nvar t = Type.MakeConstValue(42);\r\nvar d = typeof(Foo<,>);\r\nd.GetGenericArguments()[1].IsConstValue; // false\r\nd.GetGenericArguments()[1].ConstValue; // null\r\nd.GetGenericArguments()[1].ConstTypeParameterType; // Type: System.Int32\r\nd.MakeGenericType(typeof(string), t); // Foo<string, const int (42)>\r\n```\r\n\r\nAn interesting idea is to allow `typeof(value)` for the `Type.MakeConstValue`, for example, `typeof(42)` to get a `Type` that contains a value `42`. \r\n\r\nThis would either require us to:\r\n1. Use the `ldtoken` instruction for this, and we will need to introduce a new instruction for loading a const type argument to the stack, for example, an instruction called `ldctarg`.\r\n2. Introduce a new instruction for this.\r\n3. No new instruction, and just compile it to `Type.MakeConstValue`.\r\n\r\nI prefer the 3rd solution here as we don't need to add any new instruction.\r\n\r\n### Support for arithmetic operations/constraints\r\nIt's useful to have arithmetic operations/constraints support on const generics.\r\n\r\nFor example, the signature of a `Push` method of `FixedArray<T, int N>` type can be `FixedArray<T, N + 1> Push(T elem)`, and the signature of a `Concat` method can be `FixedArray<T, N + M> Concat<int M>(FixedArray<T, M> elems)`.\r\n\r\nThis would require embedding the arithmetic operations in the type and implement dependent types, which is a non-trivial work.\r\n\r\nWhile an alternative is to use generic constraints to save the arithmetic constraints. So for the example of `Push` method, we can use `FixedArray<T, U> Push<int U>(T elem) where U : (T + 1)`, and the constraint `T + 1` can be expressed using `IBinaryOperation<Addition, IIntegerConstant<T>, IIntegerConstant<1>>`, where `IBinaryOperation` is `IBinaryOperation<TOperator, TOprand, TOprand>`, and `IIntegerConstant` is `IIntegerConstant<int N>`. Then we can compute the constraint at runtime. \r\n\r\nAlthough we need to specify the value such as `Push<7>(42)` while calling on `FixedArray<int, 6>`, the C# compiler may automatically infer the type of `U` so developers don't have to explicitly specify the value of `U` every time.\r\n\r\n### Generic on Const Generic Type Parameter\r\nWe can also support generic type on a const generic type parameter.\r\n\r\nFor example, this will allow us to write a `struct FixedBuffer<T, TSize, const TSize Size>` and use it with `FixedBuffer<int, int, 42424242>`, `FixedBuffer<int, long, 42424242424242>` and etc. \r\n\r\nThis is doable because we can also leverage the `mdToken` field in the `GenericParamRec` to save a `mdGenericParam`, and both `mdToken` and `mdGenericParam` are `DWORD`.\r\n\r\n### Changes to ECMA-335\r\nThe main changes to ECMA-335 are (1) the new element type `ELEMENT_TYPE_CTARG` (2) the new `Type` field in `GenericParamRec`, which has been discussed above.\r\n\r\n## Compatibility Concerns\r\n### Assembly Loading Behavior\r\nThe most concern here is what the behavior will be if I try to load an assembly with a new metamodel on an old runtime?\r\nThe answer is: both .NET Framework and .NET (Core) will throw an exception `Unhandled exception. System.BadImageFormatException: Old version error. (0x80131107)`, which can be caught and won't lead the process down. This basically has no difference than loading an assembly targeted to a newer runtime on an old runtime: they both throw an exception to indicate you cannot load the assembly.\r\n\r\n### Tooling\r\n#### Disassembler\r\nBoth ILSpy and dnSpy can successfully load the assembly with a newer metamodel, while types containing const generics cannot be disassembled correctly.\r\n\r\n#### Profilers and Debuggers\r\nThey need to support decoding new types or methods which contain `ELEMENT_TYPE_CTARG`/`CORINFO_TYPE_CTARG` on the signature. \r\n\r\nAs for debuggers, they need to add support for the extended `ldtoken` instruction.\r\n\r\n#### EnC\r\nWe don't support modifying generic type signature today, so no actions are needed.\r\n\r\n#### Other 3rd Party Tools\r\nThey need to update to a new runtime to support loading assemblies with metadata v3.0. But given the fact that we are already not able to load an assembly targeted to a new runtime on an old runtime, so this won't be a concern. \r\n\r\n## Code Examples\r\n\r\n### A basic example\r\n\r\n```il\r\n.assembly _ {}\r\n\r\n.class public auto ansi beforefieldinit Foo`2<T, const int32 N>\r\n       extends [System.Runtime]System.Object\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void M<const int32 V, const int32 W> () cil managed \r\n    {\r\n        .maxstack 1\r\n        .locals init (\r\n            [0] int32 v\r\n        )\r\n\r\n\r\n        newobj instance void class Foo`2<string, const int32 (42)>::.ctor()\r\n        call instance void class Foo`2<string, const int32 (42)>::M<!!V, !!V>()\r\n        newobj instance void class Foo`2<string, !!V>::.ctor()\r\n        call instance void class Foo`2<string, const !!V>::M<!N, const int32 (42)>()\r\n        newobj instance void class Foo`2<string, !N>::.ctor()\r\n        call instance void class Foo`2<string, !N>::M<!!V, !!W>()\r\n\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nThis can be interpreted to the following dummy C# code:\r\n\r\n```csharp\r\nclass Foo<T, int N>\r\n{\r\n    public void M<int V, int W>()\r\n    {\r\n        new Foo<string, 42>().M<V, V>();\r\n        new Foo<string, V>().M<N, 42>();\r\n        new Foo<string, N>().M<V, W>();\r\n        Console.WriteLine(V);\r\n        Console.WriteLine(W);\r\n        Console.WriteLine(N);\r\n    }\r\n}\r\n```\r\n\r\n### Generic Virtual Method with Const Type Parameters\r\n\r\n```il\r\n.assembly _ {}\r\n\r\n.class private auto ansi beforefieldinit Program\r\n    extends [System.Runtime]System.Object\r\n{\r\n    .method private hidebysig static \r\n        void Main (\r\n            string[] args\r\n        ) cil managed \r\n    {\r\n\r\n        .maxstack 8\r\n        .entrypoint\r\n\r\n        newobj instance void class Bar`2<string, const int32( 42 )>::.ctor()\r\n        call instance void class Bar`2<string, const int32( 42 )>::N<const int32( 42 ), const int32( 42 )>()\r\n\r\n        ret\r\n    }\r\n\r\n    .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n}\r\n\r\n.class public auto ansi beforefieldinit Foo`2<T, const int32 N>\r\n       extends [System.Runtime]System.Object\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void [System.Runtime]System.Object::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void M<const int32 V, const int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldstr \"From Foo::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig newslot virtual \r\n        instance void N<const int32 V, const int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        newobj instance void class Foo`2<string, const int32( 42 )>::.ctor()\r\n        call instance void class Foo`2<string, const int32 (42)>::M<!!V, !!V>()\r\n        newobj instance void class Foo`2<string, !!V>::.ctor()\r\n        call instance void class Foo`2<string, !!V>::M<!N, const int32 (42)>()\r\n        newobj instance void class Foo`2<string, !N>::.ctor()\r\n        call instance void class Foo`2<string, !N>::M<!!V, !!W>()\r\n        ret\r\n    }\r\n}\r\n\r\n.class public auto ansi beforefieldinit Bar`2<T, const int32 N>\r\n       extends class Foo`2<!T, const int32 (128)>\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n        instance void .ctor () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, const int32 (128)>::.ctor()\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void M<const int32 V, const int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n        .locals init (\r\n            [0] string v\r\n        )\r\n        ldstr \"From Bar::M\"\r\n        call void [System.Console]System.Console::WriteLine(string)\r\n        ldtoken !!V\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !!W\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n        ldtoken !N\r\n        call void [System.Console]System.Console::WriteLine(int32)\r\n\r\n        ret\r\n    }\r\n\r\n  .method public hidebysig virtual \r\n        instance void N<const int32 V, const int32 W> () cil managed \r\n    {\r\n        .maxstack 8\r\n\r\n        ldarg.0\r\n        call instance void class Foo`2<!T, const int32 (128)>::M<!!V, !!W>()\r\n\r\n        ldarg.0\r\n        callvirt instance void class Foo`2<!T, !N>::M<!!V, !!W>()\r\n\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nThis will yield the below execution result:\r\n\r\n```plaintext\r\nFrom Foo::M\r\n42\r\n42\r\n128\r\nFrom Bar::M\r\n42\r\n42\r\n42\r\n```\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>hez2010</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`, `feature-request`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-07-31T17:14:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-31T17:14:37Z",
          "id": "IC_kwDODI9FZc5i32Bq"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "Thanks @hez2010 Appreciate this issue and the effort put into the prototype as well as details above. I'm going to move this to .NET 9 since there is no chance this is a .NET 8 request.\r\n\r\nI will also tag a few people for visibility. Note that since we are closing down .NET 8, this is likely to receive little feedback right now. I would ping this issue in mid-September when people start mulling over vNext.\r\n\r\n/cc @jaredpar @stephentoub @davidwrighton @tannergooding @jkotas @VSadov @tommcdon @MichalStrehovsky @lambdageek ",
          "createdAt": "2023-07-31T17:40:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-31T17:43:48Z",
          "id": "IC_kwDODI9FZc5i4DkF"
        },
        {
          "author": "lambdageek",
          "body": "This is interesting.  There are quite a few details glossed over that I think are hiding serious work:\r\n\r\n* Constraint checking in the presence of const type parameters.  This is kind of alluded to in the \"Arithmetic Operations or Constraints\" section, but this is a somewhat tricky area that needs to be spelled out.  We are potentially introducing a non-trivial equational theory on .NET types.\r\n  * I'm actually not sure that the two options called out in \"Arithmetic Operations or Constraints\" really are two different options.  The proposal seems to be confusing syntax (of which it does propose 2 options) and semantics (of which there's no concrete proposal).  No matter the syntax the proposal seems to be pushing for a semantic model where operations on type constants can be used as arguments to satisfy a type constant parameter.  What precisely should this equational theory be?  \r\n* Actually making use of a const type parameter as a value.  The \"Value loading\" section (and the \"ValueBuffer\" example says `public int Length { get; } // ldtoken N; ret;`)  suggests that `ldtoken` could get you an actual `int32` value instead of a `RuntimeTypeHandle`, but I think there might be issues in the interaction with the \"Generic on Const Generic Type Parameter\" proposal - in that case I think we might want `ldtoken N` to give us a `TypedReference`.  Two further comments\r\n   * I'm not sure about AOT - particularly with gsharedvt / universal shared generics.   Sharing in the presence of constant value type parameters is interesting, probably desired (in the interest of code size) and (probably) non-trivial.\r\n   * If we're bumping the IL metadata version, why be stingy with IL opcodes and reuse `ldtoken` rather than adding a new opcode?\r\n\r\n",
          "createdAt": "2023-07-31T19:27:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-31T19:27:00Z",
          "id": "IC_kwDODI9FZc5i4mWl"
        },
        {
          "author": "nike4613",
          "body": "> why be stingy with IL opcodes and reuse `ldtoken` rather than adding a new opcode?\r\n\r\nThis was discussed fairly heavily in the C# discord. At various points, we'd talked about using `ldtoken` followed by a `RuntimeHelpers` call, and a separate opcode, but `ldtoken` alone was what landed. The basic reason is that `ldtoken const !0` doesn't really have a meaningful token to return, aside from the constant value itself. It *could* return the type token for the *type* of the parameter (to allow e.g. `typeof`), but that seemed somewhat wrong, because the parameter is a *value*, not a *type*, so `ldtoken` would be skipping over the value in that case. Plus, that information is already implicitly known by looking at the signature (even in the case where we have `<TValue, const TValue Value>`; the type is statically known to be `TValue`) so loading the type that way is redundant and unnecessary. The only other piece of information that would be useful to have for such a value is the value itself, thus `ldtoken` loads that value.\r\n\r\n> Arithmetic Operations\r\n\r\nThere were also other alternatives discussed for doing arithmetic on values:\r\n- Introduce more constant value signatures, so that we could have a signature `ADD CTARG !0 INT32 5` to generate a const type parameter representing `!0 + 5`\r\n- Define a subset of IL which is valid `constexpr`, allow marking methods `constexpr`, then add a signature `CONST_METHOD_CALL <method token> <const value argument>...` to enable calling those.\r\n  - This is definitely the more flexible approach, but is also (quite obviously) a significantly larger change. Compilers would have to generate a bunch of these for small expressions, but it would allow calling other `constexpr` methods, and generally doing more complex/interesting operations.\r\n    \r\n    Presumably, this would be interpreted with some limited budget to prevent overly massive evaluation times. Even with that, however, I'd expect it to *very* easily cause throughput issues if not used carefully.",
          "createdAt": "2023-07-31T20:21:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-07-31T20:21:55Z",
          "id": "IC_kwDODI9FZc5i4562"
        },
        {
          "author": "huoyaoyuan",
          "body": "> * If we're bumping the IL metadata version, why be stingy with IL opcodes and reuse `ldtoken` rather than adding a new opcode?\r\n\r\nAn out-of-scope topic here: if we are bumping IL metadata version, we may have a chance to change some new concepts encoded by custom attributes to new flags. Please consider overhauling the IL itself.",
          "createdAt": "2023-08-01T05:16:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-24T05:49:46Z",
                "user": "saint4eva"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODHn_yQ=="
          },
          "updatedAt": "2023-08-01T05:16:33Z",
          "id": "IC_kwDODI9FZc5i6zWp"
        },
        {
          "author": "tfenise",
          "body": "I imagine it should be possible to implement the `ValueArray<,>` with pure managed code, just like `Action<...>` or `Func<...>`:\r\n\r\n```c#\r\n[System.Runtime.CompilerServices.InlineArray(N)]\r\npublic struct ValueArray<T, int N>\r\n{\r\n    private T elem; // Repeat the field elem for N times\r\n    \r\n    //public members omitted\r\n}\r\n```\r\n\r\nSadly, this has not been implemented even with conventional type generics. https://github.com/dotnet/csharplang/discussions/6923",
          "createdAt": "2023-08-01T17:26:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-29T16:34:36Z",
                "user": "ImaginaryDevelopment"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODFKAHg=="
          },
          "updatedAt": "2023-08-01T17:26:17Z",
          "id": "IC_kwDODI9FZc5i_YWs"
        },
        {
          "author": "hez2010",
          "body": "> I imagine it should be possible to implement the ValueArray<,> with pure managed code\r\n\r\nUnfortunately it's not possible as attribute doesn't support using open generic type at all. ",
          "createdAt": "2023-08-02T02:55:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-02T02:55:18Z",
          "id": "IC_kwDODI9FZc5jByZz"
        },
        {
          "author": "KirillAldashkin",
          "body": "I created an IL implementation of ``Span`2<T, int Rank>`` and ``Matrix`2<int Rows, int Cols>`` and wrote two executable examples. This is not a language/API proposal, only a showcase of a feature and can be `ilasm`'ed and `corerun`'ed using current MVP implementation\r\n\r\nFull IL listings here:\r\nhttps://gist.github.com/KirillAldashkin/62eee5a20f6cc3e71920ea7d40ba5cb2\r\n\r\nC# dummy code (`type[num]` == `FixedBuffer<type, num>`):\r\n```cs\r\nreadonly ref struct Span<T, int Rank>\r\n{\r\n\tprivate ref T _reference;\r\n\tprivate int[Rank] _lengths;\r\n\t\r\n\tSpan(ref T reference, params int[Rank] lengths);\r\n\tnuint TotalLength();\t\r\n\tint Length(int rank);\r\n\tref T GetItem(params int[Rank] indices);\r\n}\r\n\r\nstruct Matrix<int Rows, int Cols>\r\n{\r\n\tprivate int[Cols][Rows] _matrix;\r\n\t\r\n\tref float GetItem(int row, int col);\r\n}\r\n\r\nstatic class MatrixMath\r\n{\r\n\tstatic Matrix<Rows, Cols> Multiply<int Rows, int Cols>(Matrix<Rows, Cols> mat, float factor);\r\n\tstatic Matrix<Rows, Cols> Multiply<int Rows, int Mids, int Cols>(Matrix<Rows, Mids> a, Matrix<Mids, Cols> b);\r\n}\r\n\r\nint Main_MatrixSample()\r\n{\r\n\tMatrix<2, 3> MatA = new([20, 0, 30],\r\n\t\t\t\t[30, 0, 20]);\r\n\tConsole.WriteLine($\"A = {MatA}\");\r\n\r\n\tMatrix<3, 4> MatB = new([5, 0, 7, 0],\r\n\t\t\t\t[0, 0, 0, 0],\r\n\t\t\t\t[0, 7, 0, 5]);\r\n\tConsole.WriteLine($\"B = {MatA}\");\r\n\r\n\tMatA = MathMatrix.Multiply(MatA, 0.1f);\r\n\tConsole.WriteLine($\"A = A * 0.1 = {MatA}\");\r\n\r\n\tMatrix<2, 4> MatC = MatrixMath.Multiply<2, 3, 4>(MatA, MatB);\r\n\tConsole.WriteLine($\"C = A * B = {MatC}\");\r\n}\r\n\r\nint Main_MultidimensionalSpanSample()\r\n{\r\n\tint* ptr = stackalloc int[1000];\r\n\tfor(int i = 0; i < 1000; i++) *(ptr+i) = i;\r\n\tSpan<int, 3> span = new(ptr, 10, 10, 10); \r\n\tConsole.WriteLine(span[5, 6, 7]);\r\n}\r\n```",
          "createdAt": "2023-08-02T14:39:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-02T14:46:07Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-02T17:04:18Z",
                "user": "nike4613"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-29T20:17:07Z",
                "user": "charlesroddie"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-24T05:51:25Z",
                "user": "saint4eva"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODHoAAg=="
          },
          "updatedAt": "2023-08-02T15:31:24Z",
          "id": "IC_kwDODI9FZc5jFTzx"
        },
        {
          "author": "jkoritzinsky",
          "body": "> > I imagine it should be possible to implement the ValueArray<,> with pure managed code\r\n> \r\n> Unfortunately it's not possible as attribute doesn't support using open generic type at all.\r\n\r\nI think it's important to note that the custom attribute blob format can version separately from the greater ECMA metadata format.",
          "createdAt": "2023-08-02T17:09:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-02T17:09:31Z",
          "id": "IC_kwDODI9FZc5jGZZJ"
        },
        {
          "author": "hez2010",
          "body": "@lambdageek I have changed part of the proposal. \r\n\r\n> why be stingy with IL opcodes and reuse ldtoken rather than adding a new opcode\r\n\r\nIn my earliest prototype, I added a new IL opcode `ldctarg` for loading the const value of a const type argument, and keep the `ldtoken` as is. But soon I found that a const type argument is exactly a const value, so it doesn't make sense to use `ldtoken` to load the `TypeHandle` of a const value, neither do we support `typeof(42)`. So I end up using `ldtoken` to load the const value from a const type argument.",
          "createdAt": "2023-08-04T04:24:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-04T15:22:23Z",
          "id": "IC_kwDODI9FZc5jPR01"
        },
        {
          "author": "tfenise",
          "body": "About const arithmetic, maybe we could allow using a special static class for a const generic argument. To use a static class for a const generic argument, the static class shall have a special initonly field of the desired type initialized by the static constructor. For example:\r\n\r\n```C#\r\n[ConstGenericArgument(typeof(int))]\r\nstatic class Sum<int N1, int N2>\r\n{\r\n    public static readonly int __value = N1 + N2;\r\n}\r\n\r\nstatic ValueArray<T, Sum<N1, N2>> Concat<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2) {...}\r\n```\r\n\r\nThe common arithmetic operations could be included in the BCL, and C# (or other languages) provides shorthand syntaxes for them.\r\n\r\nConstant const generic arguments could also be represented in this way like\r\n```C#\r\nstatic void Foo<int N>() {...}\r\n\r\n[ConstGenericArgument(typeof(int))]\r\nstatic class Const42\r\n{\r\n    public const int __value = 42;\r\n}\r\n\r\nFoo<Const42>();\r\n```\r\nThis way, it might not be necessary to bump the IL metadata version.\r\n\r\nConst arithmetic leads to problems. Consider:\r\n```C#\r\nstatic ValueArray<T, Sum<N1, N2>> ConcatButWithReversedArgumentOrder<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2)\r\n    => Concat(array2, array1);\r\n```\r\n`Concat(array2, array1)` would be of type `ValueArray<T, Sum<N2, N1>>`, which is not \"obviously\" `ValueArray<T, Sum<N1, N2>>`.\r\nMy opinion on this problem is simply to do nothing on the runtime side. It is up to C# (or other languages) and its compiler to decide whether they can verify this kind of type identity transforms statically, or they require some explicit conversion expression in the source code and possibly insert runtime checks in the IL.\r\n\r\n\r\nAbout Constraints, I don't think they are really necessary on the runtime side or the runtime should enforce them. If an invalid const generic argument is given, just throw an exception in the constructor or method. As const generic is never shared, the AOT/JIT should be able to remove these checks.\r\n\r\nWhat's more, I can't see how const arithmetic and statically enforced constraint could live together peacefully. Consider\r\n```C#\r\nstatic ValueArray<T, Sum<N1, N2>> Concat<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2)\r\n    where N1 >= 0, N2 >= 0\r\n    {...}\r\n\r\nstatic void Foo<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2)\r\n    where N1 >= 0, N2 >= 0\r\n{\r\n    ValueArray<T, Sum<N1, N2>> concat = Concat(array1, array2);//Let's say Foo concats them as an implementation detail.\r\n    ...\r\n}\r\n```\r\nIf `ValueArray<T, int N>` is constrained to `N >= 0`, then `ValueArray<T, Sum<N1, N2>>` would not compile, because `N1 + N2` may overflow and be negative. It would have to add another constraint `N1 + N2 >= 0`, which is really annoying, especially for `Foo` as it only uses `ValueArray<T, Sum<N1, N2>>` as an implementation detail.\r\n\r\nIt could be helpful to have some custom attributes describing the desired constraints or analyzers detecting invalid const generic arguments, though.\r\n\r\n\r\nIt may be helpful to also start an issue or discussion in [dotnet/csharplang](https://github.com/dotnet/csharplang) or repos of other languages.",
          "createdAt": "2023-08-04T18:01:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-04T18:01:22Z",
          "id": "IC_kwDODI9FZc5jTPa0"
        },
        {
          "author": "hez2010",
          "body": "> Constant const generic arguments could also be represented in this way like\n\n1. A static class can not be used as a type argument\n2. We want to specialize the type for different const values and avoid generic sharing\n3. A generated type simply doesn't work because you can not expose it in ABI. Imagine you have a `public void Foo(ValueArray<int, 42> arr)` in assembly A, and the type of `arr` got lowered to an `A.ValueArray42<int>`. Now, in another assembly B, I have the generated type `B.ValueArray42<int>` as well. Those two `ValueArray42<int>`s are not the same type, so we can not pass a `B.ValueArray42<int>` to a parameter that expects an `A.ValueArray42<int>`. If you want to say \"We can use implicit casting for it\", but still, they are not the same type and have different type tokens in the metadata, so we are not able to say whether those two types are the same at runtime. And implicit casting cannot handle cases like casting a `Foo<A.ValueArray42<T>>` to `Foo<B.ValueArray42<T>>`. \n4. Generated types can not handle cases where N is not statically known, so your approach is blocking reflection usage. With the real const generics, a `Foo<1>` is just an instantiation of `Foo<int T>` so we can instantiate `Foo<2>`, `Foo<3>`, etc. using reflection without emitting any new type at runtime. But with your approach, we need to emit new types `Foo2`, `Foo3`, etc. at runtime because we don't have a type called `Foo2` or `Foo3` in the assembly, which is also not supported by NativeAOT. \n5. Atrributes don't support using open generic type parameters so your approach is not able to support generic on const type parameter. \n\n> This way, it might not be necessary to bump the IL metadata version.\n\nWe also have other features that we want to get in but are not able to do due to the metadata neck. This 21-year-old metadata v2.0 is limiting too many things today, and we can not afford consistently to apply a workaround upon a workaround in the runtime. Const generics is only one of them. \n\n> About Constraints, I don't think they are really necessary on the runtime side or the runtime should enforce them. If an invalid const generic argument is given, just throw an exception in the constructor or method. \n\nWith the constraint approach, we are already checking it only at the time an instantiated type is loading and has never been loaded before, so each type instantiation only needs to be checked once.  \n\n> because N1 + N2 may overflow and be negative\n\nThis can be simply checked at runtime to make sure an exception will be thrown when an overflow is encountered. \n\n> It may be helpful to also start an issue or discussion in dotnet/csharplang or repos of other languages.\n\nIt's already on my mind and we will start to work on a design and spec for this once work on net8.0 RTM is done :)",
          "createdAt": "2023-08-05T00:16:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-05T11:48:29Z",
          "id": "IC_kwDODI9FZc5jUaui"
        },
        {
          "author": "tfenise",
          "body": "My suggestion is only a representation of const generic arguments in IL. So `ValueArray<int, Const42>` is `ValueArray<int, 42>`, and `ValueArray<int, Sum<42, 1>>` is `ValueArray<int, 43>`. At runtime, these `Const42` and `Sum<42, 1>` vanish when used as const generic arguments.\r\n\r\n> A static class can not be used as a type argument\r\n\r\nWhat I meant is to allow using a special static class to represent a const generic argument.\r\n\r\n> A generated type simply doesn't work because you can not expose it in ABI. Imagine you have a public void Foo(ValueArray<int, 42> arr) in assembly A, and the type of arr got lowered to an A.ValueArray42<int>. Now, in another assembly B, I have the generated type B.ValueArray42<int> as well. Those two ValueArray42<int>s are not the same type, so we can not pass a B.ValueArray42<int> to a parameter that expects an A.ValueArray42<int>. If you want to say \"We can use implicit casting for it\", but still, they are not the same type and have different type tokens in the metadata, so we are not able to say whether those two types are the same at runtime. And implicit casting cannot handle cases like casting a Foo<A.ValueArray42<T>> to Foo<B.ValueArray42<T>>.\r\n\r\nI never said to generate types like `ValueArray42<>`.\r\n\r\n> Generated types can not handle cases where N is not statically known, so your approach is blocking reflection usage. With the real const generics, a Foo<1> is just an instantiation of Foo<int T> so we can instantiate Foo<2>, Foo<3>, etc. using reflection without emitting any new type at runtime. But with your approach, we need to emit new types Foo2, Foo3, etc. at runtime because we don't have a type called Foo2 or Foo3 in the assembly, which is also not supported by NativeAOT.\r\n\r\nI never said to generate types like `Foo2` or `Foo3`. I said to generate special static classes like `Const42`, but that is only used to represent the const generic argument in IL, and reflection may well instantiate `Foo<2>` `Foo<3>` without requiring a `Const2` or `Const3`.\r\n\r\n> Atrributes don't support using open generic type parameters so your approach is not able to support generic on const type parameter.\r\n\r\nThe attribute is not an essential thing of my suggestion. The attribute may be placed somewhere else like:\r\n```C#\r\n[ConstGenericArgumentClass]\r\nstatic class Sum<int N1, int N2>\r\n{\r\n    [ConstGenericArgumentField]\r\n    public static readonly int __value = N1 + N2;\r\n}\r\n```\r\nOr we could make attributes support using open generic type parameters if we are already talking about big changes like const generic.\r\n\r\nAs a side point, I don't quite see how generic on const type parameter is useful. If the example of usage is `struct FixedBuffer<T, TSize, const TSize Size>`, I don't see any problem with just `struct FixedBuffer<T, long Size>`.\r\n\r\nThe main point of my suggestion is not to avoid bumping IL version, but to support const arithmetic.\r\n\r\nIf constraints are only checked at runtime, I don't see much necessity of them. For example, instead of\r\n```C#\r\nstatic ValueArray<T, N1 + N2> Concat<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2)\r\n    where N1 >= 0, N2 >= 0, N1 + N2 >=0\r\n    {...}\r\n```\r\nwhy not just\r\n```C#\r\nstatic ValueArray<T, N1 + N2> Concat<T, int N1, int N2>\r\n    (ValueArray<T, N1> array1, ValueArray<T, N2> array2)\r\n{\r\n    if (N1 < 0 || N2 < 0 || N1 + N2 < 0) throw new ArgumentException();\r\n    ...\r\n}\r\n```",
          "createdAt": "2023-08-05T10:13:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-05T10:13:25Z",
          "id": "IC_kwDODI9FZc5jVDGh"
        },
        {
          "author": "hez2010",
          "body": "> What I meant is to allow using a special static class to represent a const generic argument\r\n\r\nSorry for I misread your previous comment. \r\n\r\n> I don't quite see how generic on const type parameter is useful\r\n\r\nThis is useful especially in graphics programming, where the multiplier can be either `float` or `double`. \r\nAnd in the design of generic constraint, we also need this feature otherwise we cannot define a `IConstExpression<TValue, TValue Value>`. \r\n\r\nEven your proposed `Sum` type can be:\r\n\r\n```csharp\r\n[ConstGenericArgumentClass]\r\nstatic class Sum<T, T N1, T N2>\r\n{\r\n    [ConstGenericArgumentField]\r\n    public static readonly T __value = N1 + N2;\r\n}\r\n```\r\n\r\nOtherwise, we have to consider generic overloading (otherwise you cannot define `Sum<int N1, int N2>` and `Sum<float N1, float N2>` at the same time), which is also a non-trivial work and requires a metamodel change too. \r\n\r\n\r\n> If constraints are only checked at runtime\r\n\r\nI implemented the prototype to check them at runtime, which doesn't mean we won't check them at compile time. We don't have the design for C# yet, so I cannot say anything about the compiler implementation.\r\n",
          "createdAt": "2023-08-05T11:19:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-05T11:54:56Z",
          "id": "IC_kwDODI9FZc5jVGoJ"
        },
        {
          "author": "tfenise",
          "body": "I still have trouble imagining a situation where a const generic parameter of type other than `int` is useful.\r\n\r\n> This is useful especially in graphics programming, where the multiplier can be either float or double.\r\n\r\nYes, the multiplier can be either float or double, but does the multiplier need to be a const generic parameter?\r\n\r\n> For [4], we can embed the coefficient into a multiplier type. This is especially useful in graphics programming. For example, when you are working with things about illumination, you will definitely want some multiplier types with coefficients (which are basically floating point numbers) that are guaranteed to be constants.\r\n\r\nIs storing the coefficients into readonly fields not enough to guarantee them to be constant for the lifetime of the multiplier instance?\r\n\r\n`struct FixedBuffer<T, TSize, const TSize Size>` also sounds questionable. What is a `FixedBuffer<int, long, 42424242424242>`? A pointer to a buffer of length 42424242424242? `ValueArray<,>` is useful because it avoids heap allocations. Where is `FixedBuffer` useful? Such large sizes often come from runtime calculations and cannot be easily provided as compile-time const generic arguments.",
          "createdAt": "2023-08-05T15:10:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-05T15:10:23Z",
          "id": "IC_kwDODI9FZc5jVTxh"
        },
        {
          "author": "hez2010",
          "body": "> Is storing the coefficients into readonly fields not enough to guarantee them to be constant for the lifetime of the multiplier instance?\r\n\r\nThen you will need to save them as a `const field` to guarantee them to be constant for the runtime. But this means you cannot change them after you defined the type. While with const generics, you can change them by providing the const type argument then you can get a new instantiation that carries the constants you want. And if you need both `float` and `double` variants, without generics on type parameter you will need to define two distinct types because we don't support overloading on generics.\r\n\r\nAnother reason here is that we want to use generic on const type parameter to get rid of the need of overloading on generics, the latter is basically not achievable because implementing overloading on generics would break backward compatibility (an assembly already compiled by an older compiler won't be able to differentiate call targets while running on a new runtime). \r\n\r\nAnd, actually, it's basically free to have the support for generic on const generic type parameter, we already have almost all the necessary infrastructure to support it. So why not?\r\n\r\n>  What is a FixedBuffer<int, long, 42424242424242>?\r\n\r\nIt should be `ValueArray` here, I just forgot to rename `FixedBuffer` to `ValueArray` in the proposal.",
          "createdAt": "2023-08-05T15:24:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-05T15:53:45Z",
          "id": "IC_kwDODI9FZc5jVUiB"
        },
        {
          "author": "tfenise",
          "body": "`ValueArray<int, long, 42424242424242>` sounds problematic to me because there would be a `StackOverflowException` every time a variable of this type is stored on stack. It would be only possible to use it indirectly by `ref ValueArray<int, long, 42424242424242>` or `ValueArray<int, long, 42424242424242>*`, which just sounds undesirable to me.\r\n\r\nSpeaking of const/literal field,\r\n1. Is this supported?\r\n\r\n```C#\r\nclass MyClass<int N>\r\n{\r\n    const int AnotherN = N;\r\n}\r\n```\r\n\r\n2. If so, considering const arithmetic, is this supported?\r\n\r\n```C#\r\nclass MyClass<int N>\r\n{\r\n    const int NSquared = N * N;\r\n}\r\n```\r\n\r\n3. If so, is even this supported?\r\n\r\n```C#\r\nclass MyClass<double X>\r\n{\r\n    const double CosX = Math.Cos(X);\r\n}\r\n```\r\n\r\n`Math.Cos(X)` is not even guaranteed to be exactly equal across different runtime setups, but surely this is desirable if const generic of type `double` is supported, right?\r\n\r\nThere could be two answers to these problems.\r\n1. Don't support them, because const/literal fields are supposed to be compile time constants. Especially `const double CosX = Math.Cos(X);` should not be supported because `Math.Cos(X)` is not strictly a constant, even at runtime. Just use static readonly fields for these scenarios.\r\n2. Support them, because it is desirable to support the following, which seemingly should not be possible with static readonly fields:\r\n\r\n```C#\r\nclass MyClass1<double X>\r\n{\r\n    ...\r\n}\r\n\r\nclass MyClass2<double X>\r\n{\r\n    const double CosX = Math.Cos(X);\r\n\r\n    MyClass1<CosX> Foo() {...}\r\n}\r\n```\r\n\r\nThis looks like a similar problem with custom attribute arguments not allowed to be open generic types.",
          "createdAt": "2023-08-06T11:22:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-06T11:22:59Z",
          "id": "IC_kwDODI9FZc5jWbBb"
        },
        {
          "author": "hez2010",
          "body": "> Speaking of const/literal field,\r\n\r\nFor 1, 2 and 3, you need to use `static readonly` field instead of `const` field. The const field in IL can only express a literal value so you cannot write anything except the literal value itself.\r\nThe JIT is able to fold a `static readonly` field into constant at runtime.\r\n\r\n> This looks like a similar problem with custom attribute arguments not allowed to be open generic types.\r\n\r\nYeah this is a bit unfortunate. I would expect we can bring the support for const arithmetic later once we have associated types.",
          "createdAt": "2023-08-06T11:29:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-06T11:33:48Z",
          "id": "IC_kwDODI9FZc5jWbiH"
        },
        {
          "author": "hez2010",
          "body": "For someone who wants to try out the reflection APIs and `ValueArray` support, I have them implemented in another branch: https://github.com/hez2010/runtime/tree/feature/const-generics-managed\r\nThe implementation of runtime support for `ValueArray` is pretty straight-forward as we can reuse all the existing `InlineArray` implementation. ",
          "createdAt": "2023-08-22T16:37:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-08-22T16:52:41Z",
                "user": "Sergio0694"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-08-22T16:52:46Z",
                "user": "Sergio0694"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-22T17:01:27Z",
                "user": "KirillAldashkin"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-22T17:24:55Z",
                "user": "FaustVX"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-22T17:36:41Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-22T15:29:15Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHODix1qA=="
          },
          "updatedAt": "2023-08-23T03:18:29Z",
          "id": "IC_kwDODI9FZc5kpVPs"
        },
        {
          "author": "rickbrew",
          "body": "> 3\\. If so, considering const arithmetic, is this supported?\r\n> \r\n> ```cs\r\n> class MyClass<int N>\r\n> {\r\n>     const int NSquared = N * N;\r\n> }\r\n> ```\r\n\r\nWhat happens if `N * N` would overflow? This is well-defined at runtime, it depends on use of `checked` or `unchecked`, or a compiler flag to set the default.",
          "createdAt": "2023-08-22T21:19:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-22T21:19:45Z",
          "id": "IC_kwDODI9FZc5kq0na"
        },
        {
          "author": "hez2010",
          "body": "For anyone who wants to try out const generics, I have the full CoreCLR and Roslyn implementation (prototype) in\r\n\r\n- CoreCLR: https://github.com/hez2010/runtime/tree/feature/const-generics-managed\r\n- Roslyn: https://github.com/hez2010/roslyn/tree/feature/const-generics\r\n\r\nIf you want to give it a quick try, you can download the pre-built binaries and then you are ready to go (please follow the instructions in README.txt): https://1drv.ms/u/s!ApWNk8G_rszRgrxL0ch8e9h-gBiVaw?e=cwpUVD\r\n\r\nYou will need the latest preview version of Visual Studio 2022. \r\n\r\nThis is how it looks in Visual Studio:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/14960345/ad51f4ca-613e-4780-bc8a-9739624110a5)\r\n\nTo run the built artifacts, you need to use corerun in Core_Root. ",
          "createdAt": "2023-08-29T18:20:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-08-29T18:33:22Z",
                "user": "Sergio0694"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T18:33:26Z",
                "user": "Sergio0694"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T18:35:40Z",
                "user": "DaZombieKiller"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-29T18:35:43Z",
                "user": "DaZombieKiller"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-29T18:51:41Z",
                "user": "FaustVX"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T18:52:01Z",
                "user": "FaustVX"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T19:22:37Z",
                "user": "rickbrew"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-29T19:40:41Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T19:40:47Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T19:51:45Z",
                "user": "rameel"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-29T19:51:47Z",
                "user": "rameel"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-29T21:55:02Z",
                "user": "aromaa"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-29T21:55:05Z",
                "user": "aromaa"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-30T01:07:56Z",
                "user": "KirillAldashkin"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-31T00:15:18Z",
                "user": "AhmedZero"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-31T00:15:20Z",
                "user": "AhmedZero"
              }
            ],
            "totalCount": 16,
            "endCursor": "Y3Vyc29yOnYyOpHODFUrtQ=="
          },
          "updatedAt": "2023-08-31T18:26:55Z",
          "id": "IC_kwDODI9FZc5lNEZP"
        },
        {
          "author": "FaustVX",
          "body": "Hi @hez2010 \r\n\r\nIncredible work you have done here.\r\nI've tried your solution in VS, but I have the following warning\r\n\r\n|Code|Description|File|Line|\r\n|-----|-------------|----|----|\r\n|[MSB3270](https://learn.microsoft.com/visualstudio/msbuild/errors/msb3270?view=vs-2022&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(MSBuild.ResolveAssemblyReference.MismatchBetweenTargetedAndReferencedArch)%26rd%3Dtrue)|There was a mismatch between the processor architecture of the project being built \"MSIL\" and the processor architecture of the reference \"System.Private.CoreLib\", \"AMD64\". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.|C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\ Current\\Bin\\amd64\\ Microsoft.Common.CurrentVersion.targets|2364|\t\r\n\r\nI installed every `vsix` files (exept the `arm64` one)\r\nI have no other errors/warnings in VS and the project compile fine, but I can't run it, I have this error in the console\r\n```\r\nUnhandled exception. System.BadImageFormatException: Old version error. (0x80131107)\r\n\r\n...\\ConstGenerics.NET\\ConstGenerics\\bin\\Release\\net8.0\\ConstGenerics.exe (process 32660) exited with code -532462766.\r\n```\r\n\r\n_If you prefer, I can write an issue in one of your repo, just tell me which one._",
          "createdAt": "2023-08-29T19:43:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-29T19:43:47Z",
          "id": "IC_kwDODI9FZc5lNeKy"
        },
        {
          "author": "hez2010",
          "body": "@FaustVX The System.Private.CoreLib issue is because I built the coreroot with x64 architecture, which is not platform neutral. You can just ignore this warning. \r\nAs for the latter issue, you need to run your code using corerun in Core_Root:\r\n\r\n```pwsh\r\ncorerun.exe --clr-path <absolute_path/to/Core_Root> <path/to/your/assembly>\r\n```",
          "createdAt": "2023-08-30T00:56:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-30T06:30:45Z",
                "user": "FaustVX"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODFODtQ=="
          },
          "updatedAt": "2023-08-30T01:06:13Z",
          "id": "IC_kwDODI9FZc5lOo-d"
        },
        {
          "author": "KirillAldashkin",
          "body": "@hez2010 can you please send a checksum for that prebuilt binaries archive? 7zip says it's corrupted",
          "createdAt": "2023-08-31T15:59:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-31T16:00:06Z",
          "id": "IC_kwDODI9FZc5lZ_kp"
        },
        {
          "author": "hez2010",
          "body": "Hey everyone, I've successfully made an SDK for it, so you can build and run your code directly just use Visual Studio or Visual Studio Code.\r\n\r\nIf anyone wants to try it, you can download the SDK, VS extensions and the language server here: https://1drv.ms/u/s!ApWNk8G_rszRgrxP32IMKhW-V8iWug?e=JBn8wU\r\n\r\nVersion: 20230912 Build 1\r\nChecksum: a8c9ee29d1accd14797f60bedced312f9524391b\r\n\r\nPlease do follow the README.md.\r\n\r\nIt supports all things that has been marked with ⭕ or❗ in this feature proposal, for example:\r\n\r\n1. Declare a const generic type, eg. `class Foo<T, int N>`.\r\n2. Use a const generic type, eg. `new Foo<int, 42>()`.\r\n3. Declare a const generic method, eg. `void Foo<int X>`.\r\n4. Use a const generic method, eg. `Foo<42>()`.\r\n5. Generics on const type parameter, eg. `class Foo<T, T X>`, then you can use it with `Foo<int, 42>` as well as `Foo<float, 42.42424f>`.\r\n6. Use const type parameter as constant directly. eg. calling `Console.WriteLine(X)` in the type `class Foo<int X>`.\r\n7. `typeof` support. eg. `typeof(42)`.\r\n8. Casting support in const type argument. eg. `new Foo<(short)42>`, `typeof((short)42)`\r\n9. A built-in value type `ValueArray<T, int X>` that can be used as a fix-sized type with type `T` and length `X`.\r\n10. A niche syntax for declaring a `ValueArray` type, eg. `int[42]`.\r\n11. Full reflection support.\r\n    - To check whether a type parameter is const type parameter, use `type.IsGenericParameter && type.HasElementType`.\r\n    - To get the type of a const type parameter, use `type.GetElementType()`.\r\n    - To check whether a type argument is const type argument, use `type.IsConstValue`.\r\n    - To get the type of a const type argument, use `type.GetElementType()`.\r\n    - To get the value of a const type argument, use `type.ConstValue`.\r\n    - To make a const value type, use `Type.MakeConstValueType()`\r\n",
          "createdAt": "2023-08-31T17:40:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HOORAY",
                "createdAt": "2023-08-31T18:19:18Z",
                "user": "FaustVX"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-31T18:19:22Z",
                "user": "FaustVX"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-31T20:38:50Z",
                "user": "DaZombieKiller"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-31T20:38:51Z",
                "user": "DaZombieKiller"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-08-31T21:49:35Z",
                "user": "rameel"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-31T21:49:42Z",
                "user": "rameel"
              },
              {
                "content": "HEART",
                "createdAt": "2023-08-31T21:49:48Z",
                "user": "rameel"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-01T06:35:58Z",
                "user": "D3-LucaPiombino"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-02T09:46:02Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-02T11:44:16Z",
                "user": "Zekiah-A"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-02T11:44:16Z",
                "user": "Zekiah-A"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-02T11:44:18Z",
                "user": "Zekiah-A"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-02T12:14:07Z",
                "user": "PJB3005"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-03T21:22:09Z",
                "user": "msedi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-03T23:48:20Z",
                "user": "Fabi"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-03T23:48:22Z",
                "user": "Fabi"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-03T23:48:26Z",
                "user": "Fabi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T08:33:05Z",
                "user": "neon-sunset"
              }
            ],
            "totalCount": 18,
            "endCursor": "Y3Vyc29yOnYyOpHODHDpTQ=="
          },
          "updatedAt": "2023-09-19T08:27:57Z",
          "id": "IC_kwDODI9FZc5lapdI"
        },
        {
          "author": "hez2010",
          "body": "> @hez2010 can you please send a checksum for that prebuilt binaries archive? 7zip says it's corrupted\r\n\r\nI uploaded a new one (and fixed a bug) in the above post. Please use that instead. \r\n\r\nChecksum 653667f63ad239cfd80c856f60ea2f91934ad654",
          "createdAt": "2023-08-31T17:58:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-02T11:05:02Z",
          "id": "IC_kwDODI9FZc5laxRn"
        },
        {
          "author": "Fabi",
          "body": "> Hey everyone, I've successfully made an SDK for it, so you can build and run your code directly just use Visual Studio or Visual Studio Code.\r\n> \r\n> If anyone wants to try it, you can download the SDK, VS extensions and the language server here: https://1drv.ms/u/s!ApWNk8G_rszRgrxP32IMKhW-V8iWug?e=JBn8wU\r\n> \r\n> Version: 20230903 Build 1 Checksum: 0e64e1425519774ae2166aed23eda6a7a0fe13da\r\n> \r\n> Please do follow the README.md.\r\n> \r\n> It supports all things that has been marked with ⭕ or❗ in this feature proposal, for example:\r\n> \r\n> 1. Declare a const generic type, eg. `class Foo<T, int N>`.\r\n> 2. Use a const generic type, eg. `new Foo<int, 42>()`.\r\n> 3. Declare a const generic method, eg. `void Foo<int X>`.\r\n> 4. Use a const generic method, eg. `Foo<42>()`.\r\n> 5. Generics on const type parameter, eg. `class Foo<T, T X>`, then you can use it with `Foo<int, 42>` as well as `Foo<float, 42.42424f>`.\r\n> 6. Use const type parameter as constant directly. eg. calling `Console.WriteLine(X)` in the type `class Foo<int X>`.\r\n> 7. `typeof` support. eg. `typeof(42)`.\r\n> 8. Casting support in const type argument. eg. `new Foo<(short)42>`, `typeof((short)42)`\r\n> 9. A built-in value type `ValueArray<T, int X>` that can be used as a fix-sized type with type `T` and length `X`.\r\n> 10. A niche syntax for declaring a `ValueArray` type, eg. `int[42]`.\r\n> 11. Full reflection support.\r\n>     \r\n>     * To check whether a type parameter is const type parameter, use `type.IsGenericParameter && type.HasElementType`.\r\n>     * To get the type of a const type parameter, use `type.GetElementType()`.\r\n>     * To check whether a type argument is const type argument, use `type.IsConstValue`.\r\n>     * To get the type of a const type argument, use `type.GetElementType()`.\r\n>     * To get the value of a const type argument, use `type.ConstValue`.\r\n>     * To make a const value type, use `Type.MakeConstValueType()`\r\n\r\nthe VS code part works great. the VS extensions break the component cache of VS constantly (latest preview)",
          "createdAt": "2023-09-04T22:00:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-04T22:00:54Z",
          "id": "IC_kwDODI9FZc5lq1UU"
        },
        {
          "author": "jl0pd",
          "body": "> * To get the value of a const type argument, use `type.ConstValue`.\r\n> * To make a const value type, use `Type.MakeConstValueType()`\r\n\r\nMaybe names should use `Literal` to align with `FieldInfo.IsLiteral` ?",
          "createdAt": "2023-09-05T01:20:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-05T01:20:25Z",
          "id": "IC_kwDODI9FZc5lrLXc"
        },
        {
          "author": "hez2010",
          "body": "> > * To get the value of a const type argument, use `type.ConstValue`.\r\n> > * To make a const value type, use `Type.MakeConstValueType()`\r\n> \r\n> Maybe names should use `Literal` to align with `FieldInfo.IsLiteral` ?\r\n\r\nSounds great. We may want all `const` words to be `literal` to be consistent with the metadata.",
          "createdAt": "2023-09-13T08:20:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-13T09:20:51Z",
                "user": "jl0pd"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T04:44:20Z",
                "user": "xcaptain"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODHC06g=="
          },
          "updatedAt": "2023-09-13T08:20:11Z",
          "id": "IC_kwDODI9FZc5mWd53"
        },
        {
          "author": "hez2010",
          "body": "@AaronRobinsonMSFT Ping. It's already mid-Sept :)",
          "createdAt": "2023-09-18T03:50:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T04:44:17Z",
                "user": "xcaptain"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-24T05:56:23Z",
                "user": "saint4eva"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T08:42:13Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJTA=="
          },
          "updatedAt": "2023-09-18T03:50:55Z",
          "id": "IC_kwDODI9FZc5mrpMw"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "Yep, Thanks @hez2010. This is something I am watching closely. Your enthusiasm here is most welcome and we appreciate how much effort has been put into addressing many of the community concerns. It is also impressive how much you've been able to enable.\r\n\r\nThis is a rather fundamental change that is going to require substantial scrutiny. The changes here impact the entire .NET ecosystem due to the metadata changes and that I fear is likely to get serious push back. Not unlike the various other proposals that have attempted broad metadata changes. Related to the ecosystem impact is the scenarios this unblocks. There is no doubt this feature enables currently unsupported scenarios, but the question is about the impact to the ecosystem, the cost, relative to the unblocking of new scenarios, the benefit.\r\n\r\nPlease don't take my word as the official perspective here, but something this profound is going to need, at a minimum, everyone I mentioned at https://github.com/dotnet/runtime/issues/89730#issuecomment-1658861829 to weight in and that is going to take some time.",
          "createdAt": "2023-09-18T04:12:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-09-18T05:42:34Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T21:53:59Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-24T05:57:58Z",
                "user": "saint4eva"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T08:42:44Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJUw=="
          },
          "updatedAt": "2023-09-18T04:56:47Z",
          "id": "IC_kwDODI9FZc5mrsAd"
        },
        {
          "author": "davidwrighton",
          "body": "I agree with @AaronRobinsonMSFT, I've been traveling much of the summer, and unable to look deep into proposals like this, but the necessary step to actually getting general agreement to move the entire ecosystem forward is to come up with a reason to do so. When a change does not require performing an ecosystem shift, it is *much* easier to justify, as the costs are dramatically lower, and effectively restricted to the development effort to build a feature/support it. However, for anything that requires many components to change has significant costs to many people and organizations, so we need greater justification for any such change. Looking at your proposal, I see the main benefit proposed as providing for an excellent abstraction for the creation of fixed sized arrays, matrices and vectors. While I see that this would have applications in the development of AI, numeric computing, and graphics programs, I fail to see an analysis of what those improvements are, and whether or not they are really worth the cost to the ecosystem of continuing with this proposal as compared to taking other changes to improve those facets of computing in .NET (and frankly whether or not those scenarios are more or less important to the broader set of .NET developers which are developing web based applications or client line of business applications.)\r\n\r\nFor instance, we have been making other improvements that make it easier to develop manually specified constant array types (see https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-12.0/inline-arrays). While the `InlineArray` certainly does not have all of the capabilities as the generalized const generics feature you have developed here, we expect the feature to enable the usage of `Span<T>` over fixed size buffers, and we expect customers to develop multidimensional arrays, large stack variables, and other solutions that broadly resemble the many of the new capabilities that generic constants can also provide on top of the `InlineArray` capability that is now present in .NET 8.\r\n\r\nAll of that said, I personally have wanted something like this for many years and am very excited to watch what you are building here to see if we can develop a reason for the wider ecosystem to embrace a change like this. Once we have a good set of reasons why we might want to build this feature, and scenarios enabled/unblocked, we will also need to take a really deep look into the costs, and those can be quite surprising to developers who focus only on enabling new capabilities. For instance, additional generic specialization seems like a great win, but it tends to come with significant costs to the startup of applications.  It is possible that shipping a feature like this would require us to also change our model for handling canonicalization and specialization within the runtime to maintain acceptable startup performance. Some implementations of .NET may not be able to do that and may experience different performance characteristics as compared to the CoreCLR implementation, what impact does it have on Native AOT code generation (does it encourage code patterns which cannot effectively be compiled ahead of time, or require excessive precompiled binary sizes) etc.",
          "createdAt": "2023-09-18T20:27:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T21:54:03Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-20T08:20:14Z",
                "user": "zhuzilin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-01T13:04:52Z",
                "user": "charlesroddie"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-02-13T04:08:15Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-06T18:02:39Z",
                "user": "UserIsntAvailable"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-20T16:53:08Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T02:35:11Z",
                "user": "MarkLaureta"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T08:45:24Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJfw=="
          },
          "updatedAt": "2023-09-18T20:27:53Z",
          "id": "IC_kwDODI9FZc5mxwwk"
        },
        {
          "author": "hez2010",
          "body": "@AaronRobinsonMSFT @jkotas @davidwrighton \r\nWhile actually we are breaking metadata because we want the type of a const type parameter to be part of the type parameter (and it should), so I need to add a field to the `GenericParamRec` table.\r\nBut if you can accept something like `class Foo<[LiteralTypeParameter<int>] T>` or `class Foo<T> where T : LiteralType<int>` to be a solution then we don't need to make any break changes to the metadata.\r\n\r\nHowever, it exposes an issue where we have an almost non-extensible metadata, and we definitely have some work to do around this in the future (at least adding a field to an existing table shouldn't be a breaking change). I would like to see const generics can be a push for this work.",
          "createdAt": "2023-09-18T23:08:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-18T23:49:33Z",
                "user": "Khitiara"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODHIgNA=="
          },
          "updatedAt": "2023-09-19T00:55:11Z",
          "id": "IC_kwDODI9FZc5mywxP"
        },
        {
          "author": "xcaptain",
          "body": "@hez2010 Based on your current work, do you think it's possible to implement https://github.com/dotnet/csharplang/discussions/1315\r\n",
          "createdAt": "2023-09-19T03:33:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-19T03:33:40Z",
          "id": "IC_kwDODI9FZc5mzhuq"
        },
        {
          "author": "hez2010",
          "body": "> @hez2010 Based on your current work, do you think it's possible to implement [dotnet/csharplang#1315](https://github.com/dotnet/csharplang/discussions/1315)\r\n\r\nThey're unrelated features and should be implemented independently.",
          "createdAt": "2023-09-19T03:41:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-19T03:41:57Z",
          "id": "IC_kwDODI9FZc5mzi3J"
        },
        {
          "author": "hez2010",
          "body": "I have updated the proposal and my MVP implementation. Now we no longer have any breaking changes to the existing metadata! All existing ecosystem and tooling can continue to be used without any major concern of compatibility. ",
          "createdAt": "2023-09-19T08:32:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-09-19T09:03:54Z",
                "user": "Sergio0694"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-19T09:03:58Z",
                "user": "Sergio0694"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-19T09:06:46Z",
                "user": "ufcpp"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-19T09:24:11Z",
                "user": "xcaptain"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-19T09:38:11Z",
                "user": "rameel"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-19T17:02:59Z",
                "user": "Khitiara"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-19T17:03:01Z",
                "user": "Khitiara"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-24T06:18:58Z",
                "user": "saint4eva"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-24T06:19:02Z",
                "user": "saint4eva"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-25T20:42:22Z",
                "user": "adamfk"
              },
              {
                "content": "HEART",
                "createdAt": "2024-07-10T07:18:09Z",
                "user": "SinnersSum"
              },
              {
                "content": "HOORAY",
                "createdAt": "2025-08-10T08:46:56Z",
                "user": "TahirAhmadov"
              },
              {
                "content": "HEART",
                "createdAt": "2025-08-10T08:46:58Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 13,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJoQ=="
          },
          "updatedAt": "2023-09-19T08:41:01Z",
          "id": "IC_kwDODI9FZc5m0lDR"
        },
        {
          "author": "davidwrighton",
          "body": "@hez2010 The issue isn't that we can't break metadata. The issue is that we need a great deal of justification to make changes that cause significant fractions of the sets of tools in use with .NET to experience significant breaks, and even more so we need justification for anything that provides substantial new capabilities. Even if we avoid changing the metadata format for this sort of change, we still need to weigh the costs and risks to the platform and the impacts the new code will have on the ecosystem. The technical work to enable a feature to work or not work, is one thing, and you've done much of that research already, but we also need to have a good reason to bring new features into the platform. The more the feature will have viral impact on the ecosystem, the more justification we typically need. And my judgement, is that this is a fairly viral feature that may impact large amounts of code.\r\n\r\nFor instance, what scenarios (as in applications that can more easily/efficiently/performantly) be developed with the change you are presenting here? Why is this better than alternative approaches? What are the alternatives? These are all questions that need to be answered before I can even start to review the technical changes you've made here.",
          "createdAt": "2023-09-19T16:03:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-19T16:07:46Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T01:27:18Z",
                "user": "rickbrew"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-22T15:26:13Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-22T18:31:37Z",
                "user": "MSDN-WhiteKnight"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-06-05T17:53:24Z",
                "user": "MaxMahem"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-10T10:28:23Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-07-23T14:25:31Z",
                "user": "EzeAGB"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T08:47:37Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 8,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJtQ=="
          },
          "updatedAt": "2023-09-19T16:03:22Z",
          "id": "IC_kwDODI9FZc5m3_n8"
        },
        {
          "author": "huoyaoyuan",
          "body": "I think it's time to update metadata for the upcoming type system improvement of C#. Extension is tricky in today's type system. There are also other currently hard features like varadic generics, and HKT.\nIt would be long-term hard task of course. I want to bring it to design discussion, together with C# language design.",
          "createdAt": "2023-09-19T18:34:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-20T01:00:24Z",
                "user": "Shuenhoy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-20T07:46:53Z",
                "user": "rameel"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-20T11:02:32Z",
                "user": "Enderlook"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-24T06:24:40Z",
                "user": "saint4eva"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-09-24T06:24:44Z",
                "user": "saint4eva"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-24T06:24:48Z",
                "user": "saint4eva"
              },
              {
                "content": "HEART",
                "createdAt": "2023-09-26T11:01:24Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-09-26T11:01:27Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-16T17:59:17Z",
                "user": "rampaa"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-16T18:21:13Z",
                "user": "avsorokin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-23T10:28:20Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-08T19:34:36Z",
                "user": "KennethHoff"
              },
              {
                "content": "HOORAY",
                "createdAt": "2023-11-08T19:34:39Z",
                "user": "KennethHoff"
              },
              {
                "content": "HEART",
                "createdAt": "2023-11-08T19:34:49Z",
                "user": "KennethHoff"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-16T20:05:22Z",
                "user": "msedi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-12-07T18:05:17Z",
                "user": "yieldOnly"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-12-21T11:28:25Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "EYES",
                "createdAt": "2023-12-26T09:31:08Z",
                "user": "saint4eva"
              },
              {
                "content": "ROCKET",
                "createdAt": "2023-12-26T09:31:13Z",
                "user": "saint4eva"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-06T15:24:05Z",
                "user": "expcat"
              },
              {
                "content": "HOORAY",
                "createdAt": "2024-03-06T15:24:05Z",
                "user": "expcat"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-03-06T15:24:07Z",
                "user": "expcat"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-16T13:40:03Z",
                "user": "NilFusion"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-11T08:04:12Z",
                "user": "SystematicChaos012"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-21T06:06:20Z",
                "user": "noelex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-22T15:25:57Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-10-03T06:00:47Z",
                "user": "issue-dispenser"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-04T23:24:11Z",
                "user": "h3xds1nz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T08:47:46Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 29,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwJuQ=="
          },
          "updatedAt": "2023-09-19T18:34:45Z",
          "id": "IC_kwDODI9FZc5m5PXM"
        },
        {
          "author": "colejohnson66",
          "body": "Any update on this? I've long desired const generics. They allow you to express units of measurement  very elegantly. With the current system, each unit you require needs its own dedicated type. For example, if you have `Distance`, `Time`, and `Speed`, creating a `Speed` from `Distance/Time` requires dedicated operator overloads. Want to add `Acceleration`? Now you require _another type_! There's also the minor annoyance of \"which type does this overload go under? Is it overloading `Distance` or is it overloading `Time`?\"\r\n\r\nWith const generics, you could instead have a base `Unit<int NTime, int NDistance /* other bases */>`. `Distance` would become aliased to `Unit<0,1/*...*/>`, `Speed` would become `Unit<-1,1/*...*/>`, etc. and dividing two of them would yield `Unit<NTimeA - NTimeB, NDistanceA - NDistanceB /* other bases */>`.\r\n\r\n---\r\n\r\nThis is actually a major annoyance at my job; Unit handling is a major component of our applications. Specifically, we have _at least ten_ different unit systems we need to keep track of — each with their own dedicated type and custom operator overloads. I've long wondered about ways to reduce the bloat. A dedicated source generator has helped, but it still doesn't solve all the problems.\r\n\r\nFor alternatives: I've considered a simple `Unit` that brings along integers for each dimension (maximum of seven for all SI bases), but that would make a type that was previously four or eight bytes long (a single `float` or `double`) is now `4*N` (N=tracked dimensions) bytes larger, which destroys the ability to hold them in registers.\r\n\r\nIf you instead factor out the \"dimension\" struct into a record (reducing `Unit` to `sizeof(float)+sizeof(nint)` or `sizeof(double)+sizeof(nint)`), you now allocate a new \"dimension\" struct with each multiplication or division. And every mathematical operator (even those that don't allocate) now has to chase a pointer to the dimension structs. Lastly, regardless of inline or extracted dimensions, math is performed for each dimension _in addition to_ the desired one; Adding two `Unit` values must verify they have the same dimension before it adds the inner values - all at runtime.\r\n\r\nConst generics allow compile time checking of all of that.",
          "createdAt": "2024-05-22T15:54:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-15T15:24:52Z",
                "user": "snakex64"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOECmSyg=="
          },
          "updatedAt": "2024-05-23T13:32:28Z",
          "id": "IC_kwDODI9FZc5-qxV3"
        },
        {
          "author": "AaronRobinsonMSFT",
          "body": "The current state is captured in the last comment from @davidwrighton - https://github.com/dotnet/runtime/issues/89730#issuecomment-1725954556.\r\n\r\nThere is currently no plan to accept this proposal without starting with the thorough ecosystem analysis asked for in the aforementioned comment. Event after that analysis, it is possible the benefits will not be worth the breaking change.",
          "createdAt": "2024-05-22T17:31:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-05-22T17:52:09Z",
          "id": "IC_kwDODI9FZc5-rte0"
        },
        {
          "author": "xcaptain",
          "body": "Maybe you should add @hez2010 to the core team to push forward this proposal or I'm afraid it will be declined forever",
          "createdAt": "2024-05-22T17:45:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-22T18:07:50Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-03-25T00:55:07Z",
                "user": "xparadoxical"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOELRIsA=="
          },
          "updatedAt": "2024-05-22T17:45:47Z",
          "id": "IC_kwDODI9FZc5-rzjc"
        },
        {
          "author": "Perksey",
          "body": "In any case a business case would be required and an impact analysis on other active business cases today. There is just no reason for const generics to exist that warrants the cost of implementing it, and other languages having the feature is not a reason unto itself. C# is not an openly-developed language, in that a feature being designed and developed outside of Microsoft does not negate Microsoft's processes for ensuring all additions to it have well-understood benefits to important revenue-driving applications of .NET today.\r\n\r\n<sup>This is not an authoritative view on .NET development and I am not employed by Microsoft, just trying to echo the views already expressed concisely.</sup>",
          "createdAt": "2024-05-22T17:58:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-22T18:51:10Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-23T15:16:46Z",
                "user": "rampaa"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-24T11:36:38Z",
                "user": "yieldOnly"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-05-26T06:54:06Z",
                "user": "al0rid4l"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-07-09T16:14:16Z",
                "user": "StDymphna"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-07-10T07:17:37Z",
                "user": "SinnersSum"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-12-04T04:08:52Z",
                "user": "MaxMahem"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-12-08T13:00:24Z",
                "user": "NiTiSon"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-06-20T21:43:27Z",
                "user": "dsisco11"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-07-23T14:26:01Z",
                "user": "EzeAGB"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-08-10T08:58:35Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 11,
            "endCursor": "Y3Vyc29yOnYyOpHOEdwKpw=="
          },
          "updatedAt": "2024-05-22T17:59:51Z",
          "id": "IC_kwDODI9FZc5-r4jB"
        },
        {
          "author": "tannergooding",
          "body": "> Maybe you should add @hez2010 to the core team to push forward this proposal or I'm afraid it will be declined forever\r\n\r\nThis level of feature requires involvement from the various .NET Architects and other high level engineers across the `runtime`, `libraries`, and `languages` (not just C# either, but also F#, C++/CLI, etc). It is not something that can be driven by a single individual, regardless of where they worked or what team they are on.\r\n\r\nConst generics is a very interesting feature and there are a number of people that would enjoy seeing it and who may have uses for it (I know I have some in the BCL from the numerics side of things). But at the same time, it is just one of many features that people want and it starts from a position of much higher cost due to the potential need to version IL for such support to exist. So not only does it have to be prioritized with respect to every other feature that has to be done, but it also has to have significantly more justification to show the break is worthwhile or additional analysis has to be done to weigh the alternative approaches that may not require versioning IL and introducing such a break.\r\n\r\nThrowing more people/money at the problem space doesn't solve it either and would likely cause the feature to take even longer to get looked at. Not everything is parallelizable or infinitely scalable, there are fundamental bottlenecks required as part of the design and development process due to the entire picture needing to be looked at, including with respect to every other feature actively being worked on.\r\n\r\nIt's also worth noting that while the work `hez2010` did here is significant and their enthusiasm for this space is much appreciated, it is only a very small minority of the work that will actually be required. This is also why its typical for OSS repos to ask for developers to open an issue and engage with the correct teams first, so they don't spend a significant amount of time doing work around an area that may not actually make it in or which may go about it in the wrong way. Actually doing the implementation work is really the smallest portion of getting any feature into the ecosystem, and it is a far minority of the total work required. The actual bulk of the work comes from designing the feature. This includes, but is not limited to, doing a deep dive analysis into how it will impact the ecosystem (from both a backwards and forward thinking perspective), how it would integrate with other feature work (either ongoing or planned), what it means for tooling, what kind of breaks it may require, whether the cost/complexity of the feature justifies the benefits of the feature, who is going to use the feature and how it will be used, etc. -- The team and community has tons of brilliant engineers and many features can have an MVP knocked together within a week, but even simple ones really take a full year to get properly designed, tested, and integrated throughout the ecosystem. Others that are more complex (such as generic math, const generics, discriminated unions, etc) can take years due to the impact and broader considerations around the ecosystem.\r\n",
          "createdAt": "2024-05-24T16:01:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T16:06:25Z",
                "user": "AaronRobinsonMSFT"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T16:11:56Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T16:54:46Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-24T17:57:40Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T15:16:14Z",
                "user": "zhuzilin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T18:41:55Z",
                "user": "domagojmedo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T18:55:16Z",
                "user": "farmerau"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T18:58:31Z",
                "user": "koryphaee"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:09:04Z",
                "user": "xiety"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:13:59Z",
                "user": "maxle5"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:14:02Z",
                "user": "maximilien-noal"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:32:34Z",
                "user": "Stahhl"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:35:35Z",
                "user": "PaulusParssinen"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T19:41:00Z",
                "user": "cmills-indochino"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:00:55Z",
                "user": "Brynjarth"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:03:48Z",
                "user": "FlushablPet"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:03:52Z",
                "user": "gunt3001"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:04:22Z",
                "user": "KuraiAndras"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-25T20:10:34Z",
                "user": "ronbrogan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:16:39Z",
                "user": "GabrielHSFerreira"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:21:05Z",
                "user": "Sulexa"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T20:38:34Z",
                "user": "adamfk"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-25T21:20:20Z",
                "user": "MaQy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T21:28:37Z",
                "user": "slow-down"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T21:39:18Z",
                "user": "kjhickman"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T21:51:39Z",
                "user": "arvinsingh"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T21:59:18Z",
                "user": "Randle-Lanre"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T22:14:48Z",
                "user": "PraveentheMachine"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-25T23:46:56Z",
                "user": "codeconscious"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T00:08:54Z",
                "user": "Gerv-G"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T00:21:35Z",
                "user": "SapiensAnatis"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T00:21:36Z",
                "user": "SapiensAnatis"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T00:35:47Z",
                "user": "Jcouls29"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T01:16:05Z",
                "user": "cdock1029"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T01:49:01Z",
                "user": "MaxJ345"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T01:54:30Z",
                "user": "matthebrown"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T02:25:37Z",
                "user": "felickz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T03:00:17Z",
                "user": "phougt"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T03:00:19Z",
                "user": "phougt"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T03:13:18Z",
                "user": "brandonagr"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T03:35:25Z",
                "user": "jmeaster30"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T03:47:16Z",
                "user": "jjosh102"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T03:49:28Z",
                "user": "NachoToast"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T03:49:29Z",
                "user": "NachoToast"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T04:23:56Z",
                "user": "maujavier91"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T04:36:08Z",
                "user": "tojkuv"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T04:36:09Z",
                "user": "tojkuv"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T04:37:02Z",
                "user": "hammypants"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T04:37:22Z",
                "user": "mikebrown0"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T04:37:27Z",
                "user": "mikebrown0"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T05:06:12Z",
                "user": "Tieno"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T05:11:19Z",
                "user": "yraen69"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T05:15:55Z",
                "user": "Namoshek"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T05:25:40Z",
                "user": "BunnyMan1"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T05:29:45Z",
                "user": "mkosmo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T05:46:21Z",
                "user": "chaudis"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T05:52:50Z",
                "user": "crippe"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T06:06:59Z",
                "user": "JonAylwinJones"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T06:35:34Z",
                "user": "Hellevar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T06:39:13Z",
                "user": "edwardneal"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T07:14:35Z",
                "user": "dodyg"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T07:41:14Z",
                "user": "MrCSharp22"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T08:10:15Z",
                "user": "FlameWolf"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T08:31:22Z",
                "user": "beyti"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T08:33:51Z",
                "user": "Sopor10"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T08:43:45Z",
                "user": "Rekkonnect"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T08:43:47Z",
                "user": "Rekkonnect"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T10:09:29Z",
                "user": "saithis"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T11:34:02Z",
                "user": "byjokese"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T11:49:20Z",
                "user": "Donovoi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T12:10:18Z",
                "user": "SirRacoozy"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T12:10:22Z",
                "user": "SirRacoozy"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T13:38:18Z",
                "user": "Pop0p"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T13:38:22Z",
                "user": "Pop0p"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-26T14:55:30Z",
                "user": "hmiguel"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T16:59:11Z",
                "user": "glorious73"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T17:02:21Z",
                "user": "jingren1021"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T21:12:46Z",
                "user": "HamletTanyavong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-26T23:56:58Z",
                "user": "MTuel"
              },
              {
                "content": "ROCKET",
                "createdAt": "2024-05-27T05:35:24Z",
                "user": "mvonballmo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T09:55:50Z",
                "user": "azunyuuuuuuu"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T11:07:49Z",
                "user": "loraderon"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-27T11:15:04Z",
                "user": "kenkendk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T12:16:40Z",
                "user": "slipsec"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T12:50:21Z",
                "user": "AvogatoWizardWhisker"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T13:15:19Z",
                "user": "ducoalexandre"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T14:31:29Z",
                "user": "RyoukoKonpaku"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-27T17:24:17Z",
                "user": "abcdefg30"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-28T08:04:41Z",
                "user": "ForNeVeR"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-28T08:14:06Z",
                "user": "yaakov-h"
              },
              {
                "content": "HEART",
                "createdAt": "2024-05-28T08:14:06Z",
                "user": "yaakov-h"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-28T10:57:18Z",
                "user": "slang25"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-20T09:51:49Z",
                "user": "piotrbulkowski"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-28T22:19:07Z",
                "user": "aromaa"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-11T05:45:17Z",
                "user": "SystematicChaos012"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-07-23T17:14:31Z",
                "user": "hez2010"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-14T18:48:35Z",
                "user": "RobPz"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-10-31T02:29:32Z",
                "user": "WeihanLi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-10T10:27:24Z",
                "user": "ikkentim"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-20T18:57:31Z",
                "user": "Happypig375"
              },
              {
                "content": "HEART",
                "createdAt": "2025-01-20T18:57:32Z",
                "user": "Happypig375"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-01-20T18:57:32Z",
                "user": "Happypig375"
              },
              {
                "content": "HEART",
                "createdAt": "2025-02-16T16:53:46Z",
                "user": "SystematicChaos012"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-05T03:21:56Z",
                "user": "ArsenalAlex108"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-10T09:01:33Z",
                "user": "TahirAhmadov"
              }
            ],
            "totalCount": 105,
            "endCursor": "Y3Vyc29yOnYyOpHODjPhGQ=="
          },
          "updatedAt": "2024-05-24T16:01:30Z",
          "id": "IC_kwDODI9FZc5-84vp"
        }
      ],
      "totalCount": 43,
      "endCursor": "Y3Vyc29yOnYyOpHOfvOL6Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/89730",
    "title": "Feature Proposal: Const Generics"
  },
  {
    "author": "Doh09",
    "labels": [
      "question",
      "area-Meta"
    ],
    "createdAt": "2023-08-02T14:51:54Z",
    "body": "### Description\r\n\r\nThe minimum viable example appears to be this:\r\n\r\ntestMode ? '3' : 643\r\n\r\nMeaning, a ternary operator where there is a char and an integer.\r\n\r\nIn the above case the expected result would be '3' when the boolean testMode is set to true. However, the result is \"51\". And if I add further ternary operators with chars and integers, their results become \"52\", \"53\" and so on.\r\n\r\nI have attached a zip file with a C# file called \"MyTest\" where the error is produced, as the \"Program\" script which I run the test from. The error happens in Visual Studio 2022 updated to the most recent version. I have tested the error in .NET 7.0 (Standard Term Support) using a console application. \r\n\r\nI have also attached the demonstration project, just in case you needed that. And a screenshot from the console where the error is visible.\r\n\r\nIn the example you see in the video and screenshot. All I have done is create a new Visual Studio 2022 console project, seelcted .NET 7.0 (Standard Term Support) and added the scripts attached. Then run them.\r\n\r\nThe issue might be more of an inconvenience to programmers than a security risk. As it produces fake results that arent written anywhere by the programmer. But I can imagine that some creative mind might be able to find a way to utilize either this error or similar errors to achieve access to parts of programs they werent meant to.\r\n\r\nIn any case, it appears an error and should be dealt with. So that programmers will get correct results when using ternary operators.\r\n\r\nPlease reach out if you have any questions or need further information.\r\n\r\n### Reproduction Steps\r\n\r\n///See example script below.\r\n\r\n```\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\npublic class MyTest \r\n{\r\n    public void InvokeTernaryOperatorTests()\r\n    {\r\n        TernaryOperatorTest1();\r\n        TernaryOperatorTest2();\r\n        TernaryOperatorTest3();\r\n        TernaryOperatorTest4();\r\n        TernaryOperatorTest5();\r\n        TernaryOperatorTest6();\r\n        TernaryOperatorTest7();\r\n\r\n    }\r\n\r\n    public void TernaryOperatorTest1() {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test1 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? '4' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"51/52\"\r\n    }\r\n\r\n    public void TernaryOperatorTest2()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test2 -\");\r\n        System.Console.WriteLine($\"{(testMode ? \"3\" : GetANumber())}/{(testMode ? '4' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"3/52\"\r\n    }\r\n\r\n    public void TernaryOperatorTest3()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test3 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? \"4\" : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"51/4\"\r\n    }\r\n\r\n    public void TernaryOperatorTest4()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test4 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? \"4\" : GetAnotherNumber())}/{(testMode ? '5' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4/5\", evaluates to \"51/4/53\"\r\n    }\r\n\r\n    public void TernaryOperatorTest5()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test5 -\");\r\n        System.Console.WriteLine(testMode ? '3' : GetANumber());\r\n        //Should evaluate to \"3\", evaluates to \"51\"\r\n    }\r\n\r\n    public void TernaryOperatorTest6()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test6 -\");\r\n        System.Console.WriteLine(testMode ? \"3\" : GetANumber());\r\n        //Evaluates correctly to \"3\", this shows that the error only happens with when char and integer is used in the ternary operator.\r\n    }\r\n\r\n    public void TernaryOperatorTest7()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test7 -\");\r\n        System.Console.WriteLine(testMode ? '3' : 643);\r\n        //Should evaluate to \"3\", evaluates to \"51\"\r\n    }\r\n\r\n    public int GetANumber() {\r\n        return 643;\r\n    }\r\n\r\n    public int GetAnotherNumber()\r\n    {\r\n        return 683;\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nShould evaluate ternary operator to give char value or int value.\r\n\r\n### Actual behavior\r\n\r\nGive a string value from unknown origin. The string value increases if more ternary operators are within the same code. First string is \"51\", second string is \"52\", third string is \"53\" and so on. See the attached screenshot.\r\n![VisualStudio2022_TernaryOperatorError](https://github.com/dotnet/runtime/assets/21059484/2127bf74-7675-4d67-98c1-ab954c3dafee)\r\n\r\n\r\n### Regression?\r\n\r\nI originally came across the issue while working in Unity, which uses an older version of .NET. But I have since tested in a .NET 7.0 console application in Visual Studio 2022. And the issue was there too.\r\n\r\n### Known Workarounds\r\n\r\nChanging the char to a string value, or changing the integer to a string value and then parsing it later. I found the issue happened if it was:\r\nBoolean ? Char : Integer\r\n\r\nIt is possible it can happen in other combinations too. But that was what made it happen in my tests.\r\n\r\nWhereas\r\n\r\nBoolean ? String : Integer\r\n\r\nFor example that would work fine.\r\n\r\n### Configuration\r\n\r\n[TernaryOperatorError_ConsoleApplication.zip](https://github.com/dotnet/runtime/files/12241443/TernaryOperatorError_ConsoleApplication.zip)\r\n\r\nI have uploaded a .Zip file with an example project. But in short it was a console application using .NET 7.0 (standard term support) in Visual Studio 2022. A similar error happened when testing in Visual Studio 2019 where I opened a C# file from Unity 2021 LTS.\r\n\r\n\r\n### Other information\r\n\r\nThere seems to be something odd happening when evaluating the ternary operator in some very specific cases, like what I described here. I am not familiar with all the workings behind thet scene, but my guess would be something along the lines of a memory/byte pointer error, ASCII conversion error or something similar. I dont know how the evaluation happens behind the scenes so that is my best guess.",
    "number": 89855,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2023-08-07T22:14:27Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "Clockwork-Muse",
          "body": "... this is happening because the `char`s are getting implicitly cast to `int` (and the one with `string` is getting upcast to `object`) - take a look at an ASCII table.  \r\nThe result of the ternary has to be resolved before it can be output to the string, so normal rules apply.",
          "createdAt": "2023-08-02T15:25:29Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-02T15:59:30Z",
                "user": "EgorBo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-02T16:40:31Z",
                "user": "Joe4evr"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-02T23:03:47Z",
                "user": "Frassle"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-31T21:27:34Z",
                "user": "aepot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-11T17:41:29Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHODhfQPg=="
          },
          "updatedAt": "2023-08-02T15:25:29Z",
          "id": "IC_kwDODI9FZc5jFnDq"
        },
        {
          "author": "Doh09",
          "body": "> ... this is happening because the `char`s are getting implicitly cast to `int` (and the one with `string` is getting upcast to `object`) - take a look at an ASCII table. The result of the ternary has to be resolved before it can be output to the string, so normal rules apply.\r\n\r\nIs it not possible to avoid this cast somehow, or to give a warning or similar to inform the programmer of the potential complication?",
          "createdAt": "2023-08-02T16:28:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-02T16:28:30Z",
          "id": "IC_kwDODI9FZc5jGGKE"
        },
        {
          "author": "tannergooding",
          "body": "Small types, such as `byte`, `sbyte`, `char`, `short`, and `ushort`, have always been implicitly upcast to `int` with the relevant sign/zero extension. Warning isn't feasible because it would be extremely noisy, resulting in potentially thousands of new warnings in existing code.\r\n\r\nYou need to need to either ensure both sides of the ternary are the same type, or cast the result of the ternary back down to the relevant small type:\r\n```csharp\r\ntestMode ? '3' : (char)643\r\n\r\n// -or-\r\n\r\n(char)(testMode ? '3' : 643)\r\n```\r\n\r\nNoting, however, that how this works can depend on the target type as well. For example if you do `M(testMode ? '3' : (char)643)` and `M` only takes an int, then you will still get an int. The API in question needs to take a `char` for the type to be kept \"as-is\"",
          "createdAt": "2023-08-02T16:38:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-07T22:12:28Z",
                "user": "ericstj"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-08-31T21:27:29Z",
                "user": "aepot"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-05-11T17:41:35Z",
                "user": "colejohnson66"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODhfQQA=="
          },
          "updatedAt": "2023-08-02T16:38:18Z",
          "id": "IC_kwDODI9FZc5jGLFK"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\r\n\r\nThe minimum viable example appears to be this:\r\n\r\ntestMode ? '3' : 643\r\n\r\nMeaning, a ternary operator where there is a char and an integer.\r\n\r\nIn the above case the expected result would be '3' when the boolean testMode is set to true. However, the result is \"51\". And if I add further ternary operators with chars and integers, their results become \"52\", \"53\" and so on.\r\n\r\nI have attached a zip file with a C# file called \"MyTest\" where the error is produced, as the \"Program\" script which I run the test from. The error happens in Visual Studio 2022 updated to the most recent version. I have tested the error in .NET 7.0 (Standard Term Support) using a console application. \r\n\r\nI have also attached the demonstration project, just in case you needed that. And a screenshot from the console where the error is visible.\r\n\r\nIn the example you see in the video and screenshot. All I have done is create a new Visual Studio 2022 console project, seelcted .NET 7.0 (Standard Term Support) and added the scripts attached. Then run them.\r\n\r\nThe issue might be more of an inconvenience to programmers than a security risk. As it produces fake results that arent written anywhere by the programmer. But I can imagine that some creative mind might be able to find a way to utilize either this error or similar errors to achieve access to parts of programs they werent meant to.\r\n\r\nIn any case, it appears an error and should be dealt with. So that programmers will get correct results when using ternary operators.\r\n\r\nPlease reach out if you have any questions or need further information.\r\n\r\n### Reproduction Steps\r\n\r\n///See example script below.\r\n\r\n```\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\npublic class MyTest \r\n{\r\n    public void InvokeTernaryOperatorTests()\r\n    {\r\n        TernaryOperatorTest1();\r\n        TernaryOperatorTest2();\r\n        TernaryOperatorTest3();\r\n        TernaryOperatorTest4();\r\n        TernaryOperatorTest5();\r\n        TernaryOperatorTest6();\r\n        TernaryOperatorTest7();\r\n\r\n    }\r\n\r\n    public void TernaryOperatorTest1() {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test1 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? '4' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"51/52\"\r\n    }\r\n\r\n    public void TernaryOperatorTest2()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test2 -\");\r\n        System.Console.WriteLine($\"{(testMode ? \"3\" : GetANumber())}/{(testMode ? '4' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"3/52\"\r\n    }\r\n\r\n    public void TernaryOperatorTest3()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test3 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? \"4\" : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4\", evaluates to \"51/4\"\r\n    }\r\n\r\n    public void TernaryOperatorTest4()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test4 -\");\r\n        System.Console.WriteLine($\"{(testMode ? '3' : GetANumber())}/{(testMode ? \"4\" : GetAnotherNumber())}/{(testMode ? '5' : GetAnotherNumber())}\");\r\n        //Should evaluate to \"3/4/5\", evaluates to \"51/4/53\"\r\n    }\r\n\r\n    public void TernaryOperatorTest5()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test5 -\");\r\n        System.Console.WriteLine(testMode ? '3' : GetANumber());\r\n        //Should evaluate to \"3\", evaluates to \"51\"\r\n    }\r\n\r\n    public void TernaryOperatorTest6()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test6 -\");\r\n        System.Console.WriteLine(testMode ? \"3\" : GetANumber());\r\n        //Evaluates correctly to \"3\", this shows that the error only happens with when char and integer is used in the ternary operator.\r\n    }\r\n\r\n    public void TernaryOperatorTest7()\r\n    {\r\n        bool testMode = true;\r\n        System.Console.WriteLine(\" - Test7 -\");\r\n        System.Console.WriteLine(testMode ? '3' : 643);\r\n        //Should evaluate to \"3\", evaluates to \"51\"\r\n    }\r\n\r\n    public int GetANumber() {\r\n        return 643;\r\n    }\r\n\r\n    public int GetAnotherNumber()\r\n    {\r\n        return 683;\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nShould evaluate ternary operator to give char value or int value.\r\n\r\n### Actual behavior\r\n\r\nGive a string value from unknown origin. The string value increases if more ternary operators are within the same code. First string is \"51\", second string is \"52\", third string is \"53\" and so on. See the attached screenshot.\r\n![VisualStudio2022_TernaryOperatorError](https://github.com/dotnet/runtime/assets/21059484/2127bf74-7675-4d67-98c1-ab954c3dafee)\r\n\r\n\r\n### Regression?\r\n\r\nI originally came across the issue while working in Unity, which uses an older version of .NET. But I have since tested in a .NET 7.0 console application in Visual Studio 2022. And the issue was there too.\r\n\r\n### Known Workarounds\r\n\r\nChanging the char to a string value, or changing the integer to a string value and then parsing it later. I found the issue happened if it was:\r\nBoolean ? Char : Integer\r\n\r\nIt is possible it can happen in other combinations too. But that was what made it happen in my tests.\r\n\r\nWhereas\r\n\r\nBoolean ? String : Integer\r\n\r\nFor example that would work fine.\r\n\r\n### Configuration\r\n\r\n[TernaryOperatorError_ConsoleApplication.zip](https://github.com/dotnet/runtime/files/12241443/TernaryOperatorError_ConsoleApplication.zip)\r\n\r\nI have uploaded a .Zip file with an example project. But in short it was a console application using .NET 7.0 (standard term support) in Visual Studio 2022. A similar error happened when testing in Visual Studio 2019 where I opened a C# file from Unity 2021 LTS.\r\n\r\n\r\n### Other information\r\n\r\nThere seems to be something odd happening when evaluating the ternary operator in some very specific cases, like what I described here. I am not familiar with all the workings behind thet scene, but my guess would be something along the lines of a memory/byte pointer error, ASCII conversion error or something similar. I dont know how the evaluation happens behind the scenes so that is my best guess.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>Doh09</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`question`, `area-Meta`, `untriaged`, `needs-area-label`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-08-03T15:38:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-03T15:38:11Z",
          "id": "IC_kwDODI9FZc5jMeAO"
        },
        {
          "author": "ericstj",
          "body": "Perhaps an analyzer could be written to detect implicit casts from char to a numeric value and warn?",
          "createdAt": "2023-08-07T22:14:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-28T10:06:02Z",
                "user": "huoyaoyuan"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODf0Aww=="
          },
          "updatedAt": "2023-08-07T22:14:27Z",
          "id": "IC_kwDODI9FZc5jdYGN"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOY3WBjQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/89855",
    "title": "Ternary operator gives false result"
  },
  {
    "author": "stephentoub",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2023-08-11T15:21:58Z",
    "body": "The following libraries in dotnet/runtime have not been annotated for Nullable Reference Types.\r\n\r\n- [x] Microsoft.Extensions.Hosting.Systemd\r\n- [ ] System.CodeDom\r\n- [ ] System.Diagnostics.EventLog\r\n- [ ] System.Diagnostics.PerformanceCounter\r\n- [ ] System.DirectoryServices.AccountManagement\r\n- [ ] System.DirectoryServices.Protocols\r\n- [ ] System.IO.Ports\r\n- [ ] System.Management\r\n- [ ] System.Runtime.Caching\r\n- [ ] System.Speech\r\n\r\nFor each, we should either do so or decide we're never doing so.",
    "number": 90400,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-03-10T03:50:38Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe following libraries in dotnet/runtime have not been annotated for Nullable Reference Types.\r\n\r\n- [ ] Microsoft.Extensions.Hosting.Systemd\r\n- [ ] System.CodeDom\r\n- [ ] System.Diagnostics.EventLog\r\n- [ ] System.Diagnostics.PerformanceCounter\r\n- [ ] System.DirectoryServices.AccountManagement\r\n- [ ] System.DirectoryServices.Protocols\r\n- [ ] System.IO.Ports\r\n- [ ] System.Management\r\n- [ ] System.Runtime.Caching\r\n- [ ] System.Speech\r\n\r\nFor each, we should either do so or decide we're never doing so.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>stephentoub</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>Future</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-08-11T15:22:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-11T15:22:07Z",
          "id": "IC_kwDODI9FZc5j1fJB"
        },
        {
          "author": "maranmaran",
          "body": "Are there any specific decisions so far about \"never doing so\" or listed libs are up for grabs and PR per lib? ",
          "createdAt": "2023-08-15T15:07:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-08-15T15:07:33Z",
          "id": "IC_kwDODI9FZc5kFP3A"
        },
        {
          "author": "halgab",
          "body": "I'm currently working on annotations for `System.CodeDom`. Should I send one big PR for the whole assembly or should I slice it in smaller parts?",
          "createdAt": "2023-09-19T13:59:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-09-19T13:59:39Z",
          "id": "IC_kwDODI9FZc5m20ZN"
        },
        {
          "author": "stephentoub",
          "body": "> Are there any specific decisions so far about \"never doing so\" or listed libs are up for grabs and PR per lib?\r\n\r\nNope\r\n\r\n> I'm currently working on annotations for System.CodeDom. Should I send one big PR for the whole assembly or should I slice it in smaller parts?\r\n\r\nEither way is fine.",
          "createdAt": "2024-03-10T03:50:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-10T03:50:37Z",
          "id": "IC_kwDODI9FZc52cB-k"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOdnAfpA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/90400",
    "title": "Annotate remaining libraries for Nullable Reference Types"
  },
  {
    "author": "danmoseley",
    "labels": [
      "area-Meta",
      "test-enhancement"
    ],
    "createdAt": "2023-10-03T17:45:45Z",
    "body": "https://github.com/dotnet/runtime/pull/92924#issuecomment-1744677940\r\n\r\nThis was a case where the product was not using invariant culture to parse a date.\r\n\r\nIt's probably worth having a look to see whether any unit tests throw up similar issues. We do run at least inner loop on es-ES in CI I believe. But I'm not sure this includes outerloop, and es-ES is sufficiently similar to en-US that it does not catch certain kinds of issues (eg., historically we've had several tests failed in Russian machine culture, and they were community reported)\r\n\r\nsuggestion: run all the unit tests including outer loop in a different culture, ideally with a different calendar, etc. or even a custom culture that is different to neutral culture in every respect -- calendar, date format, numeric specifier, etc. Every test should pass.\r\n\r\nI've done this historically from time to time but I'll put this up for grabs this time\r\n\r\ncc @filipnavara ",
    "number": 92949,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-28T04:52:34Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nhttps://github.com/dotnet/runtime/pull/92924#issuecomment-1744677940\r\n\r\nThis was a case where the product was not using invariant culture to parse a date.\r\n\r\nIt's probably worth having a look to see whether any unit tests throw up similar issues. We do run at least inner loop on es-ES in CI I believe. But I'm not sure this includes outerloop, and es-ES is sufficiently similar to en-US that it does not catch certain kinds of issues (eg., historically we've had several tests failed in Russian machine culture, and they were community reported)\r\n\r\nsuggestion: run all the unit tests including outer loop in a different culture, ideally with a different calendar, etc. or even a custom culture that is different to neutral culture in every respect -- calendar, date format, numeric specifier, etc.\r\n\r\nI've done this historically from time to time but I'll put this up for grabs this time\r\n\r\ncc @filipnavara \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>danmoseley</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `help wanted`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-03T17:45:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-03T17:45:56Z",
          "id": "IC_kwDODI9FZc5oCVyW"
        },
        {
          "author": "danmoseley",
          "body": "@filipnavara sounded like you might do this at some point? or up for grabs?",
          "createdAt": "2023-10-03T21:15:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-03T21:15:53Z",
          "id": "IC_kwDODI9FZc5oDdmc"
        },
        {
          "author": "filipnavara",
          "body": "It's not exactly on the top of my list but I do have a machine with such a weird setup so I will likely eventually get to do it. Feel free to assign me.",
          "createdAt": "2023-10-03T21:25:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-03T21:25:02Z",
          "id": "IC_kwDODI9FZc5oDgeA"
        },
        {
          "author": "danmoseley",
          "body": "Cool - done. I wasn't expecting, just sounded like you planned to 😀",
          "createdAt": "2023-10-03T21:50:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-03T21:50:10Z",
          "id": "IC_kwDODI9FZc5oDoNn"
        },
        {
          "author": "MichalPetryka",
          "body": "> ideally with a different calendar\r\n\r\nI'd say that cultures with a comma or the arabic `٫` would be the most important. We've had one 3rd party library fail with double parsing but ONLY on Czech culture once.\r\n\r\nI think that having a weekly pipeline for running with a few weird cultures would be the solution here (like Czech, Arabic, Thai, Japanese).",
          "createdAt": "2023-10-04T15:10:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-04T15:30:59Z",
          "id": "IC_kwDODI9FZc5oIoC3"
        },
        {
          "author": "filipnavara",
          "body": "I run all the inner loop tests on macOS Sonoma with the Saudi Arabian culture with non-Gregorian calendar. There were no additional culture-related failures. There was one spurious failure in `System.Net.Http.Functional.Tests.HttpMetricsTest_Http11_Async.RequestDuration_ConnectionClosedWhileReceivingHeaders_Recorded`, and the OpenSSL and ODBC tests were skipped due to lack of native libraries.",
          "createdAt": "2023-10-06T07:14:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-21T03:18:38Z",
                "user": "danmoseley"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODKflIA=="
          },
          "updatedAt": "2023-10-06T07:14:47Z",
          "id": "IC_kwDODI9FZc5oUGBU"
        },
        {
          "author": "ericstj",
          "body": "@dotnet/area-system-globalization @dotnet/area-infrastructure-libraries to weigh in on this.",
          "createdAt": "2023-10-10T17:35:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-10T17:35:37Z",
          "id": "IC_kwDODI9FZc5oqU_Z"
        },
        {
          "author": "tarekgh",
          "body": "Running the libraries tests with random culture is a good idea. We can think of having a CI leg which can force a random culture on the machine before running.  ",
          "createdAt": "2023-10-10T17:52:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-10T17:52:53Z",
          "id": "IC_kwDODI9FZc5oqaZe"
        },
        {
          "author": "danmoseley",
          "body": "As a simple step we could consider replacing our regular en-ES run (I assume we still do) with one using a culture that has more differences to en-US. OS culture also changes things like OS messages.",
          "createdAt": "2023-10-21T03:21:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-21T03:21:14Z",
          "id": "IC_kwDODI9FZc5pt4eK"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOabeHig=="
    },
    "url": "https://github.com/dotnet/runtime/issues/92949",
    "title": "consider running all libraries unit tests with bogus machine culture"
  },
  {
    "author": "janvorli",
    "labels": [
      "enhancement",
      "area-Meta",
      "discussion"
    ],
    "createdAt": "2023-10-04T21:18:39Z",
    "body": "* Hierarchical limits\r\n  * Some container orchestration systems use cgroup hierarchy with memory / CPU limits set possibly in ancestor cgroups. .NET reads only the limits for the cgroup of the current process though. So, the limits imposed by the higher levels are not honored. We want to start honoring these limits. cgroups v1 allows us to simply read the hierarchical limit, but for cgroups v2, we need to walk the hierarchy programatically and compute the final limit.\r\n  PR: https://github.com/dotnet/runtime/pull/93611 [merged]\r\n* Memory soft limits\r\n  * Cgroups support soft limit for memory. When there is a memory contention, it pushes the process memory usage back to the soft limit by reclaiming memory pages that can be reclaimed. We would like to start reading the soft limit, making GC aware of that limit and try to keep physical memory usage within the limit e.g. by returning free memory to the OS more eagerly.\r\n  * Kubernetes doesn't set the soft limit in cgroups v1 in any way. The request that would be an equivalent of a soft limit can be only read using the Kubernetes API, which is a HTTP API. So, we cannot call that from the runtime. It seems that we can provide an API for external components to provide us details on the soft limit and other limit related details like dynamic limit change notifications.\r\n  _Edit:_ ~~With cgroups v2, it does set the memory.low to the request size, so we can easily extract it.~~\r\n  With cgroups v2, Kubernetes doc states it may set the memory.low to the request size, but in reality, the current Kubernetes based systems don't do that.\r\n* Virtual memory limit\r\n  * Linux allows limiting the amount of virtual address space used by a process. There are some hosting offerings that use that to limit actual physical memory usage. .NET doesn't honor that limit, especially when creating the GC heap. We want to implement honoring that limit. There is an existing PR for such a change that needs to be finalized.\r\n  PR: https://github.com/dotnet/runtime/pull/80295\r\n* CPU limits\r\n  * Cgroups v1 and v2 enable limiting CPU usage using a quota and a share. Although we already use the quota to get a \"virtual\" number of CPU cores and use it for making various runtime decisions, we don't use the share (weight) setting. This controls the minimum number of shares of CPU the cgroup should get when there is a contention. We would like to investigate if we can somehow augment runtime behavior based on this setting as well.\r\n* Memory and CPU pressure interface\r\n  * Cgroups v2 optionally provide an interface to notify on memory and CPU pressure. A process can register triggers on stalls, use poll on the related descriptor and get notified on the stalls. We would like to investigate if we can use it to make the runtime detect / respond better to memory and CPU pressure.\r\n* Memory events\r\n  * cgroups v2 has a memory.events pseudo-file for each non-root cgroup that contains counts on how many times a process in the cgroup was throttled / memory reclaimed / oom killed etc. A process can wait on file change event for this file to get notified on changes and then use the counts to detect a memory pressure. Maybe .NET runtime can somehow take advantage of that too.\r\n* Handling limits when there are multiple .NET processes in a container\r\n  * When there are multiple .NET processes running in a container, we don't currently have any way to detect that or accommodate their GC heap size to this situation. So, the process that is started first assumes that all of the free memory within the limits is available for its usage. We would like to figure out if there is a reasonable way to handle such cases. \r\n",
    "number": 93030,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-04T21:37:38Z",
          "user": "mangod9"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-05T00:39:54Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-05T09:05:17Z",
          "user": "Uladzimir-Lashkevich"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-05T11:38:28Z",
          "user": "jasper-d"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-05T19:15:03Z",
          "user": "tmds"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-06T14:43:19Z",
          "user": "omajid"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-06T23:04:42Z",
          "user": "martincostello"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-09T06:53:47Z",
          "user": "davidfowl"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-09T15:20:31Z",
          "user": "danmoseley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-10-29T04:54:01Z",
          "user": "MineCake147E"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-17T20:28:50Z",
          "user": "GerardSmit"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-10T23:08:44Z",
          "user": "eduardo-vp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-13T04:34:44Z",
          "user": "rodneycabahug"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-08T18:59:40Z",
          "user": "jmbryan4"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-25T11:24:40Z",
          "user": "jesperkristensen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-05T07:38:22Z",
          "user": "zackliu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-18T05:58:51Z",
          "user": "arichtman-srt"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-26T12:07:34Z",
          "user": "KeterSCP"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-29T15:58:08Z",
          "user": "hadrienbecle"
        }
      ],
      "totalCount": 19,
      "endCursor": "Y3Vyc29yOnYyOpHODNUNLg=="
    },
    "updatedAt": "2025-07-16T06:57:21Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n* Hierarchical limits\r\n  * Some container orchestration systems use cgroup hierarchy with  memory / CPU limits set possibly in ancestor cgroups. .NET reads only the limits for the cgroup of the current process though. So the limits imposed by the higher levels are not honored. We want to start honoring these limits. cgroups v1 allows us to simply read the hierarchical limit, but for cgroups v2, we need to walk the hierarchy programatically and compute the final limit.\r\n* Memory soft limits\r\n  * Cgroups support soft limit for memory. When there is a memory contention, it pushes the process memory usage back to the soft limit by reclaiming memory pages that can be reclaimed. We would like to start reading the soft limit, making GC aware of that limit and try to keep physical memory usage within the limit e.g. by returning free memory to the OS more eagerly\r\n  * Kubernetes doesn't set the soft limit in cgroups in any way. The request that would be an equivalent of a soft limit can be only read using the Kubernetes API, which is a HTTP API. So we cannot call that from the runtime. It seems that we can provide an API for external components to provide us details on the soft limit and other limit related details like dynamic limit change notifications.\r\n* Virtual memory limit\r\n  * Linux allows limiting the amount of virtual address space used by a process. There are some hosting offerings that use that to limit actual physical memory usage. .NET doesn't honor that limit, especially when creating the GC heap. We want to implement honoring that limit. There is an existing PR for such a change that needs to be finalized.\r\n* CPU limits\r\n  * Cgroups v1 and v2 enable limiting CPU usage using a quota and a share. Although we already use the quota to get a \"virtual\" number of CPU cores and use it for making various runtime decisions, we don't use the share (weight) setting. This controls the minimum number of shares of CPU the cgroup should get when there is a contention. We would like to investigate if we can somehow augment runtime behavior based on this setting as well.\r\n* Memory and CPU pressure interface\r\n  * Cgroups v2 optionally provide an interface to notify on memory and CPU pressure. A process can register triggers on stalls, use poll on the related descriptor and get notified on the stalls. We would like to investigate if we can use it to make the runtime detect / respond better to memory and CPU pressure.\r\n* Memory events\r\n  * cgroups v2 has a memory.events pseudo-file for each non-root cgroup that contains counts on how many times a process in the cgroup was throttled / memory reclaimed / oom killed etc. A process can wait on file change event for this file to get notified on changes and then use the counts to detect a memory pressure. Maybe .NET runtime can somehow take advantage of that too.\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>janvorli</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`enhancement`, `area-Meta`, `discussion`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-04T21:18:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-04T21:18:49Z",
          "id": "IC_kwDODI9FZc5oKyH7"
        },
        {
          "author": "omajid",
          "body": "> A process can register triggers on stalls, use poll on the related descriptor and get notified on the stalls. We would like to investigate if we can use it to make the runtime detect / respond better to memory and CPU pressure.\r\n\r\nLast I looked into this (around 3 years ago), this was restricted to root processes. However, this change made earlier this year https://github.com/torvalds/linux/commit/d82caa273565b45fcf103148950549af76c314b0 (which landed in 6.4) allows unprivileged processes to do this as well.",
          "createdAt": "2023-10-06T14:42:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-06T14:59:38Z",
                "user": "janvorli"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODI3NbQ=="
          },
          "updatedAt": "2023-10-06T14:42:51Z",
          "id": "IC_kwDODI9FZc5oWxbf"
        },
        {
          "author": "tmds",
          "body": "There was a question here about improving the behavior when multiple .NET processes run in the same container: https://github.com/dotnet/runtime/discussions/84828.\r\n\r\nIt affects in particular building .NET applications in a container, because such builds have several .NET processes running.",
          "createdAt": "2023-10-09T06:45:42Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-09T06:45:42Z",
          "id": "IC_kwDODI9FZc5oc-tl"
        },
        {
          "author": "janvorli",
          "body": "@tmds that's a good point, I'll include it in the list.",
          "createdAt": "2023-10-09T12:22:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-13T20:28:46Z",
                "user": "tmds"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODJnmNw=="
          },
          "updatedAt": "2023-10-09T12:22:21Z",
          "id": "IC_kwDODI9FZc5oe0UO"
        },
        {
          "author": "jeffhandley",
          "body": "@mangod9 - Should this move out to 10.0.0?",
          "createdAt": "2024-07-28T04:55:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-28T04:55:13Z",
          "id": "IC_kwDODI9FZc6GXo1a"
        },
        {
          "author": "mangod9",
          "body": "some of this work has been done in 9. @janvorli , @cshung : is there anything we should keep around for 10? ",
          "createdAt": "2024-07-28T05:12:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-28T05:12:01Z",
          "id": "IC_kwDODI9FZc6GXpiT"
        }
      ],
      "totalCount": 6,
      "endCursor": "Y3Vyc29yOnYyOpHOhl6Ykw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/93030",
    "title": "Make runtime more friendly to Kubernetes and container systems in general"
  },
  {
    "author": "deeprobin",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2023-10-07T16:32:37Z",
    "body": "Follow-up 2023 for #63902\r\n\r\nAs discussed in mentioned issue, I periodically review the issue comments in the current codebase.\r\nTo avoid confusion here, weshould of course remove these occurences when the related issue is resolved.\r\n\r\n@jeffhandley  Should we do this like we did last year? Just create issues for all points?\r\nWould you take a quick look over and see if something could be taken out of here?\r\n\r\n## New \r\n\r\n* [x] https://github.com/dotnet/runtime/issues/3093\r\n\r\nFile `docs/design/features/additional-deps.md` (File Position 221-266)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/docs/design/features/additional-deps.md#L3-L7\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/3678\r\n\r\nFile `src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContextWriter.cs` (File Position 641-686)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContextWriter.cs#L19-L23\r\n\r\n* [x] File `src/libraries/Microsoft.Extensions.DependencyModel/tests/DependencyContextJsonWriterTests.cs` (File Position 9033-9078)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.DependencyModel/tests/DependencyContextJsonWriterTests.cs#L189-L193\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/4207\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf8Utility.Helpers.cs` (File Position 12599-12645)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf8Utility.Helpers.cs#L244-L248\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/4731\r\n\r\nFile `src/libraries/System.Collections.Immutable/src/System/Collections/Immutable/AllocFreeConcurrentStack.cs` (File Position 2575-2621)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Collections.Immutable/src/System/Collections/Immutable/AllocFreeConcurrentStack.cs#L77-L81\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/41699\r\n  * 2022: Original issue was reopened\r\n  * Comment still exists ... \r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf16Utility.Validation.cs` (File Position 3262-3308)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf16Utility.Validation.cs#L60-L64\r\n\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/43791\r\n\r\nFile `src/tasks/WasmAppBuilder/PInvokeTableGenerator.cs` (File Position 7634-7680)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tasks/WasmAppBuilder/PInvokeTableGenerator.cs#L202-L206\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/44072\r\n\r\nFile `src/tests/tracing/eventpipe/diagnosticport/diagnosticport.cs` (File Position 9323-9369)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tests/tracing/eventpipe/diagnosticport/diagnosticport.cs#L214-L218\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/46856\r\n\r\nFile `src/libraries/System.Diagnostics.FileVersionInfo/tests/System.Diagnostics.FileVersionInfo.Tests/System.Diagnostics.FileVersionInfo.Tests.csproj` (File Position 2303-2349)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Diagnostics.FileVersionInfo/tests/System.Diagnostics.FileVersionInfo.Tests/System.Diagnostics.FileVersionInfo.Tests.csproj#L43-L47\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/50235\r\n\r\nFile `src/libraries/System.Net.WebSockets/tests/WebSocketDeflateTests.cs` (File Position 22234-22281)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.WebSockets/tests/WebSocketDeflateTests.cs#L511-L515\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/61086\r\n\r\nFile `src/libraries/Microsoft.Extensions.Options/tests/Microsoft.Extensions.Options.Tests/OptionsMonitorTest.cs` (File Position 18079-18125)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.Options/tests/Microsoft.Extensions.Options.Tests/OptionsMonitorTest.cs#L470-L474\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/65789\r\n\r\nFile `src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs` (File Position 105461-105508)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L2191-L2195\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/67742\r\n\r\nFile `src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj` (File Position 259-305)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj#L8-L12\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/71559\r\n\r\nFile `src/libraries/System.Net.Quic/src/System.Net.Quic.csproj` (File Position 3689-3735)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.Quic/src/System.Net.Quic.csproj#L41-L45\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Collections/Generic/ValueListBuilder.cs` (File Position 1220-1266)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/ValueListBuilder.cs#L46-L50\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/80619\r\n\r\nFile `src/mono/wasm/Wasm.Build.Tests/data/RunScriptTemplate.sh` (File Position 62-108)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/mono/wasm/Wasm.Build.Tests/data/RunScriptTemplate.sh#L1-L5\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/81864\r\n\r\nFile `src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs` (File Position 747-793)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs#L19-L23\r\n\r\nFile `src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlDecryptionTransform.cs` (File Position 1185-1231)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlDecryptionTransform.cs#L24-L28\r\n\r\nFile `src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlLicenseTransform.cs` (File Position 796-842)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlLicenseTransform.cs#L18-L22\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/83495\r\n\r\nFile `src/coreclr/tools/aot/AotCompilerCommon.props` (File Position 350-396)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/tools/aot/AotCompilerCommon.props#L8-L12\r\n\r\n## Handled before\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/7141\r\n  * Follow-up issue 2022: https://github.com/dotnet/runtime/issues/65230\r\n  * No changes planned\r\nFile `src/libraries/Microsoft.VisualBasic.Core/src/Microsoft/VisualBasic/CompilerServices/Operators.vb` (File Position 225458-225503)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.VisualBasic.Core/src/Microsoft/VisualBasic/CompilerServices/Operators.vb#L4592-L4596\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/11637\r\n  * From 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs` (File Position 59646-59692)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs#L1331-L1335\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/15690\r\n  * From 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.ComponentModel.Annotations/tests/System/ComponentModel/DataAnnotations/DataTypeAttributeTests.cs` (File Position 3236-3283)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ComponentModel.Annotations/tests/System/ComponentModel/DataAnnotations/DataTypeAttributeTests.cs#L72-L76\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/16236\r\n  * From 2022: Comment documents reasoning. No follow-up necessary.\r\n \r\nFile `src/mono/mono/utils/mono-threads-windows.c` (File Position 4766-4813)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/mono/mono/utils/mono-threads-windows.c#L111-L115\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/18208\r\n  * Follow-up 2022: https://github.com/dotnet/runtime/issues/65930\r\n  * No changes planned\r\n\r\nFile `src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.NonMobile.cs` (File Position 1064-1110)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.NonMobile.cs#L24-L28\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/18209\r\n  * Follow-up 2022: https://github.com/dotnet/runtime/issues/65930\r\n  * No changes planned\r\n \r\nFile `src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.cs` (File Position 13300-13346)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.cs#L375-L379\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/18844\r\n  * Follow-up 2022: https://github.com/dotnet/runtime/issues/65233\r\n  * No changed planned (netstandard)\r\n\r\nFile `src/libraries/Common/src/Extensions/ParameterDefaultValue/ParameterDefaultValue.netstandard.cs` (File Position 685-731)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Common/src/Extensions/ParameterDefaultValue/ParameterDefaultValue.netstandard.cs#L18-L22\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/19265\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.Runtime/tests/System/TupleTests.cs` (File Position 11829-11875)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Runtime/tests/System/TupleTests.cs#L218-L222\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/19275\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.ValueTuple/tests/ValueTupleTests.cs` (File Position 12672-12718)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ValueTuple/tests/ValueTupleTests.cs#L223-L227\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/19277\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs` (File Position 18743-18790)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs#L401-L405\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/20080\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/tests/JIT/SIMD/Vector3GetHash.cs` (File Position 379-425)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tests/JIT/SIMD/Vector3GetHash.cs#L5-L9\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/23247\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.ServiceProcess.ServiceController/tests/System.ServiceProcess.ServiceController.TestService/TestServiceInstaller.cs` (File Position 7332-7378)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ServiceProcess.ServiceController/tests/System.ServiceProcess.ServiceController.TestService/TestServiceInstaller.cs#L153-L157\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/24295\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.IO.FileSystem/tests/Directory/EnumerableTests.cs` (File Position 586-633)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.FileSystem/tests/Directory/EnumerableTests.cs#L14-L18\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/25369\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.Configuration.ConfigurationManager/tests/System/Configuration/SettingElementTests.cs` (File Position 1871-1917)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Configuration.ConfigurationManager/tests/System/Configuration/SettingElementTests.cs#L53-L57\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/26062\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.Net.Sockets/tests/FunctionalTests/ArgumentValidationTests.cs` (File Position 39444-39490)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.Sockets/tests/FunctionalTests/ArgumentValidationTests.cs#L916-L920\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/28615\r\n  * 2022: Comment documents reasoning. No follow-up necessary.\r\n\r\nFile `src/libraries/System.Private.Xml/tests/XmlReader/Tests/ReaderEncodingTests.cs` (File Position 351-397)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.Xml/tests/XmlReader/Tests/ReaderEncodingTests.cs#L8-L12\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/31402\r\n  * 2022: The issue was closed as won't-fix\r\n  * 2022: PR to update the comment: https://github.com/dotnet/runtime/pull/65932\r\n\r\nFile `src/libraries/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/Formatters/Binary/BinaryFormatterWriter.cs` (File Position 5050-5096)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/Formatters/Binary/BinaryFormatterWriter.cs#L118-L122\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/33303\r\n  * 2022 Follow-up: https://github.com/dotnet/runtime/issues/65933 \r\n\r\nFile `eng/codeOptimization.targets` (File Position 731-777)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/eng/codeOptimization.targets#L8-L12\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/33541\r\n  * Comment documents reasoning. No follow-up necessary.\r\n  \r\nFile `src/coreclr/jit/CMakeLists.txt` (File Position 388-434)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/jit/CMakeLists.txt#L7-L11\r\n\r\n* [x] https://github.com/dotnet/runtime/issues/43657\r\n  * Follow-Up Issue 2022:  https://github.com/dotnet/runtime/issues/65570\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs` (File Position 3243-3289)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs#L45-L49\r\n",
    "number": 93172,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-28T04:47:04Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "deeprobin",
          "body": "/area:Meta\r\n",
          "createdAt": "2023-10-07T16:39:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-07T16:39:18Z",
          "id": "IC_kwDODI9FZc5oadL9"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nFollow-up 2023 for #63902\r\n\r\nAs discussed in mentioned issue, I periodically review the issue comments in the current codebase.\r\nTo avoid confusion here, weshould of course remove these occurences when the related issue is resolved.\r\n\r\n@jeffhandley  Should we do this like we did last year? Just create issues for all points?\r\nWould you take a quick look over and see if something could be taken out of here?\r\n\r\n## Closedi ssues results\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/3093\r\n\r\nFile `docs/design/features/additional-deps.md` (File Position 221-266)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/docs/design/features/additional-deps.md#L3-L7\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/3678\r\n\r\nFile `src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContextWriter.cs` (File Position 641-686)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContextWriter.cs#L19-L23\r\n\r\nFile `src/libraries/Microsoft.Extensions.DependencyModel/tests/DependencyContextJsonWriterTests.cs` (File Position 9033-9078)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.DependencyModel/tests/DependencyContextJsonWriterTests.cs#L189-L193\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/4207\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf8Utility.Helpers.cs` (File Position 12599-12645)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf8Utility.Helpers.cs#L244-L248\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/4731\r\n\r\nFile `src/libraries/System.Collections.Immutable/src/System/Collections/Immutable/AllocFreeConcurrentStack.cs` (File Position 2575-2621)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Collections.Immutable/src/System/Collections/Immutable/AllocFreeConcurrentStack.cs#L77-L81\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/7141\r\n\r\nFile `src/libraries/Microsoft.VisualBasic.Core/src/Microsoft/VisualBasic/CompilerServices/Operators.vb` (File Position 225458-225503)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.VisualBasic.Core/src/Microsoft/VisualBasic/CompilerServices/Operators.vb#L4592-L4596\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/11637\r\n\r\nFile `src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs` (File Position 59646-59692)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs#L1331-L1335\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/15690\r\n\r\nFile `src/libraries/System.ComponentModel.Annotations/tests/System/ComponentModel/DataAnnotations/DataTypeAttributeTests.cs` (File Position 3236-3283)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ComponentModel.Annotations/tests/System/ComponentModel/DataAnnotations/DataTypeAttributeTests.cs#L72-L76\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/16236\r\n\r\nFile `src/mono/mono/utils/mono-threads-windows.c` (File Position 4766-4813)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/mono/mono/utils/mono-threads-windows.c#L111-L115\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/18208\r\n\r\nFile `src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.NonMobile.cs` (File Position 1064-1110)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.NonMobile.cs#L24-L28\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/18209\r\n\r\nFile `src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.cs` (File Position 13300-13346)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFile.cs#L375-L379\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/18844\r\n\r\nFile `src/libraries/Common/src/Extensions/ParameterDefaultValue/ParameterDefaultValue.netstandard.cs` (File Position 685-731)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Common/src/Extensions/ParameterDefaultValue/ParameterDefaultValue.netstandard.cs#L18-L22\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/19265\r\n\r\nFile `src/libraries/System.Runtime/tests/System/TupleTests.cs` (File Position 11829-11875)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Runtime/tests/System/TupleTests.cs#L218-L222\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/19275\r\n\r\nFile `src/libraries/System.ValueTuple/tests/ValueTupleTests.cs` (File Position 12672-12718)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ValueTuple/tests/ValueTupleTests.cs#L223-L227\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/19277\r\n\r\nFile `src/libraries/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs` (File Position 18743-18790)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs#L401-L405\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/20080\r\n\r\nFile `src/tests/JIT/SIMD/Vector3GetHash.cs` (File Position 379-425)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tests/JIT/SIMD/Vector3GetHash.cs#L5-L9\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/23247\r\n\r\nFile `src/libraries/System.ServiceProcess.ServiceController/tests/System.ServiceProcess.ServiceController.TestService/TestServiceInstaller.cs` (File Position 7332-7378)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.ServiceProcess.ServiceController/tests/System.ServiceProcess.ServiceController.TestService/TestServiceInstaller.cs#L153-L157\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/24295\r\n\r\nFile `src/libraries/System.IO.FileSystem/tests/Directory/EnumerableTests.cs` (File Position 586-633)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.IO.FileSystem/tests/Directory/EnumerableTests.cs#L14-L18\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/25369\r\n\r\nFile `src/libraries/System.Configuration.ConfigurationManager/tests/System/Configuration/SettingElementTests.cs` (File Position 1871-1917)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Configuration.ConfigurationManager/tests/System/Configuration/SettingElementTests.cs#L53-L57\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/26062\r\n\r\nFile `src/libraries/System.Net.Sockets/tests/FunctionalTests/ArgumentValidationTests.cs` (File Position 39444-39490)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.Sockets/tests/FunctionalTests/ArgumentValidationTests.cs#L916-L920\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/28615\r\n\r\nFile `src/libraries/System.Private.Xml/tests/XmlReader/Tests/ReaderEncodingTests.cs` (File Position 351-397)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.Xml/tests/XmlReader/Tests/ReaderEncodingTests.cs#L8-L12\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/31402\r\n\r\nFile `src/libraries/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/Formatters/Binary/BinaryFormatterWriter.cs` (File Position 5050-5096)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/Formatters/Binary/BinaryFormatterWriter.cs#L118-L122\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/33303\r\n\r\nFile `eng/codeOptimization.targets` (File Position 731-777)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/eng/codeOptimization.targets#L8-L12\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/33541\r\n\r\nFile `src/coreclr/jit/CMakeLists.txt` (File Position 388-434)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/jit/CMakeLists.txt#L7-L11\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/41699\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf16Utility.Validation.cs` (File Position 3262-3308)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Text/Unicode/Utf16Utility.Validation.cs#L60-L64\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/43657\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs` (File Position 3243-3289)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs#L45-L49\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/43791\r\n\r\nFile `src/tasks/WasmAppBuilder/PInvokeTableGenerator.cs` (File Position 7634-7680)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tasks/WasmAppBuilder/PInvokeTableGenerator.cs#L202-L206\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/44072\r\n\r\nFile `src/tests/tracing/eventpipe/diagnosticport/diagnosticport.cs` (File Position 9323-9369)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/tests/tracing/eventpipe/diagnosticport/diagnosticport.cs#L214-L218\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/46856\r\n\r\nFile `src/libraries/System.Diagnostics.FileVersionInfo/tests/System.Diagnostics.FileVersionInfo.Tests/System.Diagnostics.FileVersionInfo.Tests.csproj` (File Position 2303-2349)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Diagnostics.FileVersionInfo/tests/System.Diagnostics.FileVersionInfo.Tests/System.Diagnostics.FileVersionInfo.Tests.csproj#L43-L47\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/50235\r\n\r\nFile `src/libraries/System.Net.WebSockets/tests/WebSocketDeflateTests.cs` (File Position 22234-22281)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.WebSockets/tests/WebSocketDeflateTests.cs#L511-L515\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/61086\r\n\r\nFile `src/libraries/Microsoft.Extensions.Options/tests/Microsoft.Extensions.Options.Tests/OptionsMonitorTest.cs` (File Position 18079-18125)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.Options/tests/Microsoft.Extensions.Options.Tests/OptionsMonitorTest.cs#L470-L474\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/65789\r\n\r\nFile `src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs` (File Position 105461-105508)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L2191-L2195\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/67742\r\n\r\nFile `src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj` (File Position 259-305)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/tools/aot/ILCompiler/ILCompiler.csproj#L8-L12\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/71559\r\n\r\nFile `src/libraries/System.Net.Quic/src/System.Net.Quic.csproj` (File Position 3689-3735)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Net.Quic/src/System.Net.Quic.csproj#L41-L45\r\n\r\nFile `src/libraries/System.Private.CoreLib/src/System/Collections/Generic/ValueListBuilder.cs` (File Position 1220-1266)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/ValueListBuilder.cs#L46-L50\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/80619\r\n\r\nFile `src/mono/wasm/Wasm.Build.Tests/data/RunScriptTemplate.sh` (File Position 62-108)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/mono/wasm/Wasm.Build.Tests/data/RunScriptTemplate.sh#L1-L5\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/81864\r\n\r\nFile `src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs` (File Position 747-793)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs#L19-L23\r\n\r\nFile `src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlDecryptionTransform.cs` (File Position 1185-1231)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlDecryptionTransform.cs#L24-L28\r\n\r\nFile `src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlLicenseTransform.cs` (File Position 796-842)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/XmlLicenseTransform.cs#L18-L22\r\n\r\n* [ ] https://github.com/dotnet/runtime/issues/83495\r\n\r\nFile `src/coreclr/tools/aot/AotCompilerCommon.props` (File Position 350-396)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f21a2666c577306e437f80fe934d76cdb15072a5/src/coreclr/tools/aot/AotCompilerCommon.props#L8-L12\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>deeprobin</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-07T16:46:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-07T16:46:02Z",
          "id": "IC_kwDODI9FZc5oadhK"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOaGnYSg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/93172",
    "title": "Follow-Up: Issue-URL Cleanup"
  },
  {
    "author": "danmoseley",
    "labels": [
      "area-Meta",
      "test-enhancement",
      "help wanted",
      "discussion"
    ],
    "createdAt": "2023-10-10T04:34:32Z",
    "body": "Our unit tests in each test assembly are divided across various classes, usually (but certainly not always) chosen to group related tests together rather than for any regard for parallelism.\r\n\r\nXunit's default is that each class is its own test collection (we generally do not change this) and default parallelism is between test collections, but not within them (we do limit this in some cases [example](https://github.com/dotnet/runtime/blob/e555a0e16635c6ff2d88366f19d0781ac1fef0ee/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/XUnitAssemblyAttributes.cs#L7))\r\n\r\nIn some (many?) cases tests within a class would be happy to run in parallel with each other. Note that classes deriving from FileCleanupTestBase ought not to be unsafe for that reason alone, if it is careful to put each test in their own folder\r\nhttps://github.com/dotnet/runtime/blob/e555a0e16635c6ff2d88366f19d0781ac1fef0ee/src/libraries/Common/tests/TestUtilities/System/IO/FileCleanupTestBase.cs#L37\r\n\r\nSuggestion: determine whether there are large categories of tests in some test assembly or other that we can identify could safely run concurrently with others in the same class, and experiment with enabling that to see whether it materially speeds up tests.\r\n\r\nWays to enable that\r\n1. obviously, breaking into their own classes.\r\n2. an extension point eg https://www.meziantou.net/parallelize-test-cases-execution-in-xunit.htm ",
    "number": 93273,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-28T04:52:42Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nOur unit tests in each test assembly are divided across various classes, usually (but certainly not always) chosen to group related tests together rather than for any regard for parallelism.\r\n\r\nXunit's default is that each class is its own test collection (we generally do not change this) and default parallelism is between test collections, but not within them (we do limit this in some cases [example](https://github.com/dotnet/runtime/blob/e555a0e16635c6ff2d88366f19d0781ac1fef0ee/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/XUnitAssemblyAttributes.cs#L7))\r\n\r\nIn some (many?) cases tests within a class would be happy to run in parallel with each other. Note that classes deriving from FileCleanupTestBase ought not to be unsafe for that reason alone, if it is careful to put each test in their own folder\r\nhttps://github.com/dotnet/runtime/blob/e555a0e16635c6ff2d88366f19d0781ac1fef0ee/src/libraries/Common/tests/TestUtilities/System/IO/FileCleanupTestBase.cs#L37\r\n\r\nSuggestion: determine whether there are large categories of tests in some test assembly or other that we can identify could safely run concurrently with others in the same class, and experiment with enabling that to see whether it materially speeds up tests.\r\n\r\nWays to enable that\r\n1. obviously, breaking into their own classes.\r\n2. an extension point eg https://www.meziantou.net/parallelize-test-cases-execution-in-xunit.htm \n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>danmoseley</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-10T04:34:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-10T04:34:49Z",
          "id": "IC_kwDODI9FZc5okVFk"
        },
        {
          "author": "danmoseley",
          "body": "I have no particular evidence there are interesting gains to be had here, just logging in case someone in the community is potentially interested in looking at this kind of thing, or opportunities for speeding up our unit tests.",
          "createdAt": "2023-10-10T05:13:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-10T05:13:33Z",
          "id": "IC_kwDODI9FZc5okgCs"
        },
        {
          "author": "ericstj",
          "body": "Might be worthwhile to take a look at which tests take the longest to run and might benefit from such parallelization.\r\n\r\n@danmoseley did you happen to notice any case where we had a particularly long running test project and that was due to a test class with a ton of tests?  cc @dotnet/area-system-io @dotnet/area-system-text-json ",
          "createdAt": "2023-10-10T17:33:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-10T17:33:05Z",
          "id": "IC_kwDODI9FZc5oqUNV"
        },
        {
          "author": "stephentoub",
          "body": ">> I have no particular evidence there are interesting gains to be had here, just logging in case someone in the community is potentially interested in looking at this kind of thing, or opportunities for speeding up our unit tests.\r\n\r\n> Might be worthwhile to take a look at which tests take the longest to run and might benefit from such parallelization.\r\n\r\nYes, I'm not interested in fielding PRs that just move stuff around and change the structure from what the dev originally created just because.\r\n\r\nIf there's a particular suite taking \"too long\", we decide it's worthwhile improving, and splitting it up is found to be the right solution, then great; that's about finding/noticing and fixing a real problem. Such cases are frequently better solved in other ways, though. For example, we've had cases in the past where reliance on theories yielded hundreds of thousands of test cases, each of which with overhead, and the fix was to move some of the theories to just be loops in a single case. Or cases with source generation where the fix was to batch what we sent to Roslyn.\r\n\r\nStarting from a possible solution and looking for problems to which we can apply it is a bit backwards.",
          "createdAt": "2023-10-11T10:54:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T10:55:00Z",
          "id": "IC_kwDODI9FZc5ov-U1"
        },
        {
          "author": "adamsitnik",
          "body": "I would be happy to spend literally few hours to implement https://github.com/xunit/xunit/issues/2484 to get proper tooling support for diagnosing such isssues",
          "createdAt": "2023-10-16T07:40:21Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-16T07:40:21Z",
          "id": "IC_kwDODI9FZc5pIwYS"
        },
        {
          "author": "danmoseley",
          "body": "> Starting from a possible solution and looking for problems to which we can apply it is a bit backwards.\n\nThe problem is that I have to wait while unit tests run; I don't see this as looking for a problem. Certainly it may not be a useful way to improve that. It sounds like Adam might have a cheap way to see whether it is.",
          "createdAt": "2023-10-19T00:44:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-19T00:44:53Z",
          "id": "IC_kwDODI9FZc5pe7hS"
        },
        {
          "author": "stephentoub",
          "body": "xunit already logs data about test execution.  I've used this to analyze it in the past:\r\n```C#\r\nusing System.Linq;\r\nusing System.Xml;\r\n\r\nstring testResultsPath = @\"D:\\repos\\runtime\\artifacts\\bin\\System.Text.RegularExpressions.Tests\\Debug\\net9.0\\testResults.xml\";\r\nstring testTypeFilter = \"\"; // to filter down to a specific test class\r\nbool groupResultsByMethod = false; // if false, groups by test class; if true, by method... true is helpful when looking at theories\r\nbool printGroupedTests = false; // to print out the individual tests in each group\r\n\r\nvar doc = new XmlDocument();\r\ndoc.Load(testResultsPath);\r\n\r\nvar results = doc\r\n    .SelectNodes(\"/assemblies/assembly/collection/test\").Cast<XmlNode>()\r\n    .Where(node => node.Attributes[\"type\"].Value.Contains(testTypeFilter))\r\n    .Select(node => new { TestName = node.Attributes[\"name\"].Value, ContainingType = node.Attributes[\"type\"].Value, TestTime = double.Parse(node.Attributes[\"time\"].Value) })\r\n    .GroupBy(a => groupResultsByMethod ? WithoutArgs(a.TestName) : a.ContainingType)\r\n    .Select(g => new { TestType = g.Key, TotalTests = g.Count(), TotalTime = g.Sum(v => v.TestTime), Group = g })\r\n    .OrderByDescending(v => v.TotalTime);\r\n\r\nforeach (var g in results)\r\n{\r\n    Console.WriteLine($\"{g.TestType} ({g.TotalTests}): {g.TotalTime}\");\r\n    if (printGroupedTests)\r\n    {\r\n        foreach (var test in g.Group.OrderByDescending(t => t.TestTime))\r\n            Console.WriteLine($\"\\t{test.TestName}: {test.TestTime}\");\r\n    }\r\n}\r\n\r\nstatic string WithoutArgs(string name)\r\n{\r\n    int i = name.IndexOf('(');\r\n    return i == -1 ? name : name.Substring(0, i);\r\n}\r\n```",
          "createdAt": "2023-10-19T01:18:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-19T01:18:30Z",
          "id": "IC_kwDODI9FZc5pfBIO"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOaXwSDg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/93273",
    "title": "experiment with running tests in parallel within some collections"
  },
  {
    "author": "JayToltTech",
    "labels": [
      "question",
      "area-Meta",
      "help wanted",
      "os-ios"
    ],
    "createdAt": "2023-10-11T20:08:06Z",
    "body": "### Description\n\nConsidering using Avalonia for my iOS development.  Technically, I like what I see and I can see a way through to my completed app.  However I'm now wondering if it's feasible to get such an app approved by Apple and in the App Store itself...\r\n\r\nFirst up is the question of using a dylib.  I've been looking to do some advanced AVFoundation stuff and the path I'm looking at is to create an Objective-C dylib that consumes AVFoundation and then exposes a PInvoke-friendly API to my dotnet/Avalonia app.  Early technical feasibility prototype looks good, but as I researched I ran into [\"is it allowed to use dylibs in iOS ?\"](https://developer.apple.com/forums/thread/709854).  The answer on the thread from the Apple employee is; \"You need to build a framework from the source code, starting from the Framework template in Xcode. [Technote 2435](https://developer.apple.com/library/archive/technotes/tn2435/_index.html#//apple_ref/doc/uid/DTS40017543) has the info you need.\"  Ugh.\r\n\r\nSecond, I need to consume a 3rd party iOS Framework that exposes some private APIs for some specialty hardware.  So far I haven't found any references online to consuming an iOS Framework from DotNet, only PInvoke to Objective-C dylibs per above.  Investigations into \"can I consume an iOS Framework from a dylib\" aren't bearing any fruit either...\r\n\r\nLastly, there's a detailed article on the hoops necessary to [make an app bundle for MacOS](https://docs.avaloniaui.net/docs/distribution-publishing/macos), but I don't see equivalent documentation for iOS.  Similar steps will be needed I assume?  Has anyone broken this ground yet to get a signed package that can be uploaded to Apple for App Store submission and review?\n\n### Reproduction Steps\n\nDream of a day when Swift and Objective-C die a well deserved death and dotnet/c# take their rightful throne on the realm of app development.\n\n### Expected behavior\n\nApple submits to the inevitable destiny of C#'s ascendance and stops designing puke-worthy languages because \"Think Different\".\n\n### Actual behavior\n\n\"Think Different\" means \"do it the Apple way, or Take The Highway\".\n\n### Regression?\n\nClosed platforms that have to deal with arbitrary exclusions like \"dylibs aren't accepted, just because we say so\" is definitely a step backwards.\n\n### Known Workarounds\n\nConvince the rest of the world to stop buying closed ecosystem based products.\r\n\r\nWork in progress.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
    "number": 93366,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "LAUGH",
          "createdAt": "2023-10-11T20:18:04Z",
          "user": "xparadoxical"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-11T20:18:09Z",
          "user": "xparadoxical"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-11T20:19:16Z",
          "user": "akiraveliara"
        },
        {
          "content": "LAUGH",
          "createdAt": "2023-10-11T23:52:12Z",
          "user": "SmartmanApps"
        },
        {
          "content": "LAUGH",
          "createdAt": "2023-10-12T16:51:04Z",
          "user": "matouskozak"
        },
        {
          "content": "HEART",
          "createdAt": "2023-10-13T13:44:29Z",
          "user": "jandupej"
        },
        {
          "content": "LAUGH",
          "createdAt": "2023-10-28T19:32:26Z",
          "user": "OnlyMihir"
        },
        {
          "content": "HEART",
          "createdAt": "2024-03-03T03:13:38Z",
          "user": "huzaifacontour"
        },
        {
          "content": "HEART",
          "createdAt": "2024-05-10T23:19:33Z",
          "user": "kz-gonzalo-curbelo"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHOC30vNQ=="
    },
    "updatedAt": "2024-07-02T12:01:02Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\n\nConsidering using Avalonia for my iOS development.  Technically, I like what I see and I can see a way through to my completed app.  However I'm now wondering if it's feasible to get such an app approved by Apple and in the App Store itself...\r\n\r\nFirst up is the question of using a dylib.  I've been looking to do some advanced AVFoundation stuff and the path I'm looking at is to create an Objective-C dylib that consumes AVFoundation and then exposes a PInvoke-friendly API to my dotnet/Avalonia app.  Early technical feasibility prototype looks good, but as I researched I ran into [\"is it allowed to use dylibs in iOS ?\"](https://developer.apple.com/forums/thread/709854).  The answer on the thread from the Apple employee is; \"You need to build a framework from the source code, starting from the Framework template in Xcode. [Technote 2435](https://developer.apple.com/library/archive/technotes/tn2435/_index.html#//apple_ref/doc/uid/DTS40017543) has the info you need.\"  Ugh.\r\n\r\nSecond, I need to consume a 3rd party iOS Framework that exposes some private APIs for some specialty hardware.  So far I haven't found any references online to consuming an iOS Framework from DotNet, only PInvoke to Objective-C dylibs per above.  Investigations into \"can I consume an iOS Framework from a dylib\" aren't bearing any fruit either...\r\n\r\nLastly, there's a detailed article on the hoops necessary to [make an app bundle for MacOS](https://docs.avaloniaui.net/docs/distribution-publishing/macos), but I don't see equivalent documentation for iOS.  Similar steps will be needed I assume?  Has anyone broken this ground yet to get a signed package that can be uploaded to Apple for App Store submission and review?\n\n### Reproduction Steps\n\nDream of a day when Swift and Objective-C die a well deserved death and dotnet/c# take their rightful throne on the realm of app development.\n\n### Expected behavior\n\nApple submits to the inevitable destiny of C#'s ascendance and stops designing puke-worthy languages because \"Think Different\".\n\n### Actual behavior\n\n\"Think Different\" means \"do it the Apple way, or Take The Highway\".\n\n### Regression?\n\nClosed platforms that have to deal with arbitrary exclusions like \"dylibs aren't accepted, just because we say so\" is definitely a step backwards.\n\n### Known Workarounds\n\nConvince the rest of the world to stop buying closed ecosystem based products.\r\n\r\nWork in progress.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>JayToltTech</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-11T20:08:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T20:08:17Z",
          "id": "IC_kwDODI9FZc5oz-lG"
        },
        {
          "author": "EgorBo",
          "body": "Shouldn't it be simple to wrap any dylib into a framework?",
          "createdAt": "2023-10-11T20:18:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-10-11T20:18:34Z",
                "user": "jkoritzinsky"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODJXNHg=="
          },
          "updatedAt": "2023-10-11T20:18:25Z",
          "id": "IC_kwDODI9FZc5o0CNf"
        },
        {
          "author": "JayToltTech",
          "body": "@EgorBo Pasting the conversation with Apple about that idea (see [\"is it allowed to use dylibs in iOS ?\"](https://developer.apple.com/forums/thread/709854)):\r\n\r\n> Hi,\r\n My question is not how to use a dylib but I am wondering whether if they are allowed to use in an app released in AppStore or not.\r\nMy company develops c/c++ cross platform libraries to be used in different environments and now we are trying to use dylibs in iOS, so far we can embed them and call the functions from the libraries successfully, how ever when we submit the app including the dylib to the AppStore, the Apptore validation fails because of the dylib,\r\nWe tried below ways,\r\nwrapping dylib into framework (dylib is inside the Frameworks folder of framework)\r\n(Result: Framework contains disallowed file 'Frameworks')\r\nwrapping dylib into framework (dylib is in root folder of framework)\r\n(Result: your app can't contain standalone executables or libs other than a valid CFBundleExecutable)\r\nconverting dylib into a fake framework\r\n(Result: invalid bundle, framework doesn't support the minimum OS version specified in the info.plist file.)\r\nSo, if the dylibs are allowed to use in iOS, we need a documentation about where to put them correctly that will make our app pass the AppStore validation, thanks\r\n\r\nApple Reply:\r\n\r\n> You need to build a framework from the source code, starting from the Framework template in Xcode. [Technote 2435](https://developer.apple.com/library/archive/technotes/tn2435/_index.html#//apple_ref/doc/uid/DTS40017543) has the info you need.",
          "createdAt": "2023-10-11T20:22:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T20:22:20Z",
          "id": "IC_kwDODI9FZc5o0DrR"
        },
        {
          "author": "JayToltTech",
          "body": "Also, @EgorBo do you know of a pointer to documentation on how to consume a framework from a dotnet 7.0/8.0 app?  I haven't found a good pointer to this as of yet.",
          "createdAt": "2023-10-11T20:25:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T20:25:35Z",
          "id": "IC_kwDODI9FZc5o0Ezu"
        },
        {
          "author": "EgorBo",
          "body": "I just remember that I hit a similar issue with App Store nd essentially, the framework is just a folder with your dylib and a plist, that's it (probably, with different rules for the name used in DllImport.)",
          "createdAt": "2023-10-11T20:25:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T20:25:51Z",
          "id": "IC_kwDODI9FZc5o0E5T"
        },
        {
          "author": "EgorBo",
          "body": "Perhaps @akoeplinger can give the exact pointers",
          "createdAt": "2023-10-11T20:28:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T20:28:08Z",
          "id": "IC_kwDODI9FZc5o0FkX"
        },
        {
          "author": "JayToltTech",
          "body": "It seems they have an app review rule against including a dylib, according to the conversation above:\r\n\r\n\"your app can't contain standalone executables or libs other than a valid CFBundleExecutable\"\r\n\r\nIs there a way to link a static lib into the app and then PInvoke against its functions? ",
          "createdAt": "2023-10-11T20:29:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T22:04:04Z",
          "id": "IC_kwDODI9FZc5o0F1A"
        },
        {
          "author": "JayToltTech",
          "body": "> I just remember that I hit a similar issue with App Store nd essentially, the framework is just a folder with your dylib and a plist, that's it (probably, with different rules for the name used in DllImport.)\r\n\r\nLooks like this is good guidance.  Giving this a shot.\r\n\r\nhttps://news.ycombinator.com/item?id=13888038\r\nhttps://developer.apple.com/library/archive/technotes/tn2435/_index.html",
          "createdAt": "2023-10-11T22:48:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T22:48:23Z",
          "id": "IC_kwDODI9FZc5o0uMZ"
        },
        {
          "author": "SmartmanApps",
          "body": "@JayToltTech \r\nJust wanted to say I love the sense of humour - do you mind if I share a screenshot on Mastodon? 😂",
          "createdAt": "2023-10-11T23:55:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-11T23:55:02Z",
          "id": "IC_kwDODI9FZc5o08ZR"
        },
        {
          "author": "JayToltTech",
          "body": "Be my guest.\r\n\r\nOn Wed, Oct 11, 2023 at 4:55 PM SmartmanApps ***@***.***>\r\nwrote:\r\n\r\n> @JayToltTech <https://github.com/JayToltTech>\r\n> Just wanted to say I love the sense of humour - do you mind if I share a\r\n> screenshot on Mastodon? 😂\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/dotnet/runtime/issues/93366#issuecomment-1758709329>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AQPEJMXWYOT2HT5G7GFH3ZLX64WWDANCNFSM6AAAAAA54RGO54>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2023-10-12T00:04:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2023-10-12T00:07:00Z",
                "user": "SmartmanApps"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODJYPKA=="
          },
          "updatedAt": "2023-10-12T00:04:13Z",
          "id": "IC_kwDODI9FZc5o0-Bw"
        },
        {
          "author": "SmartmanApps",
          "body": "Thanks! [dotnet.social/@SmartmanApps/111219163456518144](https://dotnet.social/@SmartmanApps/111219163456518144)",
          "createdAt": "2023-10-12T00:16:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-12T00:16:57Z",
          "id": "IC_kwDODI9FZc5o1AO2"
        },
        {
          "author": null,
          "body": "Tagging subscribers to 'os-ios': @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\n\nConsidering using Avalonia for my iOS development.  Technically, I like what I see and I can see a way through to my completed app.  However I'm now wondering if it's feasible to get such an app approved by Apple and in the App Store itself...\r\n\r\nFirst up is the question of using a dylib.  I've been looking to do some advanced AVFoundation stuff and the path I'm looking at is to create an Objective-C dylib that consumes AVFoundation and then exposes a PInvoke-friendly API to my dotnet/Avalonia app.  Early technical feasibility prototype looks good, but as I researched I ran into [\"is it allowed to use dylibs in iOS ?\"](https://developer.apple.com/forums/thread/709854).  The answer on the thread from the Apple employee is; \"You need to build a framework from the source code, starting from the Framework template in Xcode. [Technote 2435](https://developer.apple.com/library/archive/technotes/tn2435/_index.html#//apple_ref/doc/uid/DTS40017543) has the info you need.\"  Ugh.\r\n\r\nSecond, I need to consume a 3rd party iOS Framework that exposes some private APIs for some specialty hardware.  So far I haven't found any references online to consuming an iOS Framework from DotNet, only PInvoke to Objective-C dylibs per above.  Investigations into \"can I consume an iOS Framework from a dylib\" aren't bearing any fruit either...\r\n\r\nLastly, there's a detailed article on the hoops necessary to [make an app bundle for MacOS](https://docs.avaloniaui.net/docs/distribution-publishing/macos), but I don't see equivalent documentation for iOS.  Similar steps will be needed I assume?  Has anyone broken this ground yet to get a signed package that can be uploaded to Apple for App Store submission and review?\n\n### Reproduction Steps\n\nDream of a day when Swift and Objective-C die a well deserved death and dotnet/c# take their rightful throne on the realm of app development.\n\n### Expected behavior\n\nApple submits to the inevitable destiny of C#'s ascendance and stops designing puke-worthy languages because \"Think Different\".\n\n### Actual behavior\n\n\"Think Different\" means \"do it the Apple way, or Take The Highway\".\n\n### Regression?\n\nClosed platforms that have to deal with arbitrary exclusions like \"dylibs aren't accepted, just because we say so\" is definitely a step backwards.\n\n### Known Workarounds\n\nConvince the rest of the world to stop buying closed ecosystem based products.\r\n\r\nWork in progress.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>JayToltTech</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`question`, `area-Meta`, `help wanted`, `untriaged`, `os-ios`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-10-12T15:10:02Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-10-12T15:10:02Z",
          "id": "IC_kwDODI9FZc5o5G3o"
        },
        {
          "author": "akoeplinger",
          "body": "Sorry, I missed the ping here. You should be able to create a framework that is acceptable to the AppStore like this: https://stackoverflow.com/questions/48701584/how-to-properly-embed-3rd-party-dylib-files-in-ios-app-project-for-app-store-re/62962641#62962641",
          "createdAt": "2023-12-11T14:17:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-11T14:17:01Z",
          "id": "IC_kwDODI9FZc5uR1t1"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHObkdbdQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/93366",
    "title": "Is it possible to get an Avalonia app published into the Apple iOS App Store?"
  },
  {
    "author": "adamsitnik",
    "labels": [
      "area-Meta",
      "tenet-performance"
    ],
    "createdAt": "2023-11-03T07:48:45Z",
    "body": "While reviewing some of the stale PRs I’ve noticed that we are frequently discussing the tradeoff between improving CPU time at the cost of increased code size. Example: https://github.com/dotnet/runtime/pull/90459#discussion_r1292257807\r\n\r\nWe have the tools to measure the former, but I am not sure about the latter.\r\n\r\nI believe that we should at least provide a clear definition of what we mean by the code size (size of the managed assembly? size of precompiled native code? both?). If possible, BenchmarkDotNet should also include the metrics we care about, by default when benchmarking local dotnet runtime builds. Of course, this should be documented as well.\r\n\r\nIdeally, we would also describe our decision process behind making or rejecting such tradeoffs, with some examples.\r\n\r\n@jkotas @stephentoub thoughts?\r\n",
    "number": 94334,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-24T21:15:27Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nWhile reviewing some of the stale PRs I’ve noticed that we are frequently discussing the tradeoff between improving CPU time at the cost of increased code size. Example: https://github.com/dotnet/runtime/pull/90459#discussion_r1292257807\r\n\r\nWe have the tools to measure the former, but I am not sure about the latter.\r\n\r\nI believe that we should at least provide a clear definition of what we mean by the code size (size of the managed assembly? size of precompiled native code? both?). If possible, BenchmarkDotNet should also include the metrics we care about, by default when benchmarking local dotnet runtime builds.\r\n\r\nIdeally, we would also describe our decision process behind making or rejecting such tradeoffs, with some examples.\r\n\r\n@jkotas @stephentoub thoughts?\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>adamsitnik</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `tenet-performance`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-11-03T07:48:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-03T07:48:49Z",
          "id": "IC_kwDODI9FZc5qz8Pi"
        },
        {
          "author": "stephentoub",
          "body": "> I believe that we should at least provide a clear definition of what we mean by the code size\r\n\r\nNative assembly code plus all the runtime data structures required to keep track of everything. IL is generally less interesting.",
          "createdAt": "2023-11-03T12:13:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-03T12:13:27Z",
          "id": "IC_kwDODI9FZc5q1M9z"
        },
        {
          "author": "adamsitnik",
          "body": "> all the runtime data structures required to keep track of everything\r\n\r\nCould you provide some exact names? It would be easier for me to search for it in the ClrMD APIs.\r\n\r\n\r\n\r\n",
          "createdAt": "2023-11-03T14:29:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-03T14:29:19Z",
          "id": "IC_kwDODI9FZc5q1_Je"
        },
        {
          "author": "jkotas",
          "body": "We have macro benchmarks to measure the published binary sizes and startup time for different application types that will detect this type of regressions. https://github.com/dotnet/runtime/issues/93072 is an example of a regression detected by these benchmarks.\r\n\r\n> ClrMD APIs.\r\n\r\nClrMD API does not have APIs for this. It is hard to account for all contributing costs reliably.\r\n\r\nFor micro benchmarking purposes, I typically create a test that has thousand instances of the construct over different types and then measure the working set or startup time for one instance vs. thousand instances. Here is an example of such test from years ago: https://gist.github.com/jkotas/102dc708cca8d2c85002cb47bdd49870 ",
          "createdAt": "2023-11-03T14:37:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2023-11-03T15:33:31Z",
                "user": "MichalPetryka"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODLww7A=="
          },
          "updatedAt": "2023-11-03T14:37:15Z",
          "id": "IC_kwDODI9FZc5q2Cng"
        },
        {
          "author": "ericstj",
          "body": "There are also linker tests that track code size for common application types.  @eerhardt \r\n",
          "createdAt": "2024-07-24T18:05:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-24T18:05:50Z",
          "id": "IC_kwDODI9FZc6GBzC1"
        },
        {
          "author": "eerhardt",
          "body": "We have a set of ASP.NET benchmark apps where we track the native AOT size. Links to the app code:\r\n\r\n* https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/BasicMinimalApi\r\n* https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/TodosApi\r\n* https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/Grpc/BasicGrpc\r\n\r\nThese are run a couple times a day on the latest bits and any size changes larger than 2% get automatic issues logged. For example:\r\n\r\n[Published size regression: todosapipublishaot, todosapipublishaot, todosapipublishaot (dotnet/aspnetcore#56139)](https://github.com/dotnet/aspnetcore/issues/56139)\r\n\r\nWe also have a \"dotnet new console\" template benchmark that is run in the perf lab and it measures the size of the default \"Hello World\" app. I'm not sure where that code is and can't find the link to the results right now. cc @LoopedBard3 @MichalStrehovsky ",
          "createdAt": "2024-07-24T21:05:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-24T21:05:17Z",
          "id": "IC_kwDODI9FZc6GC3Er"
        },
        {
          "author": "MichalStrehovsky",
          "body": "> We also have a \"dotnet new console\" template benchmark that is run in the perf lab and it measures the size of the default \"Hello World\" app. I'm not sure where that code is and can't find the link to the results right now. cc @LoopedBard3 @MichalStrehovsky\r\n\r\nI think it's this one: https://github.com/dotnet/performance/tree/main/src/scenarios/emptyconsolenativeaot\r\nSome dashboard is at: https://dataexplorer.azure.com/dashboards/c9dc2cc3-d492-4137-ab16-93db390da316?p-_startTime=30days&p-_endTime=now&p-_queue=v-Ubuntu.2204.Amd64.Tiger.Perf#c8e6c269-7ed1-457f-9225-97e9611e4a8a",
          "createdAt": "2024-07-24T21:15:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-24T21:15:27Z",
          "id": "IC_kwDODI9FZc6GC6xK"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOhgusSg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/94334",
    "title": "CPU time vs code size tradeoffs"
  },
  {
    "author": "lambdageek",
    "labels": [
      "design-discussion",
      "arch-wasm",
      "area-Meta",
      "tracking",
      "os-wasi",
      "os-browser"
    ],
    "createdAt": "2023-11-03T17:15:31Z",
    "body": "## Summary\r\n\r\nThis issue attempts to collect the post-MVP WebAssembly spec proposals. The goal is to provide a convenient place to collect issues for the individual proposals and the status of each proposal with respect to the .NET runtime.\r\n\r\nThis list of in-progress proposals is from WebAssembly/proposals@0099331e2db3c40c2aae6b3ff4583aaa4e254553\r\n\r\n\r\n| **Legend** | |\r\n|-|-|\r\n| not currently planned | ⏹️ |\r\n| not applicable or no action needed | 🈚 |\r\n| supported | 🏁 |\r\n| in progress | 🏃 |\r\n| under consideration | 🤔 |\r\n| needs investigation | 🐌 |\r\n\r\nFor the status of support for each proposal by various popular WebAssembly engines, see https://webassembly.org/roadmap/\r\n\r\n## Accepted proposals\r\n\r\nThese are the proposals in https://github.com/WebAssembly/spec/tree/main/proposals that have been merged into the spec\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [bulk memory operations](https://github.com/WebAssembly/spec/blob/main/proposals/bulk-memory-operations/Overview.md) |  | 🏁 [^1] |\r\n| [multi-value](https://github.com/WebAssembly/spec/blob/main/proposals/multi-value/Overview.md) | | 🈚[^2] | \r\n| [non-trapping float-to-int conversion](https://github.com/WebAssembly/spec/blob/main/proposals/nontrapping-float-to-int-conversion/Overview.md)  | [^3] | 🏁  |\r\n| [reference types](https://github.com/WebAssembly/spec/blob/main/proposals/reference-types/Overview.md) | | 🐌 |\r\n| [sign extension operators](https://github.com/WebAssembly/spec/blob/main/proposals/sign-extension-ops/Overview.md) | | 🏁 [^4] | \r\n| [SIMD](https://github.com/WebAssembly/spec/tree/main/proposals/simd) | https://github.com/dotnet/runtime/issues/53730 | 🏁 |\r\n\r\n[^1]: Supported by toolchain\r\n[^2]: There may be some micro-optimization opportunities for the jiterpreter to return multiple values.  Interpreter and AOT use the C stack to return .NET valuetypes not the WASM stack.\r\n[^3]: Supported by toolchain, intrinsics added together with SIMD in https://github.com/dotnet/runtime/issues/53730\r\n[^4]: Supported by toolchain\r\n\r\n## Phase 4 - Standardize the feature (WG)\r\n\r\n| Proposal | dotnet/runtime Issue | .NET status |\r\n|-|-|-|\r\n| [tailcall](https://github.com/WebAssembly/tail-call) | #94352 | 🐌 |\r\n| [extended constant expressions](https://github.com/WebAssembly/extended-const) | | 🐌 |\r\n| [typed function references](https://github.com/WebAssembly/function-references) | | 🐌 |\r\n| [garbage collection](https://github.com/WebAssembly/gc) | https://github.com/dotnet/runtime/issues/94420 | ⏹️ |\r\n| [multiple memories](https://github.com/WebAssembly/multi-memory) | | 🐌 |\r\n| [threads](https://github.com/webassembly/threads) | https://github.com/dotnet/runtime/issues/68162 | 🏃 |\r\n| [relaxed SIMD](https://github.com/WebAssembly/relaxed-simd) | | 🐌 |\r\n\r\n## Phase 3 - Implementation Phase (WG + CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [custom annotation syntax in the text format](https://github.com/WebAssembly/annotations) | - | 🈚[^5] |\r\n| [memory64](https://github.com/WebAssembly/memory64) | https://github.com/dotnet/runtime/issues/94108 | 🐌 |\r\n| [exception handling](https://github.com/WebAssembly/exception-handling ) | https://github.com/dotnet/runtime/pull/84573| 🏁 |\r\n| [web content security policy](https://github.com/WebAssembly/content-security-policy) | https://github.com/dotnet/runtime/issues/68374 | 🏁 |\r\n| [branch hinting](https://github.com/WebAssembly/branch-hinting) | | 🐌 |\r\n| [JS promise integration](https://github.com/WebAssembly/js-promise-integration) | #80904 | 🐌 |\r\n| [type reflection for WebAssembly JavaScript API](https://github.com/WebAssembly/js-types) | | 🐌 |\r\n\r\n[^5]: .NET does not use the WAT text format directly\r\n\r\n## Phase 2 - Proposed Spec Text Available (WG + CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [ECMAScript module integration](https://github.com/WebAssembly/esm-integration) | | 🐌 |\r\n| [relaxed dead code validation](https://github.com/WebAssembly/relaxed-dead-code-validation) | | 🐌 |\r\n| [numeric values in WAT data segments](https://github.com/WebAssembly/wat-numeric-values) | | 🐌 |\r\n| [instrument and tracing technology](https://github.com/WebAssembly/instrument-tracing) | | 🐌 |\r\n| [extended name section](https://github.com/WebAssembly/extended-name-section) | | 🐌 |\r\n\r\n## Phase 1 - Feature Proposal (CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [type imports](https://github.com/WebAssembly/proposal-type-imports) | | 🐌 |\r\n| [component model](https://github.com/WebAssembly/component-model) | | 🐌 |\r\n| [WebAssembly C and C++ API](https://github.com/WebAssembly/wasm-c-api) | | 🐌 |\r\n| [flexible vectors](https://github.com/WebAssembly/flexible-vectors) | | 🐌 |\r\n| [call tags](https://github.com/WebAssembly/call-tags) | | 🐌 |\r\n| [stack switching](https://github.com/WebAssembly/stack-switching) | | 🐌 |\r\n| [constant time](https://github.com/WebAssembly/constant-time) | | 🐌 |\r\n| [JS customization for GC Objects](https://github.com/WebAssembly/gc-js-customization) | | 🐌 |\r\n| [memory control](https://github.com/WebAssembly/memory-control) | | 🐌 |\r\n| [reference-typed strings](https://github.com/WebAssembly/stringref) | | 🐌 |\r\n| [profiles](https://github.com/WebAssembly/profiles) | | 🐌 |\r\n| [JS string builtins](https://github.com/WebAssembly/js-string-builtins) | | 🐌 |\r\n| [rounding variants](https://github.com/WebAssembly/rounding-mode-control) | | 🐌 |\r\n| [shared everything threads](https://github.com/WebAssembly/shared-everything-threads) | #96629 | 🐌 |\r\n\r\n",
    "number": 94351,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "EYES",
          "createdAt": "2023-11-03T17:36:41Z",
          "user": "ivanpovazan"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-03T17:36:56Z",
          "user": "lewing"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-06T12:14:13Z",
          "user": "maraf"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-06T12:54:47Z",
          "user": "elringus"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-06T22:28:23Z",
          "user": "charlesroddie"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-15T02:28:42Z",
          "user": "RyoukoKonpaku"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-11T10:04:39Z",
          "user": "fMichaleczek"
        },
        {
          "content": "EYES",
          "createdAt": "2024-01-08T18:18:27Z",
          "user": "rogihee"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-02-16T16:18:41Z",
          "user": "AslanAmca"
        },
        {
          "content": "EYES",
          "createdAt": "2025-02-16T16:18:42Z",
          "user": "AslanAmca"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-27T09:47:24Z",
          "user": "EduardoLarios"
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHODAjnng=="
    },
    "updatedAt": "2024-12-12T11:10:05Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to 'arch-wasm': @lewing\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n## Summary\r\n\r\nThis issue attempts to collect the post-MVP WebAssembly spec proposals. The goal is to provide a convenient place to collect issues for the individual proposals and the status of each proposal with respect to the .NET runtime.\r\n\r\nThis list of in-progress proposals is from WebAssembly/proposals@04fa8c810e1dc99ab399e41052a6e427ee988180\r\n\r\n\r\n| **Legend** | |\r\n|-|-|\r\n| not planned | ⏹️ |\r\n| not applicable or no action needed | ⏸️ |\r\n| supported | 🏁 |\r\n| in progress | 🏃 |\r\n| under consideration | 🤔 |\r\n| needs investigation | 🐌 |\r\n\r\nFor the status of support for each proposal by various popular WebAssembly engines, see https://webassembly.org/roadmap/\r\n\r\n## Accepted proposals\r\n\r\nThese are the proposals in https://github.com/WebAssembly/spec/tree/main/proposals that have been merged into the spec\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [bulk memory operations](https://github.com/WebAssembly/spec/blob/main/proposals/bulk-memory-operations/Overview.md) |  | 🏁 [^1] |\r\n| [multi-value](https://github.com/WebAssembly/spec/blob/main/proposals/multi-value/Overview.md) | | ⏸️[^2] | \r\n| [non-trapping float-to-int conversion](https://github.com/WebAssembly/spec/blob/main/proposals/nontrapping-float-to-int-conversion/Overview.md)  | [^3] | 🏁  |\r\n| [reference types](https://github.com/WebAssembly/spec/blob/main/proposals/reference-types/Overview.md) | | 🐌 |\r\n| [sign extension operators](https://github.com/WebAssembly/spec/blob/main/proposals/sign-extension-ops/Overview.md) | | 🏁 [^4] | \r\n| [SIMD](https://github.com/WebAssembly/spec/tree/main/proposals/simd) | https://github.com/dotnet/runtime/issues/53730 | 🏁 |\r\n\r\n[^1]: Supported by toolchain\r\n[^2]: There may be some micro-optimization opportunities for the jiterpreter to return multiple values.  Interpreter and AOT use the C stack to return .NET valuetypes not the WASM stack.\r\n[^3]: Supported by toolchain, intrinsics added together with SIMD in https://github.com/dotnet/runtime/issues/53730\r\n[^4]: Supported by toolchain\r\n\r\n## Phase 4 - Standardize the feature (WG)\r\n\r\n| Proposal | dotnet/runtime Issue | .NET status |\r\n|-|-|-|\r\n| [tailcall](https://github.com/WebAssembly/tail-call) | | 🐌 |\r\n| [extended constant expressions](https://github.com/WebAssembly/extended-const) | | 🐌 |\r\n| [typed function references](https://github.com/WebAssembly/function-references) | | 🐌 |\r\n| [garbage collection](https://github.com/WebAssembly/gc) | | 🐌 |\r\n| [multiple memories](https://github.com/WebAssembly/multi-memory) | | 🐌 |\r\n| [threads](https://github.com/webassembly/threads) | https://github.com/dotnet/runtime/issues/68162 | 🏃 |\r\n| [relaxed SIMD](https://github.com/WebAssembly/relaxed-simd) | | 🐌 |\r\n\r\n## Phase 3 - Implementation Phase (WG + CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [custom annotation syntax in the text format](https://github.com/WebAssembly/annotations) | | 🐌 |\r\n| [memory64](https://github.com/WebAssembly/memory64) | | 🐌 |\r\n| [exception handling](https://github.com/WebAssembly/exception-handling ) | https://github.com/dotnet/runtime/pull/84573| 🏁 |\r\n| [web content security policy](https://github.com/WebAssembly/content-security-policy) | https://github.com/dotnet/runtime/issues/68374 | 🏁 |\r\n| [branch hinting](https://github.com/WebAssembly/branch-hinting) | | 🐌 |\r\n| [JS promise integration](https://github.com/WebAssembly/js-promise-integration) | | 🐌 |\r\n| [type reflection for WebAssembly JavaScript API](https://github.com/WebAssembly/js-types) | | 🐌 |\r\n\r\n## Phase 2 - Proposed Spec Text Available (WG + CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [ECMAScript module integration](https://github.com/WebAssembly/esm-integration) | | 🐌 |\r\n| [relaxed dead code validation](https://github.com/WebAssembly/relaxed-dead-code-validation) | | 🐌 |\r\n| [numeric values in WAT data segments](https://github.com/WebAssembly/wat-numeric-values) | | 🐌 |\r\n| [instrument and tracing technology](https://github.com/WebAssembly/instrument-tracing) | | 🐌 |\r\n| [extended name section](https://github.com/WebAssembly/extended-name-section) | | 🐌 |\r\n\r\n## Phase 1 - Feature Proposal (CG)\r\n\r\n| Proposal | dotnet/runtime issue | .NET status |\r\n|-|-|-|\r\n| [type imports](https://github.com/WebAssembly/proposal-type-imports) | | 🐌 |\r\n| [component model](https://github.com/WebAssembly/component-model) | | 🐌 |\r\n| [WebAssembly C and C++ API](https://github.com/WebAssembly/wasm-c-api) | | 🐌 |\r\n| [flexible vectors](https://github.com/WebAssembly/flexible-vectors) | | 🐌 |\r\n| [call tags](https://github.com/WebAssembly/call-tags) | | 🐌 |\r\n| [stack switching](https://github.com/WebAssembly/stack-switching) | | 🐌 |\r\n| [constant time](https://github.com/WebAssembly/constant-time) | | 🐌 |\r\n| [JS customization for GC Objects](https://github.com/WebAssembly/gc-js-customization) | | 🐌 |\r\n| [memory control](https://github.com/WebAssembly/memory-control) | | 🐌 |\r\n| [reference-typed strings](https://github.com/WebAssembly/stringref) | | 🐌 |\r\n| [profiles](https://github.com/WebAssembly/profiles) | | 🐌 |\r\n| [JS string builtins](https://github.com/WebAssembly/js-string-builtins) | | 🐌 |\r\n| [rounding variants](https://github.com/WebAssembly/rounding-mode-control) | | 🐌 |\r\n\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>lambdageek</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`design-discussion`, `arch-wasm`, `area-Meta`, `tracking`, `os-wasi`, `os-browser`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-11-03T17:15:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-03T17:16:05Z",
          "id": "IC_kwDODI9FZc5q3H2H"
        },
        {
          "author": "Anutrix",
          "body": "Minor note: ⏸️ symbol seems like 'feature is paused but might continue' when it actually means not applicable or no action needed aka it's conclusion has been reached.",
          "createdAt": "2023-11-15T11:47:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-15T11:47:34Z",
          "id": "IC_kwDODI9FZc5sBtUD"
        },
        {
          "author": "lambdageek",
          "body": "> Minor note: ⏸️ symbol seems like 'feature is paused but might continue' when it actually means not applicable or no action needed aka it's conclusion has been reached.\r\n\r\nOk, replaced it with 🈚 which apparently means \"free of charge\".  that's pretty close, maybe.  There's also 🉑 which is \"acceptable\".  If this is all too silly, maybe I'll just write \"N/A\"",
          "createdAt": "2023-11-15T14:20:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "LAUGH",
                "createdAt": "2023-11-15T14:26:49Z",
                "user": "Anutrix"
              },
              {
                "content": "LAUGH",
                "createdAt": "2024-06-25T03:36:18Z",
                "user": "Lemon73-Computing"
              },
              {
                "content": "LAUGH",
                "createdAt": "2024-11-29T00:21:17Z",
                "user": "fallaciousreasoning"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOD86ypA=="
          },
          "updatedAt": "2023-11-15T14:20:36Z",
          "id": "IC_kwDODI9FZc5sCmSB"
        },
        {
          "author": "lambdageek",
          "body": "~~We should also add the \"thread spawning\" aka \"shared everything\" proposal once it is a bit more mature https://github.com/WebAssembly/shared-everything-threads/blob/main/proposals/thread-spawn/Overview.md~~\r\n\r\n\r\n*Update* 2024-01-08 added",
          "createdAt": "2023-11-21T21:40:03Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-08T15:58:43Z",
          "id": "IC_kwDODI9FZc5slXn0"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHObJV59A=="
    },
    "url": "https://github.com/dotnet/runtime/issues/94351",
    "title": "[tracking] .NET support for post-MVP WebAssembly Proposals"
  },
  {
    "author": "AndyAyersMS",
    "labels": [
      "area-Meta",
      "User Story",
      "reduce-unsafe"
    ],
    "createdAt": "2023-11-17T23:50:25Z",
    "body": "In .NET 9 we plan to study the use of unsafe constructs within the BCL, to better assess the risks they incur and benefits they provide. The aim of this study is to ensure we are making responsible use of unsafe. \n\nThe scope and outcome of this study is not yet determined, but may include things like:\n* Modernizing the definition of “unsafe” (or unsafe-equivalent) code\n* Guidelines for introduction of new unsafe code in the BCL, and possibly guidelines for general .NET development\n* Identification of existing unsafe code that can be replaced with safe equivalents\n* API changes or additions to avoid the need to rely on unsafe constructs\n* Recommendations for new or improved JIT optimizations to widen the set of unsafe code that can be replaced\n* Tooling to track the aggregate amount of unsafe code\n* The possibility of using source generators to “safely” generate unsafe code\n\nInitially we will be gathering data about overall usage (and how it has changed over time) and doing case studies of code that uses unsafe constructs. As the study progresses, we will update this issue to keep track of interim findings, examples, discussions, proposals, and eventually, plans and work items.\n\n## .NET 10 Work\n\n- [ ] https://github.com/dotnet/runtime/issues/10397\n- [ ] https://github.com/dotnet/runtime/issues/31173\n- [ ] https://github.com/dotnet/runtime/issues/99144\n- [ ] https://github.com/dotnet/runtime/issues/111309\n- [ ] https://github.com/dotnet/aspnetcore/issues/4720\n- [ ] https://github.com/dotnet/runtime/issues/109677\n  - https://github.com/dotnet/runtime/pull/109900\n- [ ] Remove redundant `unsafe` contexts (or narrow their scope)\n  - https://github.com/dotnet/runtime/pull/110953\n- [ ] Improve safety around existing stackallocs\n  -  https://github.com/dotnet/runtime/pull/110864\n\n### Misc:\n\n- [ ] https://github.com/dotnet/runtime/pull/110824\n- [ ] https://github.com/dotnet/runtime/pull/109896\n- [ ] https://github.com/dotnet/runtime/pull/106085\n- [ ] https://github.com/dotnet/runtime/pull/108572\n- [ ] https://github.com/dotnet/runtime/pull/111024\n- [ ] https://github.com/dotnet/runtime/pull/111095\n- [ ] https://github.com/dotnet/runtime/pull/111023\n",
    "number": 94941,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-17T23:53:14Z",
          "user": "TIHan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T00:08:03Z",
          "user": "b-cpu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T00:21:13Z",
          "user": "Sewer56"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T00:23:33Z",
          "user": "tannergooding"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-18T00:23:37Z",
          "user": "tannergooding"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T00:23:40Z",
          "user": "tannergooding"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T00:43:40Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T01:45:06Z",
          "user": "jkotas"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T01:45:08Z",
          "user": "jkotas"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T02:17:47Z",
          "user": "skyoxZ"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T05:24:58Z",
          "user": "Hellevar"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-18T07:48:02Z",
          "user": "KeterSCP"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T10:55:47Z",
          "user": "wzchua"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T12:23:52Z",
          "user": "Tornhoof"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T12:33:54Z",
          "user": "hez2010"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-18T12:52:13Z",
          "user": "xparadoxical"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T12:52:14Z",
          "user": "xparadoxical"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T14:03:51Z",
          "user": "strangeman375"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T14:27:06Z",
          "user": "hughbe"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-18T16:20:40Z",
          "user": "saint4eva"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T16:20:40Z",
          "user": "saint4eva"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T16:20:40Z",
          "user": "saint4eva"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-18T16:21:15Z",
          "user": "saint4eva"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T16:52:30Z",
          "user": "HighPerfDotNet"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T17:23:33Z",
          "user": "colejohnson66"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T17:23:34Z",
          "user": "colejohnson66"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T19:00:05Z",
          "user": "Zintom"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-18T19:00:05Z",
          "user": "Zintom"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-18T19:00:08Z",
          "user": "Zintom"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-18T19:00:09Z",
          "user": "Zintom"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-11-18T21:43:38Z",
          "user": "nathan-moore"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-19T11:33:57Z",
          "user": "hendriklhf"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-19T11:43:12Z",
          "user": "p6laris"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-19T12:12:26Z",
          "user": "sveinungf"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-19T20:45:32Z",
          "user": "arkadiuszwojcik"
        },
        {
          "content": "HEART",
          "createdAt": "2023-11-20T00:41:21Z",
          "user": "Suchiman"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-20T00:58:50Z",
          "user": "neon-sunset"
        },
        {
          "content": "EYES",
          "createdAt": "2023-11-25T16:01:29Z",
          "user": "acaly"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-11-29T19:16:16Z",
          "user": "AlgorithmsAreCool"
        },
        {
          "content": "EYES",
          "createdAt": "2023-12-22T21:47:05Z",
          "user": "sblom"
        },
        {
          "content": "EYES",
          "createdAt": "2024-01-24T10:17:40Z",
          "user": "govert"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-29T17:22:51Z",
          "user": "alexandrehtrb"
        },
        {
          "content": "EYES",
          "createdAt": "2024-12-27T08:55:21Z",
          "user": "xoofx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-03T04:17:57Z",
          "user": "pentp"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-04T12:01:58Z",
          "user": "MSDN-WhiteKnight"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-11T04:52:07Z",
          "user": "countneuroman"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-13T13:11:48Z",
          "user": "EgorBo"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-25T01:59:51Z",
          "user": "heartacker"
        },
        {
          "content": "HEART",
          "createdAt": "2025-02-01T13:55:02Z",
          "user": "omariom"
        },
        {
          "content": "EYES",
          "createdAt": "2025-02-02T03:56:24Z",
          "user": "MineCake147E"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-03-01T23:19:37Z",
          "user": "MihaZupan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-03T13:20:42Z",
          "user": "RenderMichael"
        }
      ],
      "totalCount": 52,
      "endCursor": "Y3Vyc29yOnYyOpHOC-rsvw=="
    },
    "updatedAt": "2025-07-16T23:32:16Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nIn .NET 9 we plan to study the use of unsafe constructs within the BCL, to better assess the risks they incur and benefits they provide. The aim of this study is to ensure we are making responsible use of unsafe. \r\n\r\nThe scope and outcome of this study is not yet determined, but may include things like:\r\n* Modernizing the definition of “unsafe” (or unsafe-equivalent) code\r\n* Guidelines for introduction of new unsafe code in the BCL, and possibly guidelines for general .NET development\r\n* Identification of existing unsafe code that can be replaced with safe equivalents\r\n* API changes or additions to avoid the need to rely on unsafe constructs\r\n* Recommendations for new or improved JIT optimizations to widen the set of unsafe code that can be replaced\r\n* Tooling to track the aggregate amount of unsafe code\r\n* The possibility of using source generators to “safely” generate unsafe code\r\n\r\nInitially we will be gathering data about overall usage (and how it has changed over time) and doing case studies of code that uses unsafe constructs. As the study progresses, we will update this issue to keep track of interim findings, examples, discussions, proposals, and eventually, plans and work items.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>AndyAyersMS</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `User Story`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-11-17T23:50:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-11-17T23:50:33Z",
          "id": "IC_kwDODI9FZc5sUT3R"
        },
        {
          "author": "jeffhandley",
          "body": "@AndyAyersMS I know we made some progress on this in 9.0.0. I'm going to move this to 10.0.0 to keep the effort going.",
          "createdAt": "2024-07-28T05:13:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-28T05:13:28Z",
          "id": "IC_kwDODI9FZc6GXpmI"
        },
        {
          "author": "EgorBo",
          "body": "Moving to 11 milestone where the main work will happen.",
          "createdAt": "2025-07-16T23:32:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-07-16T23:32:13Z",
          "id": "IC_kwDODI9FZc63sBcH"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOt7AXBw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/94941",
    "title": ".NET 9 Unsafe Study"
  },
  {
    "author": "kotlarmilos",
    "labels": [
      "Epic",
      "area-Meta",
      "os-mac-os-x",
      "tracking",
      "os-ios"
    ],
    "createdAt": "2023-12-05T14:26:20Z",
    "body": "## Goal\n\nThe primary goal is to ship projection tooling along with corresponding runtime support that have ability to generate C# bindings for Swift. Our objective is not full Swift support, but a targeted approach based on specific use-cases.\n\nSwift has [richer semantics](https://github.com/apple/swift/blob/main/docs/ABIStabilityManifesto.md) than .NET, and experimentation in the previous release has shown that achieving full Swift interop would take several releases.\n\nAs the primary users will be from the .NET ecosystem, our goal is to focus on functionality, ensuring that the generated bindings resemble C# patterns rather than aiming for a Swift-like experience. As MAUI is the default framework used for mobile development within the .NET ecosystem, all examples will be based on it.\n\n## Motivation\n\nThe Swift programming language has a [different ABI](https://github.com/apple/swift/blob/main/docs/ABIStabilityManifesto.md), runtime environment, and object model, making it challenging to call into from the .NET runtime. Apple's shift towards Swift highlights the importance of MAUI being compatible with Swift libraries and frameworks to remain relevant in the Apple ecosystem. Ideally, the interop should operate with a minimal set of additional wrappers and enable direct calls to various Swift functions.\n\n## Plan\n\nThis project is divided into three user-stories.\n\n**Runtime:** At the lowest level, ensuring that Swift can be called from .NET without an intermediate step through C or Swift. The support must be implemented across all supported .NET runtimes targeting macOS and Apple mobile platforms.\n\n**Code-Generation:** This layer involves the generation of C# bindings for Swift. The projection tooling consists of importing Swift into .NET, exporting .NET to Swift, and tooling distribution.\n\n**End-user scenarios:** At the highest level, we are driven by defined examples. For example, a MAUI iOS developer should be able to create an iOS app that interacts seamlessly with Swift libraries and frameworks. The primary goal at this level includes defining the scope of the work.\n\n### .NET 9\n\nWe’ve introduced [types](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.swift?view=net-9.0) for .NET interop with Swift code. The [projection tooling](https://github.com/dotnet/runtimelab/tree/feature/swift-bindings) can generate bindings for structs and enums with static methods.\n\n### .NET 10\n\nIn this release, we will focus on essential language features only based on the specific use-cases.\n\n#### User stories\n - [x] https://github.com/dotnet/runtime/issues/95636\n - [x] https://github.com/dotnet/runtime/issues/95633\n - [x] https://github.com/dotnet/runtime/issues/108662\n\n### Future\n\nAll milestones are informational/ tentative only, and will be updated according to the progress.\n\n#### User stories\n - [ ] https://github.com/dotnet/runtimelab/issues/3070\n - [ ] https://github.com/dotnet/runtimelab/issues/3071",
    "number": 95638,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-08T07:25:15Z",
          "user": "SommerEngineering"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-08T07:25:19Z",
          "user": "SommerEngineering"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-09T07:07:12Z",
          "user": "rogihee"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-09T08:29:42Z",
          "user": "maxkatz6"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-09T08:29:46Z",
          "user": "maxkatz6"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-09T22:19:16Z",
          "user": "vhugogarcia"
        },
        {
          "content": "HOORAY",
          "createdAt": "2023-12-09T22:19:19Z",
          "user": "vhugogarcia"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-12-09T22:50:03Z",
          "user": "ivanpovazan"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-10T00:10:52Z",
          "user": "dminta"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-22T12:36:54Z",
          "user": "vhugogarcia"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-27T09:54:18Z",
          "user": "lars-berger"
        },
        {
          "content": "HOORAY",
          "createdAt": "2023-12-27T09:54:20Z",
          "user": "lars-berger"
        },
        {
          "content": "HEART",
          "createdAt": "2023-12-27T09:54:22Z",
          "user": "lars-berger"
        },
        {
          "content": "ROCKET",
          "createdAt": "2023-12-27T09:54:24Z",
          "user": "lars-berger"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-03T09:31:40Z",
          "user": "nor0x"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-11T00:01:10Z",
          "user": "Felix-Dev"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-01T21:54:32Z",
          "user": "Felix-Dev"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-02-01T21:54:41Z",
          "user": "Felix-Dev"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-21T12:16:38Z",
          "user": "jkurdek"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-05-31T08:49:14Z",
          "user": "giuseppenovielli"
        },
        {
          "content": "HEART",
          "createdAt": "2024-05-31T08:49:16Z",
          "user": "giuseppenovielli"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-05-31T08:49:22Z",
          "user": "giuseppenovielli"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-05-31T08:49:24Z",
          "user": "giuseppenovielli"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-15T17:15:41Z",
          "user": "ivmirx"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-16T21:20:25Z",
          "user": "tipa"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-08T22:34:53Z",
          "user": "jeremy-visionaid"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-05T02:07:17Z",
          "user": "clarky07"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-12-05T02:07:19Z",
          "user": "clarky07"
        },
        {
          "content": "HEART",
          "createdAt": "2024-12-05T02:07:20Z",
          "user": "clarky07"
        },
        {
          "content": "ROCKET",
          "createdAt": "2024-12-05T02:07:20Z",
          "user": "clarky07"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-05T02:08:20Z",
          "user": "thisisthekap"
        },
        {
          "content": "HEART",
          "createdAt": "2024-12-05T02:08:23Z",
          "user": "thisisthekap"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-05T05:27:06Z",
          "user": "pierre-galaup"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-05T11:26:55Z",
          "user": "rabuckley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-27T08:23:20Z",
          "user": "jingliancui"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-03T14:27:47Z",
          "user": "AndreasAerts"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-01-19T15:32:12Z",
          "user": "frankbuckley"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-03T09:00:06Z",
          "user": "pedoc"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-10T14:52:44Z",
          "user": "NatElkins"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-04-19T09:29:48Z",
          "user": "thefex"
        },
        {
          "content": "HOORAY",
          "createdAt": "2025-04-24T07:49:58Z",
          "user": "Take-A-Byte"
        },
        {
          "content": "ROCKET",
          "createdAt": "2025-04-24T07:49:58Z",
          "user": "Take-A-Byte"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-05-12T19:58:05Z",
          "user": "markmccaigue"
        },
        {
          "content": "EYES",
          "createdAt": "2025-05-15T23:49:18Z",
          "user": "aimore"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-05-19T16:57:32Z",
          "user": "MateuszLas421"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-22T17:41:27Z",
          "user": "StingKo"
        }
      ],
      "totalCount": 46,
      "endCursor": "Y3Vyc29yOnYyOpHODMUlnw=="
    },
    "updatedAt": "2025-08-18T07:07:50Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n# Overview\r\n\r\nThe Swift programming language has a [different ABI](https://github.com/apple/swift/blob/main/docs/ABIStabilityManifesto.md), runtime environment, and object model, making it challenging to call into from the .NET runtime. The goal is to establish .NET Interop support in the ecosystem and address Swift ABI differences. Apple's shift towards Swift highlights the importance of Maui being compatible with Swift libraries and frameworks to remain relevant in the Apple ecosystem. Ideally, the interop should operate with a minimal set of additional wrappers and enable direct calls to various Swift functions. \r\n\r\nThis project can be divided into at least three separate areas and therefore potentially three separate workstreams. \r\n\r\n**Runtime:** At the lowest level, ensuring that Swift can be called from .NET without an intermediate step through C or assembly is essential. This task must be implemented across all supported .NET runtimes targeting OSX and Apple mobile platforms.\r\n\r\n**Code-Generation:** This layer involves the generation of C# bindings for Swift. The projection tooling consists of importing Swift into .NET, exporting .NET to Swift, and tool distribution.\r\n\r\n**End-user scenarios:** At the highest level, it is crucial to address end-user scenarios. For instance, a MAUI-iOS developer should be able to create an iOS app that interacts seamlessly with Swift libraries and frameworks. The primary task at this level includes defining and managing the end-to-end process. This includes prioritizing Swift libraries and showcasing the support for .NET Swift interop.\r\n\r\n## User stories\r\n - https://github.com/dotnet/runtime/issues/93631\r\n - https://github.com/dotnet/runtime/issues/95633\r\n - https://github.com/dotnet/runtime/issues/95636\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>kotlarmilos</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>kotlarmilos</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`Epic`, `area-Meta`, `tracking`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-12-05T14:26:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-05T14:26:30Z",
          "id": "IC_kwDODI9FZc5tueAu"
        },
        {
          "author": null,
          "body": "Tagging subscribers to 'os-ios': @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n# Overview\r\n\r\nThe Swift programming language has a [different ABI](https://github.com/apple/swift/blob/main/docs/ABIStabilityManifesto.md), runtime environment, and object model, making it challenging to call into from the .NET runtime. The goal is to establish .NET Interop support in the ecosystem and address Swift ABI differences. Apple's shift towards Swift highlights the importance of Maui being compatible with Swift libraries and frameworks to remain relevant in the Apple ecosystem. Ideally, the interop should operate with a minimal set of additional wrappers and enable direct calls to various Swift functions. \r\n\r\nThis project can be divided into at least three separate areas and therefore potentially three separate workstreams. \r\n\r\n**Runtime:** At the lowest level, ensuring that Swift can be called from .NET without an intermediate step through C or assembly is essential. This task must be implemented across all supported .NET runtimes targeting OSX and Apple mobile platforms.\r\n\r\n**Code-Generation:** This layer involves the generation of C# bindings for Swift. The projection tooling consists of importing Swift into .NET, exporting .NET to Swift, and tool distribution.\r\n\r\n**End-user scenarios:** At the highest level, it is crucial to address end-user scenarios. For instance, a MAUI-iOS developer should be able to create an iOS app that interacts seamlessly with Swift libraries and frameworks. The primary task at this level includes defining and managing the end-to-end process. This includes prioritizing Swift libraries and showcasing the support for .NET Swift interop.\r\n\r\n## User stories\r\n - [ ] https://github.com/dotnet/runtime/issues/93631\r\n - [ ] https://github.com/dotnet/runtime/issues/95633\r\n - [ ] https://github.com/dotnet/runtime/issues/95636\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>kotlarmilos</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>kotlarmilos</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`Epic`, `area-Meta`, `tracking`, `os-ios`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-12-06T08:16:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-06T08:16:09Z",
          "id": "IC_kwDODI9FZc5t0KQp"
        },
        {
          "author": "ShikiSuen",
          "body": "Sorry for the interruption, but macOS is not `OSX` anymore.\r\nThe major version of macOS changed since 2020.\r\nIt is more appropriate to use the term `macOS` instead.",
          "createdAt": "2023-12-31T10:51:40Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-31T10:51:40Z",
          "id": "IC_kwDODI9FZc5vonmw"
        },
        {
          "author": "kotlarmilos",
          "body": "Thanks for your suggestion. The label description mentions `macOS aka OSX`. @marek-safar, please inform us if we should make any changes.",
          "createdAt": "2024-01-03T11:30:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-03T11:49:17Z",
          "id": "IC_kwDODI9FZc5vxaQp"
        },
        {
          "author": "marek-safar",
          "body": "Mixing macOS and Apple seems odd. What about just naming explicitly macOS and iOS ?",
          "createdAt": "2024-01-03T16:44:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-03T16:44:39Z",
          "id": "IC_kwDODI9FZc5vzFi0"
        },
        {
          "author": "jkotas",
          "body": "> What about just naming explicitly macOS and iOS ?\r\n\r\nmacCatalyst and tvOS too\r\n\r\nWe call these \"Apple platforms\" in many places in the repo, one example from many https://github.com/dotnet/runtime/blob/867250ce3cdd1a93ec08a937c99f61428b8a1082/src/libraries/System.Private.CoreLib/src/System/OperatingSystem.cs#L245 . ",
          "createdAt": "2024-01-03T16:56:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-03T16:56:15Z",
          "id": "IC_kwDODI9FZc5vzJQc"
        },
        {
          "author": "ShikiSuen",
          "body": "@jkotas These platforms have differences in available frameworks.\r\nAppKit and InputMethodKit are only available on macOS.\r\n\r\nIf there is a dotNET equivalent of Swift `#if canImport(XXXKit)` then it should be fine.",
          "createdAt": "2024-01-03T17:18:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-03T17:18:59Z",
          "id": "IC_kwDODI9FZc5vzQig"
        },
        {
          "author": "Noemata",
          "body": "Is the .Net 9 Swift interop facility usable on Windows?  I would like to use the same code on both Mac and Windows to integrate with Swift libs on both now that the Swift compiler has reached a feasible level of maturity on Windows.  If so, are there any examples out there that demonstrate integration with C# and Swift interop on Windows?  If not, why is Swift compiler integration not supported on Windows?  Lastly, I am aware that Swift on Windows now provides interoperability with Clang/C++, so I'm not looking at that as an alternative given the advantages of the .Net 9 approach for Swift interop.",
          "createdAt": "2024-12-13T14:08:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-13T14:33:12Z",
                "user": "ShikiSuen"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD-57HA=="
          },
          "updatedAt": "2024-12-13T14:08:53Z",
          "id": "IC_kwDODI9FZc6XfOEd"
        },
        {
          "author": "jkotas",
          "body": "> Is the .Net 9 Swift interop facility usable on Windows?\n\nSwift interop is Apple-specific for now to reduce scope of the project. Swift interop is a multi-year project even with this scope reduction. Nothing fundamental prevents us from enabling the swift interop on other OSes in future.",
          "createdAt": "2024-12-13T15:51:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-13T17:18:29Z",
                "user": "matouskozak"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOD-7K8A=="
          },
          "updatedAt": "2024-12-13T15:51:44Z",
          "id": "IC_kwDODI9FZc6Xf_jC"
        },
        {
          "author": "Noemata",
          "body": "@jkotas , \"Swift interop is Apple-specific for now to reduce scope of the project.\" So is that a \"no\", for Swift interop on Windows with .Net 9?  I don't know enough about how Swift manifests like capabilities on Windows, but given where Swift is today in terms of code \"safety\", it does appear to be one of the best choices for cross platform low level lib development.  Thus, I would think Swift compiler interop support on Windows should have equal if not higher priority to interop on Apple's eco system, especially given this further elevates C# viability across OS variants.  Please clarify when and if we can expect Swift interop support on Windows.  Please don't cripple us on Windows!",
          "createdAt": "2024-12-13T16:05:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-13T16:05:37Z",
          "id": "IC_kwDODI9FZc6XgFzP"
        },
        {
          "author": "jkotas",
          "body": "> Swift interop is Apple-specific for now to reduce scope of the project.\" So is that a \"no\", for Swift interop on Windows with .Net 9?\n\nRight. Note that Swift interop support in .NET 9 is very limited and most of it is experimental. It is far from complete and usable for most real-world APIs.\n\n> I would think Swift compiler interop support on Windows should have equal if not higher priority to interop on Apple's eco system,\n\nI disagree. Swift is by several orders of magnitude more popular in Apple eco system than anywhere else. It is why we have prioritized Apple support. We (the core .NET runtime team) do not have infinite resources that forces us to do prioritization decisions like this one.\n\n> Please clarify when and if we can expect Swift interop support on Windows\n\nIt is not going to be in .NET 10 and we do not have detailed plans beyond that.\n\n.NET runtime is open-source project that accepts contributions. If you care about Swift interop on Windows a lot, you may consider contributing the implementation (https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#dos-and-donts are our contribution guidelines).",
          "createdAt": "2024-12-13T16:21:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-13T16:22:11Z",
          "id": "IC_kwDODI9FZc6XgNFq"
        },
        {
          "author": "Noemata",
          "body": "@jkotas, agree, Swift is clearly more popular on Apple for obvious reasons.  However, this tendency of Microsoft to quarantine its own platform isn't helping the cause.  It's getting excessively easy to feel like an orphan being a developer on Windows.  WPF / Xamarin / UWP / WinUI / MAUI is not a happy evolution to date.  Enterprise clients in particular are being forced to look beyond Windows as a result.  Thank you for the quick reply.  Please do reconsider your stance.",
          "createdAt": "2024-12-13T16:49:46Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-15T11:42:00Z",
                "user": "ShikiSuen"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-12-19T07:46:29Z",
                "user": "neon-sunset"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-12-19T13:59:13Z",
                "user": "elcio-pipastudios"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-24T20:23:54Z",
                "user": "Zaphhh"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-07-03T12:44:03Z",
                "user": "litewrap"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOEZHUrg=="
          },
          "updatedAt": "2024-12-13T16:49:46Z",
          "id": "IC_kwDODI9FZc6XgZKN"
        },
        {
          "author": "PaperPrototype",
          "body": "looking forward to this",
          "createdAt": "2025-08-18T07:07:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-18T07:07:50Z",
          "id": "IC_kwDODI9FZc6-ddqG"
        }
      ],
      "totalCount": 13,
      "endCursor": "Y3Vyc29yOnYyOpHOvnXahg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/95638",
    "title": "Implement .NET Swift interop support targeting Apple platforms"
  },
  {
    "author": "vsfeedback",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2023-12-15T20:09:53Z",
    "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/MicrosoftPointOfService-POS-compatibl/10325814)._\n\n---\nCurrently, the POS version 1.14.1 is causing a runtime error in projects based on .NET 5+ technologies. The issue is related to the usage of the AppDomain class, whose behavior has been altered. Apart from that, no other problems have been identified. This functionality is crucial and can be life-saving.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/29/2023, 11:21 PM: \n\n(private comment, text removed)\n#### Marcin Kowol on 6/19/2023, 07:05 AM: \n\n(private comment, text removed)",
    "number": 96071,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-09T12:57:49Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "filipnavara",
          "body": "Not sure why this got re-routed here. Microsoft.PointOfService is not part of the .NET Runtime.",
          "createdAt": "2023-12-16T12:21:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-16T12:21:50Z",
          "id": "IC_kwDODI9FZc5uyx_I"
        },
        {
          "author": "filipnavara",
          "body": "cc @ronnieoverby",
          "createdAt": "2023-12-16T12:23:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-16T12:23:51Z",
          "id": "IC_kwDODI9FZc5uyyFG"
        },
        {
          "author": "ronnieoverby",
          "body": "My only involvement was that nearly 1,000 years ago I packaged the Microsoft POS SDK and uploaded to Nuget so that my team / CI wouldn't need to have MSI pre-installed.\r\n\r\nhttps://www.nuget.org/packages/POSForDotNet.SDK/1.14.1\r\n\r\n",
          "createdAt": "2023-12-16T12:54:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-16T12:54:15Z",
          "id": "IC_kwDODI9FZc5uyzgc"
        },
        {
          "author": "filipnavara",
          "body": "Ah, sorry for disturbing then. I noticed that you were listed as the owner of the NuGet package but there’s very little relevant information about the SDK.",
          "createdAt": "2023-12-16T13:32:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-16T13:32:52Z",
          "id": "IC_kwDODI9FZc5uy1c-"
        },
        {
          "author": "ronnieoverby",
          "body": "No sweat!\r\n\r\nOn Sat, Dec 16, 2023, 8:33 AM Filip Navara ***@***.***> wrote:\r\n\r\n> Ah, sorry for disturbing then. I noticed that you were listed as the owner\r\n> of the NuGet package but there’s very little relevant information about the\r\n> SDK.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/dotnet/runtime/issues/96071#issuecomment-1858819902>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAAYVJEPVAROU2H73JJHBO3YJWPI7AVCNFSM6AAAAABAW54PQCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNJYHAYTSOJQGI>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2023-12-16T19:30:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-16T19:30:24Z",
          "id": "IC_kwDODI9FZc5uzMOQ"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/MicrosoftPointOfService-POS-compatibl/10325814)._\n\n---\nCurrently, the POS version 1.14.1 is causing a runtime error in projects based on .NET 5+ technologies. The issue is related to the usage of the AppDomain class, whose behavior has been altered. Apart from that, no other problems have been identified. This functionality is crucial and can be life-saving.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/29/2023, 11:21 PM: \n\n(private comment, text removed)\n#### Marcin Kowol on 6/19/2023, 07:05 AM: \n\n(private comment, text removed)\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>vsfeedback</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>terrajobst</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`, `needs-area-label`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-12-17T22:07:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-17T22:07:41Z",
          "id": "IC_kwDODI9FZc5u0qe9"
        },
        {
          "author": "mkowolsite",
          "body": "I am really happy that finally something is happening around this topic, but it seems like there is no responsible person/team for this component. Is there any chance that it will became open-source code? Who am I suppose to speak about this?  .net framework won't last forever \r\n@filipnavara ",
          "createdAt": "2024-01-26T15:16:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-26T15:18:06Z",
          "id": "IC_kwDODI9FZc5x-l5b"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOcfpeWw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/96071",
    "title": "Microsoft.PointOfService (POS) compatible with .net5+ projects"
  },
  {
    "author": "rip-mm",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2023-12-25T14:48:15Z",
    "body": "Hi!\r\nI have checked the .NET 8 release version with the PVS-Studio static analyzer. If you are interested, you could take a look at the errors and suspicious code fragments we found:\r\n\r\n- [ ] **Fragment 1**\r\n```\r\nprivate static bool IsRoamingSetting(SettingsProperty setting)\r\n{\r\n  List<KeyValuePair<int, ServiceCallSite>> callSitesByIndex = new();\r\n  ....\r\n  SettingsManageabilityAttribute manageAttr = ....;\r\n  return    manageAttr != null \r\n         && ((manageAttr.Manageability & SettingsManageability.Roaming) ==\r\n             SettingsManageability.Roaming);\r\n}\r\n```\r\nIn this case, the value of the `SettingsManageability.Roaming` enumeration constant is 0. Since the result of a bitwise AND with an operand equal to 0 is always 0, it means that 0 is compared to 0. The output of the ((manageAttr.Manageability & `SettingsManageability.Roaming) == SettingsManageability.Roaming)` expression is always true.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Configuration.ConfigurationManager/src/System/Configuration/LocalFileSettingsProvider.cs#L408).\r\n\r\n- [ ] **Fragment 2**\r\n```\r\ninternal DataView(....)\r\n{\r\n  ....\r\n  DataCommonEventSource.Log.Trace(\"<ds.DataView.DataView|API> %d#, table=%d, \r\n                                   RowState=%d{ds.DataViewRowState}\\n\",\r\n                ObjectID, (table != null) ? table.ObjectID : 0, (int)RowState);\r\n  ....\r\n}\r\n```\r\nThe analyzer reports an incorrect format string in the first argument of the Trace method. Let's take a look at the method:\r\n```\r\ninternal void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)\r\n{\r\n  if (!Log.IsEnabled()) return;\r\n  Trace(string.Format(format, arg0, arg1, arg2));\r\n}\r\n```\r\nIndeed, the first argument is used as the format string. Arguments are substituted into this line. However, the arguments are to be substituted into placeholders of the format {0}, {1}, etc. There are no such placeholders in this string.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/DataView.cs#L163).\r\n\r\n- [ ] **Fragment 3**\r\n```\r\npublic static SqlDecimal operator /(SqlDecimal x, SqlDecimal y)\r\n{\r\n  ....\r\n  bScaleD = x._bScale;\r\n  bPrecD = x._bPrec;\r\n  ResScale = Math.Max(x._bScale + y._bPrec + 1, s_cNumeDivScaleMin);\r\n  ResInteger = x._bPrec - x._bScale + y._bScale;\r\n  ResPrec = ResScale + x._bPrec + y._bPrec + 1;               // <=\r\n  MinScale = Math.Min(ResScale, s_cNumeDivScaleMin);\r\n\r\n  ResInteger = Math.Min(ResInteger, s_NUMERIC_MAX_PRECISION);\r\n  ResPrec = ResInteger + ResScale;                            // <=\r\n  ....\r\n}\r\n```\r\nWe can see the `ResPrec` variable is assigned values twice here.\r\nSince `ResPrec` isn't used between these two operations, it indicates an error.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/SQLTypes/SQLDecimal.cs#L1653).\r\n\r\n- [ ] **Fragment 4**\r\n```\r\npublic override void MoveToAttribute(int i)\r\n{\r\n  ....\r\n  _currentAttrIndex = i;\r\n  if (i < _coreReaderAttributeCount)\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnAttribute;\r\n  }\r\n  else\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnDefaultAttribute;\r\n  }\r\n\r\n  if (_validationState == ValidatingReaderState.OnReadBinaryContent)\r\n  {\r\n    Debug.Assert(_readBinaryHelper != null);\r\n    _readBinaryHelper.Finish();\r\n    _validationState = _savedState;\r\n  }\r\n}\r\n```\r\nAnalyzer has detected that the last `if (_validationState == ValidatingReaderState.OnReadBinaryContent)` condition is always false. Let's see why it may happen.\r\nLet's take a look at the first `if` statement. There, the `_validationState` field is assigned:\r\n•\tin then branch — `ValidatingReaderState.OnAttribute`\r\n•\tin else branch — `ValidatingReaderState.OnDefaultAttribute`\r\nTherefore, the field value can't be equal to `ValidatingReaderState.OnReadBinaryContent`, and the code inside if isn't executed.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Private.Xml/src/System/Xml/Core/XsdValidatingReader.cs#L1272).\r\n\r\n- [x] **Fragment 5**\r\n```\r\nprivate static string GetTypeNameDebug(TypeDesc type)\r\n{\r\n  string result;\r\n  TypeDesc typeDefinition = type.GetTypeDefinition();\r\n  if (type != typeDefinition)\r\n  {\r\n    result = GetTypeNameDebug(typeDefinition) + \"<\";\r\n    for (int i = 0; i < type.Instantiation.Length; i++)\r\n      result += (i == 0 ? \"\" : \",\") + GetTypeNameDebug(type.Instantiation[0]);\r\n    return result + \">\";\r\n  }\r\n  else\r\n  {\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nHere, maybe the following string is created from information about type: ConsoleApp1.Program.MyClass<string, int, double>. However, the `type.Instantiation` object is accessed in the loop by a constant index of 0. It is possible that it works as it should, but it looks odd because `GetTypeNameDebug(type.Instantiation[i])` is expected.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.GVMResolution.cs#L22).\r\n\r\n- [ ] **Fragment 6**\r\n```\r\nInstruction[]? GetArgumentsOnStack (MethodDefinition method)\r\n{\r\n  int length = method.GetMetadataParametersCount ();\r\n  Debug.Assert (length != 0);\r\n  if (stack_instr?.Count < length)\r\n    return null;\r\n\r\n  var result = new Instruction[length];\r\n  while (length != 0)\r\n    result[--length] = stack_instr!.Pop ();    // <=\r\n\r\n  return result;\r\n}\r\n```\r\nThe developer used the '?.' operator, suggesting that the `stack_instr` field could be `null`. Everything seemed fine, there was a check, but... no such luck. It was possible to dereference a null reference in the specified line. Most likely, the developer thought that the `stack_instr?.Count < length` expression with `stack_instr` equal to `null` would return true, and the method would exit. But no — the result would be false.\r\nMoreover, the developer suppressed the compiler message about possible dereference of a null reference with '!'. They thought that the static analysis of the compiler just failed and didn't understand the check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L1936).\r\n\r\n- [ ] **Fragment 7**\r\n```\r\nprivate HierarchyFlags GetFlags (TypeDefinition resolvedType)\r\n{\r\n  if (_cache.TryGetValue (resolvedType, out var flags))\r\n  {\r\n    return flags;\r\n  }\r\n\r\n  if (   resolvedType.Name == \"IReflect\"                // <=\r\n      && resolvedType.Namespace == \"System.Reflection\") \r\n  {\r\n    flags |= HierarchyFlags.IsSystemReflectionIReflect;\r\n  }\r\n  ....\r\n  if (resolvedType != null)                             // <=\r\n    _cache.Add (resolvedType, flags);\r\n\r\n  return flags;\r\n}\r\n```\r\nThe `resolvedType` parameter is used first but is checked for `null` before being added to the cache. That's kind of weird. The analyzer points to `resolvedType.Name`, but issues will arise even earlier. The TryGetValue method throws an exception if the first `resolvedType` argument is `null`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeHierarchyCache.cs#L28).\r\n\r\n- [x] **Fragment 8**\r\n```\r\npublic static bool IsTypeOf<T> (this TypeReference tr)\r\n{\r\n  var type = typeof (T);\r\n  return tr.Name == type.Name && tr.Namespace == tr.Namespace;\r\n}\r\n```\r\nThe analyzer has detected that two identical subexpressions are compared here. It's a simple yet frustrating error. Instead of being compared to `type.Namespace`, `tr.Namespace` is being compared to `tr.Namespace`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeReferenceExtensions.cs#L362).\r\n\r\n- [x] **Fragment 9**\r\n```\r\npublic void WriteTo(TextWriter writer, int methodRva, bool dumpRva)\r\n{\r\n  ....\r\n  switch (Flags & CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_KIND_MASK)\r\n  {\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_NONE:\r\n      writer.Write($\" CATCH: {0}\", ClassName ?? \"null\");\r\n      break;\r\n\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_FILTER:\r\n      writer.Write($\" FILTER (RVA {0:X4})\",\r\n                   ClassTokenOrFilterOffset + methodRva);\r\n      break;\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nThe developer used the string interpolation '$' character. It simply substitutes 0 into the string, and the format string will be equal to `\" CATCH: 0\"`. As a result, the text they wanted to substitute for the {0} placeholder isn't used. The same error occurs in the next case.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/EHInfo.cs#L115).\r\n\r\n- [ ] **Fragment 10**\r\n```\r\npublic TType ParseType()\r\n{\r\n  CorElementType corElemType = ReadElementType();\r\n  switch (corElemType)\r\n  {\r\n    ....\r\n    case CorElementType.ELEMENT_TYPE_GENERICINST:\r\n    {\r\n      TType genericType = ParseType();\r\n      uint typeArgCount = ReadUInt();\r\n      var outerDecoder = new R2RSignatureDecoder<....>(_provider,\r\n                                                       Context,\r\n                                                       _outerReader, // <=\r\n                                                       _image,\r\n                                                       _offset,\r\n                                                       _outerReader, // <=\r\n                                                       _contextReader);\r\n  }\r\n}\r\n```\r\nThe `_outerReader` argument is passed to the constructor twice. If we look at the constructor declaration, we can see that the constructor has the metadataReader parameter:\r\n```\r\npublic R2RSignatureDecoder(IR2RSignatureTypeProvider<....> provider,\r\n                           TGenericContext context,\r\n                           MetadataReader metadataReader,  // <=\r\n                           byte[] signature,\r\n                           int offset,\r\n                           MetadataReader outerReader,     // <=\r\n                           ReadyToRunReader contextReader,\r\n                           bool skipOverrideMetadataReader = false)\r\n{\r\n  ....\r\n}\r\n```\r\nThe `_metadataReader` field is available when calling the constructor. Perhaps it would be better to use this field as the third argument.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/ReadyToRunSignature.cs#L639).\r\n\r\n- [x] **Fragment 11**\r\n```\r\nprotected ComputedInstanceFieldLayout ComputeAutoFieldLayout(....)\r\n{\r\n  bool requiresAlign8 \r\n    =    !largestAlignmentRequired.IsIndeterminate \r\n      && context.Target.PointerSize == 4\r\n      && context.Target.GetObjectAlignment(....).AsInt > 4 \r\n      && context.Target.PointerSize == 4;\r\n}\r\n```\r\nThe expression checks `context.Target.PointerSize == 4` twice. In the `GetObjectAlignment` instance method, `context.Target.PointerSize` isn't changed. It's possible that something else should be checked here, or maybe it's just an unnecessary check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/Common/TypeSystem/Common/MetadataFieldLayoutAlgorithm.cs#L521).",
    "number": 96310,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-25T16:05:19Z",
          "user": "En3Tho"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-25T17:19:31Z",
          "user": "Bykiev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-26T01:58:27Z",
          "user": "filipnavara"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2023-12-27T17:54:17Z",
          "user": "omariom"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOC02uYw=="
    },
    "updatedAt": "2024-07-09T12:53:13Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-system-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nHi!\r\nI have checked the .NET 8 release version with the PVS-Studio static analyzer. If you are interested, you could take a look at the errors and suspicious code fragments we found:\r\n\r\n**Fragment 1**\r\n```\r\nprivate static bool IsRoamingSetting(SettingsProperty setting)\r\n{\r\n  List<KeyValuePair<int, ServiceCallSite>> callSitesByIndex = new();\r\n  ....\r\n  SettingsManageabilityAttribute manageAttr = ....;\r\n  return    manageAttr != null \r\n         && ((manageAttr.Manageability & SettingsManageability.Roaming) ==\r\n             SettingsManageability.Roaming);\r\n}\r\n```\r\nIn this case, the value of the `SettingsManageability.Roaming` enumeration constant is 0. Since the result of a bitwise AND with an operand equal to 0 is always 0, it means that 0 is compared to 0. The output of the ((manageAttr.Manageability & `SettingsManageability.Roaming) == SettingsManageability.Roaming)` expression is always true.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Configuration.ConfigurationManager/src/System/Configuration/LocalFileSettingsProvider.cs#L408).\r\n\r\n**Fragment 2**\r\n```\r\ninternal DataView(....)\r\n{\r\n  ....\r\n  DataCommonEventSource.Log.Trace(\"<ds.DataView.DataView|API> %d#, table=%d, \r\n                                   RowState=%d{ds.DataViewRowState}\\n\",\r\n                ObjectID, (table != null) ? table.ObjectID : 0, (int)RowState);\r\n  ....\r\n}\r\n```\r\nThe analyzer reports an incorrect format string in the first argument of the Trace method. Let's take a look at the method:\r\n```\r\ninternal void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)\r\n{\r\n  if (!Log.IsEnabled()) return;\r\n  Trace(string.Format(format, arg0, arg1, arg2));\r\n}\r\n```\r\nIndeed, the first argument is used as the format string. Arguments are substituted into this line. However, the arguments are to be substituted into placeholders of the format {0}, {1}, etc. There are no such placeholders in this string.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/DataView.cs#L163).\r\n\r\n**Fragment 3**\r\n```\r\npublic static SqlDecimal operator /(SqlDecimal x, SqlDecimal y)\r\n{\r\n  ....\r\n  bScaleD = x._bScale;\r\n  bPrecD = x._bPrec;\r\n  ResScale = Math.Max(x._bScale + y._bPrec + 1, s_cNumeDivScaleMin);\r\n  ResInteger = x._bPrec - x._bScale + y._bScale;\r\n  ResPrec = ResScale + x._bPrec + y._bPrec + 1;               // <=\r\n  MinScale = Math.Min(ResScale, s_cNumeDivScaleMin);\r\n\r\n  ResInteger = Math.Min(ResInteger, s_NUMERIC_MAX_PRECISION);\r\n  ResPrec = ResInteger + ResScale;                            // <=\r\n  ....\r\n}\r\n```\r\nWe can see the `ResPrec` variable is assigned values twice here.\r\nSince `ResPrec` isn't used between these two operations, it indicates an error.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/SQLTypes/SQLDecimal.cs#L1653).\r\n\r\n**Fragment 4**\r\n```\r\npublic override void MoveToAttribute(int i)\r\n{\r\n  ....\r\n  _currentAttrIndex = i;\r\n  if (i < _coreReaderAttributeCount)\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnAttribute;\r\n  }\r\n  else\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnDefaultAttribute;\r\n  }\r\n\r\n  if (_validationState == ValidatingReaderState.OnReadBinaryContent)\r\n  {\r\n    Debug.Assert(_readBinaryHelper != null);\r\n    _readBinaryHelper.Finish();\r\n    _validationState = _savedState;\r\n  }\r\n}\r\n```\r\nAnalyzer has detected that the last `if (_validationState == ValidatingReaderState.OnReadBinaryContent)` condition is always false. Let's see why it may happen.\r\nLet's take a look at the first `if` statement. There, the `_validationState` field is assigned:\r\n•\tin then branch — `ValidatingReaderState.OnAttribute`\r\n•\tin else branch — `ValidatingReaderState.OnDefaultAttribute`\r\nTherefore, the field value can't be equal to `ValidatingReaderState.OnReadBinaryContent`, and the code inside if isn't executed.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Private.Xml/src/System/Xml/Core/XsdValidatingReader.cs#L1272).\r\n\r\n**Fragment 5**\r\n```\r\nprivate static string GetTypeNameDebug(TypeDesc type)\r\n{\r\n  string result;\r\n  TypeDesc typeDefinition = type.GetTypeDefinition();\r\n  if (type != typeDefinition)\r\n  {\r\n    result = GetTypeNameDebug(typeDefinition) + \"<\";\r\n    for (int i = 0; i < type.Instantiation.Length; i++)\r\n      result += (i == 0 ? \"\" : \",\") + GetTypeNameDebug(type.Instantiation[0]);\r\n    return result + \">\";\r\n  }\r\n  else\r\n  {\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nHere, maybe the following string is created from information about type: ConsoleApp1.Program.MyClass<string, int, double>. However, the `type.Instantiation` object is accessed in the loop by a constant index of 0. It is possible that it works as it should, but it looks odd because `GetTypeNameDebug(type.Instantiation[i])` is expected.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.GVMResolution.cs#L22).\r\n\r\n**Fragment 6**\r\n```\r\nInstruction[]? GetArgumentsOnStack (MethodDefinition method)\r\n{\r\n  int length = method.GetMetadataParametersCount ();\r\n  Debug.Assert (length != 0);\r\n  if (stack_instr?.Count < length)\r\n    return null;\r\n\r\n  var result = new Instruction[length];\r\n  while (length != 0)\r\n    result[--length] = stack_instr!.Pop ();    // <=\r\n\r\n  return result;\r\n}\r\n```\r\nThe developer used the '?.' operator, suggesting that the `stack_instr` field could be `null`. Everything seemed fine, there was a check, but... no such luck. It was possible to dereference a null reference in the specified line. Most likely, the developer thought that the `stack_instr?.Count < length` expression with `stack_instr` equal to `null` would return true, and the method would exit. But no — the result would be false.\r\nMoreover, the developer suppressed the compiler message about possible dereference of a null reference with '!'. They thought that the static analysis of the compiler just failed and didn't understand the check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L1936).\r\n\r\n**Fragment 7**\r\n```\r\nprivate HierarchyFlags GetFlags (TypeDefinition resolvedType)\r\n{\r\n  if (_cache.TryGetValue (resolvedType, out var flags))\r\n  {\r\n    return flags;\r\n  }\r\n\r\n  if (   resolvedType.Name == \"IReflect\"                // <=\r\n      && resolvedType.Namespace == \"System.Reflection\") \r\n  {\r\n    flags |= HierarchyFlags.IsSystemReflectionIReflect;\r\n  }\r\n  ....\r\n  if (resolvedType != null)                             // <=\r\n    _cache.Add (resolvedType, flags);\r\n\r\n  return flags;\r\n}\r\n```\r\nThe `resolvedType` parameter is used first but is checked for `null` before being added to the cache. That's kind of weird. The analyzer points to `resolvedType.Name`, but issues will arise even earlier. The TryGetValue method throws an exception if the first `resolvedType` argument is `null`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeHierarchyCache.cs#L28).\r\n\r\n**Fragment 8**\r\n```\r\npublic static bool IsTypeOf<T> (this TypeReference tr)\r\n{\r\n  var type = typeof (T);\r\n  return tr.Name == type.Name && tr.Namespace == tr.Namespace;\r\n}\r\n```\r\nThe analyzer has detected that two identical subexpressions are compared here. It's a simple yet frustrating error. Instead of being compared to `type.Namespace`, `tr.Namespace` is being compared to `tr.Namespace`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeReferenceExtensions.cs#L362).\r\n\r\n**Fragment 9**\r\n```\r\npublic void WriteTo(TextWriter writer, int methodRva, bool dumpRva)\r\n{\r\n  ....\r\n  switch (Flags & CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_KIND_MASK)\r\n  {\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_NONE:\r\n      writer.Write($\" CATCH: {0}\", ClassName ?? \"null\");\r\n      break;\r\n\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_FILTER:\r\n      writer.Write($\" FILTER (RVA {0:X4})\",\r\n                   ClassTokenOrFilterOffset + methodRva);\r\n      break;\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nThe developer used the string interpolation '$' character. It simply substitutes 0 into the string, and the format string will be equal to `\" CATCH: 0\"`. As a result, the text they wanted to substitute for the {0} placeholder isn't used. The same error occurs in the next case.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/EHInfo.cs#L115).\r\n\r\n**Fragment 10**\r\n```\r\npublic TType ParseType()\r\n{\r\n  CorElementType corElemType = ReadElementType();\r\n  switch (corElemType)\r\n  {\r\n    ....\r\n    case CorElementType.ELEMENT_TYPE_GENERICINST:\r\n    {\r\n      TType genericType = ParseType();\r\n      uint typeArgCount = ReadUInt();\r\n      var outerDecoder = new R2RSignatureDecoder<....>(_provider,\r\n                                                       Context,\r\n                                                       _outerReader, // <=\r\n                                                       _image,\r\n                                                       _offset,\r\n                                                       _outerReader, // <=\r\n                                                       _contextReader);\r\n  }\r\n}\r\n```\r\nThe `_outerReader` argument is passed to the constructor twice. If we look at the constructor declaration, we can see that the constructor has the metadataReader parameter:\r\n```\r\npublic R2RSignatureDecoder(IR2RSignatureTypeProvider<....> provider,\r\n                           TGenericContext context,\r\n                           MetadataReader metadataReader,  // <=\r\n                           byte[] signature,\r\n                           int offset,\r\n                           MetadataReader outerReader,     // <=\r\n                           ReadyToRunReader contextReader,\r\n                           bool skipOverrideMetadataReader = false)\r\n{\r\n  ....\r\n}\r\n```\r\nThe `_metadataReader` field is available when calling the constructor. Perhaps it would be better to use this field as the third argument.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/ReadyToRunSignature.cs#L639).\r\n\r\n**Fragment 11**\r\n```\r\nprotected ComputedInstanceFieldLayout ComputeAutoFieldLayout(....)\r\n{\r\n  bool requiresAlign8 \r\n    =    !largestAlignmentRequired.IsIndeterminate \r\n      && context.Target.PointerSize == 4\r\n      && context.Target.GetObjectAlignment(....).AsInt > 4 \r\n      && context.Target.PointerSize == 4;\r\n}\r\n```\r\nThe expression checks `context.Target.PointerSize == 4` twice. In the `GetObjectAlignment` instance method, `context.Target.PointerSize` isn't changed. It's possible that something else should be checked here, or maybe it's just an unnecessary check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/Common/TypeSystem/Common/MetadataFieldLayoutAlgorithm.cs#L521).\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>rip-mm</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Configuration`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-12-25T17:23:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-25T17:23:36Z",
          "id": "IC_kwDODI9FZc5vZ52T"
        },
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nHi!\r\nI have checked the .NET 8 release version with the PVS-Studio static analyzer. If you are interested, you could take a look at the errors and suspicious code fragments we found:\r\n\r\n**Fragment 1**\r\n```\r\nprivate static bool IsRoamingSetting(SettingsProperty setting)\r\n{\r\n  List<KeyValuePair<int, ServiceCallSite>> callSitesByIndex = new();\r\n  ....\r\n  SettingsManageabilityAttribute manageAttr = ....;\r\n  return    manageAttr != null \r\n         && ((manageAttr.Manageability & SettingsManageability.Roaming) ==\r\n             SettingsManageability.Roaming);\r\n}\r\n```\r\nIn this case, the value of the `SettingsManageability.Roaming` enumeration constant is 0. Since the result of a bitwise AND with an operand equal to 0 is always 0, it means that 0 is compared to 0. The output of the ((manageAttr.Manageability & `SettingsManageability.Roaming) == SettingsManageability.Roaming)` expression is always true.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Configuration.ConfigurationManager/src/System/Configuration/LocalFileSettingsProvider.cs#L408).\r\n\r\n**Fragment 2**\r\n```\r\ninternal DataView(....)\r\n{\r\n  ....\r\n  DataCommonEventSource.Log.Trace(\"<ds.DataView.DataView|API> %d#, table=%d, \r\n                                   RowState=%d{ds.DataViewRowState}\\n\",\r\n                ObjectID, (table != null) ? table.ObjectID : 0, (int)RowState);\r\n  ....\r\n}\r\n```\r\nThe analyzer reports an incorrect format string in the first argument of the Trace method. Let's take a look at the method:\r\n```\r\ninternal void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)\r\n{\r\n  if (!Log.IsEnabled()) return;\r\n  Trace(string.Format(format, arg0, arg1, arg2));\r\n}\r\n```\r\nIndeed, the first argument is used as the format string. Arguments are substituted into this line. However, the arguments are to be substituted into placeholders of the format {0}, {1}, etc. There are no such placeholders in this string.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/DataView.cs#L163).\r\n\r\n**Fragment 3**\r\n```\r\npublic static SqlDecimal operator /(SqlDecimal x, SqlDecimal y)\r\n{\r\n  ....\r\n  bScaleD = x._bScale;\r\n  bPrecD = x._bPrec;\r\n  ResScale = Math.Max(x._bScale + y._bPrec + 1, s_cNumeDivScaleMin);\r\n  ResInteger = x._bPrec - x._bScale + y._bScale;\r\n  ResPrec = ResScale + x._bPrec + y._bPrec + 1;               // <=\r\n  MinScale = Math.Min(ResScale, s_cNumeDivScaleMin);\r\n\r\n  ResInteger = Math.Min(ResInteger, s_NUMERIC_MAX_PRECISION);\r\n  ResPrec = ResInteger + ResScale;                            // <=\r\n  ....\r\n}\r\n```\r\nWe can see the `ResPrec` variable is assigned values twice here.\r\nSince `ResPrec` isn't used between these two operations, it indicates an error.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Data.Common/src/System/Data/SQLTypes/SQLDecimal.cs#L1653).\r\n\r\n**Fragment 4**\r\n```\r\npublic override void MoveToAttribute(int i)\r\n{\r\n  ....\r\n  _currentAttrIndex = i;\r\n  if (i < _coreReaderAttributeCount)\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnAttribute;\r\n  }\r\n  else\r\n  {\r\n    ....\r\n    _validationState = ValidatingReaderState.OnDefaultAttribute;\r\n  }\r\n\r\n  if (_validationState == ValidatingReaderState.OnReadBinaryContent)\r\n  {\r\n    Debug.Assert(_readBinaryHelper != null);\r\n    _readBinaryHelper.Finish();\r\n    _validationState = _savedState;\r\n  }\r\n}\r\n```\r\nAnalyzer has detected that the last `if (_validationState == ValidatingReaderState.OnReadBinaryContent)` condition is always false. Let's see why it may happen.\r\nLet's take a look at the first `if` statement. There, the `_validationState` field is assigned:\r\n•\tin then branch — `ValidatingReaderState.OnAttribute`\r\n•\tin else branch — `ValidatingReaderState.OnDefaultAttribute`\r\nTherefore, the field value can't be equal to `ValidatingReaderState.OnReadBinaryContent`, and the code inside if isn't executed.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/libraries/System.Private.Xml/src/System/Xml/Core/XsdValidatingReader.cs#L1272).\r\n\r\n**Fragment 5**\r\n```\r\nprivate static string GetTypeNameDebug(TypeDesc type)\r\n{\r\n  string result;\r\n  TypeDesc typeDefinition = type.GetTypeDefinition();\r\n  if (type != typeDefinition)\r\n  {\r\n    result = GetTypeNameDebug(typeDefinition) + \"<\";\r\n    for (int i = 0; i < type.Instantiation.Length; i++)\r\n      result += (i == 0 ? \"\" : \",\") + GetTypeNameDebug(type.Instantiation[0]);\r\n    return result + \">\";\r\n  }\r\n  else\r\n  {\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nHere, maybe the following string is created from information about type: ConsoleApp1.Program.MyClass<string, int, double>. However, the `type.Instantiation` object is accessed in the loop by a constant index of 0. It is possible that it works as it should, but it looks odd because `GetTypeNameDebug(type.Instantiation[i])` is expected.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.GVMResolution.cs#L22).\r\n\r\n**Fragment 6**\r\n```\r\nInstruction[]? GetArgumentsOnStack (MethodDefinition method)\r\n{\r\n  int length = method.GetMetadataParametersCount ();\r\n  Debug.Assert (length != 0);\r\n  if (stack_instr?.Count < length)\r\n    return null;\r\n\r\n  var result = new Instruction[length];\r\n  while (length != 0)\r\n    result[--length] = stack_instr!.Pop ();    // <=\r\n\r\n  return result;\r\n}\r\n```\r\nThe developer used the '?.' operator, suggesting that the `stack_instr` field could be `null`. Everything seemed fine, there was a check, but... no such luck. It was possible to dereference a null reference in the specified line. Most likely, the developer thought that the `stack_instr?.Count < length` expression with `stack_instr` equal to `null` would return true, and the method would exit. But no — the result would be false.\r\nMoreover, the developer suppressed the compiler message about possible dereference of a null reference with '!'. They thought that the static analysis of the compiler just failed and didn't understand the check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L1936).\r\n\r\n**Fragment 7**\r\n```\r\nprivate HierarchyFlags GetFlags (TypeDefinition resolvedType)\r\n{\r\n  if (_cache.TryGetValue (resolvedType, out var flags))\r\n  {\r\n    return flags;\r\n  }\r\n\r\n  if (   resolvedType.Name == \"IReflect\"                // <=\r\n      && resolvedType.Namespace == \"System.Reflection\") \r\n  {\r\n    flags |= HierarchyFlags.IsSystemReflectionIReflect;\r\n  }\r\n  ....\r\n  if (resolvedType != null)                             // <=\r\n    _cache.Add (resolvedType, flags);\r\n\r\n  return flags;\r\n}\r\n```\r\nThe `resolvedType` parameter is used first but is checked for `null` before being added to the cache. That's kind of weird. The analyzer points to `resolvedType.Name`, but issues will arise even earlier. The TryGetValue method throws an exception if the first `resolvedType` argument is `null`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeHierarchyCache.cs#L28).\r\n\r\n**Fragment 8**\r\n```\r\npublic static bool IsTypeOf<T> (this TypeReference tr)\r\n{\r\n  var type = typeof (T);\r\n  return tr.Name == type.Name && tr.Namespace == tr.Namespace;\r\n}\r\n```\r\nThe analyzer has detected that two identical subexpressions are compared here. It's a simple yet frustrating error. Instead of being compared to `type.Namespace`, `tr.Namespace` is being compared to `tr.Namespace`.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/tools/illink/src/linker/Linker/TypeReferenceExtensions.cs#L362).\r\n\r\n**Fragment 9**\r\n```\r\npublic void WriteTo(TextWriter writer, int methodRva, bool dumpRva)\r\n{\r\n  ....\r\n  switch (Flags & CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_KIND_MASK)\r\n  {\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_NONE:\r\n      writer.Write($\" CATCH: {0}\", ClassName ?? \"null\");\r\n      break;\r\n\r\n    case CorExceptionFlag.COR_ILEXCEPTION_CLAUSE_FILTER:\r\n      writer.Write($\" FILTER (RVA {0:X4})\",\r\n                   ClassTokenOrFilterOffset + methodRva);\r\n      break;\r\n    ....\r\n  }\r\n  ....\r\n}\r\n```\r\nThe developer used the string interpolation '$' character. It simply substitutes 0 into the string, and the format string will be equal to `\" CATCH: 0\"`. As a result, the text they wanted to substitute for the {0} placeholder isn't used. The same error occurs in the next case.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/EHInfo.cs#L115).\r\n\r\n**Fragment 10**\r\n```\r\npublic TType ParseType()\r\n{\r\n  CorElementType corElemType = ReadElementType();\r\n  switch (corElemType)\r\n  {\r\n    ....\r\n    case CorElementType.ELEMENT_TYPE_GENERICINST:\r\n    {\r\n      TType genericType = ParseType();\r\n      uint typeArgCount = ReadUInt();\r\n      var outerDecoder = new R2RSignatureDecoder<....>(_provider,\r\n                                                       Context,\r\n                                                       _outerReader, // <=\r\n                                                       _image,\r\n                                                       _offset,\r\n                                                       _outerReader, // <=\r\n                                                       _contextReader);\r\n  }\r\n}\r\n```\r\nThe `_outerReader` argument is passed to the constructor twice. If we look at the constructor declaration, we can see that the constructor has the metadataReader parameter:\r\n```\r\npublic R2RSignatureDecoder(IR2RSignatureTypeProvider<....> provider,\r\n                           TGenericContext context,\r\n                           MetadataReader metadataReader,  // <=\r\n                           byte[] signature,\r\n                           int offset,\r\n                           MetadataReader outerReader,     // <=\r\n                           ReadyToRunReader contextReader,\r\n                           bool skipOverrideMetadataReader = false)\r\n{\r\n  ....\r\n}\r\n```\r\nThe `_metadataReader` field is available when calling the constructor. Perhaps it would be better to use this field as the third argument.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/aot/ILCompiler.Reflection.ReadyToRun/ReadyToRunSignature.cs#L639).\r\n\r\n**Fragment 11**\r\n```\r\nprotected ComputedInstanceFieldLayout ComputeAutoFieldLayout(....)\r\n{\r\n  bool requiresAlign8 \r\n    =    !largestAlignmentRequired.IsIndeterminate \r\n      && context.Target.PointerSize == 4\r\n      && context.Target.GetObjectAlignment(....).AsInt > 4 \r\n      && context.Target.PointerSize == 4;\r\n}\r\n```\r\nThe expression checks `context.Target.PointerSize == 4` twice. In the `GetObjectAlignment` instance method, `context.Target.PointerSize` isn't changed. It's possible that something else should be checked here, or maybe it's just an unnecessary check.\r\n[Link to the method](https://github.com/dotnet/runtime/blob/9cc490e89f635db3712d8e955e85b232a4c3f560/src/coreclr/tools/Common/TypeSystem/Common/MetadataFieldLayoutAlgorithm.cs#L521).\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>rip-mm</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2023-12-25T17:24:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-25T17:24:05Z",
          "id": "IC_kwDODI9FZc5vZ54V"
        },
        {
          "author": "filipnavara",
          "body": "> Fragment 1\r\n\r\nThis code dates back all the way to the .NET Framework. Unfortunately, it seems to be something that slipped through the API review. The `SettingsManageability` enum definition doesn't make any sense as it is. That said, you can still achieve the desired effect by including the `SettingsManageabilityAttribute` (implies `SettingsManageability.Roaming`) or not including it (implies local profile). The code error resulting from this API definition error is quite harmless. Ideally we could fix the API to add `SettingsManageability.Local` with non-zero value but since it's a legacy API I don't think that is worth the effort. We may just remove the `((manageAttr.Manageability & SettingsManageability.Roaming) == SettingsManageability.Roaming)` condition and add a comment instead. Thoughts?\r\n\r\n> Fragment 8/9\r\n\r\nSubmitted PRs to fix those since they are obvious cut & paste errors.\r\n ",
          "createdAt": "2023-12-26T15:58:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-26T15:58:34Z",
          "id": "IC_kwDODI9FZc5vcFM6"
        },
        {
          "author": "filipnavara",
          "body": "> Fragment 11\r\n\r\nIt was pointed out in the original PR (https://github.com/dotnet/runtime/pull/73738/files#r943221072) and never fixed.",
          "createdAt": "2023-12-26T16:04:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2023-12-26T16:04:50Z",
          "id": "IC_kwDODI9FZc5vcGFB"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOb3BhQQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/96310",
    "title": "Strange code fragments"
  },
  {
    "author": "richlander",
    "labels": [
      "arch-wasm",
      "area-Meta",
      "tracking",
      "os-wasi"
    ],
    "createdAt": "2024-01-02T21:42:15Z",
    "body": "# WASI Developer Experience Goals\n\n[WebAssembly System Interface](https://github.com/WebAssembly/WASI) is an exciting technology. Lots of work has already gone into enabling [C# with WASI](https://devblogs.microsoft.com/dotnet/extending-web-assembly-to-the-cloud/). \n[dotnet/runtime #65895](https://github.com/dotnet/runtime/issues/65895) defines a set of low-level requirements for providing a working implementation. We can up-level that into a set of developer experience goals.\n\nThe following are proposed changes in various categories. Please propose your own.\n\nRelated (interview about WASI and C#): https://www.youtube.com/watch?v=fnAjxzMPPqk\n\n## Building\n\n- Remove requirement for `runtimeconfig.template` file.\n- Enable building single file wasm files by default (which may require installing the WASI SDK with the workload).\n- Enable publishing AOT with a gesture similar to `PublishAot`.\n\n## Running\n\n- Enable using Wasm runtime args with `dotnet run` (otherwise `dotnet run` isn't generally useful).\n- Remove the existing `dotnet run` \"helpful\" output.\n\n## Programmability\n\n- Enable importing popular WASI functionality (possibly worlds) as NuGet packages.\n- Import other WASI functionality with a reference to a WIT file.\n- Import Preview 2 components.\n- Enable async with WASI interfaces.\n- Enable `HttpClient` as-is (particularly for `https` endpoints).\n- Enable minimal APIs (for handling Web requests).\n\nMore detailed work breakdown https://github.com/dotnet/runtime/issues/65895",
    "number": 96419,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HOORAY",
          "createdAt": "2024-01-02T21:48:01Z",
          "user": "squillace"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-01-03T07:06:16Z",
          "user": "SommerEngineering"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-01-05T11:52:20Z",
          "user": "radu-matei"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-01-05T13:58:16Z",
          "user": "mikkelhegn"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-05T14:41:58Z",
          "user": "Viir"
        },
        {
          "content": "HEART",
          "createdAt": "2024-01-05T14:42:01Z",
          "user": "Viir"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-01-05T14:42:05Z",
          "user": "Viir"
        },
        {
          "content": "HEART",
          "createdAt": "2024-01-08T21:33:26Z",
          "user": "D3-LucaPiombino"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-11T20:53:37Z",
          "user": "silesmo"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-01-18T08:37:54Z",
          "user": "Kukks"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-02-08T21:25:41Z",
          "user": "radu-matei"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-08T21:25:43Z",
          "user": "radu-matei"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-02-22T08:42:51Z",
          "user": "hwoodiwiss"
        },
        {
          "content": "HEART",
          "createdAt": "2024-02-27T15:11:23Z",
          "user": "flibbertigibbet-uk"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-03-02T17:10:15Z",
          "user": "casperOne"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-03-07T11:50:25Z",
          "user": "ljtill"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-04-03T21:41:19Z",
          "user": "ThorstenHans"
        },
        {
          "content": "HEART",
          "createdAt": "2024-04-03T21:41:21Z",
          "user": "ThorstenHans"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-04-04T10:18:05Z",
          "user": "KaiWalter"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-08T13:09:28Z",
          "user": "fl-lutz"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-08T17:55:33Z",
          "user": "relcodedev"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-04-26T23:19:24Z",
          "user": "ChristianWeyer"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-04-26T23:19:25Z",
          "user": "ChristianWeyer"
        },
        {
          "content": "HEART",
          "createdAt": "2024-04-26T23:19:26Z",
          "user": "ChristianWeyer"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-02T03:54:55Z",
          "user": "tonidy"
        },
        {
          "content": "HEART",
          "createdAt": "2024-06-02T03:54:56Z",
          "user": "tonidy"
        },
        {
          "content": "HEART",
          "createdAt": "2024-08-15T17:48:31Z",
          "user": "rajsite"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-08-15T17:48:34Z",
          "user": "rajsite"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-15T17:48:34Z",
          "user": "rajsite"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-28T17:56:45Z",
          "user": "tomap"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-18T08:32:10Z",
          "user": "Ghost4Man"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-05T12:59:27Z",
          "user": "barabadzhi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-08-29T07:12:47Z",
          "user": "Alexgoon"
        }
      ],
      "totalCount": 33,
      "endCursor": "Y3Vyc29yOnYyOpHODNOnHA=="
    },
    "updatedAt": "2024-12-12T11:16:13Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "jkotas",
          "body": "cc @yowl @silesmo\r\n",
          "createdAt": "2024-01-02T22:28:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-02T22:30:17Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-11T20:53:55Z",
                "user": "silesmo"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODSIs2Q=="
          },
          "updatedAt": "2024-01-02T22:28:51Z",
          "id": "IC_kwDODI9FZc5vvMVf"
        },
        {
          "author": null,
          "body": "Tagging subscribers to 'arch-wasm': @lewing\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n# WASI Developer Experience Goals\r\n\r\n[WebAssembly System Interface](https://github.com/WebAssembly/WASI) is an exciting technology. Lots of work has already gone into enabling [C# with WASI](https://devblogs.microsoft.com/dotnet/extending-web-assembly-to-the-cloud/). \r\n[dotnet/runtime #65895](https://github.com/dotnet/runtime/issues/65895) defines a set of low-level requirements for providing a working implementation. We can up-level that into a set of developer experience goals.\r\n\r\nThe following are proposed changes in various categories. Please propose your own.\r\n\r\nRelated (interview about WASI and C#): https://www.youtube.com/watch?v=fnAjxzMPPqk\r\n\r\n## Building\r\n\r\n- Remove requirement for `runtimeconfig.template` file.\r\n- Enable building single file wasm files by default (which may require installing the WASI SDK with the workload).\r\n- Enable publishing AOT with a gesture similar to `PublishAot`.\r\n\r\n## Running\r\n\r\n- Enable using Wasm runtime args with `dotnet run` (otherwise `dotnet run` isn't generally useful).\r\n- Remove the existing `dotnet run` \"helpful\" output.\r\n\r\n## Programmability\r\n\r\n- Enable importing popular WASI functionality (possibly worlds) as NuGet packages.\r\n- Import other WASI functionality with a reference to a WIT file.\r\n- Import Preview 2 components.\r\n- Enable async with WASI interfaces.\r\n- Enable `HttpClient` as-is (particularly for `https` endpoints).\r\n- Enable minimal APIs (for handling Web requests).\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>richlander</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`arch-wasm`, `untriaged`, `needs-area-label`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-01-02T22:29:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-02T22:29:07Z",
          "id": "IC_kwDODI9FZc5vvMYz"
        },
        {
          "author": "ReneeGA2020",
          "body": "> Enable building single file wasm files by default\r\n\r\n\r\nHopefully, it still allow me to do <WasmSingleFileBundle>false</WasmSingleFileBundle> to opt out. As my workload requires standalone files to be compiled separately.\r\n\r\n\r\nAlso, a question about WIT importing. the WIT file spec does not seem to leave any room for object's 'instance' reference. The 'interface' in WIT were mapped into statics funtions in C#. My understanding is that not all wasm supported language are OOP. Still, it's not so great if I'm a lib wrote by an oop language but I cannot expose an oop method to a consumer lib that was also wrote by n oop language. Not sure if the .NET team will try to do some extra things around that.",
          "createdAt": "2024-01-03T06:50:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-03T16:01:39Z",
                "user": "richlander"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODRI5kQ=="
          },
          "updatedAt": "2024-01-03T06:50:41Z",
          "id": "IC_kwDODI9FZc5vwQZe"
        },
        {
          "author": "yowl",
          "body": "> Not sure if the .NET team will try to do some extra things around that.\r\n\r\nThis scenario is probably handled in the component model MVP with WIT `resource`s . e.g.\r\n\r\n```\r\nresource blob {\r\n    constructor(init: list<u8>);\r\n    write: func(bytes: list<u8>);\r\n    read: func(n: u32) -> list<u8>;\r\n    merge: static func(lhs: borrow<blob>, rhs: borrow<blob>) -> blob;\r\n}\r\n```\r\n\r\n`wit-bindgen` for c# does not currently support resources, hopefully this month we will have something.",
          "createdAt": "2024-01-04T18:36:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-05T08:47:48Z",
                "user": "silesmo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-15T09:48:54Z",
                "user": "ReneeGA2020"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODSl37w=="
          },
          "updatedAt": "2024-01-04T18:37:08Z",
          "id": "IC_kwDODI9FZc5v6ZUP"
        },
        {
          "author": "jpflueger",
          "body": "This is super exciting! I'm not a contributor here but I work at [Fermyon](https://www.fermyon.com) and we have a serverless webassembly project called [Spin](https://www.fermyon.com/spin). We've built an [SDK](https://github.com/fermyon/spin-dotnet-sdk) around Steve Sanderson's Wasi SDK previously and I have tried to update it for dotnet 8 with some success but I have a couple of suggestions/questions.\r\n\r\nIt would be nice to be able to use a library project that doesn't require a main function and have the output wasm be a wasi preview 2 component. I think this would be implied by `Enable building single file wasm files by default` but I just wanted to make sure.\r\n\r\nWill `Enable minimal APIs (for handling Web requests).` be targeting the [wasi-http](https://github.com/WebAssembly/wasi-http) spec (specifically `wasi:http/incoming-handler`)?",
          "createdAt": "2024-01-04T18:44:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-26T23:24:15Z",
                "user": "ChristianWeyer"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-02T03:56:45Z",
                "user": "tonidy"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHODkLtww=="
          },
          "updatedAt": "2024-01-04T18:44:32Z",
          "id": "IC_kwDODI9FZc5v6btd"
        },
        {
          "author": "yowl",
          "body": "> It would be nice to be able to use a library project that doesn't require a main function\r\n\r\nThis is should be supported now by the NAOT compiler option, I'm not sure where the mono interpreter is with that.  However the SDK from Steve needs updating I believe.\r\n\r\nRegards HTTP, there is https://github.com/dotnet/runtimelab/issues/2468 where some conversation has taken place, but nothing more as far as I know.  Could be there is work internal to Microsoft as I'm just an outside contributor.",
          "createdAt": "2024-01-04T19:07:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-04T19:07:53Z",
          "id": "IC_kwDODI9FZc5v6jnI"
        },
        {
          "author": "richlander",
          "body": "Hi @jpflueger! We're well aware of your work on Spin. It would be good to talk about moving the two projects forward in some coordinated way. This includes how [spiderlightning](https://github.com/deislabs/spiderlightning) fits into the picture.\r\n\r\n> library project that doesn't require a main function\r\n\r\nYes. That's a good goal / scenario.\r\n\r\n> minimal APIs\r\n\r\nI haven't talked to the Web team, but implementing that on top of `wasi-http` makes sense to me. \r\n",
          "createdAt": "2024-01-04T19:34:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-05T08:49:04Z",
                "user": "silesmo"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-26T23:24:09Z",
                "user": "ChristianWeyer"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-02T03:57:43Z",
                "user": "tonidy"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODkLt6w=="
          },
          "updatedAt": "2024-01-04T19:34:53Z",
          "id": "IC_kwDODI9FZc5v6ryl"
        },
        {
          "author": "silesmo",
          "body": "We have the same need at nor2 for wasi-http for our runtime n2. So that's definitely a goal to be able to support @jpflueger.",
          "createdAt": "2024-01-05T08:52:20Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-05T08:52:20Z",
          "id": "IC_kwDODI9FZc5v9P1c"
        },
        {
          "author": "ReneeGA2020",
          "body": "Speaking of dotnet run, will dotnet test also available for wasi? Or what is Microsoft's plan for best practice of unit testing on wasi?",
          "createdAt": "2024-02-06T03:20:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-06T03:20:22Z",
          "id": "IC_kwDODI9FZc5y9dNC"
        },
        {
          "author": "flibbertigibbet-uk",
          "body": "Async between WASI components authored in different language runtimes looks particularly gnarly to implement, at least that was the impression given at the Bytecode Alliance plumbers summit a few weeks ago.\r\n\r\nI would gladly accept an interim release minus async support if it enables experimental WASI preview-2 development on .Net 9 a few months earlier.",
          "createdAt": "2024-02-27T15:39:45Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-02-28T14:07:10Z",
          "id": "IC_kwDODI9FZc51O6ll"
        },
        {
          "author": "tschneidereit",
          "body": "@flibbertigibbet-uk the complications around async composition between components shouldn't really impact the toolchain here, which should be able to target the entirety of WASI preview2 without issues. ",
          "createdAt": "2024-03-01T11:23:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-01T18:07:01Z",
                "user": "technosophos"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-03-20T02:08:44Z",
                "user": "flibbertigibbet-uk"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-01T15:00:22Z",
                "user": "radu-matei"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-04-26T23:25:28Z",
                "user": "ChristianWeyer"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHODfuUJw=="
          },
          "updatedAt": "2024-03-01T11:23:36Z",
          "id": "IC_kwDODI9FZc51mcdu"
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHOdZnHbg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/96419",
    "title": "WASI Developer Experience Goals"
  },
  {
    "author": "DEVBOX10",
    "labels": [
      "api-suggestion",
      "area-Meta"
    ],
    "createdAt": "2024-01-06T10:26:00Z",
    "body": "### Background and motivation\n\nYes there are a bunch of .NET PDF libraries.\r\nBut it is not a free and not a streamlined approaches of APIs from other vendors for modern .NET developers and for many scenarios.\r\n\r\nThe Office documents are not a third-party solution, that's why I really want dotnet team offer official .NET PDF library.\r\nI really hope to see the official .NET PDF library to be real as part of dotnet 9.0 releases from dotnet team.\r\nIt may looking good CommunityToolkit style of PDF library like out of box from dotnet itself.\r\n\r\nWish features: (CommunityToolkit style of PDF library)\r\n\r\nConvert the Office documents to PDF file, .doc, docx, .ppt, .pptx, .xls, xlsx, .one and more\r\nMerge pages and modify, append and more\r\nImplemented by fluent style of APIs, many modern dotnet style\n\n### API Proposal\n\nThere are no good example of this now.\r\n\n\n### API Usage\n\nThere are no good example of this now.\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
    "number": 96576,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-06T11:17:30Z",
          "user": "PaulusParssinen"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-06T12:06:22Z",
          "user": "neon-sunset"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-01-06T12:21:00Z",
          "user": "lsoft"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-06T14:16:22Z",
          "user": "vcsjones"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-06T15:57:10Z",
          "user": "KeterSCP"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-07T13:58:42Z",
          "user": "Tornhoof"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-07T18:41:37Z",
          "user": "andrewjsaid"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-07T19:29:12Z",
          "user": "filipnavara"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-09T15:28:33Z",
          "user": "sanamhub"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-10T16:29:06Z",
          "user": "acaly"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-14T12:57:45Z",
          "user": "umbarov"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-01-14T21:32:49Z",
          "user": "saint4eva"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-04-23T06:57:42Z",
          "user": "AndersChen123"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2024-05-11T17:31:13Z",
          "user": "colejohnson66"
        },
        {
          "content": "THUMBS_DOWN",
          "createdAt": "2025-08-19T02:06:21Z",
          "user": "Saplonily"
        }
      ],
      "totalCount": 15,
      "endCursor": "Y3Vyc29yOnYyOpHODLsSPQ=="
    },
    "updatedAt": "2024-07-09T12:54:01Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Background and motivation\n\nYes there are a bunch of .NET PDF libraries.\r\nBut it is not a free and not a streamlined approaches of APIs from other vendors for modern .NET developers and for many scenarios.\r\n\r\nThe Office documents are not a third-party solution, that's why I really want dotnet team offer official .NET PDF library.\r\nI really hope to see the official .NET PDF library to be real as part of dotnet 9.0 releases from dotnet team.\r\nIt may looking good CommunityToolkit style of PDF library like out of box from dotnet itself.\r\n\r\nWish features: (CommunityToolkit style of PDF library)\r\n\r\nConvert the Office documents to PDF file, .doc, docx, .ppt, .pptx, .xls, xlsx, .one and more\r\nMerge pages and modify, append and more\r\nImplemented by fluent style of APIs, many modern dotnet style\n\n### API Proposal\n\nThere are no good example of this now.\r\n\n\n### API Usage\n\nThere are no good example of this now.\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>DEVBOX10</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`api-suggestion`, `area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-01-06T10:26:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-06T10:26:10Z",
          "id": "IC_kwDODI9FZc5wCOG9"
        },
        {
          "author": "Wraith2",
          "body": "You should not expect that high quality libraries will be free. Editing PDF documents is not a foundational task. Editing PDF documents is not a highly performance sensitive task that requires the internal knowledge or extreme optimization using runtime internals. ",
          "createdAt": "2024-01-06T12:14:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T13:46:44Z",
                "user": "davidfowl"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T13:47:22Z",
                "user": "imxcstar"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T16:21:51Z",
                "user": "KeterSCP"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T17:39:27Z",
                "user": "jkotas"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T17:53:36Z",
                "user": "huoyaoyuan"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T19:26:10Z",
                "user": "jkoritzinsky"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-06T23:49:07Z",
                "user": "nathan-moore"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T00:38:14Z",
                "user": "vcsjones"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T01:57:33Z",
                "user": "colejohnson66"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T11:16:29Z",
                "user": "martincostello"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T13:59:10Z",
                "user": "Tornhoof"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-07T19:29:49Z",
                "user": "filipnavara"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-08T15:50:23Z",
                "user": "danmoseley"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-09T15:28:20Z",
                "user": "sanamhub"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-09T22:54:50Z",
                "user": "barnson"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-12T07:30:32Z",
                "user": "Xor-el"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-13T08:07:25Z",
                "user": "ArmaanMcleod"
              }
            ],
            "totalCount": 17,
            "endCursor": "Y3Vyc29yOnYyOpHODSZASw=="
          },
          "updatedAt": "2024-01-06T12:14:35Z",
          "id": "IC_kwDODI9FZc5wCVd5"
        },
        {
          "author": "colejohnson66",
          "body": "Opening three different issues on different repositories about the same problem is not necessary.",
          "createdAt": "2024-01-08T13:25:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-08T13:25:23Z",
          "id": "IC_kwDODI9FZc5wHdKQ"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOcB3SkA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/96576",
    "title": "Request: I really want a best and official .NET PDF library from dotnet team."
  },
  {
    "author": "MatinTheGC",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2024-01-24T16:33:43Z",
    "body": "Just-in-time compilation (JIT) has been the traditional method for executing .NET programs for a long time, but it comes with certain limitations. This issue suggests using a concept similar to runtime interceptors, as seen in some languages like Python, in .NET development to improve the development experience, especially minimizing the time needed for build processes.\r\n\r\n# Challenges with JIT, and Native AOT\r\n\r\nThe purpose of the JIT compilation method is to provide Just-In-Time improvements to make the codes optimized for the environment that they're running on. It also tries to make a balance between build times and runtime performance.\r\n\r\nAnd about .NET, Native AOT compilation was introduced in .NET 7, to focus on overall runtime performance and attempt to maximize it. So we can say that in Native AOT, the focus on the ease of development cycle was thrown away, which made Native AOT way better in production, and of course, developers still have JIT for development builds.\r\n\r\nAnd this is the main reason I'm writing this issue. JIT has been there for .NET for a long time, and there wasn't a Native AOT compilation back then. Now that we have a build method that is best optimized for production, why not have another one optimized for development? JIT build time is not so slow, but especially when the solutions scale in the number of projects, dependencies, and functionalities, the build time noticeably drops.\r\n\r\nCurrently, the main thing that a rapid development process is focusing on is minimizing the time being spent for each build iteration, and some other factors like memory usage or execution performance are not in priority in development. And JIT simply is not the best in build speed. That's why I suggest implementing another building method for the .NET ecosystem that can fantastically solve the build time problem.\r\n\r\n# Introducing the Concept of Runtime Interceptors\r\n\r\nRuntime interceptors are powerful tools used in some languages to execute code immediately at runtime. So a separate tool, called an interceptor, reads the code line by line and provides the functionality for the programs. By incorporating a similar concept into the .NET ecosystem, developers can achieve faster feedback loops and reduce downtime during development. Another benefit of using interceptors is greatly improving Unit Tests' runtime, so a test that reports took 400ms will not take so many seconds to just build the projects.\r\n\r\n# Utilizing Runtime Interceptors in .NET\r\n\r\nTo leverage runtime interceptors in .NET, tooling needs to be developed specifically for the .NET ecosystem. This program would provide the necessary infrastructure to resolve dependencies and execute code immediately at runtime, similar to how interceptors function in other languages.\r\n\r\n# Conclusion\r\n\r\n.NET languages, especially C#, currently do look like utopian programming languages a lot. They have clean and high-potential code syntax, remarkable runtime performance thanks to Native AOT, and a mixture of a billion-dollar company and a big community's support, all trying to make .NET better. Thanks to Native AOT and JIT, .NET has a great performance in runtime and outperforms many popular languages, but in development, it's not crucial, but if .NET utilizes runtime interceptors for maximizing development experience, it will be fantastic.\r\n\r\nAny comments and suggestions are welcome",
    "number": 97453,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "EYES",
          "createdAt": "2024-02-10T10:29:06Z",
          "user": "MineCake147E"
        },
        {
          "content": "EYES",
          "createdAt": "2024-05-09T14:25:07Z",
          "user": "KennethHoff"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOC3yiYw=="
    },
    "updatedAt": "2024-07-09T12:56:48Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nJust-in-time compilation (JIT) has been the traditional method for executing .NET programs for a long time, but it comes with certain limitations. This issue suggests using a concept similar to runtime interceptors, as seen in some languages like Python, in .NET development to improve the development experience, especially minimizing the time needed for build processes.\r\n\r\n# Challenges with JIT, and Native AOT\r\n\r\nThe main purpose of the JIT compilation method is to make a balance between build times and runtime performance. However, being the best in none of these was possible by JIT compilation in .NET; Because some other languages were focusing only on a few performance factors, so they would be better in those focused fields.\r\n\r\nAnd about .NET, Native AOT compilation was introduced in .NET 8, to focus on overall runtime performance and attempt to maximize it. So we can say that in Native AOT, the focus on the ease of development cycle was thrown away, which made Native AOT way better in production, and of course, developers still have JIT for development builds.\r\n\r\nAnd this is the main reason I'm writing this issue. JIT has been there for .NET for a long time, and there wasn't a Native AOT compilation back then. Now that we have a build method that is best optimized for production, why not have another one optimized for development? JIT build time is not so slow, but especially when the solutions scale in the number of projects, dependencies, and functionalities, the build time noticeably drops.\r\n\r\nCurrently, the main thing that a rapid development process is focusing on is minimizing the time being spent for each build iteration, and some other factors like memory usage or execution performance are not in priority in development. And JIT simply is not the best in build speed. That's why I suggest implementing another building method for the .NET ecosystem that can fantastically solve the build time problem.\r\n\r\n# Introducing the Concept of Runtime Interceptors\r\n\r\nRuntime interceptors are powerful tools used in some languages to execute code immediately at runtime. So a separate tool, called an interceptor, reads the code line by line and provides the functionality for the programs. By incorporating a similar concept into the .NET ecosystem, developers can achieve faster feedback loops and reduce downtime during development. Another benefit of using interceptors is greatly improving Unit Tests' runtime, so a test that reports took 400ms will not take so many seconds to just build the projects.\r\n\r\n# Utilizing Runtime Interceptors in .NET\r\n\r\nTo leverage runtime interceptors in .NET, tooling needs to be developed specifically for the .NET ecosystem. This program would provide the necessary infrastructure to resolve dependencies and execute code immediately at runtime, similar to how interceptors function in other languages.\r\n\r\n# Conclusion\r\n\r\n.NET languages, especially C#, currently do look like utopian programming languages a lot. They have clean and high-potential code syntax, remarkable runtime performance thanks to Native AOT, and a mixture of a billion-dollar company and a big community's support, all trying to make .NET better. Thanks to Native AOT and JIT, .NET has a great performance in runtime and outperforms many popular languages, but in development, it's not crucial, but if .NET utilizes runtime interceptors for maximizing development experience, it will be fantastic.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>dotnetian</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-01-24T16:33:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-24T16:33:54Z",
          "id": "IC_kwDODI9FZc5xwVeX"
        },
        {
          "author": "huoyaoyuan",
          "body": "> The main purpose of the JIT compilation method is to make a balance between build times and runtime performance. However, being the best in none of these was possible by JIT compilation in .NET; Because some other languages were focusing only on a few performance factors, so they would be better in those focused fields.\r\n> \r\n> And about .NET, Native AOT compilation was introduced in .NET 8, to focus on overall runtime performance and attempt to maximize it. So we can say that in Native AOT, the focus on the ease of development cycle was thrown away, which made Native AOT way better in production, and of course, developers still have JIT for development builds.\r\n\r\nThis is not correct. The major advantage of JIT compilation should be portability. Most assemblies are just deployed with AnyCPU.\r\nAlso note that **JIT provides better steady-state performance than AOT**. With tiered compilation, PGO and other post-first run optimizations, JIT can optimize the program based on its actual runtime behavior. For example, the JIT can optimize static readonly fields into constants because their values are already assigned in tiered code.\r\n\r\nNativeAOT was introduced in .NET 7. It focuses more on *startup* performance and conforming environment limitations. It does have opportunity to improve performance of some cases by knowing that *no more code will be loaded afterwards*.\r\n\r\n> Currently, the main thing that a rapid development process is focusing on is minimizing the time being spent for each build iteration\r\n\r\nR2R compilation is used in maximized performance configuration, which also requires a lot of built time.\r\n\r\n> So a separate tool, called an interceptor, reads the code line by line and provides the functionality for the programs.\r\n\r\nWhat about C# interactive and F# interactive?\r\n\r\n> Another benefit of using interceptors is greatly improving Unit Tests' runtime, so a test that reports took 400ms will not take so many seconds to just build the projects.\r\n\r\nIs it to avoid building other code in the same unit test project?\r\nMany unit test projects use shared helpers to simplify individual unit tests. To figure out the helpers required, the majority process of building would be required.",
          "createdAt": "2024-01-25T02:59:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2024-01-25T04:30:42Z",
                "user": "MatinTheGC"
              },
              {
                "content": "HEART",
                "createdAt": "2024-01-25T06:40:56Z",
                "user": "karb0f0s"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-25T09:28:24Z",
                "user": "ForNeVeR"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHODUCwvQ=="
          },
          "updatedAt": "2024-01-25T02:59:31Z",
          "id": "IC_kwDODI9FZc5xzRBb"
        },
        {
          "author": "MatinTheGC",
          "body": "Thank you so much @huoyaoyuan for fixing the problems. I updated the issue's text.\r\n\r\n> NativeAOT was introduced in .NET 7. It focuses more on startup performance and conforming environment limitations. It does have opportunity to improve performance of some cases by knowing that no more code will be loaded afterwards.\r\n\r\nYou're right. I know that Native AOT is not as well-performing as JIT for now, but it's not so long since it has been released and I believe that it has a higher potential to have improvements, compared to a compilation method that .NET is using for decades. Please note that I don't say \"JIT is bad\"; JIT is super-stable and has been there for so long, so a lot of its problems have been solved. Also, I understand that because of the way that JIT works, it can do some performance optimizations that Native AOT simply can't.\r\n\r\n> R2R compilation is used in maximized performance configuration, which also requires a lot of built time.\r\n\r\nThat's right too. But what I said was \"a rapid _development_ process\", I was not discussing production, and in development, startup time being 14ms or 800ms does not make such a difference, or loading an ASP.NET Core page in 40ms or 120ms is not even easily noticeable. These factors are critical in production, where tons of requests are being sent at the same time. I hope this example helps.\r\n\r\n> What about C# interactive and F# interactive?\r\n\r\nGreat idea! language interactives and REPL tools that .NET have have done a lot of stuff needed to make a working interceptor for .NET Runtime. They can resolve dependencies and run .NET code. So I guess that even some for runtime interceptors are already made, making the job easier to be done.\r\n\r\n> Is it to avoid building other code in the same unit test project?\r\nMany unit test projects use shared helpers to simplify individual unit tests. To figure out the helpers required, the majority process of building would be required.\r\n\r\nActually it was just one example of how powerful can runtime interceptors be in development. And about what you said, I think these are just a quick dependency scan can detect these codes too. Even if this scan takes too long, there could be a thing for programs to annouce relationships between classes and dependencies before build time, so even that simple scan is not needed anymore.",
          "createdAt": "2024-01-25T04:53:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-25T04:53:31Z",
          "id": "IC_kwDODI9FZc5xzmnF"
        },
        {
          "author": "En3Tho",
          "body": "My understanding is that you want to have per-language interpteter-based runtime shipping right with sdk and have that as an option to run your programs without a \"build to cil\" step?",
          "createdAt": "2024-01-25T05:19:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2024-01-25T09:31:36Z",
                "user": "MatinTheGC"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUCyoA=="
          },
          "updatedAt": "2024-01-25T05:21:35Z",
          "id": "IC_kwDODI9FZc5xzrv3"
        },
        {
          "author": "huoyaoyuan",
          "body": "> And about what you said, I think these are just a quick dependency scan can detect these codes too. Even if this scan takes too long, there could be a thing for programs to annouce relationships between classes and dependencies before build time\r\n\r\n\"Scanning annotations\" is really big work during compilation. Creating such annotations separately also requires heavy compiler or manual work.\r\n\r\nThis fits more about compiler optimization that reuses unchanged partial information from previous runs.",
          "createdAt": "2024-01-25T05:19:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-25T09:31:39Z",
                "user": "MatinTheGC"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUCyqQ=="
          },
          "updatedAt": "2024-01-25T05:19:41Z",
          "id": "IC_kwDODI9FZc5xzr0q"
        },
        {
          "author": "MatinTheGC",
          "body": "@En3Tho it's quite similar to how some other languages like Python work",
          "createdAt": "2024-01-25T09:33:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-01-25T09:33:27Z",
          "id": "IC_kwDODI9FZc5x1Hws"
        },
        {
          "author": "Suchiman",
          "body": "The first big problem that would come to my mind would be: C# does not use \"import X from file\", it has `using namespace` and types can be in arbitrary files that need not be named the same as the type that is contained within, so when you write out `SomeType.DoSomething()`, it would need to search all the files in the project and all referenced projects to find `SomeType` and ensure there's no conflicting type named `SomeType`. Sounds like you'd be most of the way to a compilation there at that point.",
          "createdAt": "2024-01-25T23:31:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-01-26T02:24:26Z",
                "user": "huoyaoyuan"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUKUDQ=="
          },
          "updatedAt": "2024-01-25T23:31:30Z",
          "id": "IC_kwDODI9FZc5x6hJP"
        },
        {
          "author": "huoyaoyuan",
          "body": "Look at the two examples:\r\n```csharp\r\n// file1.cs\r\nvoid M(SomeType x) => x.DoSomeThing();\r\n\r\n// file2.cs\r\nstatic void DoSomeThing(this object x) {}\r\n\r\n// file3.cs\r\nstatic void DoSomeThing(this SomeType x) {}\r\n```\r\nThe existence of file3 changes overload resolution.\r\n\r\n---\r\n```csharp\r\n// file1.cs\r\nusing Bar;\r\nnamespace Foo\r\n{\r\n    class C : SomeClass {}\r\n}\r\n\r\n// file2.cs\r\nnamespace Bar\r\n{\r\n    class SomeClass {}\r\n}\r\n\r\n// file3.cs\r\nnamespace Foo\r\n{\r\n    class SomeClass {}\r\n}\r\n```\r\nThe existence of file3 changes type name resolution. There's not a conflict since same namespace wins.\r\n\r\n---\r\nAnything else in the same compilation unit can affect the code behavior. C# isn't designed for single-pass compilation or execution. It doesn't work like script languages or C/C++.",
          "createdAt": "2024-01-26T02:37:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "EYES",
                "createdAt": "2024-01-26T08:22:36Z",
                "user": "MatinTheGC"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODUMTew=="
          },
          "updatedAt": "2024-01-26T02:37:52Z",
          "id": "IC_kwDODI9FZc5x7GdY"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOcexnWA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/97453",
    "title": "Implementation of Runtime Interceptors for Enhanced Development in .NET"
  },
  {
    "author": "am11",
    "labels": [
      "enhancement",
      "area-Meta"
    ],
    "createdAt": "2024-03-03T16:39:06Z",
    "body": "POSIX issue 7 obsoleted `gettimeofday` https://pubs.opengroup.org/onlinepubs/9699919799/functions/gettimeofday.html\r\n\r\n> APPLICATION USAGE\r\n>    Applications should use the [clock_gettime()](https://pubs.opengroup.org/onlinepubs/9699919799/functions/clock_gettime.html) function instead of the obsolescent gettimeofday() function.\r\n> ..\r\n> FUTURE DIRECTIONS\r\n>    The gettimeofday() function may be removed in a future version.\r\n\r\nIn some places, we use it as fallback to `clock_gettime()` with build-time check: [1](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/pal/src/file/filetime.cpp#L165-L178), [2](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/mono/mono/utils/mono-time.c#L130-L170), [3](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/native/libs/System.Native/pal_datetime.c#L34-L42); while in other places, we use it without any checks: [1](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/pal/src/misc/time.cpp#L72), [2](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/mono/mono/utils/mono-os-semaphore.h#L114), [3](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/nativeaot/Runtime/eventpipe/ep-rt-aot.h#L883).\r\n\r\nWe should unify it on the former pattern.",
    "number": 99206,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-03-03T16:50:01Z",
          "user": "filipnavara"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOC2RDNQ=="
    },
    "updatedAt": "2024-07-09T12:51:01Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nPOSIX issue 7 obsoleted `gettimeoftheday` https://pubs.opengroup.org/onlinepubs/9699919799/functions/gettimeofday.html\r\n\r\n> APPLICATION USAGE\r\n>    Applications should use the [clock_gettime()](https://pubs.opengroup.org/onlinepubs/9699919799/functions/clock_gettime.html) function instead of the obsolescent gettimeofday() function.\r\n> ..\r\n> FUTURE DIRECTIONS\r\n>    The gettimeofday() function may be removed in a future version.\r\n\r\nIn some places, we use it as fallback to `clock_gettime()` with build-time check: [1](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/pal/src/file/filetime.cpp#L165-L178), [2](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/mono/mono/utils/mono-time.c#L130-L170), [3](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/native/libs/System.Native/pal_datetime.c#L34-L42); while in other places, we use it without any checks: [1](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/pal/src/misc/time.cpp#L72), [2](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/mono/mono/utils/mono-os-semaphore.h#L114), [3](https://github.com/dotnet/runtime/blob/37445d4964a50eeff87ca7ed8cbdf251b547b779/src/coreclr/nativeaot/Runtime/eventpipe/ep-rt-aot.h#L883).\r\n\r\nWe should unify it on the former pattern.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>am11</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Meta`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-03-03T16:39:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-03T16:39:10Z",
          "id": "IC_kwDODI9FZc51u4tU"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOdbuLVA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/99206",
    "title": "Unify usage pattern of obsolete gettimeofday"
  },
  {
    "author": "ViktorHofer",
    "labels": [
      "documentation",
      "area-Meta",
      "help wanted"
    ],
    "createdAt": "2024-03-06T14:47:49Z",
    "body": "Continuation of https://github.com/dotnet/runtime/pull/91210 & https://github.com/dotnet/runtime/pull/92228\r\n\r\n**This issue tracks adding the remaining 30 package readmes to our shipping libraries packages.**\r\n\r\nOne of the top customer problems that package consumers are facing is lack of documentation. As such, we are driving an effort to increase the adoption and quality of NuGet package READMEs.\r\n\r\n### Ask\r\n\r\nTo lead by example and ensure that our packages have the maximum impact, we would greatly appreciate your support in increasing the adoption and quality of NuGet package READMEs.\r\n\r\n### Why\r\n\r\nThe README file is an essential part of your package as it provides important information to users and helps them understand what the package is and what it does quickly. Also, README is the first things for users when they view your package on NuGet.org and soon other tooling, it is crucial for package authors to write and include high-quality READMEs for their packages.\r\n\r\n### How\r\n\r\nThis issue lists all the remaining package that are missing package READMEs. Feel free to submit a PR that targets the main branch by using the `NEW` link from the table below. For a great example, please see [`System.Text.Json`'s package README](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/PACKAGE.md). Expect to spend ~15-30min of your time per README. Please try to keep documentation as minimal as possible to avoid duplicating information that is already available on docs.microsoft.com.\r\n \r\n## Packages\r\n_This list is sorted alphabetically._\r\n\r\n| Package | | Status | Owner |\r\n| :--- | :---: | :---: | :---: |\r\n| Microsoft.Bcl.Memory | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Bcl.Memory/src/PACKAGE.md) | ✅ |\r\n| Microsoft.Extensions.DependencyInjection.Specification.Tests | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.DependencyInjection.Specification.Tests/src/PACKAGE.md) | ✅ |\r\n| Microsoft.Extensions.Diagnostics | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.Diagnostics/src/PACKAGE.md) |  | @tommcdon |\r\n| Microsoft.Extensions.Diagnostics.Abstractions | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.Diagnostics.Abstractions/src/PACKAGE.md) |  | @tommcdon |\r\n| Microsoft.Extensions.FileProviders.Composite | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.FileProviders.Composite/src/PACKAGE.md) |  | @jeffhandley |\r\n| Microsoft.Extensions.Logging.Configuration | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.Logging.Configuration/src/PACKAGE.md) |  | @ericstj |\r\n| Microsoft.Extensions.Logging.EventLog | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.Logging.EventLog/src/PACKAGE.md) |  | @ericstj |\r\n| Microsoft.Extensions.Logging.EventSource | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.Extensions.Logging.EventSource/src/PACKAGE.md) |  | @ericstj |\r\n| Microsoft.NET.WebAssembly.Threading | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.NET.WebAssembly.Threading/src/PACKAGE.md) |  | @lewing |\r\n| Microsoft.XmlSerializer.Generator | [New](https://github.com/dotnet/runtime/new/main/src/libraries/Microsoft.XmlSerializer.Generator/src/PACKAGE.md) |  | @HongGit |\r\n| System.CodeDom | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.CodeDom/src/PACKAGE.md) |  ✅|\r\n| System.ComponentModel.Composition | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.ComponentModel.Composition/src/PACKAGE.md) |  | @ericstj |\r\n| System.ComponentModel.Composition.Registration | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.ComponentModel.Composition.Registration/src/PACKAGE.md) |  | @ericstj |\r\n| System.Composition | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition/src/PACKAGE.md) | ✅ |\r\n| System.Composition.AttributedModel | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition.AttributedModel/src/PACKAGE.md) | ✅ |\r\n| System.Composition.Convention | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition.Convention/src/PACKAGE.md) | ✅ |\r\n| System.Composition.Hosting | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition.Hosting/src/PACKAGE.md) | ✅ |\r\n| System.Composition.Runtime | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition.Runtime/src/PACKAGE.md) | ✅ |\r\n| System.Composition.TypedParts | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Composition.TypedParts/src/PACKAGE.md) | ✅ |\r\n| System.Diagnostics.DiagnosticSource | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Diagnostics.DiagnosticSource/src/PACKAGE.md) |  | @tommcdon |\r\n| System.Formats.Asn1 | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Formats.Asn1/src/PACKAGE.md) | ✅ |\r\n| System.Formats.Nrbf | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Formats.Nrbf/src/PACKAGE.md) | ✅ |\r\n| System.IO.Packaging | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.IO.Packaging/src/PACKAGE.md) |  | @ericstj |\r\n| System.Reflection.Context | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Reflection.Context/src/PACKAGE.md) | ✅ |\r\n| System.Resources.Extensions | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Resources.Extensions/src/PACKAGE.md) |  | @ericstj |\r\n| System.Runtime.Serialization.Schema | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Runtime.Serialization.Schema/src/PACKAGE.md) |  | @HongGit |\r\n| System.Security.Cryptography.Cose | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Security.Cryptography.Cose/src/PACKAGE.md) |  | @jeffhandley |\r\n| System.Security.Cryptography.Pkcs | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Security.Cryptography.Pkcs/src/PACKAGE.md) |  | @jeffhandley |\r\n| System.Security.Cryptography.Xml | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Security.Cryptography.Xml/src/PACKAGE.md) |  | @jeffhandley |\r\n| System.Security.Permissions | [New](https://github.com/dotnet/runtime/new/main/src/libraries/System.Security.Permissions/src/PACKAGE.md) |  | @jeffhandley |\r\n\r\nFWIW I created this table via the following code: https://gist.github.com/ViktorHofer/e4ba1766b7ee751261515781e7bb5927\r\n\r\n:white_check_mark: (`:white_check_mark:`) ->merged\r\n\r\n:clock130: (`:clock130:`) -> under review\r\n\r\ncc @lyndaidaii @ericstj @artl93 @eNeRGy164",
    "number": 99358,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "HOORAY",
          "createdAt": "2024-03-11T12:59:36Z",
          "user": "eNeRGy164"
        },
        {
          "content": "HOORAY",
          "createdAt": "2024-03-12T03:12:24Z",
          "user": "lyndaidaii"
        },
        {
          "content": "HEART",
          "createdAt": "2024-08-14T14:03:32Z",
          "user": "julealgon"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-08-14T14:03:34Z",
          "user": "julealgon"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOC6LZVg=="
    },
    "updatedAt": "2025-08-31T12:52:32Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": null,
          "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nContinuation of https://github.com/dotnet/runtime/pull/91210 & https://github.com/dotnet/runtime/pull/92228\r\n\r\nThis issue tracks adding the remaining package readmes to our shipping libraries packages.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>ViktorHofer</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>9.0.0</td>\n  </tr>\n</table>\n</details>",
          "createdAt": "2024-03-06T14:47:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-03-06T14:47:56Z",
          "id": "IC_kwDODI9FZc52FDPQ"
        },
        {
          "author": "eNeRGy164",
          "body": "@ViktorHofer https://github.com/dotnet/runtime/pull/106344 for `System.Formats.Nrbf`",
          "createdAt": "2024-08-14T12:26:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-14T12:26:28Z",
          "id": "IC_kwDODI9FZc6IaWPj"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOiGlj4w=="
    },
    "url": "https://github.com/dotnet/runtime/issues/99358",
    "title": "Add package readmes to shipping libraries packages"
  },
  {
    "author": "kimsey0",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2024-04-25T14:29:20Z",
    "body": "## Issue\r\n\r\nThe runtime repository contains a lot of Markdown files with internal links to other files in the repository. Most of these use paths that are relative to either the root of the repository:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f30cb9c9b392d127c0e4fbea2333dd1e6b82803/CONTRIBUTING.md?plain=1#L66\r\n\r\nor to the file itself:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f30cb9c9b392d127c0e4fbea2333dd1e6b82803/docs/README.md?plain=1#L74\r\n\r\nHowever, [some](https://github.com/search?q=repo%3Adotnet%2Fruntime+https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fblob%2Fmain%2F+language%3AMarkdown&type=code) use GitHub URLs instead;\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f30cb9c9b392d127c0e4fbea2333dd1e6b82803/docs/project/breaking-change-process.md?plain=1#L48\r\n\r\nWhen viewing the Markdown files on GitHub, this makes little difference, since GitHub automatically resolves any relative paths. However, when viewing the files locally, for example in Visual Studio Code, these GitHub links open in a browser instead of in the local editor.\r\n\r\n## Suggestion\r\n\r\nCould we change all these GitHub URLs into paths relative to the root instead? I'm happy to create a pull request.\r\n\r\n## Additional information\r\n\r\nThere are also [some links to file versions in specific commits](https://github.com/search?q=repo%3Adotnet%2Fruntime+%2Fhttps%3A%5C%2F%5C%2Fgithub.com%5C%2Fdotnet%5C%2Fruntime%5C%2Fblob%5C%2F%5B%5Em%5D%2F+language%3AMarkdown&type=code&l=Markdown). Most of these link to specific sections or lines that could be renamed or moved in the future, and should therefore likely be left alone.\r\n\r\nChanging to relative paths will affect any future repository renames and merges (positively, keeping the links valid) plus splits (positively, for links between files that are moved out, and negatively, for links back to the original repository). I don't think this should be a big consideration.\r\n\r\nI do not think this change affects any efforts to validate links in #38631.",
    "number": 101550,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-07-09T12:39:35Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-04-25T14:29:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-04-25T14:29:47Z",
          "id": "IC_kwDODI9FZc570cxE"
        },
        {
          "author": "eiriktsarpalis",
          "body": "@kimsey0 feel free to submit a PR improving things.",
          "createdAt": "2024-07-09T12:39:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-09T12:39:31Z",
          "id": "IC_kwDODI9FZc6ELblM"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHOhC25TA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/101550",
    "title": "Normalize links in Markdown files"
  },
  {
    "author": "Seanxwy",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2024-06-18T10:41:21Z",
    "body": "Huawei HarmonyOS is about to release a new major version, using a full-stack self-developed architecture and will no longer rely on traditional AOSP code.\r\nHuawei HarmonyOS will run on mobile phones, watches, smart TVs and embedded devices, which is very consistent with the cross-platform framework concept of .NET for developing all applications.\r\n\r\nHuawei already has a large user base and its market share is about to surpass iOS. In any case, there are already a large number of Huawei devices that will receive HarmonyOS, and many new devices will be manufactured.\r\nTherefore, it makes sense that the open platform .NET will eventually gain support for it.\r\n\r\nThen, given the large user base of Huawei devices, as well as the huge market share, it makes sense to help .NET developers easily achieve cross-platform development. It makes sense that efforts will eventually be made to provide HarmonyOS support for the platform.\r\n\r\nSo, what plans does the .NET platform have for supporting HarmonyOS?",
    "number": 103627,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-19T01:52:54Z",
          "user": "srxqds"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-27T01:45:11Z",
          "user": "tai-yi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-11T07:24:24Z",
          "user": "Varorbc"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-05T13:51:50Z",
          "user": "AscendLiu"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-07T18:37:46Z",
          "user": "lixinyang123"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-05T06:08:08Z",
          "user": "ram16g"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-28T15:20:58Z",
          "user": "zxbmmmmmmmmm"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-05-11T10:48:57Z",
          "user": "heartacker"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-10T16:45:18Z",
          "user": "lordfanger"
        }
      ],
      "totalCount": 9,
      "endCursor": "Y3Vyc29yOnYyOpHODDkfXw=="
    },
    "updatedAt": "2025-08-12T07:31:17Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-06-18T10:41:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-18T10:41:48Z",
          "id": "IC_kwDODI9FZc6Br-Jb"
        },
        {
          "author": "huoyaoyuan",
          "body": "As a managed runtime, in .NET we classify OS by its low-level API, not high level UI framework. Most of the information about HarmonyOS I can find are UI and packaging related. The relationship with Android NDK is also unclear.\r\n\r\nFor the reason we all know, there's unlikely to be action from Microsoft. The market shares are also significantly different among the world.",
          "createdAt": "2024-06-18T13:23:47Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-18T13:23:47Z",
          "id": "IC_kwDODI9FZc6BtJTc"
        },
        {
          "author": "jkotas",
          "body": "Related/duplicate https://github.com/dotnet/runtime/issues/56632",
          "createdAt": "2024-06-18T15:02:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-18T15:02:38Z",
          "id": "IC_kwDODI9FZc6BuCZt"
        },
        {
          "author": "driver1998",
          "body": "If we are talking about OpenHarmony, that is currently musl Linux, you can try if the current `linux-musl` builds will run on it.\r\n\r\nFor HamonyOS NEXT (which is supposed to be based on OpenHarmony and be compatible), it is rumored to have a home-grown kernel, will need to know its ABI and API details first.\r\n\r\nNative API on HarmonyOS is limited just like Android, with no UI framework support, only basic window management, custom drawing via OpenGL/Vulkan, and other low-level APIs.\r\n\r\nThe first-party UI framework is ArkUI, which uses a TypeScript-derived ArkTS language. \r\n\r\nArkTS provides native interop via Node.js-like N-API.\r\n\r\nI would imagine MAUI will work something like Blazor on ArkUI.\r\n\r\nOpenHarmony developer docs: https://docs.openharmony.cn/pages/v4.0/en/application-dev/application-dev-guide.md",
          "createdAt": "2024-06-21T02:51:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-21T03:11:17Z",
                "user": "huoyaoyuan"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODmedXQ=="
          },
          "updatedAt": "2024-06-21T03:10:40Z",
          "id": "IC_kwDODI9FZc6CDQoM"
        },
        {
          "author": "Seanxwy",
          "body": "I am referring to HamonyOS NEXT. Currently, Huawei has invested a lot of money in marketing and building an application ecosystem. Many mainstream apps support HamonyOS NEXT. Based on Huawei's influence on the market, there will be a huge market opportunity in the future. At the same time, the Unity3d engine has also begun to support HamonyOS NEXT. If dotnet can support HamonyOS NEXT, in the future, whether it is games, apps or desktops, it will have a first-mover advantage over other high-level languages. The .net ecosystem will be more complete, and it will also help millions of developers to develop across platforms more conveniently.",
          "createdAt": "2024-06-21T03:18:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-23T10:34:02Z",
                "user": "hubert17"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-05T06:11:09Z",
                "user": "ram16g"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-28T15:21:20Z",
                "user": "zxbmmmmmmmmm"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOEAbTpg=="
          },
          "updatedAt": "2024-06-21T03:18:16Z",
          "id": "IC_kwDODI9FZc6CDXr0"
        },
        {
          "author": "driver1998",
          "body": "A lot of stuff of OpenHarmony will apply to HamonyOS NEXT, as I said, HarmonyOS NEXT is supposed to be based on OpenHarmony. \r\n\r\nBut the rumored home-grown kernel (seemingly named HongmengOS in `uname`) does muddy the water quite a bit, we will first need to know its low-level ABI before we can do anything meaningful.\r\n\r\nToo bad it is currently under closed beta and NDAs.",
          "createdAt": "2024-06-21T03:22:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-21T03:31:59Z",
          "id": "IC_kwDODI9FZc6CDZrB"
        },
        {
          "author": "Seanxwy",
          "body": "We should be optimistic about HamonyOS NEXT. We hope that Microsoft will also be open and optimistic about HamonyOS NEXT in its investment in the dotnet cross-platform. The HamonyOS NEXT ecosystem is a platform that every application developer or cross-platform developer cannot bypass. As .Net developers, we very much hope that Dotnet can be developed on the HamonyOS NEXT ecosystem. In this way, millions of developers can release their own products and earn income in the new HamonyOS NEXT ecosystem.",
          "createdAt": "2024-06-21T03:55:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-06-21T03:56:24Z",
                "user": "srxqds"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-09-23T10:34:26Z",
                "user": "hubert17"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-05T06:12:32Z",
                "user": "ram16g"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-12-28T15:21:27Z",
                "user": "zxbmmmmmmmmm"
              }
            ],
            "totalCount": 4,
            "endCursor": "Y3Vyc29yOnYyOpHOEAbTqg=="
          },
          "updatedAt": "2024-06-21T03:55:08Z",
          "id": "IC_kwDODI9FZc6CDfm2"
        },
        {
          "author": "driver1998",
          "body": ".NET on HarmonyOS will probably be community supported for the time being, maybe you can try to convince Huawei to get on board, like Samsung and their contributions of Tizen support.",
          "createdAt": "2024-06-21T04:01:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-21T04:02:41Z",
          "id": "IC_kwDODI9FZc6CDgwc"
        },
        {
          "author": "alexrp",
          "body": "Judging by the fact that LoongArch code has been included in the codebase, it seems highly unlikely that there'd be any opposition to HarmonyOS contributions.\r\n\r\nAs a practical matter, though, you just probably shouldn't expect Microsoft to do the work. Hopefully Huawei can fund it.",
          "createdAt": "2024-06-21T04:02:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-21T04:02:07Z",
          "id": "IC_kwDODI9FZc6CDg01"
        },
        {
          "author": "xiexingen",
          "body": "+1",
          "createdAt": "2024-07-02T00:57:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-02T00:57:57Z",
          "id": "IC_kwDODI9FZc6DOXK2"
        },
        {
          "author": "driver1998",
          "body": "I guess we can call this a win? \r\n\r\nThis is HarmonyOS NEXT Developer Beta 1 in the **emulator** and is **Linux based**.\r\n\r\nlinux-musl mostly works (other than linux-musl CoreCLR links to libstdc++ and HamonyOS uses libc++, NativeAOT is used here instead).\r\n\r\nNext step is build this as shared lib and add this to an ArkUI app.\r\n\r\n![fdf143ca6b61af9d321fba7957e432b0](https://github.com/dotnet/runtime/assets/22699485/37e2eb2f-5b86-48e9-ad34-6c2f7e7ad67e)\r\n",
          "createdAt": "2024-07-10T06:37:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-10T06:49:34Z",
          "id": "IC_kwDODI9FZc6ETZOb"
        },
        {
          "author": "Seanxwy",
          "body": "The simulator is informatively OpenHarmony, and it has been rumored, but not confirmed, that Harmony OS NEXT is developed on OpenHarmony. It is therefore not known whether HarmonyOS NEXT's kernel will be Linux-based or a modified kernel.\r\nI hope so",
          "createdAt": "2024-07-10T06:44:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-10T06:44:06Z",
          "id": "IC_kwDODI9FZc6ETbZL"
        },
        {
          "author": "driver1998",
          "body": "The emulator is Linux based, actual devices seems to be not.\r\n\r\nThey claimed ABI compability, also the official toolchain only targets Linux so I think it should be good enough to not worry about.",
          "createdAt": "2024-07-10T11:01:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-10T11:01:55Z",
          "id": "IC_kwDODI9FZc6EVboH"
        },
        {
          "author": "CeSun",
          "body": "As far as I know, HarmonyOS Next has a higher probability of being modified based on HarmonyOS (emui).\n\nBecause HarmonyOS Next's hap is not compatible with the openharmony operating system.\n\nInstead of going around trying to get people to support this lying operating system, they or you should spend more efforts on developing the system",
          "createdAt": "2024-08-03T20:36:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-26T14:54:59Z",
                "user": "Yu-Core"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-09-03T09:23:34Z",
                "user": "qwerty472123"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2024-10-31T03:37:27Z",
                "user": "kayeeeo"
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": "2025-02-11T01:05:01Z",
                "user": "zhengbinlong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-04-16T15:21:15Z",
                "user": "djrecipe"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-18T12:43:18Z",
                "user": "youfch"
              }
            ],
            "totalCount": 6,
            "endCursor": "Y3Vyc29yOnYyOpHOEShtzw=="
          },
          "updatedAt": "2024-08-03T20:36:06Z",
          "id": "IC_kwDODI9FZc6HIciu"
        },
        {
          "author": "CeSun",
          "body": "update:\nIt has been confirmed that the dynamic library of the linux-musl-arm64 platform generated by NativeAot can run on the OpenHarmony5.0 system.\nMoreover, both Mono and CoreCLR support the musl arm64 platform, so in theory, .net does not need to do more adaptation work.\n\nAs for HarmonyOS Next, I am not sure about the support situation yet because I don’t have the device.",
          "createdAt": "2024-10-23T08:33:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-11T10:50:27Z",
                "user": "heartacker"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-18T12:43:17Z",
                "user": "youfch"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEShtzQ=="
          },
          "updatedAt": "2024-10-23T08:33:55Z",
          "id": "IC_kwDODI9FZc6Q6sp1"
        },
        {
          "author": "Varorbc",
          "body": "> \n> As for HarmonyOS Next, I am not sure about the support situation yet because I don’t have the device.\n\n@CeSun I happen to have a HarmonyOS Next device with me, so maybe I can help out a bit.",
          "createdAt": "2024-10-23T08:44:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-23T08:44:13Z",
          "id": "IC_kwDODI9FZc6Q6y6k"
        },
        {
          "author": "huoyaoyuan",
          "body": "According to my knowledge, OpenHarmony is based on linux-musl, but the libc++ used is different from Alpine. Dotnet binaries for alpine can run on OpenHarmony for very basic scenarios.\n\nI believe the current infrastructure is flexible for creating such a compilation configuration in private fork.",
          "createdAt": "2024-10-23T08:53:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-23T08:54:57Z",
          "id": "IC_kwDODI9FZc6Q655q"
        },
        {
          "author": "driver1998",
          "body": "IIRC NativeAOT compiled binaries won't depend on C++ standard library at all, so that is an non-issue. Unless you want to get CoreCLR JIT running on HarmonyOS (not entirely sure if that is even possible).\n\nWe still need to figure out a solution to icu and potentially openssl though.",
          "createdAt": "2024-10-23T11:39:33Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-24T01:07:41Z",
          "id": "IC_kwDODI9FZc6Q8tcp"
        },
        {
          "author": "CeSun",
          "body": "> IIRC NativeAOT compiled binaries won't depend on C++ standard library at all, so that is an non-issue. Unless you want to get CoreCLR JIT running on HarmonyOS (not entirely sure if that is even possible).\n> \n> We still need to figure out a solution to icu and protentially openssl though.\n\nJust now I also encountered problems in icu, it seems that static links can be made. If the icu is linked statically, cross-platform compilation will not be allowed.\n\nhttps://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/compiling.md#using-statically-linked-icu\n\n\n",
          "createdAt": "2024-10-23T11:57:44Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-23T11:57:44Z",
          "id": "IC_kwDODI9FZc6Q868g"
        },
        {
          "author": "CeSun",
          "body": "This is a branch created for adapting HarmonyOS(informal, for experimental use only): https://github.com/CeSun/dotnet-runtime-openharmony\nThis is the compiled binary. By importing the targets of this repository, you can publish native dynamic libraries for HarmonyOS: https://github.com/CeSun/OpenHarmonyRuntime.Net",
          "createdAt": "2025-02-11T06:29:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-12T19:55:10Z",
                "user": "expcat"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-15T12:57:25Z",
                "user": "zxbmmmmmmmmm"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-22T13:26:42Z",
                "user": "HaskellZhangSong"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-22T13:34:31Z",
                "user": "WeihanLi"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-15T20:09:47Z",
                "user": "tjiakwokyung28"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOESTIfQ=="
          },
          "updatedAt": "2025-02-11T06:29:25Z",
          "id": "IC_kwDODI9FZc6d8l2b"
        },
        {
          "author": "HaskellZhangSong",
          "body": "> This is a branch created for adapting HarmonyOS(informal, for experimental use only): https://github.com/CeSun/dotnet-runtime-openharmony This is the compiled binary. By importing the targets of this repository, you can publish native dynamic libraries for HarmonyOS: https://github.com/CeSun/OpenHarmonyRuntime.Net\n\nDear CeSun\nI have a HarmonyOS device and want to try to port many languages and frameworks including dotnet to OHOS. However, my knowledge about dotnet is limited. If you want to discuss any ideas please send me an email Haskell.zhang.song `at` hotmail.com.",
          "createdAt": "2025-02-22T13:26:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "ROCKET",
                "createdAt": "2025-03-02T07:10:58Z",
                "user": "BA489"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-04-16T15:22:40Z",
                "user": "djrecipe"
              },
              {
                "content": "ROCKET",
                "createdAt": "2025-05-15T20:09:58Z",
                "user": "tjiakwokyung28"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOESTIjA=="
          },
          "updatedAt": "2025-02-22T13:30:48Z",
          "id": "IC_kwDODI9FZc6fg8Fs"
        },
        {
          "author": "thefex",
          "body": "Are there any plans by .NET to merge @CeSun work into official .NET runtime?\n\nFrom what I have seen, there are very tiny non-affecting other targets changes regarding OpenHarmony https://github.com/OpenHarmony-NET/runtime/commit/60c85dca771c686d81d5c1802ae8abbbbc522acc\n\nSpecifically,\n- add target compilation definition - rid (OpenHarmony),\n- compile flag for different system ICU data path,\n- compile flag to disable ISA,\n- compile flag to mark NUMA not supported\n- compile flag to not USE_REGIONS gc\n\nAs it base upon linux-musl target that is currently supported by .NET - that gives possibility to build shared libs via NativeAOT targeting OpenHarmony.Next -> migrate C# code and use in OpenHarmony apps",
          "createdAt": "2025-05-11T09:07:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-05-11T09:10:46Z",
          "id": "IC_kwDODI9FZc6rC0zh"
        },
        {
          "author": "CeSun",
          "body": "The disabling of ISA has nothing to do with HarmonyOS or .NET. I am using zig to publish NativeAOT across platforms, and there are some bugs in the code of zig linking ISA.\n",
          "createdAt": "2025-05-11T16:48:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-11T16:49:02Z",
                "user": "thefex"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-12T08:27:04Z",
                "user": "realybin"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-05-15T20:10:10Z",
                "user": "tjiakwokyung28"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-16T08:29:08Z",
                "user": "luckyBricks"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-18T09:32:58Z",
                "user": "MetSystem"
              }
            ],
            "totalCount": 5,
            "endCursor": "Y3Vyc29yOnYyOpHOEXB71g=="
          },
          "updatedAt": "2025-05-11T17:11:55Z",
          "id": "IC_kwDODI9FZc6rEFfP"
        },
        {
          "author": "liangqi",
          "body": "See also https://www.harmony-developers.com/p/netavalonia-adaptation-to-harmonyos .",
          "createdAt": "2025-08-12T07:31:17Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-12T07:31:17Z",
          "id": "IC_kwDODI9FZc69bYKl"
        }
      ],
      "totalCount": 24,
      "endCursor": "Y3Vyc29yOnYyOpHOvW2CpQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/103627",
    "title": "Current status of .NET support on HarmonyOS platform"
  },
  {
    "author": "akoeplinger",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2024-06-26T08:09:36Z",
    "body": "https://github.com/search?q=repo%3Adotnet%2Fruntime+cbl-mariner&type=code\r\n\r\nWe should clean these up as we moved to 3.0 everywhere in main. cc @am11 ",
    "number": 104013,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-26T08:25:56Z",
          "user": "am11"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOC460ZA=="
    },
    "updatedAt": "2024-06-26T08:10:32Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-06-26T08:10:10Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-26T08:10:10Z",
          "id": "IC_kwDODI9FZc6CmUdk"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOgplHZA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/104013",
    "title": "Some docs still mention mariner 2.0"
  },
  {
    "author": "vanillajonathan",
    "labels": [
      "api-suggestion",
      "area-Meta"
    ],
    "createdAt": "2024-06-27T11:47:56Z",
    "body": "### Background and motivation\n\nThe [`TagBuilder`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.rendering.tagbuilder) class in ASP.NET Core is useful outside of the context of ASP.NET Core. I would like to be able to use it in console applications, desktop applications, microservices and libraries for things such as creating HTML email and reports in HTML format.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.Html;\r\n\r\n/// <summary>\r\n/// Contains methods and properties that are used to create HTML elements.\r\n/// </summary>\r\npublic class TagBuilder : IHtmlContent\r\n{\r\n    // ...\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar p = new TagBuilder(\"p\");\r\np.SetContent(\"Hello world!\");\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
    "number": 104090,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-06-27T13:24:07Z",
          "user": "julealgon"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOC4-ABg=="
    },
    "updatedAt": "2024-07-09T12:40:53Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-06-27T11:48:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-06-27T11:48:16Z",
          "id": "IC_kwDODI9FZc6CzPCv"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOgszwrw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/104090",
    "title": "[API Proposal]: Move `TagBuilder` into System.Text namespace"
  },
  {
    "author": "redgoldlace",
    "labels": [
      "api-suggestion",
      "area-Meta"
    ],
    "createdAt": "2024-07-16T01:12:03Z",
    "body": "### Background and motivation\n\nPrior to C# 13, the lack of the `allows ref struct` generic bound and the inability to use `ref struct`s as generic type arguments made it impossible to represent a nullable `ref struct`.\r\n\r\nThis has a particular impact on the newer `Span` and `ReadOnlySpan` APIs, **especially in the context of writing parsing code**, where representing the lack of a value is important, and negatively harms the ergonomics and expressiveness of these APIs, making them more difficult to adopt when writing high-performance code.\r\n\r\nAs well as making it impossible to represent nullable `Span`s and `ReadOnlySpan`s directly, this also harms the ergonomics of types that **contain** `Span`s, `ReadOnlySpan`s or other `ref struct`-like types, by *indirectly* making it impossible to represent a lack of a value. While - in the real world - you would want to simply use a `Range` instead, this problem is extremely apparent in the case of a hypothetical `RegexMatch` struct containing a `ReadOnlySpan` - you cannot have a `RegexMatch`-returning method that returns `null` if no match is found.\r\n\r\nUltimately, the arguments *for* nullable `ref struct`s are the same as the arguments for nullable `struct`s and nullable reference types in the first place; representing a possible lack of a value without using a type-specific \"sentinel\" value, providing type-safety to downstream code, and catching bugs at *compile time* rather than at runtime. Since C# supports nullable values in all of these scenarios, a lack of support for `ref struct`s feels like a hole that should be addressed.\r\n\r\nAs mentioned above, this was broadly impossible to support prior to C# 13. With C# 13 supporting the `allows ref struct` generic bound, there should no longer be anything at the language/runtime level blocking the implementation of this feature.\n\n### API Proposal\n\nFrom what I can see, there are effectively two options here.\r\n\r\n**Option 1**: Annotate `System.Nullable<T>` such that `T : allows ref struct`. From everything I understand of the implementation of `allows ref struct`, this would be a breaking change, as it would make **all** instantiations of `System.Nullable<T>` behave according to the restrictions imposed on `ref struct`s, regardless of whether a specific `T` was/was not a `ref struct`. For this reason, it's likely that this is **not** a practical implementation choice.\r\n\r\n**Option 2**: Implement a new `System.Nullable<T>`-like type for `ref struct`s. The API for this would be extremely similar to the existing `System.Nullable<T>` API, and could look vaguely similar to the below:\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic ref struct NullableRef<T> where T : struct, allows ref struct\r\n{\r\n    public readonly bool HasValue => /* .... */;    \r\n    public readonly T Value => /* .... */;\r\n    \r\n    public static implicit operator T?(T value) => /* .... */;\r\n    public static explicit operator T(T? value) => /* .... */;\r\n    \r\n    // ... along with the other functionality that `System.Nullable<T>` supports\r\n}\r\n```\r\n\r\nThe type `T?` could then be expanded to this hypothetical `System.NullableRef<T>` class in the case of a `ref struct`, and `System.Nullable<T>` otherwise. Since using a `ref struct` as a generic type argument requires an explicit `allows ref struct` bound, this **should not affect existing code** that deals with nullable generic types.\r\n\r\nFor usage in pattern matching, it's likely that this would require runtime/language support of some kind, but I'm not entirely sure where. With the API surface and general implementation being so similar, this doesn't *seem* like it would be a particularly difficult change, and rather just an expansion of existing functionality. That said, looks can be deceiving, so it's possible this is more involved than I realize!\n\n### API Usage\n\n```csharp\r\n// Consume a nullable `ref struct`, such as a nullable `ReadOnlySpan<char>`\r\nif (myParser.maybeReturnsSpan(input) is not {} result)\r\n{\r\n    // Complain about the lack of a value\r\n    throw new SpecificException(\"Invalid file header\");\r\n}\r\n\r\n// ... and then continue processing `result`\r\n// Like `System.Nullable<T>`, pattern matching can narrow from `ReadOnlySpan<char>?` to `ReadOnlySpan<char>`\r\nvar something = cantBeNullable(result);\r\n\r\n// Explicitly check if a value is `null`\r\nif (something is null)\r\n{\r\n    // ...\r\n}\r\n```\r\nMost of the examples here would apply to `System.Nullable<T>` as well - the idea is for things to be as ergonomic as possible, and mirror `System.Nullable<T>` where possible.\n\n### Alternative Designs\n\nSee the first option mentioned in the API design section above. This is the most obvious alternative, though the actual implementation of a hypothetical `System.NullableRef<T>` could also differ in some way. A lack of API symmetry would likely be harmful to ergonomics and the ability to work with nullable `ref struct`s, however.\r\n\r\nAnother notable alternative - though one that's likely far more work! - is adjusting the `allows ref struct` bound such that the `ref struct` rules are only imposed on generic `allows ref struct` types **when specifically instantiated** with a `ref struct`, or another generic parameter that is `allows ref struct`. As my knowledge of the current behavior is unclear, it's possible that this is already the case - meaning that option 1 would suffice, and was just something that was missed in the initial round of `allows ref struct` additions.\r\n\r\nAnother alternative, though it goes without saying that it would be the least preferable to me, is to simply not support nullable `ref struct`s in the first place.\n\n### Risks\n\nThe risks of adjusting `System.Nullable<T>` were mentioned earlier, but there are some other risks that could arise in downstream code.\r\n\r\nWhat immediately comes to mind is the following:\r\n- Developers could be confused by the addition of a `System.NullableRef<T>`, and might not know when to use it over `System.Nullable<T>`.\r\n  - This could be addressed with sufficient documentation of the new type, as well as implementation of compiler/tool warnings when explicitly naming `System.NullableRef<T>` or using `System.NullableRef<T>` with a non-`ref struct` type. These warnings could suggest using `T?` instead of naming the type directly.\r\n- New and existing APIs may still use sentinel \"empty\" values instead of nullable `ref struct`s, creating friction.\r\n  - This is a more difficult issue to deal with, but it is possible that overloads/new method implementations could be provided to address this where applicable.\r\n- The implementation burden could be too high, or too far-reaching.\r\n  - I don't *believe* this will be an issue, but things may be more complex than I'm realizing. So it's worth mentioning!\r\n  \r\nThis is not an exhaustive list, and just what comes to mind presently. It's possible that a feature like this would have other risks I'm not aware of.",
    "number": 104938,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-16T01:37:53Z",
          "user": "timcassell"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-16T08:15:41Z",
          "user": "hez2010"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-07-17T12:25:07Z",
          "user": "colejohnson66"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-08T13:27:23Z",
          "user": "CodingMadness"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHODDbeAg=="
    },
    "updatedAt": "2025-06-08T16:39:35Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-07-16T01:12:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-16T01:12:23Z",
          "id": "IC_kwDODI9FZc6E59M2"
        },
        {
          "author": "huoyaoyuan",
          "body": "Related to https://github.com/dotnet/csharplang/discussions/5337 . `ref` field isn't that special comparing to fields of reference types.",
          "createdAt": "2024-07-16T07:12:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-16T07:12:05Z",
          "id": "IC_kwDODI9FZc6E7elg"
        },
        {
          "author": "rjgotten",
          "body": "> This has a particular impact on the newer `Span` and `ReadOnlySpan` APIs, **especially in the context of writing parsing code**, where representing the lack of a value is important, and negatively harms the ergonomics and expressiveness of these APIs, making them more difficult to adopt when writing high-performance code.\r\n\r\nReally not seeing that, considering you can use the `Try` pattern with `out` parameter to surface both a `ReadOnlySpan<char>` and a `bool` indicating whether a token was succesfully extracted during a parse operation. In cases where it was not, you just return `default` - aka `ReadOnlySpan<char>.Empty` for the `out` parameter.\r\n\r\nThis scenario is only relevant in those situations where you're predisposed to overloading the meaning of `null` to be `false`, 'error', etc. and the solution in that case is _simply to stop doing that_.",
          "createdAt": "2024-07-31T12:15:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-07-31T12:20:20Z",
          "id": "IC_kwDODI9FZc6GurgI"
        },
        {
          "author": "CodingMadness",
          "body": "Any news on this topic so far?",
          "createdAt": "2025-06-08T13:28:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-08T13:28:11Z",
          "id": "IC_kwDODI9FZc6wE62w"
        },
        {
          "author": "huoyaoyuan",
          "body": "This is inactionable now. Option 1 will make `Nullable<T>` a `ref struct` and massively breaking. In option 2, the implicit cast operators isn't allowed given they can't be conditionally defined. There must be some type system enhancement before API update.",
          "createdAt": "2025-06-08T14:08:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-08T14:08:07Z",
          "id": "IC_kwDODI9FZc6wE_fn"
        },
        {
          "author": "CodingMadness",
          "body": "> This is inactionable now. Option 1 will make `Nullable<T>` a `ref struct` and massively breaking. In option 2, the implicit cast operators isn't allowed given they can't be conditionally defined. There must be some type system enhancement before API update.\n\nI wonder, couldn't they just implment/create a seperate 'Nullable', called 'NullableRef<T>' which will be created instead of the usual Nullable<T> when you do this:\n\n```cs\npublic ref struct SomeData\n{\n      public Span<char>? nullableSpan; //Now instead of Nullable<Span<char>> the new,  NullableRef<char> will be created\n}\n```\n\nAFAIk, the \"CommunityToolKit.HighPerformance\" contains already  [NullableRef](https://github.com/CommunityToolkit/dotnet/blob/main/src/CommunityToolkit.HighPerformance/NullableRef%7BT%7D.cs)",
          "createdAt": "2025-06-08T15:33:16Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-08T15:33:16Z",
          "id": "IC_kwDODI9FZc6wFJb8"
        },
        {
          "author": "huoyaoyuan",
          "body": "> I wonder, couldn't they just implment/create a seperate 'Nullable', called 'NullableRef' which will be created instead of the usual Nullable when you do this:\n\nThis is not a runtime API feature. Instead, it's mostly a C# language feature to set up a syntax shortcut for it.\n\n> AFAIk, the \"CommunityToolKit.HighPerformance\" contains already [NullableRef](https://github.com/CommunityToolkit/dotnet/blob/main/src/CommunityToolkit.HighPerformance/NullableRef%7BT%7D.cs)\n\nThe bar for BCL and third-party library are different. BCL must maintain strict compatibility and wide availability.",
          "createdAt": "2025-06-08T16:38:08Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-08T16:38:08Z",
          "id": "IC_kwDODI9FZc6wFQWW"
        },
        {
          "author": "CodingMadness",
          "body": "> This is not a runtime API feature. Instead, it's mostly a C# language feature to set up a syntax shortcut for it.\n\nhm okay so it is basically being paused for now as a potential consideration, the entire Nullable ref struct thing that is?",
          "createdAt": "2025-06-08T16:39:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-08T16:39:34Z",
          "id": "IC_kwDODI9FZc6wFQep"
        }
      ],
      "totalCount": 8,
      "endCursor": "Y3Vyc29yOnYyOpHOsBUHqQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/104938",
    "title": "[API Proposal]: Safe nullability for `ref struct`s"
  },
  {
    "author": "carlossanlop",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2024-08-05T19:29:31Z",
    "body": "The table below shows the namespaces that added APIs in .NET 9 and do not yet have any documentation in dotnet-api-docs.\r\n\r\nThe dotnet-api-docs repo is currently our source of truth for documentation for two reasons:\r\n\r\n- We ensure the docs go through language review there via a PR (it happens in dotnet-api-docs)\r\n- We use that language-reviewed content to generate the official intellisense xmls that we then ship to customers (this is fed back to dotnet/runtime via an internal package)\r\n\r\nThe documentation in triple slash comments in source code needs to be manually ported to dotnet-api-docs to ensure the above process is done. We already ported all existing docs for .NET 9 APIs ([here](https://github.com/dotnet/dotnet-api-docs/pulls?q=author%3Acarlossanlop+Port+docs) and [here](https://github.com/dotnet/dotnet-api-docs/pulls?q=author%3Adirecthex+Port+docs)), but there are still some that show up as undocumented.\r\n\r\nIn the table below, each namespace is assigned an issue that contains a detailed list of the APIs that show up as undocumented in dotnet-api-docs, and the exact xml element that needs to be documented. Please look at your undoc APIs and follow the instructions below for documenting them.\r\n\r\n**Important**: These issues are marked as `blocking-release`. All new APIs need to documented **the day before the RC2 snap** (September 15th).\r\n\r\n| Namespace                                  | 08-20 (P7) | Issue |\r\n|--------------------------------------------|------------|-------|\r\n| System.Numerics                            | 146        | https://github.com/dotnet/runtime/issues/105981\r\n| System                                     | 41         | https://github.com/dotnet/runtime/issues/105987\r\n| System.ComponentModel                      | 17         | https://github.com/dotnet/runtime/issues/105983\r\n| System.Linq                                | 7          | https://github.com/dotnet/runtime/issues/105984\r\n| System.Collections.Generic                 | 5          | https://github.com/dotnet/runtime/issues/105974\r\n| System.Collections.Frozen                  | 5          | https://github.com/dotnet/runtime/issues/105974\r\n| System.Threading.Tasks                     | 5          | https://github.com/dotnet/runtime/issues/105985\r\n| System.Diagnostics                         | 5          | https://github.com/dotnet/runtime/issues/105980\r\n| System.Collections.Concurrent              | 4          | https://github.com/dotnet/runtime/issues/105974\r\n| System.Net.Quic                            | 4          | https://github.com/dotnet/runtime/issues/106789\r\n| System.Security.Cryptography               | 4          | https://github.com/dotnet/runtime/issues/106790\r\n| System.IO                                  | 3          | https://github.com/dotnet/runtime/issues/105979\r\n| System.Net.Http                            | 3          | https://github.com/dotnet/runtime/issues/106789\r\n| System.Data                                | 1          | https://github.com/dotnet/dotnet-api-docs/pull/10294\r\n| System.Formats.Tar                         | 1          | https://github.com/dotnet/dotnet-api-docs/pull/10294\r\n| **Total**                                  | **251**    | \r\n\r\n\r\n| Namespace                     | 08-20 (P7) | 08-15 (P6) |\r\n|-------------------------------|------------|------------|\r\n| System.Runtime.Intrinsics.Arm | 1680       | 1247       |\r\n| System.Runtime.Intrinsics.X86 | 597        | 609        |\r\n| System.Runtime.Intrinsics     | 80         | 72         |\r\n| **Total**                     | **2357**   | **1928**   |\r\n\r\nIntrinsics issue: https://github.com/dotnet/runtime/issues/105989\r\n\r\n\r\n| Namespace                      | 08-20 (P7) | 08-15 (P6) |\r\n|--------------------------------|------------|------------|\r\n| System.Drawing.Imaging.Effects | 80         | 80         |\r\n| System.Drawing                 | 42         | 42         |\r\n| System.Drawing.Drawing2D       | 34         | 32         |\r\n| System.Drawing.Imaging         | 31         | 31         |\r\n| **Total**                      | **187**    | **185**    |\r\n\r\nDrawing issue: https://github.com/dotnet/winforms/issues/11858\r\n\r\n\r\n\r\n## Instructions\r\n\r\nFirst, determine what's the documentation source of truth for your assembly:\r\n\r\nA) Your assembly uses triple slash comments as the source of truth - You'll know this if your assembly's src csproj does _not_ set the `<UseCompilerGeneratedDocXmlFile>` property, or it explicilty sets it to `true` ([example](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Formats.Cbor/src/System.Formats.Cbor.csproj)). Note that the default value for that property is `true` so usually it will just be absent. For such assemblies, you only need to add the missing documentation in the source code triple slash comments directly and send a PR in runtime. After merged, your documentation should show up in MS Docs in the next preview release automatically.\r\n    Note: After the RC1 snap (August 14th), you'll also have to backport your PR to the RC1 branch.\r\n\r\nB) If the `<UseCompilerGeneratedDocXmlFile>` property is set to `false`, then it means it is still using dotnet-api-docs as its source of truth. If your assembly uses `false`, then follow the \"porting to dotnet-api-docs\" instructions below.\r\n\r\n### Porting to dotnet-api-docs\r\n\r\n1. Clone the three involved repos locally if you haven't yet done so:\r\n   ```\r\n    git clone https://github.com/dotnet/runtime\r\n    git clone https://github.com/dotnet/dotnet-api-docs\r\n    git clone https://github.com/dotnet/api-docs-sync\r\n   ```\r\n2. Run the api-docs-sync [install-as-tool.ps1](https://github.com/dotnet/api-docs-sync/blob/main/install-as-tool.ps1) script to get the docs porting tool installled as a global dotnet tool.\r\n3. In the runtime clone, document the APIs, then build their assembly:\r\n\r\n    a) If it's a regular libraries assembly, build the src csproj:\r\n      ```\r\n        cd runtime/src/libraries/System.Formats.Tar\r\n        dotnet build src/System.Formats.Tar.csproj\r\n      ```\r\n    b) If the APIs are defined inside System.Private.CoreLib:\r\n      ```\r\n         cd runtime\r\n         build.cmd clr.corelib -rc release\r\n      ```\r\n<!--Your resulting xml file will be located under `artifacts/bin/coreclr/<OS>.<ARCH>.<CONFIG>/IL/`, for example: `artifacts/bin/coreclr/windows.arm64.Release/IL/`. Make note of this folder for later.-->\r\n\r\n4. Port the xml docs from runtime into dotnet-api-docs running this command:\r\n   ```\r\n    PortToDocs \\\r\n        -Docs <pathToDocsXmlFolder> \\\r\n        -IntelliSense <pathToArtifactsFolder1>[,<pathToArtifactsFolder2>,...,<pathToArtifactsFolderN>] \\\r\n        -IncludedAssemblies <assembly1>[,<assembly2>,...<assemblyN>] \\\r\n        -IncludedNamespaces <namespace1>[,<namespace2>,...,<namespaceN>] \\\r\n        -SkipInterfaceImplementations [true|false] \\\r\n        -Save true\r\n   ```\r\n\r\n   1. Example if it's a regular assembly:\r\n      ```\r\n       PortToDocs \\\r\n            -Docs \"C:\\path\\to\\dotnet-api-docs\\xml\" \\\r\n            -IntelliSense \"C:\\path\\to\\runtime\\artifacts\\obj\" \\\r\n            -IncludedAssemblies \"System.Formats.Tar\" \\\r\n            -SkipInterfaceImplementations true \\\r\n            -Save true\r\n      ```\r\n   2. If the APIs are defined under System.Private.CoreLib (for example, APIs from System.IO, System.Text, System.Globalization or System.Numerics):\r\n      ```\r\n       PortToDocs \\\r\n            -Docs \"C:\\path\\to\\dotnet-api-docs\\xml\" \\\r\n            -IntelliSense \"C:\\path\\to\\runtime\\artifacts\\bin\\coreclr\" \\\r\n            -IncludedAssemblies \"System.Runtime,System.Private.CoreLib\" \\\r\n            -IncludedNamespaces \"System.IO\" \\\r\n            -SkipInterfaceImplementations true \\\r\n            -Save true\r\n      ```\r\n\r\n  #### Notes\r\n\r\n  - If your undocumented list contains APIs that are explicit interface implementations and use `<inheritdoc/>`, set the `SkipInterfaceImplementations` argument to `false` or remove it altogether. The tool will import all interfaces and will try to find and copy the parent interface's documentation for you.\r\n\r\n  - Also notice that coreclr uses `bin`, while libraries uses `obj`.\r\n\r\n5. Submit a dotnet-api-docs PR and tag @gewarren and @carlossanlop for language review.\r\n\r\ncc\r\nLibraries APIs: @jeffhandley @ericstj @SamMonoRT @artl93 @stephentoub \r\ncoreclr APIs: @jeffschwMSFT @agocke @tommcdon @JulieLeeMSFT \r\nDrawing APIs: @JeremyKuhne @merriemcgaw\r\n",
    "number": 105974,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-31T19:03:28Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-08-05T19:30:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-05T19:30:27Z",
          "id": "IC_kwDODI9FZc6HSeBI"
        },
        {
          "author": "ViktorHofer",
          "body": "> A) Your assembly uses triple slash comments as the source of truth - You'll know this if your assembly's src csproj sets the <UseCompilerGeneratedDocXmlFile> property to true\n\nPlease update this paragraph as it isn't true anymore. That property defaults to true in main. Unless a project sets it to false, the project uses triple slash comments as the source of truth.\n\n> B) If the <UseCompilerGeneratedDocXmlFile> property is unset or is set to false,\n\nSimilarly, here it should say \"if the property is set to false\". Unset now means A and not B.",
          "createdAt": "2024-08-07T06:33:25Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-07T06:35:37Z",
          "id": "IC_kwDODI9FZc6HdwI3"
        },
        {
          "author": "carlossanlop",
          "body": "Thanks, fixed, @ViktorHofer .",
          "createdAt": "2024-08-07T18:09:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-07T18:09:18Z",
          "id": "IC_kwDODI9FZc6HiyvQ"
        },
        {
          "author": "michaelgsharp",
          "body": "@ViktorHofer when did that change go in? That property was unset in `System.Numerics` until yesterday, and enabling it immediately had a bunch of build failures. If that property was enabled by default I wouldn't have expected that behavior.",
          "createdAt": "2024-08-07T18:33:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-07T18:33:49Z",
          "id": "IC_kwDODI9FZc6Hi90g"
        },
        {
          "author": "carlossanlop",
          "body": "There might be a bug in the logic. If the property is unset, it should be treated as `true`, but maybe we're not doing that, hence why you started seeing the failures when you set it to `true` explicitly. But this is a hypothesis, I'll have to dig in to confirm.",
          "createdAt": "2024-08-07T18:44:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-07T18:44:39Z",
          "id": "IC_kwDODI9FZc6HjEeE"
        },
        {
          "author": "ViktorHofer",
          "body": "@michaelgsharp Just to double check that we are talking about the same thing please elaborate on:\r\n- which project\r\n- which property\r\n- and what are the exact build failures\r\n\r\nFor `System.Numerics.Vectors` the `UseCompilerGeneratedDocXmlFile` property is explicitly set to false which silences the CS1591 errors: https://github.com/dotnet/runtime/blob/019d7580a27db97f1fbdcf0d26f7ae3fa54fc2d1/src/libraries/System.Numerics.Vectors/src/System.Numerics.Vectors.csproj#L6\r\n\r\nThat's the expected behavior. FWIW if I remove that property (or set it to true), I don't get any build errors.",
          "createdAt": "2024-08-08T08:48:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-08T09:00:52Z",
          "id": "IC_kwDODI9FZc6HniU2"
        },
        {
          "author": "carlossanlop",
          "body": "We inspected the package in the transport feed. No xmls are getting included anymore. And this regression was introduced in the same PR that inverted the value of UseCompilerGeneratedDocXmlFile. The problem is that if the property is absent, it is not being treated as true, as we expected.",
          "createdAt": "2024-08-08T16:00:59Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-09T07:19:40Z",
                "user": "ViktorHofer"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODtZJsg=="
          },
          "updatedAt": "2024-08-08T16:00:59Z",
          "id": "IC_kwDODI9FZc6Hq6d9"
        },
        {
          "author": "ViktorHofer",
          "body": "@carlossanlop do we also need an issue for Microsoft.Extensions.Http? Fixing the switch causes these two undocumented public APIs to error:\r\n\r\nhttps://github.com/dotnet/runtime/blob/99f7f934927c7e2c2af2491cb9b9aa2063a562d2/src/libraries/Microsoft.Extensions.Http/src/DependencyInjection/HttpClientBuilderExtensions.cs#L648-L705",
          "createdAt": "2024-08-09T07:53:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-09T07:53:38Z",
          "id": "IC_kwDODI9FZc6Hve2k"
        },
        {
          "author": "ViktorHofer",
          "body": "Submitted https://github.com/dotnet/runtime/pull/106179 to fix the wrong default",
          "createdAt": "2024-08-09T08:19:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-09T08:19:05Z",
          "id": "IC_kwDODI9FZc6HvpvF"
        },
        {
          "author": "carlossanlop",
          "body": "@ViktorHofer not sure when those APIs were introduced to runtime in main. There's a chance they were introduced in Preview7. Remember that the dotnet-api-docs APIs are always one preview behind (currently pointing at Preview6). So what you see as undocumented in runtime but not showing up in my tables might be because the API doesn't yet exist in dotnet-api-docs.",
          "createdAt": "2024-08-09T17:17:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-09T17:17:22Z",
          "id": "IC_kwDODI9FZc6HzY45"
        }
      ],
      "totalCount": 10,
      "endCursor": "Y3Vyc29yOnYyOpHOh82OOQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/105974",
    "title": "Documenting .NET 9 APIs"
  },
  {
    "author": "ygoe",
    "labels": [
      "area-Meta",
      "os-windows",
      "source-generator"
    ],
    "createdAt": "2024-08-20T15:37:23Z",
    "body": "### Description\r\n\r\nSource generators are a nice thing in .NET 8, but the files they create live in subdirectories of subdirectories of more subdirectories, each one with a longer name than the other. You can imagine where it leads: paths longer than 260 characters. I've hit this issue with decently short namespace lengths already. Then it's impossible to inspect the generated files with Visual Studio or Notepad++. Only VS Code can still open them somehow, but not show their full name anymore.\r\n\r\n### Reproduction Steps\r\n\r\nUse a source generator on a project with namespaces longer than 50 characters in a project with a base path of at least 40 characters.\r\n\r\n### Expected behavior\r\n\r\nThe generated files should be in shorter directories.\r\n\r\n### Actual behavior\r\n\r\nThe generated files are in directories named after the namespace and type of the generator + the namespace and type of the processed type + the \"obj\\Debug\\net8.0\\generated\" prefix.\r\n\r\n### Regression?\r\n\r\nProbably not.\r\n\r\n### Known Workarounds\r\n\r\nSource generators can try to delay the issue by creating shorter file names, starting with a short hash of the namespace. But the directories are still long.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nhttps://developercommunity.visualstudio.com/t/Allow-file-names-longer-than-259-charact/10711192",
    "number": 106702,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-08-23T02:12:08Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "julealgon",
          "body": "@ygoe could you provide a concrete example including the file path it generates, and your proposed shortened version?",
          "createdAt": "2024-08-20T16:19:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T16:19:32Z",
          "id": "IC_kwDODI9FZc6JC8rm"
        },
        {
          "author": "ygoe",
          "body": "This is the original name I would have gotten:\r\n\r\nC:\\Source\\DevTools\\Unclassified.ObjectData\\Unclassified.ObjectData.UnitTests\\obj\\Debug\\net8.0\\generated\\Unclassified.ObjectData.Generators\\Unclassified.ObjectData.Generators.JsonSerializationGenerator\\Unclassified.ObjectData.UnitTests.EmailAddressWithName.Json.g.cs\r\n\r\n* C:\\Source\\DevTools: Where my developer tools projects are located\r\n* Unclassified.ObjectData: The solution directory *\r\n* Unclassified.ObjectData.UnitTests: The unit test project in the solution, it also uses the source generator *\r\n* obj\\Debug\\net8.0\\generated: Common subdirectories **\r\n* Unclassified.ObjectData.Generators: The name of the source generator project **\r\n* Unclassified.ObjectData.Generators.JsonSerializationGenerator: The fully qualified name of the generator type **\r\n* Unclassified.ObjectData.UnitTests.EmailAddressWithName.Json.g.cs: The name of the generated file, uses also the fully qualified type of the augmented partial class\r\n\r\n*) Possible for me to change, but makes the path structure a lot worse\r\n**) Not under my control with reasonable measures or at all\r\n\r\nIt has 265 characters. Not exceeding the limit by much, but too long is too long, no matter how far. The file can't be opened in many applications. Stupid path length limit, a thing of the ancient past actually. But nobody cares, so it's still there.\r\n\r\nThis is my workaround with a custom truncated hash of the namespace:\r\n\r\nC:\\Source\\DevTools\\Unclassified.ObjectData\\Unclassified.ObjectData.UnitTests\\obj\\Debug\\net8.0\\generated\\Unclassified.ObjectData.Generators\\Unclassified.ObjectData.Generators.JsonSerializationGenerator\\\\**kKSf**.EmailAddressWithName.Json.g.cs\r\n\r\nLength: - 33 + 4 characters. But should somebody decide to use my generator in a project that has a longer base path, it can still get ugly when the generated files need to be inspected.\r\n\r\nI'm not sure how to simplify this, but the two levels I cannot influence are the first to consider: (bold text is hard to see here)\r\n\r\nC:\\Source\\DevTools\\Unclassified.ObjectData\\Unclassified.ObjectData.UnitTests\\obj\\Debug\\net8.0\\generated\\\\**Unclassified.ObjectData.Generators\\Unclassified.ObjectData.Generators.JsonSerializationGenerator**\\Unclassified.ObjectData.UnitTests.EmailAddressWithName.Json.g.cs\r\n\r\nMaybe the second one of them could simply be left out, that would save a lot of characters. As the author of the generator project, I can make sure not to generate conflicting file names myself.\r\n\r\nOr both could be shortened to their type name without the namespace and counters appended if names exist multiple times.",
          "createdAt": "2024-08-20T18:24:55Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2024-08-20T18:29:17Z",
                "user": "julealgon"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHODu9YPA=="
          },
          "updatedAt": "2024-08-20T19:20:26Z",
          "id": "IC_kwDODI9FZc6JDz1R"
        },
        {
          "author": "Clockwork-Muse",
          "body": ">generated\\Unclassified.ObjectData.Generators\\Unclassified.ObjectData.Generators.JsonSerializationGenerator\\Unclassified.ObjectData.UnitTests.EmailAddressWithName.Json.g.cs\r\n\r\n... I don't know if this is part of the standard, but maybe the path here should just be an 8-character hash or something?  Although it would need tool support to be able to switch to the generated file intelligibly....\r\n\r\n> C:\\Source\\DevTools: Where my developer tools projects are located\r\n\r\nSide note: It's recommended to keep repositories in your user profile when possible (keeping it out of a world-writable/root directories for security purposes if nothing else).\r\n\r\n",
          "createdAt": "2024-08-20T18:45:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T18:45:23Z",
          "id": "IC_kwDODI9FZc6JD-Si"
        },
        {
          "author": "ygoe",
          "body": "> Side note:\r\n\r\nI know Microsoft's recommendations on paths and intentionally discard them. I like to keep the entirety of my digital data in directories that are not related to the operating system, for reasons of safety, portability and recoverability. The larger parts are still on the D:\\ HDD anyway until I get myself an even bigger SSD. As the only user of my computers this is totally fine. Anyway, following that recommendation in this case would make it even harder to avoid exceeding the maximum path length, adding 11 more characters. Think of the old days of \"C:\\Dokumente und Einstellungen\"… I've made my share of experiences with that.",
          "createdAt": "2024-08-20T19:17:28Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T19:17:28Z",
          "id": "IC_kwDODI9FZc6JEOqj"
        },
        {
          "author": "ygoe",
          "body": "> I don't know if this is part of the standard\r\n\r\nI've edited my comment above to indicate which parts of the path are not under my control. The two levels I mentioned as possible things to change are fully not under my control. So I need you to change it.",
          "createdAt": "2024-08-20T19:22:01Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T19:22:01Z",
          "id": "IC_kwDODI9FZc6JEQ9a"
        },
        {
          "author": "julealgon",
          "body": "Thanks for sharing that example @ygoe , it does put the problem into perspective and I tend to agree with you.\r\n\r\nJust wanted to throw some things here that _might_ help, some of which I've used myself in the past.\r\n\r\n1. You can map your root folder to a special drive letter in Windows using [`subst`](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/subst).\r\n\r\nIn your case, it would look like:\r\n```\r\nsubst X: C:\\Source\\DevTools\r\n```\r\n\r\nThis is obviously a workaround solution, but it has helped me in the past as it does save quite a few characters from the 260 max.\r\n\r\n2. Regarding `obj\\Debug\\net8.0\\generated`, I _believe_ you should be able to customize the `Debug`/`Release` directory names with some MSBuild property. I know the target framework (and runtime identifier) can be hidden using \r\n\r\n```xml\r\n<PropertyGroup>\r\n  <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n  <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\r\n</PropertyGroup>\r\n```\r\nhttps://learn.microsoft.com/en-us/visualstudio/ide/how-to-change-the-build-output-directory?view=vs-2022&tabs=csharp#change-the-build-output-directory-2\r\n\r\nThis might be useful if you are not multi targeting to save a few more characters.\r\n\r\nThis max path problem is a very silly issue that has plagued the Windows ecosystem for years though. It's sad to me that tools are still relying on this legacy max value, including even Windows tools (and Windows itself in cases).",
          "createdAt": "2024-08-20T20:45:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T20:45:41Z",
          "id": "IC_kwDODI9FZc6JEyg2"
        },
        {
          "author": "Clockwork-Muse",
          "body": "> This is obviously a workaround solution, but it has helped me in the past as it does save quite a few characters from the 260 max.\r\n\r\nIf you're going to do this, might as well set up WSL and devcontainers, and do everything in Linux, where all of this becomes a non-issue.\r\n\r\n> Think of the old days of \"C:\\Dokumente und Einstellungen\"\r\n\r\nYou don't want to stick it in the modern documents folder anyways, which is synced to OneDrive (by default), and which wouldn't take well to build/debug cycles.  Stick it in something like `%UserProfile%\\repositories`.\r\n\r\n> I like to keep the entirety of my digital data in directories that are not related to the operating system, for reasons of safety, portability and recoverability.\r\n\r\n... a big part of the operating system is ensuring exactly those guarantees, and moving them outside user directories actually works against that (too, your best option for recoverability for code is going to be persisting it to a cloud repo).  For everything else, a backup drive is a good idea.",
          "createdAt": "2024-08-20T21:00:22Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T21:00:22Z",
          "id": "IC_kwDODI9FZc6JE4Bk"
        },
        {
          "author": "ygoe",
          "body": "Thanks for the hints about the project properties, I might well disable the framework part as I'm not multi-targeting here. This could also make packaging scripts simpler as they don't need to consider the current framework version anymore.\r\n\r\n> ... a big part of the operating system is ensuring exactly those guarantees ...\r\n\r\nSafety: You never know when you get spaces in such system directories, and they tend to mess up build scripts badly.\r\nPortability: I work with multiple computers and some of them have different user names. Having a constant source folder removes a class of annoyances and diff noise when syncing files.\r\nRecoverability: When Windows goes away for unexpected reasons, I want to access the files on my disks without first hacking all ACLs to let me in. Had that a few times. And if Windows comes back, the ACLs are left open. There's no use in that.\r\n\r\nThis is getting a bit off-topic, but I wanted to explain my decision. And it seems I'm not alone, I've seen specifically that C:\\Source folder quite a few times already. Nice side effect: There's no personal data leaking out through debug symbols in your builds. Because these contain absolute paths from the build environment.",
          "createdAt": "2024-08-20T21:20:35Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-20T21:20:35Z",
          "id": "IC_kwDODI9FZc6JE_WA"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-08-21T15:45:24Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-21T15:45:24Z",
          "id": "IC_kwDODI9FZc6JPARW"
        },
        {
          "author": "tannergooding",
          "body": "I'd recommend enabling long paths: https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later. Roslyn and many other parts of .NET got support for long paths back in 2019: https://github.com/dotnet/roslyn/issues/32804, NuGet since 4.8 https://learn.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-long-path. The VS project system still requires the directory name be less than 248 and the directory + file name to be less than 260, but there's a tracking issue (which you linked in the top post) for that and it shouldn't impact the bin/obj outputs which aren't normally part of the solution. The folder view works much better with long paths, but still has a couple limitations, I'd recommend upvoting the relevant issues on VS Feedback for that support to be added.\r\n\r\nSource generators only generate files if `/p:EmitCompilerGeneratedFile=true`. You can then customize the output location using `/p:CompilerGeneratedFilesOutputPath=...` which defaults to `$(IntermediateOutputPath)/generated` (https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview), just as you can custom other aspects of the binary, object, publish and other artifact output locations (https://learn.microsoft.com/en-us/dotnet/core/sdk/artifacts-output, https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props, https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2022, etc)\r\n\r\nThere are many ways in which you can shorten or otherwise customize the path if that's necessary for your particular setup. The default, however, needs to be that unique and understandable file names are generated.\r\n\r\n",
          "createdAt": "2024-08-21T16:26:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-21T16:26:06Z",
          "id": "IC_kwDODI9FZc6JPVUw"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-08-21T16:26:30Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-08-21T16:26:30Z",
          "id": "IC_kwDODI9FZc6JPVhR"
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHOiT1YUQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/106702",
    "title": "Source generators generate longer paths than anybody can handle"
  },
  {
    "author": "elachlan",
    "labels": [
      "api-suggestion",
      "area-Meta",
      "code-analyzer"
    ],
    "createdAt": "2024-09-03T00:21:02Z",
    "body": "It would be nice to have an analyzer rule/codefix that identifies usages of `lock(this)` inside public classes to discourage the practice.\r\n\r\nThere were a couple of instances of this in the winforms code base that were identified in https://github.com/dotnet/winforms/issues/11672, which was subsequently fixed manually by the team.\r\n\r\nRelated to: https://github.com/dotnet/runtime/issues/106907",
    "number": 107269,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-04T13:40:07Z",
          "user": "kevinoid"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-09-05T22:42:08Z",
          "user": "colejohnson66"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-11-04T02:01:33Z",
          "user": "WeihanLi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2024-12-30T08:21:01Z",
          "user": "Sella-GH"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOC9x80g=="
    },
    "updatedAt": "2025-07-16T06:35:05Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-09-03T00:21:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-03T00:21:23Z",
          "id": "IC_kwDODI9FZc6KmulM"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOiprpTA=="
    },
    "url": "https://github.com/dotnet/runtime/issues/107269",
    "title": "Analyzer to help avoid public usage of `lock(this)`"
  },
  {
    "author": "dotecxy",
    "labels": [
      "area-Meta",
      "needs-further-triage"
    ],
    "createdAt": "2024-09-23T02:36:38Z",
    "body": "### Description\n\nWinform  use ElementHost include wpf control\n\n### Reproduction Steps\n\nApplication startup after 5s\n\n### Expected behavior\n\ndont't crash\n\n### Actual behavior\n\ncrash\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nwin11 x64  10.0.22631\r\n\r\n\r\n\r\n\r\n\n\n### Other information\n\n应用程序名称：sinsam\r\n应用程序版本：24.6.20.2\r\n提交时间：2024/9/22 19:23:28\r\n系统运行时间段：2024年9月22日 19时23分14秒-2024年9月22日 19时23分28秒\r\n系统相关信息：\r\n系统：Microsoft Windows 11 专业版,版本：10.0.22631,类型：64 位\r\nCPU相关信息：\r\n型号：Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz,最大睿频：1800,核心数：4,逻辑处理器核心数：8\r\n内存相关信息：\r\n已安装可用的内存(RAM)：8.00 GB,空闲：3.14 GB\r\n磁盘相关信息：\r\n磁盘：C:,容量：138.17 GB,可用空间：80.35 GB,%已用:41.85%\r\n磁盘：D:,容量：100.00 GB,可用空间：31.53 GB,%已用:68.47%\r\n显卡相关信息：\r\n名称：OrayIddDriver Device,驱动版本：17.1.58.818\r\n名称：Radeon (TM) 520,驱动版本：27.20.20904.4000\r\n名称：Intel(R) UHD Graphics 620,驱动版本：27.20.100.9664\r\n声卡相关信息：\r\n名称：High Definition Audio 设备,设备ID：HDAUDIO\\FUNC_01&VEN_10EC&DEV_0236&SUBSYS_10280841&REV_1000\\4&1C14A89C&0&0001\r\n名称：英特尔(R) 显示器音频,设备ID：HDAUDIO\\FUNC_01&VEN_8086&DEV_280B&SUBSYS_80860101&REV_1000\\4&1C14A89C&0&0201\r\n名称：USB Audio Device,设备ID：USB\\VID_8087&PID_1041&MI_00\\7&56EE56D&0&0000\r\n显示器相关设置\r\n分辨率：{X=0,Y=0,Width=1366,Height=768},缩放：1,1\r\n\r\n异常信息如下：\r\n异常类型：Exception\r\n异常消息：<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='.NET Runtime'/><EventID Qualifiers='0'>1023</EventID><Version>0</Version><Level>2</Level><Task>0</Task><Opcode>0</Opcode><Keywords>0x80000000000000</Keywords><TimeCreated SystemTime='2024-09-22T11:23:20.6645404Z'/><EventRecordID>1498</EventRecordID><Correlation/><Execution ProcessID='13076' ThreadID='0'/><Channel>Application</Channel><Computer>DESKTOP-3DL3I7U</Computer><Security/></System><EventData><Data>Application: sinsam.exe\r\nCoreCLR Version: 8.0.824.36612\r\n.NET Version: 8.0.8\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 0x00007FFBD72163F9 (0x00007FFBD7110000) with exit code 0x80131506.\r\n</Data></EventData></Event><Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Application Error' Guid='{a0e9b465-b939-57d7-b27d-95d8e925ff57}'/><EventID>1000</EventID><Version>0</Version><Level>2</Level><Task>100</Task><Opcode>0</Opcode><Keywords>0x8000000000000000</Keywords><TimeCreated SystemTime='2024-09-22T11:23:21.2569930Z'/><EventRecordID>1499</EventRecordID><Correlation/><Execution ProcessID='7776' ThreadID='9172'/><Channel>Application</Channel><Computer>DESKTOP-3DL3I7U</Computer><Security UserID='S-1-5-21-1244722366-2956633076-1299550101-1001'/></System><EventData><Data Name='AppName'>sinsam.exe</Data><Data Name='AppVersion'>24.6.20.2</Data><Data Name='AppTimeStamp'>666b0000</Data><Data Name='ModuleName'>coreclr.dll</Data><Data Name='ModuleVersion'>8.0.824.36612</Data><Data Name='ModuleTimeStamp'>6696b815</Data><Data Name='ExceptionCode'>c0000005</Data><Data Name='FaultingOffset'>00000000001063f9</Data><Data Name='ProcessId'>0x3314</Data><Data Name='ProcessCreationTime'>0x1db0ce1d06b252a</Data><Data Name='AppPath'>C:\\Program Files\\sinsam\\app\\sinsam.exe</Data><Data Name='ModulePath'>C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.8\\coreclr.dll</Data><Data Name='IntegratorReportId'>2853e56c-8ea9-4317-a07e-f911676f8c1c</Data><Data Name='PackageFullName'></Data><Data Name='PackageRelativeAppId'></Data></EventData></Event>\r\n异常信息：",
    "number": 108118,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2024-09-30T07:27:41Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "huoyaoyuan",
          "body": "The crash really lacks detail. Is there any crash dump or minimal code available? 0x80131506 is just general \"internal CLR error\".",
          "createdAt": "2024-09-24T05:24:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-24T05:24:11Z",
          "id": "IC_kwDODI9FZc6NRmEM"
        },
        {
          "author": "dotecxy",
          "body": "> The crash really lacks detail. Is there any crash dump or minimal code available? 0x80131506 is just general \"internal CLR error\".\r\nBecause this is on the client's computer, currently using Google breakkpoint library to generate the smallest dmp, but he has not generated a dmp file. What do I need to do, use procdmp.exe\r\n",
          "createdAt": "2024-09-24T09:56:56Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-24T09:56:56Z",
          "id": "IC_kwDODI9FZc6NT9eo"
        },
        {
          "author": "huoyaoyuan",
          "body": "You can follow the instructions on https://learn.microsoft.com/dotnet/core/diagnostics/collect-dumps-crash . I also remember there's a Windows feature to automatically collect crash dump at `%LOCALAPPDATA%\\CrashDumps`.",
          "createdAt": "2024-09-25T09:13:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-25T09:13:04Z",
          "id": "IC_kwDODI9FZc6NePgO"
        },
        {
          "author": "dotecxy",
          "body": "<img width=\"1405\" alt=\"62320965cc2e23312f3e80993a7ecd8\" src=\"https://github.com/user-attachments/assets/dd3cc623-18ff-411e-91eb-908763012e3d\">\r\n\r\nI found that this version is prone to problems on Windows 11\r\n",
          "createdAt": "2024-09-27T02:22:49Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-09-27T02:25:11Z",
          "id": "IC_kwDODI9FZc6Nwat5"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOjcGreQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/108118",
    "title": ".net8   ver8.0.8 Desktop Crash 0x80131506"
  },
  {
    "author": "js6pak",
    "labels": [
      "area-Meta",
      "blocking-release"
    ],
    "createdAt": "2024-10-15T19:23:44Z",
    "body": "According to the `LICENSE.TXT` inside [`dotnet-sdk-8.0.403-win-x64.zip`](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-8.0.403-windows-x64-binaries)/[`dotnet-runtime-8.0.10-win-x64.zip`](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-8.0.10-windows-x64-binaries) the license of those binaries is the [.NET Library License](https://dotnet.microsoft.com/dotnet_library_license.htm).\nBut the license fields on https://www.nuget.org/packages/Microsoft.NETCore.App.Runtime.win-x64/8.0.10 and https://www.nuget.org/packages/Microsoft.WindowsDesktop.App.Runtime.win-x64/8.0.10 say `MIT` even though they contain the offending binaries: `runtimes/win-x64/native/Microsoft.DiaSymReader.Native.amd64.dll`, `runtimes/win-x64/native/PresentationNative_cor3.dll` etc.\n\nAlso, there is the question of whether the license is even `.NET Library License` if it contains files like `runtimes/win-x64/native/D3DCompiler_47_cor3.dll` and `runtimes/win-x64/native/vcruntime140_cor3.dll` which according to https://github.com/dotnet/core/blob/main/license-information-windows.md are licensed under [Windows SDK License](https://learn.microsoft.com/legal/windows-sdk/license) and [Microsoft Visual C++ Runtime Software License](https://visualstudio.microsoft.com/license-terms/vs2022-cruntime/), respectively.",
    "number": 108905,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-05-16T14:06:39Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2024-10-15T20:13:54Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-15T20:13:54Z",
          "id": "IC_kwDODI9FZc6P8Lqu"
        },
        {
          "author": "jkotas",
          "body": "cc @richlander ",
          "createdAt": "2024-10-16T03:22:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-16T03:22:31Z",
          "id": "IC_kwDODI9FZc6P-9Rb"
        },
        {
          "author": "richlander",
          "body": "Thanks for the report! You are correct. That doesn't seem right. We'll get this fixed in `main` and then backport.\n\nI'll talk to some folks.\n\n",
          "createdAt": "2024-10-16T04:40:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-16T04:40:31Z",
          "id": "IC_kwDODI9FZc6P_OvC"
        },
        {
          "author": "jeffhandley",
          "body": "cc @dotnet/area-infrastructure-libraries for awareness",
          "createdAt": "2024-10-20T01:41:27Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-20T01:41:27Z",
          "id": "IC_kwDODI9FZc6QgT5w"
        },
        {
          "author": "richlander",
          "body": "Status:\n\n- We plan to link to the referenced file as our license for Windows builds: https://github.com/dotnet/core/blob/main/license-information-windows.md. It's not actually a license itself, but I don't think that is a problem.\n- The C++ runtime license is not sufficient since it doesn't actually obviously allow redistribution which is inherent to the scenario. We're working to get that resolved.\n\nIt would be best to wait for final guidance before making any license changes to the artifacts we produce/publish.",
          "createdAt": "2024-10-20T18:49:13Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-20T18:49:13Z",
          "id": "IC_kwDODI9FZc6QjT_J"
        },
        {
          "author": "js6pak",
          "body": "> The C++ runtime license is not sufficient since it doesn't actually obviously allow redistribution which is inherent to the scenario. We're working to get that resolved.\n\nAccording to [WPF docs](https://github.com/dotnet/wpf/blob/main/Documentation/redistributables.md), `vcruntime140_cor3.dll` is just a renamed `vcruntime140.dll` which should be redistributable under the [VS license](https://visualstudio.microsoft.com/license-terms/vs2022-ga-community/) as it's inside `[VisualStudioFolder]\\VC\\redist` which is specified by the [Distributable List](https://aka.ms/vs/17/redistribution).",
          "createdAt": "2024-10-20T21:01:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-20T21:01:39Z",
          "id": "IC_kwDODI9FZc6Qje-c"
        },
        {
          "author": "richlander",
          "body": "That's good context. We'd prefer not to have to use the whole VS license. I think that's actually what we were doing before. Either way, we'll sort this out.",
          "createdAt": "2024-10-21T15:32:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-21T15:32:26Z",
          "id": "IC_kwDODI9FZc6QqXgI"
        },
        {
          "author": "richlander",
          "body": "We now have more clarity on next steps:\n\n- All Windows artifacts (runtime, aspnetcore, sdk) should reference [1] as their license.\n- Merge https://github.com/dotnet/core/pull/9562\n\n@leecow  -- Who should be assigned this work?\n\n[1] https://github.com/dotnet/core/blob/main/license-information-windows.md",
          "createdAt": "2024-10-23T00:29:14Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-10-23T00:30:01Z",
          "id": "IC_kwDODI9FZc6Q32ME"
        },
        {
          "author": "richlander",
          "body": "We merged the referenced PR.\n\n@leecow -- who would be responsible for updated packages to use the correct license?",
          "createdAt": "2024-11-26T04:41:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-11-26T04:41:50Z",
          "id": "IC_kwDODI9FZc6U_Yv9"
        },
        {
          "author": "leecow",
          "body": "Is the work for individual repos to implement \"All Windows artifacts (runtime, aspnetcore, sdk) should reference [1] as their license\", or are there also license references that are wrong?\n",
          "createdAt": "2024-12-03T21:30:32Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-03T21:30:32Z",
          "id": "IC_kwDODI9FZc6V8Nus"
        },
        {
          "author": "richlander",
          "body": "I just wrote up some guidance on our model: https://github.com/dotnet/runtime/blob/main/docs/project/licensing-assets.md\n\nI hope this is clearer than what I wrote before. I think some of what I wrote before was also wrong.",
          "createdAt": "2024-12-04T22:01:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2024-12-04T22:01:54Z",
          "id": "IC_kwDODI9FZc6WH4na"
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHOlh-J2g=="
    },
    "url": "https://github.com/dotnet/runtime/issues/108905",
    "title": "License metadata on windows runtime nuget packages is wrong"
  },
  {
    "author": "julealgon",
    "labels": [
      "area-Meta"
    ],
    "createdAt": "2025-01-06T19:50:21Z",
    "body": "The issue cleanup bot, running under [dotnet-policy-service](https://github.com/apps/dotnet-policy-service), currently closes issues with the standard \"Completed\" (purple) reason. \n\nIssues marked as \"Completed\" are meant to be used when something was done to fix/implement them, which is not the case when the closure reason was staleness.\n\nHere is an example:\n- https://github.com/dotnet/runtime/issues/30978\n\n![Image](https://github.com/user-attachments/assets/f179a18f-1e24-40c5-8d20-4120c7fa8352)\n\nI propose that the automation is changed to use the \"Close as Not Planned\" reason (gray) instead, to make it clearer that the issue was _not_ implemented.\n\nSome similar discussion here for reference:\n- https://github.com/actions/stale/issues/744#issuecomment-1143881778\n\nThere, it is even mentioned that \"Close as Not Planned\" hints as \"staleness\" being one of the possible underlying use cases:\n![Image](https://github.com/user-attachments/assets/dfe87eba-251e-45a4-8f0d-eed2655d2f3f)\n",
    "number": 111131,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-01-16T08:37:33Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-01-06T22:07:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-06T22:07:58Z",
          "id": "IC_kwDODI9FZc6ZbE8-"
        },
        {
          "author": "jeffhandley",
          "body": "Assigned to @eiriktsarpalis for triage",
          "createdAt": "2025-01-16T04:04:11Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-01-16T04:04:11Z",
          "id": "IC_kwDODI9FZc6ao-WT"
        },
        {
          "author": "eiriktsarpalis",
          "body": "I'm guessing it's because the automation (targeting FabricBot at the time) predates the existence of different closed issued modalities. I'm guessing we could take a look at  this at some point.",
          "createdAt": "2025-01-16T08:37:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-01-16T14:44:19Z",
                "user": "julealgon"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-20T04:16:35Z",
                "user": "Source-Dom"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEXRnEw=="
          },
          "updatedAt": "2025-01-16T08:37:23Z",
          "id": "IC_kwDODI9FZc6aqlfV"
        }
      ],
      "totalCount": 3,
      "endCursor": "Y3Vyc29yOnYyOpHOmqpX1Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/111131",
    "title": "Issue cleanup automation should close issues \"As not planned\" instead of \"As completed\""
  },
  {
    "author": "tjwald",
    "labels": [
      "question",
      "area-Meta",
      "tenet-performance"
    ],
    "createdAt": "2025-02-05T10:35:00Z",
    "body": "Is it possible to improve `yield` based methods using the same type of optimizations as [async v2](https://github.com/dotnet/runtime/issues/94620)?\n\nMethods like: \n```csharp\npublic IEnumerable<int> M() {\n    for (int i = 0; i < 10; i++) {\n        yield return i;\n    }\n}\n```\ngenerates a state machine that could make the compiler and JIT have a harder time to optimize the generated code (and maybe stored fields etc.). \n\nThis could make Linq based APIs automatically inline and remove the need for manually writing IEnumerables to make it more performant.",
    "number": 112183,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-26T10:17:56Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "huoyaoyuan",
          "body": "Although `yield` and `await` are both based on CPM state machine, the major use cases are quite different. `await` often requires true suspension at IO operation, and the state capturing is required. When `yield` state machines are consumed directly, the state capturing is purely an artifact of separation of producing and consuming. The best optimization should be linking producing and consuming in a sequence.",
          "createdAt": "2025-02-05T10:55:53Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-05T10:55:53Z",
          "id": "IC_kwDODI9FZc6dJES5"
        },
        {
          "author": "tjwald",
          "body": "@huoyaoyuan I understand, but in the previous dotnet version there was a lot of work done in linq to hand-write iterators to improve performance of the different combinations. \n\nMaybe removing the state machine at the compiler level, and moving it to the IL / runtime could make that type of work obsolete since the Compiler / JIT could inline the logic  of the chain between each yield to the caller (and maybe the loop body of the caller as well). \n",
          "createdAt": "2025-02-05T11:01:18Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-05T11:01:26Z",
          "id": "IC_kwDODI9FZc6dJHTO"
        },
        {
          "author": "tjwald",
          "body": "I would expect: \n```csharp\npublic IEnumerable<int> M() {\n    int cumSum = 0;\n    foreach (var n in Enumerable.Range(0, 100).Where(x => x % 3 != 0).Select(x => x * 2)) {\n        cumSum += n;\n        yield return cumSum;\n    }\n}\n```\n\nTo generate the equivalent of: \n\n```csharp\npublic IEnumerable<int> M() {\n    int cumSum = 0;\n    for (int i = 0; i < 100; i++) {\n          if (i %3 != 0) {\n                cumSum += i * 2;\n                yield return cumSum;\n          }\n    }\n}\n```",
          "createdAt": "2025-02-05T11:11:12Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-05T11:11:12Z",
          "id": "IC_kwDODI9FZc6dJMx-"
        },
        {
          "author": "jakobbotsch",
          "body": "For runtime-async we are optimizing based on the assumption that suspensions are infrequent. The trade off is making suspension/resumption cost higher in favor of making the cost of other cases smaller.\nFor C#'s yield machinery that would correspond to optimizing for the case where the enumerator is going to yield 0 times while making it more expensive to yield more than 0 times. So likely using the same mechanism as runtime-async for yield would not be a good change.",
          "createdAt": "2025-02-05T12:37:58Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-05T12:37:58Z",
          "id": "IC_kwDODI9FZc6dKDWt"
        },
        {
          "author": "tjwald",
          "body": "I get it now, thank you. @jakobbotsch .\n\nIgnoring the specifics of the async machinery, moving the yield machinery to the IL level wouldn't allow the JIT to optimize iterator chains so effectively there would be only one Enumerator running with all the logic inlined? \n\nThe above code I provided runs between 2 times and 3 times as fast for different sizes on dotnet 9:\n\n\n```csharp\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\n\nBenchmarkRunner.Run<Benchmarks>();\n\n[MemoryDiagnoser]\npublic class Benchmarks\n{\n    [Params(10, 1000, 1_000_000)] public int Size { get; set; }\n\n    [Benchmark]\n    public int[] CumSumLinq()\n    {\n        return CumSumLinqImp(Size).ToArray();\n    }\n    \n    [Benchmark]\n    public int[] CumSumHandWritten()\n    {\n        return CumSumHandWrittenImp(Size).ToArray();\n    }\n\n    private static IEnumerable<int> CumSumLinqImp(int size)\n    {\n        int cumSum = 0;\n        foreach (int n in Enumerable.Range(0, size).Where(x => x % 3 != 0).Select(x => x * 2)) {\n            cumSum += n;\n            yield return cumSum;\n        }\n    }\n    \n    private static IEnumerable<int> CumSumHandWrittenImp(int size)\n    {\n        int cumSum = 0;\n        for (int i = 0; i < size; i++)\n        {\n            if (i % 3 == 0) continue;\n            cumSum += i * 2;\n            yield return cumSum;\n        }\n    }\n}\n```\n\nBenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5371/22H2/2022Update)\n13th Gen Intel Core i5-13600KF, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 9.0.100\n  [Host]     : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\n  DefaultJob : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\n\n\n| Method            | Size    | Mean            | Error         | StdDev        | Gen0     | Gen1     | Gen2     | Allocated |\n|------------------ |-------- |----------------:|--------------:|--------------:|---------:|---------:|---------:|----------:|\n| CumSumLinq        | 10      |        70.51 ns |      1.423 ns |      1.331 ns |   0.0204 |        - |        - |     256 B |\n| CumSumHandWritten | 10      |        21.96 ns |      0.142 ns |      0.133 ns |   0.0076 |        - |        - |      96 B |\n| CumSumLinq        | 1000    |     2,840.91 ns |      9.840 ns |      9.205 ns |   0.2289 |        - |        - |    2896 B |\n| CumSumHandWritten | 1000    |     1,186.42 ns |      7.261 ns |      6.792 ns |   0.2174 |        - |        - |    2736 B |\n| CumSumLinq        | 1000000 | 2,762,385.21 ns | 21,074.654 ns | 19,713.244 ns | 328.1250 | 328.1250 | 328.1250 | 2667112 B |\n| CumSumHandWritten | 1000000 | 1,190,059.97 ns |  9,161.726 ns |  8,121.632 ns | 330.0781 | 330.0781 | 330.0781 | 2666951 B |\n",
          "createdAt": "2025-02-05T12:49:06Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-05T12:49:06Z",
          "id": "IC_kwDODI9FZc6dKWBx"
        },
        {
          "author": "huoyaoyuan",
          "body": "> To generate the equivalent of:\n> \n> public IEnumerable<int> M() {\n>     int cumSum = 0;\n>     for (int i = 0; i < 100; i++) {\n>           if (i %3 != 0) {\n>                 cumSum += i * 2;\n>                 yield return cumSum;\n>           }\n>     }\n> }\n\nThis falls under the topic about cost-free linq (https://github.com/dotnet/csharplang/discussions/2482).",
          "createdAt": "2025-02-05T12:53:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-05T12:54:37Z",
                "user": "tjwald"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-02-06T06:11:43Z",
                "user": "neon-sunset"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-18T06:23:47Z",
                "user": "RenderMichael"
              }
            ],
            "totalCount": 3,
            "endCursor": "Y3Vyc29yOnYyOpHOEelbtw=="
          },
          "updatedAt": "2025-02-05T12:53:50Z",
          "id": "IC_kwDODI9FZc6dKg63"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-02-06T18:39:19Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-02-06T18:39:19Z",
          "id": "IC_kwDODI9FZc6dZfpr"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOnWX6aw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/112183",
    "title": "Yield Performance Improvement suggestion"
  },
  {
    "author": "Rick-Anderson",
    "labels": [
      "documentation",
      "area-Meta"
    ],
    "createdAt": "2025-03-17T21:49:57Z",
    "body": "Add a doc owners column to [area-owners](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md)\nsimilar to https://github.com/dotnet/aspnetcore/pull/60818",
    "number": 113629,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-26T10:20:20Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-03-18T08:52:15Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-03-18T08:52:15Z",
          "id": "IC_kwDODI9FZc6i2YGX"
        }
      ],
      "totalCount": 1,
      "endCursor": "Y3Vyc29yOnYyOpHOotmBlw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/113629",
    "title": "Add doc owners to area-owners table"
  },
  {
    "author": "UnitedMarsupials",
    "labels": [
      "arch-x86",
      "area-Meta",
      "os-freebsd"
    ],
    "createdAt": "2025-04-15T18:21:31Z",
    "body": "Generally, I don't think, explicitly prohibiting build on a platform is wise. If it fails -- it fails, but it should not be prevented from trying...\n\nIn particular, the below patch allows build to be attempted on FreeBSD/i386 -- setting the already used `CLR_CMAKE_HOST_UNIX_X86`:\n```patch\n--- eng/native/configureplatform.cmake\t2025-03-13 17:40:22.000000000 -0400\n+++ eng/native/configureplatform.cmake\t2025-04-15 11:53:10.858273000 -0400\n@@ -168,4 +168,6 @@\n     elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL arm64)\n         set(CLR_CMAKE_HOST_UNIX_ARM64 1)\n+    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL i386)\n+        set(CLR_CMAKE_HOST_UNIX_X86 1)\n     else()\n         clr_unknown_arch()\n--- eng/native/configurecompiler.cmake\t2025-03-13 17:40:22.000000000 -0400\n+++ eng/native/configurecompiler.cmake\t2025-04-15 11:55:26.890280000 -0400\n@@ -429,4 +429,6 @@\n     elseif(CLR_CMAKE_HOST_UNIX_AMD64)\n       message(\"Detected FreeBSD amd64\")\n+    elseif(CLR_CMAKE_HOST_UNIX_X86)\n+      message(\"Detected FreeBSD i386\")\n     else()\n       message(FATAL_ERROR \"Unsupported FreeBSD architecture\")\n```\nWith the above changes, I was able to build the `dotnet`-executable on my FreeBSD-14/i386 here using the [lang/dotnet-host port](https://FreshPorts.org/lang/dotnet-host ).\n\nMaybe, if this is merged, the boostrap binaries -- which [our lang/dotnet port](FreshPorts.org/lang/dotnet) is using -- will eventually appear.",
    "number": 114705,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-23T08:37:21Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-04-15T18:43:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-15T18:43:57Z",
          "id": "IC_kwDODI9FZc6nUbqo"
        },
        {
          "author": "am11",
          "body": "I think nobody would have any objection for a new platform port, my experience is they are always welcome. You could try adding freebsd-x86 and freebsd-riscv64 next to linux- variants. Feel free to send PRs. 👍\n\n> Generally, I don't think, explicitly prohibiting build on a platform is wise. If it fails -- it fails,\n\nThis opt-in setup is to ensure someone has tried to build on the platform, maintainers and other community members have reviewed the changes and there is a list of tasks somewhere to track progress. .NET ports are not simple and getting things working end-to-end takes some time. Also, diagnostics is an important part; `PlatformNotSupportedException` and the likes are there to communicate with user which APIs are not available.\n\ncc @arrowd, @Thefrank, @sec",
          "createdAt": "2025-04-15T18:53:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-04-20T02:18:01Z",
                "user": "AaronRobinsonMSFT"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEO-WYA=="
          },
          "updatedAt": "2025-04-15T18:53:31Z",
          "id": "IC_kwDODI9FZc6nUibW"
        },
        {
          "author": "UnitedMarsupials",
          "body": "> This opt-in setup is to ensure someone has tried to build on the platform\n\nThen, maybe, detecting a new platform should yield a _warning_ -- but it should not be an error...",
          "createdAt": "2025-04-15T19:01:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-15T19:01:41Z",
          "id": "IC_kwDODI9FZc6nUnaF"
        },
        {
          "author": "Thefrank",
          "body": "From the FreeBSD side, there is still signaling that i386 will no longer be supported starting with FreeBSD 15 but the document is more than a year old (https://www.freebsd.org/platforms/). MIPS and PPC 32bit have already been removed from support on FreeBSD.\n\nNew platforms for dotnet are always nice! Tests on the other hand, are the harder part. It is up to you to make sure everything is functioning correct and AFAIK source-build does not build/run tests but @arrowd or @sec might have a better idea as they use source-build more than I do.",
          "createdAt": "2025-04-15T23:42:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-15T23:42:31Z",
          "id": "IC_kwDODI9FZc6nW1VW"
        },
        {
          "author": "sec",
          "body": "@UnitedMarsupials you're welcome to open PR with those changes, if those unblock build on i386.\nbut also as @Thefrank already said, i386 support is phased out - may I ask are you still using some i386 hardware and/or dotnet software on it? :)",
          "createdAt": "2025-04-16T06:57:43Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-16T06:57:43Z",
          "id": "IC_kwDODI9FZc6nZ4tr"
        },
        {
          "author": "UnitedMarsupials",
          "body": "> [@UnitedMarsupials](https://github.com/UnitedMarsupials) you're welcome to open PR with those changes\n\nDo you really need a formal merge-request for such a trivial patch?\n\n> already said, i386 support is phased out - may I ask are you still using some i386 hardware and/or dotnet software on it? :)\n\nI don't think, that's been settled -- I sure hope, not. 32-bit MIPS and PPC may not be valuable, but i386 is FreeBSD's (and Linux', for that matter) very first and original hardware platform and remains useful for smaller VMs, where 4Gb of addressable memory is quite sufficient and there is no need to waste RAM on wide pointers...\n\nI [submitted this patch to the maintainers of FreeBSD port](https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=286117), but they want bootstrap binaries to become available for FreeBSD before merging it...\n",
          "createdAt": "2025-04-17T15:07:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-17T15:07:04Z",
          "id": "IC_kwDODI9FZc6nrt5V"
        },
        {
          "author": "Thefrank",
          "body": "> I [submitted this patch to the maintainers of FreeBSD port](https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=286117), but they want bootstrap binaries to become available for FreeBSD before merging it...\n\nThe bootstrap is something that you will have to build. For now, FreeBSD is a community supported platform for dotnet so you will not get official binaries from Microsoft.",
          "createdAt": "2025-04-18T22:26:52Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-04-18T22:26:52Z",
          "id": "IC_kwDODI9FZc6n3R3t"
        }
      ],
      "totalCount": 7,
      "endCursor": "Y3Vyc29yOnYyOpHOp90d7Q=="
    },
    "url": "https://github.com/dotnet/runtime/issues/114705",
    "title": "Allow building on FreeBSD/i386"
  },
  {
    "author": "shushanhf",
    "labels": [
      "question",
      "area-Meta",
      "source-build",
      "untriaged",
      "arch-loongarch64"
    ],
    "createdAt": "2025-06-04T07:15:35Z",
    "body": "As the LoongArch64 developing and supporting almost all function within dotnet,\nwhen will the community release the LoongArch64's SDK package with ARM32/64 and X86/64?\n\nAnd to achieve this goal, what else do we need to do next？\nTrack and record the subsequent work plan by this issue.",
    "number": 116293,
    "reactions": {
      "hasNextPage": false,
      "nodes": [
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-06-04T09:39:38Z",
          "user": "lindexi"
        },
        {
          "content": "THUMBS_UP",
          "createdAt": "2025-09-16T05:07:54Z",
          "user": "rabbitism"
        }
      ],
      "totalCount": 2,
      "endCursor": "Y3Vyc29yOnYyOpHODQ0bbw=="
    },
    "updatedAt": "2025-06-18T08:46:23Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "shushanhf",
          "body": "@jkotas @jakobbotsch @am11 \nCould you please give some guidance?\nThanks very much!",
          "createdAt": "2025-06-04T07:17:37Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T07:17:37Z",
          "id": "IC_kwDODI9FZc6vK_zW"
        },
        {
          "author": "huoyaoyuan",
          "body": "I'm afraid there's no existing practice for this. The most important components are `Microsoft.NETCore.App.Runtime.*` NuGet package (contains publishable code) and `clrjit_<host>_loongarch64.dll` (the cross compile JIT). There's no release for community platforms for these.",
          "createdAt": "2025-06-04T08:39:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T08:39:51Z",
          "id": "IC_kwDODI9FZc6vL7Mq"
        },
        {
          "author": "am11",
          "body": "Community platform builds are provided by someone other than Microsoft. In .NET 10, the way to build product is via VMR repo (https://github.com/dotnet/dotnet).\n\ne.g. https://github.com/gsvm/loongson-dotnet or https://github.com/loongson-community/dotnet-runtime can use this workflow https://github.com/filipnavara/dotnet-riscv/blob/ee6f66cef9df27c4783561219f6589112533ab43/.github/workflows/build.yml for .NET 10 (replace `riscv` with `loongarch`). Right now use `main` branch:\n\n<img width=\"366\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c84c7ff2-a186-4e61-b1a5-48e6268dfba4\" />\n\nOnce preview 5 is released, you can use the tag name from https://github.com/dotnet/dotnet/tags and use that in branch.\n\nThis will upload the SDK package to the GitHub Actions job artifacts (which are retained for 1-2 months). You can instead create a GitHub release and upload an artifacts which stay forever; these commands will do it https://github.com/am11/CrossRepoCITesting/blob/master/.github/workflows/freebsd-x64-runtime-build.yml#L33-L48 (just adjust the path what should be uploaded).\n\n> what else do we need to do next？\n\nSome platform-specific nuget packages need to be bundled for community platforms: https://github.com/dotnet/sdk/issues/48986, so when someone does `dotnet package install ...` or `dotnet tool install ...` for stuff like dotnet-sos or cDAC etc. it gets restored from local store (`<SDK install prefix>/library-packs` directory) instead of nuget.org where community platform runtime packs aren't uploaded by Microsoft. But these are minor inconveniences..",
          "createdAt": "2025-06-04T08:44:50Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2025-06-04T08:53:26Z",
                "user": "shushanhf"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-04T08:53:29Z",
                "user": "shushanhf"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEVRaPw=="
          },
          "updatedAt": "2025-06-04T08:46:07Z",
          "id": "IC_kwDODI9FZc6vMABq"
        },
        {
          "author": "am11",
          "body": "@shushanhf one such issue is fixed here https://github.com/dotnet/sdk/pull/49241. For diagnostics (dotnet-sos), their packaging is on an old school plan https://github.com/dotnet/diagnostics/blob/8bbc63df036b0c31c865fc1ee0060564caf40f85/src/sos-packaging.props, so we will need to bring that to new age first.",
          "createdAt": "2025-06-04T09:22:39Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T09:22:39Z",
          "id": "IC_kwDODI9FZc6vMcen"
        },
        {
          "author": "shushanhf",
          "body": "> [@shushanhf](https://github.com/shushanhf) one such issue is fixed here [dotnet/sdk#49241](https://github.com/dotnet/sdk/pull/49241). For diagnostics (dotnet-sos), their packaging is on an old school plan https://github.com/dotnet/diagnostics/blob/8bbc63df036b0c31c865fc1ee0060564caf40f85/src/sos-packaging.props, so we will need to bring that to new age first.\n\nDo you mean that the LoongArch64 doesn't support the dotnet-sos ?\nAs I know we had pushed the diagnostic supporting LA64, but maybe the project doesn't add supporting LA64's building.\nAt least most test cases were passed on our local LoongArch64 machine before we pushed the upstream.\nI will also check it later.",
          "createdAt": "2025-06-04T09:32:09Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T09:32:09Z",
          "id": "IC_kwDODI9FZc6vMkdJ"
        },
        {
          "author": "lindexi",
          "body": "@shushanhf Will the release of LoongArch64 SDK be the new world? And how can the developers handle the new/old world environment when release LoongArch64? Thank you.\n",
          "createdAt": "2025-06-04T09:43:04Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T09:43:04Z",
          "id": "IC_kwDODI9FZc6vMs3s"
        },
        {
          "author": "am11",
          "body": "> Do you mean that the LoongArch64 doesn't support the dotnet-sos ?\n\nThe issue is diagnostics build doesn't produce dotnet-sos package. It is a custom special build (which requires all microsoft supported platforms binaries), and doesn't allow any community platform nupkg https://github.com/dotnet/diagnostics/issues/5495. LA64 is not alone. We will need to bring it to the same plan as runtime, aspnetcore and other repos.",
          "createdAt": "2025-06-04T09:54:26Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "HEART",
                "createdAt": "2025-06-04T10:06:00Z",
                "user": "shushanhf"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-04T10:06:01Z",
                "user": "shushanhf"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEVSFlA=="
          },
          "updatedAt": "2025-06-04T09:54:26Z",
          "id": "IC_kwDODI9FZc6vM2HJ"
        },
        {
          "author": "shushanhf",
          "body": "> [@shushanhf](https://github.com/shushanhf) Will the release of LoongArch64 SDK be the new world? \n\nHere we discussed are only the upstream's env which is abi2.0,that is what you said new world.\nBy the way, you said the old world is the developing env which is about five years ago that was used to generating an initial env for LoongArch64. You know that the LoongArch64 was an absolute new architecture five years ago, before we pushing all the upstream sofeware supporting LA64, we have to generate a new developing and temporay OS env by ourselves locally, when we tested all sofeware ok and pushed all sofeware to upstream, there are some review advices and the finial accepted by upstream sofeware community is the abi2.0 which you said new world.\n\n> And how can the developers handle the new/old world environment when release LoongArch64? Thank you.\n\nfor the .NET's dll files, you can copy them to run and they are independent with the abi version.",
          "createdAt": "2025-06-04T10:05:05Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-04T11:20:18Z",
                "user": "lindexi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEVSp6g=="
          },
          "updatedAt": "2025-06-04T10:05:05Z",
          "id": "IC_kwDODI9FZc6vM92O"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-06-04T13:13:51Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-04T13:13:51Z",
          "id": "IC_kwDODI9FZc6vPMxo"
        },
        {
          "author": "lrzlin",
          "body": "Is it possible to bundle dbgshim with the community SDK too? Debuggers like netcoredbg needs LoongArch libdbgshim.so to run. However due to it's also platform dependent, it's hard to build it on LA native machines, the build system always trying to download these packages on nuget, which of course result a failure.\n\nIn short, what is the correct way to build dbgshim for LoongArch？We have to use the VMR to cross-compiling it or we can build it natively use community SDKs with some modifications? ",
          "createdAt": "2025-06-08T19:04:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-09T00:47:30Z",
                "user": "lindexi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEV2BhA=="
          },
          "updatedAt": "2025-06-08T19:04:38Z",
          "id": "IC_kwDODI9FZc6wFfT2"
        },
        {
          "author": "driver1998",
          "body": "Another related issue is pushing community-supported runtime packages to NuGet.org, otherwise trying to `dotnet publish -r linux-loongarch64` on non-LoongArch systems will fail. (Missing runtime and apphost packages).\n\nThis is tracked in https://github.com/dotnet/sdk/issues/42248.",
          "createdAt": "2025-06-18T08:46:23Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-06-18T09:17:28Z",
                "user": "lindexi"
              }
            ],
            "totalCount": 1,
            "endCursor": "Y3Vyc29yOnYyOpHOEXBztA=="
          },
          "updatedAt": "2025-06-18T08:46:23Z",
          "id": "IC_kwDODI9FZc6x0Rqz"
        }
      ],
      "totalCount": 11,
      "endCursor": "Y3Vyc29yOnYyOpHOsdEasw=="
    },
    "url": "https://github.com/dotnet/runtime/issues/116293",
    "title": "When will the community release the LoongArch64's SDK package with ARM32/64 and X86/64?"
  },
  {
    "author": "rbhanda",
    "labels": [
      "Security",
      "area-Meta"
    ],
    "createdAt": "2025-06-10T19:31:08Z",
    "body": "# Microsoft Security Advisory CVE-2025-30399 | .NET Remote Code Vulnerability\n\n## <a name=\"executive-summary\"></a>Executive summary\n\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 8.0 and .NET 9.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\n\nAn attacker could exploit this vulnerability by placing files in particular locations, leading to unintended code execution.\n\n## Announcement\n\nAnnouncement for this issue can be found at https://github.com/dotnet/announcements/issues/362\n\n## <a name=\"mitigation-factors\"></a>Mitigation factors\n\nMicrosoft has not identified any mitigating factors for this vulnerability.\n\n## <a name=\"affected-software\"></a>Affected software\n\n* Any .NET 8.0 application running on .NET 8.0.16 or earlier.\n* Any .NET 9.0 application running on .NET 9.0.5 or earlier.\n\n## <a name=\"affected-packages\"></a>Affected Packages\nThe vulnerability affects any Microsoft .NET project if it uses any of affected packages versions listed below\n\n### <a name=\".NET 9\"></a>.NET 9\nPackage name | Affected version | Patched version\n------------ | ---------------- | -------------------------\n[Microsoft.NetCore.App.Runtime.linux-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-arm)               | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.linux-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-arm64)           | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.linux-musl-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-arm)     | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.linux-musl-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-arm64) | >= 9.0.0, < =9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.linux-musl-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-x64)     | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.linux-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-x64)               | >= 9.0.0, < =9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.osx-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.osx-arm64)               | >= 9.0.0, < =9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.osx-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.osx-x64)                   | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.win-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-arm)                   | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.win-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-arm64)               | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.win-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-x64)                   | >= 9.0.0, <= 9.0.5 | 9.0.6\n[Microsoft.NetCore.App.Runtime.win-x86](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-x86)                   | >= 9.0.0, <= 9.0.5 | 9.0.6\n\n### <a name=\".NET 8\"></a>.NET 8\nPackage name | Affected version | Patched version\n------------ | ---------------- | -------------------------\n[Microsoft.NetCore.App.Runtime.linux-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-arm)               | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.linux-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-arm64)           | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.linux-musl-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-arm)     | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.linux-musl-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-arm64) | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.linux-musl-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-musl-x64)     | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.linux-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.linux-x64)               | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.osx-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.osx-arm64)               | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.osx-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.osx-x64)                   | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.win-arm](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-arm)                   | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.win-arm64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-arm64)               | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.win-x64](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-x64)                   | >= 8.0.0, <= 8.0.16 | 8.0.17\n[Microsoft.NetCore.App.Runtime.win-x86](https://www.nuget.org/packages/Microsoft.NetCore.App.Runtime.win-x86)                   | >= 8.0.0, <= 8.0.16 | 8.0.17\n\n## Advisory FAQ\n\n### <a name=\"how-affected\"></a>How do I know if I am affected?\n\nIf you have a runtime with a version listed, or an affected package listed in [affected software](#affected-packages) or [affected packages](#affected-software), you're exposed to the vulnerability.\n\n### <a name=\"how-fix\"></a>How do I fix the issue?\n\n1. To fix the issue please install the latest version of .NET 9.0 or .NET 8.0, as appropriate. If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET  SDKs.\n2. If your application references the vulnerable package, update the package reference to the patched version.\n\n* You can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\n\n```\n.NET SDK:\n Version:           9.0.100\n Commit:            59db016f11\n Workload version:  9.0.100-manifests.3068a692\n MSBuild version:   17.12.7+5b8665660\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  15.2\n OS Platform: Darwin\n RID:         osx-arm64\n Base Path:   /usr/local/share/dotnet/sdk/9.0.100/\n\n.NET workloads installed:\nThere are no installed workloads to display.\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.0\n  Architecture: arm64\n  Commit:       9d5a6a9aa4\n\n.NET SDKs installed:\n  9.0.100 [/usr/local/share/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 9.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 9.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n\nOther architectures found:\n  x64   [/usr/local/share/dotnet]\n    registered at [/etc/dotnet/install_location_x64]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\n* If you're using .NET 8.0, you should download and install .NET 8.0.17  Runtime or .NET 8.0.314 SDK (for Visual Studio 2022 v17.10 latest Preview) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\n* If you're using .NET 9.0, you should download and install .NET 9.0.6  Runtime or .NET 9.0.107 SDK (for Visual Studio 2022 v17.12 latest Preview) from https://dotnet.microsoft.com/download/dotnet-core/9.0.\n\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\n\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\n\n## Other Information\n\n### Reporting Security Issues\n\nIf you have found a potential security issue in .NET 9.0 or .NET 8.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\n\n### Support\n\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repos are located at https://github.com/dotnet/runtime. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\n\n### Disclaimer\n\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\n\n### External Links\n\n[CVE-2025-30399]( https://www.cve.org/CVERecord?id=CVE-2025-30399)\n\n### Revisions\n\nV1.0 (June 10, 2025): Advisory published.",
    "number": 116495,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-07-26T10:24:18Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "joshudson",
          "body": "Announcement disagree\n\nhttps://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-june-2025-servicing-updates/ :\n\nAll developers using .NET 8.0 and .NET 9.0 should update immediately due to a remotecode execution vulnerability in Microsoft.NETCore.App CVE-2025-30399. This vulnerability affects .NET 8.0.16, .NET 9.0.5 runtimes and their respective earlier versions. An attacker could exploit this vulnerability by placing files in particular locations, leading to unintended code execution. \n\nBut\n\nhttps://github.com/dotnet/announcements/issues/362 :\n\nAffected software\n\n    Any .NET 8.0 application running on .NET 8.0.16 or earlier.\n    Any .NET 9.0 application running on .NET 9.0.5 or earlier.\n\nFirst one looks like the vulnerability is only reachable via the SDK where the second one looks like it's reachable via any application using the runtime.",
          "createdAt": "2025-06-11T14:47:57Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-11T14:48:38Z",
          "id": "IC_kwDODI9FZc6wndkr"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-06-14T03:54:07Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-14T03:54:07Z",
          "id": "IC_kwDODI9FZc6xKJI7"
        },
        {
          "author": "rfvgyhn",
          "body": "Should the SDK version in _If you're using .NET 8.0, you should download and install .NET 8.0.17 Runtime or .NET 9.0.314 SDK (for Visual Studio 2022 v17.10 latest Preview) from https://dotnet.microsoft.com/download/dotnet-core/8.0._ be **8**.0.314 instead of **9**.0.314?",
          "createdAt": "2025-06-17T00:06:36Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-17T00:06:36Z",
          "id": "IC_kwDODI9FZc6xiJTu"
        },
        {
          "author": "victorisr",
          "body": "> Should the SDK version in _If you're using .NET 8.0, you should download and install .NET 8.0.17 Runtime or .NET 9.0.314 SDK (for Visual Studio 2022 v17.10 latest Preview) from https://dotnet.microsoft.com/download/dotnet-core/8.0._ be **8**.0.314 instead of **9**.0.314?\n\nIf you are using .NET 8.0, you should download and install .NET 8.0.17 Runtime or **.NET 8.0.314 SDK**. \n\nThank you @rfvgyhn for your continued contribution. ",
          "createdAt": "2025-06-17T20:30:48Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-17T20:30:48Z",
          "id": "IC_kwDODI9FZc6xud08"
        },
        {
          "author": "Niels-krede",
          "body": "We get that issue raised when running MS Defender for Cloud in AZ. \nWe are told our docker images have that particular issue. So my question is, what about Docker files autogenerated by VS? \n\nExcerpt of Docker file below\n```\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nWORKDIR /app\nENV ASPNETCORE_FORWARDEDHEADERS_ENABLED=true\nEXPOSE 8080\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n```\n\nShould we implicitly define these as (an example) `mcr.microsoft.com/dotnet/aspnet:8.0.17` or something similar?\n",
          "createdAt": "2025-06-23T12:32:38Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-06-23T19:19:08Z",
          "id": "IC_kwDODI9FZc6ymD1y"
        }
      ],
      "totalCount": 5,
      "endCursor": "Y3Vyc29yOnYyOpHOspg9cg=="
    },
    "url": "https://github.com/dotnet/runtime/issues/116495",
    "title": "Microsoft Security Advisory CVE-2025-30399 | .NET Remote Code Vulnerability"
  },
  {
    "author": "richlander",
    "labels": [
      "area-Meta",
      "os-mac-os-x",
      "os-macos-tahoe (macOS26)"
    ],
    "createdAt": "2025-08-06T22:57:20Z",
    "body": "macOS 26 \"Tahoe\" will be released soon. We need to prepare for that.\n\n- Test .NET 8+. It is fine if this is a one-off activity using on-deck hardware\n- Look for user reported bugs on a weekly basis\n\nThese activities should put us in a good due-diligence position.",
    "number": 118473,
    "reactions": {
      "hasNextPage": false,
      "nodes": [],
      "totalCount": 0,
      "endCursor": null
    },
    "updatedAt": "2025-09-06T17:20:20Z",
    "comments": {
      "hasNextPage": false,
      "nodes": [
        {
          "author": "richlander",
          "body": "Related: \n\n- https://github.com/dotnet/runtime/issues/116545\n- https://github.com/dotnet/runtime/issues/118823\n- https://github.com/dotnet/runtime/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22os-macos-tahoe%20(macOS26)%22",
          "createdAt": "2025-08-06T22:58:41Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-18T17:06:52Z",
          "id": "IC_kwDODI9FZc68djS4"
        },
        {
          "author": "vcsjones",
          "body": "As a more anecdotal data point, I have been running the runtime's libraries unit tests (main only) on every single preview for macOS 26. See the \"os-macos-tahoe (macOS26)\" labeled issues for the handful of failures that have come out of it so far. ",
          "createdAt": "2025-08-07T03:20:34Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-08-07T04:15:33Z",
                "user": "richlander"
              },
              {
                "content": "THUMBS_UP",
                "createdAt": "2025-09-03T19:55:38Z",
                "user": "jeffhandley"
              }
            ],
            "totalCount": 2,
            "endCursor": "Y3Vyc29yOnYyOpHOEgu7TA=="
          },
          "updatedAt": "2025-08-07T03:27:40Z",
          "id": "IC_kwDODI9FZc68fKhG"
        },
        {
          "author": "richlander",
          "body": "Excellent. I added a link above.",
          "createdAt": "2025-08-07T04:15:31Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-07T04:15:31Z",
          "id": "IC_kwDODI9FZc68fj7o"
        },
        {
          "author": "dotnet-policy-service",
          "body": "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
          "createdAt": "2025-08-07T17:49:00Z",
          "reactions": {
            "hasNextPage": false,
            "nodes": [],
            "totalCount": 0,
            "endCursor": null
          },
          "updatedAt": "2025-08-07T17:49:00Z",
          "id": "IC_kwDODI9FZc68qNad"
        }
      ],
      "totalCount": 4,
      "endCursor": "Y3Vyc29yOnYyOpHOvKjWnQ=="
    },
    "url": "https://github.com/dotnet/runtime/issues/118473",
    "title": "Explicit macOS 26 test run and signoff"
  }
]
