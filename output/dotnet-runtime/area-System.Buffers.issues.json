[
    {
        "url":  "https://github.com/dotnet/runtime/issues/29380",
        "createdAt":  "2019-04-25T23:57:18Z",
        "number":  29380,
        "author":  "pranavkm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-09T18:01:44Z",
        "body":  "The problematic code: \r\nhttps://github.com/dotnet/corefx/blob/8292e4556eae08f497e3d8666c001b5ea75f0d3b/src/System.Memory/src/System/Buffers/SequenceReader.cs#L346-L347\r\n\r\nIt looks like it\u0027s meant to be a guard to ensure there is enough buffer to copy the remaining from the unread span, but it\u0027s inverted. When working with a multi-span sequence, if the provided buffer is larger than the remaining code, `SequenceReader.TryCopyTo` will always fail\r\n\r\n```C#\r\n  class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var segment = new BufferSegment\u003cbyte\u003e(new[] { (byte)1, (byte)\u0027A\u0027 });\r\n            segment.Append(new[] { (byte)\u0027B\u0027});\r\n            var sequence = new ReadOnlySequence\u003cbyte\u003e(segment, 0, segment.Next, 1);\r\n\r\n            var sequenceReader = new SequenceReader\u003cbyte\u003e(sequence);\r\n            sequenceReader.TryRead(out var value);\r\n            Debug.Assert(value == (byte)1);\r\n\r\n            var readBuffer = new byte[16];\r\n            var result = sequenceReader.TryCopyTo(readBuffer);\r\n            System.Console.WriteLine($\"{result} {readBuffer[0]} {readBuffer[1]}\");\r\n\r\n            readBuffer = new byte[2];\r\n            result = sequenceReader.TryCopyTo(readBuffer);\r\n            System.Console.WriteLine($\"{result} {readBuffer[0]} {readBuffer[1]}\");\r\n        }\r\n\r\n        internal class BufferSegment\u003cT\u003e : ReadOnlySequenceSegment\u003cT\u003e\r\n        {\r\n            public BufferSegment(ReadOnlyMemory\u003cT\u003e memory)\r\n            {\r\n                Memory = memory;\r\n            }\r\n\r\n            public BufferSegment\u003cT\u003e Append(ReadOnlyMemory\u003cT\u003e memory)\r\n            {\r\n                var segment = new BufferSegment\u003cT\u003e(memory)\r\n                {\r\n                    RunningIndex = RunningIndex + Memory.Length\r\n                };\r\n                Next = segment;\r\n                return segment;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nFalse 0 0\r\nTrue 65 66\r\n```\r\n\r\nEnvironment: Microsoft.NETCore.App 3.0.0-preview5-27619-16",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONV8RqQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg3ODMzOQ==",
                                           "createdAt":  "2019-04-25T23:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "cc @davidfowl ",
                                           "updatedAt":  "2019-04-25T23:57:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg4MjE4Mg==",
                                           "createdAt":  "2019-04-26T00:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "cc @JeremyKuhne ",
                                           "updatedAt":  "2019-04-26T00:20:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg4Mjc1Mg==",
                                           "createdAt":  "2019-04-26T00:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "\u003e It looks like it\u0027s meant to be a guard to ensure there is enough buffer to copy the remaining from the unread span, but it\u0027s inverted. \r\n\r\nLooks like you have identified the correct problem, to me. It should be `if (Remaining \u003e destination.Length)` (`\u003e=` case should continue to work since that implies there is enough space).\r\n\r\nOr simply invert the order:\r\n`if (destination.Length \u003c Remaining)`",
                                           "updatedAt":  "2019-04-26T00:25:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg4MzA3OA==",
                                           "createdAt":  "2019-04-26T00:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAnmWOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahsonkhan",
                                                                               "createdAt":  "2019-04-26T00:27:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "Inverting sounds great: https://github.com/neuecc/MessagePack-CSharp/pull/430/files#diff-3dc920121fdf76ba3c2b8b5e9e153e82R441",
                                           "updatedAt":  "2019-04-26T00:26:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg4MzczOQ==",
                                           "createdAt":  "2019-04-26T00:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "Also, funnily, looks like we have a test gap here. I was wondering how such a bug wasn\u0027t caught sooner (it\u0027s precisely this branch that wasn\u0027t tested).\r\n![image](https://user-images.githubusercontent.com/6527137/56776163-7e5c5a80-677f-11e9-8118-701ae6ab715a.png)\r\n\r\nWe should improve the code coverage overall:\r\n```text\r\nCovered lines:\t474\r\nUncovered lines:\t159\r\nCoverable lines:\t633\r\nTotal lines:\t1147\r\nLine coverage:\t74.8% (474 of 1147)\r\nCovered branches:\t178\r\nTotal branches:\t276\r\nBranch coverage:\t64.4% (178 of 276)\r\n```\r\n\r\nEspecially for the following APIs which is missing coverage!\r\n```C#\r\npublic bool TryReadTo(out ReadOnlySequence\u003cT\u003e sequence, T delimiter, ...);\r\npublic long AdvancePastAny(T value0, T value1, T value2, T value3);\r\npublic bool IsNext(T next, bool advancePast = false);\r\n```",
                                           "updatedAt":  "2019-04-26T00:31:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc3Mjk0Mw==",
                                           "createdAt":  "2019-04-29T23:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAnxwlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AArnott",
                                                                               "createdAt":  "2019-04-30T02:09:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "The behavior is actually to spec. The contract is that it _fills_ the given buffer- if it can\u0027t fill it completely it fails. I\u0027ll work on backfilling tests where we\u0027re missing them and try to be more explicit in the comments.",
                                           "updatedAt":  "2019-04-29T23:00:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc3MzU2NA==",
                                           "createdAt":  "2019-04-29T23:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "\u003e if it can\u0027t fill it completely it fails\r\n\r\nHmm... Do you mean the destination span has to be of the exact size? It can\u0027t be larger?\r\n\r\nIf so, that actually makes some sense, since we don\u0027t have an `out int bytesWritten` (or equivalent) to let the caller know how much was actually written.",
                                           "updatedAt":  "2019-04-29T23:04:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc3NjU4MA==",
                                           "createdAt":  "2019-04-29T23:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAnxo7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahsonkhan",
                                                                               "createdAt":  "2019-04-30T00:51:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e Hmm... Do you mean the destination span has to be of the exact size? It can\u0027t be larger?\r\n\r\nHas to be same size or smaller.\r\n\r\n\u003e since we don\u0027t have an out int bytesWritten (or equivalent) to let the caller know how much was actually written.\r\n\r\nYes, that\u0027s the reason. If you want everything up to a given size you need to check `Remaining` first and slice if that is what you want.",
                                           "updatedAt":  "2019-04-29T23:19:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc5NDg3NQ==",
                                           "createdAt":  "2019-04-30T01:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "How are you supposed to use this API with the array pool?",
                                           "updatedAt":  "2019-04-30T01:10:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc5NzE2Mg==",
                                           "createdAt":  "2019-04-30T01:29:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e How are you supposed to use this API with the array pool?\r\n\r\nSlice based on `Remaining`. This API is \"give me exactly this much\". It\u0027s origin was in the binary reader methods.\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/SequenceReaderExtensions.Binary.cs#L39-L56\r\n",
                                           "updatedAt":  "2019-04-30T01:29:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzc5ODIzNQ==",
                                           "createdAt":  "2019-04-30T01:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think if our existing implementation breaks people\u0027s intuition then we need to reconsider the contract. Here\u0027s where it was originally found:\r\n\r\nhttps://github.com/neuecc/MessagePack-CSharp/blob/8861abdde93a3b97180ac3b2eafa33459ad52392/src/MessagePack/MessagePackReader.cs#L775\r\n\r\nSo this code should be:\r\n\r\n```C#\r\nbyte[] byteArray = ArrayPool\u003cbyte\u003e.Shared.Rent(byteLength);\r\nThrowInsufficientBufferUnless(this.reader.TryCopyTo(byteArray.AsSpan(0, byteLength)));\r\nstring value = StringEncoding.UTF8.GetString(byteArray, 0, byteLength);\r\nArrayPool\u003cbyte\u003e.Shared.Return(byteArray);\r\nreturn value;\r\n```\r\n\r\ncc @AArnott ",
                                           "updatedAt":  "2019-04-30T01:37:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzgwMzQwNA==",
                                           "createdAt":  "2019-04-30T02:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e I think if our existing implementation breaks people\u0027s intuition then we need to reconsider the contract. \r\n\r\nThe signature being the way it is we can\u0027t really change the behavior as we can\u0027t return the copied count. I\u0027m fine with changing this to `int CopyTo(Span\u003cT\u003e destination)` if we have enough consensus on that being better.",
                                           "updatedAt":  "2019-04-30T02:18:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTgyNjk1MQ==",
                                           "createdAt":  "2019-05-13T13:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "We\u0027re considering changing an *internal* method, right? So there aren\u0027t behavioral/API changes that are off the table here I presume--it\u0027s all possible to change.\r\n\r\nBut anyway, I agree with @JeremyKuhne\u0027s comment that I always expected the contract of the method to be that it must fill the given span. If that\u0027s breaking (internal) callers though, should we fix those callers or change the contract of the method?\r\n\r\nWe\u0027ve already altered the contract of the method in https://github.com/neuecc/MessagePack-CSharp/pull/430/files and I\u0027m concerned about where that leaves MessagePack\u0027s reliability till this issue is closed.",
                                           "updatedAt":  "2019-05-13T13:41:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTkxNjI3NA==",
                                           "createdAt":  "2019-05-13T17:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e We\u0027re considering changing an internal method, right?\r\n\r\nNo, it\u0027s public.\r\n\r\n\u003e I\u0027m concerned about where that leaves MessagePack\u0027s reliability till this issue is closed.\r\n\r\nWe\u0027re running late for a breaking change where I don\u0027t think we\u0027ll have enough consensus on what is \"better\" that what we already have come to. I\u0027m adding more detailed comments (in PR). Closing for now, we can discuss further/reopen if needed.\r\n",
                                           "updatedAt":  "2019-05-13T17:35:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTkxODQxNw==",
                                           "createdAt":  "2019-05-13T17:41:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "@AArnott I\u0027ll send an update to MessagePack-CSharp reverting the changes I made to `SequenceReader`",
                                           "updatedAt":  "2019-05-13T17:41:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTkxOTQ2MA==",
                                           "createdAt":  "2019-05-13T17:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "Thanks, @pranavkm.\r\n@JeremyKuhne: the \"bug\" alleged in this issue is to `TryCopyMultisegment` which is an internal method. What public method are you thinking of?",
                                           "updatedAt":  "2019-05-13T17:44:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTkyMDE0Nw==",
                                           "createdAt":  "2019-05-13T17:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "I think this:\r\n\r\n\u003e I\u0027m fine with changing this to int CopyTo(Span\u003cT\u003e destination) if we have enough consensus on that being better.",
                                           "updatedAt":  "2019-05-13T17:46:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzU3Mjk0NA==",
                                           "createdAt":  "2019-09-03T18:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Reopening this issue after discussion with @dotnet/fxdc ",
                                           "updatedAt":  "2019-09-03T18:06:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41XxGp",
                                           "createdAt":  "2021-08-09T17:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@davidfowl, do you have any reference to the fxdc discussion? Trying to determine if this needs to stay in 6.0.0 or be moved to future.\r\n\r\nGiven its been 2 years, I\u0027m guessing the latter.",
                                           "updatedAt":  "2021-08-09T17:58:00Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "SequenceReader.TryCopyMultisegment has incorrect bounds check ",
        "labels":  [
                       "bug",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/853",
        "createdAt":  "2019-07-03T16:18:18Z",
        "number":  853,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-14T18:03:11Z",
        "body":  "From https://github.com/dotnet/coreclr/pull/25437#discussion_r299797776 :\r\n\r\nLet\u0027s say I have 32GB physical memory with 16GB of free memory, set COMPlus_GCHeapHardLimit to 200MB, and start using array pool heavily. The array pool is going to see HighMemoryLoadThresholdBytes=~30GB and MemoryLoadBytes=~16GB, so it will not make any attempt to trim and it can cache way over 200MB",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAGZ3A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODI5MjA3NQ==",
                                           "createdAt":  "2019-07-04T00:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "actively setting the hardlimit config isn\u0027t a main scenario - hardlimit\u0027s main usage occurs in the container scenario. and we are very close to end of 3.0 so realistically this will not make it. we can try to get this in for 3.1 though (if the policy allows it).",
                                           "updatedAt":  "2019-07-04T00:00:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODg1NTc5Nw==",
                                           "createdAt":  "2019-07-05T20:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Repro:\r\n```\r\nusing System;\r\nusing System.Buffers;\r\n\r\nclass Program\r\n{\r\n   static void UsePool\u003cT\u003e(int blocks)\r\n   {\r\n       var pool = ArrayPool\u003cT\u003e.Shared;\r\n       T[][] a = new T[blocks][];\r\n       for (int size = 128; size \u003c= 1024*1024; size *= 2)\r\n       {\r\n            for (int i = 0; i \u003c a.Length; i++) (a[i] = pool.Rent(size)).AsSpan().Clear();\r\n            for (int i = 0; i \u003c a.Length; i++) pool.Return(a[i]);\r\n            GC.Collect();\r\n            System.Threading.Thread.Sleep(10);\r\n       }\r\n       var info = GC.GetGCMemoryInfo();\r\n       Console.WriteLine($\"Heap size: {info.HeapSizeBytes} Available Memory: {info.TotalAvailableMemoryBytes}\");\r\n   }\r\n\r\n   static void Main(string[] args)\r\n   {\r\n        UsePool\u003cbyte\u003e(40);\r\n        UsePool\u003csbyte\u003e(40);\r\n        UsePool\u003cchar\u003e(20);\r\n        UsePool\u003cint\u003e(10);\r\n        UsePool\u003cuint\u003e(10);\r\n        UsePool\u003clong\u003e(5);\r\n        UsePool\u003culong\u003e(5);        \r\n   }\r\n} \r\n```\r\n\r\nThis program is keeping no more than ~40MB alive at any given point. Run it with `COMPlus_GCHeapHardLimit=0x10000000` (ie 256MB). It will fail half-way through with OutOfMemoryException because of the ArrayPool caches are keeping too much memory alive.",
                                           "updatedAt":  "2019-07-05T20:28:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODUxODM5MQ==",
                                           "createdAt":  "2019-10-31T18:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "CC @sergiy-k ",
                                           "updatedAt":  "2019-10-31T18:49:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzNDQ0NA==",
                                           "createdAt":  "2021-06-18T00:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Is this work going to be completed for 6.0.0? If not, we should adjust the milestone.",
                                           "updatedAt":  "2021-06-18T00:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-R9V",
                                           "createdAt":  "2022-05-29T08:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Interesting Issue. @jkotas I saw that you merged already a PR.\r\nWhat would be the further procedure now? Are you open to a community contribution here or does this change need a lot of GC experience?",
                                           "updatedAt":  "2022-05-29T08:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-dgQ",
                                           "createdAt":  "2022-05-29T13:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am not sure what PR you are talking about.\r\n\r\nFixing this likely requires a lot of experience. The first step is to propose a design for the fix (in English, no code).",
                                           "updatedAt":  "2022-05-29T13:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-mo_",
                                           "createdAt":  "2022-05-29T16:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e I am not sure what PR you are talking about.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/25437\r\n\r\n\u003e Fixing this likely requires a lot of experience. The first step is to propose a design for the fix (in English, no code).\r\n\r\nOkay. Then this is the wrong issue for me :D\r\n",
                                           "updatedAt":  "2022-05-29T16:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-oW2",
                                           "createdAt":  "2022-05-29T17:26:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Isn’t this a big problem when container limits are specified?",
                                           "updatedAt":  "2022-05-29T17:26:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-ocD",
                                           "createdAt":  "2022-05-29T17:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e Isn’t this a big problem when container limits are specified?\r\n\r\nIs there any way to access the limits via the Docker API or somehow more directly via containerd?",
                                           "updatedAt":  "2022-05-29T17:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-o7F",
                                           "createdAt":  "2022-05-29T17:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Isn’t this a big problem when container limits are specified?\r\n\r\nIf your workload uses different ArrayPools a lot, you may need to reserve more memory for the container that what would be strictly required. Is this specific issue a big problem? I am not sure.\r\n\r\n\u003e Is there any way to access the limits via the Docker API or somehow more directly via containerd?\r\n\r\nThe runtime reads the limits and configures the GC based on them today. The problem is not in reading the limits. The problem is in how the limits are applied across the system.",
                                           "updatedAt":  "2022-05-29T17:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAZnc",
                                           "createdAt":  "2023-08-14T18:03:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Putting this as future. This doesn\u0027t seem to be a trivial problem to resolve and likely needs to happen early in a release when it does happen.",
                                           "updatedAt":  "2023-08-14T18:03:11Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "ArrayPool trimming does not respect GCHardLimit",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1111",
        "createdAt":  "2019-12-21T18:42:35Z",
        "number":  1111,
        "author":  "MithrilMan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-29T16:44:22Z",
        "body":  "I\u0027m playing with pipelines and span* and in a portion of my code I\u0027m using SequenceReader\u003cbyte\u003e to read a buffer (using @davidfowl Bedrock framework https://github.com/davidfowl/BedrockTransports/tree/master/Bedrock.Framework ) in a custom IProtocolReader/IProtocolWriter\r\n\r\nthe protocol itself that I\u0027m trying to replicate is the bitcoin network protocol that has a structure where the packet starts with a magic number (4 bytes)\r\n\r\nI\u0027ve already solved the problem using TryAdvanceTo pointing to the first magic byte and then using TryReadLittleEndian to fetch the whole number, then I match with the expected magic number and if it fails I rewind the SequenceReader by 3 and look again on the TryAdvanceTo\r\n\r\nEverything works but would be nice to have this kind of behavior already available in the SequenceReader API. We actually have TryAdvanceToAny, so why not having a `TryAdvanceToAll` with the same signature of TryAdvanceToAny but that tries to find all the delimiters sequentially in the SequenceReader?\r\n\r\nthe behavior should be that, giving data (bytes in hex) = `0x0A, 0x0B, 0x1A, 0x0B, 0x11, 0x09, 0x07, 0x3A, 0x8B`\r\n\r\na call to something like  `reader.TryAdvanceToAll(BitConverter.GetBytes(0x0709110B))` should position the reader at position 3 (0x0B) where the first byte lies. (or specifying advancePastDelimiter should be on position 7)\r\n\r\nwhat do you think?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORbu2hQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTc0OTkzOQ==",
                                           "createdAt":  "2020-07-08T20:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-08T20:50:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ft94R",
                                           "createdAt":  "2022-06-29T08:20:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yufeih",
                                           "body":  "I am working on reading PDF files using `System.IO.Pipelines` and it requires advancing the sequence reader to some string delimiter like ` 0 R`. We already have `SequenceReader\u003cT\u003e.TryReadTo` overloads that takes `ReadOnlySpan\u003cT\u003e` as a delimiter but is missing for `TryAdvanceTo`, so I\u0027m proposing the following API addition:\r\n\r\n````diff\r\nnamespace System.Buffers\r\n{\r\n  public ref struct SequenceReader\u003cT\u003e\r\n  {\r\n    public bool TryAdvanceTo(T delimiter, bool advancePastDelimiter = true);\r\n+   public bool TryAdvanceTo(ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n\r\n    public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, T delimiter, bool advancePastDelimiter = true);\r\n    public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n    public bool TryReadTo(out ReadOnlySequence\u003cT\u003e sequence, T delimiter, bool advancePastDelimiter = true);\r\n    public bool TryReadTo(out ReadOnlySequence\u003cT\u003e sequence, ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n  }\r\n}\r\n````",
                                           "updatedAt":  "2022-06-29T08:20:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fu7aF",
                                           "createdAt":  "2022-06-29T12:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@yufeih Can you fill out https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.yml\u0026title=%5BAPI+Proposal%5D%3A+",
                                           "updatedAt":  "2022-06-29T12:39:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SequenceReader\u003cT\u003e.TryAdvanceToAll(T[]) needed",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1830",
        "createdAt":  "2020-01-16T19:21:51Z",
        "number":  1830,
        "author":  "arthur-conde",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T12:14:55Z",
        "body":  "I have an issue in a solution utilizing projects running on both .NET 4.7.2 and .NET Standard that reference the ASP.Net Core SignalR client libraries.\r\n\r\nThe netstandard projects end up depending on System.Buffers 4.5.0 which have an assembly version of 4.0.3.0. The net472 projects end up pulling in a reference to the dll inside lib/ref which has an assembly version of 4.0.2.0.\r\n\r\nWe have a tool that scans our assemblies and ensures its dependencies are available. I believe because of this mismatch, our tool is reporting that a dependency is missing, as it\u0027s expecting different versions of the same assembly.\r\n\r\n`Unable to load reference for System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nCould not load file or assembly \u0027System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\u0027 or one of its dependencies. The located assembly\u0027s manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nWRN: Assembly binding logging is turned OFF.\r\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.`\r\n\r\nWhile we are currently ignoring this when it comes up, it\u0027s not a solution.\r\n\r\nAre there any recommendations on how to resolve this?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTglI_g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTM3OTY4Mg==",
                                           "createdAt":  "2020-02-12T19:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mletterle",
                                           "body":  "I\u0027ve ran into this too, there really needs to be a new version of `System.Buffers` with the version numbers all aligned.  The best work around I\u0027ve found so far is to explicitly reference `System.Buffers` version 4.4.0 on the net472 project.\r\n\r\nThe root of this, is the fact that even though net472 is newer than net45 they are technically the same \"framework\" and so the NuGet package resolution prefers the net45 version over the netstandard version (even though net472\u0027s \"compatibility\" is closer to netstandard2.0 than net45). \r\n\r\nThe 4.4.0 version of the `System.Buffers` NuGet package doesn\u0027t have a full framework reference assembly, only netstandard versions. So it picks the netstandard reference assembly same as the netstandard project.\r\n\r\nThere are [other workarounds](https://duanenewman.net/blog/post/a-better-way-to-override-references-with-packagereference/) if you can\u0027t downgrade, but at that point you\u0027re bypassing NuGet resolution all together.\r\n\r\nAlso related to the following NuGet issues:\r\n\r\nhttps://github.com/NuGet/Home/issues/7416\r\nhttps://github.com/NuGet/Home/issues/7385\r\nhttps://github.com/NuGet/Home/issues/5370\r\n\r\nRelated sdk issue: https://github.com/dotnet/sdk/issues/1791\r\n",
                                           "updatedAt":  "2020-02-12T19:35:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTc2MzIyNw==",
                                           "createdAt":  "2020-02-21T17:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "cc @joperezr ",
                                           "updatedAt":  "2020-02-21T17:55:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTgwMTk3NQ==",
                                           "createdAt":  "2020-02-21T19:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "@arthur-conde I just tried your repro locally and I see what you are saying, so looks like System.Buffers package version 4.5.0 has the following two assets:\r\n```\r\nref/netstandard2.0/System.Buffers.dll  // -\u003e this one with Assembly Version 4.0.2.0\r\nlib/netstandard2.0/System.Buffers.dll // -\u003e this one with Assembly Version 4.0.3.0\r\n```\r\n\r\nHowever, this should be completely fine, as the way that the .NET Core loader works, if an assembly compiled against 4.0.2.0 but got 4.0.3.0 at runtime, the loader will load this assembly just fine because the version is greater. In fact, in servicing this is usually the way we service OOB packages in which we usually just rev\u0027 up the implementation assembly\u0027s version, but not the reference assembly. Can you elaborate a bit more why is it that this is a problem for you? Does this tool that you run take into consideration the .NET Core loader rules of when its ok to use a different version?",
                                           "updatedAt":  "2020-02-21T19:33:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDUxMDA2NQ==",
                                           "createdAt":  "2020-07-06T23:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@ericstj is there anything we could do to align the version numbers?",
                                           "updatedAt":  "2020-07-06T23:17:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDUxNzQ5Mw==",
                                           "createdAt":  "2020-07-06T23:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "not sure what you mean about aligning version numbers but we don\u0027t build this package any longer so no change to  modify this on 5.0, all we could do is in servicing and we don\u0027t really have the option to downgrade an implementation assembly version and increasing the assembly version of the ref could cause many other issues, so  I\u0027m more interested into understanding why is this a problem today before we decide what the fix should be or whether we should do it.",
                                           "updatedAt":  "2020-07-06T23:44:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTQyNTYwNQ==",
                                           "createdAt":  "2020-07-08T10:10:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e not sure what you mean about aligning version numbers but we don\u0027t build this package any longer so no change to modify this on 5.0, all we could do is in servicing and we don\u0027t really have the option to downgrade an implementation assembly version and increasing the assembly version of the ref could cause many other issues\r\n\r\nthanks for the explanation, I forgot that this is the \"special\" package (I was hoping that we can provide some easy fix)\r\n\r\n\u003e I\u0027m more interested into understanding why is this a problem today before we decide what the fix should be or whether we should do it\r\n\r\nvery good point! @arthur-conde could you please respond to the question asked by @joperezr [above](https://github.com/dotnet/runtime/issues/1830#issuecomment-589801975)",
                                           "updatedAt":  "2020-07-08T10:10:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47iRXw",
                                           "createdAt":  "2021-12-21T14:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peter-dolkens",
                                           "body":  "\u003e I\u0027m more interested into understanding why is this a problem today before we decide what the fix should be or whether we should do it.\r\n\r\nThe issue is this. Quite often when working with .Net Framwork projects, you\u0027ll encounter an error that looks something like (version numbers could be slightly different):\r\n\r\n```\r\nCould not load file or assembly \u0027System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\u0027 or one of its dependencies. The located assembly\u0027s manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n```\r\n\r\nNow normally we\u0027d just go, check the version we\u0027ve got and update the binding redirects in web.config, but a quick check of System.Buffers.dll reveals:\r\n![image](https://user-images.githubusercontent.com/469666/146948632-8eec4ad9-93ee-40cf-ab36-6fbd8ae2b050.png)\r\n\r\nThat\u0027s not a particularly useful version number. Most binaries will match that to the assembly version, but instead we need to load the binary into another program to retrieve that information. This is just extra friction when people are already wrestling with the mess caused by the migration from Framework to .Net Core.\r\n\r\nDon\u0027t get me wrong, I love Core, but mistakes were made around versioning during the transition, and for those of us maintaining legacy codebases, those mistakes are coming back to bite us every day, and simple things like \"make the file version match the assembly version\" are very basic QoL improvements that can make the life of those supporting the old framework a little better.\r\n\r\n\"Move fast and break things\" is great and everything, until you\u0027re tasked with fixing something that someone else broke.\r\n",
                                           "updatedAt":  "2021-12-21T14:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N9zSG",
                                           "createdAt":  "2022-11-09T00:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lostromb",
                                           "body":  "I want to +1 on this issue as I just hit it as well. I have a .Net 4.8 app which uses some complicated reflection and AppDomain remoting, so assembly versioning can get pretty fragile, and it just hit\r\n`FileLoadException: Could not load file or assembly \u0027System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\u0027 or one of its dependencies. The located assembly\u0027s manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nUsing DotPeek to look at the contents of System.Buffers.4.5.1.nupkg (the latest available with 270 million downloads), the versions make no sense:\r\nFile | Assembly Version\r\n-----|-----\r\n\\ref\\netstandard1.1\\System.Buffers.dll | 4.0.2.0\r\n\\ref\\netstandard2.0\\System.Buffers.dll | 4.0.2.0\r\n\\ref\\net45\\System.Buffers.dll | 4.0.3.0\r\n\\lib\\netstandard1.1\\System.Buffers.dll | 4.0.3.0\r\n\\lib\\netstandard2.0\\System.Buffers.dll | 4.0.3.0\r\n\\lib\\net461\\System.Buffers.dll | 4.0.3.0\r\n\r\nWhy are the reference assemblies set to version 4.0.2.0, _except_ for the reference assembly for `net45` which is 4.0.3.0? And then all of the implementations have version 4.0.3.0 so it seems like if you compile against the reference for .Net Standard you would also have to use a binding redirect somewhere along the line. It just seems so arbitrary and error-prone.",
                                           "updatedAt":  "2022-11-09T00:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCUj-",
                                           "createdAt":  "2022-11-09T19:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Please take a look at this recent issue which was just closed that is very similar. [This reply](https://github.com/dotnet/runtime/issues/77887#issuecomment-1306004316) in particular explains why versions inside NuGet packages don\u0027t always align. When using NuGet packages and targeting .NET Framework, making sure auto-binding redirects are enabled is almost always a requirement.",
                                           "updatedAt":  "2022-11-09T19:06:43Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "System.Buffers version different between net45 and netstandardx",
        "labels":  [
                       "area-System.Buffers",
                       "packaging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40846",
        "createdAt":  "2020-08-14T17:44:44Z",
        "number":  40846,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-14T21:28:22Z",
        "body":  "Our test infrastructure has a type `BoundedMemory` that\u0027s used for unit-testing unsafe code. The helper sets up poison (NOACCESS) pages around a `Span\u003cT\u003e` so that out-of-bounds accesses are discovered during testing.\r\n\r\nThis type [has a working implementation](https://github.com/dotnet/runtime/blob/master/src/libraries/Common/tests/TestUtilities/System/Buffers/BoundedMemory.Windows.cs) on Windows, but the non-Windows implementation falls back to using [standard arrays without NOACCESS buffers](https://github.com/dotnet/runtime/blob/master/src/libraries/Common/tests/TestUtilities/System/Buffers/BoundedMemory.Unix.cs).\r\n\r\nWe should bring the UNIX implementation up to par with the Windows implementation so that tests running in non-Windows environments get the same checks that tests running in Windows environments get.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmnGY5w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDE4ODQ0NQ==",
                                           "createdAt":  "2020-08-14T17:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-14T17:44:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDI4MzkxNA==",
                                           "createdAt":  "2020-08-14T21:41:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-14T21:41:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDUzNzUyNg==",
                                           "createdAt":  "2020-08-16T15:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Looks like we might be able to use `mmap`\u003csup id=\"a1\"\u003e[1](#f1)\u003c/sup\u003eand `mprotect` to achieve something similar. Most of the logics seem similar enough so I could give this a go, if nobody is already working on it. (although admittedly I lack experiences with Unix)\r\n\r\n\u003cb id=\"f1\"\u003e1\u003c/b\u003e \"POSIX says that the behavior of mprotect() is unspecified if it is applied to a region of memory that was not obtained via mmap(2).\" (man-pages, Release 5.05, mprotect(2)) [↩](#a1)\r\n",
                                           "updatedAt":  "2020-08-16T15:03:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6acZjn",
                                           "createdAt":  "2025-01-14T21:28:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Looks like https://github.com/dotnet/runtime/pull/105595 added more capabilities to the Unix implementation. It looks like it only needs a little more work in the `MakeReadonly` and `MakeWriteable` methods.",
                                           "updatedAt":  "2025-01-14T21:28:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "BoundedMemory test helper needs an implementation on non-Windows platforms",
        "labels":  [
                       "area-System.Buffers",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44037",
        "createdAt":  "2020-10-29T22:09:22Z",
        "number":  44037,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-04T23:45:18Z",
        "body":  "Lots of PRs have been failing today with this:\r\n```\r\n  Discovering: System.Buffers.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Buffers.Tests (found 42 of 43 test cases)\r\n  Starting:    System.Buffers.Tests (parallel test collections = on, max threads = 2)\r\n    System.Buffers.ArrayPool.Tests.CollectionTests.ThreadLocalIsCollectedUnderHighPressure [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n    System.Buffers.ArrayPool.Tests.CollectionTests.PollingEventFires(trim: True) [FAIL]\r\n      Half-way through waiting for remote process.\r\n      Timed out at 10/29/2020 5:03:11 PM after 60000ms waiting for remote process.\r\n      \tProcess ID: 44\r\n      \tHandle: 832\r\n      \tName: dotnet\r\n      \tMainModule: /root/helix/work/correlation/dotnet\r\n      \tStartTime: 10/29/2020 5:02:10 PM\r\n      \tTotalProcessorTime: 00:00:00.1300000\r\n      \r\n      Stack Trace:\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(224,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(57,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose()\r\n        /_/src/libraries/System.Buffers/tests/ArrayPool/ArrayPoolTest.cs(57,0): at System.Buffers.ArrayPool.Tests.ArrayPoolTest.RemoteInvokeWithTrimming(Action`1 method, Boolean trim, Int32 timeout)\r\n        /_/src/libraries/System.Buffers/tests/ArrayPool/CollectionTests.cs(151,0): at System.Buffers.ArrayPool.Tests.CollectionTests.PollingEventFires(Boolean trim)\r\n```\r\ne.g.\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=870197\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27843160\u0026resultId=183117\u0026paneView=attachments\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [System.Buffers.ArrayPool.Tests.CollectionTests.PollingEventFires failures on Linux](https://runfo.azurewebsites.net/tracking/issue/31)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKuhaAw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTA1MjUyOQ==",
                                           "createdAt":  "2020-10-29T22:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-29T22:09:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTg3MDQ2Nw==",
                                           "createdAt":  "2020-10-31T02:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBVdzeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pgovind",
                                                                               "createdAt":  "2020-11-02T17:41:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This has been failing a ton.  I\u0027m disabling the test.  It only started failing very recently and needs to be investigated.",
                                           "updatedAt":  "2020-10-31T02:21:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Buffers.ArrayPool.Tests.CollectionTests.PollingEventFires failing in CI",
        "labels":  [
                       "area-System.Buffers",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44060",
        "createdAt":  "2020-10-30T08:33:56Z",
        "number":  44060,
        "author":  "v-haren",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-17T22:43:05Z",
        "body":  "failed in job: [runtime-coreclr libraries-jitstress 20201029.1 ](https://dev.azure.com/dnceng/public/_build/results?buildId=869879\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27835038\u0026paneView=debug\u0026resultId=161678)\r\n\r\nnet6.0-Linux-Release-x64-CoreCLR_checked-jitstress1_tiered-Ubuntu.1804.Amd64.Open\r\n\r\n\r\nError message\r\n~~~\r\nHalf-way through waiting for remote process.\r\nTimed out at 10/29/2020 8:17:50 AM after 60000ms waiting for remote process.\r\n\\tProcess ID: 8424\r\n\\tHandle: 960\r\n\\tName: dotnet\r\n\\tMainModule: /home/helixbot/work/A4C408F6/p/dotnet\r\n\\tStartTime: 10/29/2020 8:16:49 AM\r\n\\tTotalProcessorTime: 00:00:00.1500000\r\n\r\n\r\n\r\nStack trace\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 57\r\n   at System.Buffers.ArrayPool.Tests.ArrayPoolTest.RemoteInvokeWithTrimming(Action action, Boolean trim) in /_/src/libraries/System.Buffers/tests/ArrayPool/ArrayPoolTest.cs:line 44\r\n   at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.ReturnBufferFiresDiagnosticEvent() in /_/src/libraries/System.Buffers/tests/ArrayPool/UnitTests.cs:line 424\r\n~~~",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONvZr0w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTQxNTQ1Mg==",
                                           "createdAt":  "2020-10-30T08:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-30T08:33:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjA5NDY1Nw==",
                                           "createdAt":  "2020-11-12T13:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Again:\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-44571-merge-6d375b075a5d4f7ebd/System.Buffers.Tests/console.d033ce74.log?sv=2019-07-07\u0026se=2020-12-02T11%3A39%3A20Z\u0026sr=c\u0026sp=rl\u0026sig=740A875BdOQnd9zU%2BTiupgR6QU%2FL1rQjuQ2bHKifjUA%3D",
                                           "updatedAt":  "2020-11-12T13:58:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODUwNjIwOQ==",
                                           "createdAt":  "2020-12-04T01:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-haren",
                                           "body":  "failed again in job: [runtime-libraries-coreclr outerloop 20201203.1 ](https://dev.azure.com/dnceng/public/_build/results?buildId=907184\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28934436\u0026resultId=103411\u0026paneView=debug)\r\n\r\nfailed test: System.Net.Sockets.Tests.TelemetryTest.EventSource_ConnectAsyncCanceled_LogsConnectFailed(connectMethod: \\\"Eap\\\", useDnsEndPoint: True)\r\n\r\nnet6.0-Linux-Release-x64-CoreCLR_release-RedHat.7.Amd64.Open\r\n\r\nError message\r\n~~~\r\nHalf-way through waiting for remote process.\r\nTimed out at 12/3/2020 12:38:24 PM after 60000ms waiting for remote process.\r\n\\tProcess ID: 28858\r\n\\tHandle: 1736\r\n\\tName: dotnet\r\n\\tMainModule: /home/helixbot/work/B9CE09F3/p/dotnet\r\n\\tStartTime: 12/3/2020 12:37:24 PM\r\n\\tTotalProcessorTime: 00:00:00.2900000\r\n\r\n\r\nStack trace\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 57\r\n   at System.Net.Sockets.Tests.TelemetryTest.EventSource_ConnectAsyncCanceled_LogsConnectFailed(String connectMethod, Boolean useDnsEndPoint) in /_/src/libraries/System.Net.Sockets/tests/FunctionalTests/TelemetryTest.cs:line 266\r\n~~~",
                                           "updatedAt":  "2020-12-04T01:59:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc429mvT",
                                           "createdAt":  "2021-09-17T22:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Again, macOS 10.13\r\n```\r\nConsole log: \u0027System.Buffers.Tests\u0027 from job 061cc071-f6af-425b-a328-88414fcccbe5 workitem 0e2e11c6-f88d-493c-9fae-a99deee70c3d (osx.1013.amd64.open) executed on machine dci-mac-build-003.local\r\n+ ./RunTests.sh --runtime-path /tmp/helix/working/AA2B099C/p\r\n----- start Fri Sep 17 12:20:46 PDT 2021 =============== To repro directly: =====================================================\r\npushd .\r\n/tmp/helix/working/AA2B099C/p/dotnet exec --runtimeconfig System.Buffers.Tests.runtimeconfig.json --depsfile System.Buffers.Tests.deps.json xunit.console.dll System.Buffers.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/private/tmp/helix/working/AA2B099C/w/B67B0A45/e /private/tmp/helix/working/AA2B099C/w/B67B0A45/e\r\n  Discovering: System.Buffers.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Buffers.Tests (found 42 of 46 test cases)\r\n  Starting:    System.Buffers.Tests (parallel test collections = on, max threads = 4)\r\n    System.Buffers.ArrayPool.Tests.CollectionTests.ThreadLocalIsCollectedUnderHighPressure [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n    System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentingBufferOverConfiguredMaximumSizeFiresDiagnosticEvent [FAIL]\r\n      Half-way through waiting for remote process.\r\n      Timed out at 9/17/2021 12:27:51 PM after 60000ms waiting for remote process.\r\n      \tProcess ID: 99041\r\n      \tHandle: 876\r\n      \tName: dotnet\r\n      \tMainModule: /private/tmp/helix/working/AA2B099C/p/dotnet\r\n      \tStartTime: 9/17/2021 12:26:45 PM\r\n      \tTotalProcessorTime: 00:00:25.1393801\r\n      \r\n      Stack Trace:\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(224,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(57,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose()\r\n        /_/src/libraries/System.Buffers/tests/ArrayPool/ArrayPoolTest.cs(45,0): at System.Buffers.ArrayPool.Tests.ArrayPoolTest.RemoteInvokeWithTrimming(Action method, Int32 timeout)\r\n        /_/src/libraries/System.Buffers/tests/ArrayPool/UnitTests.cs(495,0): at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentingBufferOverConfiguredMaximumSizeFiresDiagnosticEvent()\r\n   System.Buffers.Tests: [Long Running Test] \u0027System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.ConfigurablePool_AllocatedArraysAreCleared_DateTime\u0027, Elapsed: 00:02:01\r\n   System.Buffers.Tests: [Long Running Test] \u0027System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.ConfigurablePool_AllocatedArraysAreCleared_string\u0027, Elapsed: 00:02:05\r\n/tmp/helix/working/AA2B099C/p/scripts/6a1a09b15a3f48f3ac008f16727551d0/execute.sh: line 4: 98977 Killed: 9               ./RunTests.sh --runtime-path \"$HELIX_CORRELATION_PAYLOAD\"\r\n[\u0027System.Buffers.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]\r\n```\r\nhttps://github.com/dotnet/runtime/pull/59274",
                                           "updatedAt":  "2021-09-17T22:43:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Test failure: System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.ReturnBufferFiresDiagnosticEvent",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47949",
        "createdAt":  "2021-02-06T07:59:59Z",
        "number":  47949,
        "author":  "KevinRansom",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-12T15:45:58Z",
        "body":  "The nuget package: https://www.nuget.org/api/v2/package/System.Buffers/4.5.1 has mismatched assembly versions.\r\n\r\nWhich requires binding redirects on the desktop to successfully bind.\r\n\r\nDownload the nuget package : https://www.nuget.org/api/v2/package/System.Buffers/4.5.1\r\n\r\nExtract the files:\r\nuse ildasm or some other mechanism to examine the assembly version numbers.\r\n````\r\nref\\net45\\System.Buffers.dll                      Version:   4.0.3.0\r\nref\\netstandard1.1\\System.Buffers.dll       Version:   4.0.2.0\r\nref\\netstandard2.0\\System.Buffers.dll       Version:   4.0.2.0\r\n\r\nlib\\net461\\System.Buffers.dll                    Version:   4.0.3.0\r\n````\r\nThis is  an issue because if I build a library for netstandard2.0, and reference it from an app built for net472 the app needs a binding redirect to correctly execute.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLiu6Pg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDQyMTM0Mw==",
                                           "createdAt":  "2021-02-06T08:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind, @GrabYourPitchForks\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe nuget package: https://www.nuget.org/api/v2/package/System.Buffers/4.5.1 has mismatched assembly versions.\r\n\r\nWhich requires binding redirects on the desktop to successfully bind.\r\n\r\nDownload the nuget package : https://www.nuget.org/api/v2/package/System.Buffers/4.5.1\r\n\r\nExtract the files:\r\nuse ildasm or some other mechanism to examine the assembly version numbers.\r\n````\r\nref\\net45\\System.Buffers.dll                      Version:   4.0.3.0\r\nref\\netstandard1.1\\System.Buffers.dll       Version:   4.0.2.0\r\nref\\netstandard2.0\\System.Buffers.dll       Version:   4.0.2.0\r\n\r\nlib\\net461\\System.Buffers.dll                    Version:   4.0.3.0\r\n````\r\nThis is  an issue because if I build a library for netstandard2.0, and reference it from an app built for net472 the app needs a binding redirect to correctly execute.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKevinRansom\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-06T08:00:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDQzNjA2MQ==",
                                           "createdAt":  "2021-02-06T09:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "https://github.com/dotnet/runtime/issues/45921",
                                           "updatedAt":  "2021-02-06T09:51:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU0NjA1Nw==",
                                           "createdAt":  "2021-02-06T21:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@Anipik ",
                                           "updatedAt":  "2021-02-06T21:23:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU1MDA3Mg==",
                                           "createdAt":  "2021-02-06T22:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saucecontrol",
                                           "body":  "Not a direct fix, but if you\u0027re targeting .NET Standard and intend compatibility with .NET Framework, your users will have a better experience in general if you multi-target your library for both `net461` and `netstandard2.0`.  That will fix your issue with System.Buffers as a side effect, but there are other benefits as well.\r\n\r\nRick Strahl has a good writeup on that [here](https://weblog.west-wind.com/posts/2019/Feb/19/Using-NET-Standard-with-Full-Framework-NET), and the same recommendation is given in Microsoft\u0027s guidance for library developers [here](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting).\r\n\r\n\u003e ✔️ CONSIDER adding a target for net461 when you\u0027re offering a netstandard2.0 target.\r\n\r\n\u003e Using .NET Standard 2.0 from .NET Framework has some issues that were addressed in .NET Framework 4.7.2. You can improve the experience for developers that are still on .NET Framework 4.6.1 - 4.7.1 by offering them a binary that is built for .NET Framework 4.6.1.",
                                           "updatedAt":  "2021-02-06T22:06:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDYxNjU1OQ==",
                                           "createdAt":  "2021-02-07T06:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinRansom",
                                           "body":  "@saucecontrol ,\r\nIf I build and reference ref/netstandard2.0 and the assembly verision is  4.0.2.0 and The corresponding lib/netstandard2.0 has an assembly version of 4.0.3.0 then on the desktop a binding redirect is necessary.\r\n\r\nFor developers building software that is a plugin, it is very hard to get an app to add the necessary binding redirect.  I would suggest that having different version numbers for ref and lib in the same nuget package is just broken.\r\n ",
                                           "updatedAt":  "2021-02-07T06:52:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDYxNzY2Mg==",
                                           "createdAt":  "2021-02-07T07:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saucecontrol",
                                           "body":  "Correct, if the ref/lib versions don\u0027t match, the binding redirect is necessary on desktop.  However, if you multi-target, the `net461` version of your library in the package would pick up the reference to 4.0.3 while the `netstandard2.0` copy of your library would reference 4.0.2 (this doesn\u0027t matter since netfx is the only that one won\u0027t load without an exact version match).  I\u0027ve been through this in my own libraries, and multi-targeting, along with careful selection of dependency versions has solved the issue for my users.\r\n\r\n\u003e having different version numbers for ref and lib in the same nuget package is just broken.\r\n\r\nI couldn\u0027t agree more, and I said as much over on https://github.com/dotnet/runtime/issues/26370.  You might find that issue informative, if only so you can get a picture of how/why the current broken state came to be ;)",
                                           "updatedAt":  "2021-02-07T07:13:07Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "The nuget package: https://www.nuget.org/api/v2/package/System.Buffers/4.5.1 has mismatched assembly versions.",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52569",
        "createdAt":  "2021-05-10T21:54:04Z",
        "number":  52569,
        "author":  "JeremyKuhne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCOiRA==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "scalablecory",
                                            "createdAt":  "2021-05-11T00:04:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FiniteReality",
                                            "createdAt":  "2021-05-11T04:14:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FilipToth",
                                            "createdAt":  "2021-05-11T05:50:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2021-05-11T10:52:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2021-05-11T19:22:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreasHeisel",
                                            "createdAt":  "2021-05-12T07:20:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QianMoXi",
                                            "createdAt":  "2021-06-21T08:22:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atruskie",
                                            "createdAt":  "2021-09-09T01:41:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teo-tsirpanis",
                                            "createdAt":  "2022-01-05T10:32:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2022-04-18T00:17:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2024-01-06T16:50:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-01-31T23:05:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2024-08-07T03:02:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trolldemorted",
                                            "createdAt":  "2024-09-13T21:38:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-28T03:15:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2025-05-09T21:59:03Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2024-12-05T15:36:05Z",
        "body":  "## Background and Motivation\r\n\r\n`SequenceReader\u003cT\u003e` was fine tuned to give the best performance for `ReadOnlySequence\u003cT\u003e` and explicitly didn\u0027t support a second state constructed around a `ReadOnlySpan\u003cT\u003e` directly.\r\n\r\nThere is no practical way to turn a `ReadOnlySpan\u003cT\u003e` into a `ReadOnlySequence\u003cT\u003e`.  Providing a reader that follows a similar pattern when reading `ReadOnlySpan\u003cT\u003e` would help people reading spans directly and would allow further sub-parsing of spans returned from `SequenceReader\u003cT\u003e` methods.\r\n\r\n## Proposed API\r\n\r\nThe proposed API follows along with `SequenceReader\u003cT\u003e` with the following differences:\r\n\r\n- No `ReadOnlySequence\u003cT\u003e` methods.\r\n- Lengths are `int` rather than `long` as spans are constrained to `int`.\r\n\r\n``` c#\r\nnamespace System.Buffers\r\n{\r\n    public ref struct SpanReader\u003cT\u003e where T: unmanaged, struct, IEquatable\u003cT\u003e\r\n    {\r\n        public SpanReader(ReadOnlySpan\u003cT\u003e span);\r\n        public int Consumed { get; }\r\n        public bool End { get; }\r\n        public int Length { get; }\r\n        public int Remaining { get; }\r\n        public ReadOnlySpan\u003cT\u003e UnreadSpan { get; }\r\n        public void Advance(int count);\r\n        public int AdvancePast(T value);\r\n        public int AdvancePastAny(T value0, T value1);\r\n        public int AdvancePastAny(T value0, T value1, T value2);\r\n        public int AdvancePastAny(T value0, T value1, T value2, T value3);\r\n        public int AdvancePastAny(ReadOnlySpan\u003cT\u003e values);\r\n        public void AdvanceToEnd();\r\n        public bool IsNext(T next, bool advancePast = false);\r\n        public bool IsNext(ReadOnlySpan\u003cT\u003e next, bool advancePast = false);\r\n        public void Rewind(int count);\r\n        public bool TryAdvanceTo(T delimiter, bool advancePastDelimiter = true);\r\n        public bool TryAdvanceToAny(ReadOnlySpan\u003cT\u003e delimiters, bool advancePastDelimiter = true);\r\n        public bool TryCopyTo(Span\u003cT\u003e destination);\r\n        public bool TryPeek(out T value);\r\n        public bool TryPeek(int offset, out T value);\r\n        public bool TryRead(out T value);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, T delimiter, bool advancePastDelimiter = true);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);\r\n        public bool TryReadToAny(out ReadOnlySpan\u003cT\u003e span, ReadOnlySpan\u003cT\u003e delimiters, bool advancePastDelimiter = true);\r\n    }\r\n\r\n    public static class SpanReaderExtensions\r\n    {\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out short);\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out int);\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out long);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out short);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out int);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out long);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nSpanReader\u003cbyte\u003e reader = new(data);\r\nif (!reader.TryAdvanceTo(Identifiers.StartOfText, advancePastDelimiter: false))\r\n{\r\n    throw new InvalidDataException(\"No start text (STX) control character found.\");\r\n}\r\n\r\nushort checksum = CalculateFileChecksum(reader.UnreadSpan);\r\nreader.Advance(1);\r\n\r\nif (!reader.TryReadTo(out var designSpecification, Identifiers.FieldTerminator))\r\n{\r\n    throw new InvalidDataException(\"Did not find design specification.\");\r\n}\r\n\r\ninfo.DesignSpecification = Encoding.ASCII.GetString(designSpecification);\r\nreader.AdvancePastAny(Identifiers.LineSeparators);\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAdding direct `ReadOnlySpan\u003cT\u003e` support to `SequenceReader\u003cT\u003e` is technically possible but would have a negative performance impact that is measurable in key web scenarios. It also would be hard for consumers to understand the implications of calling overloads that have `ReadOnlySequence\u003cT\u003e` outputs (do we copy to an array?).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlj4PlQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzQwMzk0MA==",
                                           "createdAt":  "2021-05-10T21:54:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind, @GrabYourPitchForks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\n`SequenceReader\u003cT\u003e` was fine tuned to give best performance for `ReadOnlySequence\u003cT\u003e` and explicitly didn\u0027t support a second state constructed around a `ReadOnlySpan\u003cT\u003e` directly.\r\n\r\nThere is no practical way to turn a `ReadOnlySpan\u003cT\u003e` into a `ReadOnlySequence\u003cT\u003e`.  Providing a reader that follows a similar pattern when reading `ReadOnlySpan\u003cT\u003e` would help people reading spans directly and would allow further sub-parsing of spans returned from `SequenceReader\u003cT\u003e` methods.\r\n\r\n## Proposed API\r\n\r\nThe proposed API follows along with `SequenceReader\u003cT\u003e` with the following differences:\r\n\r\n- No `ReadOnlySequence\u003cT\u003e` methods.\r\n- Lengths are `int` rather than `long` as spans are constrained to `int`.\r\n\r\n``` c#\r\nnamespace System.Buffers\r\n{\r\n    public ref struct SpanReader\u003cT\u003e where T: unmanaged, struct, IEquatable\u003cT\u003e\r\n    {\r\n        public SpanReader(ReadOnlySpan\u003cT\u003e span);\r\n        public int Consumed { get; }\r\n        public bool End { get; }\r\n        public int Length { get; }\r\n        public int Remaining { get; }\r\n        public ReadOnlySpan\u003cT\u003e UnreadSpan { get; }\r\n        public void Advance(int count);\r\n        public int AdvancePast(T value);\r\n        public int AdvancePastAny(T value0, T value1);\r\n        public int AdvancePastAny(T value0, T value1, T value2);\r\n        public int AdvancePastAny(T value0, T value1, T value2, T value3);\r\n        public int AdvancePastAny(ReadOnlySpan\u003cT\u003e values);\r\n        public void AdvanceToEnd();\r\n        public bool IsNext(T next, bool advancePast = false);\r\n        public bool IsNext(ReadOnlySpan\u003cT\u003e next, bool advancePast = false);\r\n        public void Rewind(int count);\r\n        public bool TryAdvanceTo(T delimiter, bool advancePastDelimiter = true);\r\n        public bool TryAdvanceToAny(ReadOnlySpan\u003cT\u003e delimiters, bool advancePastDelimiter = true);\r\n        public bool TryCopyTo(Span\u003cT\u003e destination);\r\n        public bool TryPeek(out T value);\r\n        public bool TryPeek(int offset, out T value);\r\n        public bool TryRead(out T value);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, T delimiter, bool advancePastDelimiter = true);\r\n        public bool TryReadTo(out ReadOnlySpan\u003cT\u003e span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);\r\n        public bool TryReadToAny(out ReadOnlySpan\u003cT\u003e span, ReadOnlySpan\u003cT\u003e delimiters, bool advancePastDelimiter = true);\r\n    }\r\n\r\n    public static class SpanReaderExtensions\r\n    {\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out short);\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out int);\r\n        TryReadBigEndian(this ref SpanReader\u003cbyte\u003e, out long);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out short);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out int);\r\n        TryReadLittleEndian(this ref SpanReader\u003cbyte\u003e, out long);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nSpanReader\u003cbyte\u003e reader = new(data);\r\nif (!reader.TryAdvanceTo(Identifiers.StartOfText, advancePastDelimiter: false))\r\n{\r\n    throw new InvalidDataException(\"No start text (STX) control character found.\");\r\n}\r\n\r\nushort checksum = CalculateFileChecksum(reader.UnreadSpan);\r\nreader.Advance(1);\r\n\r\nif (!reader.TryReadTo(out var designSpecification, Identifiers.FieldTerminator))\r\n{\r\n    throw new InvalidDataException(\"Did not find design specification.\");\r\n}\r\n\r\ninfo.DesignSpecification = Encoding.ASCII.GetString(designSpecification);\r\nreader.AdvancePastAny(Identifiers.LineSeparators);\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAdding direct `ReadOnlySpan\u003cT\u003e` support to `SequenceReader\u003cT\u003e` is technically possible but would have a negative performance impact that is measurable in key web scenarios. It also would be hard for consumers to understand the implications of calling overloads that have `ReadOnlySequence\u003cT\u003e` outputs (do we copy to an array?).\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJeremyKuhne\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Buffers`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-10T21:54:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzQyMjA4NQ==",
                                           "createdAt":  "2021-05-10T22:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omariom",
                                           "body":  "\u003e public int Length { get; }\r\n\r\nIt could be `nint`. It supports C# arithmetic operators.",
                                           "updatedAt":  "2021-05-10T22:13:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzQ0ODIyOA==",
                                           "createdAt":  "2021-05-10T22:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBqTzsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2021-05-10T23:41:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e It could be nint.\r\n\r\nA span\u0027s length is a 32-bit integer. Consequently, a `SpanReader`\u0027s length will never exceed `int.MaxValue`.",
                                           "updatedAt":  "2021-05-10T23:24:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzUyNTIwMg==",
                                           "createdAt":  "2021-05-11T00:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Doesn\u0027t seem to be much value here?",
                                           "updatedAt":  "2021-05-11T00:04:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzUyODIxMA==",
                                           "createdAt":  "2021-05-11T00:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL0UvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-05-11T00:16:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2021-05-11T00:56:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2021-05-11T17:59:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-03-28T03:16:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@scalablecory Can you elaborate? I found having something to track \"position\" in parsing a span extremely useful and manually doing so cumbersome and error-prone.",
                                           "updatedAt":  "2021-05-11T00:07:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzUzNTQzMw==",
                                           "createdAt":  "2021-05-11T00:14:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBqVKhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2021-05-11T05:03:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Note that this is something that came up in development of the original `SequenceReader` (which I wrote) that I intended to follow up on. Shifting teams caused this to back-burner for awhile. I\u0027m using my own implementation of this in things I\u0027m working on which motivated me to finally get this proposal created.",
                                           "updatedAt":  "2021-05-11T00:14:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzU4NTE1MQ==",
                                           "createdAt":  "2021-05-11T01:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "\u003e I found having something to track \"position\" in parsing a span extremely useful and manually doing so cumbersome and error-prone ... I\u0027m using my own implementation of this in things I\u0027m working on which motivated me to finally get this proposal created.\r\n\r\nCan you give some usage examples showing how this reduces code complexity?\r\n\r\n`SequenceReader` is useful because it crosses segment boundaries, but this looks like it\u0027ll just be a trivial wrapper around existing APIs.",
                                           "updatedAt":  "2021-05-11T01:08:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzYxMTMxMg==",
                                           "createdAt":  "2021-05-11T01:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e Can you give some usage examples showing how this reduces code complexity?\r\n\r\nThe key thing is that to do the same thing I\u0027m showing in the proposal is that you would have to keep slicing yourself (or trying to not mess up your current index when you\u0027re slicing). But beyond that the API patterns are very convenient for parsing and aren\u0027t just single method calls. Additionally you can\u0027t back up a step easily when slicing over and over.\r\n\r\n``` C#\r\nint index = data.IndexOf(Identifiers.StartOfText);\r\nif (index == -1)\r\n{\r\n    throw new InvalidDataException(\"No start text (STX) control character found.\");\r\n}\r\n\r\ndata = data.Slice(index);\r\nushort checksum = CalculateFileChecksum(data);\r\ndata = data.Slice(1);\r\n\r\nindex = data.IndexOf(Identifiers.FieldTerminator);\r\n\r\nif (index == -1)\r\n{\r\n    throw new InvalidDataException(\"Did not find design specification.\");\r\n}\r\n\r\ninfo.DesignSpecification = Encoding.ASCII.GetString(data.Slice(0, index));\r\ndata = data.Slice(index + 1);\r\n\r\n// etc... ugh\r\n```\r\n\r\nUpdated the sample because I messed it up the first time.",
                                           "updatedAt":  "2021-05-11T02:35:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzc2OTY4Mg==",
                                           "createdAt":  "2021-05-11T04:14:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "The main advantage of an API like this is that it makes the \"read and move\" code a lot simpler. For example:\r\n\r\n```cs\r\nif (!reader.TryReadByte(out var protocolVersion))\r\n    throw new InvalidOperationException(\"Could not read protocol version\");\r\n\r\nint size = 0;\r\n\r\nif (protocolVersion == 1)\r\n{\r\n    if (!reader.TryReadInt16LittleEndian(out var sizeShort))\r\n        throw new InvalidOperationException(\"Failed to read packet size\");\r\n    size = sizeShort;\r\n}\r\nelse if (protocolVersion == 2)\r\n{\r\n    if (!reader.TryReadInt32LittleEndian(out size))\r\n        throw new InvalidOperationException(\"Failed to read packet size\");\r\n}\r\n\r\nif (!reader.TryGetSpan(size, out var span))\r\n    throw new InvalidOperationException(\"Failed to get packet data\");\r\n```\r\n\r\ninstead of:\r\n```cs\r\nif (span.Length \u003c 1)\r\n    throw new InvalidOperationException(\"Could not read protocol version\");\r\n\r\nvar protocolVersion = span[0];\r\nint size = 0;\r\n\r\nif (protocolVersion == 1)\r\n{\r\n    if (!BinaryPrimitives.TryReadInt16LittleEndian(span, out var size))\r\n        throw new InvalidOperationException(\"Failed to read packet size\");\r\n\r\n    span = span.Slice(sizeof(short));\r\n}\r\nelse if (protocolVersion == 2)\r\n{\r\n    if (!BinaryPrimitives.TryReadInt32LittleEndian(span, out var size))\r\n        throw new InvalidOperationException(\"Failed to read packet size\");\r\n\r\n    span = span.Slice(sizeof(short)); // bug!\r\n}\r\n\r\nif (span.Length \u003c size)\r\n    throw new InvalidOperationException(\"Failed to get packet data\");\r\n```\r\n\r\nIn the second snippet, it\u0027s very easy to accidentally introduce bugs as you have to explicitly advance the span. I\u0027ve done this many times in my own code, and have ended up writing at least one SpanReader type to minimise these bugs.\r\n",
                                           "updatedAt":  "2021-05-11T04:14:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODEzMDkxNg==",
                                           "createdAt":  "2021-05-11T09:14:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "I\u0027ve myself had to use such a tool multiple times, but it was extremely easy to add the read methods I needed as extension methods.\r\n\r\n```c#\r\nusing System;\r\n\r\nReadOnlySpan\u003cbyte\u003e buffer = new byte[1000];\r\nConsole.WriteLine(buffer.ReadInt32());\r\n\r\nstatic class ReadOnlySpanExtensions\r\n{\r\n    public static int ReadInt32(ref this ReadOnlySpan\u003cbyte\u003e buffer)\r\n    {\r\n        int number = BitConverter.ToInt32(buffer);\r\n        buffer = buffer[4..];\r\n\r\n        return number;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-05-11T09:14:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODE4MTkxOQ==",
                                           "createdAt":  "2021-05-11T09:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omariom",
                                           "body":  "\u003e A span\u0027s length is a 32-bit integer. Consequently, a SpanReader\u0027s length will never exceed int.MaxValue.\r\n\r\nShould Span start supporting more than int.MaxValue elements, nothing would need to change in the API.",
                                           "updatedAt":  "2021-05-11T09:50:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODIxNzUxNA==",
                                           "createdAt":  "2021-05-11T10:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Span itself would never support more elements because it would have been a breaking change for all the developers that use 32-bit integers to store the index while looping one.\r\n\r\nSupporting more elements would need a `LargeSpan\u003cT\u003e` type with a `nint` or `long` `Length`, ~~and consequentially a `LargeSpanReader\u003cT\u003e` type to match it~~.\r\n\r\n`SpanReader` _could_ have its length in a `nint`, and once and if `LargeSpan` got added, it would transparently support both. But that depends on whether the .NET team is willing to add a `LargeSpan` type in the future.",
                                           "updatedAt":  "2021-05-11T10:17:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODMxNDM1OQ==",
                                           "createdAt":  "2021-05-11T11:32:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "What the shape/solution could be for arrays/spans larger than `Int32.MaxValue` elements is already being discussed at length (pun semi-intended) at #12221 and currently that still seems to be a mostly speculative thread.\r\n\r\nOn topic: Seems like the shape is good enough for most cases. It probably won\u0027t replace the one usecase where I need custom look-ahead logic, but other cases can clean up nicely.",
                                           "updatedAt":  "2021-05-11T11:32:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk5MTg0NA==",
                                           "createdAt":  "2021-05-11T18:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e It probably won\u0027t replace the one usecase where I need custom look-ahead logic\r\n\r\n@joe4evr Can you elaborate on this? The current surface area was very much scenario driven- we came up with the original surface area (with `SequenceReader`) by trying to develop the `System.Text.Json` reader on it. Would be nice to continue to evolve these structs based on real scenarios where possible.  :)\r\n\r\nAs to the large span scenario I\u0027d be hesitant to respond to design that isn\u0027t finished. Wouldn\u0027t want to use `nint` if things eventually settled on `long`, for example. I\u0027m also presuming getting said feature is a non-trivial amount of time in the future. Having a `LargeSpanReader` isn\u0027t a terrible thing if it means we can get something we can use in the near term.",
                                           "updatedAt":  "2021-05-11T18:50:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDEwMjc5MQ==",
                                           "createdAt":  "2021-05-12T21:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL0VVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "teo-tsirpanis",
                                                                               "createdAt":  "2021-05-12T22:37:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-03-28T03:19:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Here is the implementation: https://github.com/JeremyKuhne/runtime/commit/86ff403820b887d0216678c70b5f8a96c0fc458e",
                                           "updatedAt":  "2021-05-12T21:17:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTAyNDUwMg==",
                                           "createdAt":  "2021-05-14T05:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e @Joe4evr Can you elaborate on this?\r\n\r\nYeah, so my case is in parsing a chunk of text when encountering an open-brace char, I have a function that looks ahead to find the matching close-brace, keeping track of any nested open/close-brace pairs that may exist within, and returns the slice inside of the braces.\r\n\r\nFrom a glance at the proposed API, I\u0027m not sure if that\u0027s doable straight away, or even common enough to have it baked into the implementation (since I presume this is intended to be high-perf/\"low-fat\").",
                                           "updatedAt":  "2021-05-14T05:49:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTUzNTA3OA==",
                                           "createdAt":  "2021-05-14T22:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@Joe4evr thanks for the scenario. I\u0027ll give it some thought as this is a not uncommon parsing scenario. Things get a bit awkward if you also support escaping so it isn\u0027t immediately clear what the surface area would look like.",
                                           "updatedAt":  "2021-05-14T22:36:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjAzMzExOQ==",
                                           "createdAt":  "2021-05-17T06:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "I do have escaping included, yes:\r\n```cs\r\nfor (int i = startIdx; i \u003c span.Length; i++)\r\n{\r\n    char current = span[i];\r\n    if (current == \u0027\\\\\u0027)\r\n    {\r\n        i += 1;\r\n        continue;\r\n    }\r\n\r\n    // ....\r\n}\r\n```",
                                           "updatedAt":  "2021-05-17T06:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477kqF",
                                           "createdAt":  "2022-01-05T08:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "Is there already a spanreader available? Would be very useful instead of manually keeping track of the current slice position. Passing a spanreader would be a lot easier 👍 ",
                                           "updatedAt":  "2022-01-05T08:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ztpwm",
                                           "createdAt":  "2023-04-12T11:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "*Bump* \r\nIs there already a SpanReader available?",
                                           "updatedAt":  "2023-04-12T11:55:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oWJDN",
                                           "createdAt":  "2023-10-06T12:56:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "\u003e _Bump_ Is there already a SpanReader available?\r\n\r\nhttps://sakno.github.io/dotNext/versions/2.x/api/DotNext.Buffers.SpanReader-1.html :-)",
                                           "updatedAt":  "2023-10-06T12:56:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MF2PR",
                                           "createdAt":  "2024-09-13T21:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Trolldemorted",
                                           "body":  "@JeremyKuhne was there a particular reason for `SequenceReaderExtensions` to only contain methods for signed integer types, and could we get unsigned variants here (and ideally also there)?",
                                           "updatedAt":  "2024-09-13T21:42:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WPg-V",
                                           "createdAt":  "2024-12-05T15:36:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xhanti",
                                           "body":  "Bump! \n\nI found this type (https://sakno.github.io/dotNext/versions/2.x/api/DotNext.Buffers.SpanReader-1.html) extremely helpful. \nIt simplified a lot of the code I had manually written keeping tracking of how much of a span I had consumed all over the place on a project",
                                           "updatedAt":  "2024-12-05T15:36:03Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "API Proposal: Add SpanReader\u003cT\u003e that aligns with SequenceReader\u003cT\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54343",
        "createdAt":  "2021-06-17T06:04:42Z",
        "number":  54343,
        "author":  "anranruye",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T08:47:02Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\n\r\nFor local DateTime values which are smaller than `1900-12-31 23:59:17`, `System.Text.Json.JsonSerializer.Serialize(DateTime)` has a different result in wasm runtime(+08:05 vs +08:00).\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n```\r\n\u003cbutton @onclick=\"Click\"\u003eClick\u003c/button\u003e\r\n\r\n@code{\r\n    void Click()\r\n    {\r\n        DateTime dateTime1 = new DateTime(1900, 12, 31, 23, 59, 16, DateTimeKind.Local);\r\n        DateTime dateTime2 = new DateTime(1900, 12, 31, 23, 59, 17, DateTimeKind.Local);\r\n        //Output: \"1900-12-31T23:59:16+08:05\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime1));\r\n        Console.WriteLine(dateTime1.ToString(\"o\"));\r\n        //Output: \"1900-12-31T23:59:17+08:00\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime2));\r\n        Console.WriteLine(dateTime2.ToString(\"o\"));\r\n    }\r\n}\r\n```\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0.0\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOEllhg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzM4ODc2MQ==",
                                           "createdAt":  "2021-06-17T16:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @layomia\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\n\r\nFor local DateTime values which are smaller than `1900-12-31 23:59:17`, `System.Text.Json.JsonSerializer.Serialize(DateTime)` has a different result in wasm runtime(+08:05 vs +08:00).\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n```\r\n\u003cbutton @onclick=\"Click\"\u003eClick\u003c/button\u003e\r\n\r\n@code{\r\n    void Click()\r\n    {\r\n        DateTime dateTime1 = new DateTime(1900, 12, 31, 23, 59, 16, DateTimeKind.Local);\r\n        DateTime dateTime2 = new DateTime(1900, 12, 31, 23, 59, 17, DateTimeKind.Local);\r\n        //Output: \"1900-12-31T23:59:16+08:05\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime1));\r\n        Console.WriteLine(dateTime1.ToString(\"o\"));\r\n        //Output: \"1900-12-31T23:59:17+08:00\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime2));\r\n        Console.WriteLine(dateTime2.ToString(\"o\"));\r\n    }\r\n}\r\n```\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0.0\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanranruye\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-17T16:32:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mzg0MzQ3OQ==",
                                           "createdAt":  "2021-06-18T08:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "This is likely to do with the history of your local timezone. In the late 1800s it wasn\u0027t uncommon for certain regions to run both \"Railroad time\" (which was agreed-upon throughout the country) and \"Local time\" (which was different between towns/cities, and therefor could be off by a few minutes relative to Railroad time). The key thing to realize here is that at some point in time, the decision has been made to switch every city/town to \"Railroad time\" so that it\u0027d all be in sync.\r\n\r\nEvidently, the timezone data that is consulted for the conversion believes that `1900-12-31 23:59:17` is the moment when that switch happened for your zone.",
                                           "updatedAt":  "2021-06-18T08:02:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mzk1OTk4Mg==",
                                           "createdAt":  "2021-06-18T11:10:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anranruye",
                                           "body":  "@Joe4evr Thank you.",
                                           "updatedAt":  "2021-06-18T11:10:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mzk4ODAxMA==",
                                           "createdAt":  "2021-06-18T12:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anranruye",
                                           "body":  "Now I understand why this happened. However, this makes difference between .Net implements. We still want the same behavior in all .Net implements.",
                                           "updatedAt":  "2021-06-18T12:03:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SVDT",
                                           "createdAt":  "2021-10-15T14:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\n\r\nFor local DateTime values which are smaller than `1900-12-31 23:59:17`, `System.Text.Json.JsonSerializer.Serialize(DateTime)` has a different result in wasm runtime(+08:05 vs +08:00).\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n```\r\n\u003cbutton @onclick=\"Click\"\u003eClick\u003c/button\u003e\r\n\r\n@code{\r\n    void Click()\r\n    {\r\n        DateTime dateTime1 = new DateTime(1900, 12, 31, 23, 59, 16, DateTimeKind.Local);\r\n        DateTime dateTime2 = new DateTime(1900, 12, 31, 23, 59, 17, DateTimeKind.Local);\r\n        //Output: \"1900-12-31T23:59:16+08:05\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime1));\r\n        Console.WriteLine(dateTime1.ToString(\"o\"));\r\n        //Output: \"1900-12-31T23:59:17+08:00\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime2));\r\n        Console.WriteLine(dateTime2.ToString(\"o\"));\r\n    }\r\n}\r\n```\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0.0\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanranruye\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-15T14:04:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SWTv",
                                           "createdAt":  "2021-10-15T14:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "System.Text.Json uses the `Utf8Formatter` class when [serializing date values](https://github.com/dotnet/runtime/blob/f40247e8e4276ec4472eaeaac461bb3bc14c2cd0/src/libraries/System.Text.Json/src/System/Text/Json/Writer/JsonWriterHelper.Date.cs#L18). I would assume there are semantic differences between that implementation and `DateTime.ToString(\"o\")` in the case of wasm.",
                                           "updatedAt":  "2021-10-15T14:11:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SWWG",
                                           "createdAt":  "2021-10-15T14:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @GrabYourPitchForks, @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\n\r\nFor local DateTime values which are smaller than `1900-12-31 23:59:17`, `System.Text.Json.JsonSerializer.Serialize(DateTime)` has a different result in wasm runtime(+08:05 vs +08:00).\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n```\r\n\u003cbutton @onclick=\"Click\"\u003eClick\u003c/button\u003e\r\n\r\n@code{\r\n    void Click()\r\n    {\r\n        DateTime dateTime1 = new DateTime(1900, 12, 31, 23, 59, 16, DateTimeKind.Local);\r\n        DateTime dateTime2 = new DateTime(1900, 12, 31, 23, 59, 17, DateTimeKind.Local);\r\n        //Output: \"1900-12-31T23:59:16+08:05\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime1));\r\n        Console.WriteLine(dateTime1.ToString(\"o\"));\r\n        //Output: \"1900-12-31T23:59:17+08:00\"\r\n        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(dateTime2));\r\n        Console.WriteLine(dateTime2.ToString(\"o\"));\r\n    }\r\n}\r\n```\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0.0\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanranruye\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Buffers`, `area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-15T14:11:14Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Blazor: DateTime.ToString(\"o\") and JsonSerializer.Serialize(DateTime) has a different result in wasm runtime ",
        "labels":  [
                       "arch-wasm",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60332",
        "createdAt":  "2021-10-13T05:50:25Z",
        "number":  60332,
        "author":  "jeffhandley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T08:46:24Z",
        "body":  "With #57921, we introduced a new `SequenceReader\u003cT\u003e.TryReadExact` method. We need to implement microbenchmarks for this new API, evaluate the performance, and determine if the  performance meets our expectations or if optimizations need to be made.\r\n\r\nhttps://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md#benchmarking-workflow-for-dotnetruntime-repository\r\n\r\n_Originally posted in https://github.com/dotnet/runtime/issues/57921#issuecomment-940687967_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOCTsaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44JOxp",
                                           "createdAt":  "2021-10-13T05:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @GrabYourPitchForks, @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWith #57921, we introduced a new `SequenceReader\u003cT\u003e.TryReadExact` method. We need to implement microbenchmarks for this new API, evaluate the performance, and determine if the  performance meets our expectations or if optimizations need to be made.\r\n\r\n_Originally posted in https://github.com/dotnet/runtime/issues/57921#issuecomment-940687967_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejeffhandley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-13T05:50:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Create microbenchmarks for SequenceReader\u003cT\u003e.TryReadExact",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67607",
        "createdAt":  "2022-04-05T17:57:52Z",
        "number":  67607,
        "author":  "gfr-g",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T08:44:22Z",
        "body":  "### Description\r\n\r\nI\u0027m not sure whether this is a bug or expected behavior but calling `ReadOnlySequence.Slice(int start, int length)` on a sequence with more than one segment with a start index of 0 and length equal to the size of the first segment, returns a sequence with two segments where the second one is empty (this actually happen for slices of any size, as long as they are on a segment border, and regardless of whether we start from the beginning of the first segment or the beginning of any other segment) \r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nusing System.Buffers;\r\n\r\nvar buffer = new byte[4097];\r\n\r\nvar seg1 = new Seg(buffer.AsMemory(^1), 4096);\r\nvar seg0 = new Seg(buffer.AsMemory(..^1), 0);\r\nseg0.SetNext(seg1);\r\n\r\nvar sequence = new ReadOnlySequence\u003cbyte\u003e(seg0, 0, seg1, 1);\r\nvar result = sequence.Slice(0, sequence.First.Length);\r\n\r\nConsole.WriteLine(result.IsSingleSegment); // this prints False  \r\n\r\n\r\ninternal class Seg : ReadOnlySequenceSegment\u003cbyte\u003e\r\n{\r\n    public Seg(ReadOnlyMemory\u003cbyte\u003e memory, long runningIndex)\r\n    {\r\n        Memory = memory;\r\n        RunningIndex = runningIndex;\r\n    }\r\n\r\n    public void SetNext(Seg seg)\r\n    {\r\n        Next = seg;\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nWhen slicing a sequence on segments border, I expect to get a sequence which contains only the sliced segments. \r\n\r\n### Actual behavior\r\n\r\nCurrently, slicing as described adds an empty segment at the end of the sequence.  \r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nNET 6.0 (but I also tried with the latest 7.0 preview) \r\nWindows 10 x64  \r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQoB-Iw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Cfdgs",
                                           "createdAt":  "2022-05-03T01:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m not sure whether this is a bug or expected behavior but calling `ReadOnlySequence.Slice(int start, int length)` on a sequence with more than one segment with a start index of 0 and length equal to the size of the first segment, returns a sequence with two segments where the second one is empty (this actually happen for slices of any size, as long as they are on a segment border, and regardless of whether we start from the beginning of the first segment or the beginning of any other segment) \r\n\r\n### Reproduction Steps\r\n\r\n```\r\nusing System.IO.Pipelines;\r\n\r\nvar buffer = new byte[6004];\r\n\r\nvar pipe = new Pipe();\r\nawait pipe.Writer.WriteAsync(buffer);\r\nawait pipe.Writer.FlushAsync();\r\nvar read = await pipe.Reader.ReadAsync();\r\n\r\nvar sequence = read.Result.Buffer;\r\nvar result = sequence.Slice(0, sequence.First.Length);\r\n\r\nConsole.WriteLine(result.IsSingleSegment); // this prints False  \r\n```\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nWhen slicing a sequence on segments border, I expect to get a sequence which contains only the sliced segments. \r\n\r\n### Actual behavior\r\n\r\nCurrently, slicing as described adds an empty segment at the end of the sequence.  \r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nNET 6.0 (but I also tried with the latest 7.0 preview) \r\nWindows 10 x64  \r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egfr-g\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eadityamandaleeka\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `area-System.IO.Pipelines`, `investigate`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T01:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cfdi6",
                                           "createdAt":  "2022-05-03T01:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m not sure whether this is a bug or expected behavior but calling `ReadOnlySequence.Slice(int start, int length)` on a sequence with more than one segment with a start index of 0 and length equal to the size of the first segment, returns a sequence with two segments where the second one is empty (this actually happen for slices of any size, as long as they are on a segment border, and regardless of whether we start from the beginning of the first segment or the beginning of any other segment) \r\n\r\n### Reproduction Steps\r\n\r\n```\r\nusing System.IO.Pipelines;\r\n\r\nvar buffer = new byte[6004];\r\n\r\nvar pipe = new Pipe();\r\nawait pipe.Writer.WriteAsync(buffer);\r\nawait pipe.Writer.FlushAsync();\r\nvar read = await pipe.Reader.ReadAsync();\r\n\r\nvar sequence = read.Result.Buffer;\r\nvar result = sequence.Slice(0, sequence.First.Length);\r\n\r\nConsole.WriteLine(result.IsSingleSegment); // this prints False  \r\n```\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nWhen slicing a sequence on segments border, I expect to get a sequence which contains only the sliced segments. \r\n\r\n### Actual behavior\r\n\r\nCurrently, slicing as described adds an empty segment at the end of the sequence.  \r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nNET 6.0 (but I also tried with the latest 7.0 preview) \r\nWindows 10 x64  \r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egfr-g\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eadityamandaleeka\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `area-System.IO.Pipelines`, `investigate`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T01:56:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cfdj4",
                                           "createdAt":  "2022-05-03T01:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think this is a read only sequence issue.",
                                           "updatedAt":  "2022-05-03T01:56:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cf3Lo",
                                           "createdAt":  "2022-05-03T03:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is it possible to give a  repro snippet that is only in terms of span/sequence and not pipes?",
                                           "updatedAt":  "2022-05-03T03:31:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CgHuJ",
                                           "createdAt":  "2022-05-03T03:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Tangentially related to https://github.com/dotnet/runtime/issues/30786",
                                           "updatedAt":  "2022-05-03T03:52:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CgH4j",
                                           "createdAt":  "2022-05-03T03:52:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Is it possible to give a repro snippet that is only in terms of span/sequence and not pipes?\r\n\r\nI updated the issue",
                                           "updatedAt":  "2022-05-03T03:52:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ReadOnlySequence.Slice(int start, int length) has (possibly) unexpected behavior ",
        "labels":  [
                       "investigate",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69641",
        "createdAt":  "2022-05-21T10:01:18Z",
        "number":  69641,
        "author":  "FrediKats",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCeAJbQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "FrediKats",
                                            "createdAt":  "2022-05-21T10:58:26Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "annchous",
                                            "createdAt":  "2022-05-21T10:58:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-15T20:28:11Z",
        "body":  "# ArrayPool \r\n\r\n### Description\r\n\r\nArrayPool (TlsOverPerCoreLockedStacksArrayPool) does not resize based on user request. TlsOverPerCoreLockedStacksArrayPool has constant value for arrays buckets. If those number of arrays is not enough then we get ` GC.AllocateUninitializedArray` call:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L24\r\n\r\nThis approach is good enough if we can take and return array with low delay but can lead to issues in case when we need many arrays for a long time. I compare `ArrayPool\u003cT\u003e.Shared` and `ArrayPool\u003cT\u003e.Create`. We ran into a problem while checking solution with genetic algorithm. In our case it needs to allocate about 3000 arrays (with constant size) for one iteration then we return it back to array pool and want to reuse in next iterations.\r\n\r\nRepository with reproduce is available here - https://github.com/FrediKats/ArrayPoolAllocationReproduce. You can just run this project as-is and check allocations.\r\n\r\n- .Benchmark contains benchmark source code\r\n- .MemoryTest contains code that was run under dotMemory\r\n\r\n### Configuration\r\n\r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.22000\r\nAMD Ryzen 7 5800H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK=7.0.100-preview.4.22252.9\r\n  [Host]     : .NET 6.0.5 (6.0.522.21309), X64 RyuJIT\r\n  DefaultJob : .NET 6.0.5 (6.0.522.21309), X64 RyuJIT\r\n```\r\n\r\n| Method | UseShared |     Mean |   Error |  StdDev |     Gen 0 |     Gen 1 | Allocated |\r\n|------- |---------- |---------:|--------:|--------:|----------:|----------:|----------:|\r\n|   Read |     False | 274.1 ms | 4.16 ms | 5.96 ms |         - |         - |      5 MB |\r\n|   Read |      True | 292.4 ms | 4.52 ms | 3.78 ms | 4000.0000 | 2000.0000 |     39 MB |\r\n\r\n### dotMemory traces\r\n\r\nDotMemory trace with changing allocation mode:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646124-a40b3a99-1ba2-4829-95a7-1fc4f6c87adf.png)\r\n\r\nAllocated objects while we using `ArrayPool\u003cVector2\u003e.Shared`:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646130-ba737438-99ca-4408-bbf3-a45aee901594.png)\r\n\r\nAllocated objects while we using pool form `ArrayPool\u003cVector2\u003e.Create`:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646134-1cd7b726-2052-4c57-b90f-a7f93c83cd16.png)\r\n\r\n### Analysis\r\n\r\nSame issue was mentioned in https://github.com/dotnet/runtime/issues/52098#issuecomment-830108049.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ5MuOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DkT7_",
                                           "createdAt":  "2022-05-21T10:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# ArrayPool \r\n\r\n### Description\r\n\r\nArrayPool (TlsOverPerCoreLockedStacksArrayPool) does not resize based on user request. TlsOverPerCoreLockedStacksArrayPool has constant value for arrays buckets. If those number of arrays is not enough then we get ` GC.AllocateUninitializedArray` call:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L24\r\n\r\nThis approach is good enough if we can take and return array with low delay but can lead to issues in case when we need many arrays for a long time. I compare `ArrayPool\u003cT\u003e.Shared` and `ArrayPool\u003cT\u003e.Create`. We ran into a problem while checking solution with genetic algorithm. In our case it needs to allocate about 3000 arrays (with constant size) for one iteration then we return it back to array pool and want to reuse in next iterations.\r\n\r\nRepository with reproduce is available here - https://github.com/FrediKats/ArrayPoolAllocationReproduce. You can just run this project as-is and check allocations.\r\n\r\n- .Benchmark contains benchmark source code\r\n- .MemoryTest contains code that was run under dotMemory\r\n\r\n### Configuration\r\n\r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.22000\r\nAMD Ryzen 7 5800H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK=7.0.100-preview.4.22252.9\r\n  [Host]     : .NET 6.0.5 (6.0.522.21309), X64 RyuJIT\r\n  DefaultJob : .NET 6.0.5 (6.0.522.21309), X64 RyuJIT\r\n```\r\n\r\n| Method | UseShared |     Mean |   Error |  StdDev |     Gen 0 |     Gen 1 | Allocated |\r\n|------- |---------- |---------:|--------:|--------:|----------:|----------:|----------:|\r\n|   Read |     False | 274.1 ms | 4.16 ms | 5.96 ms |         - |         - |      5 MB |\r\n|   Read |      True | 292.4 ms | 4.52 ms | 3.78 ms | 4000.0000 | 2000.0000 |     39 MB |\r\n\r\n### dotMemory traces\r\n\r\nDotMemory trace with changing allocation mode:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646124-a40b3a99-1ba2-4829-95a7-1fc4f6c87adf.png)\r\n\r\nAllocated objects while we using `ArrayPool\u003cVector2\u003e.Shared`:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646130-ba737438-99ca-4408-bbf3-a45aee901594.png)\r\n\r\nAllocated objects while we using pool form `ArrayPool\u003cVector2\u003e.Create`:\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/169646134-1cd7b726-2052-4c57-b90f-a7f93c83cd16.png)\r\n\r\n### Analysis\r\n\r\nSame issue was mentioned in https://github.com/dotnet/runtime/issues/52098#issuecomment-830108049.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFrediKats\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-21T10:01:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DkWTN",
                                           "createdAt":  "2022-05-21T11:14:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCeANkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2022-05-21T11:43:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "This is specifically why custom Array pool creation api was made, isn\u0027t it? Shared array pool is used across whole runtime and is used specifically with quick take-give back in mind.\n\nI doubt that tuning Shared for such a specific use case makes sense.",
                                           "updatedAt":  "2022-05-21T11:14:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dky46",
                                           "createdAt":  "2022-05-21T17:44:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @Maoni0 in relation to https://github.com/dotnet/runtime/issues/52098.",
                                           "updatedAt":  "2022-05-21T17:44:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ArrayPool does not resize based on user request",
        "labels":  [
                       "area-System.Buffers",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71471",
        "createdAt":  "2022-06-30T01:21:19Z",
        "number":  71471,
        "author":  "yufeih",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB9yoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-06-30T07:36:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FiniteReality",
                                            "createdAt":  "2022-06-30T08:54:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-06-30T10:29:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teneko",
                                            "createdAt":  "2025-02-25T09:49:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-28T03:13:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2025-04-18T20:35:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-05-02T14:19:03Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-09-07T16:56:00Z",
        "body":  "### Background and motivation\n\nToday `SequenceReader\u003cT\u003e.TryReadTo`  contains overloads with `T` to read to a single delimiter and `ReadOnlySpan\u003cT\u003e` to read to a sequence of delimiters, but `SequenceReader\u003cT\u003e.TryAdvanceTo` only contains overloads for single delimiter `T`, the proposal is to add a new overload to `SequenceReader\u003cT\u003e.TryAdvanceTo` that takes a `ReadOnlySpan\u003cT\u003e` which would advance the reader to the next occurrence of a delimiter sequence.\r\n\r\nMain usage is to simplify the parsing of data formats with multi-byte delimiters. E.g., the PDF file format marks the start and end of a dictionary using `\u003c\u003c` and `\u003e\u003e`, and surrounds the object with `{id} 0 obj` and `endobj`, this overload helps with parsing of such data.\r\n\r\n[#1111](https://github.com/dotnet/runtime/issues/1111)\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Buffers;\r\n\r\npublic ref struct SequenceReader\u003cT\u003e\r\n{\r\n    public bool TryAdvanceTo(ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Read data between \u003c\u003c and \u003e\u003e\r\nvar sequenceReader = new SequenceReader(buffer);\r\nsequenceReader.TryAdvanceTo(\"\u003c\u003c\"u8);\r\nsequenceReader.TryReadTo(out ReadOnlySpan\u003cbyte\u003e span, \"\u003e\u003e\"u8);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtE3lMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fxq3s",
                                           "createdAt":  "2022-06-30T01:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nToday `SequenceReader\u003cT\u003e.TryReadTo`  contains overloads with `T` to read to a single delimiter and `ReadOnlySpan\u003cT\u003e` to read to a sequence of delimiters, but `SequenceReader\u003cT\u003e.TryAdvanceTo` only contains overloads for single delimiter `T`, the proposal is to add a new overload to `SequenceReader\u003cT\u003e.TryAdvanceTo` that takes a `ReadOnlySpan\u003cT\u003e` which would advance the reader to the next occurrence of a delimiter sequence.\r\n\r\nMain usage is to simplify the parsing of data formats with multi-byte delimiters. E.g., the PDF file format marks the start and end of a dictionary using `\u003c\u003c` and `\u003e\u003e`, and surrounds the object with `{id} 0 obj` and `endobj`, this overload helps with parsing of such data.\r\n\r\n[#1111](https://github.com/dotnet/runtime/issues/1111)\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Buffers;\r\n\r\npublic ref struct SequenceReader\u003cT\u003e\r\n{\r\n    public bool TryAdvanceTo(ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Read data between \u003c\u003c and \u003e\u003e\r\nvar sequenceReader = new SequenceReader(buffer);\r\nsequenceReader.TryAdvanceTo(\"\u003c\u003c\"u8);\r\nsequenceReader.TryReadTo(out ReadOnlySpan\u003cbyte\u003e span, \"\u003e\u003e\"u8);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eyufeih\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Buffers`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-30T01:21:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt2Tm",
                                           "createdAt":  "2025-02-09T03:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKLooQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "teneko",
                                                                               "createdAt":  "2025-02-25T09:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-03-17T14:01:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "This proposal looks reasonable to me. Marking as https://github.com/dotnet/runtime/labels/api-ready-for-review and https://github.com/dotnet/runtime/labels/help%20wanted.",
                                           "updatedAt":  "2025-02-09T03:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60TeUx",
                                           "createdAt":  "2025-07-01T17:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZGv5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-07-01T20:09:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dbeusink",
                                                                               "createdAt":  "2025-07-03T11:26:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=52f8Bz8db04\u0026t=0h41m41s)\n\nWe added the `scoped` keyword to the `delimiter` parameter; otherwise, looks good as proposed\n\n```C#\nnamespace System.Buffers;\n\npublic ref struct SequenceReader\u003cT\u003e\n{\n    public bool TryAdvanceTo(scoped ReadOnlySpan\u003cT\u003e delimiter, bool advancePastDelimiter = true);\n}\n```",
                                           "updatedAt":  "2025-07-01T19:05:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: SequenceReader\u003cT\u003e.TryAdvanceTo(ReadOnlySpan\u003cT\u003e delimiter)",
        "labels":  [
                       "api-approved",
                       "area-System.Buffers",
                       "help wanted",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75866",
        "createdAt":  "2022-09-19T22:44:49Z",
        "number":  75866,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Dgng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adienakhmad",
                                            "createdAt":  "2023-08-07T13:19:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-05-21T17:39:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-11-12T22:49:38Z",
        "body":  "### Description\r\n\r\nCalling `long ReadOnlySequence\u003cT\u003e.GetOffset(SequencePosition position)` does not function correctly if the sequence was constructed with a segment/array having a non-zero starting index.\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nusing System;\r\nusing System.Buffers;\r\n\r\n// Create a sequence with a non-zero starting index, 1 here.\r\nvar seq = new ReadOnlySequence\u003cbyte\u003e(new byte[10], 1, 9);\r\n// GetOffset: Returns the offset of a position within this sequence from the *start*.\r\nvar offset = seq.GetOffset(seq.Start);\r\nif (offset != 0) \r\n  throw new Exception(\"Bugged, was: \" + offset);\r\n```\r\n\r\nhttps://dotnetfiddle.net/lpUi0v\r\n\r\n### Expected behavior\r\n\r\nGiven the xml docs specifically note \"Returns the offset of a position within this sequence from the start\" I would expect the offset to be 0 when passing in seq.Start.\r\n\r\nWe\u0027re using GetOffset to Rewind a SequenceReader to a SequencePosition previously saved. SequenceReader is missing a method to do so directly however (would an api proposal for this be accepted?). So we take the offset of the position, subtracting it from Consumed and pass in the expected count to `SequenceReader.Rewind`.\r\nCare also needs to be taken not to pass in 0, see https://github.com/dotnet/runtime/issues/68774\r\n\r\n### Configuration\r\n\r\nThis is an issue ever since ReadOnlySequence.GetOffset was shipped in https://github.com/dotnet/runtime/pull/771.\r\nA version of the roundtrip test I specified in the reproduction steps should have been in the test suite.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk1QOmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KmppM",
                                           "createdAt":  "2022-09-19T22:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-19T22:44:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kmy-W",
                                           "createdAt":  "2022-09-19T23:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n`long ReadOnlySequence\u003cT\u003e.GetOffset(SequencePosition position)` does not function correctly if the sequence was constructed with a segment/array having a non-zero starting index.\n\n### Reproduction Steps\n\n```cs\r\nusing System;\r\nusing System.Buffers;\r\n\r\nvar seq = new ReadOnlySequence\u003cbyte\u003e(new byte[10], 1, 10 - 1);\r\n// GetOffset: Returns the offset of a position within this sequence from the *start*.\r\nvar offset = seq.GetOffset(seq.Start);\r\nif (offset != 0) \r\n  throw new Exception(\"Bugged, was: \" + offset);\r\n```\r\n\r\nhttps://dotnetfiddle.net/lpUi0v\n\n### Expected behavior\n\nEffectively the roundtrip test I specified in the reproduction steps should have been in the test suite.\r\n\r\nGiven the xml docs on specifically note \"Returns the offset of a position within this sequence from the start\" I would expect the offset to be 0 here.\r\n\r\nThis does not just happen with seq.Start but any position from that moment on.\n\n### Actual behavior\n\nYou get the starting index.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nThis has been bugged ever since ReadOnlySequence was shipped.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNinoFloris\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Buffers`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-19T23:47:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KpGX6",
                                           "createdAt":  "2022-09-20T12:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@vcsjones I can make a PR to fix this if this is indeed unexpected behavior. ",
                                           "updatedAt":  "2022-09-20T12:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kpo27",
                                           "createdAt":  "2022-09-20T14:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCshslQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NinoFloris",
                                                                               "createdAt":  "2022-09-20T15:13:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "@NinoFloris I would wait for one of the area owners to weigh in first.",
                                           "updatedAt":  "2022-09-20T14:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KqbiR",
                                           "createdAt":  "2022-09-20T16:55:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Looking into this now",
                                           "updatedAt":  "2022-09-20T16:55:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kqh1L",
                                           "createdAt":  "2022-09-20T17:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "In the code, what\u0027s happening is we are adding `positionIndex` to our result here https://source.dot.net/#System.Memory/System/Buffers/ReadOnlySequence.cs,580, which is equivalent to `seq.Start.GetInteger()` which returns `1`. This index is relative to the *array* the `ReadOnlySequence` was created *from*, not the `ReadOnlySequence` itself.\r\n\r\nThere are a few possibilities here:\r\n\r\n1. The behavior is intended, `GetOffset` is relative to the start of the source data, not the `ReadOnlySequence`, and the documentation needs to be clarified.\r\n2. The documentation is correct, and the behavior is incorrectly returning an offset relative to the source data, so one of the following is the case:\r\na. `GetOffset` should not be adding `positionIndex` to the result.\r\nb. `seq.Start` is initialized incorrectly and should be initialized with an index relative to the `ReadOnlySequence` (`seq.Start.GetInteger() == 0`), not the source array (in this case `seq.Start.GetInteger() == 1`).\r\n\r\n\r\n",
                                           "updatedAt":  "2022-09-20T17:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KrXxE",
                                           "createdAt":  "2022-09-20T20:35:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "@NinoFloris After some discussion I think 2.a. is correct here. If you would like to put up a fix (with a unit test preferably), feel free, otherwise I can tackle it. Thanks for pointing out this bug!",
                                           "updatedAt":  "2022-09-20T20:35:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBtBt",
                                           "createdAt":  "2022-09-26T22:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Additionally, I\u0027ve found another angle where this goes wrong.\r\n\r\nGetOffset in the multi segment branch uses `currentSegment.RunningIndex` instead of the segment\u0027s memory length (minus any starting indices). \r\n\r\nThe issue here is around advancing on a pipereader, at some point the running index can become fairly large due to readers being created over segments that are still part of a larger buffer segment stack. Given RunningIndex states: \"The sum of node length before current.\" using this for the output of GetOffset doesn\u0027t seem correct either.\r\n\r\n\u003cimg width=\"579\" alt=\"Screen Shot 2022-09-27 at 00 42 49\" src=\"https://user-images.githubusercontent.com/4218809/192393620-16a81fd0-74b1-437e-995f-4bb445b6f72b.png\"\u003e\r\n\r\nDoing GetOffset on Sequence.Start in that cases gives even wilder outputs:\r\n\u003cimg width=\"380\" alt=\"Screen Shot 2022-09-27 at 00 46 00\" src=\"https://user-images.githubusercontent.com/4218809/192393894-9f0297bf-83ed-4fc4-a39b-61e9f9831210.png\"\u003e\r\n\r\nSequence.End has a running index of 32768. The output of GetOffset(Sequence.Start) being 32768 - 2 (the actual remaining bytes) is consistent but it obviously does not make sense if I want to know the offset, which is 8192.\r\n\r\nAnd it obviously goes out of bounds of the ReadOnlySequence which only reports a length of 8194.\r\n",
                                           "updatedAt":  "2022-09-26T22:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L7f0R",
                                           "createdAt":  "2022-10-10T22:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Haven\u0027t had time to follow up on this yet. I just wanted to add a small update that I\u0027m no longer confident this is a bug. When I tried to implement 2.a., there were a lot of test cases that failed, and most of them seem to be written in such a way that implies the current behavior is intended.",
                                           "updatedAt":  "2022-10-10T22:52:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L7kfp",
                                           "createdAt":  "2022-10-10T23:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuDiZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-10-18T16:48:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Its leaking a hell of a lot of internal indices etc for it to be intended IMO",
                                           "updatedAt":  "2022-10-10T23:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wJtNU",
                                           "createdAt":  "2024-01-08T18:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODioMlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lilinus",
                                                                               "createdAt":  "2024-05-21T17:38:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jmelkins",
                                           "body":  "I was hit by this problem too. The confusion is acute because `GetOffset` returns a value that depends on the number of items before Sequence.Start in the first memory segment, which may change when the sequence is sliced and is not known by the caller (unless making extra efforts to keep track of it).\r\n\r\nI.e. the returned value from `GetOffset` is non-deterministic from the caller\u0027s perspective and of no use on its own. The workaround is to do something like:\r\n\r\n```C#\r\nSequencePosition currentPosition = ...  // e.g. a saved position or position of SequenceReader\r\nlong distance = readOnlySequence.GetOffset(currentPosition) - readOnlySequence.GetOffset(readOnlySequence.Start);\r\n// distance now has the value the caller was expecting to receive from readOnlySequence.GetOffset(currentPosition) alone\r\n```\r\n\r\nThe current behaviour may not be ideal but some code may now depend upon it. A few possibilities I thought of for improvement:\r\n\r\n- Change the documentation on `GetOffset` to describe the actual behaviour and add a warning about requirements for usage.\r\n- Add a new method on `ReadOnlySequence\u003cT\u003e` to implement the above workaround e.g.\r\n\r\n```C#\r\npublic long GetDistance(SequencePosition start, SequencePosition end)\r\n```\r\n\r\n- If a suitable method is added, consider deprecating `GetOffset`.\r\n",
                                           "updatedAt":  "2024-01-08T18:13:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EqLUo",
                                           "createdAt":  "2024-07-12T13:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lilinus",
                                           "body":  "Another issue with `GetOffset` returning offset from the original (unsliced) ReadOnlySequence is that it makes `ReadOnlySequence.GetPosition(long offset)` not roundtripping (or failing).\r\n\r\nExample:\r\n```\r\nvar original = new ReadOnlySequence\u003cbyte\u003e(new byte[2]);\r\nvar slice = original.Slice(1);\r\nvar endOffset = slice.GetOffset(slice.End);\r\nvar posEndMinusOne = slice.GetPosition(endOffset - 1); // Returns slice.End\r\nvar posEnd = slice.GetPosition(endOffset); // throws ArgumentOutOfRangeException\r\n```",
                                           "updatedAt":  "2024-07-12T13:59:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TVA6b",
                                           "createdAt":  "2024-11-12T22:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD62LmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lilinus",
                                                                               "createdAt":  "2024-11-14T09:25:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PranavSenthilnathan",
                                           "body":  "At the very least, the documentation should be clarified because it is not clear/consistent\n \nI\u0027m not sure about deprecating/removing GetOffset since it\u0027s the \"inverse\" (modulo the round trip issue) of GetPosition. Here is the API request for it where it was added for that purpose: https://github.com/dotnet/runtime/issues/27158 (the [video](https://github.com/dotnet/runtime/issues/27158#issuecomment-537160854) of the review).\n\nSince it\u0027s unlikely we take these APIs away, I think GetDistance is not needed (you can convert to offset and subtract). But feel free to make an API request issue for GetDistance if you think it is still useful for avoiding confusion.",
                                           "updatedAt":  "2024-11-12T22:49:31Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "ReadOnlySequence\u003cT\u003e GetOffset does not function correctly with non-zero starting indices",
        "labels":  [
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88564",
        "createdAt":  "2023-07-09T23:50:41Z",
        "number":  88564,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-20T22:26:50Z",
        "body":  "Below is the list of APIs that still show up as undocumented in dotnet-api-docs and were introduced in .NET 8.0.\r\n\r\nFull porting instructions can be found in the [main issue](https://github.com/dotnet/runtime/issues/88561).\r\n\r\nThis task needs to be finished before the RC2 snap (September 18th).\r\n\r\n| Summary  | Parameters | TypeParameters | ReturnValue | API                                                                                                                                                                                                                               |\r\n|----------|------------|----------------|-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues.Create(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues.Create(System.ReadOnlySpan{System.Char})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                 |\r\n| Missing  | NA         | NA             | NA          | [T:System.Buffers.SearchValues](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                                                          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues1.Contains(0)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues1.xml)                                                                                            |\r\n| Missing  | NA         | Missing        | NA          | [T:System.Buffers.SearchValues1](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues1.xml)                                                                                                        |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadInt128BigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                              |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadInt128LittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                           |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadIntPtrBigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                              |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadIntPtrLittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                           |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUInt128BigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                             |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUInt128LittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUIntPtrBigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                             |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUIntPtrLittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                          |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int32},System.Span{System.Int32})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                   |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                   |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int16},System.Span{System.Int16})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UIntPtr},System.Span{System.UIntPtr})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml) |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int128},System.Span{System.Int128})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt16},System.Span{System.UInt16})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt64},System.Span{System.UInt64})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.IntPtr},System.Span{System.IntPtr})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int64},System.Span{System.Int64})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt128},System.Span{System.UInt128})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml) |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadInt128BigEndian(System.ReadOnlySpan{System.Byte},System.Int128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)            |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadInt128LittleEndian(System.ReadOnlySpan{System.Byte},System.Int128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)         |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadIntPtrBigEndian(System.ReadOnlySpan{System.Byte},System.IntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)            |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadIntPtrLittleEndian(System.ReadOnlySpan{System.Byte},System.IntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)         |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt128BigEndian(System.ReadOnlySpan{System.Byte},System.UInt128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt128LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)       |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUIntPtrBigEndian(System.ReadOnlySpan{System.Byte},System.UIntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUIntPtrLittleEndian(System.ReadOnlySpan{System.Byte},System.UIntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)       |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt128BigEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt128LittleEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteIntPtrBigEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteIntPtrLittleEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt128BigEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt128LittleEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)               |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUIntPtrBigEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUIntPtrLittleEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)               |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteInt128BigEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                       |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteInt128LittleEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteIntPtrBigEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                       |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteIntPtrLittleEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUInt128BigEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUInt128LittleEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUIntPtrBigEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUIntPtrLittleEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Char})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Byte},System.Int32@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Char},System.Int32@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                    |",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYQdBjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hB0GO",
                                           "createdAt":  "2023-07-09T23:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBelow is the list of APIs that still show up as undocumented in dotnet-api-docs and were introduced in .NET 8.0.\r\n\r\nFull porting instructions can be found in the [main issue](https://github.com/dotnet/runtime/issues/88561).\r\n\r\nThis task needs to be finished before the RC2 snap (September 18th).\r\n\r\n| Summary  | Parameters | TypeParameters | ReturnValue | API                                                                                                                                                                                                                               |\r\n|----------|------------|----------------|-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues.Create(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues.Create(System.ReadOnlySpan{System.Char})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                 |\r\n| Missing  | NA         | NA             | NA          | [T:System.Buffers.SearchValues](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues.xml)                                                                                                          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.SearchValues1.Contains(0)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues1.xml)                                                                                            |\r\n| Missing  | NA         | Missing        | NA          | [T:System.Buffers.SearchValues1](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers/SearchValues1.xml)                                                                                                        |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadInt128BigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                              |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadInt128LittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                           |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadIntPtrBigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                              |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadIntPtrLittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                           |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUInt128BigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                             |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUInt128LittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUIntPtrBigEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                             |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReadUIntPtrLittleEndian(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                          |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int32},System.Span{System.Int32})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                   |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                   |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int16},System.Span{System.Int16})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                                                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UIntPtr},System.Span{System.UIntPtr})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml) |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int128},System.Span{System.Int128})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt16},System.Span{System.UInt16})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt64},System.Span{System.UInt64})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.IntPtr},System.Span{System.IntPtr})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)   |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.Int64},System.Span{System.Int64})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.ReadOnlySpan{System.UInt128},System.Span{System.UInt128})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml) |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadInt128BigEndian(System.ReadOnlySpan{System.Byte},System.Int128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)            |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadInt128LittleEndian(System.ReadOnlySpan{System.Byte},System.Int128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)         |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadIntPtrBigEndian(System.ReadOnlySpan{System.Byte},System.IntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)            |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadIntPtrLittleEndian(System.ReadOnlySpan{System.Byte},System.IntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)         |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt128BigEndian(System.ReadOnlySpan{System.Byte},System.UInt128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt128LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt128@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)       |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUIntPtrBigEndian(System.ReadOnlySpan{System.Byte},System.UIntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)          |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryReadUIntPtrLittleEndian(System.ReadOnlySpan{System.Byte},System.UIntPtr@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)       |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt128BigEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt128LittleEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteIntPtrBigEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteIntPtrLittleEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                 |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt128BigEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt128LittleEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)               |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUIntPtrBigEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Binary.BinaryPrimitives.TryWriteUIntPtrLittleEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)               |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteInt128BigEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                       |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteInt128LittleEndian(System.Span{System.Byte},System.Int128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteIntPtrBigEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                       |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteIntPtrLittleEndian(System.Span{System.Byte},System.IntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                    |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUInt128BigEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUInt128LittleEndian(System.Span{System.Byte},System.UInt128)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUIntPtrBigEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                     |\r\n| Missing  | Missing    | NA             | NA          | [M:System.Buffers.Binary.BinaryPrimitives.WriteUIntPtrLittleEndian(System.Span{System.Byte},System.UIntPtr)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Binary/BinaryPrimitives.xml)                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Byte})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Char})](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                                  |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Byte},System.Int32@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                    |\r\n| Missing  | Missing    | NA             | Missing     | [M:System.Buffers.Text.Base64.IsValid(System.ReadOnlySpan{System.Char},System.Int32@)](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Buffers.Text/Base64.xml)                                                    |\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecarlossanlop\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`documentation`, `area-System.Buffers`, `blocking-release`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-09T23:50:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Port System.Buffers documentation for .NET 8.0 APIs",
        "labels":  [
                       "documentation",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100434",
        "createdAt":  "2024-03-29T08:47:22Z",
        "number":  100434,
        "author":  "mgravell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-pd5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-03-29T09:36:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2024-03-29T17:54:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2024-03-29T22:24:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-03-30T23:13:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-04-03T18:46:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teian",
                                            "createdAt":  "2024-04-19T06:49:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomrus88",
                                            "createdAt":  "2024-07-04T02:19:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koepalex",
                                            "createdAt":  "2024-09-17T10:01:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-11-14T09:33:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jodydonetti",
                                            "createdAt":  "2025-01-31T15:41:10Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-02-09T01:59:03Z",
        "body":  "### Background and motivation\r\n\r\nThis is tangentially related to https://github.com/dotnet/runtime/issues/100290 and the .NET 9 distributed caching epic; the proposed hybid-cache API will use `ReadOnlySequence\u003cbyte\u003e` and `IBufferWriter\u003cbyte\u003e` as the primary serializer APIs, but: not all serializers support these APIs (many do, note) - with `Stream` being the most common fallback.\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n``` diff\r\n  // assembly: System.Memory\r\n  namespace System.Buffers;\r\n  \r\n  public static class BuffersExtensions // pre-existing\r\n  {\r\n+     public static Stream AsStream(this ReadOnlySequence\u003cbyte\u003e value) =\u003e new ReadOnlySequenceStream(value);\r\n+     public static Stream AsStream(this IBufferWriter\u003cbyte\u003e value) =\u003e new BufferWriterStream(value);\r\n  }\r\n+ internal sealed class ReadOnlySequenceStream : Stream {...}\r\n+ internal sealed class BufferWriterStream : Stream {...}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n``` c#\r\nReadOnlySequence\u003cbyte\u003e payload = ...\r\nCustomer obj = SomeRandomSerializer.Deserialize\u003cCustomer\u003e(payload.AsStream());\r\n```\r\n\r\nand\r\n\r\n``` c#\r\nCustomer obj = ...\r\nIBufferWriter\u003cbyte\u003e target = ...\r\nSomeRandomSerializer.Serialize\u003cCustomer\u003e(target.AsStream(), obj);\r\n```\r\n\r\nThe implementations would be `internal`, but:\r\n\r\n- `ReadOnlySequenceStream` has a `CanRead: true`, `CanWrite: false` implementation that supports seek etc; no additional buffer copies, just a few \"where are we\" counters, using `SequencePosition` iteration and a `ReadOnlyMemory\u003cbyte\u003e` snapshot of the current segment\r\n- `BufferWriterStream` has a `CanRead: false`, `CanWrite: true` implementation that does not support seek; position and length are read-only and report the bytes written so far; no double-buffering - it is assumed (as a fundamental part of `IBufferWriter\u003cbyte\u003e`) that the underlying `IBufferWriter\u003cbyte\u003e` already does some internal work there when responding to `GetSpan`/`GetMemory` (such that they are affordable), so this would be duplicated effort and an additional mem-copy\r\n- in both cases, all APIs are synchronous, with the async APIs implemented as async-over-sync as efficiently as possible\r\n- no need for fancy recycling, since we don\u0027t have any local buffers etc\r\n\r\n### Alternative Designs\r\n\r\nThe alternative is to use `MemoryStream`, which involves multiple additional copy operations and additional `byte[]` buffers.\r\n\r\n### Risks\r\n\r\nNone seen\r\n\r\n### Additional\r\n\r\nI am happy to contribute the implementation effort.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbcczQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54z_Fr",
                                           "createdAt":  "2024-03-29T08:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-29T08:47:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc541qHj",
                                           "createdAt":  "2024-03-29T14:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEExEgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jodydonetti",
                                                                               "createdAt":  "2025-01-31T15:41:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "The `ReadOnlySequence\u003cT\u003e` side of this is https://github.com/dotnet/runtime/issues/27156. @Jozkee, where did we land on a design for these extra streams, e.g. AsStream vs dedicated publicly named streams vs etc. Implementation is straightforward, so if we have an agreed upon design, we can make quick forward progress here.",
                                           "updatedAt":  "2024-03-29T14:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55AsDe",
                                           "createdAt":  "2024-04-01T17:37:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "https://github.com/dotnet/runtime/issues/82801#issuecomment-1481694752\r\n\r\nFor `[ReadOnly]Memory\u003cbyte\u003e` and `ReadOnlySequence\u003cbyte\u003e`, we want to have static methods that return the Stream wrapping them. If we want to have them as extension methods in `Stream` we would need the static extensions language feature to have `AsStream(this ReadOnlySequence\u003cbyte\u003e)`, or we move ReadOnlySequence down to S.P.CoreLib.\r\n\r\nI discarded having `Memory\u003cbyte\u003e` support directly in MemoryStream based on https://github.com/dotnet/runtime/pull/84103.",
                                           "updatedAt":  "2024-04-01T17:37:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55BWqo",
                                           "createdAt":  "2024-04-01T19:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "Re corelib: that\u0027s why I proposed the existing BuffersExtensions as the root (or something in the same package/namespace) - it should have all the right refs.",
                                           "updatedAt":  "2024-04-01T19:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55HHBa",
                                           "createdAt":  "2024-04-02T12:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfaESQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-04-03T18:47:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "klue516",
                                                                               "createdAt":  "2024-04-24T14:45:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "PaulusParssinen",
                                           "body":  "Noting that [we now have `System.IO.Pipelines` available in .NET 9 shared runtime](https://github.com/dotnet/runtime/issues/68586#issuecomment-1930534029) meaning that there are now two types implementing `IBufferWriter\u003cbyte\u003e`  in the BCL; `PipeWriter` and `ArrayBufferWriter\u003cbyte\u003e`. \r\n\r\nWhen I use `S.IO.Pipelines` I often find myself having to pull `CommunityToolkit.HighPerformance` in for its [`AsStream(this IBufferWriter\u003cbyte\u003e writer)`](https://github.com/CommunityToolkit/dotnet/blob/7b53ae23dfc6a7fb12d0fc058b89b6e948f48448/src/CommunityToolkit.HighPerformance/Extensions/IBufferWriterExtensions.cs#L27) fallback.",
                                           "updatedAt":  "2024-04-02T12:25:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55JBpN",
                                           "createdAt":  "2024-04-02T15:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Considering that static extensions is in the backlog https://github.com/dotnet/csharplang/issues/192, I think we should consider this for 9 while keeping https://github.com/dotnet/runtime/issues/82801 as future.\r\n\r\n",
                                           "updatedAt":  "2024-04-02T15:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cndVr",
                                           "createdAt":  "2025-01-31T15:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PaulusParssinen",
                                           "body":  "Is the plan for this and all other static extension helpers proposals to wait until https://github.com/dotnet/csharplang/issues/192 is done before any further triage?",
                                           "updatedAt":  "2025-01-31T15:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtxzN",
                                           "createdAt":  "2025-02-09T01:58:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEH3e9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-02-27T09:45:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "At this point, we are not prioritizing this proposal. But I am taking note that when dotnet/csharplang#192 lands, we should consider this proposal as a use case to implement.",
                                           "updatedAt":  "2025-02-09T01:58:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: System.Buffers : BuffersExtensions.AsStream",
        "labels":  [
                       "api-suggestion",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102040",
        "createdAt":  "2024-05-09T07:17:22Z",
        "number":  102040,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:12:48Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=670159\r\nBuild error leg or test failing: WasmTestOnChrome-MT-System.Buffers.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/102029\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests\", \"Tests timed out. Killing driver service pid\"],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=670159\r\n**Error message validated:** `[System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests Tests timed out. Killing driver service pid`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 5/9/2024 7:17:48 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOihjstQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59U_oh",
                                           "createdAt":  "2024-05-09T13:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-09T13:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Og83",
                                           "createdAt":  "2024-05-17T14:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "last few [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-100675-merge-7b9737d2580e434cb9/WasmTestOnFirefox-MT-System.Buffers.Tests/1/console.b7e078e9.log?helixlogtype=result) [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-7918b4b30eb3431ea0/WasmTestOnChrome-MT-System.Buffers.Tests/1/console.73413c74.log?helixlogtype=result) are caused by OOM\r\n```\r\n[17:15:33] info: [FAIL] System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(pool: ConfigurableArrayPool`1 { })\r\n[17:15:33] info: System.OutOfMemoryException : Out of memory\r\n[17:15:33] info:    at System.Buffers.ConfigurableArrayPool`1.Bucket[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent()\r\n[17:15:33] info:    at System.Buffers.ConfigurableArrayPool`1[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent(Int32 minimumLength)\r\n[17:15:33] info:    at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(ArrayPool`1 pool) in /_/src/libraries/System.Runtime/tests/System.Buffers.Tests/ArrayPool/UnitTests.cs:line 551\r\n[17:15:33] info:    at System.Object.InvokeStub_ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(Object , Span`1 )\r\n[17:15:33] info:    at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
                                           "updatedAt":  "2024-05-17T14:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KGOfk",
                                           "createdAt":  "2024-08-29T07:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Looks like https://github.com/dotnet/runtime/pull/105246 fixed it\r\n\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|",
                                           "updatedAt":  "2024-08-29T07:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KGOy1",
                                           "createdAt":  "2024-08-29T07:21:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Sorry, it\u0027s `disabled-test`, reopening",
                                           "updatedAt":  "2024-08-29T07:21:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Buffers.Tests timeout on wasm MT",
        "labels":  [
                       "arch-wasm",
                       "area-System.Buffers",
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114451",
        "createdAt":  "2025-04-09T17:18:32Z",
        "number":  114451,
        "author":  "grbell-ms",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBHe4Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2025-04-09T20:38:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Juhasz",
                                            "createdAt":  "2025-04-09T21:19:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2025-04-09T21:36:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2025-04-11T16:08:20Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-23T08:47:39Z",
        "body":  "### Background and motivation\n\n`SequenceReader` has methods that take a `ReadOnlySpan` of delimiter values and advances/reads until finding one of those values. With `SearchValues` addition in .NET 8, a new set of overloads is a natural addition. They should be more performant than using the existing overloads while being no more complicated for developers to use (and even easier than using `AdvancePastAny(T value0, T value1, T value2, T value3)`).\n\n\n\n### API Proposal\n\n```csharp\nnamespace System.Buffers;\n\npublic ref struct SequenceReader\u003cT\u003e\n{\n    public bool TryAdvanceToAny(SearchValues\u003cT\u003e delimiters, bool advancePastDelimiter = true);\n    public long AdvancePastAny(SearchValues\u003cT\u003e values);\n    public bool TryReadToAny(out ReadOnlySequence\u003cT\u003e sequence, SearchValues\u003cT\u003e delimiters, bool advancePastDelimiter = true);\n    public bool TryReadToAny(out ReadOnlySpan\u003cT\u003e span, SearchValues\u003cT\u003e delimiters, bool advancePastDelimiter = true);\n}\n```\n\n\n### API Usage\n\n```csharp\nvar newlines = SearchValues.Create(\"\\r\\n\");\nvar sequenceReader = new SequenceReader(buffer);\nsequenceReader.TryReadToAny(out ReadOnlySequence\u003cT\u003e line, newlines, false);\nsequenceReader.AdvancePastAny(newlines);\n```\n\n\n### Alternative Designs\nWe could also add extension methods for `SequenceReader\u003cchar\u003e` and `SearchValues\u003cstring\u003e`.\n```csharp\nnamespace System.Buffers;\n\npublic static class SequenceReaderExtensions\n{\n    public static bool TryAdvanceToAny(this SequenceReader\u003cchar\u003e reader, SearchValues\u003cstring\u003e delimiters, bool advancePastDelimiter = true);\n    public static long AdvancePastAny(this SequenceReader\u003cchar\u003e reader, SearchValues\u003cstring\u003e values);\n    public static bool TryReadToAny(this SequenceReader\u003cchar\u003e reader, out ReadOnlySequence\u003cchar\u003e sequence, SearchValues\u003cstring\u003e delimiters, bool advancePastDelimiter = true);\n    public static bool TryReadToAny(this SequenceReader\u003cchar\u003e reader, out ReadOnlySpan\u003cchar\u003e span, SearchValues\u003cstring\u003e delimiters, bool advancePastDelimiter = true);\n}\n```\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqdDeTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mUreH",
                                           "createdAt":  "2025-04-09T17:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T17:18:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pwbSQ",
                                           "createdAt":  "2025-05-02T20:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grbell-ms",
                                           "body":  "Added the possibility of extension methods for `SequenceReader\u003cchar\u003e` and `SearchValues\u003cstring\u003e`.",
                                           "updatedAt":  "2025-05-02T20:20:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p0N5M",
                                           "createdAt":  "2025-05-04T06:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERZJDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "grbell-ms",
                                                                               "createdAt":  "2025-05-08T21:17:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The generic overloads sound reasonable.\n\nI would hold off on `SearchValues\u003cstring\u003e` overloads until there\u0027s a demonstrated need here since you can\u0027t implement those efficiently without support from SearchValues internals (can\u0027t search across multiple segments without copying the whole sequence into a single buffer).",
                                           "updatedAt":  "2025-05-04T06:33:38Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add SearchValues Overloads to SequenceReader",
        "labels":  [
                       "api-suggestion",
                       "area-System.Buffers"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116414",
        "createdAt":  "2025-06-08T15:36:00Z",
        "number":  116414,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T06:47:00Z",
        "body":  "### Background and motivation\n\nI have needed to \\*peek* numbers a few times in differing endianness on a SequenceReader. Currently only TryReadLittleEndian and TryReadBigEndian are defined. This proposal aims to add their peeking counterparts.\n\nI\u0027ve had these extension methods defined privately for quite some time now; they\u0027re just copies of the TryRead implementations without Advance being called.\nhttps://gist.github.com/NinoFloris/616170c620607d302d9e7626f9195a33\n\nAs there are a few other SequenceReader API proposals awaiting review it seems timely and efficient to propose these apis to be moved into the box as well.\n\n### API Proposal\n\n```csharp\nnamespace System.Buffers;\n\npublic partial static class SequenceReaderExtensions\n{\n    public static bool TryPeekLittleEndian(ref this SequenceReader\u003cbyte\u003e reader, out short value);\n    public static bool TryPeekLittleEndian(ref this SequenceReader\u003cbyte\u003e reader, out int value);\n    public static bool TryPeekLittleEndian(ref this SequenceReader\u003cbyte\u003e reader, out long value);\n\n    public static bool TryPeekBigEndian(ref this SequenceReader\u003cbyte\u003e reader, out short value);\n    public static bool TryPeekBigEndian(ref this SequenceReader\u003cbyte\u003e reader, out int value);\n    public static bool TryPeekBigEndian(ref this SequenceReader\u003cbyte\u003e reader, out long value);\n}\n```\n\n\n### API Usage\n\n```csharp\nvar reader = new SequenceReader(...);\n\nif (reader.TryPeekBigEndian(out var length)) // network data\n{\n    // Leave the reader at the error position.\n    if (length \u003c -1)\n        throw new InvalidOperationException(\"Unexpected length\");\n\n    // Sentinel value does not need to go through full value reading, e.g. it represents absent value.\n    if (length is -1)\n    {\n        reader.Advance(sizeof(int));\n        return default(T);\n    }\n\n    // ReadValue assumes it can read its own length again.\n    return ReadValue(reader);\n}\n\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuSMCJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wFJ5A",
                                           "createdAt":  "2025-06-08T15:36:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-08T15:36:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60UCLL",
                                           "createdAt":  "2025-07-01T18:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "I believe these are reasonable api additions, could somebody take a look? @jeffhandley maybe?",
                                           "updatedAt":  "2025-07-01T18:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65IwIl",
                                           "createdAt":  "2025-07-23T06:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Seems OK to me. @tannergooding, any objections on this or is this worthy of marking as https://github.com/dotnet/runtime/labels/api-ready-for-review and https://github.com/dotnet/runtime/labels/help%20wanted?",
                                           "updatedAt":  "2025-07-23T06:46:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: SequenceReaderExtensions.{TryPeekLittleEndian, TryPeekBigEndian} extensions",
        "labels":  [
                       "api-suggestion",
                       "area-System.Buffers"
                   ]
    }
]
