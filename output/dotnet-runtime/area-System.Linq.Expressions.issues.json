[
    {
        "url":  "https://github.com/dotnet/runtime/issues/17973",
        "createdAt":  "2016-07-31T04:43:29Z",
        "number":  17973,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEGFgA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2016-09-28T03:10:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2016-11-30T15:57:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qwertie",
                                            "createdAt":  "2025-06-17T14:47:57Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-10T08:48:13Z",
        "body":  "Is it correct that compiled lambda expressions on UWP aren\u0027t really compiled and are instead interpreted? If so does that mean that on UWP and other AOT platforms like Xamarin/Unity with no support for IL emit it is faster to use MemberInfo and ConstructorInfo?\n\nRelated: https://github.com/JamesNK/Newtonsoft.Json/issues/968\n\n---\n\nIf normal reflection is faster on AOT platforms I would like to know is if there is a way at runtime to discover that IL emit isn\u0027t supported?\n\nA way to discover this capability at runtime will allow libraries to use compiled lambda expressions to boost on platforms it is available, and to fallback to traditional reflection on platforms where it isn\u0027t, while still using a single netstandard assembly.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhE5ikA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzNjc5Mzg0OQ==",
                                           "createdAt":  "2016-08-02T04:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "cc @VSadov \n\nThat is correct for UWP the expressions are interpreted and not compiled at runtime. \n",
                                           "updatedAt":  "2016-08-02T04:28:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0MzY2NTIxNw==",
                                           "createdAt":  "2016-08-31T05:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clairernovotny",
                                           "body":  "@JamesNK I know you\u0027ll hate this answer, but cross-compiling can ensure that each platform gets the most optimized version for it. With `project.json` and whatever\u0027s coming with the 1.1 tooling transitive dependencies will resolve correctly and ensure that the best version of your library wind up in the runtime dir.\n",
                                           "updatedAt":  "2016-08-31T05:50:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NDgwNjUzNQ==",
                                           "createdAt":  "2016-09-05T20:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This needs to be a runtime light up API that is netstandard. The project N toolchain and the JIT can treat it as an intrinsic and eliminate it at runtime.\n",
                                           "updatedAt":  "2016-09-05T20:13:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NDgyOTUzNw==",
                                           "createdAt":  "2016-09-06T01:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjracca",
                                           "body":  "+1\n\nThis is a HUGE performance issue for us!\n",
                                           "updatedAt":  "2016-09-06T01:28:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NDgzNTIxNg==",
                                           "createdAt":  "2016-09-06T02:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "\u003e I know you\u0027ll hate this answer, but cross-compiling can ensure that each platform gets the most optimized version for it.\n\nThat would require knowing every platform that doesn\u0027t support compiling expressions and having a different version in the package for each of those platforms, UWP, iOS, Android, Unity, etc\n\nAnd as new platforms come out they would get the slow netstandard binary until someone explicitly adds a different version in the package.\n\nOr we could have a simple property that library authors can use to adapt the netstandard assembly to the platform at runtime. One assembly that works for now and forever.\n",
                                           "updatedAt":  "2016-09-06T02:27:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NDgzOTY0Mw==",
                                           "createdAt":  "2016-09-06T03:06:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Agree - hardcoding the list of platforms is fragile. It does not work well for new platforms. Also, the answer can differ for given platform over time; or both interpreter-only and compiled System.Linq.Expressions can be available for some platforms.\n\nHaving an API that returns whether expressions are compiled sounds pretty reasonable.\n",
                                           "updatedAt":  "2016-09-06T03:06:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzY0OTk2NA==",
                                           "createdAt":  "2016-11-29T18:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Since now any expression can be asked to be compiled for interpretation, the API would need to take a compiled expression. \r\nWe generally cannot tell if a delegate is a compiled expression (could be not related to expressions at all), but we can recognize interpreted expression delegates.\r\n\r\nWould something like the following work for you?\r\n\r\n```cs\r\n/// returns true if d is a delegate that represents an interpreted expression\r\nbool IsInterpretedExpression(Delegate d)\r\n```\r\n \r\n",
                                           "updatedAt":  "2016-11-29T18:08:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzY1NzYzMA==",
                                           "createdAt":  "2016-11-29T18:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW6jGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Yortw",
                                                                               "createdAt":  "2016-11-29T21:02:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qwertie",
                                                                               "createdAt":  "2025-06-17T14:48:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "I read this as more an environment query; code being able to know if calling Compile(false) is going to result in interpretation or not. ",
                                           "updatedAt":  "2016-11-29T18:36:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzgxMjk0OQ==",
                                           "createdAt":  "2016-11-30T08:30:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Yes, I see it as an environment query.\r\n\r\n`IsInterpretedExpression` might be useful for some people but I\u0027m interested in discovering whether an environment supports compiled expressions before I choose to use expressions (or not, depending on the environment query result).",
                                           "updatedAt":  "2016-11-30T08:30:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzgxNDI4Nw==",
                                           "createdAt":  "2016-11-30T08:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGBFBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-30T15:57:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Yortw",
                                                                               "createdAt":  "2017-01-14T08:24:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I read this as more an environment query; code being able to know if calling Compile(false) is going to result in interpretation or not.\r\n\r\nYes. It needs to be before not after. Framework code would likely switch logic altogether and use reflection invoke vs expression tree compilation.\r\n",
                                           "updatedAt":  "2016-11-30T08:37:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzQ1NDI5Nw==",
                                           "createdAt":  "2016-12-15T21:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stratospheres",
                                           "body":  "Man, this really burned me - I simply ported some really well working code from an \"old\" style codebase to UWP and this absolutely hammered me... slowed down by roughly 20x. \r\n\r\n+1 to fixing this... please.",
                                           "updatedAt":  "2016-12-15T21:49:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MDIxMDYwMQ==",
                                           "createdAt":  "2017-01-03T20:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Another person being hurt by this - https://github.com/JamesNK/Newtonsoft.Json/issues/968#issuecomment-270204118",
                                           "updatedAt":  "2017-01-03T20:06:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzE0MzUyOA==",
                                           "createdAt":  "2017-02-03T01:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "Should such a property live in S.L.Expressions or perhaps elsewhere?\r\n\r\nAm I right in thinking that a complementary `CanInterpret` would also be true now, and hence have no value?",
                                           "updatedAt":  "2017-02-03T01:55:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzE0NDk2OQ==",
                                           "createdAt":  "2017-02-03T02:05:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Should such a property live in S.L.Expressions \r\n\r\nI think so.",
                                           "updatedAt":  "2017-02-03T02:05:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzE1NTkwMw==",
                                           "createdAt":  "2017-02-03T03:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "It would be simple enough to add:\r\n\r\n```C#\r\nnamespace System.Linq.Expressions\r\n{\r\n    public abstract class LambdaExpression : Expression\r\n    {\r\n        public static CanCompileToIL { get; }\r\n    }\r\n}\r\n```\r\n(Assuming I\u0027m correct above that there couldn\u0027t be a case where `CanInterpret` would also be wanted).\r\n\r\nBut could a similar question, which boils down to \"is `Reflection.Emit` available?\" going to have similar implications elsewhere so that other assemblies would want such a property, in which case maybe it should live in S.Reflection.\r\n",
                                           "updatedAt":  "2017-02-03T03:31:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzE1NzA2Ng==",
                                           "createdAt":  "2017-02-03T03:41:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e is `Reflection.Emit` available?\r\n\r\nThis is not the same question. \r\n\r\nConsider some of the following situations:\r\n\r\n- `Reflection.Emit` is available, but it is implemented using IL interpreter\r\n- `Reflection.Emit` is available, but the version of `System.Linq.Expression` used is the interpreter only version\r\n- `Reflection.Emit` is not available, but `System.Linq.Expression` uses some other fast underlying execution system",
                                           "updatedAt":  "2017-02-03T03:41:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzIwNzE5Mg==",
                                           "createdAt":  "2017-02-03T09:52:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "Cool. That\u0027s enough variance to argue well that the property should live in S.L.E. Shall I open the above as a separate API proposal?",
                                           "updatedAt":  "2017-02-03T09:52:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzMzMDE1Mg==",
                                           "createdAt":  "2017-02-03T18:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Yes, this needs to live in S.L.E.\r\nI still believe there is a value in \r\n\r\n```cs\r\n/// returns true if d is a delegate that represents an interpreted expression\r\nbool IsInterpretedExpression(Delegate d)\r\n```\r\n\r\nWe already need to detect interpreted lambdas inside the interpreter itself. Would not be surprised if someone else needs this.\r\n\r\nInterestingly, CanCompileToIL could actually be implemented in terms of IsInterpretedExpression - compile and cache trivial delegate and then just ask if it is interpreted or not.\r\nOf course there are more efficient solutions :-)\r\n",
                                           "updatedAt":  "2017-02-03T18:52:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzMzMzEwNg==",
                                           "createdAt":  "2017-02-03T19:03:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "\u003e We already need to detect interpreted lambdas inside the interpreter itself.\r\n\r\nWe have `IsInterpretedFrame` but don\u0027t seem to use it. It\u0027s one of those bits of dead code that I can be wary of deleting because it certainly looks useful! Am I missing a use or another mechanism for same, or is this just dead? In any case it could be the basis of that.\r\n\r\nI\u0027m inclined to think of `LambdaExpression` as the most natural declaring class, as the place where expressions meet delegates. What think you?",
                                           "updatedAt":  "2017-02-03T19:03:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODAxMDM3MQ==",
                                           "createdAt":  "2017-06-13T05:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCycVWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Yortw",
                                                                               "createdAt":  "2017-06-13T05:34:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChristianPejrup",
                                                                               "createdAt":  "2023-01-11T09:03:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Are we going to get this API anytime soon?",
                                           "updatedAt":  "2017-06-13T05:26:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODMxNjUzMQ==",
                                           "createdAt":  "2017-06-14T04:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "@weshaggard , This is along the same lines as the \"capabilities\" api we\u0027ve talked about in the past. Can you share your thoughts?",
                                           "updatedAt":  "2017-06-14T04:28:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODQ4MDUyMQ==",
                                           "createdAt":  "2017-06-14T16:10:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAKWugg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2017-06-14T16:18:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003e @weshaggard , This is along the same lines as the \"capabilities\" api we\u0027ve talked about in the past. Can you share your thoughts?\r\n\r\nYes this is a specific instance of a capability API which I think is best solved with the suggestions provided by @VSadov and @JonHanna in this issue by exposing an API directly in System.Linq.Expressions. \r\n\r\n\u003eAre we going to get this API anytime soon?\r\n\r\nIt needs a formal API proposal and the owner @VSadov to drive it through the process. Given this will be a new API it will only initially be added to netcoreapp and uap, as it cannot be added to netstandard yet, so its usage will be limited for a while. For that reason to solve this in the short term the best answer is to cross-compile as @onovotny suggested. ",
                                           "updatedAt":  "2017-06-14T16:10:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU0NzUyMw==",
                                           "createdAt":  "2017-06-14T20:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "You can\u0027t cross compile for CoreRT.",
                                           "updatedAt":  "2017-06-14T20:23:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU1MTc3OA==",
                                           "createdAt":  "2017-06-14T20:41:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003eYou can\u0027t cross compile for CoreRT.\r\n\r\nWhy not? Lets not derail this issue but it is my understanding corert would be represented with its own RID. See https://github.com/dotnet/corefx/pull/14142. ",
                                           "updatedAt":  "2017-06-14T20:41:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU1MzQ2NA==",
                                           "createdAt":  "2017-06-14T20:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "We don\u0027t want upstack libraries that wouldn\u0027t have to cross compile to have to cross compile just for this do we?",
                                           "updatedAt":  "2017-06-14T20:47:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU1NDc1MQ==",
                                           "createdAt":  "2017-06-14T20:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003eWe don\u0027t want upstack libraries that wouldn\u0027t have to cross compile to have to cross compile just for this do we?\r\n\r\nIdeally no, but if they need to optimize for a the corert platform specifically then they would have too. For this case assuming they target netcoreapp and we expose this new API there they wouldn\u0027t need to cross-compile for corert, they could just have a netcoreapp asset and do the runtime detection based on this new API. ",
                                           "updatedAt":  "2017-06-14T20:52:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU1NTI2Ng==",
                                           "createdAt":  "2017-06-14T20:54:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e We don\u0027t want upstack libraries that wouldn\u0027t have to cross compile to have to cross compile just for this do we?\r\n\r\nThe standard way to avoid cross compilation in these cases is to do light-up using reflection. Look for the (capability) API and use it if it exists. Otherwise, use a fallback logic that is not as good.",
                                           "updatedAt":  "2017-06-14T20:54:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODYyNzY0OQ==",
                                           "createdAt":  "2017-06-15T04:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e The standard way to avoid cross compilation in these cases is to do light-up using reflection. Look for the (capability) API and use it if it exists. Otherwise, use a fallback logic that is not as good.\r\n\r\nPerfect! What do we look for? This new API that\u0027s going to be added?",
                                           "updatedAt":  "2017-06-15T04:47:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODYyOTQ3NQ==",
                                           "createdAt":  "2017-06-15T05:03:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "@weshaggard do we have an issue tracking an API to detect whether the capability to emit IL is available or not?",
                                           "updatedAt":  "2017-06-15T05:03:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODc4MzI4Ng==",
                                           "createdAt":  "2017-06-15T15:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003e@weshaggard do we have an issue tracking an API to detect whether the capability to emit IL is available or not?\r\n\r\nNo and there aren\u0027t currently any plans to do that as @jkotas called out there isn\u0027t a great way to answer that question. The API to look for would be whatever API we add for this issue. ",
                                           "updatedAt":  "2017-06-15T15:59:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODc4NDA2Mw==",
                                           "createdAt":  "2017-06-15T16:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@VSadov can we take this to the next level?",
                                           "updatedAt":  "2017-06-15T16:00:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NzkzNTY3Mw==",
                                           "createdAt":  "2018-05-10T02:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yortw",
                                           "body":  "Hi,\r\nI\u0027ve looked at the linked issues above and as far as I can tell we\u0027re still missing an appropriate API for Json.Net to check? Or do we have it now, and if so, has Json.Net been updated?\r\n\r\nWe are still being burned heavily by this but I fear any fix is now too late for us. Our UWP code is running on (enterprise) W10M devices and so any new API likely to require an OS release we will never get (for example we cannot get FCU because it was never released for mobile). Please correct me if I\u0027m wrong and this might be shippable in a new framework version that works on older OS\u0027?\r\n\r\nI suspect our only option now is to make a private fork of Json.Net and modify it to force an alternate strategy for the reflection/expression based code.  We\u0027ll have to decide internally whether that pain would be worth it or not, given we are looking at moving to Xamarin.Android since WM10 is basically dead. Unfortunately we have a large number of deployed devices we need to continue supporting for several years so it\u0027s not simple either way. I understand limited resources and other priorities, but for us personally it is a shame this didn\u0027t get resolved quicker.\r\n\r\nDespite the probability a fix would do us no good, I think it would still be a good idea to resolve this in both .Net/UWP and Json.Net for other platforms.\r\n\r\nThanks to everyone who has participated in trying to get this sorted.",
                                           "updatedAt":  "2018-05-10T02:48:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PAD3Z",
                                           "createdAt":  "2022-11-23T17:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpCJFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leandromoh",
                                                                               "createdAt":  "2023-11-08T11:41:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2024-07-09T19:50:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JoshClose",
                                           "body":  "Is this still an issue with the .NET 7 AOT stuff? Are compiled lambda expressions in a code generator still interpreted?",
                                           "updatedAt":  "2022-11-23T17:19:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PAHG9",
                                           "createdAt":  "2022-11-23T17:30:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Are compiled lambda expressions in a code generator still interpreted?\r\n\r\nYes, lambda expressions are still interpreted with .NET 7 native aot. Native aot does not have a JIT so it is by design.\r\n\r\nLibraries that want to run great on native AOT should avoid lambda expressions.",
                                           "updatedAt":  "2022-11-23T17:30:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PARuM",
                                           "createdAt":  "2022-11-23T18:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAWEmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xiety",
                                                                               "createdAt":  "2023-07-11T10:14:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JoshClose",
                                           "body":  "Thanks! ",
                                           "updatedAt":  "2022-11-23T18:11:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PUhqt",
                                           "createdAt":  "2022-11-29T14:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "flobernd",
                                           "body":  "Is the fallback interpreter really that slow, that switching to reflection (which isn\u0027t the fastest as well) would speed up things significantly in the majority of cases?",
                                           "updatedAt":  "2022-11-29T14:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PUmMa",
                                           "createdAt":  "2022-11-29T15:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNARRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "flobernd",
                                                                               "createdAt":  "2022-11-29T15:48:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leandromoh",
                                                                               "createdAt":  "2023-11-19T13:30:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Expression tree interpreter uses reflection to invoke methods. It means that expression tree is always slower than reflection when everything is equal. The slowdown is proportional to the amount of interpreted code. ",
                                           "updatedAt":  "2022-11-29T15:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PWb16",
                                           "createdAt":  "2022-11-29T20:45:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yortw",
                                           "body":  "I just wanted to point out, as in the referenced in the Newtonsoft issue linked in the OP, it\u0027s not just that \u0027compiled expressions\u0027 fallback to reflection, but that the internal reflection mechanisms in the runtime used by AOT UWP appear to be \"worse\" for performance than say the old Xamarin ones, due to less internal caching.\r\n\r\nSo you don\u0027t get the perf benefit of \u0027compiled expressions\u0027, but you also get worse performance than .Net on desktop/Xamarin even when using reflection (apples to apples comparison). Or at least that was my experience, and I was told the lack of internal caching of reflection types/data was to blame.",
                                           "updatedAt":  "2022-11-29T20:45:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PWutQ",
                                           "createdAt":  "2022-11-29T21:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCw29sA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KrzysFR",
                                                                               "createdAt":  "2022-12-07T15:30:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "flobernd",
                                           "body":  "Thanks for clarifying this. I guess I have to do some tests myself as I\u0027m mainly interested in NET7 AOT and not so mich in the Mono or Xamarin stacks.\n\nI\u0027m not quite sure what do to when results are unpleasant. Code generation is not a proper alternative in many situations.",
                                           "updatedAt":  "2022-11-29T21:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ETmKQ",
                                           "createdAt":  "2024-07-10T07:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "I was expecting an exception when `Compile` is called for expression in AOTed code, and I was very surprised when it worked.\r\nBut I am even more surprised to discover this issue =)\r\n By the way, AOT Analyzer does not complain about `Compile()` calls. Should not it?\r\nEspeshially when it returns:\r\n```\r\nIsDynamicCodeSupported = False\r\nIsDynamicCodeCompiled = False\r\n```",
                                           "updatedAt":  "2024-07-10T08:48:13Z"
                                       }
                                   ],
                         "totalCount":  40
                     },
        "title":  "Compiled Lambda Expressions and AOT",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/18802",
        "createdAt":  "2016-09-30T18:01:00Z",
        "number":  18802,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-31T18:39:04Z",
        "body":  "We had some recent test changes that would not be runnable under AOT for sure and nothing was broken. That proves that we do not run Linq.Expressions with AOT.\n\nAlso, attempts to run tests with AOT wee not very successful.\n\nWe need to make sure the tests are runnable with AOT. \n\nThat includes figuring out how to exclude scenarios that are known not AOT compatible - like usage of Reflection.Emit in tests. Most likely introduce some `#if` in the code and, parameterise the csproj file to not take dependencies on stuff like Ref.Emit when targeting AOT.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSYJv4w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MDkxMDg0MQ==",
                                           "createdAt":  "2016-10-01T12:50:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hughbe",
                                           "body":  "You mentioned ref-emit not being supported in AOT. Once we get the AOT infrastructure up and running, I can try to convert classes created using ref-emit into IL - also would be a good opportunity for me to learn IL!\n",
                                           "updatedAt":  "2016-10-01T12:50:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NDQ5Njg4Ng==",
                                           "createdAt":  "2019-10-21T12:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "This issue is tracking running the interpreted mode which is currently not enabled: https://github.com/dotnet/corefx/blob/master/src/System.Linq.Expressions/src/System.Linq.Expressions.csproj#L10",
                                           "updatedAt":  "2019-10-21T12:43:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jgm_j",
                                           "createdAt":  "2022-08-31T18:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DiviyamPathak",
                                           "body":  "Is this still up work? ",
                                           "updatedAt":  "2022-08-31T18:39:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Test Linq.Expression interpreted mode in CI",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "test-bug",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19943",
        "createdAt":  "2017-01-17T16:15:57Z",
        "number":  19943,
        "author":  "Pzixel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAP2R7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "apaka",
                                            "createdAt":  "2017-01-22T21:44:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zhigalin",
                                            "createdAt":  "2017-11-27T14:03:22Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-01-06T11:48:59Z",
        "body":  "I\u0027m porting some library from full .Net to .Net Standard and faced an issue that `LambdaExpression` is missing subject method. [See](http://stackoverflow.com/questions/41520319/alternatives-of-compiletomethod-in-net-standard) question on SO.\r\n\r\nAfter some research I found that problem is that `LambdaCompiler` is missing one overload ([see referencesource](https://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Compiler/LambdaCompiler.cs,122))\r\n\r\nMy question is if it\u0027s done intentionally (so API changed relative to full .Net) or it\u0027s just a mistake? If the latter I can create a pull request, because I don\u0027t see anything can break things down: the only difference with other overloads is that `MethodBuilder` is passing as parameter instead of creating it as local variable. Thus, there is no problem with implementation, then question is if we want to have following API? We had it for several years and I don\u0027t see why it should be removed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmVwY_Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzIxNzMzNg==",
                                           "createdAt":  "2017-01-17T16:20:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pzixel",
                                           "body":  "Ok, I found that it\u0027s done intentionally because of `FEATURE_COMPILE_TO_METHODBUILDER` flag. Where can I read why this feature is excluded from `.Net Standard`? Before we had very useful feature which alloved us to write class methods using modern Expressions, but now we are forced to use ol\u0027 terrible `Emit` manually.",
                                           "updatedAt":  "2017-01-17T16:20:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTkzNDY4Mw==",
                                           "createdAt":  "2017-01-29T18:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "cc: @bartdesmet @VSadov ",
                                           "updatedAt":  "2017-01-29T18:27:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTkzNDkwNA==",
                                           "createdAt":  "2017-01-29T18:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "See also: dotnet/runtime#19107",
                                           "updatedAt":  "2017-01-29T18:30:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTkzNjA4MQ==",
                                           "createdAt":  "2017-01-29T18:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e can I read why this feature is excluded from .Net Standard\r\n\r\nIt was excluded because of layering. Reflection.Emit is not in .Net Standard, so it means that public methods that take Reflection.Emit types like MethodBuilder cannot be in .Net Standard either.",
                                           "updatedAt":  "2017-01-29T18:47:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTk0MDkxNw==",
                                           "createdAt":  "2017-01-29T19:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pzixel",
                                           "body":  "@jkotas I see... That makes sense. I think this may be closed, https://github.com/dotnet/corefx/issues/13050 is covering this issue.",
                                           "updatedAt":  "2017-01-29T19:52:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODUwNDkyMQ==",
                                           "createdAt":  "2017-06-14T17:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pzixel",
                                           "body":  "It\u0027s labeled as 2.0, but dotnet/runtime#19107 is still inactive. So I think it worth to reopen this.",
                                           "updatedAt":  "2017-06-14T17:38:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDQ5OTA1NQ==",
                                           "createdAt":  "2020-07-06T22:38:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/19107.",
                                           "updatedAt":  "2020-07-06T22:38:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZXBj9",
                                           "createdAt":  "2025-01-06T11:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pzixel",
                                           "body":  "Ping",
                                           "updatedAt":  "2025-01-06T11:48:48Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "FEATURE_COMPILE_TO_METHODBUILDER compiler constant clarification",
        "labels":  [
                       "question",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/22025",
        "createdAt":  "2017-05-29T12:36:28Z",
        "number":  22025,
        "author":  "vermorel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-23T14:18:37Z",
        "body":  "I suggest to add a new overload `LamdbaExpression.CompileToMethod(DynamicMethod)` to supplement the existing method [LamdbaExpression.CompileToMethod() method](https://msdn.microsoft.com/en-us/library/system.linq.expressions.lambdaexpression.compiletomethod(v=vs.110).aspx).\r\n\r\nIndeed, the [extended constructor of DynamicMethod](https://msdn.microsoft.com/en-us/library/0d9fd769(v=vs.110).aspx) offers two important options:\r\n\r\n* the target module\r\n* a `skipVisibility` flag\r\n\r\nthat are very convoluted to replicate from from the `LamdbaExpression.CompileToMethod()` angle.\r\n\r\nThis extra overload would also make it easier blend `DynamicMethod`s and `Expression`s in general.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUUzY0w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDY1NTY4Mg==",
                                           "createdAt":  "2017-05-29T12:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "`LamdbaExpression.CompileToMethod()` does not create a new method, it provides the IL for an existing `MethodBuilder`. I think to achieve what you want while keeping the interface consistent, an overload of `CompileToMethod()` that takes `DynamicMethod` instead of `MethodBuilder` could be added.",
                                           "updatedAt":  "2017-05-29T12:59:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDY2MjcwOA==",
                                           "createdAt":  "2017-05-29T13:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vermorel",
                                           "body":  "Yes, agreed, the overload `LamdbaExpression.CompileToMethod(DynamicMethod)` would be superior indeed.",
                                           "updatedAt":  "2017-05-29T13:35:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQxNTMxNg==",
                                           "createdAt":  "2021-02-28T08:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ackava",
                                           "body":  "@vermorel without `CompileToMethod`, we cannot save the generated IL, and it cannot be cached, compiling, saving and executing assembly provides performance, otherwise compiling and executing will not give any great benefit.",
                                           "updatedAt":  "2021-02-28T08:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RTD1X",
                                           "createdAt":  "2022-12-23T13:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jpactor",
                                           "body":  "Is CompileToMethod ever expected to get re-enabled in net6+? It looks like all the code is in place but it was disabled behind a feature flag. And I\u0027m not sure, but it looks like the overall flow is the same whether it targets a MethodBuilder or not.",
                                           "updatedAt":  "2022-12-23T13:24:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RTL-M",
                                           "createdAt":  "2022-12-23T14:10:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e Is CompileToMethod ever expected to get re-enabled in net6+? It looks like all the code is in place but it was disabled behind a feature flag. And I\u0027m not sure, but it looks like the overall flow is the same whether it targets a MethodBuilder or not.\n\nI think https://github.com/dotnet/runtime/issues/20270 has your answer and it\u0027s unfortunately \"no\".",
                                           "updatedAt":  "2022-12-23T14:10:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RTNjT",
                                           "createdAt":  "2022-12-23T14:18:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ackava",
                                           "body":  "@jpactor @svick I eventually created my own Expression library, it is part of a JavaScript engine I have written in .NET Standard 2.0, Alternative of `CompileToMethod` exists as `CompileToStaticMethod` in `YantraJS.ExpressionCompiler` available at https://github.com/yantrajs/yantra/wiki/Expression-Compiler \r\n\r\nhttps://github.com/yantrajs/yantra",
                                           "updatedAt":  "2022-12-23T14:18:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Extra \u0027LambdaExpression.CompileToMethod(DynamicMethod)\u0027 overload",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/23540",
        "createdAt":  "2017-09-13T14:06:41Z",
        "number":  23540,
        "author":  "sdebruyn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-15T15:11:19Z",
        "body":  "## Use case\r\n\r\nI\u0027m not directly using .NET Core in this use case, but I\u0027m working with UWP (which uses this underneath). \r\n**Functional**: search for a string value in all the properties of an object\r\n**Technical**: I have a compiled (so in .NET Core, that means _interpreted_) expression that loops through an object and retrieves all its string properties. It then does `.Contains()` on them with a value.\r\n\r\n## What is happening\r\n\r\nThe code on the referenced line (2305) does the following:\r\n\r\n1. Retrieve the value of a property (`get`)\r\n1. Verify if the property if writable\r\n1. If so, write the retrieved value to the property\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/LightCompiler.cs#L2305\r\n\r\n## What I expected\r\n\r\nI didn\u0027t expect the expression to call the setter of my property. This has implications and triggers a lot of other code that is not related to retrieving the property.\r\n\r\n## Workaround\r\n\r\nImmediately return the setter if the previous value equals the new value.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHt6xRw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyOTE4NjYwMg==",
                                           "createdAt":  "2017-09-13T14:31:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "Can you give an example of an expression that does that writeback when it shouldn\u0027t?",
                                           "updatedAt":  "2017-09-13T15:24:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MzI1NjE1Ng==",
                                           "createdAt":  "2018-02-05T23:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OmarTawfik",
                                           "body":  "@SamuelDebruyn can you please provide that repro expression?",
                                           "updatedAt":  "2018-02-05T23:25:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzkxMDg1NQ==",
                                           "createdAt":  "2019-08-03T09:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdebruyn",
                                           "body":  "Something like this:\r\n\r\n```\r\nforeach (var property in _disabledProperties)\r\n            {\r\n                var orderStatus = property.Key;\r\n                if (!property.Value.Contains(() =\u003e order.SomeProperty))\r\n                    property.Value.Add(() =\u003e order.SomeProperty);\r\n                \r\n            }\r\n```\r\n\r\nSignature of `_disabledProperties`: `internal Dictionary\u003cstring, List\u003cExpression\u003cFunc\u003cobject\u003e\u003e\u003e\u003e _disabledProperties;`",
                                           "updatedAt":  "2019-08-03T09:36:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Getting a property in an interpreted expression always calls the setter with the retrieved value",
        "labels":  [
                       "bug",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26055",
        "createdAt":  "2018-05-02T21:57:19Z",
        "number":  26055,
        "author":  "tuespetre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-07T19:11:20Z",
        "body":  "If the `GetMethod` is non-public, `GetGetMethod()` will not return it, and a `NullReferenceException` can occur.\r\n\r\nhttps://github.com/dotnet/corefx/blob/ff7aca470c71e5bcc00f09147b1c009b3944863c/src/System.Linq.Expressions/src/System/Linq/Expressions/NewExpression.cs#L316\r\n\r\nI believe this should use `GetMethod` instead of `GetGetMethod()`. After all, you can pass in the `GetMethod` instead of the property at hand and there is no issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmYsyMg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NjI2OTk3Mw==",
                                           "createdAt":  "2018-05-03T11:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "If I understand it correctly, you\u0027re saying that the following code should not throw `NullReferenceException`, right?\r\n\r\n```c#\r\nclass C\r\n{\r\n    public C(int p) {}\r\n\r\n    private int P { get; }\r\n}\r\n\r\nvoid Main()\r\n{\r\n    Expression.New(\r\n        typeof(C).GetConstructors().Single(), new[] { Expression.Constant(42) },\r\n        new[] { typeof(C).GetProperty(\"P\", BindingFlags.Instance | BindingFlags.NonPublic) });\r\n}\r\n```\r\n\r\nThough I don\u0027t understand your suggested fix. The caller can indeed choose to pass in a `MethodInfo` for the non-public getter, but this issue happens when it doesn\u0027t do that. My suggested fix would be to use `GetGetMethod(nonPublic: true)` here.",
                                           "updatedAt":  "2018-05-03T11:53:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NjI5MDQ0NQ==",
                                           "createdAt":  "2018-05-03T13:12:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tuespetre",
                                           "body":  "@svick that is correct. I was just mentioning the ability to pass in the `MethodInfo` to show that we already have the ability to give the `NewExpression` a non-public getter. My suggested fix was using `GetMethod` instead of `GetGetMethod()`, and `GetMethod` calls into `GetGetMethod(nonPublic: true)` so it looks like we were on the same page but a different word 😉",
                                           "updatedAt":  "2018-05-03T13:12:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZizIy",
                                           "createdAt":  "2025-01-07T19:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tuespetre",
                                           "body":  "bump. while not critical, it is a \"mysterious\" bug that one can encounter when writing code around expressions.",
                                           "updatedAt":  "2025-01-07T19:11:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "NewExpression assumes the result of GetGetMethod will be non-null",
        "labels":  [
                       "enhancement",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26065",
        "createdAt":  "2018-05-03T18:18:42Z",
        "number":  26065,
        "author":  "tuespetre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-07T19:12:52Z",
        "body":  "https://github.com/dotnet/corefx/blob/5086f389296886774c9009c89d241055e5157c42/src/System.Linq.Expressions/src/System/Linq/Expressions/NewExpression.cs#L225-L228\r\n\r\n`NewExpression` does not allow for inherited members to be passed in for the `Members`. \r\n\r\nConsider the following snippet in C# interactive:\r\n\r\n```\r\nusing System.Linq.Expressions;\r\nclass mybaseclass { public mybaseclass(int value) =\u003e this.value = value; public int value { get; } }\r\nclass myderivedclass : mybaseclass { public myderivedclass(int value) : base(value) { } }\r\nvar ctor = typeof(myderivedclass).GetConstructors().Single();\r\nvar expr = Expression.New(ctor, new[] { Expression.Constant(1) }, new[] { typeof(mybaseclass).GetProperty(nameof(mybaseclass.value)) });\r\n```\r\n\r\nClearly the expression `new myderivedclass(1)` represents the construction of an instance where the first argument can later be read from the property `value`. This expression should be representable as a `NewExpression` and thus I propose that the restriction be relaxed to allow inherited members.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmYs7kQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZizuR",
                                           "createdAt":  "2025-01-07T19:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tuespetre",
                                           "body":  "bump",
                                           "updatedAt":  "2025-01-07T19:12:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "NewExpression should allow the use of inherited Members",
        "labels":  [
                       "enhancement",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77698",
        "createdAt":  "2019-01-17T17:32:00Z",
        "number":  77698,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGVLQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "newclaus",
                                            "createdAt":  "2022-01-25T04:44:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-12-29T19:12:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vijay-Nirmal",
                                            "createdAt":  "2023-01-02T09:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DL444",
                                            "createdAt":  "2025-07-09T12:27:38Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-09T14:00:36Z",
        "body":  "[jcouv summary:] requesting support for `await` in expression trees.\r\n\r\n---- \r\n@lillo42 commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161)\r\n\r\nI\u0027m studying C# 8 and new we have a new interface call ``IAsyncEnumerable`` and I was think maybe it\u0027s a good ideia create a new interface call ``IAsyncQueryable`` to be possible using ``await foreach`` async with ORM like EF or NHibernarte:\r\n\r\n```csharp\r\n\r\nIAsyncQueryable query = database.Where(...);\r\n\r\nawait foreach(var a in query) {\r\n...\r\n}\r\n```\r\n\r\nI was thinking ``IAsyncQueryable`` could be:\r\n```csharp\r\npublic interface IAsyncQueryable : IAsyncEnumerable\r\n{\r\n   Type ElementType { get; }\r\n    Expression Expression { get; }\r\n    IQueryProvider Provider { get; }\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IAsyncQueryable, IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\nor\r\n\r\n```csharp\r\n\r\npublic interface IAsyncQueryable : IQueryable, IAsyncEnumerable\r\n{\r\n\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IQueryable\u003cT\u003e, IAsyncQueryable,  IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n@Suchiman commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448587573)\r\n\r\nSince IQueryable is about composing a query rather than constructing an execution pipeline, it would probably make more sense to follow the current Approach (used by EF) of adding an extension like this\r\n```csharp\r\npublic static IAsyncEnumerable\u003cTSource\u003e AsAsyncEnumerable\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source)\r\n```\r\n\r\n---\r\n\r\n@quinmars commented on [Thu Dec 20 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448949021)\r\n\r\nThe async enumerable implementation is developed in the dotnet/reactive repo. And there actually is already an `IAsyncQueryable` interface:\r\n\r\nhttps://github.com/dotnet/reactive/blob/IxAsyncCSharp8/Ix.NET/Source/System.Linq.Async.Queryable/System/Linq/IAsyncQueryable.cs\r\n\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455242991)\r\n\r\ncc @stephentoub \r\n\r\n---\r\n\r\n@stephentoub commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455244515)\r\n\r\nWithout language support for awaits in expression trees, I don\u0027t think there\u0027s much that can or should be done here.\r\ncc: @cston, @jaredpar \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455251737)\r\n\r\nI agree. There is currently no plans to invest in our expression tree support at this time.\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455255954)\r\n\r\n@jaredpar should we move this issue to your repo you may track it for the future if anything change? \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455257999)\r\n\r\nEither way. This is one of those features that crosses our repositories so I\u0027m fine with it being here or there. \r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455259014)\r\n\r\nThanks @jaredpar I\u0027ll move it because corefx can support it if the it is decided from your side to support it. \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtfX1qw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyOTc3NDEwNDI=",
                                           "createdAt":  "2019-08-13T17:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e [jcouv summary:] requesting support for `await` in expression trees.\r\n\r\nI think that support for `await` in expression trees is a related, but orthogonal feature. The suggestion here is to be able to `await` the *result* of an expression-tree-based query, and that\u0027s useful even without the ability to use `await` inside the query.\r\n\r\nIn fact, while I understand why you\u0027d want to support `await` in query expressions (for `IAsyncEnumerable` queries) and also in expression trees (for general metaprogramming), I don\u0027t understand what would be the use of `await` inside expression-tree-based queries (using either syntax).\r\n\r\nThough that would likely make this a library-only feature, not a language feature.",
                                           "updatedAt":  "2019-08-13T17:38:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyOTc3NDEwNDY=",
                                           "createdAt":  "2019-09-03T03:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "syndicatedshannon",
                                           "body":  "\u003e the use of `await` inside expression-tree-based queries\r\n\r\nWouldn\u0027t it gracefully flatten support for `Qbservable` and `Queryable` into `AsyncQueryable`? With either a messaging backplane connected to IQueryProvider or expressions that await database queries OR data deltas, we\u0027d get Reactive data to consumers with a unified query construct, without the uncertainty of translating expressions between providers.\r\n\r\nI\u0027m not saying that\u0027s the asker\u0027s original intent, I\u0027m just suggesting a use-case may exist in near real-time data.",
                                           "updatedAt":  "2019-09-03T03:13:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyOTc3NDEwNDk=",
                                           "createdAt":  "2019-12-11T14:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yruson",
                                           "body":  "I also had trouble with the infrastructure. A unified asynchronous programming model and asynchronous access to the database are important. Although there are IAsyncQueryable and IAsyncQueryProvider in EntityFramework Core. But if used means intrusion into the entire system infrastructure. I will not be able to use ORM other than EntityFramework Core with a unified programming model",
                                           "updatedAt":  "2019-12-11T14:48:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NWfUO",
                                           "createdAt":  "2022-10-31T22:03:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-31T22:03:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NWpza",
                                           "createdAt":  "2022-10-31T22:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[jcouv summary:] requesting support for `await` in expression trees.\r\n\r\n---- \r\n@lillo42 commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161)\r\n\r\nI\u0027m studying C# 8 and new we have a new interface call ``IAsyncEnumerable`` and I was think maybe it\u0027s a good ideia create a new interface call ``IAsyncQueryable`` to be possible using ``await foreach`` async with ORM like EF or NHibernarte:\r\n\r\n```csharp\r\n\r\nIAsyncQueryable query = database.Where(...);\r\n\r\nawait foreach(var a in query) {\r\n...\r\n}\r\n```\r\n\r\nI was thinking ``IAsyncQueryable`` could be:\r\n```csharp\r\npublic interface IAsyncQueryable : IAsyncEnumerable\r\n{\r\n   Type ElementType { get; }\r\n    Expression Expression { get; }\r\n    IQueryProvider Provider { get; }\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IAsyncQueryable, IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\nor\r\n\r\n```csharp\r\n\r\npublic interface IAsyncQueryable : IQueryable, IAsyncEnumerable\r\n{\r\n\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IQueryable\u003cT\u003e, IAsyncQueryable,  IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n@Suchiman commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448587573)\r\n\r\nSince IQueryable is about composing a query rather than constructing an execution pipeline, it would probably make more sense to follow the current Approach (used by EF) of adding an extension like this\r\n```csharp\r\npublic static IAsyncEnumerable\u003cTSource\u003e AsAsyncEnumerable\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source)\r\n```\r\n\r\n---\r\n\r\n@quinmars commented on [Thu Dec 20 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448949021)\r\n\r\nThe async enumerable implementation is developed in the dotnet/reactive repo. And there actually is already an `IAsyncQueryable` interface:\r\n\r\nhttps://github.com/dotnet/reactive/blob/IxAsyncCSharp8/Ix.NET/Source/System.Linq.Async.Queryable/System/Linq/IAsyncQueryable.cs\r\n\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455242991)\r\n\r\ncc @stephentoub \r\n\r\n---\r\n\r\n@stephentoub commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455244515)\r\n\r\nWithout language support for awaits in expression trees, I don\u0027t think there\u0027s much that can or should be done here.\r\ncc: @cston, @jaredpar \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455251737)\r\n\r\nI agree. There is currently no plans to invest in our expression tree support at this time.\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455255954)\r\n\r\n@jaredpar should we move this issue to your repo you may track it for the future if anything change? \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455257999)\r\n\r\nEither way. This is one of those features that crosses our repositories so I\u0027m fine with it being here or there. \r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455259014)\r\n\r\nThanks @jaredpar I\u0027ll move it because corefx can support it if the it is decided from your side to support it. \r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-31T22:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NYVaL",
                                           "createdAt":  "2022-11-01T08:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "What would be some of the benefits of using a distinct `IAsyncQueryable` type? If the motivation is to allow asynchronous lambdas in methods like `Select` or `Where`, I wonder if these could be meaningfully translated in the common query providers. \r\n\r\nI tend to agree with @Suchiman\u0027s comment that IQueryable is a declarative query building abstraction, and any evaluation modalities are controlled by the query provider itself and consuming methods like `AsAsyncEnumerable()`.",
                                           "updatedAt":  "2022-11-01T08:48:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NYVeu",
                                           "createdAt":  "2022-11-01T08:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[jcouv summary:] requesting support for `await` in expression trees.\r\n\r\n---- \r\n@lillo42 commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161)\r\n\r\nI\u0027m studying C# 8 and new we have a new interface call ``IAsyncEnumerable`` and I was think maybe it\u0027s a good ideia create a new interface call ``IAsyncQueryable`` to be possible using ``await foreach`` async with ORM like EF or NHibernarte:\r\n\r\n```csharp\r\n\r\nIAsyncQueryable query = database.Where(...);\r\n\r\nawait foreach(var a in query) {\r\n...\r\n}\r\n```\r\n\r\nI was thinking ``IAsyncQueryable`` could be:\r\n```csharp\r\npublic interface IAsyncQueryable : IAsyncEnumerable\r\n{\r\n   Type ElementType { get; }\r\n    Expression Expression { get; }\r\n    IQueryProvider Provider { get; }\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IAsyncQueryable, IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\nor\r\n\r\n```csharp\r\n\r\npublic interface IAsyncQueryable : IQueryable, IAsyncEnumerable\r\n{\r\n\r\n}\r\n\r\n\r\npublic interface IAsyncQueryable\u003cT\u003e : IQueryable\u003cT\u003e, IAsyncQueryable,  IAsyncEnumerable\u003cT\u003e\r\n{\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n@Suchiman commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448587573)\r\n\r\nSince IQueryable is about composing a query rather than constructing an execution pipeline, it would probably make more sense to follow the current Approach (used by EF) of adding an extension like this\r\n```csharp\r\npublic static IAsyncEnumerable\u003cTSource\u003e AsAsyncEnumerable\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source)\r\n```\r\n\r\n---\r\n\r\n@quinmars commented on [Thu Dec 20 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448949021)\r\n\r\nThe async enumerable implementation is developed in the dotnet/reactive repo. And there actually is already an `IAsyncQueryable` interface:\r\n\r\nhttps://github.com/dotnet/reactive/blob/IxAsyncCSharp8/Ix.NET/Source/System.Linq.Async.Queryable/System/Linq/IAsyncQueryable.cs\r\n\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455242991)\r\n\r\ncc @stephentoub \r\n\r\n---\r\n\r\n@stephentoub commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455244515)\r\n\r\nWithout language support for awaits in expression trees, I don\u0027t think there\u0027s much that can or should be done here.\r\ncc: @cston, @jaredpar \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455251737)\r\n\r\nI agree. There is currently no plans to invest in our expression tree support at this time.\r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455255954)\r\n\r\n@jaredpar should we move this issue to your repo you may track it for the future if anything change? \r\n\r\n---\r\n\r\n@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455257999)\r\n\r\nEither way. This is one of those features that crosses our repositories so I\u0027m fine with it being here or there. \r\n\r\n---\r\n\r\n@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455259014)\r\n\r\nThanks @jaredpar I\u0027ll move it because corefx can support it if the it is decided from your side to support it. \r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-01T08:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RNAAL",
                                           "createdAt":  "2022-12-22T03:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZ7YAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vijay-Nirmal",
                                                                               "createdAt":  "2023-01-02T09:54:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DL444",
                                                                               "createdAt":  "2025-07-09T12:28:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "borland",
                                           "body":  "I\u0027ve run into what appears to be this problem recently as well; I hope by describing the scenario I\u0027m in, it might be of use to the .NET team:\r\n\r\nMy company (Octopus Deploy) maintains our own ORM, called [Nevermore](https://github.com/OctopusDeploy/Nevermore).\r\nIt has different features, but for the purposes of this, occupies exactly the same space that Entity Framework does.\r\n\r\nIn the same way that consumers of entity framework do, we wanted to await the results of queries built with a Linq expression, e.g.\r\n\r\n```csharp\r\nvar count = await people.Query().Where(x =\u003e x.Name == target).CountAsync();\r\nvar found= await people.Query().Where(x =\u003e x.Name == target).ToListAsync();\r\n```\r\n\r\nBecause the core linq design has no awareness of Async, we ended up doing the same thing as EF, and created an `IAsyncQueryProvider` interface, and associated `CountAsync` and similar extension methods.\r\n\r\nWe also have an in-memory caching layer which doesn\u0027t go to the database, but also wants to respond to the same `CountAsync()` style API.\r\n\r\nBut now there are as many as three copies of `IAsyncQueryProvider`. One in Entity Framework, one in Nevermore, and one in the caching layer. All of which have the same `CountAsync` and similar extension methods which are basically copy-pasted from the EF ones.\r\n\r\nIt would be valuable if the .NET platform could provide a standard way in which Linq providers could support asynchronous query results, to avoid the need to copy-paste functionality from entity framework.\r\n\r\nPerhaps by pulling `IAsyncQueryProvider` and associated extension methods into the core framework alongside the regular `IQueryProvider`? Or some alternate design which achieves the same goal?\r\n\r\nThanks, Orion",
                                           "updatedAt":  "2022-12-22T03:29:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc619fWr",
                                           "createdAt":  "2025-07-09T14:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DL444",
                                           "body":  "Running into this as well. We are developing an SDK that includes a custom LINQ provider that projects to a paginated web API endpoint. We ended up doing the same as what Entity Framework is currently doing:\n\n1. Queryables implement both `IQuerable\u003cT\u003e` and `IAsyncEnumerable\u003cT\u003e` and are returned as former\n2. Offer `ToAsyncEnumerable()` that casts queryables to async enumerables allowing users to enumerate through (coming to BCL in .NET 10)\n3. Define and implement `IAsyncQueryProvider` adding `ExecuteAsync()` on top of `IQueryProvider`\n4. Offer scalar sinks like `CountAsync()` that calls into the internal `IAsyncQueryProvider.ExecuteAsync()`\n\nThe first two bullets are fine in my opinion. But the lack of `IAsyncQueryProvider` in the BCL results in a lot of duplication, both in terms of the interface itself and in terms of all the scalar sink extension methods.\n\n\u003e IQueryable is a declarative query building abstraction, and any evaluation modalities are controlled by the query provider itself and consuming methods\n\nI agree, and I think what really needed is not `IAsyncQueryable\u003cT\u003e`, but `IAsyncQueryProvider` with its `ExecuteAsync()`, so we can have unified sinks with unified targets. Basically pulling `IAsyncQueryProvider` and the scalar sinks from EF to the BCL.",
                                           "updatedAt":  "2025-07-09T14:00:36Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Suggestion: IAsyncQueryable",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29673",
        "createdAt":  "2019-05-27T19:09:59Z",
        "number":  29673,
        "author":  "EamonNerbonne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-10T21:12:17Z",
        "body":  "The repro is simple:\r\n\r\n```C#\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\nstatic class Program\r\n{\r\n  struct AStruct { //struct-ness matters\r\n    public int AValue;\r\n  }\r\n\r\n  class Something { //class-vs-struct does not matter; nor does public/internal or inner/nested\r\n    public AStruct AStructField;\r\n  }\r\n\r\n  public static void Main()\r\n  {\r\n    Console.WriteLine(Compile(() =\u003e new Something { AStructField = new AStruct { AValue = 42 }}).AStructField.AValue);\r\n    Console.WriteLine(Interpret(() =\u003e new Something { AStructField = new AStruct { AValue = 42 }}).AStructField.AValue);\r\n    Console.WriteLine(Compile(() =\u003e new Something { AStructField = { AValue = 42 }}).AStructField.AValue);\r\n    Console.WriteLine(Interpret(() =\u003e new Something { AStructField = { AValue = 42 }}).AStructField.AValue);\r\n  }\r\n\r\n  //helpers to make the repro more readable; no impact on buggy behavior:\r\n  static T Compile\u003cT\u003e(Expression\u003cFunc\u003cT\u003e\u003e e) =\u003e e.Compile(preferInterpretation: false)();\r\n  static T Interpret\u003cT\u003e(Expression\u003cFunc\u003cT\u003e\u003e e) =\u003e e.Compile(preferInterpretation: true)();\r\n}\r\n```\r\n\r\n\r\nCorrect behavior would be to print 42 four times. However, the preferInterpreetation path miscompiles this and appears not to pass the mutation back up to the real struct (is dotnet/runtime#19094 possibly related?); so this actually prints 42 three times, then 0.\r\n\r\nIn other words:\r\n - `new Something { AStructField = new AStruct { AValue = 42 }}` OK!\r\n - `new Something { AStructField = { AValue = 42 }}` Bad!\r\n\r\nThere are some nuances:\r\n - on https://try.dot.net/ this prints 42 42 0 0 (but probably simply because blazor or whatever is powering that is always interpreting)\r\n - on .net framework 4.7.2 this \"works\" and prints 42 42 42 42 (but probably simply because it\u0027s always compiling).\r\n - .net core 1.1, 2.1, 2.2 and 3.0 preview (whatever is current) all appear affected.\r\n\r\nThis is pretty nasty for me, because I use expression tree interpretation a lot for unit testing via https://github.com/EamonNerbonne/ExpressionToCode, and there\u0027s really no warning that something fishy is going on. Just in case the bug happens to be hard to fix: I could live with a crash, even something tearing down the process or OS - pretty much anything is better than silent data corruption.\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Expression.Compile(preferInterpreetation:true) miscompilation of MemberMemberBinding for struct members",
        "labels":  [
                       "bug",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12927",
        "createdAt":  "2019-06-20T00:34:59Z",
        "number":  12927,
        "author":  "echesakov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T23:17:01Z",
        "body":  "**System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds** alone takes 14 minutes to finish on Linux/x64 with Checked coreclr.\r\n```\r\n$CORE_ROOT/corerun xunit.console.dll System.Linq.Expressions.Tests.dll -method System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds -maxthreads 2\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET Core 3.0.0-dev.19319.1)\r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 1 of 5641 test case)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:03:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:05:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:07:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:09:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:11:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:13:58\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 4176, Errors: 0, Failed: 0, Skipped: 0, Time: 861.244s\r\n```\r\n\r\nEven with this test disabled the remaining tests of the assembly take 20 minutes on Windows/x64 and 70 minutes on Linux/x64 to finish - still prohibitive for running against PRs.\r\n\r\n```\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003eset COMPlus \r\nEnvironment variable COMPlus not defined\r\n\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003ecall RunTests.cmd -r C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload --rsp-file C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp  \r\n----- start Wed 06/19/2019 21:37:26.02 ===============  To repro directly: ===================================================== \r\npushd C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\\\r\n\"C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\dotnet.exe\" xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp\r\npopd\r\n===========================================================================================================\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003e\"C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\dotnet.exe\" xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 5631 of 5641 test cases)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 31035, Errors: 0, Failed: 0, Skipped: 0, Time: 1220.368s\r\n----- end Wed 06/19/2019 21:58:05.41 ----- exit code 0 ----------------------------------------------------------\r\n```\r\n\r\n```\r\n+ printenv\r\n+ grep COMPlus\r\n+ ./RunTests.sh -r /home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload --rsp-file /home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/CoreFX.issues.rsp\r\n----- start Wed Jun 19 21:47:20 UTC 2019 =============== To repro directly: =====================================================\r\npushd .\r\n/home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/dotnet xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=OuterLoop -notrait category=failing @/home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/CoreFX.issues.rsp\r\npopd\r\n===========================================================================================================\r\n~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec ~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec\r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 5631 of 5641 test cases)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 31035, Errors: 0, Failed: 0, Skipped: 0, Time: 4202.212s\r\n~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec\r\n----- end Wed Jun 19 22:58:04 UTC 2019 ----- exit code 0 ----------------------------------------------------------\r\n```\r\n\r\nAt some point, we can consider re-enabling the test assembly in outerloop jobs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZB777g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BueBi",
                                           "createdAt":  "2022-04-19T14:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Update: these are known test failures (based on not specifying `-notrait category=failing`)\r\n\r\nNote there are now failures when manually running with a debug runtime:\r\n```\r\n Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 5666 of 5667 test cases)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 20)\r\n    System.Linq.Expressions.Tests.ExceptionHandlingExpressions.TryFinallyWithinFilterCompiled [FAIL]\r\n      System.InvalidOperationException : Try expression is not allowed inside a filter body.\r\n    System.Linq.Expressions.Tests.ExceptionHandlingExpressions.TryCatchThrowingWithinFilterCompiled [FAIL]\r\n      System.InvalidOperationException : Try expression is not allowed inside a filter body.\r\n    System.Linq.Expressions.Tests.ExceptionHandlingExpressions.TryCatchWithinFilterCompiled [FAIL]\r\n      System.InvalidOperationException : Try expression is not allowed inside a filter body.\r\n    System.Linq.Expressions.Tests.NewWithByRefParameterTests.CreateByRefAliasingInterpreted [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 16\r\n      Actual:   12\r\n    System.Linq.Expressions.Tests.Assign.ValueTypeIndexAssign(useInterpreter: False) [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n    System.Linq.Expressions.Tests.Assign.Left_ValueTypeContainsChildTryExpression(useInterpreter: False) [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 35268, Errors: 0, Failed: 6, Skipped: 0, Time: 544.783s\r\n```",
                                           "updatedAt":  "2022-04-20T14:40:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Buefs",
                                           "createdAt":  "2022-04-19T14:08:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "_Update: these are known test failures (based on not specifying -notrait category=failing); this can be re-triaged and moved back to Future although it would be good to add fix this issue properly and move the slow tests to outerloop._\r\n\r\nMarking this untriaged due to the new test failures found.",
                                           "updatedAt":  "2022-04-20T14:42:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kHvvu",
                                           "createdAt":  "2023-08-15T23:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds** alone takes 14 minutes to finish on Linux/x64 with Checked coreclr.\r\n```\r\n$CORE_ROOT/corerun xunit.console.dll System.Linq.Expressions.Tests.dll -method System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds -maxthreads 2\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET Core 3.0.0-dev.19319.1)\r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 1 of 5641 test case)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:03:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:05:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:07:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:09:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:11:58\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.ArrayBoundsTests.NewArrayBounds\u0027, Elapsed: 00:13:58\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 4176, Errors: 0, Failed: 0, Skipped: 0, Time: 861.244s\r\n```\r\n\r\nEven with this test disabled the remaining tests of the assembly take 20 minutes on Windows/x64 and 70 minutes on Linux/x64 to finish - still prohibitive for running against PRs.\r\n\r\n```\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003eset COMPlus \r\nEnvironment variable COMPlus not defined\r\n\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003ecall RunTests.cmd -r C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload --rsp-file C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp  \r\n----- start Wed 06/19/2019 21:37:26.02 ===============  To repro directly: ===================================================== \r\npushd C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\\\r\n\"C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\dotnet.exe\" xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp\r\npopd\r\n===========================================================================================================\r\nC:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Work\\91ffc885-6e89-446d-9bca-70acb188ddf8\\Exec\u003e\"C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\dotnet.exe\" xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\d19e7e4c-256d-4b38-945a-37efd93debc7\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 5631 of 5641 test cases)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 31035, Errors: 0, Failed: 0, Skipped: 0, Time: 1220.368s\r\n----- end Wed 06/19/2019 21:58:05.41 ----- exit code 0 ----------------------------------------------------------\r\n```\r\n\r\n```\r\n+ printenv\r\n+ grep COMPlus\r\n+ ./RunTests.sh -r /home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload --rsp-file /home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/CoreFX.issues.rsp\r\n----- start Wed Jun 19 21:47:20 UTC 2019 =============== To repro directly: =====================================================\r\npushd .\r\n/home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/dotnet xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=OuterLoop -notrait category=failing @/home/helixbot/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Payload/CoreFX.issues.rsp\r\npopd\r\n===========================================================================================================\r\n~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec ~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec\r\n  Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Linq.Expressions.Tests (found 5631 of 5641 test cases)\r\n  Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 2)\r\n  Finished:    System.Linq.Expressions.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Linq.Expressions.Tests  Total: 31035, Errors: 0, Failed: 0, Skipped: 0, Time: 4202.212s\r\n~/work/38902c0c-6c84-49a6-bd91-32a489a5b504/Work/d1c6129b-efe4-4034-a693-62a9c7aaae3c/Exec\r\n----- end Wed Jun 19 22:58:04 UTC 2019 ----- exit code 0 ----------------------------------------------------------\r\n```\r\n\r\nAt some point, we can consider re-enabling the test assembly in outerloop jobs.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eechesakov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `disabled-test`, `arch-x64`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T23:21:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Linq.Expressions.Tests is long-running with Checked coreclr",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "disabled-test",
                       "arch-x64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33479",
        "createdAt":  "2020-03-11T12:30:54Z",
        "number":  33479,
        "author":  "AaronHerchmer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-07T18:19:25Z",
        "body":  "Hi,\r\n\r\nI\u0027m trying to compile a Func delegate from an expression for filtering a collection in .NET Core 3.1 and after calling .Compile() on the expression the value of the delegate is:\r\n\r\n\u003e  {Method = \\\u003cInternal Error evaluating expression\\\u003e}\r\n\r\nWhen I run the exact same code in a .NET 4.7.2 console application, it works, and I am able to filter a collection using that delegate.\r\n\r\n```\r\nvar expressionParameter = Expression.Parameter(typeof(DateTime), \"x\");\r\nvar expressionProperty = Expression.Property(expressionParameter, \"Date\");\r\n\r\nvar expressionValue = Expression.Constant(new DateTime(2020, 03, 10), typeof(DateTime));\r\nvar compareExpression = Expression.GreaterThanOrEqual(expressionProperty, expressionValue);\r\n\r\nvar lambdaExpression = Expression.Lambda\u003cFunc\u003cDateTime,bool\u003e\u003e(compareExpression, expressionParameter);\r\nvar testCompile = lambdaExpression.Compile();\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS8_YaQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NzczNTM5Mg==",
                                           "createdAt":  "2020-03-11T16:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Can you clarify your issue? Is is that you\u0027re seeing a problem with the VS debugger specifically, or is the application failing at runtime?",
                                           "updatedAt":  "2020-03-11T16:30:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Nzc0OTIxNw==",
                                           "createdAt":  "2020-03-11T16:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronHerchmer",
                                           "body":  "I\u0027m just seeing the result in the VS debugger, the value of the variable testCompile is {Method = \\\u003cInternal Error evaluating expression\\\u003e} in .NET Core, and an appropriate Func in 4.7.2.",
                                           "updatedAt":  "2020-03-11T16:58:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Nzc1NjczMw==",
                                           "createdAt":  "2020-03-11T17:11:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "But does `testCompile` still work?  The question is if the concern is just around debugging or if it\u0027s actually affecting behavior at run-time.",
                                           "updatedAt":  "2020-03-11T17:11:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Nzc2NjU4Mg==",
                                           "createdAt":  "2020-03-11T17:30:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronHerchmer",
                                           "body":  "Ya sorry it still returns the delegate properly just the value of the display inside the debugger is incorrect. The delegate still works at runtime.",
                                           "updatedAt":  "2020-03-11T17:30:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzg1NTgxMw==",
                                           "createdAt":  "2020-04-15T07:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theCuriousOne",
                                           "body":  "I am experiencing the same error. We have just upgraded our code from .net core 2.1 to 3.1 and while in 2.1 I see no such error in 3.1 it shows:\r\n\r\n`{Method = \u003cInternal Error evaluating expression\u003e} `\r\n\r\nI also have a failing test that I am trying to debug, and now I am not sure if something have changed in the Expressions between versions 2.1 and 3.1 or it is an debugger issue and I am looking in the wrong place.",
                                           "updatedAt":  "2020-04-15T08:51:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODM1ODAyNQ==",
                                           "createdAt":  "2020-04-23T11:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sidney-pauly",
                                           "body":  "I had a similar issue to @theCuriousOne. I detailed my solution/bug-report here: [#35336](https://github.com/dotnet/runtime/issues/35336)",
                                           "updatedAt":  "2020-04-23T16:43:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODQyOTUzOA==",
                                           "createdAt":  "2020-04-23T14:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCDCbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sidney-pauly",
                                                                               "createdAt":  "2020-04-23T16:43:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "theCuriousOne",
                                           "body":  "\u003e \r\n\u003e I had a similar issue to @theCuriousOne. I detailed my solution/bug-report here: [https://github.com/dotnet/runtime/issues/35336](url)\r\n\r\n@sidney-pauly  your url is incorrect [https://github.com/dotnet/runtime/issues/35336](https://github.com/dotnet/runtime/issues/35336)  it should be placed in both brackets -\u003e in [] is for text that you see, and in () is the link behind the text.",
                                           "updatedAt":  "2020-04-23T14:32:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzU3ODE2MA==",
                                           "createdAt":  "2020-08-13T16:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "\u003e {Method = \\\u003cInternal Error evaluating expression\u003e}\r\n\r\nThe delegate is a dynamic method which is not viewable in the debugger. ",
                                           "updatedAt":  "2020-08-13T16:29:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjIwNzUxOA==",
                                           "createdAt":  "2020-09-21T15:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theCuriousOne",
                                           "body":  "@cston The same code was viewable in VisualStudio 2017, but not in VisualStudio 2019. The question is: what change in the debugger  caused this? Was the VS2017 version wrong or did it handled it better?",
                                           "updatedAt":  "2020-09-21T15:54:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Lz9hp",
                                           "createdAt":  "2022-10-07T18:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODq_Hkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theCuriousOne",
                                                                               "createdAt":  "2022-10-10T09:38:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "theCuriousOne",
                                                                               "createdAt":  "2022-10-10T09:38:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanxpetrov",
                                                                               "createdAt":  "2024-07-22T04:48:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "ivanxpetrov",
                                                                               "createdAt":  "2024-07-22T04:48:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "CzBuCHi",
                                           "body":  "got same error but i managed to find workaround:\r\n\r\ninstead of having `delegate` in watch use `delegate.Method` - then debugger shows correct method info\r\n\r\n\r\ninfo from visual studio help-\u003eabout :\r\n\r\n```\r\nMicrosoft Visual Studio Community 2022\r\nVersion 17.3.4\r\nVisualStudio.17.Release/17.3.4+32901.215\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA207\r\nMicrosoft Visual C++ 2022\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nASA Service Provider   1.0\r\n\r\nASP.NET and Web Tools   17.3.376.3011\r\nASP.NET and Web Tools\r\n\r\nAzure App Service Tools v3.0.0   17.3.376.3011\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   17.3.376.3011\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   4.3.0-3.22423.10+b35bb0baca1071d50cc4f8cf5a1a89e7cc112461\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nMarkdown Editor v2   2.0.130\r\nA full featured Markdown editor with live preview and syntax highlighting. Supports GitHub flavored Markdown.\r\n\r\nMicrosoft Azure Hive Query Language Service   2.6.5000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.6.5000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nNuGet Package Manager   6.3.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nRazor (ASP.NET Core)   17.0.0.2232702+e1d654e792aa2fe6646a6935bcca80ff0aff4387\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nSQL Server Data Tools   17.0.62207.04100\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   17.0.10701.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   4.3.0-3.22423.10+b35bb0baca1071d50cc4f8cf5a1a89e7cc112461\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   17.1.0-beta.22363.4+1b94f89d4d1f41f20f9be73c76f4b229d4e49078\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio IntelliCode   2.2\r\nAI-assisted development for Visual Studio.\r\n```\r\n\r\nPS: yea i know this post is 2 years old ...",
                                           "updatedAt":  "2022-10-07T18:19:25Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Debugger display of compiled lambda shows \"Internal Error evaluating expression\"",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74199",
        "createdAt":  "2020-04-20T21:11:20Z",
        "number":  74199,
        "author":  "rummelsworth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-09T18:18:15Z",
        "body":  "Discussed a few years ago at this SO question:\r\n\r\nhttps://stackoverflow.com/questions/41251676/expression-call-overload-for-calling-an-instance-method-expecting-a-single-arg\r\n\r\nThere doesn\u0027t seem to be a specialized `Expression.Call` overload for instance method invocation with a single argument, but there are such overloads for 2, 3, and 4 arguments. Currently, the `params`-ified overload can be used, but that allocates an array object unnecessarily.\r\n\r\nApparently the expected overload exists in .NET Core, it\u0027s just marked `internal` to maintain compile-time compatibility for when the 3rd argument is the literal `null`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/faebda75e202d810b00ce8176c79363006f62113/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs#L1050\r\n\r\nAre there plans for .NET Standard and/or .NET 5+ to publish this overload?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSLicyg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IuJwJ",
                                           "createdAt":  "2022-08-18T23:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Moving to dotnet/runtime as this is really a feature requests for expression trees.",
                                           "updatedAt":  "2022-08-18T23:00:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuJzK",
                                           "createdAt":  "2022-08-18T23:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDiscussed a few years ago at this SO question:\r\n\r\nhttps://stackoverflow.com/questions/41251676/expression-call-overload-for-calling-an-instance-method-expecting-a-single-arg\r\n\r\nThere doesn\u0027t seem to be a specialized `Expression.Call` overload for instance method invocation with a single argument, but there are such overloads for 2, 3, and 4 arguments. Currently, the `params`-ified overload can be used, but that allocates an array object unnecessarily.\r\n\r\nApparently the expected overload exists in .NET Core, it\u0027s just marked `internal` to maintain compile-time compatibility for when the 3rd argument is the literal `null`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/faebda75e202d810b00ce8176c79363006f62113/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs#L1050\r\n\r\nAre there plans for .NET Standard and/or .NET 5+ to publish this overload?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erummelsworth\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-18T23:00:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Expression.Call(Expression, MethodInfo, Expression) overload",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38439",
        "createdAt":  "2020-06-26T11:30:54Z",
        "number":  38439,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-24T05:40:05Z",
        "body":  "I was surprised the default Blazor WASM template depends on Reflection.Emit. This is because of System.Linq.Expressions.\r\n\r\nSystem.Linq.Expressions can be compiled in a way that removes the Ref.Emit dependency (use interpreter only) - to do this set the `IsInterpreting` property in System.Linq.Expressions.csproj to `true`.\r\n\r\nCompiling without Ref.Emit support saves 112 kB uncompressed and 44 kB compressed on System.Linq.Expressions.dll alone. I expect there will be more savings possible in CoreLib (the Ref.Emit implementation).\r\n\r\n#38438 fixes some bitrot in System.Linq.Expressions that is necessary to build this way.\r\n\r\nCc @marek-safar @eerhardt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM7K5RA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzMDk3MA==",
                                           "createdAt":  "2020-06-26T11:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-26T11:30:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzODExMw==",
                                           "createdAt":  "2020-06-26T11:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "\u003e I was surprised the default Blazor WASM template depends on Reflection.Emit. This is because of System.Linq.Expressions.\r\n\r\nI\u0027m sad every time I see System.Linq.Expressions in the default template of size sensitive workloads. It might be worth checking how to make that conditional in Blazor.\r\n\r\n\u003e System.Linq.Expressions can be compiled in a way that removes the Ref.Emit dependency (use interpreter only) - to do this set the IsInterpreting property in System.Linq.Expressions.csproj to true.\r\n\r\nI think it\u0027d be better to have this instead of compile-time constant use feature-switch `RuntimeFeature.IsDynamicCodeCompiled` as this is not arch but codegen switch we could use elsewhere.\r\n\r\n\u003e Compiling without Ref.Emit support saves 112 kB uncompressed and 44 kB compressed on System.Linq.Expressions.dll alone.\r\n\r\nWe actually switched from interpreter to SRE a few years ago for Mono profile due to performance improvements but it\u0027s possible that for NET Core libraries the situation will be different. However, we need to test if the behaviour is the same and where we stand on performance.",
                                           "updatedAt":  "2020-06-26T11:50:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE0MjA0MQ==",
                                           "createdAt":  "2020-06-26T12:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I\u0027m sad every time I see System.Linq.Expressions in the default template of size sensitive workloads. It might be worth checking how to make that conditional in Blazor.\r\n\r\nSeems to be coming from Microsoft.Extensions.DependencyInjection 😞 ",
                                           "updatedAt":  "2020-06-26T12:01:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE0ODI0NA==",
                                           "createdAt":  "2020-06-26T12:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e \u003e I\u0027m sad every time I see System.Linq.Expressions in the default template of size sensitive workloads. It might be worth checking how to make that conditional in Blazor.\r\n\r\n\u003e Seems to be coming from Microsoft.Extensions.DependencyInjection 😞\r\n\r\nMight need correct flags setting for WASM? https://github.com/dotnet/runtime/blob/ed78fadab63e6f8c4ee227521be93ec3aece1dc9/src/libraries/Microsoft.Extensions.DependencyInjection/src/Microsoft.Extensions.DependencyInjection.csproj#L11-L15",
                                           "updatedAt":  "2020-06-26T12:17:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE1MDExMg==",
                                           "createdAt":  "2020-06-26T12:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBl5LYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "grant-d",
                                                                               "createdAt":  "2020-06-26T16:19:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2020-06-27T21:45:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2020-07-04T20:52:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antiufo",
                                                                               "createdAt":  "2021-04-03T22:16:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Might need correct flags setting for WASM?\r\n\r\nAh, I meant - the reference to Linq.Expressions is coming from DependencyInjection.\r\n\r\nThe fact that DependencyInjection can also use Ref.Emit is new information to me, but makes perfect sense (if you want bad startup time and DI by itself is still not slow enough, might want to insure it\u0027s really bad by adding Ref.Emit to the mix).",
                                           "updatedAt":  "2020-06-26T12:22:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE1NzkwNA==",
                                           "createdAt":  "2020-06-26T12:42:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIqHnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2020-06-26T13:50:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e The fact that DependencyInjection can also use Ref.Emit is new information to me, but makes perfect sense (if you want bad startup time and DI by itself is still not slow enough, might want to insure it\u0027s really bad by adding Ref.Emit to the mix).\r\n\r\n😂 I think @migueldeicaza would sympathize with this position",
                                           "updatedAt":  "2020-06-26T12:42:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjU5Mjk3MQ==",
                                           "createdAt":  "2020-07-01T19:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Seems to be coming from Microsoft.Extensions.DependencyInjection 😞\r\n\r\nI\u0027ve logged https://github.com/dotnet/runtime/issues/38678 to make DependencyInjection more trimmable. Fixing that will remove  Linq.Expressions in a default Blazor WASM template app. After that, the only usage of Ref.Emit left is #38693.",
                                           "updatedAt":  "2020-07-01T23:55:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjA5MjIwOQ==",
                                           "createdAt":  "2020-07-09T12:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Per Steve Sanderson, Blazor WASM is going to bring in a dependency on expressions as soon as someone drops a form into their app: https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs#L51",
                                           "updatedAt":  "2020-07-09T12:15:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjIwMjA3Mw==",
                                           "createdAt":  "2020-07-09T15:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJ4ocw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2020-07-09T16:11:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "I still think the best option is to have both options in and control it via RuntimeFeature.IsDynamicCodeCompiled. I believe we do it in other parts of libraries as well, for example for regular expressions.",
                                           "updatedAt":  "2020-07-09T15:42:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Njc3NDkzMg==",
                                           "createdAt":  "2020-07-10T16:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I still think the best option is to have both options in and control it via RuntimeFeature.IsDynamicCodeCompiled. I believe we do it in other parts of libraries as well, for example for regular expressions.\r\n\r\nI\u0027m really curious about RuntimeFeature.IsDynamicCodeCompiled here.  I added its use into regex based on such a recommendation, but it actually seems like the wrong choice when running with an interpreter.\r\n\r\nOften reflection emit (or S.L.Expressions) is used when there\u0027s some general implementation and then a very specific (and thus faster / more tuned) implementation can be emitted for a specific use case.  That\u0027s what happens with regex.  Now, if the choice is between using a compiled version of the general path and an interpreted version of the specific path, it\u0027s really hard to say which is going to be better.  But if the choice is between using an interpreted version of the general path and an interpreted version of the specific path, in general I\u0027d expect the latter to win.  After all, with something like regex, is it better for the interpreter to execute the interpreter\u0027s IL interpreting the regex instructions, or is it better for the interpreter to execute the IL specific to that regex.  There\u0027s still the overhead of doing the IL generation, but that\u0027s the case whether the IL generation path is interpreted or compiled.\r\n\r\nDo we need a RuntimeFeature.IsInterpreting, or some such thing?",
                                           "updatedAt":  "2020-07-10T16:47:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Njc4MDQ3Mg==",
                                           "createdAt":  "2020-07-10T16:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e But if the choice is between using an interpreted version of the general path and an interpreted version of the specific path, in general I\u0027d expect the latter to win\r\n\r\nThis was the same case for Json serialization. See [my perf results](https://github.com/dotnet/runtime/issues/38693#issuecomment-654409534) when I tested using Ref.Emit vs. Reflection to get/set properties and create objects. The Ref.Emit case (after warm-up) was 15-20% faster.\r\n\r\n\u003e Do we need a RuntimeFeature.IsInterpreting, or some such thing?\r\n\r\nWhat decisions would we make off that property that we wouldn\u0027t make with `RuntimeFeature.IsDynamicCodeCompiled`?",
                                           "updatedAt":  "2020-07-10T16:59:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Njc4MTkxMA==",
                                           "createdAt":  "2020-07-10T17:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is even more complex once you throw the fact that some code may be compiled (JIT or AOT) and some code may be interpreted. We are not there today, but it is where we want to be with wasm eventually.\r\n\r\nThere is typically transition cost between interpreting and running compiled code. So whether the regex compiled into IL running on interpreter is going to be faster than the built-in regex interpretation is also going to depend on how chatty is the interaction between the regex IL and static libraries that are likely to be compiled.\r\n\r\nThe interpreter is always going to be a low-throughput configuration. I think we should make it simple and prioritize size over speed for the interpreter. The high-throughput option for Wasm would be full AOT.",
                                           "updatedAt":  "2020-07-10T17:02:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjgyMzgxNg==",
                                           "createdAt":  "2020-07-10T18:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e What decisions would we make off that property that we wouldn\u0027t make with RuntimeFeature.IsDynamicCodeCompiled?\r\n\r\nLet\u0027s take regex as an example.\r\n1. If the whole app is interpreted, then I\u0027d bet ref emit is actually beneficial for throughput (after warm-up), since it\u0027ll be interpreting the faster rather than the slower path.\r\n2. If the whole app is compiled, but dynamic code isn\u0027t compiled but instead interpreted, then it\u0027s not as clear cut: is it faster to run the compiled regex interpreter or faster to run the interpreted ref emited impl?",
                                           "updatedAt":  "2020-07-10T18:37:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjkyODQ3NA==",
                                           "createdAt":  "2020-07-10T22:52:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "\u003e If the whole app is interpreted, then I\u0027d bet ref emit is actually beneficial for throughput\r\n\r\nThat\u0027s not how you should look at it with the tech we have today. The interpreter is quite limited in how much optimizations/propagations can do. So whether the code is ref-emit generated or precompiled does not matter, what matters is how much code needs to process. In the simple view, you can say that every IL instruction cost you 1 us to execute, if you can write a program in the way that it will be 100 IL instructions without ref-emit and 150 with ref-emit (ignoring the ref-emit generation part) the winner will be no-ref-emit version.",
                                           "updatedAt":  "2020-07-10T22:52:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjkzMzEwMQ==",
                                           "createdAt":  "2020-07-10T23:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Yes, and for Regex for example, there are in general many fewer IL instructions spit out for the ref emit version than need to be executed for the interpreted version. There are fewer IL instructions to execute in the ref emited IL. That\u0027s exactly my point.",
                                           "updatedAt":  "2020-07-10T23:11:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjY0NjY5OQ==",
                                           "createdAt":  "2020-07-30T19:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "In order for Ref.Emit to be completely trimmed in a Blazor application, we would also need to implement #38693. #38693 has perf tradeoffs that aren\u0027t desirable at this time. So moving both this and #38693 to 6.0.",
                                           "updatedAt":  "2020-07-30T19:54:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk5NTI3OA==",
                                           "createdAt":  "2021-05-11T18:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to \u0027Future\u0027 as this isn\u0027t high priority for 6.",
                                           "updatedAt":  "2021-05-11T18:52:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzM1MDg1Mg==",
                                           "createdAt":  "2021-06-24T05:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "If the `Reflection.Emit` got trimmed, how can we enable it again when we want to have wasm emit dynamic code?",
                                           "updatedAt":  "2021-06-24T05:40:05Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Consider disabling Ref.Emit in System.Linq.Expressions on WASM",
        "labels":  [
                       "arch-wasm",
                       "area-System.Linq.Expressions",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44279",
        "createdAt":  "2020-11-05T06:51:52Z",
        "number":  44279,
        "author":  "hez2010",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBV0Tig==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2020-11-05T11:57:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-14T15:47:11Z",
        "body":  "# Proposal: Logic Expressions Simplification for Performance\r\nThere\u0027re several logically equivalent formulas which can be used for reducing logic expressions.\r\n\r\nFor instance, \r\n| logic expression | applicable logic expressions |\r\n| - | - |\r\n| `a` | `!!a`, `a \u0026\u0026 a`, `a \\|\\| a`, `a \\|\\| (a \u0026\u0026 b)`, `a \u0026\u0026 (a \\|\\| b)`, `a \\|\\| false`, `a \u0026\u0026 true` |\r\n| `false` | `false \u0026\u0026 a`, `a \u0026\u0026 (!a)` |\r\n| `true` | `true \\|\\| a`, `a \\|\\| (!a)` |\r\n| `!a` | `(!a \\|\\| b) \u0026\u0026 (!a \\|\\| !b)` |\r\n| ... | ... |\r\n\r\nTherefore, an `Expression` can detect above patterns and make the expression `CanReduce`, and users can use `Reduce` method to simplify the expression and reduce the amount of evaluation. \r\n\r\n```csharp\r\nExpression\u003cFunc\u003cbool, bool, bool\u003e\u003e e1 = (a, b) =\u003e a \u0026\u0026 (a || b);\r\nConsole.WriteLine(e1);\r\nConsole.WriteLine(e1.CanReduce);\r\nConsole.WriteLine(e1.Reduce());\r\n\r\nConsole.WriteLine();\r\n\r\nExpression\u003cFunc\u003cbool, bool\u003e\u003e e2 = a =\u003e true \u0026\u0026 a;\r\nConsole.WriteLine(e2);\r\nConsole.WriteLine(e2.CanReduce);\r\nConsole.WriteLine(e2.Reduce());\r\n```\r\n\r\nCurrent output:\r\n```none\r\n(a, b) =\u003e (a AndAlso (a OrElse b))\r\nFalse\r\n(a, b) =\u003e (a AndAlso (a OrElse b))\r\n\r\na =\u003e (False AndAlso a)\r\nFalse\r\na =\u003e (False AndAlso a)\r\n```\r\n\r\nProposed output:\r\n```none\r\n(a, b) =\u003e (a AndAlso (a OrElse b))\r\nTrue\r\n(a, b) =\u003e a\r\n\r\na =\u003e (False AndAlso a)\r\nTrue\r\na =\u003e False\r\n```\r\n\r\nEF Core can also benefit from it, and it can use Expression APIs to simply cut unnecessary expression trees before generating query SQL expression. \r\n\r\nThere\u0027s already an [existing issue](https://github.com/dotnet/efcore/issues/23181) being reported in EF Core, I think it can be done in runtime to benefits all potential usage but not only in EF Core.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKwzwGA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjE4MTIzNg==",
                                           "createdAt":  "2020-11-05T06:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-11-05T06:51:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjI2ODE4NA==",
                                           "createdAt":  "2020-11-05T09:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBqowrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kasperk81",
                                                                               "createdAt":  "2021-05-12T20:34:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Missing from EFCore, but desktop Entity Framework has DNF and CNF converters https://github.com/microsoft/referencesource/blob/3b1eaf5/System.Data.Entity/System/Data/Common/Utils/Boolean/Converter.cs and a way to find best solution among the choices https://github.com/microsoft/referencesource/blob/3b1eaf5/System.Data.Entity/System/Data/Common/Utils/Boolean/BoolExpr.cs#L82. LINQ expressions can make use of similar algorithm, at least for boolean specialization.\r\n\r\nps - when in doubt, we can calculate conjunctive, disjunctive and other forms with truth density of expressions via wolframalpha online, e.g.: https://www.wolframalpha.com/input/?i=a+%26%26+C+||+!a+||+(D+%26%26+!B) 🙂",
                                           "updatedAt":  "2020-11-05T09:50:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Proposal: Logic Expressions Simplification for Performance",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51692",
        "createdAt":  "2021-04-22T13:34:09Z",
        "number":  51692,
        "author":  "metoule",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-12T09:40:00Z",
        "body":  "### Description\r\n\r\nI\u0027m defining user defined operators on a base class. If I try to create a `BinaryExpression` that calls the custom operator on two instances of derived classes, the operator is not resolved.\r\n\r\n````c#\r\npublic class MyBaseClass\r\n{\r\n    public double Value { get; set; }\r\n    public static MyBaseClass operator +(MyBaseClass left, MyBaseClass right)\r\n    {\r\n        return new MyBaseClass { Value = left.Value + right.Value };\r\n    }\r\n}\r\n\r\npublic class MyDerivedClass : MyBaseClass\r\n{\r\n}\r\n\r\nvoid Main()\r\n{\r\n    var m1 = new MyDerivedClass { Value = 1 };\r\n    var m2 = new MyDerivedClass { Value = 2 };\r\n\r\n    // the C# compiler properly resolves the custom operator\r\n    var m3 = m1 + m2;\r\n\r\n    // the Linq expression doesn\u0027t find the user defined operator defined in the base class\r\n    var left = Expression.Constant(m1);\r\n    var right = Expression.Constant(m2);\r\n\r\n    // Exception throw here: The binary operator Add is not defined for the types \u0027MyDerivedClass\u0027 and \u0027MyDerivedClass\u0027\r\n    var expr = Expression.Add(left, right); // \u003c-- exception \r\n\r\n    // I can specify the base class operator, and this time I can create the expression\r\n    var method = typeof(MyBaseClass).GetMethod(\"op_Addition\");\r\n    var expr2 = Expression.Add(left, right, method);\r\n}\r\n```` \r\n\r\n### Configuration\r\n\r\nI tested on a Windows 10 x64 machine with .NET standard 2.1.\r\n\r\n### Regression?\r\n\r\nBased on the Git history, I\u0027m not sure it ever worked.\r\n\r\n### Other information\r\n\r\nAs far as I can tell, this comes from the implementation of `BinaryExpression:GetUserDefinedBinaryOperator`, which checks if the operator exists on either the left or the right operand, but not their base classes:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs#L713\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeExtensions.cs#L18",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdq8PHA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDg0NjQ5NQ==",
                                           "createdAt":  "2021-04-22T13:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m defining user defined operators on a base class. If I try to create a `BinaryExpression` that calls the custom operator on two instances of derived classes, the operator is not resolved.\r\n\r\n````\r\npublic class MyBaseClass\r\n{\r\n    public double Value { get; set; }\r\n    public static MyBaseClass operator +(MyBaseClass left, MyBaseClass right)\r\n    {\r\n        return new MyBaseClass { Value = left.Value + right.Value };\r\n    }\r\n}\r\n\r\npublic class MyDerivedClass : MyBaseClass\r\n{\r\n}\r\n\r\nvoid Main()\r\n{\r\n    var m1 = new MyDerivedClass { Value = 1 };\r\n    var m2 = new MyDerivedClass { Value = 2 };\r\n\r\n    // the C# compiler properly resolves the custom operator\r\n    var m3 = m1 + m2;\r\n\r\n    // the Linq expression doesn\u0027t find the user defined operator defined in the base class\r\n    var left = Expression.Constant(m1);\r\n    var right = Expression.Constant(m2);\r\n\r\n    // Exception throw here: The binary operator Add is not defined for the types \u0027MyDerivedClass\u0027 and \u0027MyDerivedClass\u0027\r\n    var expr = Expression.Add(left, right); // \u003c-- exception \r\n\r\n    // I can specify the base class operator, and this time I can create the expression\r\n    var method = typeof(MyBaseClass).GetMethod(\"op_Addition\");\r\n    var expr2 = Expression.Add(left, right, method);\r\n}\r\n```` \r\n\r\n### Configuration\r\n\r\nI tested on a Windows 10 x64 machine with .NET standard 2.1.\r\n\r\n### Regression?\r\n\r\nBased on the Git history, I\u0027m not sure it ever worked.\r\n\r\n### Other information\r\n\r\nAs far as I can tell, this comes from the implementation of `BinaryExpression:GetUserDefinedBinaryOperator`, which checks if the operator exists on either the left or the right operand, but not their base classes:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs#L713\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeExtensions.cs#L18\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emetoule\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-22T13:34:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDk2NDAxNA==",
                                           "createdAt":  "2021-04-22T15:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "metoule",
                                           "body":  "Note that the issue also occurs for unary operators:\r\n\r\n```c#\r\npublic class MyBaseClass\r\n{\r\n    public double Value { get; set; }\r\n\r\n    public static MyBaseClass operator !(MyBaseClass instance)\r\n    {\r\n        return new MyBaseClass { Value = -instance.Value };\r\n    }\r\n}\r\n\r\npublic class MyDerivedClass : MyBaseClass\r\n{\r\n}\r\n\r\nvoid Main()\r\n{\r\n    var m1 = new MyDerivedClass { Value = 1 };\r\n\r\n    // the C# compiler properly resolves the custom operator\r\n    var m3 = !m1;\r\n\r\n    // the Linq expression doesn\u0027t find the user defined operator defined in the base class\r\n    var expr = Expression.Constant(m1);\r\n    var expr2 = Expression.Not(expr);\r\n\r\n    // Exception thrown here: The unary operator Not is not defined for the type \u0027MyDerivedClass\u0027\r\n    Expression.Lambda(expr2).Compile().DynamicInvoke();   // \u003c-- exception\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-01-10T08:20:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ1NzY1NQ==",
                                           "createdAt":  "2021-07-13T22:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "The behavior is the same with .NET Framework 4.8 as well.",
                                           "updatedAt":  "2021-07-13T22:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDA2NTM5NQ==",
                                           "createdAt":  "2021-07-14T17:11:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "Added to 7.0 milestone to investigate. It\u0027s possible the decision to ignore base types was explicit though, since the same runtime behavior exists in .NET Framework.",
                                           "updatedAt":  "2021-07-14T17:11:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52rw8c",
                                           "createdAt":  "2024-03-12T09:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIMZ1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "taruchu",
                                                                               "createdAt":  "2025-03-03T00:42:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "metoule",
                                           "body":  "Any update on this issue? The behavior is still present in .NET8",
                                           "updatedAt":  "2024-03-12T09:39:59Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Linq BinaryExpression resolution doesn\u0027t check the base classes for user defined operators",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55071",
        "createdAt":  "2021-07-02T07:01:55Z",
        "number":  55071,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T06:12:05Z",
        "body":  "The `System.Dynamic.Tests.InvokeMemberBindingTests.InvokeFuncMember` library test fails in #54970 with the following error:\r\n```\r\nSystem.ArgumentException : Expression of type \u0027System.Int32\u0027 cannot be used for parameter of type \u0027System.Object\u0027 (Parameter \u0027arg2\u0027)\r\n\r\n    at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\r\n   at System.Linq.Expressions.Expression.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arg, ParameterInfo pi, String methodParamName, String argumentParamName)\r\n   at System.Linq.Expressions.Expression.Invoke(Expression expression, Expression arg0, Expression arg1, Expression arg2)\r\n   at System.Linq.Expressions.Expression.Invoke(Expression expression, IEnumerable`1 arguments)\r\n   at System.Linq.Expressions.DynamicExpression.Reduce()\r\n   at System.Linq.Expressions.Expression.ReduceAndCheck()\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileGotoExpression(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileAsVoid(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileConditionalExpression(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileAsVoid(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileBlockStart(BlockExpression node)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileBlockExpression(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileTop(LambdaExpression node)\r\n   at System.Linq.Expressions.Expression`1[[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].Compile()\r\n   at System.Runtime.CompilerServices.CallSiteBinder.BindCore[\u003c\u003eA{00000004}`3](CallSite`1 site, Object[] args)\r\n   at System.Runtime.CompilerServices.CallSiteOps.Bind[\u003c\u003eA{00000004}`3](CallSiteBinder binder, CallSite`1 site, Object[] args)\r\n   at System.Linq.Expressions.Interpreter.FuncCallInstruction`4[[System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Runtime.CompilerServices.CallSite`1[[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]], System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object[], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].Run(InterpretedFrame frame)\r\n   at System.Linq.Expressions.Interpreter.Interpreter.Run(InterpretedFrame frame)\r\n   at System.Linq.Expressions.Interpreter.LightLambda.RunVoid(Object[] arguments)\r\n   at System.Dynamic.Tests.InvokeMemberBindingTests.InvokeFuncMember()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture\r\n```\r\nhttps://github.com/dotnet/runtime/pull/54970/checks?check_run_id=2961997278\r\n\r\ncc @steveisok \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgm_3Xw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3Mjc2OTA4NQ==",
                                           "createdAt":  "2021-07-02T07:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `System.Dynamic.Tests.InvokeMemberBindingTests.InvokeFuncMember` library test fails in #54970 with the following error:\r\n```\r\nSystem.ArgumentException : Expression of type \u0027System.Int32\u0027 cannot be used for parameter of type \u0027System.Object\u0027 (Parameter \u0027arg2\u0027)\r\n\r\n    at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\r\n   at System.Linq.Expressions.Expression.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arg, ParameterInfo pi, String methodParamName, String argumentParamName)\r\n   at System.Linq.Expressions.Expression.Invoke(Expression expression, Expression arg0, Expression arg1, Expression arg2)\r\n   at System.Linq.Expressions.Expression.Invoke(Expression expression, IEnumerable`1 arguments)\r\n   at System.Linq.Expressions.DynamicExpression.Reduce()\r\n   at System.Linq.Expressions.Expression.ReduceAndCheck()\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileGotoExpression(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileAsVoid(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileConditionalExpression(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileAsVoid(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileBlockStart(BlockExpression node)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileBlockExpression(Expression expr, Boolean asVoid)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileNoLabelPush(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\r\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileTop(LambdaExpression node)\r\n   at System.Linq.Expressions.Expression`1[[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].Compile()\r\n   at System.Runtime.CompilerServices.CallSiteBinder.BindCore[\u003c\u003eA{00000004}`3](CallSite`1 site, Object[] args)\r\n   at System.Runtime.CompilerServices.CallSiteOps.Bind[\u003c\u003eA{00000004}`3](CallSiteBinder binder, CallSite`1 site, Object[] args)\r\n   at System.Linq.Expressions.Interpreter.FuncCallInstruction`4[[System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Runtime.CompilerServices.CallSite`1[[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]], System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object[], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[\u003c\u003eA{00000004}`3[[System.Runtime.CompilerServices.CallSite, System.Linq.Expressions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Linq.Expressions.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].Run(InterpretedFrame frame)\r\n   at System.Linq.Expressions.Interpreter.Interpreter.Run(InterpretedFrame frame)\r\n   at System.Linq.Expressions.Interpreter.LightLambda.RunVoid(Object[] arguments)\r\n   at System.Dynamic.Tests.InvokeMemberBindingTests.InvokeFuncMember()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture\r\n```\r\nhttps://github.com/dotnet/runtime/pull/54970/checks?check_run_id=2961997278\r\n\r\ncc @steveisok \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-02T07:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IO3hI",
                                           "createdAt":  "2022-08-11T11:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "Still hitting an error , checked on CI https://github.com/dotnet/runtime/pull/73619",
                                           "updatedAt":  "2022-08-11T11:21:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cb_df",
                                           "createdAt":  "2024-06-25T09:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "cc @vitek-karas",
                                           "updatedAt":  "2024-06-25T09:07:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[iOS] System.Dynamic.Tests.InvokeMemberBindingTests.InvokeFuncMember failed",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "disabled-test",
                       "os-ios",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55396",
        "createdAt":  "2021-07-09T13:08:35Z",
        "number":  55396,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-20T14:40:51Z",
        "body":  "This is a tracking issue for using the Mono interpreter with `FEATURE_COMPILE`, which is based on Alexander\u0027s comment https://github.com/dotnet/runtime/pull/54970#discussion_r666928947\r\n\r\n@akoeplinger @steveisok ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONEtnoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE3NDQ0MQ==",
                                           "createdAt":  "2021-07-09T13:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @brzvlad\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a tracking issue for using the Mono interpreter with `FEATURE_COMPILE`, which is based on Alexander\u0027s comment https://github.com/dotnet/runtime/pull/54970#discussion_r666928947\r\n\r\n@akoeplinger @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Codegen-Interpreter-mono`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-09T13:08:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE4NzMyNQ==",
                                           "createdAt":  "2021-07-09T13:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a tracking issue for using the Mono interpreter with `FEATURE_COMPILE`, which is based on Alexander\u0027s comment https://github.com/dotnet/runtime/pull/54970#discussion_r666928947\r\n\r\n@akoeplinger @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Codegen-Interpreter-mono`, `area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-09T13:27:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE4NzU1Ng==",
                                           "createdAt":  "2021-07-09T13:27:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a tracking issue for using the Mono interpreter with `FEATURE_COMPILE`, which is based on Alexander\u0027s comment https://github.com/dotnet/runtime/pull/54970#discussion_r666928947\r\n\r\n@akoeplinger @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `os-ios`, `os-maccatalyst`, `os-tvos`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-09T13:27:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE4ODAzMg==",
                                           "createdAt":  "2021-07-09T13:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @directhex\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a tracking issue for using the Mono interpreter with `FEATURE_COMPILE`, which is based on Alexander\u0027s comment https://github.com/dotnet/runtime/pull/54970#discussion_r666928947\r\n\r\n@akoeplinger @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-mono`, `area-System.Linq.Expressions`, `os-ios`, `os-maccatalyst`, `os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-09T13:28:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE4ODk0Nw==",
                                           "createdAt":  "2021-07-09T13:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@akoeplinger how much work do you think this would be?",
                                           "updatedAt":  "2021-07-09T13:30:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzI3MjYzOQ==",
                                           "createdAt":  "2021-07-09T15:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "I mainly wanted to have a tracking issue somewhere so we can decide whether we want to move back to emitting IL using FEATURE_COMPILE and running it using the Mono interpreter. I don\u0027t think it\u0027s something we should try to tackle in 6.0.",
                                           "updatedAt":  "2021-07-09T15:34:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzM1Njk2MA==",
                                           "createdAt":  "2021-07-09T17:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByFy6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2021-07-12T08:30:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Related: #38439",
                                           "updatedAt":  "2021-07-09T17:52:59Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Using the Mono interpreter with FEATURE_COMPILE",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "os-ios",
                       "os-tvos",
                       "os-maccatalyst"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56262",
        "createdAt":  "2021-07-24T07:48:12Z",
        "number":  56262,
        "author":  "nike4613",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T23:18:00Z",
        "body":  "### Description\r\n\r\nWhen compiling a delegate from a System.Linq.Expressions expression tree, if the tree is too complex (and has hoisted variables), compilation fails at https://github.com/dotnet/runtime/blob/24fa00dcb3d1a912e9ccf18f991ff8e99f94b3d7/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/CompilerScope.cs#L273-L279\r\n\r\nIf the comment is to be believed, it should never fail here.\r\n\r\nI unfortunately cannot pinpoint what attribute specifically causes it, however I can give a few examples of the DebugView property of expression trees which do and do not work. These examples are, unfortunately, *very* long and repetitive even when it does work.\r\n\r\n[This, for example, fails with](https://hastebin.com/aboragizix.php) **System.InvalidOperationException:** \u0027variable \u0027context\u0027 of type \u0027Sentimentality.RPC.IRpcCallContext\u0027 referenced from scope \u0027Dispatch for DoThing\u0027, but it is not defined\u0027.\r\n\r\n[This, however, compiles successfully and runs as expected.](https://hastebin.com/aferapocoz.php)\r\n\r\nBoth of these expressions are built with the same generator code, only with a subtly different input type. The former has one more method being processed than the latter, and it does not seem to make a difference what the method *is*, only whether it is present. This is what leads me to believe that there is some \"complexity\" which the former exceeds while the latter does not which causes the issue to happen.\r\n\r\nUntil this is fixed, are there any simple workarounds that *don\u0027t* boil down to manually hoising variables?\r\n\r\n### Configuration\r\n\r\n.NET 5.0.7 on Windows 10 x64, though I suspect that it is architecture independent.\r\n\r\n### Other information\r\n\r\nA full stack trace for the failing example above:\r\n```\r\n   at System.Linq.Expressions.Compiler.CompilerScope.ResolveVariable(ParameterExpression variable, HoistedLocals hoistedLocals)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitParameterExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitInstance(Expression instance, Type\u0026 type)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitTryExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitDelegateConstruction(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitArguments(MethodBase method, IArgumentProvider args, Int32 skipParameters)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitTryExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitConditionalExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitConditionalExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchCases(SwitchExpression node, Label[] labels, Boolean[] isGoto, Label default, Label end, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.TryEmitSwitchInstruction(SwitchExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.TryEmitHashtableSwitch(SwitchExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody()\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile()\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONxXWHg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40z4eX",
                                           "createdAt":  "2021-07-24T07:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen compiling a delegate from a System.Linq.Expressions expression tree, if the tree is too complex (and has hoisted variables), compilation fails at https://github.com/dotnet/runtime/blob/24fa00dcb3d1a912e9ccf18f991ff8e99f94b3d7/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/CompilerScope.cs#L273-L279\r\n\r\nIf the comment is to be believed, it should never fail here.\r\n\r\nI unfortunately cannot pinpoint what attribute specifically causes it, however I can give a few examples of the DebugView property of expression trees which do and do not work. These examples are, unfortunately, *very* long and repetitive even when it does work.\r\n\r\n[This, for example, fails with](https://hastebin.com/aboragizix.php) **System.InvalidOperationException:** \u0027variable \u0027context\u0027 of type \u0027Sentimentality.RPC.IRpcCallContext\u0027 referenced from scope \u0027Dispatch for DoThing\u0027, but it is not defined\u0027.\r\n\r\n[This, however, compiles successfully and runs as expected.](https://hastebin.com/aferapocoz.php)\r\n\r\nBoth of these expressions are built with the same generator code, only with a subtly different input type. The former has one more method being processed than the latter, and it does not seem to make a difference what the method *is*, only whether it is present. This is what leads me to believe that there is some \"complexity\" which the former exceeds while the latter does not which causes the issue to happen.\r\n\r\nUntil this is fixed, are there any simple workarounds that *don\u0027t* boil down to manually hoising variables?\r\n\r\n### Configuration\r\n\r\n.NET 5.0.7 on Windows 10 x64, though I suspect that it is architecture independent.\r\n\r\n### Other information\r\n\r\nA full stack trace for the failing example above:\r\n```\r\n   at System.Linq.Expressions.Compiler.CompilerScope.ResolveVariable(ParameterExpression variable, HoistedLocals hoistedLocals)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitParameterExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitInstance(Expression instance, Type\u0026 type)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitTryExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitDelegateConstruction(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitArguments(MethodBase method, IArgumentProvider args, Int32 skipParameters)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitTryExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitConditionalExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitConditionalExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsVoid(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchCases(SwitchExpression node, Label[] labels, Boolean[] isGoto, Label default, Label end, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.TryEmitSwitchInstruction(SwitchExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Emit(BlockExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitBlockExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.TryEmitHashtableSwitch(SwitchExpression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitSwitchExpression(Expression expr, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody()\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile()\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enike4613\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-24T07:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ezpv",
                                           "createdAt":  "2021-08-12T01:07:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "@nike4613, thanks for reporting this issue.\r\n\r\nUnfortunately, there doesn\u0027t appear to be enough information here to reproduce the problem. If you wouldn\u0027t mind, please provide a simplified example that hits the `InvalidOperationException`.",
                                           "updatedAt":  "2021-08-12T03:55:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41fChF",
                                           "createdAt":  "2021-08-12T03:57:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "I can send the project that causes the error (and a test case that triggers it), but every attempt I have made to simplify it has caused the issue to dissapear. ",
                                           "updatedAt":  "2021-08-12T03:57:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41kwzt",
                                           "createdAt":  "2021-08-14T05:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "Thanks @nike4613. \r\n\r\nIt appears the issue is with Expressions with closures and string switch expressions. If the switch expression has 8 or more cases, then any hoisted variables declared outside of the switch expression are dropped when calculating the closures from lambdas within the switch cases.\r\n\r\nThe following example hits the exception and should be sufficient to investigate the fix:\r\n```csharp\r\nvar arg0 = Expression.Parameter(typeof(string), \"value\");\r\n\r\n// f1 = (Func\u003cint\u003e f) =\u003e f();\r\nvar arg1 = Expression.Parameter(typeof(Func\u003cint\u003e), \"f\");\r\nExpression\u003cFunc\u003cFunc\u003cint\u003e, int\u003e\u003e expr1 =\r\n    Expression.Lambda\u003cFunc\u003cFunc\u003cint\u003e, int\u003e\u003e(\r\n        body: Expression.Invoke(arg1),\r\n        parameters: new[] { arg1 });\r\n\r\n// f2 = () =\u003e value.Length;\r\nExpression\u003cFunc\u003cint\u003e\u003e expr2 =\r\n    Expression.Lambda\u003cFunc\u003cint\u003e\u003e(\r\n        Expression.Property(arg0, typeof(string).GetProperty(\"Length\")));\r\n\r\n// f0 = (string value) =\u003e value switch { \"1\" =\u003e 1, ..., \"7\" =\u003e 7, _ =\u003e f1(f2) };\r\nExpression\u003cFunc\u003cstring, int\u003e\u003e expr0 =\r\n    Expression.Lambda\u003cFunc\u003cstring, int\u003e\u003e(\r\n        body: Expression.Switch(\r\n            switchValue: arg0,\r\n            defaultBody: Expression.Invoke(expr1, expr2),\r\n            cases: Enumerable.Range(1, 7).Select(index =\u003e\r\n                Expression.SwitchCase(Expression.Constant(index), Expression.Constant(index.ToString()))).ToArray()),\r\n        parameters: new[] { arg0 });\r\n\r\nFunc\u003cstring, int\u003e f0 = expr0.Compile();\r\n```",
                                           "updatedAt":  "2021-08-14T06:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41kxGB",
                                           "createdAt":  "2021-08-14T05:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "With the minimal repro above, the same exception is thrown with earlier versions of .NET Core (with .NET Core 2.0 for instance). With .NET Framework, the call to `Expression.Compile()` hangs.",
                                           "updatedAt":  "2021-08-14T06:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43FdYe",
                                           "createdAt":  "2021-09-21T17:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "@nike4613, feel free to remove your repro. The example code above should be sufficient to investigate, thanks.",
                                           "updatedAt":  "2021-09-21T17:00:11Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "When compiling a delegate from a System.Linq.Expressions expression tree, if the tree is too complex, compilation fails when hoisted variables are used",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60506",
        "createdAt":  "2021-10-16T20:07:11Z",
        "number":  60506,
        "author":  "omariom",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCS5Fiw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2021-10-17T11:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2021-10-17T15:10:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2021-10-18T05:54:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MendelMonteiro",
                                            "createdAt":  "2022-03-15T00:25:14Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-08-02T04:31:31Z",
        "body":  "When constants can\u0027t be embedded into the generated IL, the expression compiler adds them to [Closure.Constants array](https://github.com/dotnet/runtime/blob/53e8c7c3b6547d60e37a52602fddc883988a01c2/src/libraries/System.Linq.Expressions/src/System/Runtime/CompilerServices/Closure.cs#L19) and then, when such constant is referenced, [generates IL](https://github.com/dotnet/runtime/blob/53e8c7c3b6547d60e37a52602fddc883988a01c2/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/BoundConstants.cs#L181) that looks like the following (for reference and value types):\r\n```C# \r\n(string)closure.Constants[1]  \r\n```\r\n```C# \r\n(DateTime)closure.Constants[1]\r\n```\r\n```\r\nldarg.0\r\nldfld object[] Closure::Constants\r\nldc.i4.1\r\nldelem.ref\r\ncastclass [System.Private.CoreLib]System.String\r\nret\r\n```\r\n```\r\nldarg.0\r\nldfld object[] Closure::Constants\r\nldc.i4.1\r\nldelem.ref\r\nunbox.any [System.Private.CoreLib]System.DateTime\r\nret\r\n```\r\n\r\n```ASM\r\n       mov\trcx, [rcx+8]\r\n       cmp\tdword ptr [rcx+8], 1\r\n       jbe\tshort L0034\r\n       mov\trdx, [rcx+0x18]\r\n       mov\trax, rdx\r\n       test\trax, rax\r\n       je\tshort L002e\r\n       mov\trcx, 0x7ff997ccf448\r\n       cmp\t[rax], rcx\r\n       je\tshort L002e\r\n       call\tSystem.Runtime.CompilerServices.CastHelpers.ChkCastClassSpecial(Void*, System.Object)\r\nL002e:  ; consume rax\r\nL0034: call\t0x00007ff9f76d50d0\r\n       int3\r\n```\r\n\r\n```ASM\r\n       mov\trdx, [rcx+8]\r\n       cmp\tdword ptr [rdx+8], 1\r\n       jbe\tshort L003e\r\n       mov\trsi, [rdx+0x18]\r\n       mov\trdx, 0x7ff997c41da8\r\n       cmp\t[rsi], rdx\r\n       je\tshort L0034\r\n       mov\trdx, rsi\r\n       mov\trcx, 0x7ff997c41da8\r\n       call\tSystem.Runtime.CompilerServices.CastHelpers.Unbox(Void*, System.Object)\r\nL0034  mov\trax, [rsi+8]\r\n       ; consume rax\r\nL003e  call\t0x00007ff9f76d50d0\r\n       int3\t\r\n```\r\n\r\nBut the compiler knows exactly the number of items in Constants array and the type of each item\u0027s value.\r\nSimilar to how JIT uses its compile time knowledge to avoid bounds and type checks in the generated code,\r\nthe expression compiler could do the same and use unsafe code to avoid bounds, null and type checks.\r\n\r\nIdeally the generated assembly would like this:\r\nFor ref types:\r\n```ASM\r\n    mov rax, [rcx+8]\r\n    mov rax, [rax+0x18]\r\n```\r\nFor value types (DateTime in this case)\r\n```ASM\r\n    mov rax, [rcx+8]\r\n    mov rax, [rax+0x18]\r\n    mov eax, [rax+8]\r\n```\r\n\r\nThe compiler could generate the IL equivalent of what is usually done in such cases:\r\n```C# \r\nUnsafe.As\u003cstring\u003e(Unsafe.Add(ref MemoryMarshal.GetArrayDataReference(closure.Constants), 1))\r\n```\r\n```C#\r\nref object consts = ref MemoryMarshal.GetArrayDataReference(closure.Constants);\r\nUnsafe.As\u003cobject, StrongBox\u003cDateTime\u003e\u003e(ref Unsafe.Add(ref consts, 1)).Value\r\n```\r\nIt produces the code [close to ideal](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4a9Jq049+ggJI8ZEMfKhKV6mpvJImpBkJoBvGgw/b7zRgFUuuNgAZjBsMEEAKgCeYjAAFEKSELgcsAxgSSmwAJTunm7UnkVMAOwM/oEhLACCuAA8PgB8cRXBgtUAJh1xsEEMALIw+NBR/dhQuAAW2JIsAOIwGNVQUNhRACLYGNhhIbBcKnEZyamCIgHbPLjZaAzk2dkahZ4Avnke714MmxgwEfrlAJtABqMw4fxi8USJzSxyyMFyzw8BWKnl6DAgwAAVjAwBh0hALrgGABeBjowbDKCjcZTGbzRbLVYbLY7cIyGAHeJw07CQm4S4Ya5PT5FYhlVpVWp1TE4vG3WQYKCEgDmACEIAg6j8/vpGs10ZL2l0euECUTbvdsixQZJwU8im8kQxPsxvORGAB5KC8FW8LgzXbRWIJTKndJhnKfFGo0oMOI+bI82B8i7YK4AbToAF0Ha9Pq67N8trqBAxvb7/TNbeDg1DIzAIzCYLd/fjlQB3RFFGOo8XxnX/ARJhupgXpoUZ8i5z5Ozw0J2aADMDFwMBmMA6DicDZd1F7TBXstxGAz2ac/MF1morpXsGwHUJkiiGOxJ7PDAAMhAwDNry8gA==).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOFT_1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44VP_U",
                                           "createdAt":  "2021-10-17T11:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen constants can\u0027t be embedded into the generated IL, the expression compiler adds them to [Closure.Constants array](https://github.com/dotnet/runtime/blob/53e8c7c3b6547d60e37a52602fddc883988a01c2/src/libraries/System.Linq.Expressions/src/System/Runtime/CompilerServices/Closure.cs#L19) and then, when such constant is referenced, [generates IL](https://github.com/dotnet/runtime/blob/53e8c7c3b6547d60e37a52602fddc883988a01c2/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/BoundConstants.cs#L181) that looks like the following (for reference and value types):\r\n```C# \r\n(string)closure.Constants[1]  \r\n```\r\n```C# \r\n(DateTime)closure.Constants[1]\r\n```\r\n```\r\nldarg.0\r\nldfld object[] Closure::Constants\r\nldc.i4.1\r\nldelem.ref\r\ncastclass [System.Private.CoreLib]System.String\r\nret\r\n```\r\n```\r\nldarg.0\r\nldfld object[] Closure::Constants\r\nldc.i4.1\r\nldelem.ref\r\nunbox.any [System.Private.CoreLib]System.DateTime\r\nret\r\n```\r\n\r\n```ASM\r\n       mov\trcx, [rcx+8]\r\n       cmp\tdword ptr [rcx+8], 1\r\n       jbe\tshort L0034\r\n       mov\trdx, [rcx+0x18]\r\n       mov\trax, rdx\r\n       test\trax, rax\r\n       je\tshort L002e\r\n       mov\trcx, 0x7ff997ccf448\r\n       cmp\t[rax], rcx\r\n       je\tshort L002e\r\n       call\tSystem.Runtime.CompilerServices.CastHelpers.ChkCastClassSpecial(Void*, System.Object)\r\nL002e:  ; consume rax\r\nL0034: call\t0x00007ff9f76d50d0\r\n       int3\r\n```\r\n\r\n```ASM\r\n       mov\trdx, [rcx+8]\r\n       cmp\tdword ptr [rdx+8], 1\r\n       jbe\tshort L003e\r\n       mov\trsi, [rdx+0x18]\r\n       mov\trdx, 0x7ff997c41da8\r\n       cmp\t[rsi], rdx\r\n       je\tshort L0034\r\n       mov\trdx, rsi\r\n       mov\trcx, 0x7ff997c41da8\r\n       call\tSystem.Runtime.CompilerServices.CastHelpers.Unbox(Void*, System.Object)\r\nL0034  mov\trax, [rsi+8]\r\n       ; consume rax\r\nL003e  call\t0x00007ff9f76d50d0\r\n       int3\t\r\n```\r\n\r\nBut the compiler knows exactly the number of items in Constants array and the type of each item\u0027s value.\r\nSimilar to how JIT uses its compile time knowledge to avoid bounds and type checks in the generated code,\r\nthe expression compiler could do the same and use unsafe code to avoid bounds, null and type checks.\r\n\r\nIdeally the generated assembly would like this:\r\nFor ref types:\r\n```ASM\r\n    mov rax, [rcx+8]\r\n    mov rax, [rax+0x18]\r\n```\r\nFor value types (DateTime in this case)\r\n```ASM\r\n    mov rax, [rcx+8]\r\n    mov rax, [rax+0x18]\r\n    mov eax, [rax+8]\r\n```\r\n\r\nThe compiler could generate the IL equivalent of what is usually done in such cases:\r\n```C# \r\nUnsafe.As\u003cstring\u003e(Unsafe.Add(ref MemoryMarshal.GetArrayDataReference(closure.Constants), 1))\r\n```\r\n```C#\r\nref object consts = ref MemoryMarshal.GetArrayDataReference(closure.Constants);\r\nUnsafe.As\u003cobject, StrongBox\u003cDateTime\u003e\u003e(ref Unsafe.Add(ref consts, 1)).Value\r\n```\r\nIt produces the code [close to ideal](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4a9Jq049+ggJI8ZEMfKhKV6mpvJImpBkJoBvGgw/b7zRgFUuuNgAZjBsMEEAKgCeYjAAFEKSELgcsAxgSSmwAJTunm7UnkVMAOwM/oEhLACCuAA8PgB8cRXBgtUAJh1xsEEMALIw+NBR/dhQuAAW2JIsAOIwGNVQUNhRACLYGNhhIbBcKnEZyamCIgHbPLjZaAzk2dkahZ4Avnke714MmxgwEfrlAJtABqMw4fxi8USJzSxyyMFyzw8BWKnl6DAgwAAVjAwBh0hALrgGABeBjowbDKCjcZTGbzRbLVYbLY7cIyGAHeJw07CQm4S4Ya5PT5FYhlVpVWp1TE4vG3WQYKCEgDmACEIAg6j8/vpGs10ZL2l0euECUTbvdsixQZJwU8im8kQxPsxvORGAB5KC8FW8LgzXbRWIJTKndJhnKfFGo0oMOI+bI82B8i7YK4AbToAF0Ha9Pq67N8trqBAxvb7/TNbeDg1DIzAIzCYLd/fjlQB3RFFGOo8XxnX/ARJhupgXpoUZ8i5z5Ozw0J2aADMDFwMBmMA6DicDZd1F7TBXstxGAz2ac/MF1morpXsGwHUJkiiGOxJ7PDAAMhAwDNry8gA==).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eomariom\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-17T11:17:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Optimization opportunity for non-embeddable constants access in compiled Linq.Expressions",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61757",
        "createdAt":  "2021-11-17T23:36:34Z",
        "number":  61757,
        "author":  "kouvel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T04:28:10Z",
        "body":  "When threads have marginally more than 128 KB of stack space, `RuntimeHelpers.TryEnsureSufficientExecutionStack` discounts 128 KB of stack space and only considers the remaining space, and there may not be enough even for a non-nested/non-recursive thread pool work item. In that situation, `StackGuard.RunOnEmptyStackCore` is triggered again from its continuation and keeps doing so since `TryEnsureSufficientExecutionStack` always returns false.\r\n\r\nThis appears to be the continuation triggered by `RunOnEmptyStackCore`, which triggers itself continually:\r\nhttps://github.com/dotnet/runtime/blob/16300e0aee3392bc604b258db0901d9047e80f7c/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/StackSpiller.Generated.cs#L16-L28",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOfh6fw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc458-C1",
                                           "createdAt":  "2021-11-17T23:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen threads have marginally more than 128 KB of stack space, `RuntimeHelpers.TryEnsureSufficientExecutionStack` discounts 128 KB of stack space and only considers the remaining space, and there may not be enough even for a non-nested/non-recursive thread pool work item. In that situation, `StackGuard.RunOnEmptyStackCore` is triggered again from its continuation and keeps doing so since `TryEnsureSufficientExecutionStack` always returns false.\r\n\r\nThis appears to be the continuation triggered by `RunOnEmptyStackCore`, which triggers itself continually:\r\nhttps://github.com/dotnet/runtime/blob/16300e0aee3392bc604b258db0901d9047e80f7c/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Compiler/StackSpiller.Generated.cs#L16-L28\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekouvel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ekouvel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-17T23:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45-Hp_",
                                           "createdAt":  "2021-11-18T06:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kouvel",
                                           "body":  "Repro is on an Ubuntu 20.04 VM, to run the System.Linq.Expressions tests with the following environment variable set (128 KB stack size for threads):\r\n\u003e `COMPlus_DefaultStackSize=0x20000`\r\n\r\n`dotnet build /p:Configuration=Release /t:Test` from `src/libraries/System.Linq.Expressions/tests` appears to hang for the same reason when the env var is set, and running the tests directly with the build output also hangs with some tests reported as long-running:\r\n\r\n```\r\n   System.Linq.Expressions.Tests: [Long Running Test] \u0027System.Linq.Expressions.Tests.LiftedSubtractNullableTests.CheckLiftedSubtractNullableULongTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.AsTests.CheckCustomArrayAsIEnumerableOfInterfaceTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.ListBindTests.NonAddableListType\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.Assign.ReferenceAssignable\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.ConvertTests.ConvertNullableDoubleToNullableEnumTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.MemberInitTests.Reduce\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Dynamic.Tests.BindingRestrictionsTests.TypeRestrictionTrueForMatchType\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.ConvertCheckedTests.ConvertCheckedNullableFloatToSByteTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Dynamic.Tests.ExpandoObjectProxyTests.KeyCollectionCorrectlyViewed\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.LiftedMultiplyCheckedNullableTests.CheckLiftedMultiplyCheckedNullableSByteTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.BinaryNullableAndTests.CheckNullableULongAndTest\u0027, Elapsed: 00:02:11\r\n[Long Running Test] \u0027System.Linq.Expressions.Tests.LambdaMultiplyTests.LambdaMultiplyUShortTest\u0027, Elapsed: 00:02:11\r\n```\r\n\r\nI attempted something simple, just to avoid checking the `StackGuard` when the queued work item runs, but it doesn\u0027t seem to be enough to fix the hang, I guess it may be more involved.",
                                           "updatedAt":  "2021-11-18T06:49:56Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "When threads have low free stack space, `StackSpiller` may infinite-loop through the thread pool",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79016",
        "createdAt":  "2022-11-30T01:25:09Z",
        "number":  79016,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrqxTg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2022-11-30T01:55:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-11-30T04:57:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-01-04T17:50:31Z",
        "body":  "When we annotated the `System.Linq.Expressions` for trimming we ran into a hard to solve problem with custom operators. The library will access custom operator methods via reflection in various places without a good way to track this via annotations or other means. \r\nOne of the goals was to make it possible to trim any expression tree construction code generated by the compiler. Unfortunately the compiler uses the overloads which do not specify the custom operator method as a parameter and instead it relies on code in the `Expression` class to find the custom operator on the target type (via reflection). For example for expression `-x` the compiler will generate a call to `Expression.Negate(Expression.Parameter(\"x\"))`.\r\n\r\nWe discussed a possibility of changing the compiler with the compiler team. The outcome is that the compiler team doesn\u0027t want to make this change in the compiler (to call the overloads which take `MethodInfo` - which would look like `Expression.Negate(Expression.Parameter(\"x\"), methodInfo)`).\r\n\r\nIn .NET 6 and 7 the trimmer implemented a workaround for this. If the app uses `System.Linq.Expressions.Expression` type it will preserve all custom operators on all preserved types (there are some additional optimizations, but they\u0027re not interesting for this discussion). Due to this we were able to suppress the trim analysis warning generated in the library. See https://github.com/dotnet/runtime/blob/9d6396deb02161f5ee47af72ccac52c2e1bae458/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L355-L357\r\n\r\nThe proposal is to change this workaround to recognize the method [`Expression.GetUserDefinedUnaryOperatorOrThrow`](https://github.com/dotnet/runtime/blob/9d6396deb02161f5ee47af72ccac52c2e1bae458/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L344) as intrinsic (or basically known method) for the trimmer. So instead of relying on presence of the `Expression` type, make it more specific and only preserve custom operators on preserved types when the method `Expression.GetUserDefinedOperatorOrThrow` is actually called by the application. In addition, all the calls to this method pass a constant string as the name of the operator method, so the trimmer could only preserve the custom operators which are actually potentially used (by collecting the constant strings from all callsites).\r\n\r\nThe advantages of this change:\r\n* More precise detection of the case where we need to preserve custom operators on types -\u003e smaller apps which don\u0027t need the custom operators\r\n* More precise detection of custom operators which need to be preserved -\u003e smaller apps even if they do need some custom operators\r\n* Potential for additional analysis improvements in the trimmer to eventually make the code fully analyzable and remove the warning suppression in the libraries (it\u0027s unclear what the complexity of that would be, but this change makes it possible).\r\n* There\u0027s also reduced complexity of the implementation of this behavior in the trimmer mainly because it has rich infrastructure for detection and handling of intrinsic method calls. The current implementation relying on type existence is \"special\"\r\n\r\nThe disadvantages:\r\n* Effectively making `Expression.GetUserDefinedUnaryOperatorOrThrow` a \"semi-public\" API - meaning we should not change it in any way (if we do we break tools, so possible but complex).\r\n\r\n@MichalStrehovsky (the original author of this idea), @sbomer, @agocke, @eerhardt , @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUbtwig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PXYE0",
                                           "createdAt":  "2022-11-30T01:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen we annotated the `System.Linq.Expressions` for trimming we ran into a hard to solve problem with custom operators. The library will access custom operator methods via reflection in various places without a good way to track this via annotations or other means. \r\nOne of the goals was to make it possible to trim any expression tree construction code generated by the compiler. Unfortunately the compiler uses the overloads which do not specify the custom operator method as a parameter and instead it relies on code in the `Expression` class to find the custom operator on the target type (via reflection). For example for expression `-x` the compiler will generate a call to `Expression.Negate(Expression.Parameter(\"x\"))`.\r\n\r\nWe discussed a possibility of changing the compiler with the compiler team. The outcome is that the compiler team doesn\u0027t want to make this change in the compiler (to call the overloads which take `MethodInfo` - which would look like `Expression.Negate(Expression.Parameter(\"x\"), methodInfo)`).\r\n\r\nIn .NET 6 and 7 the trimmer implemented a workaround for this. If the app uses `System.Linq.Expressions.Expression` type it will preserve all custom operators on all preserved types (there are some additional optimizations, but they\u0027re not interesting for this discussion). Due to this we were able to suppress the trim analysis warning generated in the library. See https://github.com/dotnet/runtime/blob/9d6396deb02161f5ee47af72ccac52c2e1bae458/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L355-L357\r\n\r\nThe proposal is to change this workaround to recognize the method [`Expression.GetUserDefinedUnaryOperatorOrThrow`](https://github.com/dotnet/runtime/blob/9d6396deb02161f5ee47af72ccac52c2e1bae458/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L344) as intrinsic (or basically known method) for the trimmer. So instead of relying on presence of the `Expression` type, make it more specific and only preserve custom operators on preserved types when the method `Expression.GetUserDefinedOperatorOrThrow` is actually called by the application. In addition, all the calls to this method pass a constant string as the name of the operator method, so the trimmer could only preserve the custom operators which are actually potentially used (by collecting the constant strings from all callsites).\r\n\r\nThe advantages of this change:\r\n* More precise detection of the case where we need to preserve custom operators on types -\u003e smaller apps which don\u0027t need the custom operators\r\n* More precise detection of custom operators which need to be preserved -\u003e smaller apps even if they do need some custom operators\r\n* Potential for additional analysis improvements in the trimmer to eventually make the code fully analyzable and remove the warning suppression in the libraries (it\u0027s unclear what the complexity of that would be, but this change makes it possible).\r\n* There\u0027s also reduced complexity of the implementation of this behavior in the trimmer mainly because it has rich infrastructure for detection and handling of intrinsic method calls. The current implementation relying on type existence is \"special\"\r\n\r\nThe disadvantages:\r\n* Effectively making `Expression.GetUserDefinedUnaryOperatorOrThrow` a \"semi-public\" API - meaning we should not change it in any way (if we do we break tools, so possible but complex).\r\n\r\n@MichalStrehovsky (the original author of this idea), @sbomer, @agocke, @eerhardt , @stephentoub \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-30T01:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PXYLx",
                                           "createdAt":  "2022-11-30T01:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The question is basically: Is it OK to hardcode a dependency on the `Expression.GetUserDefinedUnaryOperatorOrThrow` method into the trimmer tools?",
                                           "updatedAt":  "2022-11-30T01:25:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PXcaG",
                                           "createdAt":  "2022-11-30T01:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "My justification for why it would be okay to hardcode the dependency is in the snippet Vitek quoted below: `The trimmer doesn\u0027t remove operators when System.Linq.Expressions is used.`. The suppression in S.L.Expression already hardcodes a dependency on trimming\u0027s internal implementation detail for this. Therefore it should be fine for this dependency to go both ways and turn the suppression into a two way contract that can be reasoned about.\r\n\r\nIt\u0027s a heuristic in the trimming logic right now that is hard to replicate in AOT (there\u0027s no \"a type definition for System.Linq.Expressions.Expression was generated\" that would be a reliable indicator).\r\n\r\nWe tried to avoid having the S.L.Expression side of the contract in https://github.com/dotnet/linker/issues/1821 but that didn\u0027t work out. So I would at least make lemonade out of that lemon.",
                                           "updatedAt":  "2022-11-30T01:55:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PXnVw",
                                           "createdAt":  "2022-11-30T03:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e The disadvantages: Effectively making Expression.GetUserDefinedUnaryOperatorOrThrow a \"semi-public\" API - meaning we should not change it in any way (if we do we break tools, so possible but complex).\r\n\r\nWhat if we actually made it public?  Is this the API we\u0027d want, would it fully solve the problem, does exposing it publicly expose implementation details we wouldn\u0027t want exposed, etc?  It\u0027s just easier to avoid breaking things when we can rely on all of our normal mechanisms to do so.",
                                           "updatedAt":  "2022-11-30T03:12:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PaJge",
                                           "createdAt":  "2022-11-30T14:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e What if we actually made it public? Is this the API we\u0027d want, would it fully solve the problem, does exposing it publicly expose implementation details we wouldn\u0027t want exposed, etc? It\u0027s just easier to avoid breaking things when we can rely on all of our normal mechanisms to do so.\r\n\r\nI don\u0027t think we would want to make fully public API - in the sense that we document it and so on. We could make it public but not include it in the ref assembly. I can\u0027t remember if we use this approach elsewhere or if it\u0027s not something we want to do in general.\r\n\r\nIf we were to make it into a fully public feature, then we would probably want something more general - so move the method to a different class and rename it. I personally don\u0027t see much value in doing so though - I\u0027m no aware of any other use case for this functionality outside of Linq.Expressions. (The other library which probably has similar logic in it is Microsoft.CSharp, but that one will never be trim compatible, and solving the trim compatibility just for unary operators would basically not help at all)\r\n\r\nI would like to hear from the owners of the Linq.Expressions as well.",
                                           "updatedAt":  "2022-11-30T14:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PnMMX",
                                           "createdAt":  "2022-12-02T18:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e We discussed a possibility of changing the compiler with the compiler team. The outcome is that the compiler team doesn\u0027t want to make this change in the compiler (to call the overloads which take MethodInfo - which would look like Expression.Negate(Expression.Parameter(\"x\"), methodInfo)).\r\n\r\nWhere did this discussion happen? \r\n\r\nThe only recollection I have on this is a few releases ago where we were asked to change codegen around `Expression` creation to avoid reflection paths. My memory of that isn\u0027t that we said \"no\" but that we said \"not a priority at the moment\". Having trouble though tracking down the exact issues where we had this discussion.\r\n",
                                           "updatedAt":  "2022-12-02T18:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PnQKM",
                                           "createdAt":  "2022-12-02T19:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Where did this discussion happen?\r\n\r\n\u003e The only recollection I have on this is a few releases ago where we were asked to change codegen around Expression creation to avoid reflection paths. My memory of that isn\u0027t that we said \"no\" but that we said \"not a priority at the moment\". Having trouble though tracking down the exact issues where we had this discussion.\r\n\r\nThat was the discussion - it happened in .NET 6 timeframe when we were annotating Expressions. I can\u0027t find the issue either (I do remember that it happened somewhere though).",
                                           "updatedAt":  "2022-12-02T19:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PnXbv",
                                           "createdAt":  "2022-12-02T19:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Where did this discussion happen?\r\n\r\nhttps://github.com/dotnet/linker/issues/1821#issuecomment-779584135",
                                           "updatedAt":  "2022-12-02T19:30:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pnoso",
                                           "createdAt":  "2022-12-02T20:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "The [conclusion](https://github.com/dotnet/linker/issues/1821#issuecomment-782284973) from that discussion was: \r\n\r\n\u003e Believe this is relatively doable in the compiler. There are a few choke points in the expression rewriter that we could leverage to call the new methods. Probably the biggest issue is validating the assumption that whenever there is a user defined operator that we do indeed pass a MethodInfo along with it.\r\n\r\n\u003e Whenever making expression tree changes though, even if it\u0027s intended to be a no-op, we need to involve the EF Core team. They have the heaviest dependency on expression trees and can validate if the new structure does / doesn\u0027t work for them.\r\n\r\n\u003e Probably a small / medium feature in the compiler.\r\n\r\nI don\u0027t know how this is translating to compiler isn\u0027t going to do this. It just wasn\u0027t at the right priority level two releases ago. I\u0027d rather we put this into the prioritization bucket then push forward old decisions without discussion. ",
                                           "updatedAt":  "2022-12-02T20:07:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PnuPP",
                                           "createdAt":  "2022-12-02T20:29:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "My recollection actually matches Jared\u0027s. At the time we needed something that would work in the near term and was relatively cheap to implement. The linker approach seemed simple at the time and we didn\u0027t need to go through API review, which I think was perceived to be the biggest cost of this change.\r\n\r\nI think it\u0027s definitely worth revisiting this now, at the beginning of .NET 8, to see if we\u0027d prefer to redouble our efforts to move to a trimmable-by-design LINQ design.",
                                           "updatedAt":  "2022-12-02T20:29:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pn1dh",
                                           "createdAt":  "2022-12-02T21:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwm3CQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2022-12-02T21:18:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "My apologies @jaredpar - obviously my memory was wrong.\r\nIt would be great if the compiler could help us here.\r\n\r\nWhat do we think about supporting binaries compiled with the older version? I think the tooling still needs to support it - probably for a rather long time. The proposal in this issue would simplify such support (and make it more precise).",
                                           "updatedAt":  "2022-12-02T21:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pn2xk",
                                           "createdAt":  "2022-12-02T21:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e What do we think about supporting binaries compiled with the older version? \r\n\r\nNot really sure how important this is. Maybe something I would want to find out with customer response, or try to scan the IL from popular NuGet packages.",
                                           "updatedAt":  "2022-12-02T21:10:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pn4jB",
                                           "createdAt":  "2022-12-02T21:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@vitek-karas \r\n\r\nNo problem. It took me a good 30 minutes to page in my memories as it was :smile: \r\n\r\n\u003e What do we think about supporting binaries compiled with the older version? \r\n\r\nThe other parts of the trimming work I\u0027m involved in I believe only work when you move to a new target framework. Or at least use a new compiler / SDK. That would seem to indicate that older binaries weren\u0027t as important. But I also realize I that I\u0027m only seeing a smaller piece of the puzzle here. \r\n",
                                           "updatedAt":  "2022-12-02T21:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pn5WC",
                                           "createdAt":  "2022-12-02T21:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "My main concern is libraries (NuGets) which are not affected by the SDK version used to build the app. The proposal here would work in that case as well (Since it\u0027s tied to a TFM/Framework assembly and that will work just fine). But if we implement a compiler solution, it will not solve it for already compiled binaries.\r\nOn top of that, quite a few NuGets may not be built with latest SDKs, mainly because they target older TFMs anyway.\r\n\r\nBut I agree it\u0027s likely not a big problem.",
                                           "updatedAt":  "2022-12-02T21:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pn8YZ",
                                           "createdAt":  "2022-12-02T21:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Had to re-read the original issue and it reminded me this is tied to new APIs. So it\u0027s not just a new SDK, it\u0027s a new TFM + SDK. That is indeed a bigger hurdle than I was thinking.",
                                           "updatedAt":  "2022-12-02T21:42:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PofRH",
                                           "createdAt":  "2022-12-03T02:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e quite a few NuGets may not be built with latest SDKs, mainly because they target older TFMs anyway\r\n\r\nIf a NuGet is not trim compatible as is, it is fine to require recompilation with latest SDK and switching to new trim-compatible API if it is the right way to fix the trimming issues.\r\n\r\nIf it is straightforward to make a new trimming-related feature work downlevel (e.g. it is just a new custom attribute annotation), it makes sense to allow it work downlevel. If it is not, the feature should be available in latest SDK/runtime only and people have to update to get it. We have been applying this principle in number of situations, for example many of the source generators that are required to fix trimming issues are not available downlevel.",
                                           "updatedAt":  "2022-12-03T02:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ru3CK",
                                           "createdAt":  "2023-01-04T17:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Hopefully we can solve this with a compiler change to make Linq.Expression code more trimming/AOT compatible.\r\n\r\nBut if we can\u0027t, and are still looking for feedback on the original proposal here, note that we will need to make more than just  [`Expression.GetUserDefinedUnaryOperatorOrThrow`](https://github.com/dotnet/runtime/blob/9d6396deb02161f5ee47af72ccac52c2e1bae458/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L344) as intrinsic. That only handles unary operators. We would also need to make binary, coercion, and boolean operators as intrinsic as well:\r\n\r\nhttps://github.com/dotnet/runtime/blob/7bbee52b2aaa22f3116b96aedb6a758a2d5bd63b/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs#L713-L715\r\n\r\nhttps://github.com/dotnet/runtime/blob/7bbee52b2aaa22f3116b96aedb6a758a2d5bd63b/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeUtils.cs#L626-L628\r\n\r\nhttps://github.com/dotnet/runtime/blob/7bbee52b2aaa22f3116b96aedb6a758a2d5bd63b/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeUtils.cs#L833-L835",
                                           "updatedAt":  "2023-01-04T17:50:30Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Change trimming workaround for Linq.Expressions usage of custom operators",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79726",
        "createdAt":  "2022-12-16T00:52:29Z",
        "number":  79726,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-14T05:33:43Z",
        "body":  "We should add an MSBuild property to allow turning this off and get rid of the IL emit backend.\r\n\r\nWe could optionally also expose a more general purpose `\u003cOptimizationPreference\u003eSize\u003c/OptimizationPreference\u003e` property that would enable this one (and maybe others if we find more opportunities).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUOH67A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QtKyS",
                                           "createdAt":  "2022-12-16T00:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should add an MSBuild property to allow turning this off and get rid of the IL emit backend.\r\n\r\nWe could optionally also expose a more general purpose `\u003cOptimizationPreference\u003eSize\u003c/OptimizationPreference\u003e` property that would enable this one (and maybe others if we find more opportunities).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-16T00:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Quzz-",
                                           "createdAt":  "2022-12-16T09:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e We could optionally also expose a more general purpose `\u003cOptimizationPreference\u003eSize\u003c/OptimizationPreference\u003e` property that would enable this one (and maybe others if we find more opportunities).\r\n\r\nYes please, I had mentioned it some time ago. Another use case for it would be LINQ, which uses a smaller but less optimized implementation on WASM.",
                                           "updatedAt":  "2022-12-16T09:27:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q4frs",
                                           "createdAt":  "2022-12-19T02:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Another use case for it would be LINQ, which uses a smaller but less optimized implementation on WASM.\r\n\r\nIf you have a proposal for how that would be possible, I would be very interested in a feature switch for that (should be discussed in a separate issue). Currently it\u0027s only possible to build that flavor at C# compile time and it didn\u0027t look trivial to convert to feature switch (but I could be proved wrong on that).",
                                           "updatedAt":  "2022-12-19T02:07:29Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Expose System.Linq.Expressions.CanCompileToIL feature switch",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79799",
        "createdAt":  "2022-12-18T19:33:54Z",
        "number":  79799,
        "author":  "frederik-hoeft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-20T12:16:36Z",
        "body":  "Not sure if this a weird quirk of the implementation or intentional behavior, but `Expression.Assign` seems to behave differently than what the corresponding `SetValue` methods provided by `FieldInfo` and `PropertyInfo` allow. \r\n\r\nGiven the following test setup:\r\n\r\n```csharp\r\nclass C\r\n{\r\n    public int Value { get; }\r\n\r\n    public C(int value)\r\n    {\r\n        Value  = value;\r\n    }\r\n}\r\n\r\nrecord R(int Value);\r\n\r\nstatic class BackingFieldResolver\r\n{\r\n    public static FieldInfo? GetBackingField(this PropertyInfo propertyInfo) =\u003e\r\n        propertyInfo.DeclaringType?.GetField($\"\u003c{propertyInfo.Name}\u003ek__BackingField\",\r\n            BindingFlags.Instance | BindingFlags.NonPublic);\r\n}\r\n```\r\n\r\nHere\u0027s what is allowed using reflection\r\n\r\n```csharp\r\nPropertyInfo pc = typeof(C).GetProperty(C.Value);\r\nFieldInfo fc = pc.GetBackingField();\r\n\r\nPropertyInfo pr = typeof(R).GetProperty(R.Value);\r\nFieldInfo fr = pr.GetBackingField();\r\n\r\nC c = new(1);\r\nR r = new(1);\r\n\r\npc.SetValue(c, 2); // \u0027Property set method not found.\u0027\r\nfc.SetValue(c, 2); // Ok\r\n\r\npr.SetValue(r, 2); // Ok\r\nfr.SetValue(r, 2); // Ok\r\n```\r\n\r\nOnly trying to write to the get-only class property causes an exception to be thrown.\r\n\r\nComparing these results to expression trees:\r\n\r\n```csharp\r\nvar cParam = Expression.Parameter(typeof(C));\r\nvar rParam = Expression.Parameter(typeof(R));\r\nvar valueParam = Expression.Parameter(typeof(int));\r\n\r\nAction\u003cC, int\u003e cSetProperty = Expression.Lambda\u003cAction\u003cC, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Property(\r\n            cParam,\r\n            pc),\r\n        valueParam),\r\n    cParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cC, int\u003e cSetField = Expression.Lambda\u003cAction\u003cC, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Field(\r\n            cParam,\r\n            fc),\r\n        valueParam),\r\n    cParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cR, int\u003e rSetProperty = Expression.Lambda\u003cAction\u003cR, int\u003e\u003e(\r\n    Expression.Assign(  // Ok\r\n        Expression.Property(\r\n            rParam,\r\n            pr),\r\n        valueParam),\r\n    rParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cR, int\u003e rSetField = Expression.Lambda\u003cAction\u003cR, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Field(\r\n            rParam,\r\n            fr),\r\n        valueParam),\r\n    rParam,\r\n    valueParam).Compile();\r\n```\r\n\r\nHere the behavior is different. For the get-only property this makes sense to me, but I wonder why it is allowed to Assign a value to the record\u0027s init-only property (even after initialization), but trying to write to the backing field causes an exception to be thrown?\r\n\r\nWondering whether this is intentional behavior, and if so, why it was implemented like this. The checks for `Expression.Assign()` happen in [RequiresCanWrite](https://github.com/dotnet/runtime/blob/215b39abf947da7a40b0cb137eab4bceb24ad3e3/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs#L241). Maybe it\u0027s just me, but this behavior feels a bit inconsistent, especially considering that using a non-dynamic approach like `r.Value = 123` or `c.Value = 123` is not allowed at all by the compiler (because of read/init only properties) while runtime IL emission obviously by-passes all access validation and allows assignment no matter what.\r\n\r\nWhile this is probably far from being even somewhat urgent, I do find it interesting that four different approaches lead to completely different results (okay maybe Reflection.Emit doesn\u0027t count, but still) :)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUQTcUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Q4Az_",
                                           "createdAt":  "2022-12-18T19:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNot sure if this a weird quirk of the implementation or intentional behavior, but `Expression.Assign` seems to behave differently than what the corresponding `SetValue` methods provided by `FieldInfo` and `PropertyInfo` allow. \r\n\r\nGiven the following test setup:\r\n\r\n```csharp\r\nclass C\r\n{\r\n    public int Value { get; }\r\n\r\n    public C(int value)\r\n    {\r\n        Value  = value;\r\n    }\r\n}\r\n\r\nrecord R(int Value);\r\n\r\nstatic class BackingFieldResolver\r\n{\r\n    public static FieldInfo? GetBackingField(this PropertyInfo propertyInfo) =\u003e\r\n        propertyInfo.DeclaringType?.GetField($\"\u003c{propertyInfo.Name}\u003ek__BackingField\",\r\n            BindingFlags.Instance | BindingFlags.NonPublic);\r\n}\r\n```\r\n\r\nHere\u0027s what is allowed using reflection\r\n\r\n```csharp\r\nPropertyInfo pc = typeof(C).GetProperty(C.Value);\r\nFieldInfo fc = pc.GetBackingField();\r\n\r\nPropertyInfo pr = typeof(R).GetProperty(R.Value);\r\nFieldInfo fr = pr.GetBackingField();\r\n\r\nC c = new(1);\r\nR r = new(1);\r\n\r\npc.SetValue(c, 2); // \u0027Property set method not found.\u0027\r\nfc.SetValue(c, 2); // Ok\r\n\r\npr.SetValue(r, 2); // Ok\r\nfr.SetValue(r, 2); // Ok\r\n```\r\n\r\nOnly trying to write to the get-only class property causes an exception to be thrown.\r\n\r\nComparing these results to expression trees:\r\n\r\n```csharp\r\nvar cParam = Expression.Parameter(typeof(C));\r\nvar rParam = Expression.Parameter(typeof(R));\r\nvar valueParam = Expression.Parameter(typeof(int));\r\n\r\nAction\u003cC, int\u003e cSetProperty = Expression.Lambda\u003cAction\u003cC, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Property(\r\n            cParam,\r\n            pc),\r\n        valueParam),\r\n    cParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cC, int\u003e cSetField = Expression.Lambda\u003cAction\u003cC, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Field(\r\n            cParam,\r\n            fc),\r\n        valueParam),\r\n    cParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cR, int\u003e rSetProperty = Expression.Lambda\u003cAction\u003cR, int\u003e\u003e(\r\n    Expression.Assign(  // Ok\r\n        Expression.Property(\r\n            rParam,\r\n            pr),\r\n        valueParam),\r\n    rParam,\r\n    valueParam).Compile();\r\n\r\nAction\u003cR, int\u003e rSetField = Expression.Lambda\u003cAction\u003cR, int\u003e\u003e(\r\n    Expression.Assign( // \u0027Expression must be writeable (Parameter \u0027left\u0027)\u0027\r\n        Expression.Field(\r\n            rParam,\r\n            fr),\r\n        valueParam),\r\n    rParam,\r\n    valueParam).Compile();\r\n```\r\n\r\nHere the behavior is different. For the get-only property this makes sense to me, but I wonder why it is allowed to Assign a value to the record\u0027s init-only property (even after initialization), but trying to write to the backing field causes an exception to be thrown?\r\n\r\nWondering whether this is intentional behavior, and if so, why it was implemented like this. The checks for `Expression.Assign()` happen in [RequiresCanWrite](https://github.com/dotnet/runtime/blob/215b39abf947da7a40b0cb137eab4bceb24ad3e3/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs#L241). Maybe it\u0027s just me, but this behavior feels a bit inconsistent, especially considering that using a non-dynamic approach like `r.Value = 123` or `c.Value = 123` is not allowed at all by the compiler (because of read/init only properties) while runtime IL emission obviously by-passes all access validation and allows assignment no matter what.\r\n\r\nWhile this is probably far from being even somewhat urgent, I do find it interesting that four different approaches lead to completely different results (okay maybe Reflection.Emit doesn\u0027t count, but still) :)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efrederik-hoeft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-18T19:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q4CIz",
                                           "createdAt":  "2022-12-18T20:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "To get to the core of the issue, you\u0027re effectively asking why `Expression.Assign` can\u0027t write to a `readonly` field. I think that\u0027s because expression trees are high-level and so don\u0027t allow things that you\u0027re not supposed to be doing.\r\n\r\nOn the other hand, reflection is low-level, which is why it\u0027s more lenient.",
                                           "updatedAt":  "2022-12-18T20:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q7bIg",
                                           "createdAt":  "2022-12-19T14:28:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "frederik-hoeft",
                                           "body":  "@svick Thanks for your reply. Though my question isn\u0027t about why `Expression.Assign` doesn\u0027t allow us to do \"illegal\" things like writing to readonly fields but rather why the concept of readonly/init only is enforced so differently in different components of the runtime (and in that regard why expression trees even allow setting an init-only property after object initialization in the first place).\r\n\r\nIt just seemed a bit inconsistent to me when I stumbled across this behavior (in the context of ORM) which is why I asked for clarification.\r\n\r\nI do understand your point that reflection, being a more low-level concept, is more forgiving in these regards.\r\n\r\nI assume init-only properties are writable then due to technical limitations, as there is no way of tracking the \"initialization state\"  of an object in an expression tree as the compiler can do in the source code?",
                                           "updatedAt":  "2022-12-19T14:32:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RBNxQ",
                                           "createdAt":  "2022-12-20T12:14:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If Expression.RequiresCanWrite were changed to throw when the property is init-only, then that would affect [Expression.Assign](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression.assign?view=net-6.0), but initialization would still be allowed via [Expression.Bind](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression.bind?view=net-6.0) and [Expression.MemberInit](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression.memberinit?view=net-6.0), which do not call RequiresCanWrite. In my opinion, such a change would make sense, but I don\u0027t know how high the compatibility risk would be.\r\n\r\nMicrosoft.CSharp already checks for the `IsExternalInit` modifier:\r\n\u003chttps://github.com/dotnet/runtime/blob/ac03fbd184b182a6632a50bbe70bc733e487264c/src/libraries/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/Tree/Property.cs#L49-L54\u003e",
                                           "updatedAt":  "2022-12-20T12:16:36Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Expression.Assign vs Reflection inconsistent behavior for get- and init-only properties",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86629",
        "createdAt":  "2023-05-23T09:10:53Z",
        "number":  86629,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-10T22:21:01Z",
        "body":  "```csharp\r\nunsafe\r\n{\r\n    Expression\u003cTransform\u003e ex = f =\u003e f;\r\n\r\n    // This works\r\n    ex.Compile()(\u0026Method);\r\n\r\n    // This throws\r\n    ex.Compile(preferInterpretation: true)(\u0026Method);\r\n}\r\n\r\nstatic void Method() { }\r\n\r\nunsafe delegate delegate*\u003cvoid\u003e Transform(delegate*\u003cvoid\u003e fn);\r\n```\r\n\r\nWe first get a first chance exception here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c5cfd7b97f904e38c2d8daf28e8f2c99c8528603/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/DelegateHelpers.cs#L148\r\n\r\nThat one is caught and handled, but avoidable (need to check `IsFunctionPointer` above).\r\n\r\nThen we get an ExecutionEngineException that is fatal.\r\n\r\nIf I replace the function pointer with a normal pointer, this fails much earlier with a reasonable message (pointers are not supported).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY8WzWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5c6oDD",
                                           "createdAt":  "2023-05-23T09:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\nunsafe\r\n{\r\n    Expression\u003cTransform\u003e ex = f =\u003e f;\r\n\r\n    // This works\r\n    ex.Compile()(\u0026Method);\r\n\r\n    // This throws\r\n    ex.Compile(preferInterpretation: true)(\u0026Method);\r\n}\r\n\r\nstatic void Method() { }\r\n\r\nunsafe delegate delegate*\u003cvoid\u003e Transform(delegate*\u003cvoid\u003e fn);\r\n```\r\n\r\nWe first get a first chance exception here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c5cfd7b97f904e38c2d8daf28e8f2c99c8528603/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/DelegateHelpers.cs#L148\r\n\r\nThat one is caught and handled, but avoidable (need to check `IsFunctionPointer` above).\r\n\r\nThen we get an ExecutionEngineException that is fatal.\r\n\r\nIf I replace the function pointer with a normal pointer, this fails much earlier with a reasonable message (pointers are not supported).\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-23T09:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jxbNb",
                                           "createdAt":  "2023-08-10T20:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Just to clarify:\r\n\r\nIn v7, both `ex.Compile()(\u0026Method);` and `ex.Compile(preferInterpretation: true)(\u0026Method);` fail with\r\n    ```System.ArgumentException: \u0027Cannot bind to the target method because its signature is not compatible with that of the delegate type.``` \r\n\r\nIn v8 RC1, `ex.Compile()(\u0026Method);` succeeds but `ex.Compile(preferInterpretation: true)(\u0026Method);` fails with:\r\n    ```System.ExecutionEngineException: \u0027Exception of type \u0027System.ExecutionEngineException\u0027 was thrown.\u0027```\r\n",
                                           "updatedAt":  "2023-08-10T20:52:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Linq expression interpreter doesn\u0027t handle function pointers",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96160",
        "createdAt":  "2023-12-19T04:39:53Z",
        "number":  96160,
        "author":  "leandromoh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-14T05:31:26Z",
        "body":  "### Description\r\n\r\nWhen upgraded an existing application that uses C# expression tree and AOT to use dotnet 8 some unit tests failed. After some investigation and few tests with expression tree in apart console application I could reproduce the same error using the following code:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/11452028/85453b95-8c17-4f9f-832f-a54e763e100a)\r\n\r\nseems the problems only happens if the parameter of the function is a `ReadOnlySpan\u003cchar\u003e` AND if building using dotnet 8. If I change any of these things (replace span by string or building using dotnet 7) everything work as expected.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nIn a .NET 8 app with Native AOT enabled (`\u003cPublishAot\u003etrue\u003c/PublishAot\u003e`) run the following code:\r\n\r\n```c#\r\n\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\npublic class Program\r\n{\r\n    delegate T Parse\u003cT\u003e(ReadOnlySpan\u003cchar\u003e text);\r\n\r\n    private static Parse\u003cT\u003e ReturnDefault\u003cT\u003e()\r\n    {\r\n        var line = Expression.Parameter(typeof(ReadOnlySpan\u003cchar\u003e), \"span\");\r\n\r\n        var result = Expression.Lambda\u003cParse\u003cT\u003e\u003e(Expression.Default(typeof(T)), line);\r\n\r\n        return result.Compile();\r\n    }\r\n\r\n    public static void Main()\r\n    {\r\n        var func = ReturnDefault\u003c(int age, bool isAlive, DateTime date)\u003e();\r\n\r\n        var yy = func(\"foo bar\");\r\n\r\n        Console.WriteLine(yy);\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\noutput `(0, False, 01/01/0001 00:00:00)`\r\n\r\n### Actual behavior\r\n\r\n```\r\nSystem.InvalidProgramException: \u0027Common Language Runtime detected an invalid program.\u0027\r\n   at Thunk1ret_ValueTuple`3_ReadOnlySpan`1(Func`2, ReadOnlySpan`1)\r\n   at ConsoleApp2.Program.Main() in C:\\Users\\leandro\\Desktop\\workspace\\ConsoleApp1\\ConsoleApp2\\Program.cs:line 26\r\n```\r\n\r\n### Regression?\r\n\r\nit works in net 7.0 + AOT\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb62Dxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u_X5S",
                                           "createdAt":  "2023-12-19T04:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen upgraded an existing application that uses C# expression tree and AOT to use dotnet 8 some unit tests failed. After some investigation and few tests with expression tree in apart console application and got the same error using the following code:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/11452028/85453b95-8c17-4f9f-832f-a54e763e100a)\r\n\r\nseems the problems only happens if the parameter of the function is a `ReadOnlySpan\u003cchar\u003e` AND if building using dotnet 8. If I change any of these things (replace span by string or building using dotnet 7) everything work as expected.\r\n\n\n### Reproduction Steps\n\nIn a .NET 8 app with Native AOT enabled (`\u003cPublishAot\u003etrue\u003c/PublishAot\u003e`) run the following code:\r\n\r\n```c#\r\n\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\npublic class Program\r\n{\r\n    delegate T Parse\u003cT\u003e(ReadOnlySpan\u003cchar\u003e text);\r\n\r\n    private static Parse\u003cT\u003e ReturnDefault\u003cT\u003e()\r\n    {\r\n        var line = Expression.Parameter(typeof(ReadOnlySpan\u003cchar\u003e), \"span\");\r\n\r\n        var result = Expression.Lambda\u003cParse\u003cT\u003e\u003e(Expression.Default(typeof(T)), line);\r\n\r\n        return result.Compile();\r\n    }\r\n\r\n    public static void Main()\r\n    {\r\n        var func = ReturnDefault\u003c(int age, bool isAlive, DateTime date)\u003e();\r\n\r\n        var yy = func(\"foo bar\");\r\n\r\n        Console.WriteLine(yy);\r\n        return;\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\noutput `(0, False, 01/01/0001 00:00:00)`\n\n### Actual behavior\n\n```\r\nSystem.InvalidProgramException: \u0027Common Language Runtime detected an invalid program.\u0027\r\n   at Thunk1ret_ValueTuple`3_ReadOnlySpan`1(Func`2, ReadOnlySpan`1)\r\n   at ConsoleApp2.Program.Main() in C:\\Users\\leandro\\Desktop\\workspace\\ConsoleApp1\\ConsoleApp2\\Program.cs:line 26\r\n```\n\n### Regression?\n\nit works in net 7.0 + AOT\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eleandromoh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-19T04:40:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u_3cA",
                                           "createdAt":  "2023-12-19T07:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "This can be reproduced without NativeAOT if you change `result.Compile()` to `result.Compile(true)`.\r\nThe exception was thrown due to boxed ByRef-like values, so seems like a ExpressionTree interpreter bug.",
                                           "updatedAt":  "2023-12-19T07:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vAXok",
                                           "createdAt":  "2023-12-19T09:00:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This repro doesn\u0027t work in .NET 7 either:\r\n\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Operation is not valid due to the current state of the object.\r\n   at System.Delegate.CreateObjectArrayDelegate(Type, Func`2) + 0x12d\r\n   at Internal.Runtime.Augments.DynamicDelegateAugments.CreateObjectArrayDelegate(Type delegateType, Func`2 invoker) + 0x26\r\n   at exprs!\u003cBaseAddress\u003e+0x36b190\r\n   at System.Dynamic.Utils.DelegateHelpers.CreateObjectArrayDelegate(Type, Func`2) + 0x54\r\n   at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate(Type) + 0xf9\r\n   at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate(IStrongBox[]) + 0x71\r\n   at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate() + 0x20\r\n   at System.Linq.Expressions.Expression`1.Compile() + 0x70\r\n   at Program.ReturnDefault[T]() + 0xe4\r\n   at Program.Main() + 0x37\r\n```\r\n\r\nI agree with @hez2010 - this looks like an expression interpreter bug. But it\u0027s likely the fix for this will be just to generate a better exception message (instead of trying to box a span and hope the runtime will not allow it).\r\n\r\nLINQ expressions on Native AOT run on top of an interpreter because it\u0027s fundamentally not possible to generate new code at runtime. If you\u0027re using expressions for perf, on native AOT you\u0027d be better off using reflection. The expression interpreter uses reflection, but with extra steps.",
                                           "updatedAt":  "2023-12-19T09:00:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vB6ue",
                                           "createdAt":  "2023-12-19T13:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leandromoh",
                                           "body":  "@MichalStrehovsky strange it doesnt work on your computer... I and @EvanMulawski could reproduce the code with success using dotnet 7 (calling `.Compile()`)\r\n\r\nmy csproj:\r\n```\r\n\u003cPropertyGroup\u003e\r\n   \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n   \u003cTargetFramework\u003enet7.0\u003c/TargetFramework\u003e\r\n   \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n   \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n   \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n\r\n```\r\nPS C:\\Users\\leandro\u003e dotnet --info\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6a1e483a\r\n\r\nAmbiente de runtime:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\nCargas de trabalho do .NET instaladas:\r\n Workload version: 8.0.100-manifests.6a1e483a\r\nNão há cargas de trabalho instaladas para exibir.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  6.0.125 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\n```",
                                           "updatedAt":  "2023-12-19T13:42:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vB9G_",
                                           "createdAt":  "2023-12-19T13:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leandromoh",
                                           "body":  "@MichalStrehovsky @hez2010 I cant figure out why/where the span is being boxed. and, if it really is, why the code works when not using AOT since the runtime is the same for both?",
                                           "updatedAt":  "2023-12-19T13:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vB-4z",
                                           "createdAt":  "2023-12-19T13:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e @MichalStrehovsky @hez2010 I cant figure out why/where the span is being boxed. and, if it really is, why the code works when not using AOT since the runtime is the same for both?\r\n\r\nExpressionTree without NAOT is using il emit to generate code for jitting at runtime dynamically thus the boxing can be avoided, but with NAOT it doesn\u0027t support runtime code generation so instead an interpreter is used and which is boxing the type. \r\n\r\nYou may see the code path here: https://source.dot.net/#System.Linq.Expressions/System/Linq/Expressions/LambdaExpression.cs,137 where `CanCompileToIL` will be `false` under NativeAOT.\r\n\r\nI\u0027m not sure about if the boxing here can be avoided in the interpreter.",
                                           "updatedAt":  "2023-12-19T14:10:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vC3hC",
                                           "createdAt":  "2023-12-19T15:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leandromoh",
                                           "body":  "\u003e I\u0027m not sure about if the boxing here can be avoided in the interpreter.\r\n\r\n@hez2010 since the code works (calling `result.Compile()`) with dotnet 7 + AOT I think it is possible. It is a regression bug indeed.",
                                           "updatedAt":  "2023-12-19T16:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vGVCK",
                                           "createdAt":  "2023-12-20T06:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQJ6UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeaFrock",
                                                                               "createdAt":  "2023-12-20T08:05:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky strange it doesnt work on your computer... I and @EvanMulawski could reproduce the code with success using dotnet 7 (calling .Compile())\r\n\r\nI don\u0027t think you\u0027re actually running the program with native AOT. The exception stack trace posted above is a JIT-based stack trace (you\u0027ll not see the `Thunk1ret` part after publishing as native AOT):\r\n\r\n```\r\nSystem.InvalidProgramException: \u0027Common Language Runtime detected an invalid program.\u0027\r\n   at Thunk1ret_ValueTuple`3_ReadOnlySpan`1(Func`2, ReadOnlySpan`1)\r\n   at ConsoleApp2.Program.Main() in C:\\Users\\leandro\\Desktop\\workspace\\ConsoleApp1\\ConsoleApp2\\Program.cs:line 26\r\n```\r\n\r\nWhat is happening is:\r\n\r\n* You\u0027re doing an F5 launch in visual studio. This runs on top of a JIT. The program will only be compiled with native AOT once you *publish* the app (with `dotnet publish` or in VS UI) - `PublishAot` is a publishing setting, not a debug-time setting.\r\n* In .NET 7, adding `PublishAot` to the project file didn\u0027t do much to the debug time experience. It only affected publishing. The app runs on a JIT and LINQ expressions will be reflection.emitted at runtime.\r\n* In .NET 8, we made updates to make F5 debugging as close as possible to the native AOT experience (even though it\u0027s still running on top of a JIT). One of the things it does is that it also switches LINQ expressions to be interpreter based, not reflection.emit based. So you can now see the bug/limitation while F5 debugging the app in VS as well.\r\n\r\nThe issue has always existed. You\u0027ll definitely see this repro with .NET 7 PublishAot *once you actually publish the app* with `dotnet publish`. You\u0027re not actually publishing with native AOT and that\u0027s why you don\u0027t see it in 7.",
                                           "updatedAt":  "2023-12-20T06:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vl03n",
                                           "createdAt":  "2023-12-29T15:57:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leandromoh",
                                           "body":  "@MichalStrehovsky thank you for your detailed explanation! I was not aware of some things you said.\r\n\r\nIf I understand correctly, the problem is: when my expression tree is going to be _interpreted_ in AOT, the interpreter, which uses reflection, can not do it for `ref structs` because reflection has works with `object` as input/output, that is, it would need to box the `ref struct`, what is not allowed. Is my understanding correct?\r\n\r\n\u003e If you\u0027re using expressions for perf, on native AOT you\u0027d be better off using reflection. The expression interpreter uses reflection, but with extra steps.\r\n\r\nIf my understanding is correctly, I can not use reflection directly neither, since root of the problem is the boxing done by reflection. What I think could solve the problem, is introduce new specific methods/APIs for reflection to handler `ref struct` or even unmanaged types.",
                                           "updatedAt":  "2023-12-29T15:58:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vnMdt",
                                           "createdAt":  "2023-12-30T15:10:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQ3Hug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leandromoh",
                                                                               "createdAt":  "2023-12-31T00:54:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it would need to box the ref struct, what is not allowed. Is my understanding correct?\r\n\r\nCorrect.\r\n\r\n\u003e What I think could solve the problem, is introduce new specific methods/APIs for reflection to handler ref struct\r\n\r\nThis reflection feature request is tracked by https://github.com/dotnet/runtime/issues/10057. You can comment about your scenarios there. cc @steveharter \r\n\r\nThe ref struct support for the expression tree interpreter would be a new major feature that conflicts with `System.Linq.Expression` status as [effectively archived](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Linq.Expressions) library. ",
                                           "updatedAt":  "2023-12-30T15:10:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vnM48",
                                           "createdAt":  "2023-12-30T15:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e The ref struct support for the expression tree interpreter would be a new major feature\r\n\r\nWouldn\u0027t it be considered as a bug since it works with the ILEmit implementation but not the interpreter one?",
                                           "updatedAt":  "2023-12-30T15:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vnOZN",
                                           "createdAt":  "2023-12-30T15:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, this specific issue is a bug that still requires major changes to fix.\r\n\r\nSupport for new language/runtimes features like byref-like structs is generally non-existent in the expression interpreter (e.g. see https://github.com/dotnet/runtime/issues/27499).",
                                           "updatedAt":  "2023-12-30T15:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vrYPG",
                                           "createdAt":  "2024-01-02T05:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJNhcQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-01-02T06:11:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leandromoh",
                                                                               "createdAt":  "2024-01-02T13:21:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2024-12-07T21:41:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Esperadoce",
                                                                               "createdAt":  "2025-03-10T16:26:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Esperadoce",
                                                                               "createdAt":  "2025-03-10T16:26:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Yes, this specific issue is a bug that still requires major changes to fix.\r\n\r\nI\u0027d at least leave the bug open so that the area owners can consider adding a better failure mode (\"But it\u0027s likely the fix for this will be just to generate a better exception message\"). It is not the first time a new feature was added to the C# language without looking at how it behaves in this library (see e.g. #86629). Looks like we have a pattern here that the library owners (who also happen to be C# compiler devs) should look at.",
                                           "updatedAt":  "2024-01-02T05:51:17Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Handling byref-like types in LINQ expression interpreter",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96385",
        "createdAt":  "2024-01-01T16:22:31Z",
        "number":  96385,
        "author":  "tomasherceg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC06DUw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2024-01-01T16:24:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T23:20:36Z",
        "body":  "### Description\n\nWhen a method (e. g. `ToString` or `GetHashCode`) is called on a lambda expression compiled in the interpretation mode, the lambda gets invoked for some reason. \r\n\n\n### Reproduction Steps\n\n```csharp\r\nusing System.Linq.Expressions;\r\n\r\n// build () =\u003e { Console.WriteLine(\"Test\"); return Task.CompletedTask; }\r\nvar consoleWriteLine = typeof(Console).GetMethod(nameof(Console.WriteLine), System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public, new[] { typeof(string) });\r\nvar returnTarget = Expression.Label(typeof(Task));\r\nvar innerBody = Expression.Block(typeof(Task),\r\n    Expression.Call(consoleWriteLine, Expression.Constant(\"Test\")),\r\n    Expression.Return(returnTarget, Expression.Constant(Task.CompletedTask)),\r\n    Expression.Label(returnTarget, Expression.Constant(null, typeof(Task)))\r\n);\r\nvar innerLambda = Expression.Lambda\u003cFunc\u003cTask\u003e\u003e(innerBody);\r\n\r\n// call .ToString() on this lambda\r\nvar toStringMethod = typeof(Func\u003cTask\u003e).GetMethod(\"ToString\", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, new Type[] { });\r\nvar outerBody = Expression.Call(innerLambda, toStringMethod);\r\nvar outerLambda = Expression.Lambda\u003cAction\u003e(outerBody);\r\n\r\nvar compiled1 = outerLambda.Compile(preferInterpretation: false);\r\nConsole.WriteLine(\"Compiled\");\r\ncompiled1();               // CORRECT: does not write anything on the console\r\n\r\nConsole.WriteLine();\r\nConsole.WriteLine();\r\n\r\nvar compiled2 = outerLambda.Compile(preferInterpretation: true);\r\nConsole.WriteLine(\"Interpreted\"); \r\ncompiled2();               // INCORRECT: invokes the lambda\r\n```\n\n### Expected behavior\n\nIn both modes, calling a method on `innerLambda` should not invoke it.\n\n### Actual behavior\n\nWhen `preferInterpretation` is `true`, the lambda gets invoked.\r\n\r\nFurthermore, if the lambda is of type `Action`, I am getting `IndexOutOfRangeException`.\n\n### Regression?\n\nI was able to reproduce the issue on all versions of .NET Core since .NET Core 3.1.\r\nOn .NET Framework 4.7.2, the issue does not occur.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nx64\r\nreproduced on Windows and Linux\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb6mlKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vqaUr",
                                           "createdAt":  "2024-01-01T16:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen a method (e. g. `ToString` or `GetHashCode`) is called on a lambda expression compiled in the interpretation mode, the lambda gets invoked for some reason. \r\n\n\n### Reproduction Steps\n\n```csharp\r\nusing System.Linq.Expressions;\r\n\r\n// build () =\u003e { Console.WriteLine(\"Test\"); return Task.CompletedTask; }\r\nvar consoleWriteLine = typeof(Console).GetMethod(nameof(Console.WriteLine), System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public, new[] { typeof(string) });\r\nvar returnTarget = Expression.Label(typeof(Task));\r\nvar innerBody = Expression.Block(typeof(Task),\r\n    Expression.Call(consoleWriteLine, Expression.Constant(\"Test\")),\r\n    Expression.Return(returnTarget, Expression.Constant(Task.CompletedTask)),\r\n    Expression.Label(returnTarget, Expression.Constant(null, typeof(Task)))\r\n);\r\nvar innerLambda = Expression.Lambda\u003cFunc\u003cTask\u003e\u003e(innerBody);\r\n\r\n// call .ToString() on this lambda\r\nvar toStringMethod = typeof(Func\u003cTask\u003e).GetMethod(\"ToString\", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, new Type[] { });\r\nvar outerBody = Expression.Call(innerLambda, toStringMethod);\r\nvar outerLambda = Expression.Lambda\u003cAction\u003e(outerBody);\r\n\r\nvar compiled1 = outerLambda.Compile(preferInterpretation: false);\r\nConsole.WriteLine(\"Compiled\");\r\ncompiled1();               // CORRECT: does not write anything on the console\r\n\r\nConsole.WriteLine();\r\nConsole.WriteLine();\r\n\r\nvar compiled2 = outerLambda.Compile(preferInterpretation: true);\r\nConsole.WriteLine(\"Interpreted\"); \r\ncompiled2();               // INCORRECT: invokes the lambda\r\n```\n\n### Expected behavior\n\nIn both modes, calling a method on `innerLambda` should not invoke it.\n\n### Actual behavior\n\nWhen `preferInterpretation` is `true`, the lambda gets invoked.\r\n\r\nFurthermore, if the lambda is of type `Action`, I am getting `IndexOutOfRangeException`.\n\n### Regression?\n\nI was able to reproduce the issue on all versions of .NET Core since .NET Core 3.1.\r\nOn .NET Framework 4.7.2, the issue does not occur.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nx64\r\nreproduced on Windows and Linux\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etomasherceg\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-01T16:22:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Expression.Compile(preferInterpretation: true) invokes inner lambda when a method is called on it",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96626",
        "createdAt":  "2024-01-08T15:58:06Z",
        "number":  96626,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T18:34:02Z",
        "body":  "The [Expression.Property](https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression.property?view=net-8.0#system-linq-expressions-expression-property(system-linq-expressions-expression-system-reflection-propertyinfo-system-linq-expressions-expression())) API allows constructing an IndexExpression with a null object (representing an invocation of a static indexer property). However, [IndexExpression.Update()](https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.indexexpression.update?view=net-8.0) is annotated to accept a non-nullable object parameter; it seems like this should be relaxed to accept a nullable one.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcCOIQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wIyVS",
                                           "createdAt":  "2024-01-08T15:58:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe [Expression.Property](https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression.property?view=net-8.0#system-linq-expressions-expression-property(system-linq-expressions-expression-system-reflection-propertyinfo-system-linq-expressions-expression())) API allows constructing an IndexExpression with a null object (representing an invocation of a static indexer property). However, [IndexExpression.Update()](https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.indexexpression.update?view=net-8.0) is annotated to accept a non-nullable object parameter; it seems like this should be relaxed to accept a nullable one.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-System.Linq.Expressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-08T15:58:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wI0-A",
                                           "createdAt":  "2024-01-08T16:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRrdMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-01-08T16:07:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-09T00:38:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "As it\u0027s currently written, IndexExpression.Update calls MakeIndex with that object:\r\nhttps://github.com/dotnet/runtime/blob/623cf77a58f7a233b94dcc1c3ef8eb8d67e8d948/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs#L87-L97\r\nMakeIndex might pass it to ArrayAccess:\r\nhttps://github.com/dotnet/runtime/blob/623cf77a58f7a233b94dcc1c3ef8eb8d67e8d948/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs#L138-L146\r\nand ArrayAccess will fail if the object is null:\r\nhttps://github.com/dotnet/runtime/blob/623cf77a58f7a233b94dcc1c3ef8eb8d67e8d948/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs#L175-L177\r\nWe could still update the annotation, since null is permitted in at least some circumstances, but there might be a few desirable tweaks beyond just updating the annotation.",
                                           "updatedAt":  "2024-01-08T16:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wI4hA",
                                           "createdAt":  "2024-01-08T16:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Right, this is the result of IndexExpression being used to represent two different things (indexer property and array).",
                                           "updatedAt":  "2024-01-08T16:09:06Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Possibly incorrect nullable annotation on IndexExpression.Update()",
        "labels":  [
                       "bug",
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103197",
        "createdAt":  "2024-06-08T07:30:27Z",
        "number":  103197,
        "author":  "MarkMpn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T16:23:22Z",
        "body":  "### Description\n\nUsing `System.Linq.Expressions` to build expression trees dynamically, the repro code worked as expected in .NET Framework but fails in .NET (tested .NET 6 \u0026 .NET 8)\r\n\r\nSo far I\u0027ve managed to narrow this down to when I\u0027m using a type that implements custom conditional operators (`true`, `false`, `\u0026` and `|`) and using a `TryCatch` expression on the right hand side of the conditional logic operator (`AndAlso` or `OrElse`). If I reorder the arguments so the `TryCatch` expression is on the left hand side of the operator it works as expected.\n\n### Reproduction Steps\n\n```csharp\r\nusing System.Data.SqlTypes;\r\nusing System.Linq.Expressions;\r\n\r\nvar expr = Expression.OrElse(\r\n    Expression.Constant(SqlBoolean.True),\r\n    Expression.TryCatch(\r\n        Expression.Constant(SqlBoolean.True),\r\n        Expression.Catch(\r\n            typeof(SqlTypeException),\r\n            Expression.Constant(SqlBoolean.False)\r\n        )\r\n    )\r\n);\r\nvar lambda = Expression.Lambda\u003cFunc\u003cSqlBoolean\u003e\u003e(expr);\r\nvar func = lambda.Compile();\r\nConsole.WriteLine(func());\r\n```\n\n### Expected behavior\n\nThe expression should compile and `True` should be printed to the console.\n\n### Actual behavior\n\nA `System.InvalidProgramException` is thrown by `lambda.Compile()`\n\n### Regression?\n\nYes - this same code runs as expected in .NET Framework 4.6.2 and 4.8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6 and .NET 8\r\nWindows 11 22631.3593\r\nx64\r\nDoesn\u0027t appear to be specific to this.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgqNpxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Af7zW",
                                           "createdAt":  "2024-06-08T07:30:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-08T07:30:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AvCCD",
                                           "createdAt":  "2024-06-11T05:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I presume in C# it would look like `condition || try { ... `. Checked JIT reports your snippet as an invalid program due to:\r\n```\r\nEvaluation stack must be empty on entry into a try block\r\n```\r\nMy understanding that it is an expected behavior according to ECMA-335 `I.12.4.2.8.1 Fall Through`:\r\n```\r\nEntry to protected blocks can be accomplished by fall-through, at which time the evaluation\r\nstack shall be empty.\r\n```\r\nso I am not sure why and how it used to work in .NET Framework.\r\n\r\n\u003e so the TryCatch expression is on the left hand side of the operator it works as expected.\r\n\r\nif it\u0027s on the left side then the evaluation stack is empty\r\n\r\ncc @jkotas ",
                                           "updatedAt":  "2024-06-11T05:28:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AvKU1",
                                           "createdAt":  "2024-06-11T05:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlPkVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2024-06-11T05:53:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-06-11T11:26:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I am not sure why and how it used to work in .NET Framework.\r\n\r\nThe IL produced by the expression compiler on .NET Framework has an extra spill to make the stack empty. It looks like a regression in System.Linq.Expressions to me.",
                                           "updatedAt":  "2024-06-11T05:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AvMs3",
                                           "createdAt":  "2024-06-11T05:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Note that we merged a ton of optimizations in S.L.Expressions in the early .NET Core days: https://github.com/dotnet/corefx/pulls?q=label%3Aarea-System.Linq.Expressions+is%3Aclosed+optimize . It is likely one of those of changes.",
                                           "updatedAt":  "2024-06-11T05:56:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Co2nH",
                                           "createdAt":  "2024-06-26T13:45:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It\u0027s the changes in LambdaCompiler.EmitMethodAndAlso and LambdaCompiler.EmitMethodOrElse in this commit: https://github.com/dotnet/runtime/commit/2ecfbbdc3ca2ff7d8c2cd1ad696947e698f42eee\r\n\r\ncc @VSadov ",
                                           "updatedAt":  "2024-06-26T13:45:39Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "InvalidProgramException with System.Linq.Expressions and user-defined conditional operators",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103336",
        "createdAt":  "2024-06-12T09:57:39Z",
        "number":  103336,
        "author":  "jsboigeEpita",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T18:33:32Z",
        "body":  "### Description\n\nIt seems that native byte comparison operators are automatically hijacked and implicitly turned into conversions to int32 and use of corresponding operators.\r\nI can understand that this behavior is intended for performance optimizations, yet it seems a bit a strange that on top on not being able to instantiate a byte literal without relying on a cast from int32, there is no explicit mean to actually make use of those existing operators.\r\nThis has been a hassle when dealing with lambdas where the expression tree contains those conversions.\n\n### Reproduction Steps\n\nWell just try to use byte comparison operators. The implicit conversion takes place at the earliest stage in the editor without any means to change that.\r\nAlternatively, create a lambda and browse the corresponding expression tree: no way to get rid of the conversion, whereas Expression.GreaterThanOrEqual(left, right) seem to be valid to construct programmatically with byte expressions, it just does not seem to have a valid syntax that parses to it.\n\n### Expected behavior\n\na\u003eb should be interpreted as the use of the byte comparison operator, or at least, it should parse to Expression.GreaterThanOrEqual(a, b) when found in a lambda expression.\n\n### Actual behavior\n\nWith a and b bytes, a\u003eb actually parses to an expression that converts to int32 before applying the comparison operator.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 7 and 8, VS community 2022\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPttSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6A6CZj",
                                           "createdAt":  "2024-06-12T10:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlYsCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-06-12T11:02:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e It seems that native byte comparison operators are automatically hijacked and implicitly turned into conversions to int32 and use of corresponding operators.\r\n\r\nStrictly speaking, there\u0027s *no arithmetic operators* defined for byte. Bytes are *implicitly casted* to int in those cases. However, such implicit conversion aren\u0027t applied for user defined types.\r\n\r\nIn expression trees, the implicit conversions done by compiler must be present.\r\n\r\nS.Linq.Expressions is effectively archived and unlikely to accept behavioral change.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-06-12T10:49:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A6MyD",
                                           "createdAt":  "2024-06-12T11:10:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "In IL, performing operations on `(u)int8` and `(u)int16` automatically upcasts them to `(u)int32` (or `(u)int64` if necessary). This upcast is present in the source tree, but it\u0027s implicitly done by the compiler. Hence, this:\r\n\r\n```csharp\r\n// does not compile\r\npublic byte Test(byte a, byte b) =\u003e a + b;\r\n\r\n// does compile\r\npublic byte Test(byte a, byte b) =\u003e (byte)(a + b);\r\n\r\n// actual tree as understood by the compiler\r\npublic byte Test(byte a, byte b) =\u003e (int)a + (int)b;\r\npublic byte Test(byte a, byte b) =\u003e (byte)((int)a + (int)b);\r\n```\r\n\r\nAs @huoyaoyuan said, the implicit upcast must be present in your expression tree.\r\n\r\n---\r\n\r\nIn fact, if you look at the IL of the `Test` that does compile, you see this:\r\n\r\n```cil\r\n.method public hidebysig \r\n    instance uint8 Test (\r\n        uint8 a,\r\n        uint8 b\r\n    ) cil managed \r\n{\r\n    // Method begins at RVA 0x2050\r\n    // Code size 5 (0x5)\r\n    .maxstack 8\r\n\r\n    IL_0000: ldarg.1\r\n    IL_0001: ldarg.2\r\n    IL_0002: add\r\n    IL_0003: conv.u1\r\n    IL_0004: ret\r\n} // end of method C::Test\r\n```\r\n\r\nThat `conv.u1` is casting (truncating) the `int32` at the top of the evaluation stack to `uint8` so it can fit in the return box. It\u0027s required because `add` _produced_ an `int32`.",
                                           "updatedAt":  "2024-06-12T11:10:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A6Ni2",
                                           "createdAt":  "2024-06-12T11:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsboigeEpita",
                                           "body":  "OK I understand the rational but then why offering the operators in the first place?\r\nAs far as I understand, the code that you can find for those in the Byte class cannot be directly invoked, and would result anyway in the same conversion. It looks a bit confusing to me.",
                                           "updatedAt":  "2024-06-12T11:12:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A6PbD",
                                           "createdAt":  "2024-06-12T11:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "You mean the operator overloads on `byte`? They only work if you\u0027re using generic math. If you look at their implementation, they all are implemented as explicit interface implementations. You _can\u0027t_ invoke them unless you\u0027re using interfaces.\r\n\r\nhttps://github.com/dotnet/runtime/blob/f6dc71b611c6f725a626f52d3811ce6ad7e68ee1/src/libraries/System.Private.CoreLib/src/System/Byte.cs#L417-L518\r\n\r\nIn fact, those operator overloads even have to cast the result back to the proper size because of the implicit upcast.\r\n\r\nAs for _why_ the upcast exists, it\u0027s a product of history. When C#/MSIL was created, that\u0027s how the specification was written: all operations smaller than `int32` upcast before being performed. Exposing these operators _now_ would actually _break_ code that relied on that implicit upcast. For example, some code might be doing:\r\n\r\n```csharp\r\nConsole.WriteLine(Test(0xFF, 0xFF));\r\n\r\npublic int Test(byte a, byte b) =\u003e a + b;\r\n```\r\n\r\nWith the current behavior, this produces 510 (`0x1FE`). If those operators were exposed, `a+b` would result in an `int8` that is _then_ upcast to `int32`. The result would then be 254 (`0xFE`) due to overflow. So:\r\n\r\n```csharp\r\n// current behavior\r\npublic int Test(byte a, byte b) =\u003e (int)a + (int)b;\r\n\r\n// \"ideal\" behavior, but would break things\r\npublic int Test(byte a, byte b) =\u003e (int)(a + b); // `a+b` perfomed in 8-bit context\r\n```",
                                           "updatedAt":  "2024-06-12T11:21:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A6bPh",
                                           "createdAt":  "2024-06-12T11:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsboigeEpita",
                                           "body":  "OK fair enough, thanks for the follow up",
                                           "updatedAt":  "2024-06-12T11:43:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A7Kwy",
                                           "createdAt":  "2024-06-12T13:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e S.Linq.Expressions is effectively archived and unlikely to accept behavioral change.\r\n\r\n@huoyaoyuan is there more context to this? A link/issue/etc? With the language evolving all the time, it doesn\u0027t make much sense to me that it would not accept changes anymore, as one would expect newer features to be supported there eventually.",
                                           "updatedAt":  "2024-06-12T13:20:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A7Qva",
                                           "createdAt":  "2024-06-12T13:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlbuDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-12T13:34:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-12T13:47:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-06-12T16:40:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e @huoyaoyuan is there more context to this?\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/README.md\r\nhttps://github.com/dotnet/csharplang/discussions/5997#discussioncomment-2532087\r\nhttps://github.com/dotnet/csharplang/discussions/158\r\nhttps://github.com/dotnet/csharplang/discussions/4727\r\n\r\nExpression tree is currently more than 10 years behind C# language.",
                                           "updatedAt":  "2024-06-12T13:31:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A-21L",
                                           "createdAt":  "2024-06-12T21:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsboigeEpita",
                                           "body":  "\u003e \u003e @huoyaoyuan is there more context to this?\r\n\u003e (https://github.com/dotnet/csharplang/discussions/4727)\r\n\u003e \r\n\u003e Expression tree is currently more than 10 years behind C# language.\r\n\r\nThanks for the context. I can see from the latest proposal that my suggestion that a \u003c b could be parsed as a simpler semantically correct Expression before applying the c# optimizations isn\u0027t completely out of the realm, if it wasn\u0027t for the huge regression issues with linq providers. As a matter of fact, working on extending [Z3.Linq](https://github.com/endjin/Z3.Linq) with z3\u0027s bitvectors led me here.",
                                           "updatedAt":  "2024-06-12T21:50:26Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "No easy way to invoke byte comparison operator",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104715",
        "createdAt":  "2024-07-11T08:28:31Z",
        "number":  104715,
        "author":  "canton7",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T23:20:47Z",
        "body":  "### Description\r\n\r\nIt\u0027s probably easiest to see the repro below.\r\n\r\nIt seems that there\u0027s a bug in the System.Linq.Expressions.Expression to IL compiler: when you have a loop, and the loop body calls a lambda which contains a local variable, that local isn\u0027t correctly default-initialised on each loop iteration.\r\n\r\nThe behaviour is correct when the expression is interpreted rather than compiled.\r\n\r\nFound on SO: https://stackoverflow.com/questions/78720962/expression-trees-invoke-lambda-during-loop-leads-to-variable-leaking/78721315\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\nConsole.WriteLine(\"Compiled:\");\r\nConsole.WriteLine(C.ApplyTenTimes().Compile()());\r\n\r\nConsole.WriteLine(\"Interpreted:\");\r\nConsole.WriteLine(C.ApplyTenTimes().Compile(preferInterpretation: true)());\r\n\r\npublic static class C \r\n{\r\n    public static Expression\u003cFunc\u003cint\u003e\u003e GetOne()\r\n    {\r\n        // Returns something like this () =\u003e {int x; return x +1;}\r\n        var variable = Expression.Variable(typeof(int));\r\n        var f = Expression.Lambda\u003cFunc\u003cint\u003e\u003e(\r\n            Expression.Block(\r\n                [variable],\r\n                Expression.Assign(variable, Expression.Add(variable, Expression.Constant(1)))\r\n            )\r\n        );\r\n        return f;\r\n    }\r\n    \r\n    public static Expression\u003cFunc\u003cint\u003e\u003e ApplyTenTimes()\r\n    {\r\n        var i = Expression.Variable(typeof(int));\r\n        var breakLabel = Expression.Label();\r\n        var f = GetOne();\r\n        var loop = Expression.Lambda\u003cFunc\u003cint\u003e\u003e(\r\n            Expression.Block(\r\n                [i],\r\n                Expression.Block(\r\n                    Expression.Loop(Expression.Block(\r\n                        Expression.IfThen(\r\n                            Expression.Equal(i, Expression.Constant(5)),\r\n                            Expression.Break(breakLabel)\r\n                        ),\r\n                        Expression.PostIncrementAssign(i),\r\n                        Expression.Call(\r\n                            typeof(Console).GetMethod(\"WriteLine\", [typeof(string)]),\r\n                            Expression.Call(\r\n                                Expression.Invoke(f),\r\n                                typeof(int).GetMethod(\"ToString\", [])\r\n                            )\r\n                        ))\r\n                    ),\r\n                    Expression.Label(breakLabel),\r\n                    Expression.Invoke(f)\r\n                )\r\n            )\r\n        );\r\n    \r\n        return loop;\r\n    }\r\n}\r\n```\r\n\r\nSee on https://dotnetfiddle.net/kePJl8. (SharpLab hits an internal error trying to run this)\r\n\r\n### Expected behavior\r\n\r\nOutput for both \"Compiled\" and \"Interpreted\" is:\r\n\r\n```\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n```\r\n\r\n### Actual behavior\r\n\r\nOutput for \"Compiled\" is:\r\n\r\n```\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1\r\n```\r\n\r\nSomething weird is happening when the lambda call is inlined (?) into the loop body, and the lambda\u0027s `variable` isn\u0027t re-initialised. This works correctly when the expression is interpreted.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nN/A\r\n\r\n### Configuration\r\n\r\n.NET 8 and earlier.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiEoxwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EfkWI",
                                           "createdAt":  "2024-07-11T12:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-11T12:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ISjHC",
                                           "createdAt":  "2024-08-13T15:42:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODt3uZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "canton7",
                                                                               "createdAt":  "2024-08-13T18:06:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cston",
                                           "body":  "For reference, the same program, compiled with .NET Framework 4.7.2, generates:\r\n```\r\nCompiled:\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1\r\nInterpreted:\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1\r\n```",
                                           "updatedAt":  "2024-08-13T15:42:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Linq.Expressions: Expression.Variable in lambda called from loop not correctly re-initialised on each loop iteration",
        "labels":  [
                       "area-System.Linq.Expressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106530",
        "createdAt":  "2024-08-16T11:06:22Z",
        "number":  106530,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-19T14:45:15Z",
        "body":  "### Description\r\n\r\nMethod `public static MemberExpression Property(Expression? expression, MethodInfo propertyAccessor)`\r\nthrows `System.ArgumentException: \u0027The method \u0027X\u0027 is not a property accessor (Parameter \u0027propertyAccessor\u0027)\u0027` for getters reflected via descendant class.\r\n\r\nInternally this method looks for the property having same getter as passed method:\r\n```\r\n[RequiresUnreferencedCode(PropertyFromAccessorRequiresUnreferencedCode)]\r\npublic static MemberExpression Property(Expression? expression, MethodInfo propertyAccessor)\r\n{\r\n    ArgumentNullException.ThrowIfNull(propertyAccessor);\r\n    ValidateMethodInfo(propertyAccessor, nameof(propertyAccessor));\r\n    return Property(expression, GetProperty(propertyAccessor, nameof(propertyAccessor)));\r\n}\r\n\r\n[RequiresUnreferencedCode(PropertyFromAccessorRequiresUnreferencedCode)]\r\nprivate static PropertyInfo GetProperty(MethodInfo mi, string? paramName, int index = -1)\r\n{\r\n    Type? type = mi.DeclaringType;\r\n    if (type != null)\r\n    {\r\n        BindingFlags flags = BindingFlags.Public | BindingFlags.NonPublic;\r\n        flags |= (mi.IsStatic) ? BindingFlags.Static : BindingFlags.Instance;\r\n        PropertyInfo[] props = type.GetProperties(flags);\r\n        foreach (PropertyInfo pi in props)\r\n        {\r\n            if (pi.CanRead \u0026\u0026 CheckMethod(mi, pi.GetGetMethod(nonPublic: true)!))\r\n            {\r\n                return pi;\r\n            }\r\n            if (pi.CanWrite \u0026\u0026 CheckMethod(mi, pi.GetSetMethod(nonPublic: true)!))\r\n            {\r\n                return pi;\r\n            }\r\n        }\r\n    }\r\n\r\n    throw Error.MethodNotPropertyAccessor(mi.DeclaringType, mi.Name, paramName, index);\r\n}\r\n\r\n[UnconditionalSuppressMessage(\"ReflectionAnalysis\", \"IL2075:UnrecognizedReflectionPattern\",\r\n    Justification = \"Since the methods are already supplied, they won\u0027t be trimmed. Just checking for method equality.\")]\r\nprivate static bool CheckMethod(MethodInfo method, MethodInfo propertyMethod)\r\n{\r\n    // WARNING, ALERT, DANGER: These won\u0027t equal if getter was acquired via descendant type!!!\r\n    if (method.Equals(propertyMethod))\r\n    {\r\n        return true;\r\n    }\r\n    // If the type is an interface then the handle for the method got by the compiler will not be the\r\n    // same as that returned by reflection.\r\n    // Check for this condition and try and get the method from reflection.\r\n    Type type = method.DeclaringType!;\r\n    if (type.IsInterface \u0026\u0026 method.Name == propertyMethod.Name \u0026\u0026 type.GetMethod(method.Name) == propertyMethod)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nThe only problem is that getters reflected via ancestor and descendant differ!\r\n[`Type? type =mi.DeclaringType;`](https://github.com/dotnet/runtime/blob/fc7a8e62c4f0351477fd7423e67e7a541e9c7ca9/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs#L310) is the core thing.\r\n\r\nIt should be `Type? type = mi.ReflectedType`;\r\n\r\n### Reproduction Steps\r\n\r\nSee this [repo](https://github.com/voroninp/PropertyExpressionBug) to reproduce.\r\n\r\nMethod `public static MemberExpression Property(Expression? expression, MethodInfo propertyAccessor)`\r\n\r\n### Expected behavior\r\n\r\nIt should just work.\r\n\r\n### Actual behavior\r\n\r\nIf fails.\r\n\r\n### Regression?\r\n\r\nI have no clue.\r\n\r\n### Known Workarounds\r\n\r\nIf I use an overload version:\r\n```\r\npublic static MemberExpression Property(Expression? expression, PropertyInfo property)\r\n```\r\n\r\nit works ok. And it\u0027s obviously faster because there\u0027s no search for the property. But anyway...\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiOW-Rg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IsQ81",
                                           "createdAt":  "2024-08-16T11:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-16T11:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I5b5G",
                                           "createdAt":  "2024-08-19T14:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-19T14:45:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Expression.Property() throws System.ArgumentException: \u0027The method \u0027X\u0027 is not a property accessor (Parameter \u0027propertyAccessor\u0027)\u0027",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109757",
        "createdAt":  "2024-11-12T23:28:18Z",
        "number":  109757,
        "author":  "Suchiman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQJFfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2024-11-12T23:37:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2024-11-13T04:26:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamesgurung",
                                            "createdAt":  "2024-11-13T23:55:40Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "NN---",
                                            "createdAt":  "2024-12-07T21:40:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nabeelio",
                                            "createdAt":  "2024-12-17T22:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkagamine",
                                            "createdAt":  "2024-12-30T16:19:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rans4ckeR",
                                            "createdAt":  "2025-01-20T15:18:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rabuckley",
                                            "createdAt":  "2025-01-22T15:39:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glen-84",
                                            "createdAt":  "2025-02-12T10:53:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vit-svoboda",
                                            "createdAt":  "2025-02-24T12:08:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "virzak",
                                            "createdAt":  "2025-02-25T20:45:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidda",
                                            "createdAt":  "2025-02-28T06:42:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2025-03-17T13:34:57Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "mariohik",
                                            "createdAt":  "2025-03-31T19:31:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariohik",
                                            "createdAt":  "2025-03-31T19:31:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jogaiii",
                                            "createdAt":  "2025-04-14T19:44:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ragnar474",
                                            "createdAt":  "2025-05-19T20:33:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LokiMidgard",
                                            "createdAt":  "2025-07-24T07:00:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2025-08-14T04:49:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-09-12T14:48:05Z"
                                        }
                                    ],
                          "totalCount":  20
                      },
        "updatedAt":  "2025-05-19T20:32:42Z",
        "body":  "### Description\n\nWhen enabling `LangVersion` `preview`, that enables first class span\u0027s which then prefers `MemoryExtensions.Contains` over `Enumerable.Contains` which then breaks EFC. It seems that EFC internally calls `Expression.Compile` with `preferInterpretation` set to `true` which then eventually crashes.\n\n### Reproduction Steps\n\n```csharp\npublic class MyDbContext : DbContext\n{\n    public DbSet\u003cMyTable\u003e MyTable { get; set; }\n}\n\npublic class MyTable\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\nstring[] filters = [\"Test\"];\n\nvar dbContext = new MyDbContext();\ndbContext.MyTable.Where(x =\u003e filters.Contains(x.Name)).ToList();\n```\n\n### Expected behavior\n\nFirst class span\u0027s should not negatively affect EFC queries\n\n### Actual behavior\n\n```\nTypeLoadException: GenericArguments[1], \u0027System.Span`1[System.String]\u0027, on \u0027System.Linq.Expressions.Interpreter.FuncCallInstruction`2[T0,TRet]\u0027 violates the constraint of type parameter \u0027TRet\u0027.\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\n   at System.Linq.Expressions.Interpreter.CallInstruction.GetHelperType(MethodInfo info, Type[] arrTypes)\n   at System.Linq.Expressions.Interpreter.CallInstruction.SlowCreate(MethodInfo info, ParameterInfo[] pis)\n   at System.Linq.Expressions.Interpreter.CallInstruction.Create(MethodInfo info, ParameterInfo[] parameters)\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileMethodCallExpression(Expression object, MethodInfo method, IArgumentProvider arguments)\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileConvertUnaryExpression(Expression expr)\n   at System.Linq.Expressions.Interpreter.LightCompiler.Compile(Expression expr)\n   at System.Linq.Expressions.Interpreter.LightCompiler.CompileTop(LambdaExpression node)\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.\u003cEvaluate\u003eg__EvaluateCore|70_0(Expression expression, String\u0026 parameterName, Boolean\u0026 isContextAccessor) in Microsoft.EntityFrameworkCore.Query.Internal\\ExpressionTreeFuncletizer.cs:line 1755\n```\n\n### Regression?\n\nYes, only when enabling `\u003cLangVersion\u003epreview\u003c/LangVersion\u003e`\n\n### Known Workarounds\n\nset `\u003cLangVersion\u003epreview\u003c/LangVersion\u003e` to anything but preview\n\n### Configuration\n\n.NET 9.0.0\nEFC 9.0.0\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrGNZAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TVUHU",
                                           "createdAt":  "2024-11-12T23:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-12T23:28:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TWKvR",
                                           "createdAt":  "2024-11-13T01:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @jjonescz ",
                                           "updatedAt":  "2024-11-13T01:00:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TpORh",
                                           "createdAt":  "2024-11-14T17:50:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "@Suchiman Which version of VS are you on? 17.13 Preview 1?\n\nI\u0027ve just come across this when building the tests on efcore (same problem with MemoryExtesions.* vs IEnumerable.*) To me it only happened on 17.13 preview 1 AND `LangVersion` is `preview`. Using 17.12 even with LangVersion on `preview` it was fine to build",
                                           "updatedAt":  "2024-11-14T17:50:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TpUnY",
                                           "createdAt":  "2024-11-14T18:03:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "\u003e [@Suchiman](https://github.com/Suchiman) Which version of VS are you on? 17.13 Preview 1?\n\nyes\n",
                                           "updatedAt":  "2024-11-14T18:03:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T2jLj",
                                           "createdAt":  "2024-11-16T12:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilGianfri",
                                           "body":  "I\u0027ve attached a simple repro application [ConsoleApp2.zip](https://github.com/user-attachments/files/17784692/ConsoleApp2.zip)\n\nOn Visual Studio 17.12 it works, in 17.13p1 I get this issue with both .NET 8 and .NET 9 if LangVersion is set to preview",
                                           "updatedAt":  "2024-11-16T12:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T5KMn",
                                           "createdAt":  "2024-11-17T12:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "Any relation to https://github.com/dotnet/runtime/issues/96160 ?",
                                           "updatedAt":  "2024-11-17T12:10:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WpyxO",
                                           "createdAt":  "2024-12-09T10:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC-GQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:25:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ragnar474",
                                                                               "createdAt":  "2025-05-19T20:34:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "RobertSmits",
                                                                               "createdAt":  "2025-08-14T09:53:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:47:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "This was discussed [at LDM](https://github.com/dotnet/csharplang/blob/b9456cd15242f657e548c6afaf949fc0fbaaac0a/meetings/2024/LDM-2024-12-04.md#conversions-in-expression-trees) with no change in the C# language planned. LINQ-to-DB should be probably updated to recognize `MemoryExtensions.Contains` (and perhaps other similar methods) or users will need to update the calls (e.g., calling `Enumerable.Contains` explicitly, or casting the array to `IEnumerable\u003cT\u003e`).",
                                           "updatedAt":  "2024-12-09T10:34:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WqNFq",
                                           "createdAt":  "2024-12-09T11:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC-Kg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "virzak",
                                                                               "createdAt":  "2025-02-25T20:48:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:25:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:47:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GerardSmit",
                                           "body":  "Does this mean libraries need to fix this issue?\n\nIn that case it would mean .NET 9 (or lower) can never use the new C# LangVersion together with EF Core when First class span\u0027s get released? \nYou will either need to lower the C# LangVersion or upgrade .NET.\n\nI know using newer C# LangVersions in older .NET versions isn\u0027t official supported, but I do this together with PolySharp a lot.\n\nWhen I upgraded my .NET SDK locally, I got hit by this issue; since I had `\u003cLangVersion\u003epreview\u003c/LangVersion\u003e` in my project during the .NET 7 to .NET 8 transition, I forgot I had the preview version still configured 😄.",
                                           "updatedAt":  "2024-12-09T11:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WqWtt",
                                           "createdAt":  "2024-12-09T11:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC-VQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:25:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ragnar474",
                                                                               "createdAt":  "2025-05-19T20:34:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "AlmightyLks",
                                                                               "createdAt":  "2025-05-21T18:44:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "austinw-fineart",
                                                                               "createdAt":  "2025-08-14T05:24:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:47:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "\u003e In that case it would mean .NET 9 (or lower) can never use the new C# LangVersion together with EF Core when First class span\u0027s get released?\n\nYou can use .NET 9, just make sure you call `Enumerable` methods (e.g., by calling them in their non-extension static forms) instead of `MemoryExtensions` ones. As you said, older .NETs are not supported with newer LangVersions, so workarounds like that are expected.",
                                           "updatedAt":  "2024-12-09T11:41:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WtIlT",
                                           "createdAt":  "2024-12-09T15:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC-XQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-12-09T15:47:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChrisJollyAU",
                                                                               "createdAt":  "2024-12-09T16:18:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:25:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ragnar474",
                                                                               "createdAt":  "2025-05-19T20:34:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:48:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This problem is not specific to EF Core. You can hit it with plain vanilla System.Linq.Expressions. It can be fixed in System.Linq.Expressions by adding support for byref-like types to the Interpreter, but that is in conflict with the [effectively archived status](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Linq.Expressions#systemlinqexpressions-library) of System.Linq.Expressions.\n\n@jjonescz This needs a breaking change notice to be filled.\n\ncc @jaredpar \n",
                                           "updatedAt":  "2024-12-09T15:38:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WtJfc",
                                           "createdAt":  "2024-12-09T15:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Added `needs-breaking-change-doc-created` label because this issue has the `breaking-change` label.\n\n1. [ ] Create and link to this issue a matching issue in the dotnet/docs repo using the [breaking change documentation template](https://aka.ms/dotnet/docs/new-breaking-change-issue), then remove this `needs-breaking-change-doc-created` label.\n\nTagging @dotnet/compat for awareness of the breaking change.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-09T15:38:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WtWxT",
                                           "createdAt":  "2024-12-09T15:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC9_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-12-09T15:53:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChrisJollyAU",
                                                                               "createdAt":  "2024-12-09T16:19:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-12-09T16:59:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2024-12-09T17:18:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JakeSays",
                                                                               "createdAt":  "2024-12-09T17:21:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2024-12-09T18:38:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidroth",
                                                                               "createdAt":  "2024-12-10T21:54:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SKProCH",
                                                                               "createdAt":  "2024-12-24T10:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bachratyg",
                                                                               "createdAt":  "2025-01-02T08:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:26:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2025-05-20T09:17:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kg",
                                                                               "createdAt":  "2025-06-28T19:03:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:47:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "roji",
                                           "body":  "Just to second @jkotas\u0027s comment, our problem in EF is not recognizing MemoryExtensions.Contains and similar (though that in itself is also a breaking change) - it\u0027s the reliance on the LINQ interpreter in various scenarios, but the interpreter doesn\u0027t support this. More generally, there\u0027s a gap that\u0027s starting to widen between C# itself and its metaprogramming (and related) features: the interpreter can no longer handle any construct, and LINQ expression trees themselves only represent a small subset of C# (and getting smaller). This will become more and more problematic, unless a decision is made to start updating these components to bring them more in line with the latest C# developments.",
                                           "updatedAt":  "2024-12-09T15:50:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W3IRC",
                                           "createdAt":  "2024-12-10T09:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs6IQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:26:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "\u003e It can be fixed in System.Linq.Expressions by adding support for byref-like types to the Interpreter, but that is in conflict with the [effectively archived status](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Linq.Expressions#systemlinqexpressions-library) of System.Linq.Expressions.\n\nThat doc says \"We will consider changes that address significant bugs or regressions\". This seems like a significant regression.\n\n\u003e our problem in EF is [...] the reliance on the LINQ interpreter in various scenarios, but the interpreter doesn\u0027t support this.\n\nSo... does EF need to implement its own interpreter to avoid relying on an archived component?",
                                           "updatedAt":  "2024-12-10T09:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W5vuz",
                                           "createdAt":  "2024-12-10T14:00:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs6MQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2024-12-10T14:02:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:26:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e So... does EF need to implement its own interpreter to avoid relying on an archived component?\n\nWell, the LINQ interpreter in .NET is a general component used by other users and packages out there, other than EF - they are all going to be similarly broken by this change; so if someone (regardless of who does the work) adds support to the interpreter, I don\u0027t believe that should be part of the EF package. This is probably a conversation best taken offline...",
                                           "updatedAt":  "2024-12-10T14:00:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W5_Kv",
                                           "createdAt":  "2024-12-10T14:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs6TA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:26:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "@jjonescz There\u0027s already 2 issues previously related to byref-like types and Span types in expression trees (#96160 and #27499). Both have basically said the same as @jkotas - that `System.Linq.Expressions` is effectively archived.\n\nWith the new first class span support being introduced, it\u0027s clear that there would be an increasing likelihood of more expression trees encountering the byref-like types. With this in mind, I feel the impact of that bug has changed enough to at the very least needing to be re-evaluated (and possibly implemented)",
                                           "updatedAt":  "2024-12-10T14:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W-SaT",
                                           "createdAt":  "2024-12-10T21:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEibZew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stevehansen",
                                                                               "createdAt":  "2025-09-16T09:42:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GerardSmit",
                                           "body":  "A hacky workaround is to make an ExpressionVisitor that converts all the `MemoryExtensions.Contains` to `Enumerable.Contains`.\n\n[SharpLab link](https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK4wD4AEBMBGAWACgsAGAAizwBYBuYsyvAOgBlYBHekiqtz5gFEAHgAdkAUwDOUqAHsYU7oz4AlCQDMANhIDGCeTG4M8pANoBdchqhaEE5FPIBecmYBEAFWkJ3F7iLi0rIKADxYAKyhALIAnp4QwDpw5MBycloAfJnWtvbILuTCLjk2dg5SzADCCgjQigAUwswAchBgEgCUxkQA9L3kNWAdMAjkcqhjCAAWEuQwEsJjWrBzCHLkurO6ANbkM3OLuhKiBgrEZfmFAMqiEDCecoIwqB3IiToAalCy68jVCgAbg4EA1Lg5usQGFE4gkkhIUmkMqV0LpCuD/kNRLYJA0ghoHABJUYOIJ1M4wED7NBdbhIrTkSRSVB2dGohoLADu5FhHzmAG9yG0OoUvD53OQAL6QojEJkshDMAAir1EDRlDAAzJQcDz4nziPziOQTZRtVQKMKBeQAOYSBC0chSe2OyXEN2yoiwfIwCAM3DkW73R7PV4OPnfX5yApUwJMkIwSNQP6G42m8RQQEQexMABsjIkEAAJgotLFA3cHk8Xm8Iz9k9HyMSpHUYMdClz1T1TeQM1mc1R85Ji6Xy9F7dM5EXiRoNjVRvUpEGYIUELFRBI5BoGuOwNHYiJ7IpDFJOswAOL28czKcNNM9k3ued1WBSdxwe8PgBCsCLsBtABiWgQDalQAAqoEkUBohg5A/jAf4wIBwGgcw1zktBH5EA+povFoWhYThJpmGuG5bg06jFgA8jAZbLqEmRntEEA7BIl4LMg0GeOuuLcRuzDMax7EONB16TkWYEQO8HT5A0pCdJ0KR8RIAksWxEgcaJE5TpJ0n2g4cmdBYhFEXhWifp0ACE3bppx/ZzIOBYjrRY7adOMCzoMtSLqGtbwquPHkb54bwmel4IGJt6fj2T7ea+77Raa8GIchIHgZBKwwXBv7/kBaVoRhugmThZnFQ+JGBduVCagxTFqcJnG6MpDTKapQkaSJuiRRJUntPpyCGYp5CtYJ6maV1bm6X1snycZiUmmZFnWVC2G2XI9j6BIRbjMCyCcUWcxxsEhjkEmEVuVUfpaDuF1XUdMgnTAU5dJ+RqrThUAaOQHLPQJbnMISUgNVpN7bQAZGD80Pk9B1/aDF72sDE2g0qmiwMmhjqi4rjPouy7kBDUM9jDKndQjCBIwAgsgNphqMUhYz8bhZgUpESFYhPvURC2/dTtMjAgUhmKQVhM91l34fdCbkIKZNWlS7hyKIAD6hJgKImXJhKkqbHdYjxidnPcz2uh60ED0KMwfN04LwsWMwynY/sPFtRI1PvPEPHqp0UNvcbppYAA7OQUuGNUV13lz/smrjr7Be88Ku0j3UNGzilE0RoeW/Ou2gqbkv68dlvWwLQsiykbPkdVtVJx1jXNWn6dR9HJNWzTNtC3gFgZyaMrcx6UNB6kEDOswZ3ixHJN96aA9c1g5p4PmnheTAuehJ4mQteQizmwmnTkJysySMN5CxoXFsrs4OQtZ0zatscY/1qCO8GwoMoekAA=)\n\n\u003cdetails\u003e\n  \u003csummary\u003eCode\u003c/summary\u003e\n  \n  The ExpressionVisitor:\n  \n  ```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\n\ninternal class SpanToEnumerableVisitor : ExpressionVisitor\n{\n    private static readonly SpanToEnumerableVisitor Instance = new();\n\n    private static readonly MethodInfo ContainsSpan = typeof(MemoryExtensions).GetMethod(\n        \"Contains\",\n        BindingFlags.Public | BindingFlags.Static,\n        null,\n        [typeof(ReadOnlySpan\u003c\u003e).MakeGenericType(Type.MakeGenericMethodParameter(0)), Type.MakeGenericMethodParameter(0)],\n        null\n    )!;\n\n    private static readonly MethodInfo ContainsEnumerable = typeof(Enumerable).GetMethod(\n        \"Contains\",\n        BindingFlags.Public | BindingFlags.Static,\n        null,\n        [typeof(IEnumerable\u003c\u003e).MakeGenericType(Type.MakeGenericMethodParameter(0)), Type.MakeGenericMethodParameter(0)],\n        null\n    )!;\n\n    protected override Expression VisitMethodCall(MethodCallExpression node)\n    {\n        if (node.Method.IsGenericMethod \u0026\u0026\n            node.Method.GetGenericMethodDefinition() == ContainsSpan \u0026\u0026\n            node.Method.GetGenericArguments() is [var type] \u0026\u0026\n            node.Arguments[0] is MethodCallExpression { Method.Name: \"op_Implicit\" } callExpression \u0026\u0026\n            callExpression.Arguments[0].Type == type.MakeArrayType())\n        {\n            return Expression.Call(\n                ContainsEnumerable.MakeGenericMethod(type),\n                Expression.Convert(callExpression.Arguments[0], typeof(IEnumerable\u003c\u003e).MakeGenericType(type)),\n                node.Arguments[1]\n            );\n        }\n\n        return base.VisitMethodCall(node);\n    }\n\n    public static T Convert\u003cT\u003e(T expression) where T : Expression =\u003e (T)Instance.Visit(expression);\n}\n  ```\n\n  Example:\n```cs\nstring[] filters = [\"Test\"];\nExpression\u003cFunc\u003cMyTable, bool\u003e\u003e filter = x =\u003e filters.Contains(x.Name);\n\n// Comment out the next line to check the exception\nfilter = SpanToEnumerableVisitor.Convert(filter);\n\nFunc\u003cMyTable, bool\u003e func = filter.Compile(preferInterpretation: true);\nbool result = func(new MyTable { Name = \"Test\" });\n\nConsole.WriteLine(result);\n\npublic class MyTable\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n  \n\u003c/details\u003e",
                                           "updatedAt":  "2024-12-10T21:17:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W-dOd",
                                           "createdAt":  "2024-12-10T21:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e @jjonescz There\u0027s already 2 issues previously related to byref-like types and Span types in expression trees \n\n+ https://github.com/dotnet/runtime/issues/110592 that was just filled",
                                           "updatedAt":  "2024-12-10T21:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XID-o",
                                           "createdAt":  "2024-12-11T10:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e A hacky workaround is to make an ExpressionVisitor that converts all the MemoryExtensions.Contains to Enumerable.Contains.\n\nYep, that\u0027s likely the workaround we\u0027d do in EF for this.",
                                           "updatedAt":  "2024-12-11T10:34:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XIM8G",
                                           "createdAt":  "2024-12-11T10:51:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs6dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:26:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "While `.Contains` is the method giving the current problem, you would probably have to look at doing it for all methods from `MemoryExtensions`",
                                           "updatedAt":  "2024-12-11T10:51:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XJeYF",
                                           "createdAt":  "2024-12-11T12:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@ChrisJollyAU indeed.",
                                           "updatedAt":  "2024-12-11T12:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XTRBc",
                                           "createdAt":  "2024-12-12T09:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-t7BQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-12-12T10:06:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "@jjonescz @jkotas Was also thinking on this.\n\nEFC calls the `.Compile` with `preferInterpretation` being true.\n\nWith the function being as follows\n```\npublic new TDelegate Compile(bool preferInterpretation)\n{\n    if (CanInterpret \u0026\u0026 preferInterpretation)\n    {\n        return (TDelegate)(object)new Interpreter.LightCompiler().CompileTop(this).CreateDelegate();\n    }\n\n    return Compile();\n}\n```\n\nClearly the `CanInterpret` variable is also true, even when the expression has the byref-like types/Span in it. Giving that the interpret fails it clearly can\u0027t interpret. That\u0027s a potential bug/mismatch there.\n\nEven if the byref-like types wasn\u0027t added to the interpreter (if the verdict from the other mentioned issues is still valid now), I would say this part would be applicable - to make sure that the `CanConvert` is false if you have those types in the expression.\n\n@roji This should satisfy you with regards to performance - those normal expressions will just be interpreted as normal, and then drop into the full compiler (which does work) for the restricted types",
                                           "updatedAt":  "2024-12-12T09:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XVL5E",
                                           "createdAt":  "2024-12-12T13:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "\u003e This needs a breaking change notice to be filled.\n\nFiled https://github.com/dotnet/docs/issues/43952.\n\n\u003e Even if the byref-like types wasn\u0027t added to the interpreter\n\nIt seems this would also require adding support for ref structs in reflection since the interpreter is using reflection under the hood.\n\n\u003e Clearly the `CanInterpret` variable is also true, even when the expression has the byref-like types/Span in it. Giving that the interpret fails it clearly can\u0027t interpret. That\u0027s a potential bug/mismatch there.\n\nThis sounds like a potentially good solution to me - avoid interpretation if the expression tree contains spans. But is it possible to do compilation everywhere or is it necessary to fall back to interpretation in some cases (e.g., on some platforms)?",
                                           "updatedAt":  "2024-12-12T13:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XVUJL",
                                           "createdAt":  "2024-12-12T13:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisJollyAU",
                                           "body":  "\u003e But is it possible to do compilation everywhere or is it necessary to fall back to interpretation in some cases (e.g., on some platforms)?\n\nI think it\u0027s just performance reasons that EFC uses the interpreter. The expressions are evaluated only once so was faster with the interpreter than with the compilation and its overheads. @roji Any other reasons for using the interpreter?",
                                           "updatedAt":  "2024-12-12T13:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XYNk7",
                                           "createdAt":  "2024-12-12T18:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs61A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-12-12T20:01:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:27:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e This sounds like a potentially good solution to me - avoid interpretation if the expression tree contains spans. But is it possible to do compilation everywhere or is it necessary to fall back to interpretation in some cases (e.g., on some platforms)?\n\nThis does not work for native AOT that [EF Core has been busy adding support for](https://github.com/dotnet/efcore/issues?q=is%3Aissue%20state%3Aopen%20label%3Aarea-aot%20).",
                                           "updatedAt":  "2024-12-12T18:15:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XYSeD",
                                           "createdAt":  "2024-12-12T18:25:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs63A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-12-12T20:01:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:27:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It seems this would also require adding support for ref structs in reflection since the interpreter is using reflection under the hood.\n\nYes, adding support for ref structs in reflection has been on [the reflection backlog](https://github.com/dotnet/runtime/issues/10057) for a while. So far we did not have a good motivating scenario to justify investing into it.",
                                           "updatedAt":  "2024-12-12T18:25:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XaCyQ",
                                           "createdAt":  "2024-12-12T23:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESs6_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-12-13T09:39:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeteMWilson",
                                                                               "createdAt":  "2025-05-19T20:28:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "@ChrisJollyAU and others, I think the EF strategy for dealing with this will be to perform early detection and replacing of expression nodes that cannot be interpreted, basically transforming the new tree back to the way it was - before the LINQ interpreter is ever invoked. In other words, we\u0027d have a static, hard-coded table in EF\u0027s funcletizer (the very first visitor that processes the incoming the tree), and would simply rewrite the tree. So from a pure EF perspective, we\u0027ll likely be able to deal with this without any need to either disable interpretation, or something like CanInterpret.\n\nDo you see any trouble with that approach @ChrisJollyAU?\n\nRegardless, this will affect other users of the LINQ interpreter. I\u0027m not sure CanInterpret would be very useful to them, and I\u0027m generally not in love with \"magically\" switching between interpretation and compilation based on something that the user has no knowledge or control over (i.e. there\u0027s a performance cliff the moment you introduce a Contains, or possibly other discrepancies). I\u0027d at least want to discuss this with other users of the interpreter first...\n\n\u003e I think it\u0027s just performance reasons that EFC uses the interpreter. The expressions are evaluated only once so was faster with the interpreter than with the compilation and its overheads. @roji Any other reasons for using the interpreter?\n\nYep, that was the reason, nothing else.",
                                           "updatedAt":  "2024-12-12T23:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sY1kC",
                                           "createdAt":  "2025-05-19T20:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiC9Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nsentinel",
                                                                               "createdAt":  "2025-05-19T20:37:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2025-05-21T17:12:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2025-06-04T22:36:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kenleese",
                                                                               "createdAt":  "2025-08-01T04:02:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "austinw-fineart",
                                                                               "createdAt":  "2025-08-14T04:50:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobertSmits",
                                                                               "createdAt":  "2025-08-14T09:54:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jweelviventium",
                                                                               "createdAt":  "2025-08-23T15:22:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidroth",
                                                                               "createdAt":  "2025-09-10T06:46:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-12T14:46:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "PeteMWilson",
                                           "body":  "It seems ironic to me that the LDM decision for this is that breaking old code that uses EF is okay when the common refrain when discussing adding new operators (e.g. `?.`) to `Expression` is that it breaks using EF in newer code that isn\u0027t written yet.",
                                           "updatedAt":  "2025-05-19T20:32:41Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "First class span\u0027s break EFC",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "breaking-change",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110592",
        "createdAt":  "2024-12-10T21:26:03Z",
        "number":  110592,
        "author":  "fandrei",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAzTzA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-12-10T21:43:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2024-12-15T14:19:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vtecoff",
                                            "createdAt":  "2025-01-18T18:41:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hahn-kev",
                                            "createdAt":  "2025-04-03T07:44:48Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-12-17T19:26:23Z",
        "body":  "### Description\n\nThe following code compiles with .NET 8, but not with .NET 9.\n```\nExpression\u003cFunc\u003cstring\u003e\u003e expression = () =\u003e string.Join(\"\", \"\");\n```\n\n### Reproduction Steps\n\ncompile\n\n### Expected behavior\n\nno errors\n\n### Actual behavior\n\nCompilation errors:\n```\nExpression tree cannot contain value of ref struct or restricted type \u0027ReadOnlySpan\u0027.\nAn expression tree may not contain an expanded form of non-array params collection parameter.\n```\n\n### Regression?\n\nworked in .NET 8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl_UO0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W-WGP",
                                           "createdAt":  "2024-12-10T21:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-10T21:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W_X-W",
                                           "createdAt":  "2024-12-10T23:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "See also discussion of the breaking change in [C# LDM-2024-06-17](https://github.com/dotnet/csharplang/blob/main/meetings/2024/LDM-2024-06-17.md#params-span-breaks).",
                                           "updatedAt":  "2024-12-10T23:16:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XLuKY",
                                           "createdAt":  "2024-12-11T16:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @jaredpar, @jjonescz, @333fred ",
                                           "updatedAt":  "2024-12-11T16:12:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XRdu6",
                                           "createdAt":  "2024-12-12T06:38:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "Logged breaking change issue: https://github.com/dotnet/docs/issues/43949",
                                           "updatedAt":  "2024-12-12T06:38:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X9NLn",
                                           "createdAt":  "2024-12-17T19:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "cc @AlekseyTs",
                                           "updatedAt":  "2024-12-17T19:18:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X9Q7T",
                                           "createdAt":  "2024-12-17T19:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlekseyTs",
                                           "body":  "This looks like a dupe of https://github.com/dotnet/roslyn/issues/73743",
                                           "updatedAt":  "2024-12-17T19:26:22Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Expression tree vs .NET 9 - compilation error",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113583",
        "createdAt":  "2025-03-16T11:50:21Z",
        "number":  113583,
        "author":  "Lamparter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-16T15:24:15Z",
        "body":  "- Related https://github.com/IronLanguages/ironpython3/discussions/1915\n\n`LambdaExpression.CompileToMethod(MethodBuilder)` has been removed for a long time (all of .NET 5+) under a [feature flag](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs#L165) that is not defined anywhere.\n\nThis should be added back to allow compiling lambda expressions to a method definition using the method builder class from Emit.\n\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs#L165-L179\n\n---\n\nI tried to implement it but ran into some weird issues; I haven\u0027t contributed to the .NET Runtime before.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOopETUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ikB0L",
                                           "createdAt":  "2025-03-16T11:50:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-16T11:50:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikCRz",
                                           "createdAt":  "2025-03-16T11:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lamparter",
                                           "body":  "I\u0027m aware of #20270 (and that System.Linq.Expressions is effectively deprecated), but currently unable to go past .NET Framework in certain use cases due to the lack of this feature in System.Linq.Expressions.",
                                           "updatedAt":  "2025-03-16T15:24:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikCmM",
                                           "createdAt":  "2025-03-16T11:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lamparter",
                                           "body":  "I don\u0027t think it would be hard to implement this specifically to .NET Core.",
                                           "updatedAt":  "2025-03-16T11:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikRNT",
                                           "createdAt":  "2025-03-16T13:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The problem with use of this method in compilers is that it targets the exact runtime version that the compiler is running on. Proper compilers should have the runtime version that the compiler is running on and the runtime version that the compiler is targeting decoupled to avoid versioning issues, but there is no way to do that with this method.\n\n(The version coupling worked ok in .NET Framework since .NET Framework evolved slowly and tried to maintain bug-for-bug compatibility. It is not the case in modern .NET.)",
                                           "updatedAt":  "2025-03-16T13:22:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add back `LambdaExpression.CompileToMethod()`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113881",
        "createdAt":  "2025-03-25T15:14:40Z",
        "number":  113881,
        "author":  "jcracknell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-10T21:50:38Z",
        "body":  "https://github.com/dotnet/runtime/blob/32299f4b6aa148fd6ee0da222b01334a88414a25/src/libraries/System.Linq.Queryable/src/System/Linq/Queryable.cs#L2449\n\nMethods having optional (default) argument values cannot appear in an expression tree, where these should presumably be usable. As a (vacuous) example:\n\n```csharp\ndbContext.Owner.SelectMany(o =\u003e dbContext.Cats.CountBy(c =\u003e c.Age))\n```\n\nwill not compile.\n\nhttps://github.com/dotnet/efcore/issues/33177\nhttps://github.com/dotnet/efcore/issues/32741",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOppwDzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kAk_Z",
                                           "createdAt":  "2025-03-25T15:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-25T15:15:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kBKpv",
                                           "createdAt":  "2025-03-25T16:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "The C# language design team [has decided to allow this](https://github.com/dotnet/csharplang/blob/main/meetings/2025/LDM-2025-03-12.md#optional-and-named-parameters-in-expression-trees) in the language.",
                                           "updatedAt":  "2025-03-25T16:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kMIk5",
                                           "createdAt":  "2025-03-26T14:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcracknell",
                                           "body":  "Well that\u0027s timely.\n\nThe observation here is that it should be possible to add an overload omitting the optional parameter (as is the case for every other Queryable method) without breaking binary compatibility. This will allow these methods to be used in expression trees immediately instead of waiting for whatever version lands support for optional parameters in expression trees.",
                                           "updatedAt":  "2025-03-26T14:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mnAPM",
                                           "createdAt":  "2025-04-10T21:50:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cston",
                                           "body":  "Compiler support added in https://github.com/dotnet/roslyn/pull/77972.",
                                           "updatedAt":  "2025-04-10T21:50:37Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Queryable.{Aggregate,Count}By accept optional argument values and cannot appear in an Expression tree",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114446",
        "createdAt":  "2025-04-09T16:05:13Z",
        "number":  114446,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-10T07:46:32Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/The-third-argument-to-SystemLinqExpres/10884377)._\n\n---\n[severity:It bothers me. A fix would be nice]\nThis code results in a warning:\n\n    Expression.MakeUnary(known.type, p[0], null)\n\nThis requires a null forgiving operator to be used:\n\n    Expression.MakeUnary(known.type, p[0], null!)\n\n---\n### Original Comments\n\n#### Feedback Bot on 4/3/2025, 01:07 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpmheHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mT1xx",
                                           "createdAt":  "2025-04-09T16:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T16:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6maF4c",
                                           "createdAt":  "2025-04-10T07:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Source code is at \u003chttps://github.com/dotnet/runtime/blob/f57e6dc747158ab7ade4e62a75a6750d16b771e8/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs#L294-L306\u003e\n\nNote the XML documentation of the `type` parameter says \"pass null if not applicable\".  For example, it is not applicable for ExpressionType.IsTrue, because that ends up calling `IsTrue(Expression expression, MethodInfo? method)`, which figures out the type of the result based on `expression` and `method`.\n\nNullability annotations were added in \u003chttps://github.com/dotnet/runtime/pull/1064\u003e but the nullability of the `type` parameter was not discussed there.",
                                           "updatedAt":  "2025-04-10T07:46:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "The third argument to System.Linq.Expressions.Expression.MakeUnary is not marked nullable, but it\u0027s contract expects null.",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115417",
        "createdAt":  "2025-05-09T05:17:43Z",
        "number":  115417,
        "author":  "brentonsmith",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-09T05:18:22Z",
        "body":  "### Description\n\nThere appears to be an undocumented inconsistency with .Net 8/9\u0027s `ExpressionVisitor` and .Net Framework 4.8\u0027s `ExpressionVisitor` when using `DynamicExpression`. A call to `Visit` will reduce the expression in .Net 8 and change the `NodeType`, but not .Net Framework.\n\nThe `DynamicExpressionVisitor` class avoids this, but was also present in .Net Framework which did not exhibit this behavior, so it is unclear if this is by design.\n\n### Reproduction Steps\n\nThe output of this simple program demonstrates the inconsistency.\n\n```C#\nusing System;\nusing System.Linq.Expressions;\nusing Microsoft.CSharp.RuntimeBinder;\n\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tvar binder = Binder.GetMember(\n\t\t\tCSharpBinderFlags.None,\n\t\t\t\"Test\",\n\t\t\ttypeof(string),\n\t\t\tnew[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null) });\n\t\t\n\t\tvar expression = Expression.Dynamic(binder, typeof(object), Expression.Parameter(typeof(object)));\n\t\tConsole.WriteLine(expression.NodeType);\n\t\tConsole.WriteLine(expression);\n\n\t\tvar visitedExpression1 = new SomeExpressionVisitor().Visit(expression);\n\t\tConsole.WriteLine(visitedExpression1.NodeType);\n\t\tConsole.WriteLine(visitedExpression1);\n\n\t\tvar visitedExpression2 = new SomeDynamicExpressionVisitor().Visit(expression);\n\t\tConsole.WriteLine(visitedExpression2.NodeType);\n\t\tConsole.WriteLine(visitedExpression2);\n\t}\n\t\n\tclass SomeExpressionVisitor : ExpressionVisitor\n\t{\n\t}\n\t\n\tclass SomeDynamicExpressionVisitor : DynamicExpressionVisitor\n\t{\n\t}\n}\n```\n\n### Expected behavior\n\nThe visited expression should remain a `DynamicExpression`.\n\n```\nDynamic\n[Dynamic]\nDynamic\n[Dynamic]\nDynamic\n[Dynamic]\n```\n\n### Actual behavior\n\nThe visited expression is reduced, becomes of type `Invoke`.\n\n```\nDynamic\n[Dynamic]\nInvoke\nInvoke(value(System.Runtime.CompilerServices.CallSite`1[System.Func`3[System.Runtime.CompilerServices.CallSite,System.Object,System.Object]]).Target, value(System.Runtime.CompilerServices.CallSite`1[System.Func`3[System.Runtime.CompilerServices.CallSite,System.Object,System.Object]]), Param_0)\nDynamic\n[Dynamic]\n```\n\n### Regression?\n\nInconsistency to .Net Framework observed in .NETCore 3.1, .NET 5, .NET 6, .NET 7, .NET 8 and .NET 9.\n\nWorks as expected in .Net Framework 4.7.2 and .Net Framework 4.8. \n\n.Net Framework output:\n```\nDynamic\nGetMember Test(Param_0)\nDynamic\nGetMember Test(Param_0)\nDynamic\nGetMember Test(Param_0)\n```\n\n### Known Workarounds\n\nUsing `DynamicExpressionVisitor` in place of `ExpressionVisitor`.\n\n### Configuration\n\nObserved with .Net 8.0 on x64 Windows 11, but also on .Net Fiddle on a range of .Net Core versions.\n\nI do not believe this is related to the .NET configuration.\n\n### Other information\n\nThe inconsistency appears to be with `DynamicExpression.Accept`. In [net48](https://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/DynamicExpression.cs,139) this will run `VisitDynamic`, but in [net8.0](https://source.dot.net/#System.Linq.Expressions/System/Linq/Expressions/DynamicExpression.cs,151) it will only run this code path if the visitor is a subclass of `DynamicExpressionVisitor`. If it\u0027s not it attempts to reduce the expression which results in the Invocation expression.\n\nPart of the reason for raising this issue is that the actual `VisitDynamic` implementation across `ExpressionVisitor` and `DynamicExpressionVisitor` appears to be duplicated and the override therefore may be redundant?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqsavPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6qxq8_",
                                           "createdAt":  "2025-05-09T05:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-09T05:18:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DynamicExpression Inconsistency With .Net Framework\u0027s ExpressionVisitor",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115674",
        "createdAt":  "2025-05-16T22:28:27Z",
        "number":  115674,
        "author":  "AlekseyTs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-17T13:49:03Z",
        "body":  "### Description\n\nSee:\n- https://github.com/dotnet/roslyn/issues/78609#issuecomment-2887721096\n- https://github.com/dotnet/roslyn/issues/78609#issuecomment-2887732408\n- https://github.com/dotnet/roslyn/issues/78609#issuecomment-2887740979\n\nI assume both `AndAlso` and `OrElse` factories are affected.\n\nIt is quite possible that if creation of such trees will be allowed, expression trees interpretation and compilation might need fixing as well. \n\n### Reproduction Steps\n\nSee above\n\n### Expected behavior\n\nIt should be possible to create, interpret and compile+execute such trees \n\n### Actual behavior\n\n```\nSystem.ArgumentException: The user-defined operator method \u0027op_BitwiseAnd\u0027 for operator \u0027AndAlso\u0027 must have associated boolean True and False operators.\n   at System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator(ExpressionType nodeType, Type left, Type right, MethodInfo method)\n   at System.Linq.Expressions.Expression.AndAlso(Expression left, Expression right, MethodInfo method)\n```\n\n### Regression?\n\nUnlikely\n\n### Known Workarounds\n\nNone known at the moment\n\n### Configuration\n\n_No response_\n\n### Other information\n\nI think it will be good to add an overload that explicitly takes MethodInfo for boolean True/False operator. And having a conversion lambda for the argument wouldn\u0027t hurt, that is if we would want to support extension operators.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrCAezw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6sIB7P",
                                           "createdAt":  "2025-05-16T22:29:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-16T22:29:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "An unexpected exception is thrown by System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator when nullable value types are involved",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116643",
        "createdAt":  "2025-06-13T17:28:28Z",
        "number":  116643,
        "author":  "Ta1sty",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-13T17:42:07Z",
        "body":  "### Description\n\nHello, \n\nwhile compiling an Expression Tree I encountered an error when compiling a it as a lambda:\nSystem.InvalidProgramException: Common Language Runtime detected an invalid program.\n\nAfter some painful debugging (the expression tree was a bit larger^^) I found out that Expression.Bind(...) argument validation only checks for assignability to the member that is being initialized.\n\nHowever: If the member has type \u0027object\u0027 and the value I want to bind is any value-type, the compiler expects an explicit convert to object. I guess this is because of boxing??\n\nSo either I would expect the compiler to be able to bind a value-type variable to an object member or the validation for the arguments of Expression.Bind(...) should throw an exception that tells me that a binding form a value-type to an object requires an explicit cast, but not a compiler error with such little detail further down the line...\n\nIf call a method or constructor I will get an error when assigning a value-type to an object parameter, so this seems fine. As I stated, I would expect an error from Expression.Bind if I cannot perform such an assignment.\n\nThis whole thing happens because the validation only checks for memberType.IsAssignableFrom(expression.Type)\n\n### Reproduction Steps\n\n```cs\n\nusing System.Linq.Expressions;\n\nvar parameter = Expression.Parameter(typeof(decimal));\n\nvar binding = Expression.Bind(\n    typeof(Wrapper).GetProperty(nameof(Wrapper.Value))!,\n    parameter\n);\n\nvar init = Expression.MemberInit(\n    Expression.New(typeof(Wrapper)), \n    binding\n);\n\nvar lambda = Expression.Lambda(init, parameter);\nvar func = lambda.Compile();\n\nreturn;\n\npublic class Wrapper\n{\n    public object? Value { get; set; }\n}\n\n```\n\n\n```\n\nException:\nSystem.InvalidProgramException: Common Language Runtime detected an invalid program.\n   at System.Reflection.Emit.DynamicMethod.CreateDelegate(Type delegateType, Object target)\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\n   at Program.\u003cMain\u003e$(String[] args)\n\n```\n\n### Expected behavior\n\nThe comment for Expression.Bind states:\nArgumentException — member does not represent a field or property. -or- The property represented by member does not have a set accessor. -or- expression.Type is not assignable to the type of the field or property that member represents\n\nI expect an Argument Exception when I am unable to assign a value-type to an object-member.\n\n### Actual behavior\n\nNo Exception is thrown. The error occurs once the lambda is being compiled.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUsing Expression.Convert(...).\n\n### Configuration\n\n.NET SDK 9.0.100\n.NET 9.0\nC# Version: 13\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsRbH8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xFsfx",
                                           "createdAt":  "2025-06-13T17:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-13T17:31:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "MemberInitExpression fails to recognize needed explicit conversion from value type to object.",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117275",
        "createdAt":  "2025-07-03T14:52:41Z",
        "number":  117275,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-03T22:33:50Z",
        "body":  "### Description\n\nIt looks like compiler builds expression not the best way.\nHere\u0027s what ILSpy shows me:\n```\n\t// Expression\u003cFunc\u003cBar, int\u003e\u003e expression = (Bar bar) =\u003e bar.Property;\n\tIL_0035: ldloc.2\n\tIL_0036: ldtoken method instance int32 UserQuery/Foo::get_Property()\n\tIL_003b: call class [System.Runtime]System.Reflection.MethodBase [System.Runtime]System.Reflection.MethodBase::GetMethodFromHandle(valuetype [System.Runtime]System.RuntimeMethodHandle)\n\tIL_0040: castclass [System.Runtime]System.Reflection.MethodInfo\n\tIL_0045: call class [System.Linq.Expressions]System.Linq.Expressions.MemberExpression [System.Linq.Expressions]System.Linq.Expressions.Expression::Property(class [System.Linq.Expressions]System.Linq.Expressions.Expression, class [System.Runtime]System.Reflection.MethodInfo)\n\tIL_004a: ldc.i4.1\n\tIL_004b: newarr [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression\n\tIL_0050: dup\n\tIL_0051: ldc.i4.0\n\tIL_0052: ldloc.2\n\tIL_0053: stelem.ref\n\tIL_0054: call class [System.Linq.Expressions]System.Linq.Expressions.Expression`1\u003c!!0\u003e [System.Linq.Expressions]System.Linq.Expressions.Expression::Lambda\u003cclass [System.Runtime]System.Func`2\u003cclass UserQuery/Bar, int32\u003e\u003e(class [System.Linq.Expressions]System.Linq.Expressions.Expression, class [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression[])\n\tIL_0059: stloc.0\n```\n\nWhy is it `IL_0036: ldtoken method instance int32 UserQuery/Foo::get_Property()` instead of `IL_0036: ldtoken method instance int32 UserQuery/Bar::get_Property()` ?\n\n### Reproduction Steps\n\nIt can be easily reproduced:\n```\nvoid Main()\n{\n\tConsole.WriteLine(typeof(Bar).GetProperty(\"Property\").ReflectedType);\n\n\tExpression\u003cFunc\u003cBar, int\u003e\u003e expr = bar =\u003e bar.Property;\n\tConsole.WriteLine(((expr.Body as MemberExpression).Member as PropertyInfo).ReflectedType);\t\n}\n\npublic class Foo\n{\n\tpublic int Property {get;}\n}\n\npublic class Bar : Foo\n{\n\t\n}\n```\n\n### Expected behavior\n\n`ReflectedType` on the expression should also be `Bar`\n\n### Actual behavior\n\n`ReflectedType` is `Foo`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtNUbtA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60wVNO",
                                           "createdAt":  "2025-07-03T14:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-03T14:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60wrUp",
                                           "createdAt":  "2025-07-03T15:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "Another example, which is, IMO, even worse:\n```\nvoid Main()\n{\n\tConsole.WriteLine(typeof(Bar).GetMethod(\"DoIt\").ReflectedType);\n\tExpression\u003cFunc\u003cBar, object\u003e\u003e expr = bar =\u003e bar.DoIt;\n\tvar reflectedType = ((((expr.Body as UnaryExpression).Operand as MethodCallExpression).Object as ConstantExpression).Value as MethodInfo).ReflectedType;\n\t\n\tConsole.WriteLine(reflectedType);\n}\n\npublic class Foo\n{\n\tpublic int Property {get;}\n\n\tpublic virtual void DoIt() {}\n}\n\npublic class Bar : Foo\n{\n\tpublic override void DoIt() {}\n}\n```",
                                           "updatedAt":  "2025-07-03T15:18:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60w4JL",
                                           "createdAt":  "2025-07-03T15:29:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "This is not a runtime issue, the expression is built by C# compiler.\n\n\u003e Why is it `IL_0036: ldtoken method instance int32 UserQuery/Foo::get_Property()` instead of `IL_0036: ldtoken method instance int32 UserQuery/Bar::get_Property()` ?\n\nBecause in IL, non-virtual members are always referenced by its definition. I\u0027m even not sure whether referencing from derived class is valid.\n`ReflectedType` is purely an artifact from reflection stack. It\u0027s not a native concept in IL.",
                                           "updatedAt":  "2025-07-03T15:29:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60xc9S",
                                           "createdAt":  "2025-07-03T16:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "Ah, indeed, should be csharp repo.",
                                           "updatedAt":  "2025-07-03T16:25:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc601Ru0",
                                           "createdAt":  "2025-07-03T22:33:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZOElQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2025-07-04T05:00:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Because in IL, non-virtual members are always referenced by its definition. I\u0027m even not sure whether referencing from derived class is valid.\n\nYou can refer to them from derived class (it\u0027s the reason why moving members from derived classes to base classes is not a binary breaking change) but member resolution will end up resolving it same way: the two `ldtoken` instructions would have equivalent result.",
                                           "updatedAt":  "2025-07-03T22:33:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unexpected reflected type of MemberInfo in MemberExpression.",
        "labels":  [
                       "area-System.Linq.Expressions",
                       "untriaged"
                   ]
    }
]
