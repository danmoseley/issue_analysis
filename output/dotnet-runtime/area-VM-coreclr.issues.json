[
    {
        "url":  "https://github.com/dotnet/runtime/issues/4068",
        "createdAt":  "2015-03-20T20:58:17Z",
        "number":  4068,
        "author":  "janhenke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-22T18:31:46Z",
        "body":  "Currently all the internal API uses Win32 API types like DWORD.\n\nRefactoring the code to use C/C++ standard types would have several benefits.\n- Lowering the threshold for non-Windows developers to participate in the development\n- Make the code more standard conformant.\n- Code easier to read (e.g. \u003ccstdint\u003e int32_t -\u003e 32bit integer)\n\nIn general the currently used types are very alien for every Unix developer. In view of the cross platform goal of coreclr this would be a big step forward to opening up and be more inclusive towards new developers.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPnieCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjEzODE4",
                                           "createdAt":  "2015-03-21T00:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This was discussed on gitter no so long ago ...\n\nCoreCLR codebase has a Win32 bias. PAL was designed to make it work as is. Wholesale replacement of Win32 types with stdint.h types would remove some of the Win32 bias, but I doubt that it would move the needle enough to make a difference.\n\nI would love to see portability cleanup - like adopting stdint.h types - to be done for the parts of the tree that are likely to evolve into reusable components. GC is one that we know about so far. My comment in https://github.com/dotnet/coreclr/issues/270 touched on this subject as well. PRs to make GC more portable, with less Win32 artifacts are welcomed.\n\nOur strategy is to migrate most of the runtime code from C++ to C#. It is what we have been spending our energy in the low-level BCL land, instead of trying to polish the C++ implementation.\n\nPorting to C# is fixing whole bunch of problems at once: no interop overhead, no buggy \"manually managed\" code, no need to deal with C++ compiler quirks on different platforms ... and no Win32 types too.\n",
                                           "updatedAt":  "2015-03-21T00:59:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjgzMzYz",
                                           "createdAt":  "2015-03-21T08:57:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janhenke",
                                           "body":  "Thanks @jkotas for that explanation. Sounds like a good plan to me.\n\nI also see this more as a long term goal as I am aware we are not going to change code just for the sake of removing the Win32 types. But it should stand as one of the things to do when someone is doing a code cleanup anyway.\n\nMaybe you or somebody else from Microsoft can create a Wiki page, which lists the different parts of the code base, the status each has right now and the strategic goals for that part. So people can get an overview in which direction certain parts should evolve.\n\nSo I would like to keep this issue open as a long term tracking on how far we are with removing the Win32 bias in the code base.\n",
                                           "updatedAt":  "2015-03-21T08:57:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1ODM0NTkyMQ==",
                                           "createdAt":  "2015-11-20T10:07:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "GC cleanup done as dotnet/coreclr#2110\n",
                                           "updatedAt":  "2015-11-20T10:07:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-eDuR",
                                           "createdAt":  "2022-02-22T18:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of the experimental [issue cleanup initiative](https://github.com/dotnet/runtime/issues/60288) we are currently trialing. Please share any feedback you might have in the linked issue.",
                                           "updatedAt":  "2022-02-22T18:01:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-eJ4L",
                                           "createdAt":  "2022-02-22T18:31:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janhenke",
                                           "body":  "I still consider this an important long term goal and would like to keep this issue open.",
                                           "updatedAt":  "2022-02-22T18:31:44Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Replace Win32 API types with standard types",
        "labels":  [
                       "documentation",
                       "area-VM-coreclr",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/4518",
        "createdAt":  "2015-09-24T09:20:10Z",
        "number":  4518,
        "author":  "gafter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-13T15:19:11Z",
        "body":  "We\u0027d like the Roslyn compilers to be deterministic. One obstacle is the timestamp in the assembly header. We propose to use a deterministic hash of compiler inputs (or a hash of the rest of the assembly, excluding the timestamp) to produce bits to use in the timestamp, and we\u0027ll set the upper bit to 1. For this to be \"legal\", we need the spec to allow random-looking bits in the timestamp when the timestamp\u0027s upper bit is set to 1.\n\n/cc @jaredpar @tmat \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfaUDEA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0Mjk4MDk2MA==",
                                           "createdAt":  "2015-09-24T16:33:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWxy5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2020-11-14T02:59:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This should be primarily request for [PE file format spec](https://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx) change. AFAIK, the PE file format spec is maintained by Microsoft C++ compiler team. The CLI file format is meant to be a strict extension of PE file format.\n\n[ECMA-335](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf) has the PE file headers as \u0027informative text only\u0027. This informative text is essentially copy of the relevant part of PE file format spec.\n\ncc @CarolEidt \n",
                                           "updatedAt":  "2015-09-24T16:33:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0MzI0MTUzNQ==",
                                           "createdAt":  "2015-09-25T14:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@gafter afaik the initial approach was to set timestamp to 0 (https://github.com/dotnet/roslyn/commit/04462c44e30dfa91267581abdb029f31) and this is also how Mono\u0027s mcs implemented it, any reason why this didn\u0027t work out for you?\n",
                                           "updatedAt":  "2015-09-25T14:42:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NTkzNDU3OQ==",
                                           "createdAt":  "2015-10-06T17:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@gregg-miskelly You were the strongest push-back on using a timestamp of 0 for deterministic builds. Do you want to comment here?\n",
                                           "updatedAt":  "2015-10-06T17:25:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NTk1MDk0Mg==",
                                           "createdAt":  "2015-10-06T18:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Using a timestamp of 0 has proved problematic in the past.  There are many tools which rely on timestamp being a non-zero value.  In order to use 0 I think we\u0027d need to have a very compelling use case.  \n",
                                           "updatedAt":  "2015-10-06T18:12:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NTk1NjM0MA==",
                                           "createdAt":  "2015-10-06T18:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@jaredpar can you elaborate a bit more on \"many tools\"? Are those internal Microsoft tools or 3rd party ones? Since this is supposed to be an offset from the epoch I\u0027d be very curious how 0 breaks those tools :smile: \n",
                                           "updatedAt":  "2015-10-06T18:28:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NzA5NTM5Mw==",
                                           "createdAt":  "2019-01-24T07:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaykrell",
                                           "body":  "@akoeplinger right, building on January 1 1970 would seem legal.\r\nDoes a constant 1 work?\r\nWhile more expensive, a hash should work too. Assuming 31 bits is enough. And tools are ok with future times. I think at some point the spec changed and that bit isn\u0027t the discriminant. I see hashes in PEs w/o the high bit set.\r\ne.g.:\r\n\r\n\u003e\\bin\\amd64\\cdb /z %windir%\\system32\\kernel32.dll\r\n:000\u003e !lmi .\r\n   Time Stamp: 5f488a51 (This is a reproducible build file hash, not a true timestamp)\r\n  ",
                                           "updatedAt":  "2019-01-24T07:30:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59pQMQ",
                                           "createdAt":  "2024-05-13T15:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "probably something we can add to https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md",
                                           "updatedAt":  "2024-05-13T15:19:01Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Proposed CLR spec change: allow timestamp header to be deterministic hash with upper bit 1",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/5040",
        "createdAt":  "2016-02-01T21:35:19Z",
        "number":  5040,
        "author":  "CarolEidt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuCgMw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nietras",
                                            "createdAt":  "2016-09-02T10:55:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrankNiemeyer",
                                            "createdAt":  "2018-04-24T12:59:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-01-24T05:50:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-01-24T00:14:03Z",
        "body":  "Currently, even under the Unix amd64 ABI, Vector\u003cT\u003e is always passed on the stack. However, since it is not (and can\u0027t easily become) an interop type, it would be reasonable to pass and return these structs in registers (since they are, by definition, the size of the SIMD registers supported on the target, if present). This would require work in both the vm and jit. Note that for the unix ABI, the classification of the type is done after the call to CheckIfSIMDAndUpdateSize(), so it would already be appropriately marked at that time.\n\r\ncategory:cq\r\ntheme:calling-convention\r\nskill-level:expert\r\ncost:medium\r\nimpact:large",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOCp9UrQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3ODIxNDA2MQ==",
                                           "createdAt":  "2016-02-01T21:55:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  ":+1: would also go some way to addressing https://github.com/dotnet/corefx/issues/157#issuecomment-148875718 ?\n",
                                           "updatedAt":  "2016-02-01T21:55:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider passing and returning Vector\u003cT\u003e in registers",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-CodeGen-coreclr",
                       "area-VM-coreclr",
                       "optimization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9160",
        "createdAt":  "2017-10-18T23:46:13Z",
        "number":  9160,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T01:42:29Z",
        "body":  "While doing some code review I noticed that the new code paths in the prestub appear to have a race condition that would allow JITCompilationFinished to be invoked more than once for the same method. This looks like it could happen whenever we hit the circular static class constructor race that bypasses the jit lock. Previously when the prestub ultimately called SetNativeCodeInterlocked we would skip the remaining events when that showed code was already jitted, but now we return to JitCompileCodeEventWrapper which still emits the remaining events.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Multiple JITCompilationFinished events should not be generated",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9756",
        "createdAt":  "2018-02-20T22:03:04Z",
        "number":  9756,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T01:43:03Z",
        "body":  "This is to track the issue reported here: https://github.com/dotnet/roslyn/issues/23846\r\n\r\nGiven that all the relevant history remains in 23846 I plan to use that one for discussion and this bug is primarily for tracking purposes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Potential stress failure when using multi-core JIT",
        "labels":  [
                       "bug",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10184",
        "createdAt":  "2018-04-18T18:26:24Z",
        "number":  10184,
        "author":  "AndyAyersMS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-25T21:41:02Z",
        "body":  "GcStress currently tries to instrument NGEN precompiled methods twice: once during `Module::Initialize` (with a twist for the core library) and a second time during `MethodDesc::PrepareILBasedCode` (with a twist for prejitted IL stubs).\r\n\r\nR2R precompiled methods are never instrumented, currently.\r\n\r\nSeems like we should have only one strategy and it should apply to all cases of prejitted code.\r\n\r\nEarly instrumentation during module load is nice because it avoids race conditions that can plague on-demand instrumentation. But there is an upfront cost as potentially thousands of methods need to be instrumented but only a few of them will ever be executed.\r\n\r\nLate instrumentation is more pay for play but must be done carefully so that no thread can see a partially instrumented method.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjZRrFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NlGsV",
                                           "createdAt":  "2024-09-25T21:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I\u0027d try instrumenting on module load and see what happens. If that would be more reliable. \r\nIt might seem very redundant to instrument everything in the module, but it will be roughly proportional to the module size (like the load itself and any kind of relocation/fixups). Also, perhaps next to the cost of doing GC stress it might not be a big difference.",
                                           "updatedAt":  "2024-09-25T21:41:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "GcStress: choose strategy for instrumenting prejitted code",
        "labels":  [
                       "GCStress",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10187",
        "createdAt":  "2018-04-18T18:46:13Z",
        "number":  10187,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-06T06:34:43Z",
        "body":  "At least, every object that is legal to move should move.\r\n\r\nOne problem with GCStress today is that when a GC occurs, most of the time (in some measurement I\u0027ve done) objects don\u0027t actually move. This means that bad GC info doesn\u0027t get noticed.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVsGyGw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Mjg0Mzk2Mg==",
                                           "createdAt":  "2018-04-19T18:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "related https://github.com/dotnet/coreclr/issues/10403",
                                           "updatedAt":  "2018-04-19T18:54:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjM2NTgyNg==",
                                           "createdAt":  "2018-08-27T20:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@BruceForstall \r\n\r\n\u003emost of the time (in some measurement I\u0027ve done) objects don\u0027t actually move\r\n\r\ncan you please tell me which tests you used to do your measurements? I just want to establish a baseline before we put in fixes for this.",
                                           "updatedAt":  "2018-08-27T20:56:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjM4Njc0MQ==",
                                           "createdAt":  "2018-08-27T22:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "I can\u0027t remember what I was doing at the time. I was probably looking at the CLR logging (or maybe GC logging?) for a GCStress 4 or 8 or 0xC run of some relatively long-running test with allocations, and noticing that the output indicated objects didn\u0027t move.",
                                           "updatedAt":  "2018-08-27T22:15:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjM5Nzk0MQ==",
                                           "createdAt":  "2018-08-27T23:09:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "ok... what do you recommend that we use to see the effect of the fixes? just run jit tests with GCStress 4/8/C?",
                                           "updatedAt":  "2018-08-27T23:09:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjM5OTczNw==",
                                           "createdAt":  "2018-08-27T23:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "If you want to verify that objects move, you\u0027ll obviously need a test that uses some kind of internal logging with before/after addresses for every object. Or maybe a COMPlus variable that asserts when they are the same after a GC.\r\n\r\nIn terms of correctness, we run lots of GCStress 0xC jobs in the CI that can be triggered.",
                                           "updatedAt":  "2018-08-27T23:20:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjQwMTQzNw==",
                                           "createdAt":  "2018-08-27T23:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I was not asking how to verify whether an object moves during a GC. I was asking for a set of tests your team normally runs so I can say \"without these fixes x% objects moved for your scenarios whereas with them y% objects moved and y \u003e\u003e x, success!\".",
                                           "updatedAt":  "2018-08-27T23:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WKLFT",
                                           "createdAt":  "2023-02-27T00:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-02-27T00:01:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WwbIb",
                                           "createdAt":  "2023-03-06T06:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@davidwrighton We were chatting about this issue recently.",
                                           "updatedAt":  "2023-03-06T06:34:39Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "GCStress: ensure every object moves on a GC",
        "labels":  [
                       "GCStress",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10880",
        "createdAt":  "2018-08-10T23:18:42Z",
        "number":  10880,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-28T01:51:23Z",
        "body":  "Currently this is an unvalidated suggestion. Additional investigation would be required to confirm the win exists and that the tradeoff in perf/complexity elsewhere are acceptable.\r\n\r\nIn the past I think Peter did some JIT investigation and determined that encoding GC data was about 8% of JIT time. This data isn\u0027t needed until a GC occurs and the method is on the stack. It is possible that by doing the work on a parallel background thread the user perceivable delay between invoking the PreStub and having code available to run would improve by 8%, with a tradeoff that datastructures used by the JIT might need to persist in memory longer and that some of the overhead might resurface as GC delay.\r\n\r\n\r\ncategory:throughput\r\ntheme:gc-info\r\nskill-level:expert\r\ncost:extra-large",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Generate JIT GC encoding asynchronously to improve JIT throughput",
        "labels":  [
                       "JitThroughput",
                       "area-CodeGen-coreclr",
                       "area-VM-coreclr",
                       "optimization",
                       "JitUntriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10881",
        "createdAt":  "2018-08-10T23:56:54Z",
        "number":  10881,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAatqNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HFadeel",
                                            "createdAt":  "2018-08-11T01:45:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikedn",
                                            "createdAt":  "2018-08-11T03:54:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2018-08-16T11:15:01Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-01-24T00:10:40Z",
        "body":  "Multicore Jit has been able to provide 20+% startup wins after it is trained, but in many scenarios generating and persisting the training data is problematic. We could instead analyze the IL of methods as they were being generated to infer the additional methods they are likely to call in the near future. As a simple case if we were jitting a method:\r\n\r\n```\r\nFoo()\r\n{\r\n    Bar();\r\n    Baz();\r\n}\r\n```\r\n\r\nWe have a pretty strong expectation that Bar() and Baz() will be needed in the near future. Lets naively assume that each of Foo, Bar, and Baz take 500us to compile, Foo takes 1us to run once jitted, and at the 100us mark of compiling Foo the JIT will call back to the runtime alerting it that Bar and Baz are good speculative compilation candidates. In the current runtime Foo would complete after 1501us whereas in a perfectly parallelized world with no other overhead it would complete in 601us. In practice the wins would probably be less than what we see from trained Multicore Jit, but we\u0027d need further investigation to determine how much less. We might still be able to capture a significant fraction. The advantage is that it doesn\u0027t create any dependencies that the application needs to account for which gives it broader scenario reach.\r\n\r\ncategory:throughput\r\ntheme:runtime\r\nskill-level:expert\r\ncost:extra-large",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGL-vIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDkxOTc1Ng==",
                                           "createdAt":  "2018-08-22T05:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "We would probably need to leverage the logic in multicore jit that prevents / suppresses exceptions from methods that get jitted before they get called, right? Also might there be issues with cctor ordering?",
                                           "updatedAt":  "2018-08-22T05:52:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNTIxNTM5Mw==",
                                           "createdAt":  "2018-08-22T23:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Yeah I think its definitely something we\u0027d need to investigate if we pursued this. I don\u0027t know where we would ultimately want to draw the line in terms of apps that took subtle dependencies on runtime implementation details vs. maximizing performance gains - probably a question we will need some experimentation and feedback to answer properly.\r\n\r\nIn terms of issues I\u0027d guess the risks look similar to increasing the aggressiveness of the inliner. Speculating that Bar() and Baz() should be compiled before Foo() runs seems roughly the same as inlining Bar + Baz into Foo from the perspective of when we will need to load assemblies, resolve types and run cctors. You may already have some relevant feedback on what that looks like or know why the issues wouldn\u0027t be comparable?",
                                           "updatedAt":  "2018-08-22T23:04:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Speculate future methods that will need to be jitted via IL analysis of currently jitting methods",
        "labels":  [
                       "area-CodeGen-coreclr",
                       "area-VM-coreclr",
                       "optimization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11003",
        "createdAt":  "2018-08-29T18:07:09Z",
        "number":  11003,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-21T02:11:25Z",
        "body":  "https://github.com/dotnet/coreclr/pull/19725 added workarounds to `floatdouble.cpp` and `floatsingle.cpp` to ensure that `ceil` and `floor` return the appropriate values when compiled with MSVC.\r\n\r\nThis is tracked internally in the DevDiv bug database as workitem 673062 and 673060.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ3-DRA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjI5NDEwMg==",
                                           "createdAt":  "2019-06-14T22:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAqnRrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2019-06-14T22:11:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Talking to internal teams it appears the current POR is to have these delivered in a similar time for the release of 3.0. This means there probably isn\u0027t time to remove the workarounds prior to those fixes. Moving this to 3.x timeframe.",
                                           "updatedAt":  "2019-06-14T22:03:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjI5NjMzNg==",
                                           "createdAt":  "2019-06-14T22:13:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I also don\u0027t believe we can remove these until we make the new CRT a baseline requirement for running CoreCLR (I don\u0027t believe we want someone hitting this issue if they build locally using VS 2017, for example).\r\n\r\nWe can certainly change the `#ifdef`, however 😄 ",
                                           "updatedAt":  "2019-06-14T22:13:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjY1NDY5Nw==",
                                           "createdAt":  "2020-07-22T19:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@tannergooding @AaronRobinsonMSFT triaging through old .net 5 issues. Is this something which is critical for 5?",
                                           "updatedAt":  "2020-07-22T19:36:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjY2NDI5NQ==",
                                           "createdAt":  "2020-07-22T19:57:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLLLBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-07-22T20:08:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "It isn\u0027t and isn\u0027t something we can fix either; it is a bug in the MSVC compiler when fp:fast is specified.",
                                           "updatedAt":  "2020-07-22T19:57:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjY2ODEwMA==",
                                           "createdAt":  "2020-07-22T20:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks for the info. Should it be moved to a different area than vm-coreclr? Will move to 6 for now. ",
                                           "updatedAt":  "2020-07-22T20:04:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Remove workaround from floatdouble and floatsingle after the /fp:fast bugs are resolved",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11161",
        "createdAt":  "2018-09-27T22:28:35Z",
        "number":  11161,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:21:27Z",
        "body":  "The caching and instantiation location of generics using collectible types was designed for the purpose of collectible types in the past. There are concerns that in the world of multiple, possibly transient AssemblyLoadContexts, the existing design may not be ideal. We need to investigate that.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Verify correctness of caching and instantiation location of generics using collectible types",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11536",
        "createdAt":  "2018-11-22T16:47:13Z",
        "number":  11536,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAt1y7Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HermannGruber",
                                            "createdAt":  "2019-08-05T07:26:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-12-15T00:04:42Z",
        "body":  "Places, such as callers to `towlower` have likely trouble with handling scripts from supplementary Unicode plane.\r\n\r\nTo make our product inclusive, we should support all scripts supported by Unicode.\r\n\r\nSee conversation in https://github.com/dotnet/coreclr/issues/20616#issuecomment-440260883.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObq_3Xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ur_de",
                                           "createdAt":  "2023-12-15T00:01:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-12-15T00:01:45Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Audit Unicode support in CoreCLR",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12061",
        "createdAt":  "2019-02-17T01:50:21Z",
        "number":  12061,
        "author":  "kouvel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAvS49Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2019-02-17T02:14:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "blackie1019",
                                            "createdAt":  "2019-08-27T00:26:14Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-26T17:47:34Z",
        "body":  "At https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md\r\n\r\nRequested at https://github.com/dotnet/coreclr/issues/21879\r\n\r\nThings like `COMPlus_*` env vars and other forms of configuration that treat config values as hex even without a `0x` prefix should be documented as such.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdQbBoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTA4NDQxNA==",
                                           "createdAt":  "2019-08-27T00:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blackie1019",
                                           "body":  "@kouvel  You answered my question!",
                                           "updatedAt":  "2019-08-27T00:26:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51BsGg",
                                           "createdAt":  "2024-02-26T06:01:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2024-02-26T06:01:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Document config types that treat int values as hexadecimal (even without 0x prefix)",
        "labels":  [
                       "documentation",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12260",
        "createdAt":  "2019-03-13T21:17:45Z",
        "number":  12260,
        "author":  "gafter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBuozg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2019-03-14T16:02:03Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jzabroski",
                                            "createdAt":  "2019-03-15T22:24:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pkese",
                                            "createdAt":  "2019-05-26T21:58:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2019-10-29T02:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "riipah",
                                            "createdAt":  "2019-10-29T18:03:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2019-10-29T18:12:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2019-10-30T00:41:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shoooe",
                                            "createdAt":  "2019-12-02T17:48:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vermorel",
                                            "createdAt":  "2019-12-06T13:11:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EduardoLarios",
                                            "createdAt":  "2020-01-15T00:36:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2020-07-12T13:21:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2020-08-17T14:46:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uygary",
                                            "createdAt":  "2021-06-29T22:22:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2022-11-29T00:18:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-07-14T09:58:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thinker227",
                                            "createdAt":  "2025-04-25T16:24:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2025-04-25T17:08:47Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2022-11-24T10:23:06Z",
        "body":  "It would be very convenient to have a CLR instruction for switching on the type of an object.  The C# compiler could use this to generate code for a pattern-matching switch statement.  The IL instruction would be followed by a series of *(type, label)* pairs.  At runtime it would consume its operand, determine the first type in the list that the object inherits from, and jump to the corresponding label with a reference of the appropriate type on the stack.  It would be required to operate in constant amortized time, no matter the number of types and whether or not those types are sealed.\r\n\r\nWe currently generate a series of type tests and branches for this case.\r\n\r\nIt is intended that this instruction would run in constant time for user-written types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ68yvA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzQwNTA3NA==",
                                           "createdAt":  "2019-03-15T18:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Why would this be better than a sequence of if/else pairs? Is this about reducing IL size? Do you expect the GC to have a more optimal implementation than the c# compiler generating the equivalent of below?\r\n\r\n```csharp\r\nif (o.GetType() == typeof(string))\r\n{\r\n    …\r\n}\r\nelse if (o.GetType() == typeof(object))\r\n{\r\n   ....\r\n}\r\nelse\r\n{\r\n    ...\r\n}\r\n```",
                                           "updatedAt":  "2019-03-15T18:57:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzQ1OTI5NQ==",
                                           "createdAt":  "2019-03-15T22:21:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA5DMaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2019-06-01T16:46:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EduardoLarios",
                                                                               "createdAt":  "2020-01-15T00:40:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@davidwrighton  I think for literature on compiler optimization of pattern matching, the following two OCaml papers give you requisite knowledge and understanding:\r\n\r\n[Compiling Pattern Matching to Good Decision Trees](http://www.cs.tufts.edu/~nr/cs257/archive/luc-maranget/jun08.pdf)\r\n[Optimizing Pattern Matching](http://pauillac.inria.fr/~maranget/papers/opat/pat.ps.gz)\r\n\r\nFurther, by hoisting this to a logical IL instruction, it is conceivable that really large F#/C# data science algorithms utilizing complex pattern matching could benefit from hot path optimization of the compiled decision tree.  I realize C# only implements basic switch-on-type pattern matching right now, but the general benefits are wide-spread to further optimization.  For OOP type-matching like switch-on-type, the compiler can specifically reason that:\r\n\r\na) there are significantly more \"default case\" type matches that fall-through to the default case\r\nb) it is probably more reasonable to optimize for the default case to be evaluated first\r\n\r\nThe only remaining question is - if you\u0027re going to add an instruction, why only take one type parameter?  The IL instruction should allow stacking it so it works as a decision tree.  For a view into how OCaml does this, see the free chapter 23 of Real World Ocaml: https://v1.realworldocaml.org/v1/en/html/the-compiler-backend-byte-code-and-native-code.html\r\n\r\n@gafter  What do you think?",
                                           "updatedAt":  "2019-03-15T22:21:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzQ3NTU5Mw==",
                                           "createdAt":  "2019-03-15T23:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@davidwrighton \r\n\r\nHere are two reasons:\r\n1. The IL sequence you provided is only correct for sealed types.  Even for sealed types, it would not be a binary compatible code generation strategy in the face of types possibly being changed from sealed to unsealed.  Only the runtime knows whether or not the types are sealed at runtime.\r\n2. Only the runtime can know which concrete types occur most frequently at runtime in the context of this kind of instruction, and could therefore perform the type tests in an order which minimizes overall runtime.  I would not expect the runtime to reorder a series of if-then-else type tests on the basis of frequency of occurrence of concrete types (though a runtime could indeed do that), but selecting locally optimal code for a single typeswitch instruction based on knowledge available at runtime (or on the basis of profiles) seems more plausible.\r\n\r\n[edited 2019-11-04 to add]\r\nIt is intended that the instruction run in amortized constant time.  A straightforward translation of the sequence of type tests would not do that.",
                                           "updatedAt":  "2019-11-04T21:09:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzQ3NzMzNQ==",
                                           "createdAt":  "2019-03-16T00:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@jzabroski Thanks for those references!",
                                           "updatedAt":  "2019-03-16T00:06:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzQ5MDM5NQ==",
                                           "createdAt":  "2019-03-16T02:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The IL sequence you provided is only correct for sealed types\r\n\r\nOk, you can flip the sequence to use `isinst` instead. (The JIT has optimization that turns isinst into a simple type check for sealed types.)\r\n\r\n\u003e Only the runtime can know which concrete types occur most frequently at runtime\r\n\r\nThe most efficient way to do a type switch over large number of types is hashtable. The runtime can make this work well by proving efficient way to get a type hash code if it is not efficient enough today.\r\n\r\nOther than that, the compiler or the compiler support library can build about as efficient hashtable as the runtime itself. I think it is likely that building the hashtable in the compiler or the compiler support library would give you more flexibility for implementing more complex matching patterns efficiently.\r\n",
                                           "updatedAt":  "2019-03-16T02:19:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzYxNDg1Nw==",
                                           "createdAt":  "2019-03-17T04:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "\u003e The most efficient way to do a type switch over large number of types is hashtable.\r\n\r\nAre you suggesting that we build a hashtable dynamically and incrementally?  Wouldn\u0027t that prevent the unloading of types once they appear as keys in that table?\r\n\r\n\u003e I think it is likely that building the hashtable in the compiler or the compiler support library would give you more flexibility for implementing more complex matching patterns efficiently\r\n\r\nThat would remove all flexibility that the runtime would otherwise have to implement type switches in the most efficient manner for the platform.\r\n",
                                           "updatedAt":  "2019-03-17T04:15:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzYxNzY0OQ==",
                                           "createdAt":  "2019-03-17T05:22:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Wouldn\u0027t that prevent the unloading of types once they appear as keys in that table?\r\n\r\nYes, the hashtable would need to be aware of type unloading. Hashtables aware of type unloading are not unusual and the primitives available for building them are not great. It is something that we should improve.\r\n\r\n\u003e That would remove all flexibility that the runtime would otherwise have to implement type switches in the most efficient manner for the platform.\r\n\r\nAs the C# pattern matching is getting more complex, I think it starting to look pretty similar to `dynamic` from runtime point of view. The runtime support for `dynamic` is in separate library, separate from the JIT and core runtime. It is pretty efficient, it tunes itself for the most frequently used signatures where possible, etc. In theory, it could have been a bit more efficient if it was all built into the JIT. In practice, I do not think it would be actually more efficient if it was all built into the JIT. We would spent all time dealing with the complexity of building it into the JIT and there would be no time or appetite left to fine tune the performance. Note that we have done work in the runtime for `dynamic` by introducing and improving the primitives that it is built out of, e.g. we have done a lot of performance work on delegates.\r\n\r\nWe should consider taking a similar route for pattern matching as we have taken for `dynamic` keyword: Identify the key most primitive operations that the core runtime needs to provide in order to make it  work great; but keep the overall runtime support for pattern matching in separate library.",
                                           "updatedAt":  "2019-03-17T05:22:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzYzMTI2Mg==",
                                           "createdAt":  "2019-03-17T08:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@jkotas You may have convinced me.\r\n\r\nIt looks like the break-even point for using a hashtable is about 20 types in a switch.  See https://github.com/dotnet/roslyn/issues/31515#issuecomment-473630695 for a benchmark.\r\n\r\nI\u0027m not sure how the jit could do better.  Without evidence to the contrary, perhaps this issue should be closed?\r\n",
                                           "updatedAt":  "2019-03-17T08:25:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzY5MTU3MA==",
                                           "createdAt":  "2019-03-17T18:21:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "Improved the prototype library so that the break-even point for using a hashtable is about 10 types in a switch.  See https://github.com/gafter/TypeSwitch/blob/master/TypeSwitch/TypeSwitchDispatch.cs",
                                           "updatedAt":  "2019-03-17T18:21:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTQ1MjM2NA==",
                                           "createdAt":  "2019-05-10T22:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "I believe it is more appropriate for this kind of support to be directly in the runtime, where it can be optimized dynamically based on the program\u0027s actual behavior.  The library approach fixes the time-space tradeoff at compile-time and makes it nearly impossible for the runtime to do any better.",
                                           "updatedAt":  "2019-05-10T22:57:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTQ4OTc1OQ==",
                                           "createdAt":  "2019-05-11T07:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Maybe we can teach the JIT to recognize the pattern:\r\n\r\n```\r\nif (type == typeof(A)) ...\r\nelse if (type == typeof(B)) ...\r\n...\r\n```\r\n\r\nNo IL changes and the IL works on older runtimes.",
                                           "updatedAt":  "2019-05-11T07:59:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTUxNTAyOA==",
                                           "createdAt":  "2019-05-11T14:22:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "They are subtype tests, not exact type tests.",
                                           "updatedAt":  "2019-05-11T14:22:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTUxODY0Nw==",
                                           "createdAt":  "2019-05-11T15:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The runtime/JIT does recognize many framework types as intrinsics and optimizes them in custom ways. The library approach does not prevent the time-space tradeoff from getting optimized based on the actual program behavior if the type is recognized as intrinsic.",
                                           "updatedAt":  "2019-05-11T15:05:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTYwOTc1OA==",
                                           "createdAt":  "2019-05-12T16:29:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@jkotas Can you please give me an example of a case in which the runtime eliminates a static field due to replacing it and its use with intrinsic behavior?\r\n",
                                           "updatedAt":  "2019-05-12T16:29:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTgwNTA5NQ==",
                                           "createdAt":  "2019-05-13T12:38:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The JIT is able to inline the value of readonly static fields. It does not eliminate it. The field is still there, but it is not used on the hot path.",
                                           "updatedAt":  "2019-05-13T12:38:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjAyMjkxOQ==",
                                           "createdAt":  "2019-05-13T23:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@jkotas Making an appropriate time-space tradeoff would require eliminating the static field (which uses a lot of space to get reasonable performance).  If the runtime does not do that kind of thing, then a new instruction would be an appropriate approach.",
                                           "updatedAt":  "2019-05-13T23:29:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjAzNDQzNg==",
                                           "createdAt":  "2019-05-14T00:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@jkotas Is there any way I can check whether the JIT has inlined something?\r\n\r\nFor example from some code I have written, how would I tell this has been inlined:\r\n\r\n```csharp\r\nstatic class Constructor\u003cT\u003e\r\n  where T : new()\r\n{\r\n  public static readonly Func\u003cIScope, T\u003e Empty = Expression.Lambda\u003cFunc\u003cIScope, T\u003e\u003e(scope =\u003e scope.Exists\u003cT\u003e() ?? new T()).Compile();\r\n}\r\n```\r\n\r\nSimilarly, is there any \"Auditing Machine\" I can query inside the runtime to determine how far away the code is/was from being JIT\u0027ed?",
                                           "updatedAt":  "2019-05-14T00:33:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjA2MjQ0Mw==",
                                           "createdAt":  "2019-05-14T03:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAom5tw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-05-14T14:05:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@jzabroski Your question is not relevant to this issue. Please open a new issue on this.\r\n\r\n\u003e Making an appropriate time-space tradeoff would require eliminating the static field\r\n\r\n@gafter I do not think elimination of the static field would be required for a decent time-space tradeoff. \r\n\r\nDesigns that require low-level implementation are harder to evolve and improve. They may be better in theory, but we find them to be worse in practice because of the experience and amount of work required to optimize them.\r\n\r\nI do not have a problem with this issue being open as a new IL instruction proposal. But i is not obvious to me that implementing this as a new IL instruction will achieve the best results.",
                                           "updatedAt":  "2019-05-14T03:13:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzgwNTQ4MQ==",
                                           "createdAt":  "2019-05-31T18:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "Dumping my notes for future reference\r\n\r\nA code sequence\r\n``` none\r\npush e\r\n\r\ntypeswitch 3\r\n  type1 label1\r\n  type2 label2\r\n  type3 label3\r\n\r\nfallthrough: // original e on stack\r\n...\r\nlabel1: // type1 on stack\r\n...\r\n```\r\nWould be defined to be equivalent to the following, except required to execute in (amortized) constant time:\r\n``` none\r\npush e\r\n\r\ndup\r\nisinst type1\r\nbrfalse next1\r\nisinst type1\r\ngoto labe1\r\nnext1:\r\n\r\ndup\r\nisinst type2\r\nbrfalse next2\r\nisinst type2\r\ngoto labe2\r\nnext2:\r\n\r\ndup\r\nisinst type3\r\nbrfalse next3\r\nisinst type3\r\ngoto labe3\r\nnext3:\r\n\r\nfallthrough: // original e on stack\r\n...\r\nlabel1: // type1 on stack\r\n...\r\n```",
                                           "updatedAt":  "2019-05-31T18:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzkzNDUwMA==",
                                           "createdAt":  "2019-06-01T10:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOApvqQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2019-06-01T16:41:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Let\u0027s make the JIT recognize that IL pattern then. No need for new opcodes.",
                                           "updatedAt":  "2019-06-01T10:58:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Nzk1MjY4Ng==",
                                           "createdAt":  "2019-06-01T15:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omariom",
                                           "body":  "\u003e Let\u0027s make the JIT recognize that IL pattern then. No need for new opcodes.\r\n\r\nThen  all the patterns JIT recognize must be documented\r\n as C# is not the only language generating IL. \r\nAnd that will make IL RISC and the patterns will become CISC. \r\n",
                                           "updatedAt":  "2019-06-01T15:13:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Nzk1NjIxNw==",
                                           "createdAt":  "2019-06-01T15:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "\u003e Let\u0027s make the JIT recognize that IL pattern then. No need for new opcodes.\r\n\r\nThe problem is that this pattern must be reliably recognized by all JITs, not just one of them under some circumstances.  Otherwise programmers cannot rely on the performance in writing their algorithms.  Adding a new instruction adds confidence that JITs recognize it.",
                                           "updatedAt":  "2019-06-01T15:58:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODQxMzI0NA==",
                                           "createdAt":  "2019-06-03T20:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAp4XFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-06-04T12:03:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "It seems like this is something that might fit fairly well as an intrinsic. No new IL or IL pattern matching would be needed, and it could be engineered so that jit/runtime optimization was possible but also optional.\r\n\r\nWe\u0027d agree on some BCL method(s) for this operation, eg `int TypeSwitch(Type t, Type x_0, Type x_1, ...)`, and find an efficient way to cope with the varadic cases (one can always just implement up to some N, and chain calls to handle cases larger than N, I suppose). This would return the index `i`  of the lowest-numbered `x_i` that satisfies `t isinst x_i`, or -1 if none satisfy.\r\n\r\nThis method (or set of methods) would be targeted by C#, which when doing pattern matching would follow this up with an actual switch to direct control to the appropriate label. There might be some complexities fitting this in with side effect ordering -- I don\u0027t know how much code can run during the matching phase currently.\r\n\r\nThe `TypeSwitch` method(s) would be fully implemented in the BCL by default. So no jit or runtime work would be required. This implementation could be via hashtable, linear search, etc, whatever seems suitable.\r\n\r\nThe `TypeSwitch` method(s) could also be marked with `[Intrinsic]` so that the they could be recognized by the jit as methods with known behavior. Doing this allows the possibility for special handling, but does not create an obligation. Then when the jit encountered a call to `TypeSwitch` where the `x_i` are all jit-time known types, the jit could interact with the runtime to see if it was possible to optimize the test away entirely (say, `t`\u0027s type is known at jit time), or if it made sense to peel off some of the cases for eager testing, or build a full decision tree based on what is known about the likely types of `t` and the class relationships of the `x_i`, or fuse the call and following switch into a hash-based indirect jump sequence. If the `x_i` are not jit-time constants, or the evidence for benefit from specialization is weak, the jit could just defer to calling the helper.",
                                           "updatedAt":  "2019-06-03T20:26:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODQyNzIzOA==",
                                           "createdAt":  "2019-06-03T21:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "That is a very pragmatic middle-ground.  Also, by hoisting TypeSwitch up to intrinsic level, it might even be possible to do fancy C# to FPGA synthesizer (completely different target architecture), as you have not yet dipped into the needless abstraction of CIL registers (and even so, the registers become fields in a special component named device in the FPGA), so your approach is likely the most portable and meets specific use case of \"emit event if not optimized\" so that developers can see in Benchmark.Net or whatever what\u0027s going on and what basis they can make optimizer assumptions.\r\n",
                                           "updatedAt":  "2019-06-03T21:08:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5OTMxMzA4Ng==",
                                           "createdAt":  "2019-06-06T01:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gafter",
                                           "body":  "@AndyAyersMS \r\n\r\n\u003e ... could be engineered so that jit/runtime optimization was possible but also optional ...\r\n\r\nThe \"non-optimized\" path is likely to be significantly worse that the straightforward IL sequence when not optimized (for a few reasons*).  That is very unfortunate, though possibly not fatal.  The fatal flaw in this approach is that it relies on an optional optimization for an asymptotic performance improvement.  **A straightforward complexity analysis demonstrates that you cannot reliably get that asymptotic improvement to the program as a whole unless the optimization is reliably applied (nearly) everywhere it is applicable.  That is why I believe a new IL instruction is the best approach** - it guarantees that the runtime recognizes the \"pattern\".  I\u0027ll explain in more detail when we meet on Monday afternoon.\r\n\r\nIf the performance is linear time (in the size of the data to the call) when not optimized but constant (amortized) time (which is what we want) when \"optimized\", then is it not something that we would be likely to want to rely on in designing language features (though as I will explain we need to rely on that in designing upcoming features), and probably not something we would benefit from using in normal C# code-gen scenarios.\r\n\r\n*Some of the reasons that your proposed intrinsic is likely to be significantly slower than the (also unfortunately linear-time) straightforward IL sequence:\r\n- In the general (most common) case the intrinsic would require creating an object (garbage) for the params array.\r\n- The type tests performed inside the intrinsic are likely to use reflection without any knowledge of the specific types passed as parameters or the knowledge of the type of the input value, all of which are known at the call site.  For example it cannot produce better code for sealed classes.\r\n- Since the method has no way of distinguishing one call site from another, there is no basis on which the method could build a cache.  However, see [`TypeSwitchDispatch`](https://github.com/gafter/TypeSwitch/blob/master/TypeSwitch/TypeSwitchDispatch.cs), which is about the best I believe a library can do.\r\n- Although the method performs the type tests in order to return an integer to the caller indicating which test succeeded, after a value is returned the caller must then perform a (checked) cast to that *nth* type again, so the code performs an extra type test that should not be needed.\r\n",
                                           "updatedAt":  "2019-06-06T01:25:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5OTMzODY3MQ==",
                                           "createdAt":  "2019-06-06T03:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is fine to add a guarantee that the generated code will be always amortized constant time and never linear (for large number of types, not observable for small number of types), for either API or IL instruction design.\r\n\r\nFor non-optimized code, the JIT is going to call a method to implement this, even if it is a special IL instruction. For optimized code, the JIT can recognize the method call as intrinsic and achieve the same outcomes as a IL instruction, again no fundamental difference between the two designs.\r\n\r\nI believe that the interesting optimizations for the API vs. IL instruction design discussion are:\r\n- Memory footprint optimizations - make the supporting runtime structures as small as possible.\r\n- Constant multiplier optimizations – full inlining of the switch.\r\n- Constant and type propagation optimizations - partially or fully eliminating the switch when the JIT can reason about the type of the argument.\r\n- Dynamic tuning optimizations - adjusting the code based on dynamic behavior of the program.\r\n\r\nThe question to ask is whether introducing a new IL instruction is worth the trouble and whether it will make the above set of optimizations significantly easier to do.\r\n",
                                           "updatedAt":  "2019-06-10T23:13:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDYyNjIyOA==",
                                           "createdAt":  "2019-06-10T23:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cartermp",
                                           "body":  "Adding @dsyme to this thread.",
                                           "updatedAt":  "2019-06-10T23:09:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDc5MTkwNw==",
                                           "createdAt":  "2019-06-11T10:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBI3kcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-06-11T16:09:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2019-06-11T18:03:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2019-06-12T20:53:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2019-06-26T14:55:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2019-10-29T02:33:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DSilence",
                                                                               "createdAt":  "2019-12-26T15:17:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2019-12-29T12:01:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EduardoLarios",
                                                                               "createdAt":  "2020-01-15T00:44:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2020-02-24T14:05:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gusty",
                                                                               "createdAt":  "2020-06-29T21:14:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "dsyme",
                                           "body":  "A primitive or intrinsic to aid efficient compilation of pattern matching would be very useful and clearly is part of an improved overall design for .NET in the 21st century. I thought a lot about proposing such an intrinsic around the time 2001-03 as we worked through the foundations necessary for F# (generics etc.) but didn\u0027t iterate to a concrete design.\r\n\r\n1. It would be great if the switch were over a compat set of integers.  thought about a design which would dynamically augment the method table with extra slots for a compact integer tag (e.g. one slot for each commonly used switch) to avoid any hashing but there are obvious tradeoffs and difficulties with that (method table size, NGEN etc.).  The runtime gurus on the thread would make much better decisions than me on this.\r\n\r\n2. On the same topic, for large union switches F# stores an extra integer tag in the object to allow `switch`-based switching.\r\n\r\n3. In advanced ML-family languages supporting GADTs, each branch of a switch in pattern matching can potentially introduce localized type information, e.g. the type systems means you \"know\" that on one particular branch a type variable `T` has definite type `string`.  It\u0027s possible that F#, C# and the CLR should eventually support this. Introducing this contextual type information is much more suited to a new opcode, though could also be done if recognizing an intrinsic\r\n\r\n",
                                           "updatedAt":  "2019-06-11T10:58:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0Nzc1OTEzMw==",
                                           "createdAt":  "2019-10-30T06:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YairHalberstadt",
                                           "body":  "How would you guarantee constant time switches for n types, each of which have thousands of implementors/derived types?\r\n\r\nEg:\r\n\r\n```csharp\r\nprivate string Switch(object o) {\r\n    return o switch {\r\n        IReadOnlyList _ =\u003e...\r\n        IList _ =\u003e ...\r\n        IEnumerable _ =\u003e ...\r\n        ISerialisable _ =\u003e ...\r\n        etc.\r\n    }\r\n}",
                                           "updatedAt":  "2019-10-30T06:38:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0Nzc2MDEyOQ==",
                                           "createdAt":  "2019-10-30T06:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA5DNzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gafter",
                                                                               "createdAt":  "2019-11-04T20:58:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EduardoLarios",
                                                                               "createdAt":  "2020-01-15T00:46:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "YairHalberstadt",
                                           "body":  "Ah, I see that we cache the index that a type was found at, so that after first usage it\u0027s constant time.",
                                           "updatedAt":  "2019-10-30T06:42:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTc5MzIxMg==",
                                           "createdAt":  "2020-07-29T17:18:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBL1g3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2020-07-29T17:23:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gafter",
                                           "body":  "This issue track the same request as https://github.com/dotnet/runtime/issues/29002. I believe the current consensus is that it can be done as an API in which the set of types to match are passed as generic type arguments (e.g. the elements of a tuple type).  See https://github.com/gafter/TypeSwitch/blob/master/TypeSwitch/TypeSwitchDispatch.cs for a prototype that does not address the issue mentioned in https://github.com/dotnet/runtime/issues/29002#issuecomment-502904329",
                                           "updatedAt":  "2020-07-29T17:18:52Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "New IL instruction for typeswitch",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12514",
        "createdAt":  "2019-04-17T15:10:00Z",
        "number":  12514,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-10T22:38:59Z",
        "body":  "I have recently found and fixed some [uses where `NewHolder` was being used with arrays instead of `NewArrayHolder`](https://github.com/dotnet/coreclr/pull/24017).\r\n\r\nI wonder if it would be possible to modify the `NewHolder` code so that it fails to compile examples like this:\r\n\r\n```\r\nNewHolder\u003cBYTE\u003e code(new BYTE[size]);  // Should fail\r\nNewHolder\u003cBYTE\u003e pNewSig = new BYTE[size];   // Should fail\r\n```\r\n\r\nThe [`static_assert`s](https://github.com/dotnet/coreclr/blob/df2f4c4feb273545e91fd8d7d170dc424b741f19/src/inc/holder.h#L992-L995) don\u0027t seem to be working for `BYTE` and other non-`char` array types. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMephuA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzQ0NDAyNA==",
                                           "createdAt":  "2021-05-10T22:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "Just for fun, I tried out this change:\r\n\r\n\r\n```diff\r\ndiff --git a/src/coreclr/inc/holder.h b/src/coreclr/inc/holder.h\r\nindex 20f6aeb9646..41d0d6f6389 100644\r\n--- a/src/coreclr/inc/holder.h\r\n+++ b/src/coreclr/inc/holder.h\r\n@@ -979,6 +979,8 @@ FORCEINLINE void Delete(TYPE *value)\r\n                   \"Must use NewArrayHolder (not NewHolder) for strings.\");\r\n     static_assert(!std::is_same\u003ctypename std::remove_cv\u003cTYPE\u003e::type, CHAR\u003e::value,\r\n                   \"Must use NewArrayHolder (not NewHolder) for strings.\");\r\n+    static_assert(!std::is_same\u003ctypename std::remove_cv\u003cTYPE\u003e::type, BYTE\u003e::value,\r\n+                  \"Must use NewArrayHolder (not NewHolder) for byte arrays.\");\r\n \r\n     delete value;\r\n }\r\n```\r\n\r\nIt only flagged one more issue:\r\n\r\n```diff\r\ndiff --git a/src/coreclr/vm/objectlist.cpp b/src/coreclr/vm/objectlist.cpp\r\nindex ac80ca33bac..34a9d7d097c 100644\r\n--- a/src/coreclr/vm/objectlist.cpp\r\n+++ b/src/coreclr/vm/objectlist.cpp\r\n@@ -179,7 +179,7 @@ UnsynchronizedBlockAllocator::Allocate( size_t size )\r\n \r\n     _ASSERTE( size \u003c= this-\u003eblockSize_ );\r\n \r\n-    NewHolder\u003cBYTE\u003e buffer;\r\n+    NewArrayHolder\u003cBYTE\u003e buffer;\r\n \r\n     S_SIZE_T sizecheck = S_SIZE_T(this-\u003eoffset_) + S_SIZE_T(size) ;\r\n     if( sizecheck.IsOverflow() )\r\n```\r\n\r\nBut it\u0027s really a false positive, since this code calls `buffer.SuppressRelease()` in all cases.",
                                           "updatedAt":  "2021-05-10T22:38:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Disallow using arrays with NewHolder",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2231",
        "createdAt":  "2020-01-27T17:17:43Z",
        "number":  2231,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T16:27:10Z",
        "body":  "The following tests time out in GCStress=3 test runs (after an hour?).\r\n\r\n```\r\nInterop/DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.sh\r\nbaseservices/threading/interlocked/compareexchange/CompareExchangeTString/CompareExchangeTString.sh\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_ro/Vector256_1_ro.sh\r\nJIT/HardwareIntrinsics/General/Vector128_1/Vector128_1_ro/Vector128_1_ro.sh\r\nJIT/Methodical/tailcall/_il_dbgreference_i/_il_dbgreference_i.sh\r\nbaseservices/threading/regressions/beta2/437044/437044.sh\r\nJIT/Generics/Exceptions/general_class_static01/general_class_static01.sh\r\nJIT/HardwareIntrinsics/General/Vector128_1/Vector128_1_r/Vector128_1_r.sh\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_r/Vector256_1_r.sh\r\nJIT/Generics/Exceptions/general_struct_instance01/general_struct_instance01.sh\r\nJIT/Generics/Exceptions/general_struct_static01/general_struct_static01.sh\r\nJIT/Generics/Exceptions/general_class_instance01/general_class_instance01.sh\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=497294\u0026view=ms.vss-test-web.build-test-results-tab\r\n\r\nSo are they really that slow? Are the machines overloaded or underpowered? Is there a GCStress=3 bug, or a VM bug exposed by GCStress=3 leading to this?\r\n\r\nShould these be disabled for GCStress=3 until such time as they can be investigated?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONRTYzw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODg1NDk3OA==",
                                           "createdAt":  "2020-01-27T17:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@janvorli \r\n",
                                           "updatedAt":  "2020-01-27T17:18:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjM2MDI3MQ==",
                                           "createdAt":  "2020-03-09T06:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AriNuer",
                                           "body":  "The following tests time out in **runtime-coreclr gcstress0x3-gcstress0xc** test runs.\r\n```\r\nbaseservices/threading/regressions/beta2/437044/437044.sh\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_ro/Vector256_1_ro.sh\r\nJIT/HardwareIntrinsics/General/Vector128_1/Vector128_1_ro/Vector128_1_ro.sh\r\nJIT/HardwareIntrinsics/General/Vector256_1/Vector256_1_r/Vector256_1_r.sh\r\nJIT/HardwareIntrinsics/General/Vector128_1/Vector128_1_r/Vector128_1_r.sh\r\nInterop/DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.sh\r\nJIT/Generics/Exceptions/general_struct_instance01/general_struct_instance01.sh\r\nJIT/Methodical/tailcall/_il_dbgreference_i/_il_dbgreference_i.sh\r\nbaseservices/threading/regressions/13662/13662-a/13662-a.sh\r\nJIT/Generics/Exceptions/general_class_instance01/general_class_instance01.sh\r\nJIT/Generics/Exceptions/general_struct_static01/general_struct_static01.sh\r\nbaseservices/threading/interlocked/compareexchange/CompareExchangeTString/CompareExchangeTString.sh\r\nJIT/Generics/Exceptions/general_class_static01/general_class_static01.sh\r\n```\r\n**Details:**\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=551522\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17415556\u0026resultId=108865\u0026paneView=debug",
                                           "updatedAt":  "2020-03-09T06:58:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTU3MTYzNA==",
                                           "createdAt":  "2020-07-16T17:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "The latest **runtime-coreclr gcstress0x3-gcstress0xc** has these GCStress0x3 timeouts:\r\n\r\n```\r\nbaseservices/threading/regressions/beta2/437044/437044.sh\r\nbaseservices/threading/interlocked/compareexchange/CompareExchangeTString/CompareExchangeTString.sh\r\ntracing/eventpipe/eventsvalidation/ExceptionThrown_V1/ExceptionThrown_V1.sh\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=726396\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22494226\u0026paneView=debug",
                                           "updatedAt":  "2020-07-16T17:51:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qpz7",
                                           "createdAt":  "2021-07-20T18:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "@BruceForstall Do we know if these tests are still timing out?  Do we have machines available for investigating Linux ARM32 issues?",
                                           "updatedAt":  "2021-07-20T18:15:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rDJq",
                                           "createdAt":  "2021-07-20T20:51:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Some have been disabled under GCStress, e.g.: https://github.com/dotnet/runtime/pull/39545\r\n\r\nI don\u0027t see any Linux arm32 timeouts in the latest run (runtime-coreclr gcstress0x3-gcstress0xc):\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1244813\u0026view=ms.vss-test-web.build-test-results-tab\r\n\r\nbut I didn\u0027t check if there are additional tests disabled, e.g., by using the `GcStressIncompatible` tag in a proj file.",
                                           "updatedAt":  "2021-07-20T20:51:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41FNjP",
                                           "createdAt":  "2021-08-01T17:29:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "moving to 7, not very critical for 6. ",
                                           "updatedAt":  "2021-08-01T17:29:14Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Linux arm32 GCStress=3 timeout test failures",
        "labels":  [
                       "arch-arm32",
                       "os-linux",
                       "GCStress",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33387",
        "createdAt":  "2020-03-09T17:43:38Z",
        "number":  33387,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-21T09:15:33Z",
        "body":  "There have been some requests from partners to enable RyuJIT to produce [CFG-enabled](https://docs.microsoft.com/en-us/windows/security/threat-protection/overview-of-threat-mitigations-in-windows-10#control-flow-guard) codegen. As AOT scenarios become more prevalent and the JIT becomes closer to a true \"native\" compiler, this would also match the [CFG protections](https://docs.microsoft.com/en-us/cpp/build/reference/guard-enable-control-flow-guard) afforded by the MSVC compiler. This is a tracking issue for those requests.\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/29880, but that tracks annotating CLR binaries rather than controlling the JIT codegen.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOghQY7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Njc4MTUwNQ==",
                                           "createdAt":  "2020-03-09T21:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA9pFjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2020-03-09T21:27:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2020-03-09T21:46:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have internal planning documents about this. Some of the key points:\r\n\r\n- There is no point in doing CFG without W^X (tracked by #10036). Lack of W^X is much easier target than lack of CFG. We would want to do W^X first.\r\n- It is not clear how CFG should be applied to managed code.\r\n\r\ncc @janvorli @jeffschwMSFT ",
                                           "updatedAt":  "2020-03-09T21:11:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NzEyMjMzNA==",
                                           "createdAt":  "2020-03-10T14:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mababey",
                                           "body":  "We notice this omission for our UWP app project.  We run BinSkim on the .NET Native compiled binaries, and it flags the lack of CFG mitigation.\r\n\r\nWhile CFG mitigation might not apply to the original managed code, once compiled, we\u0027re effectively trusting that the translation to machine code by RyuJIT doesn\u0027t result in potentially vulnerable indirect call targets.\r\n\r\n(I\u0027m not familiar with the implementation details of the JIT compiler to know whether there are other factors which void that concern.)",
                                           "updatedAt":  "2020-03-10T14:39:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjQ2NTIxNA==",
                                           "createdAt":  "2020-03-31T07:59:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Related: Windows now has preliminary support for CET. We may wish to investigate turning this on for our code bases. See https://techcommunity.microsoft.com/t5/windows-kernel-internals/understanding-hardware-enforced-stack-protection/ba-p/1247815 for more info.",
                                           "updatedAt":  "2020-03-31T07:59:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjYyNDI0NQ==",
                                           "createdAt":  "2020-03-31T13:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have been investigating the CET support for some time. It is not a simple recompile. There are number of changes required in how e.g. exception handling or GC suspension works. Also, new OS APIs are needed to make it possible.",
                                           "updatedAt":  "2020-03-31T13:23:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CFBjt",
                                           "createdAt":  "2024-06-21T09:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "Can this issue be closed, or is it still tracking the CET work?",
                                           "updatedAt":  "2024-06-21T09:15:31Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "JIT should allow producing CFG/XFG-enabled binaries",
        "labels":  [
                       "Security",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34500",
        "createdAt":  "2020-04-03T14:27:27Z",
        "number":  34500,
        "author":  "kkokosa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqUxuw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikernet",
                                            "createdAt":  "2020-04-03T14:52:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2020-04-04T12:25:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-04-04T12:32:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "natalie-o-perret",
                                            "createdAt":  "2020-04-11T17:49:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2020-04-22T12:42:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2020-05-06T10:12:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2022-06-16T11:23:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abelbraaksma",
                                            "createdAt":  "2022-08-28T21:56:41Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-09-16T21:38:12Z",
        "body":  "JIT seems to be less aggressive in inlining with IL generated for calling `DynamicMethod` from another `DynamicMethod`. Not sure if it is expected/desirable behaviour and whether it can be easily fixed?\r\n\r\nSimple code:\r\n```cs\r\npublic class C {\r\n    public static int MethodA(int x) =\u003e MethodB(x, 1000);        \r\n    public static int MethodB(int x, int y) =\u003e x * x + y;\r\n}\r\n```\r\nis translated to:\r\n```il\r\n.method public hidebysig static int32 MethodA (int32 x) cil managed \r\n{\r\n    .maxstack 8\r\n    IL_0000: ldarg.0\r\n    IL_0001: ldc.i4 1000\r\n    IL_0006: call int32 C::MethodB(int32, int32)\r\n    IL_000b: ret\r\n}\r\n.method public hidebysig static int32 MethodB (int32 x, int32 y) cil managed \r\n{\r\n    .maxstack 8\r\n    IL_0000: ldarg.0\r\n    IL_0001: ldarg.0\r\n    IL_0002: mul\r\n    IL_0003: ldarg.1\r\n    IL_0004: add\r\n    IL_0005: ret\r\n}\r\n```\r\nand then JIT produces nice result of `MethodA`:\r\n```asm\r\nC.MethodA(Int32)\r\n    L0000: mov eax, ecx\r\n    L0002: imul eax, ecx\r\n    L0005: add eax, 0x3e8\r\n    L000a: ret\r\n```\r\nwhile in case `ILGenerator` producing exactly the same IL:\r\n```cs\r\nprivate static DynamicMethod EmitMethodA(DynamicMethod secondMethod)\r\n{\r\n    DynamicMethod code = new DynamicMethod(string.Empty, typeof(int), new[] { typeof(int) });\r\n    var ilGen = code.GetILGenerator();\r\n    ilGen.Emit(OpCodes.Ldarg_0);\r\n    ilGen.Emit(OpCodes.Ldc_I4, 1000);\r\n    ilGen.EmitCall(OpCodes.Call, secondMethod, null);\r\n    ilGen.Emit(OpCodes.Ret);\r\n    return code;\r\n}\r\nprivate static DynamicMethod EmitMethodB()\r\n{\r\n    DynamicMethod code = new DynamicMethod(string.Empty, typeof(int), new [] {typeof(int), typeof(int)});\r\n    var ilGen = code.GetILGenerator();\r\n    ilGen.Emit(OpCodes.Ldarg_0);\r\n    ilGen.Emit(OpCodes.Dup);\r\n    ilGen.Emit(OpCodes.Mul);\r\n    ilGen.Emit(OpCodes.Ldarg_1);\r\n    ilGen.Emit(OpCodes.Add);\r\n    ilGen.Emit(OpCodes.Ret);\r\n    return code;\r\n}\r\n```\r\nJIT produces non-inlined methods:\r\n```asm\r\n\u003e !u 00007ff9`c50b0080\r\nNormal JIT generated code\r\nDynamicClass.(Int32)\r\nBegin 00007FF9C50B0080, size 12\r\n00007ff9`c50b0080 bae8030000      mov     edx,3E8h\r\n00007ff9`c50b0085 48b87052fbc4f97f0000 mov rax,7FF9C4FB5270h\r\n00007ff9`c50b008f 48ffe0          jmp     rax\r\n\r\n\u003e !u 00007ff9`c50b00f0\r\nNormal JIT generated code\r\nDynamicClass.(Int32, Int32)\r\nBegin 00007FF9C50B00F0, size 8\r\n00007ff9`c50b00f0 8bc1            mov     eax,ecx\r\n00007ff9`c50b00f2 0fafc1          imul    eax,ecx\r\n00007ff9`c50b00f5 03c2            add     eax,edx\r\n00007ff9`c50b00f7 c3              ret\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJEYsMg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODUxMjQ4Mg==",
                                           "createdAt":  "2020-04-03T15:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "```\r\nInlines into 06000000 DynamicClass:(int):int\r\n  [0 IL=0006 TR=000002 06000000] [FAILED: noinline per IL/cached result] DynamicClass:(int,int):int\r\nBudget: initialTime=96, finalTime=96, initialBudget=960, currentBudget=960\r\nBudget: initialSize=404, finalSize=404\r\n```\r\n\r\nLooks like all DynamicMethod come with `noinline` and Jit doesn\u0027t even try to inline them. I guess it\u0027s set here: https://github.com/dotnet/runtime/blob/3ab97fc14fa69a7cf03d1f0c5fb009ab9194d235/src/coreclr/src/vm/jitinterface.cpp#L6631-L6634\r\n\r\nNo idea what rationale is behind that\r\n**UPD** Also, VM\u0027s `canInline` doesn\u0027t allow jit to inline it: `\"Inlinee is NoMetadata\"`\r\nhttps://github.com/dotnet/runtime/blob/3ab97fc14fa69a7cf03d1f0c5fb009ab9194d235/src/coreclr/src/vm/jitinterface.cpp#L7873-L7878",
                                           "updatedAt":  "2020-04-03T16:52:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODUzNzgyOA==",
                                           "createdAt":  "2020-04-03T16:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e No idea what rationale is behind that\r\n\r\nThe [JIT/EE interface implementation](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/jitinterface.cpp) does not handle the inlining of dynamic methods correctly in all situations. It is not a fundamental limitation; it is just something that would need to be fixed in number of places.",
                                           "updatedAt":  "2020-04-03T16:29:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODU0NjYyMA==",
                                           "createdAt":  "2020-04-03T16:48:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e No idea what rationale is behind that\r\n\u003e \r\n\u003e The [JIT/EE interface implementation](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/jitinterface.cpp) does not handle the inlining of dynamic methods correctly in all situations. It is not a fundamental limitation; it is just something that would need to be fixed in number of places.\r\n\r\nAh ok, here is the minimal set of changes needed to enable it back: https://github.com/EgorBo/runtime-1/commit/b5d1b0873709ce8e10a52aa3e50432008cf3bae5\r\nAnd it works for the Konrad\u0027s case but yeah I guess like you said there are pitholes",
                                           "updatedAt":  "2020-04-03T16:48:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODU3MTU5NQ==",
                                           "createdAt":  "2020-04-03T17:40:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkokosa",
                                           "body":  "Great insight, thank you! So there are pitholes, but it would be interesting to see how such change would influence existing standard libraries performance. No idea how to check this...\r\n\r\nBTW, am I right that because of the same code @EgorBo has shown, the same behavior applies for `AssemblyBuilder`/`TypeBuilder`/`MethodBuilder`?",
                                           "updatedAt":  "2020-04-03T17:40:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODU3MjkwOA==",
                                           "createdAt":  "2020-04-03T17:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBAIw8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kkokosa",
                                                                               "createdAt":  "2020-04-03T18:11:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2020-04-04T12:35:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Great insight, thank you! So there are pitholes, but it would be interesting to see how such change would influence existing standard libraries performance. No idea how to check this...\r\n\u003e \r\n\u003e BTW, am I right that because of the same code @EgorBo has shown, the same behavior applies for `AssemblyBuilder`/`TypeBuilder`/`MethodBuilder`?\r\n\r\nI can try the jit-diff in my branch to find out, I guess Regex and Linq.Expressions use it actively.\r\n**UPD** ah, jit-diff won\u0027t show anything, the code must be executed first in order to trigger dynamic stuff. jit-diff only compiles it.",
                                           "updatedAt":  "2020-04-04T10:05:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwODU3ODYxMA==",
                                           "createdAt":  "2020-04-03T17:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBAIw8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2020-04-03T17:56:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kkokosa",
                                                                               "createdAt":  "2020-04-03T18:11:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2020-04-04T12:35:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I guess Regex\r\n\r\nRegex uses it, but the resulting methods are only invoked via delegates.  I wouldn\u0027t expect any inlining to result.",
                                           "updatedAt":  "2020-04-03T17:55:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "DynamicMethod calls without inlining ",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35624",
        "createdAt":  "2020-04-29T20:14:39Z",
        "number":  35624,
        "author":  "sdmaclea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBC0pJg==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2020-05-01T02:21:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-06-09T18:26:51Z",
        "body":  "An audit of the types used in the Cross DAC revealed MD data types in the DBI build.\r\n\r\nRoot cause seems to be `src/coreclr/src/inc` indirectly including private header files.\r\n```\r\ngit grep \"#include .*\\.\\.\" -- src/coreclr/src/inc\r\n\r\nsrc/coreclr/src/inc/eventtracebase.h:#include \"../gc/env/etmdummy.h\"\r\nsrc/coreclr/src/inc/formattype.h:#include \"../ildasm/dynamicarray.h\"\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/metamodelro.h\"\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/liteweightstgdb.h\"\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/metamodel.h\"\r\nsrc/coreclr/src/inc/stgpool.h:#include \"../md/hotdata/hotheap.h\"\r\nsrc/coreclr/src/inc/stgpool.h:#include \"../md/debug_metadata.h\"\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ9LSwA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQzOTQ0MA==",
                                           "createdAt":  "2020-04-29T20:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "#35621 will fix \r\n\r\n```\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/metamodelro.h\"\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/liteweightstgdb.h\"\r\nsrc/coreclr/src/inc/metadata.h:#include \"../md/inc/metamodel.h\"\r\nsrc/coreclr/src/inc/stgpool.h:#include \"../md/debug_metadata.h\"\r\n```",
                                           "updatedAt":  "2020-04-29T20:16:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ0MjI5Mw==",
                                           "createdAt":  "2020-04-29T20:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "I looked at \r\n```\r\nsrc/coreclr/src/inc/stgpool.h:#include \"../md/hotdata/hotheap.h\"\r\n```\r\n\r\nIt looks like this could be acceptable as part of the public interface.\r\n\r\nIt indirectly includes\r\n```\r\n../md/datablob.h\r\n../md/datablob.inl\r\n../md/datatable.h\r\n../md/datatable.inl\r\n../md/debug_metadata.h\r\n../md/error_metadata.h\r\n```\r\n\r\nI think these could all be part of the public API, but should be moved into `inc`\r\n ",
                                           "updatedAt":  "2020-04-29T20:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ0MzgyNQ==",
                                           "createdAt":  "2020-04-29T20:25:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "Before moving more files to `inc` I wanted to discuss design a bit.\r\n\r\nOne approach would be to move these files to different folders.\r\n\r\nSomething like either `src/coreclr/src/inc/md` or `src/coreclr/src/md/public/`.  ",
                                           "updatedAt":  "2020-04-29T20:25:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTYwODA0Nw==",
                                           "createdAt":  "2020-04-30T04:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`stgpool*` is an implementation details of the ../md . It is not used by anything else. It does not really belong to utilcode. I think it would be be more preferable to move `stdpool*` under ../md .",
                                           "updatedAt":  "2020-04-30T04:38:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTk2MTczNg==",
                                           "createdAt":  "2020-04-30T16:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "That has its own problems\r\n```\r\ngit grep stgpool.h\r\nsrc/debug/ildbsymlib/symwrite.h:#include \"stgpool.h\"\r\nsrc/inc/metamodelpub.h:#include \u003cstgpool.h\u003e\r\nsrc/md/...\r\n...\r\nsrc/md/...\r\nsrc/utilcode/stgpool.cpp:#include \u003cstgpool.h\u003e                    // Our interface definitions.\r\nsrc/utilcode/stgpooli.cpp:#include \u003cstgpool.h\u003e                                  // Our interface definitions.\r\nsrc/utilcode/stgpoolreadonly.cpp:#include \u003cstgpool.h\u003e                    // Our interface definitions.\r\n```",
                                           "updatedAt":  "2020-04-30T16:28:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTk2NDIyMw==",
                                           "createdAt":  "2020-04-30T16:33:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "Oh I guess I understand a bit more....\r\nSo the only current issue would be \r\n```\r\ngit grep stgpool.h\r\nsrc/debug/ildbsymlib/symwrite.h:#include \"stgpool.h\"\r\nsrc/inc/metamodelpub.h:#include \u003cstgpool.h\u003e\r\n```\r\nI\u0027ll look at it.  Seems like it might be feasible.",
                                           "updatedAt":  "2020-04-30T16:33:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTk2NTIwNQ==",
                                           "createdAt":  "2020-04-30T16:35:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right. ildbsymlib should really be under `md` as well.",
                                           "updatedAt":  "2020-04-30T16:35:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODExMDU3Mg==",
                                           "createdAt":  "2020-08-03T16:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@sdmaclea is this something which is required for 5, or could be moved to 6? ",
                                           "updatedAt":  "2020-08-03T16:14:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODEyNzkzNg==",
                                           "createdAt":  "2020-08-03T16:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMP_Dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2020-08-03T17:19:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "This is just cleanup backlog.  Moved to future for now.",
                                           "updatedAt":  "2020-08-03T16:50:42Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Clean up src/coreclr/src/inc : remove private implementation details",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40100",
        "createdAt":  "2020-07-29T19:41:51Z",
        "number":  40100,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBMVQsA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2020-08-04T10:49:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-23T20:37:46Z",
        "body":  "I am trying to harden .NET Core 3.1 on Linux. One recent technique a number of other packages are using for security hardening is to use Intel\u0027s CET (Control-Flow Enforcement Technology): \r\n\r\nhttps://www.linuxplumbersconf.org/event/2/contributions/147/attachments/72/83/CET-LPC-2018.pdf\r\n\r\nhttps://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf\r\n\r\n## Basics\r\n\r\nIntel CET uses two techniques to improve the security of applications:\r\n\r\n1. Indirect Branch Tracking (IBT): All targets of (x86_64 assembly-level) indirect branches are annotated as being valid jump targets. On every jump, the runtime/processor verifies that the target is an expected jump location. This makes it possible to catch issues where an exploit tries to jump into an unexpected piece of code to do an action that was not anticipated by the programmer.\r\n\r\n2. Shadow Stack (SHSTK): A call stack is maintained on the side that\u0027s mostly invisible to the process and that\u0027s used to verify that the normal stack has not been exploited. A buffer overflow, for example, can be used to overwrite the normal stack. But when that happens the contents of the shadow stack and the normal stack will no longer match and the attack can be stopped.\r\n\r\nTogether, these help stop attacks where an exploit takes control of the application stack and then abuses that to perform malicious actions.\r\n\r\n## Implementation Issues\r\n\r\nFully supporting CET varies by language (C, assembler, etc) and the component (runtime, JIT, unwinder).\r\n\r\nFor a normal C/C++ application, most of the work is done by the C/C++ compiler, and all we really need to do is to add `-fcf-protection` (which is supported by both GCC and Clang). I can inject that by overriding `CFLAGS` and `CXXFLAGS` when building runtime (via source-build). And that seems to work.\r\n\r\nFor assembly code, some special actions are needed.\r\n\r\n1. All locations that are targets of indirect branches must add additional `endbr32`/`endbr64` instructions. These instructions are a no-op on older processors that do not understand `endbr32`/`endbr64` instructions. These instructions don\u0027t break compatiblity, but may introduce delay in parsing and skipping over these no-op instructions by the processor.\r\n\r\n2. The assembly code needs to be annotated with a property to indicate that IBT and SHSTK are enabled. This is a `GNU_PROPERTY_NOTE` to indicate that CET (more specifically, `ibt` and `shstk`) is enabled. The note can be a lie, and it\u0027s possible to use this note to convince the run-time linker that everything is okay even if `endbr` instructions are missing.\r\n\r\nIn addition, some compoents need extra fixes.\r\n\r\nThe code emitted by the x86_64 jit needs to emit `endbr32`/`endbr64` for valid targets of all indirect jumps.\r\n\r\nThe unwinder (libunwind) needs to be aware of the shadow stack. It should unwind (or other handle) the shadow stack in parallel with the normal stack. The \"system\" unwinder on Linux (`gcc_s`) can already handle the shadow stack, but libunwind doesn\u0027t know about it (https://bugs.llvm.org/show_bug.cgi?id=45946 ?).\r\n\r\n## Verifying\r\n\r\nThere are two parts of verifying:\r\n\r\n1. Making sure all binaries are annotated correctly\r\n\r\n2. Making sure the application runs correctly on systems where CET is enabled. A missing `endbr` instruction or incorrect use of the stack will cause the application to blow up and fail. From what I have heard from @fweimer, CET needs hardware as well as kernel+userspace support, which is not yet fully (or commonly) implemented across the stack on Linux.\r\n\r\nFor number 1, we can use [`annocheck`](https://developers.redhat.com/blog/2019/02/04/annocheck-examining-the-contents-of-binary-files/) to verify that ELF objects (shared libraries (`*.so`), and executables) are all compiled with CET support:  \r\n\r\n```\r\n$ annocheck /usr/lib64/dotnet/ | grep FAIL\r\nHardened: libdbgshim.so: FAIL: Control flow protection has been enabled for only some parts of the binary.  Other parts (probably assembler sources) are missing the protection, and without it global control flow protection cannot be enabled.\r\nHardened: libclrjit.so: FAIL: Control flow protection has been enabled for only some parts of the binary.  Other parts (probably assembler sources) are missing the protection, and without it global control flow protection cannot be enabled.\r\nHardened: libmscordbi.so: FAIL: Control flow protection has been enabled for only some parts of the binary.  Other parts (probably assembler sources) are missing the protection, and without it global control flow protection cannot be enabled.\r\n```\r\n\r\nOr we can use `readelf` directly on ELF objects looking for IBT/SHSTK:\r\n\r\n```\r\nreadelf --notes \"$object\" | grep -E \u0027IBT|SHSTK\u0027\r\n```\r\n\r\nLooking at a source-build build directory using [`find-missing-ibt`](https://gist.github.com/omajid/1b385d51157bd849389eb17b62c0c08c), a number of files are missing IBT flags:\r\n\r\n```\r\n$ ~/find-missing-ibt\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/dlls/mscordbi/CMakeFiles/mscordbi.dir/__/mscordac/palredefines.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/dlls/mscordac/CMakeFiles/mscordaccore.dir/libredefines.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/x86_64/getcontext.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/x86_64/setcontext.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/context2.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/exceptionhelper.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/debugbreak.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/callsignalhandlerwrapper.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/debug/ee/wks/CMakeFiles/cordbee_wks.dir/__/amd64/dbghelpers.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/debug/di/CMakeFiles/cordbdi.dir/amd64/floatconversion.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/debug/createdump/CMakeFiles/createdump.dir/__/__/dlls/mscordac/palredefines.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/asmhelpers.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/jithelpers_slow.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/calldescrworkeramd64.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/virtualcallstubamd64.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/theprestubamd64.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/crthelpers.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/pinvokestubs.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/jithelpers_singleappdomain.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/externalmethodfixupthunk.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/unixasmhelpers.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/getstate.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/jithelpers_fastwritebarriers.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/jithelpers_fast.S.o is missing IBT\r\nerror: file src/coreclr.018cfd06dceb19b6eb1e9217a500fb1071946fcd/bin/obj/Linux.x64.Release/src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/umthunkstub.S.o is missing IBT\r\n```\r\n\r\nAll these are generated form assembly files, so it sounds like we need to update the assembly files and the assembly file generators to add the CET instructions.\r\n\r\n### Configuration\r\n\r\nThis is a self-built 3.1 SDK using source-build:\r\n\r\n```\r\n /usr/lib64/dotnet/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.106\r\n Commit:    0f94483edc\r\n\r\nRuntime Environment:\r\n OS Name:     rhel\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         rhel.8-x64\r\n Base Path:   /usr/lib64/dotnet/sdk/3.1.106/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.6\r\n  Commit:  3acd9b0cd1\r\n\r\n.NET Core SDKs installed:\r\n  3.1.106 [/usr/lib64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.6 [/usr/lib64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.6 [/usr/lib64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nI built it using source-build with this configuration:\r\n\r\n```\r\nexport \u0027CFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches   -m64 -mtune=generic -fasynchronous-unwind-tables  -fcf-protection\u0027\r\nexport \u0027CXXFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches   -m64 -mtune=generic -fasynchronous-unwind-tables  -fcf-protection\u0027\r\nexport \u0027LDFLAGS=-Wl,-z,relro -Wl,-z,now \u0027\r\nexport ASMFLAGS=-fcf-protection\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n\r\n## Open Questions\r\n\r\n- Is this worth doing? The runtime basically executes bytecode. Do we really need to worry about code injection?\r\n- What is the performance impact (if any) of adding `endbr32`/`endbr64` instructions?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORsMX4g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTg2Mzk4MA==",
                                           "createdAt":  "2020-07-29T19:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "cc @tmds",
                                           "updatedAt":  "2020-07-29T19:42:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTkyODYzMQ==",
                                           "createdAt":  "2020-07-29T21:07:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @janvorli ",
                                           "updatedAt":  "2020-07-29T21:07:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzIyOTM0Ng==",
                                           "createdAt":  "2020-07-31T16:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@omajid thank you for the initial investigations, we definitely want to enable Intel CET support. Do you want to try to modify one of the assembly files by adding the endbr64 instructions to see if it is sufficient to fix the problem or would you prefer me to do that? I would use the getstate.S as the one to experiment with as it contains only three simple asm functions.\r\n",
                                           "updatedAt":  "2020-07-31T16:59:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODU4MDA1NA==",
                                           "createdAt":  "2020-08-04T12:57:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "\u003e @omajid thank you for the initial investigations, we definitely want to enable Intel CET support. Do you want to try to modify one of the assembly files by adding the endbr64 instructions to see if it is sufficient to fix the problem or would you prefer me to do that?\r\n\r\nI am a bit swamped for the next two weeks or so, but I am happy to give this a shot right after.\r\n\r\n\u003e  I would use the getstate.S as the one to experiment with as it contains only three simple asm functions.\r\n\r\nThanks for the pointers!",
                                           "updatedAt":  "2020-08-04T12:57:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTU2MTIwMg==",
                                           "createdAt":  "2020-10-08T13:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fweimer",
                                           "body":  "Keep in mind that you need to tweak the JIT first to generate the necessary ENDBR instructions. Until then, the *lack* of CET markup is what keeps .NET Core running on CET-enabled systems (because CET is automatically disabled for such processes).",
                                           "updatedAt":  "2020-10-08T13:17:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTU2NzMyNw==",
                                           "createdAt":  "2020-10-08T13:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "I have also realized that full CET support means teaching our unwinder (libunwind) about the shadow stack.",
                                           "updatedAt":  "2020-10-08T13:26:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzg4MjAxMg==",
                                           "createdAt":  "2020-10-21T21:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "For the assembly files, this seems to work:\r\n\r\n```diff\r\ndiff --git a/src/coreclr/src/vm/amd64/getstate.S b/src/coreclr/src/vm/amd64/getstate.S\r\nindex 04d9ab707d5..31dcf16a253 100644\r\n--- a/src/coreclr/src/vm/amd64/getstate.S\r\n+++ b/src/coreclr/src/vm/amd64/getstate.S\r\n@@ -5,8 +5,23 @@\r\n #include \"unixasmmacros.inc\"\r\n #include \"asmconstants.h\"\r\n \r\n+.section .note.gnu.property, \"a\", @note\r\n+        .balign 8\r\n+        .long 4                 /* n_namsz: Length of n_name */\r\n+        .long 16                /* n_descz: note descriptor size */\r\n+        .long 5                 /* n_type: NT_GNU_PROPERTY_TYPE_0 */\r\n+        .asciz \"GNU\"            /* n_name */\r\n+        .balign 8\r\n+        .long 3221225474        /* pr_type: GNU_PROPERTY_X86_FEATURE_1_AND */\r\n+        .long 4                 /* pr_datasz: Length of pr_data = 4 */\r\n+        .long 0x3               /* pr_data: property descriptor */\r\n+        .balign 8\r\n+\r\n+.section text\r\n+\r\n LEAF_ENTRY GetCurrentSP, _TEXT\r\n \r\n+        endbr64\r\n         mov rax, rsp\r\n         add rax, 8\r\n         ret\r\n@@ -16,6 +31,7 @@ LEAF_END GetCurrentSP, _TEXT\r\n \r\n LEAF_ENTRY GetCurrentIP, _TEXT\r\n \r\n+        endbr64\r\n         mov rax, [rsp]\r\n         ret\r\n \r\n@@ -25,6 +41,7 @@ LEAF_END GetCurrentIP, _TEXT\r\n // EXTERN_C void LazyMachStateCaptureState(struct LazyMachState *pState)\r\n LEAF_ENTRY LazyMachStateCaptureState, _TEXT\r\n \r\n+        endbr64\r\n         mov     rdx, [rsp]      // get the return address\r\n \r\n         mov     [rdi + OFFSETOF__MachState__m_Capture + 0*8], r12\r\n```\r\n\r\nThis seems to be enough to our tools to confirm that the assembly is marked as supporting CET (`IBT`/`SHSTK`).\r\n\r\n```\r\n$ readelf --notes ./artifacts/obj/coreclr/Linux.x64.Debug/src/vm/wks/CMakeFiles/cee_wks_core.dir/__/amd64/getstate.S.o\r\n\r\nDisplaying notes found in: .note.gnu.property\r\n  Owner                Data size        Description\r\n  GNU                  0x00000010       NT_GNU_PROPERTY_TYPE_0\r\n      Properties: x86 feature: IBT, SHSTK\r\n```\r\n\r\nI am not sure if all these targets need `endbr64`... It\u0027s only needed for targets of indirect branches.\r\n\r\nAlso, verifing that CET is completely supported would require testing on hardware/software stack that checks for CET (my local machine doesn\u0027t).",
                                           "updatedAt":  "2020-10-21T21:15:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTU0MjQzNA==",
                                           "createdAt":  "2021-01-22T16:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Now tracked by the larger user story here: https://github.com/dotnet/runtime/issues/47309",
                                           "updatedAt":  "2021-01-22T16:44:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rjiZ",
                                           "createdAt":  "2021-07-21T02:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Moving this to 7. ",
                                           "updatedAt":  "2021-07-21T02:16:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gwxfi",
                                           "createdAt":  "2022-07-18T11:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "We are finalizing full support for CET for Windows in .NET 7, but for Linux support, we were waiting for the CET support to get merged into mainstream kernel. So I am moving this to .NET 8.",
                                           "updatedAt":  "2022-07-18T11:49:36Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Add support for Intel CET and -fcf-protection",
        "labels":  [
                       "Security",
                       "area-VM-coreclr",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40288",
        "createdAt":  "2020-08-03T05:00:27Z",
        "number":  40288,
        "author":  "philieu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-08T16:55:53Z",
        "body":  "This is related to an existing reported issue [here](https://github.com/dotnet/aspnetcore/issues/14808). The old issue is related to .net core 2.2. I\u0027ve now updated to the latest version of .net core (e.g. 3.1) and the issue is still there.\r\n\r\n### Describe the bug\r\nWe are seeing the following error from Kestrel heartbeat:\r\nHeartbeat.OnHeartbeat\r\nSystem.ArgumentNullException: Value cannot be null.\r\nat System.Threading.Monitor.ReliableEnter(Object obj, Boolean\u0026 lockTaken)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.TransportConnection.TickHeartbeat()\r\nat Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ConnectionManager.Walk(Action`1 callback)\r\nat Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat.OnHeartbeat()\r\n\r\nWhen the above error happened, the application crashed.\r\nI was not able to get more information in the docs to understand what that error means.\r\n\r\n### To Reproduce\r\nWe are using the following:\r\n\r\n* ASP.NET Core SDK 3.1 (we are using this docker image to build the application: mcr.microsoft.com/dotnet/core/sdk:3.1)\r\n* AWS Linux 2 AMI\r\n* SQL Server backend (not sure that matter)\r\n\r\n### Exceptions (if any)\r\nWhen debugging using \"lldb\", I got the following trace:\r\n\r\n\u003e thread dotnet/aspnetcore#65, name = \u0027******\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\nframe #0: 0x00007fa5538730ba libcoreclr.so`Object::TryEnterObjMonitorSpinHelper() + 42\r\nlibcoreclr.so`Object::TryEnterObjMonitorSpinHelper:\r\n-\u003e 0x7fa5538730ba \u003c+42\u003e: movl -0x4(%rbx), %eax\r\n0x7fa5538730bd \u003c+45\u003e: testl $0x1800ffff, %eax ; imm = 0x1800FFFF\r\n0x7fa5538730c2 \u003c+50\u003e: je 0x7fa5538730f4 ; \u003c+100\u003e\r\n0x7fa5538730c4 \u003c+52\u003e: testl $0x8000000, %eax ; imm = 0x8000000\r\n\r\n\u003e OS Thread Id: 0x14a7 (65)\r\nTEB information is not available so a stack size of 0xFFFF is assumed\r\nCurrent frame: libcoreclr.so!Object::TryEnterObjMonitorSpinHelper() + 0x2a\r\nChild-SP RetAddr Caller, Callee\r\n00007F9FFBFFE600 00007fa55386b45a libcoreclr.so!JIT_MonReliableEnter_Portable + 0x1a, calling libcoreclr.so!Object::TryEnterObjMonitorSpinHelper()\r\n00007F9FFBFFE620 00007fa4e2af1d3a (MethodDesc 00007fa4deb6bd20 + 0x4a Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection.TickHeartbeat()), calling libcoreclr.so!JIT_MonReliableEnter_Portable\r\n00007F9FFBFFE6A0 00007fa4e005f8b0 (MethodDesc 00007fa4deb0fad8 + 0xd0 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ConnectionManager.Walk(System.Action`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection\u003e))\r\n00007F9FFBFFE6B0 00007fa5538668c9 libcoreclr.so!JIT_NewS_MP_FastPortable(CORINFO_CLASS_STRUCT_*) + 0x19, calling libcoreclr.so!__tls_get_addr\r\n00007F9FFBFFE700 00007fa4e005f784 (MethodDesc 00007fa4deb0fdd8 + 0x54 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HeartbeatManager.OnHeartbeat(System.DateTimeOffset)), calling (MethodDesc \r\n00007fa4deb0fad8 + 0 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ConnectionManager.Walk(System.Action`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection\u003e))\r\n00007F9FFBFFE730 00007fa4e005e941 (MethodDesc 00007fa4deb0eee8 + 0xb1 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat.OnHeartbeat())\r\n00007F9FFBFFE7A0 00007fa4e00429bd (MethodDesc 00007fa4da603f30 + 0x8d System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007F9FFBFFE7F0 00007fa4e0042906 (MethodDesc 00007fa4dba127f0 + 0x116 System.Threading.TimerQueueTimer.CallCallback(Boolean)), calling (MethodDesc 00007fa4da603f30 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007F9FFBFFE830 00007fa4e00426d9 (MethodDesc 00007fa4dba127c0 + 0x79 System.Threading.TimerQueueTimer.Fire(Boolean)), calling (MethodDesc 00007fa4dba127f0 + 0 System.Threading.TimerQueueTimer.CallCallback(Boolean))\r\n00007F9FFBFFE850 00007fa4e00413e8 (MethodDesc 00007fa4dba12c40 + 0xc8 System.Threading.TimerQueue.EnsureTimerFiresBy(UInt32)), calling libcoreclr.so!GetTickCount64\r\n00007F9FFBFFE880 00007fa4e0041d23 (MethodDesc 00007fa4dba12c58 + 0x243 System.Threading.TimerQueue.FireNextTimers()), calling (MethodDesc 00007fa4dba127c0 + 0 System.Threading.TimerQueueTimer.Fire(Boolean))\r\n00007F9FFBFFE8F0 00007fa5538f85ff libcoreclr.so!CallDescrWorkerInternal + 0x7c\r\n00007F9FFBFFE910 00007fa553828445 libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int) + 0x75, calling libcoreclr.so!CallDescrWorkerInternal\r\n00007F9FFBFFE950 00007fa553828f20 libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 0x4f0, calling libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int)\r\n00007F9FFBFFE960 00007fa553b0611a libcoreclr.so!UnicodeToUTF8 + 0xca, calling libcoreclr.so!UTF8Encoding::GetBytes(char16_t*, int, unsigned char*, int)\r\n00007F9FFBFFE9B0 00007fa553b0d2ff libcoreclr.so!EnvironGetenv + 0xbf, calling libcoreclr.so!CorUnix::InternalLeaveCriticalSection(CorUnix::CPalThread*, _CRITICAL_SECTION*)\r\n00007F9FFBFFE9E0 00007fa553b0df2d libcoreclr.so!SetLastError + 0xd, calling libcoreclr.so!__errno_location\r\n00007F9FFBFFEA40 00007fa553b0d47d libcoreclr.so!GetEnvironmentVariableW + 0x13d, calling libcoreclr.so!PAL_free\r\n00007F9FFBFFEB20 00007fa553973f56 libcoreclr.so!AppDomainTimerCallback_Worker(void*) + 0x46, calling libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int)\r\n00007F9FFBFFEC30 00007fa5537fa645 libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 0x155\r\n00007F9FFBFFED50 00007fa5537facad libcoreclr.so!ManagedThreadBase::ThreadPool(void (*)(void*), void*) + 0x2d, calling libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)\r\n00007F9FFBFFED80 00007fa553974065 libcoreclr.so!AppDomainTimerCallback(void*, unsigned char) + 0xe5, calling libcoreclr.so!ManagedThreadBase::ThreadPool(void (*)(void*), void*)\r\n00007F9FFBFFEDB0 00007fa55381ce27 libcoreclr.so!ThreadpoolMgr::AsyncTimerCallbackCompletion(void*) + 0xb7\r\n00007F9FFBFFEDC0 00007fa55385d8c1 libcoreclr.so!EEHeapFreeInProcessHeap(unsigned int, void*) + 0x31, calling libcoreclr.so!HeapFree\r\n00007F9FFBFFEE70 00007fa553819999 libcoreclr.so!ThreadpoolMgr::WorkerThreadStart(void*) + 0x4d9\r\n00007F9FFBFFEED0 00007fa553b2c73d libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) + 0x15d\r\n00007F9FFBFFEEF0 00007fa5547ddfa3 libpthread.so.0!start_thread + 0xf3\r\n00007F9FFBFFEFB0 00007fa5543e84cf libc.so.6!clone + 0x3f\r\n\r\nI also have the process dump. We can figure out a mechanism to send it through if needed.\r\n\r\nThanks.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKRc7-A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Nzg0MjY1NA==",
                                           "createdAt":  "2020-08-03T06:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Looks like a memory corruption issue. \r\n\r\ncc @jkotas @kouvel @janvorli ",
                                           "updatedAt":  "2020-08-03T06:59:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODI0NTM2MQ==",
                                           "createdAt":  "2020-08-03T21:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-03T21:15:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODI0NzMzOQ==",
                                           "createdAt":  "2020-08-03T21:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Setting area VM, although there\u0027s no evidence where any corruption might be.\r\n",
                                           "updatedAt":  "2020-08-03T21:20:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODM4NTkyMg==",
                                           "createdAt":  "2020-08-04T05:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @philieu, are you able to share a dump for this issue? Also has you possibly tried on latest 3.1.6 release? There were some issues fixed as part of that. ",
                                           "updatedAt":  "2020-08-04T05:22:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODM5NjAyMw==",
                                           "createdAt":  "2020-08-04T05:57:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMTb8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2020-08-04T06:18:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "philieu",
                                           "body":  "Hi @mangod9, sure I\u0027ll upgrade to 3.1.6 and will report back.\r\n\r\nIn the meantime, what\u0027s the best way to send the dump over? I can upload to OneDrive and share it with your Microsoft account?",
                                           "updatedAt":  "2020-08-04T05:57:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTA0MzcxNQ==",
                                           "createdAt":  "2020-08-05T07:57:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "@danmosemsft I\u0027ve sent you an email with the link to the dump since I can\u0027t find the email of @mangod9 .\r\n\r\nThanks.",
                                           "updatedAt":  "2020-08-05T07:57:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTI3MzgwNw==",
                                           "createdAt":  "2020-08-05T15:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks @philieu . I will get the link for Dan. Just to confirm that you are seeing the crash with the exact same stack, and its repeatable?",
                                           "updatedAt":  "2020-08-05T15:53:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU5MTg2OA==",
                                           "createdAt":  "2020-08-05T23:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "@mangod9 \r\n\r\nWe have an integration tests suit and the issue will appear from time to time, I would say 15% of runs. The same happened in stage and prod as well.\r\n\r\nThe stack frame I posted above is the common one, about 90% of the time. I also include below another stack I saw, although it is not very often.\r\nI included both in the process dump I shared.\r\n\r\nCheers.\r\n\r\n--------------\r\n\r\n\u003e thread #72, name = \u0027*******\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x400800080)\r\nframe #0: 0x00007ff8f3ca0271\r\n-\u003e 0x7ff8f3ca0271: cmpl %edi, (%rdi)\r\n0x7ff8f3ca0273: callq 0x7ff8eb3b15b0\r\n0x7ff8f3ca0278: testl %eax, %eax\r\n0x7ff8f3ca027a: jne 0x7ff8f3ca0284\r\n\r\n\r\n\u003e (lldb) dumpstack\r\nOS Thread Id: 0x130b (72)\r\nTEB information is not available so a stack size of 0xFFFF is assumed\r\nCurrent frame: (MethodDesc 00007ff8ef9cfac0 + 0x51 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ConnectionManager.RemoveConnection(Int64))\r\nChild-SP RetAddr Caller, Callee\r\n00007FF405FF9FE0 00007ff8f3c314c3 (MethodDesc 00007ff8f29169e8 + 0x563 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection+\u003cExecuteAsync\u003ed__32.MoveNext()), calling (MethodDesc 00\r\n007ff8ef9cfac0 + 0 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ConnectionManager.RemoveConnection(Int64))\r\n00007FF405FFA090 00007ff8f250ad0d (MethodDesc 00007ff8eb4c3f30 + 0x8d System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA0E0 00007ff8f3c6abda (MethodDesc 00007ff8f2e7c878 + 0x4a System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.Core\r\nLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection+\u003cExecuteAsync\u003ed__32, Microsoft.AspNetCore.Server.Kestrel.Core]].MoveNext(System.Threading.Thread)), calling (MethodDesc \r\n00007ff8eb4c3f30 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA0F0 00007ff8f32df398 (MethodDesc 00007ff8eb8e1db0 + 0x18 System.Threading.Tasks.TaskScheduler.get_InternalCurrent()), calling libcoreclr.so!JIT_GetSharedGCThreadStaticBase(DomainLocalModule*, unsi\r\ngned int)\r\n00007FF405FFA110 00007ff8f32e1656 (MethodDesc 00007ff8eb8e8410 + 0x106 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA150 00007ff8f32dd830 (MethodDesc 00007ff8eb4c0ba0 + 0xc0 System.Threading.Tasks.Task.RunContinuations(System.Object)), calling (MethodDesc 00007ff8eb8e8410 + 0 System.Threading.Tasks.AwaitTaskCont\r\ninuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA160 00007ff8f24db39f (MethodDesc 00007ff8eb8ec520 + 0x7f System.Threading.SpinWait.SpinOnceCore(Int32)), calling libcoreclr.so!ThreadNative::Sleep(int)\r\n00007FF405FFA1B0 00007ff9646f3e57 libcoreclr.so!COMInterlocked::ExchangeObject(void**, void*) + 0x17, calling libcoreclr.so!ErectWriteBarrier(Object**, Object*)\r\n00007FF405FFA1F0 00007ff8f3b5e9cf (MethodDesc 00007ff8eb8ea7d0 + 0x8f System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTask\r\nResult)), calling (MethodDesc 00007ff8eb4c0b88 + 0 System.Threading.Tasks.Task.FinishContinuations())\r\n00007FF405FFA220 00007ff8f3c32f2c (MethodDesc 00007ff8f2918a78 + 0x7bc Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib]].M\r\noveNext()), calling (MethodDesc 00007ff8eb8ea7d0 + 0 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTaskResult))\r\n00007FF405FFA330 00007ff8f250ad0d (MethodDesc 00007ff8eb4c3f30 + 0x8d System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA380 00007ff8f3c6b735 (MethodDesc 00007ff8f2e7c1d8 + 0x95 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.Core\r\nLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]].MoveNext(System.Thread\r\ning.Thread)), calling (MethodDesc 00007ff8eb4c3f30 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA3C0 00007ff8f32e1656 (MethodDesc 00007ff8eb8e8410 + 0x106 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA400 00007ff8f32dd830 (MethodDesc 00007ff8eb4c0ba0 + 0xc0 System.Threading.Tasks.Task.RunContinuations(System.Object)), calling (MethodDesc 00007ff8eb8e8410 + 0 System.Threading.Tasks.AwaitTaskCont\r\ninuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA460 00007ff9646f3e57 libcoreclr.so!COMInterlocked::ExchangeObject(void**, void*) + 0x17, calling libcoreclr.so!ErectWriteBarrier(Object**, Object*)\r\n00007FF405FFA4A0 00007ff8f3b5e9cf (MethodDesc 00007ff8eb8ea7d0 + 0x8f System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTask\r\nResult)), calling (MethodDesc 00007ff8eb4c0b88 + 0 System.Threading.Tasks.Task.FinishContinuations())\r\n00007FF405FFA4D0 00007ff8f3c33593 (MethodDesc 00007ff8f2921af8 + 0x333 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__213`1[[System.__Canon, System.Private.CoreLib\r\n]].MoveNext()), calling (MethodDesc 00007ff8eb8ea7d0 + 0 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTaskResult))\r\n00007FF405FFA570 00007ff8f250ad0d (MethodDesc 00007ff8eb4c3f30 + 0x8d System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA5C0 00007ff8f3c69b15 (MethodDesc 00007ff8f2e7b8d8 + 0x95 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.Core\r\nLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__213`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]].MoveNext(System.Th\r\nreading.Thread)), calling (MethodDesc 00007ff8eb4c3f30 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n00007FF405FFA600 00007ff8f32e1656 (MethodDesc 00007ff8eb8e8410 + 0x106 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA640 00007ff8f32dd830 (MethodDesc 00007ff8eb4c0ba0 + 0xc0 System.Threading.Tasks.Task.RunContinuations(System.Object)), calling (MethodDesc 00007ff8eb8e8410 + 0 System.Threading.Tasks.AwaitTaskCont\r\ninuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n00007FF405FFA670 00007ff8f3c30f3d (MethodDesc 00007ff8f28ed300 + 0x2d System.IO.Pipelines.Pipe+DefaultPipeReader.AdvanceTo(System.SequencePosition, System.SequencePosition)), calling (MethodDesc 00007ff8f28eb1\r\n70 + 0 System.IO.Pipelines.Pipe.AdvanceReader(System.SequencePosition ByRef, System.SequencePosition ByRef))\r\n00007FF405FFA6A0 00007ff9646f3e57 libcoreclr.so!COMInterlocked::ExchangeObject(void**, void*) + 0x17, calling libcoreclr.so!ErectWriteBarrier(Object**, Object*)\r\n00007FF405FFA6E0 00007ff8f3b5e9cf (MethodDesc 00007ff8eb8ea7d0 + 0x8f System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTask\r\nResult)), calling (MethodDesc 00007ff8eb4c0b88 + 0 System.Threading.Tasks.Task.FinishContinuations())\r\n00007FF405FFA710 00007ff8f3be9f2e (MethodDesc 00007ff8f2922c80 + 0x104e Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__214`1[[System.__Canon, System.Private.CoreLib]].M\r\noveNext()), calling (MethodDesc 00007ff8eb8ea7d0 + 0 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].TrySetResult(System.Threading.Tasks.VoidTaskResult))\r\n00007FF405FFA890 00007ff8f32f51e1 (MethodDesc 00007ff8eb4c3f70 + 0x41 System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threadin\r\ng.ContextCallback, System.Object))\r\n00007FF405FFA8D0 00007ff8f3bf1453 (MethodDesc 00007ff8f2e7af98 + 0xd3 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.Core\r\nLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__214`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]].MoveNext(System.Threadi\r\nng.Thread)), calling (MethodDesc 00007ff8eb4c3f70 + 0 System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallbac\r\nk, System.Object))\r\n00007FF405FFA910 00007ff8f32dea59 (MethodDesc 00007ff8eb8e2fb8 + 0x1d9 System.Threading.ThreadPoolWorkQueue.Dispatch())\r\n00007FF405FFA980 00007ff9647af5ff libcoreclr.so!CallDescrWorkerInternal + 0x7c\r\n00007FF405FFA9A0 00007ff9646df445 libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int) + 0x75, calling libcoreclr.so!CallDescrWorkerInternal\r\n00007FF405FFA9E0 00007ff9646dff20 libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 0x4f0, calling libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int)\r\n00007FF405FFAA10 00007ff9649c7d08 libcoreclr.so!CorUnix::CSharedMemoryObject::ReleaseObjectDestructionLock(CorUnix::CPalThread*, bool) + 0x48, calling libcoreclr.so!CorUnix::InternalLeaveCriticalSection(CorUni\r\nx::CPalThread*, _CRITICAL_SECTION*)\r\n00007FF405FFAA40 00007ff9652acff6 libc.so.6!__clock_gettime + 0x26\r\n00007FF405FFAA60 00007ff96569b207 libpthread.so.0!__pthread_cond_timedwait + 0x107, calling libpthread.so.0!__pthread_mutex_cond_lock\r\n00007FF405FFAAC8 00007ff965698ee2 libpthread.so.0!__pthread_mutex_unlock_usercnt + 0x42, calling libpthread.so.0!__lll_unlock_wake\r\n00007FF405FFAB00 00007ff96469de04 libcoreclr.so!MetaSig::GetReturnTypeNormalized(TypeHandle*) const + 0x54, calling libcoreclr.so!SigPointer::PeekElemTypeClosed(Module*, SigTypeContext const*) const\r\n00007FF405FFABB0 00007ff964829c2a libcoreclr.so!QueueUserWorkItemManagedCallback(void*) + 0x4a, calling libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int)\r\n00007FF405FFACD0 00007ff9646b1645 libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 0x155\r\n00007FF405FFADF0 00007ff9646b1cad libcoreclr.so!ManagedThreadBase::ThreadPool(void (*)(void*), void*) + 0x2d, calling libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)\r\n00007FF405FFAE20 00007ff96481557e libcoreclr.so!ManagedPerAppDomainTPCount::DispatchWorkItem(bool*, bool*) + 0x10e, calling libcoreclr.so!ManagedThreadBase::ThreadPool(void (*)(void*), void*)\r\n00007FF405FFAE30 00007ff964814e2a libcoreclr.so!PerAppDomainTPCountList::GetAppDomainIndexForThreadpoolDispatch() + 0x7a\r\n00007FF405FFAE70 00007ff9646d0999 libcoreclr.so!ThreadpoolMgr::WorkerThreadStart(void*) + 0x4d9\r\n00007FF405FFAED0 00007ff9649e373d libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) + 0x15d\r\n00007FF405FFAEF0 00007ff965694fa3 libpthread.so.0!start_thread + 0xf3\r\n00007FF405FFAFB0 00007ff96529f4cf libc.so.6!clone + 0x3f\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-08-05T23:13:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTY0OTE2OA==",
                                           "createdAt":  "2020-08-11T00:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "Just a quick update. We\u0027ve upgraded the .net core version to 3.1.6. However, we are still seeing the issue from time to time.",
                                           "updatedAt":  "2020-08-11T00:03:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTcyNDAwOA==",
                                           "createdAt":  "2020-08-11T04:54:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Were you able to capture a dump?",
                                           "updatedAt":  "2020-08-11T04:54:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTc3NjI2Mw==",
                                           "createdAt":  "2020-08-11T07:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "@mangod9, I\u0027ve loaded the dump for 3.1.6 to the OneDrive folder that previously shared with @danmosemsft . The new dump file is the one ended with \"1042.b885b4346a10.1597128998-net-core-3_1_6\"\r\n\r\nPlease let me know if you need me to resend the share link.",
                                           "updatedAt":  "2020-08-11T07:23:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjE4NTUwMw==",
                                           "createdAt":  "2020-08-11T18:44:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks, will check with Dan. ",
                                           "updatedAt":  "2020-08-11T18:44:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzAxNTkyMw==",
                                           "createdAt":  "2020-08-12T17:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @philieu, was able to get access to the dump, but we are having trouble inspecting managed frames. So checking whether the dump was collected with the appropriate [configuration](https://github.com/dotnet/runtime/blob/master/docs/design/coreclr/botr/xplat-minidump-generation.md#configurationpolicy)? \r\n\r\ncc @janvorli ",
                                           "updatedAt":  "2020-08-12T17:42:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDcyNDYzMA==",
                                           "createdAt":  "2020-08-17T07:56:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "@mangod9 Let me double check the configuration.",
                                           "updatedAt":  "2020-08-17T07:56:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTM4ODUzNg==",
                                           "createdAt":  "2020-09-09T07:53:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philieu",
                                           "body":  "@mangod9 Sorry for the long delay in getting back to you on this. I\u0027ve managed to get another core dump with the specified configuration. I\u0027ve uploaded it to the same shared folder I sent before. The name of the file is \"coredump.885-20200909\".\r\nHope this will help.",
                                           "updatedAt":  "2020-09-09T07:53:41Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  ".Net Core 3.1 - Kestrel Heartbeat.OnHeartbeat error",
        "labels":  [
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45503",
        "createdAt":  "2020-12-02T21:22:53Z",
        "number":  45503,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:19:02Z",
        "body":  "### Description\r\n\r\nUnzip [Repro.zip](https://github.com/dotnet/runtime/files/5632085/Repro.zip) and run `dotnet run`.\r\n\r\nThe app spawns a new process and redirects its output. It sets the STDOUT and STDERR output encodings to `Encoding.Unicode`. The process sets `Console.OutputEncoding` to `Encoding.Unicode` as well. Then the process prints out a message to STDOUT via `Console.WriteLine` (encoded correctly) and triggers stack overflow. The stack overflow handler (`DefaultCatchHandler` in `src/coreclr/src/vm/util.cpp`) does not encode the string to the console output encoding though and the result is gibberish.\r\n\r\nActual output:\r\n```\r\nChild process started: 848\r\nChild process running\r\nOutput: \\uD808\\uDF45\r\n\\u7453\\u6361\\u206B\\u766F\\u7265\\u6C66\\u776F\\u0A2E\\u6552\\u6570\\u7461\\u3320\\u3132\\u3731\\u7420\\u6D69\\u7365\\u0A3A\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u200A\\u2020\\u7461\\u4320\\u6E6F\\u6F73\\u656C\\u6E45\\u6F63\\u6964\\u676E\\u502E\\u6F72\\u7267\\u6D61\\u3C2E\\u614D\\u6E69\\u673E\\u5F5F\\u7C46\\u5F32\\u2830\\u0A29\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u2D2D\\u200A\\u2020\\u7461\\u4320\\u6E6F\\u6F73\\u656C\\u6E45\\u6F63\\u6964\\u676E\\u502E\\u6F72\\u7267\\u6D61\\u4D2E\\u6961\\u286E\\u7953\\u7473\\u6D65\\u532E\\u7274\\u6E69\\u5B67\\u295D\r\nChild process exited: -1073741571\r\n```\r\n\r\nExpected output:\r\n```\r\nChild process started: 11928\r\nChild process running\r\nOutput: \\uD808\\uDF45\r\nStack overflow.\r\nRepeat 32137 times:\r\n--------------------------------\r\n   at ConsoleEncoding.Program.\u003cMain\u003eg__F|2_0()\r\n--------------------------------\r\n   at ConsoleEncoding.Program.Main(System.String[])\r\nChild process exited: -1073741571\r\n```\r\n\r\n### Configuration\r\n\r\n```\r\ndotnet --version \r\n5.0.100\r\n```\r\n\r\nwinver\r\n![image](https://user-images.githubusercontent.com/41759/100932637-0436a080-34a1-11eb-900d-58d7f86c41ea.png)\r\n\r\n### Regression?\r\n\r\nNot a regression.\r\n.NET Framework has the same issue.\r\n\r\n### Notes\r\n\r\nThis issue shows up in Visual Studio when we attempt to work around another [issue](https://developercommunity2.visualstudio.com/t/C-Interactive-encoding-for-Russian-lang/1223701), where setting `Console.OutputEncoding` to `Encoding.UTF8` throws \"Invalid handle\". Setting `Console.OutputEncoding` to `Encoding.Unicode` works and regular console output is correctly encoded but messages reported by `DefaultCatchHandler` are now garbled. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Messages printed to STDERR by DefaultCatchHandler are not encoded correctly",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47124",
        "createdAt":  "2021-01-18T15:59:34Z",
        "number":  47124,
        "author":  "iamlouk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-04T16:28:55Z",
        "body":  "Hi,\r\n\r\nI think i found something missing from the CIL-Spec in the .NET-Core runtime on Linux. It might be a bug, or simply not yet implemented, as it seams C#-Compilers do not use this feature of the CIL:\r\n\r\n### Description\r\n\r\nThe follwing CIL assembly code does not run properly. Assembling it works, but trying to run it results in the following error: `Unhandled exception. System.BadImageFormatException: Could not load file or assembly \u0027/home/lou/uni/proj/stuff/tests/test-global-arrays/string.exe\u0027. An attempt was made to load a program with an incorrect format.`. I want to use what is described in section II.16.3.1 in [the CIL-Spec](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf) as \"Address of label\" (the `\u0026(hello_world_data)` part).\r\n\r\n```\r\n.assembly extern mscorlib\r\n{\r\n    .ver 4:0:0:0\r\n}\r\n.assembly \u0027string\u0027\r\n{\r\n}\r\n.module \u0027string\u0027\r\n\r\n.data hello_world_data = { int8(72), int8(101), int8(108), int8(108), int8(111), int8(32), int8(87), int8(111), int8(114), int8(108), int8(100), int8(33), int8(0) }\r\n\r\n.field static int8 hello_world at hello_world_data\r\n\r\n.data addr_of_data = \u0026(hello_world_data)\r\n\r\n.field static int8* hello_world_ptr at addr_of_data\r\n\r\n.method public static default int32 main () cil managed {\r\n    .entrypoint\r\n\r\n    ldc.i4.0\r\n    ret\r\n}\r\n```\r\nAs i am doing all of this on Linux, i compiled this repo locally and am using `dotnet-runtime/artifacts/bin/coreclr/Linux.x64.Debug/ilasm` to assemble the snippet above: `ilasm -dll -output:./hi.dll ./hi.il`. Then i run it using `dotnet ./hi.dll`.\r\n\r\n### Configuration\r\n\r\n- .NET version: 5.0.101\r\n- OS: `Linux ... 5.10.2-2-MANJARO #1 SMP PREEMPT Tue Dec 22 08:14:42 UTC 2020 x86_64 GNU/Linux` (Manjaro Linux with the latest updates installed)\r\n- Architecture: x64\r\n\r\n[I asked about this on StackOverflow](https://stackoverflow.com/questions/65415599/how-to-use-in-cil-data-declarations), where someone replied that this would works as expected using the .NET-Framework on Windows. I do not know if this ever worked on older versions of .NET-Core.\r\n\r\nI am sorry if anything is missing or badly worded!\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLXGJzQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjMzNzYzMg==",
                                           "createdAt":  "2021-01-18T15:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-18T15:59:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQxNTU2NQ==",
                                           "createdAt":  "2021-01-18T18:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I assume the Unix PE loader is rejecting images with more than the expected (1) number of relocations. This directive generates relocations.",
                                           "updatedAt":  "2021-01-18T18:42:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "CIL .data-Declaration: Address of label not working",
        "labels":  [
                       "os-linux",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48157",
        "createdAt":  "2021-02-11T12:04:33Z",
        "number":  48157,
        "author":  "plachor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-06T06:13:38Z",
        "body":  "Hi, I\u0027m working on core components that are used by other developers to create a working application. Within my core components there is a global exception handling strategy were we handle domain and unhandled exceptions. Yet I do not fully control how my components will be used by end-developer. So end-developer can handle exceptions that I would wish him not to be able too. For instance `OutOfMemory` exception.\r\n\r\nWe were excited once netcore3.1 started to handle correctly memory limits in containerized environments. We stopped seeing containers being killed by OOM killer without being able to log anything or given any chance to perform graceful shutdown.\r\n\r\nBut after several months we see that in our case for OOM\u0027s best thing we can do is to perform a restart to ensure container is healthy. This is also suggested by documentation. However in my case I do not fully control how my components are being used. Additionally there are many entry points like request pipeline, background services, asynchronous message bus were such exception can occur. For background services we might need to wait for #43637 to be able to handle it correctly.  \r\n\r\nI\u0027m hoping to find a single place where I could express that `OutOfMemory` is fatal exception that it cannot be suppressed by end developer using `try-catch` block. Or other way around, looking for notification that it occurred and was handled somewhere so I can log it and perform graceful shutdown. \r\n\r\nAre there any options for me, or am I forced to ensure that each `try-catch` is not by any chance handling `OutOfMemory` exception?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMtk7xQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzQwMzE2NQ==",
                                           "createdAt":  "2021-02-11T12:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-11T12:04:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzU5NzgzNw==",
                                           "createdAt":  "2021-02-11T15:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Adding VM label as such a hook would be in the runtime itself.",
                                           "updatedAt":  "2021-02-11T15:55:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjY1NzM1MQ==",
                                           "createdAt":  "2021-06-02T02:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SimonCropp",
                                           "body":  "@danmoseley would any hook theoretically be possible? wouldnt calling it likely require memory to be allocated?",
                                           "updatedAt":  "2021-06-02T02:11:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzA2MjI0MQ==",
                                           "createdAt":  "2021-06-02T14:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It\u0027s not my area. @janvorli ",
                                           "updatedAt":  "2021-06-02T14:11:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzA5NzQxMw==",
                                           "createdAt":  "2021-06-02T14:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Could the component add a handler for [AppDomain.FirstChanceException](https://docs.microsoft.com/dotnet/api/system.appdomain.firstchanceexception?view=net-5.0) and detect OutOfMemoryException that way? The documentation specifically suggests using this for \"infrastructure-related exceptions such as out-of-memory\".",
                                           "updatedAt":  "2021-06-02T14:54:12Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "How to handle globally `OutOfMemory` exception in large project",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48389",
        "createdAt":  "2021-02-17T06:35:52Z",
        "number":  48389,
        "author":  "whatevergeek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-04T16:45:34Z",
        "body":  "Copying details here from the other issue (https://github.com/dotnet/runtime/issues/41421) \r\nas discussed with @vitek-karas.    \r\n\r\nInstallation is by tarring arm64.tar.gz from the dotnet [arm64 site](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.103-linux-arm64-binaries)    \r\n\r\nI\u0027ve investigated further and got the following observations:\r\n\r\n## TLDR:\r\nLatest arm64 package (dotnet-sdk-5.0.103-linux-arm64.tar.gz) doesn’t cause segmentation fault anymore when `dotnet new` is executed. However, build is failing without giving info.\r\n\r\n## Exhibit A    \r\n### dotnet-sdk-5.0.103: segmentation fault during `dotnet new` is gone, but build is failing w/o info    \r\n![image](https://user-images.githubusercontent.com/7351683/107652562-ad78ee80-6cbb-11eb-8b34-03df2705263a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/7351683/107652582-b49ffc80-6cbb-11eb-9809-26f1a405c53a.png)\r\n\r\n## Exhibit B    \r\n### Previous version of .NET 5.0 that was working    \r\n![image](https://user-images.githubusercontent.com/7351683/107652701-d0a39e00-6cbb-11eb-9e5f-76ab61154d69.png)\r\n\r\n![image](https://user-images.githubusercontent.com/7351683/107652737-dac59c80-6cbb-11eb-8890-05c9347c2dd2.png)\r\n\r\nPerhaps, segmentation fault is already resolved (or might be hiding since build failure is not showing).\r\nAnyway, let me know if you or your team need further info.\r\n\r\nI\u0027m really looking forward to use the latest .NET 5.0 on my arm64 device.\r\n\r\n_Originally posted by @whatevergeek in https://github.com/dotnet/runtime/issues/41421#issuecomment-777528262_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLo1JZg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDMzOTI2NA==",
                                           "createdAt":  "2021-02-17T06:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-17T06:35:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDcwOTc0MQ==",
                                           "createdAt":  "2021-02-17T17:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "@mangod9 @agocke can y\u0027all take a look?  This looks like a potential regression.",
                                           "updatedAt":  "2021-02-17T17:13:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDkzOTMwNw==",
                                           "createdAt":  "2021-02-18T00:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@sbomer can you take a look?",
                                           "updatedAt":  "2021-02-18T00:12:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDk0MjE2Nw==",
                                           "createdAt":  "2021-02-18T00:20:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "cc @janvorli @sdmaclea ",
                                           "updatedAt":  "2021-02-18T00:20:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDk0Mzg2Ng==",
                                           "createdAt":  "2021-02-18T00:24:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBgb6xg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2021-02-18T01:01:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Let me try it on my local arm64 linux device\r\n",
                                           "updatedAt":  "2021-02-18T00:24:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDk1NzAwOQ==",
                                           "createdAt":  "2021-02-18T01:00:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I was able to repro this in debian running on UserLAnd on my phone - but I don\u0027t have another ARM64 device on hand to check if it repros on a plain install without a compatibility layer. It\u0027s difficult to debug in UserLAnd since gdb/strace don\u0027t work.",
                                           "updatedAt":  "2021-02-18T01:00:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDk2NTY0MA==",
                                           "createdAt":  "2021-02-18T01:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBgcjGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2021-02-18T01:18:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2021-02-18T03:06:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "In a debian 9 docker container running on my Odroid N2 arm64 device (host is Ubuntu 18.04), I\u0027ve tried what was shown in the screenshots above and it worked:\r\n```\r\ndotnet50/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.103\r\n Commit:    72dec52dbd\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-arm64\r\n Base Path:   /root/dotnet50/sdk/5.0.103/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.3\r\n  Commit:  c636bbdc8a\r\n\r\n.NET SDKs installed:\r\n  5.0.103 [/root/dotnet50/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.3 [/root/dotnet50/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [/root/dotnet50/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\ndotnet50/dotnet new console -o console_dotnet-5.0\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning \u0027dotnet restore\u0027 on console_dotnet-5.0/console_dotnet-5.0.csproj...\r\n  Determining projects to restore...\r\n  Restored /root/console_dotnet-5.0/console_dotnet-5.0.csproj (in 239 ms).\r\nRestore succeeded.\r\n\r\nroot@fca9a3a071da:~# cd console_dotnet-5.0/\r\nroot@fca9a3a071da:~/console_dotnet-5.0# ../dotnet50/dotnet restore\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\nroot@fca9a3a071da:~/console_dotnet-5.0# ../dotnet50/dotnet build\r\nMicrosoft (R) Build Engine version 16.8.3+39993bd9d for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  console_dotnet-5.0 -\u003e /root/console_dotnet-5.0/bin/Debug/net5.0/console_dotnet-5.0.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:04.15\r\nroot@fca9a3a071da:~/console_dotnet-5.0# ../dotnet50/dotnet run\r\nHello World!\r\n```\r\n\r\nSo I believe the issue is UserLAnd specific.",
                                           "updatedAt":  "2021-02-18T01:15:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTAxMTMwMg==",
                                           "createdAt":  "2021-02-18T03:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Ah, I somehow missed the `userland`-specific thing.",
                                           "updatedAt":  "2021-02-18T03:05:37Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Please add support to run dotnet in arm64 (userland)",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49197",
        "createdAt":  "2021-03-05T06:14:04Z",
        "number":  49197,
        "author":  "miloszkukla",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T21:28:27Z",
        "body":  "In Singularity OS\u0027es paper https://www.microsoft.com/en-us/research/wp-content/uploads/2005/10/tr-2005-135.pdf there is an information about garbage collectors available and the one that is used for system code:\r\n\r\n\u003e Singularity’s run-time systems currently support five types of collectors—generational\r\n\u003e semi-space, generational sliding compacting, an adaptive combination of the previous two\r\n\u003e collectors, mark-sweep, and concurrent mark-sweep. We currently use the latter for system code,\r\n\u003e as it has very short pause times during collection. With this collector, each thread has a\r\n\u003e segregated free list, which eliminates thread synchronization in the normal case. A garbage\r\n\u003e collection is triggered at an allocation threshold and executes in an independent collection thread\r\n\u003e that marks reachable objects. During a collection, the collector stops each thread to scan its stack,\r\n\u003e which introduces **a pause time of less than 100 microseconds** for typical stacks.\r\n\r\nWould that be possible/make sense to have such a  low-latency GC in .NET for scenarios like image/audio rendering?  \r\nI guess a possibility to skip a particular thread when scanning would solve the latency problem definitely but there is no public way to manually delete managed objects and there are good reasons not to introduce such way?\r\n\r\ncc @Maoni0 ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxFa_0A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTE4MzgxNw==",
                                           "createdAt":  "2021-03-05T06:14:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn Singularity OS\u0027es paper https://www.microsoft.com/en-us/research/wp-content/uploads/2005/10/tr-2005-135.pdf there is an information about garbage collectors available and the one that is used for system code:\r\n\r\n\u003e Singularity’s run-time systems currently support five types of collectors—generational\r\n\u003e semi-space, generational sliding compacting, an adaptive combination of the previous two\r\n\u003e collectors, mark-sweep, and concurrent mark-sweep. We currently use the latter for system code,\r\n\u003e as it has very short pause times during collection. With this collector, each thread has a\r\n\u003e segregated free list, which eliminates thread synchronization in the normal case. A garbage\r\n\u003e collection is triggered at an allocation threshold and executes in an independent collection thread\r\n\u003e that marks reachable objects. During a collection, the collector stops each thread to scan its stack,\r\n\u003e which introduces **a pause time of less than 100 microseconds** for typical stacks.\r\n\r\nWould that be possible/make sense to have such a  low-latency GC in .NET for scenarios like image/audio rendering?  \r\nI guess a possibility to skip particular thread when scanning would solve the latency problem definitely but there is no public way to manually delete managed objects and there are good reasons not to introduce such way?\r\ncc @Maoni0 \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emiloszkukla\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-05T06:14:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTI1NTk5NQ==",
                                           "createdAt":  "2021-03-05T08:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBiXRGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "miloszkukla",
                                                                               "createdAt":  "2021-03-05T09:03:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "this is really not about the GC. it\u0027s about having a way to guarantee a thread only ever accesses its own portion of the heap that\u0027s completely isolated from the rest of heap, so you can do a collection just for that thread. the GC itself mentioned in the paper is a concurrent mark and sweep GC, which we\u0027ve already had for many years.\r\n\r\ncould we build such a feature that limits threads to their isolated heap? it could benefit certain scenarios but I doubt this is something that we\u0027d get to consider anytime soon. ",
                                           "updatedAt":  "2021-03-05T08:32:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EVr_Q",
                                           "createdAt":  "2025-09-15T21:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T21:28:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Ultra low-latency GC",
        "labels":  [
                       "area-VM-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49959",
        "createdAt":  "2021-03-19T22:51:40Z",
        "number":  49959,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-09T08:19:35Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Can-you-please-make-NET-BLAZOR-integrat/1366735)._\n\n---\nlet me easily start writing logic in c++, you can figure out the rest of the stuff. suggestion : use existing tool chains like llvm/emscripten to compile it to webassembly modules and start using it with intelisense from c# codes in visual studio.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/11/2021, 00:45 AM: \n\nThank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We\u0027ll provide an update once the issue has been triaged by the product team.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcDV9oQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzU5NjgzMw==",
                                           "createdAt":  "2021-03-21T14:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "Thanks for contacting us.\r\n\r\nThis would be a feature for the runtime team to consider. Moving it there for them to evaluate the ask.",
                                           "updatedAt":  "2021-03-21T14:54:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzU5Njg3OA==",
                                           "createdAt":  "2021-03-21T14:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-21T14:54:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjM5MzQ3Ng==",
                                           "createdAt":  "2021-05-05T03:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This is largely covered by https://github.com/dotnet/runtime/issues/44636\r\n",
                                           "updatedAt":  "2021-05-05T03:48:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjM5MzUzMg==",
                                           "createdAt":  "2021-05-05T03:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Can-you-please-make-NET-BLAZOR-integrat/1366735)._\n\n---\nlet me easily start writing logic in c++, you can figure out the rest of the stuff. suggestion : use existing tool chains like llvm/emscripten to compile it to webassembly modules and start using it with intelisense from c# codes in visual studio.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/11/2021, 00:45 AM: \n\nThank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We\u0027ll provide an update once the issue has been triaged by the product team.\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-VM-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-05T03:48:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNWmI",
                                           "createdAt":  "2024-01-09T07:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "To elaborate, we can consider bringing the C/C++ environment closer to .NET\r\n\r\nSpecifically the ability for consuming C/C++ code in blazor project easily by targeting C/C++ projects to blazor\r\nThe C/C++ projects targeting blazor can access browser interops (interacting with dom directly in C/C++ projects, the environment can be initialized by dependency injection later on in the actual blazor project consuming these C/C++ projects)\r\n\r\nThe C/C++ projects targeting blazor, through careful engineering, can ideally be consumed in blazor directly with intellisense.\r\n1. (Possible because .NET running in JIT running in webassembly, C/C++ is compiled to wasm modules for us to load and run)\r\n2. (Write a function inside C++, you can see intellisense giving you the proper function name and signature for you to use in blazor)\r\n\r\nlet C/C++ be capable of dynamically running webassembly (string format / binary), let .NET be capable of too. Use the browser\u0027s webassembly to achieve it\r\n\r\nIt\u0027s a feature that\u0027s important as blazor\u0027s oppertunity for becoming the all-interfacing all-purpose app engine for writing all-platform business applications\r\n\r\nI understand we can compile C/C++ to dll and use dll in .NET, but I am hoping to bring webassembly in the game, let C/C++ compile directly to webassembly, and .NET will help developers use C/C++ functions as if there is no barrier, then later on the two will see each other in webassembly and .NET use the native-compiled wasm modules to run the native code\r\n\r\nEventually we can use webassembly even when there is no browser by bundling its runtime, for example we can replace MAUI with Blazor for our next generation application framework. Developers would be using blazor + native codes to build an unified UI experience, and if they require platform specific, they can use native codes to access them if the app is targeting those platform (multi-targeting is possible, we can do it a lot of ways, for people to use native features on IOS/Android/etc)\r\n\r\n@javiercn @lewing \r\n\r\nIf there is a path for Microsoft .NET to be the framework for building all UI-heavy applications, **[Browser-UI]** + **[Any Programming Language]** glued together by **[.NET]** utilizing **[Webassembly]** seems to be the one\r\n\r\nStage is presented, Microsoft\u0027s name will be remembered.\r\n.NET doesn\u0027t have to be the one to do this, the liability is minimal later on. All it had to offered was the C#/F# language and existing codes.\r\nAll the other programming language\u0027s developers can improve the experience of this platform by demanding solutions within their own communities, Microsoft .NET is not alone and would be a part of this experience like everyone else.\r\n\r\nImagine a tomorrow you wanted to display a dialog box for login, Kotlin community already built a library for drawing such a dialog box, you decide where to put it in blazor, meanwhile hashing the password using a library from ALGOL 60, in VisualStudio, where meets productivity",
                                           "updatedAt":  "2024-01-09T08:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNX2h",
                                           "createdAt":  "2024-01-09T07:43:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "\u003eThis is largely covered by #44636\r\n\r\nLet native development integrate with blazor to build the application of our diverse community.",
                                           "updatedAt":  "2024-01-09T07:43:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Can you please make .NET BLAZOR integrating with c++ webassembly easier?",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50400",
        "createdAt":  "2021-03-30T02:58:15Z",
        "number":  50400,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBlwwKA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elinor-fung",
                                            "createdAt":  "2021-03-30T06:52:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2021-04-01T21:51:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-04-11T17:06:54Z",
        "body":  "I was recently reminded of a JVM flag that is really useful. The flag is `-XX:+PrintFlagsFinal` and it prints out the configuration of the JVM after it has read in all supplied configuration flags and options.\r\n\r\nThe proposal would be to add a new environment variable to dump these settings out at run time. For example, setting `COMPlus_PRINTCONFIG=1` would dump out all of the `COMPlus_` based values:\r\n\r\n```\r\nString values:\r\n                              1234567890 = 123456\r\n          123456789012345678901234567890 = 12345678901234567890\r\n                                     123 = 1234567890123456789012345678901234567890\r\n                                     123 = (null)\r\nInteger values:\r\n                              1234567890 =      123456 (0x0001e240) {default:      123456 (0x0001e240)}\r\n          123456789012345678901234567890 =          -1 (0xffffffff) {default:      123456 (0x0001e240)}\r\n                                     123 =          -1 (0xffffffff) {default:          -1 (0xffffffff)}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMLedCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTg3ODUyMQ==",
                                           "createdAt":  "2021-03-30T03:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Are there any other potential sources of config flags (e.g. json file) that this dump could aggregate as well?",
                                           "updatedAt":  "2021-03-30T03:30:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTg5Mzk5NQ==",
                                           "createdAt":  "2021-03-30T04:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlTudg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-03-30T04:45:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eAre there any other potential sources of config flags (e.g. json file) that this dump could aggregate as well?\r\n\r\nAbsolutely! There are a boat load of options that exist. The [JIT](https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/jitconfigvalues.h) and [GC](https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/gcconfig.h) have many options that are not defined in the [VM](https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/clrconfigvalues.h) list, the configuration knobs contained in `*.runtimeconfig.json` file has options that aren\u0027t captured in this list too. The ones found in `*.runtimeconfig.json` are typically all what we would call \"external\" or publicly supported. However, the VM, JIT, and GC have others that we call \"internal\". These \"internal\" options are used for runtime development purposes and subject to change.\r\n\r\nI think having a way to dump them all out and get an idea on what the current value is and/or its default would be very helpful and make for a more friendly experience in configuring the runtime.",
                                           "updatedAt":  "2021-03-30T18:07:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTkwMzcyOA==",
                                           "createdAt":  "2021-03-30T04:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Everything that gets set via `.runtimeconfig.json` (all properties, not just special ones that the runtime reads) should end up as a [configuration knob](https://github.com/dotnet/runtime/blob/main/src/coreclr/utilcode/configuration.cpp). I think the \u0027external\u0027 (runtimeconfig) options generally also map to an \u0027internal\u0027 option (which gets used if the \u0027external\u0027 option isn\u0027t set).",
                                           "updatedAt":  "2021-03-30T04:45:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTk1NjcwNA==",
                                           "createdAt":  "2021-03-30T06:42:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlZxFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-03-30T16:25:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Show both hex and decimal in parentheses ",
                                           "updatedAt":  "2021-03-30T06:42:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzMzOTY1OQ==",
                                           "createdAt":  "2021-04-11T17:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I investigated this a bit. The WIP branch is at https://github.com/AaronRobinsonMSFT/runtime/tree/runtime_log_config. I\u0027ve been able to reduce the Windows Release build size impact to 12k. I am not sure having this functionality is worth it for the 12k impact at present.",
                                           "updatedAt":  "2021-04-11T17:06:53Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add variable to show configuration values",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50464",
        "createdAt":  "2021-03-31T01:47:07Z",
        "number":  50464,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-06T05:24:24Z",
        "body":  "This is a followup from https://github.com/dotnet/runtime/pull/47420 (unmerged):\r\n\r\n\u003e based on the comments looks like this some leftover legacy loop, ideally we should rethink the full code instead of just continue -\u003e break change. Assume your change was mostly for code readability?\r\n\r\n\u003e Yeah, pretty much. It was flagged by Corverity as code that people will likely read and interpret incorrectly.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMFI0jw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMDY5Mzc3NQ==",
                                           "createdAt":  "2021-03-31T01:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-31T01:47:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Fix misleading contine in do-while loop in ceeload",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51490",
        "createdAt":  "2021-04-19T13:40:21Z",
        "number":  51490,
        "author":  "GeorgeAlexandria",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-13T18:41:51Z",
        "body":  "Hello,\r\n\r\nI try to dynamically create execution code (compiling them by roslyn) and try to resolve assemblies for this code in the separate unloaded `AssemblyLoadContext` in .net5. However, when method from created assembly is invoking by reflection I received `NotSupportedException: Resolving to a collectible assembly is not supported` as one of inner exception `TargetInvocactionException`. Besides, with `AssemblyLoadContext.IsUnloaded=false` is no crash, but context still persist in memory.  \r\n\r\nHere you can find a small test project for repo: [TestExample.zip](https://github.com/dotnet/runtime/files/6336421/TestExample.zip)\r\n\r\nIf I miss something please let me know about it.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORoui4Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjc3NjE2NQ==",
                                           "createdAt":  "2021-04-19T20:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "cc @janvorli ",
                                           "updatedAt":  "2021-04-19T20:50:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDQwNDMzOA==",
                                           "createdAt":  "2021-04-21T22:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I will look into it.",
                                           "updatedAt":  "2021-04-21T22:29:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzczOTgzNg==",
                                           "createdAt":  "2021-04-27T16:23:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I have found that the problem is in using the AppDomain.AssemblyResolve event. \r\n\r\nFor collectible assemblies, you can create your own class derived from the AssemblyLoadContext and override its Load method as follows:\r\n```c#\r\n        internal class TestAssemblyLoadContext : AssemblyLoadContext\r\n        {\r\n            public TestAssemblyLoadContext(string name, bool isCollectible) : base(name, isCollectible)\r\n            {\r\n\r\n            }\r\n\r\n            protected override Assembly Load(AssemblyName assemblyName)\r\n            {\r\n                if (references is not null)\r\n                {\r\n                    foreach (var (key, path) in references)\r\n                    {\r\n                        if (StringComparer.OrdinalIgnoreCase.Equals(key, assemblyName.FullName))\r\n                        {\r\n                            return context.LoadFromAssemblyPath(path);\r\n                        }\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n```\r\n\r\nThen if you change your test by \r\n* removing the `AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;` \r\n* modifying  `context = new AssemblyLoadContext(\"load context\", true);` to `context = new TestAssemblyLoadContext(\"load context\", true);`\r\n\r\nit works as expected.\r\n\r\n",
                                           "updatedAt":  "2021-04-27T16:23:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzk1MDM5Ng==",
                                           "createdAt":  "2021-04-27T21:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GeorgeAlexandria",
                                           "body":  "@janvorli, seems that custom AssemblyLoadContext works as expected, thanks, but what is the problem with AppDomain.AssemblyResolve in the such case? Should this considering as a bug of handling this event when it additionally works with unloaded AssemblyLoadContext (because it isn\u0027t obvious that they can work together or not) or I miss something?",
                                           "updatedAt":  "2021-04-28T19:30:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTIwOTc2Nw==",
                                           "createdAt":  "2021-04-29T12:48:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@vitek-karas do you think we should prevent calling the AppDomain.AssemblyResolve event for assemblies loaded into an AssemblyLoadContext?",
                                           "updatedAt":  "2021-04-29T12:48:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTIzMDIyMA==",
                                           "createdAt":  "2021-04-29T13:18:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBpLX7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2021-04-30T10:19:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e prevent calling the AppDomain.AssemblyResolve event for assemblies loaded into an AssemblyLoadContext\r\n\r\nThat would be a signficant breaking change. `AppDomain.AssemblyResolve` exists for compatibility with .NET Framework. It gets called for all asembly load contexts in .NET Framework.\r\n\r\nWe can look into relaxing the `NotSupportedException: Resolving to a collectible assembly is not supported` check.",
                                           "updatedAt":  "2021-04-29T13:18:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDAxNTYzMA==",
                                           "createdAt":  "2021-04-30T10:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I can only guess why the restriction was added: Since the event is fired for any assembly resolution, it applies to the default load context as well. Resolving a collectible assembly into the default load context (or as a dependency of something in Default) is problematic because it effectively roots the assembly - removing the \"collectible\" option from it really.\r\n\r\nThat said, similar problem is in theory with allowing resolution of collectible assemblies into uncollectible load contexts - I don\u0027t think we block that.\r\n\r\nWe could relax the limitation. Obviously we would have to test this a lot (if it doesn\u0027t break something else somewhere). A downside of that approach would be that debugging unloadability would become even more complicated - a mix of collectible and uncollectible assemblies is problematic. But this problem exists today, we would just make it easier to get there.",
                                           "updatedAt":  "2021-04-30T10:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi6Lh",
                                           "createdAt":  "2022-07-13T18:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "asp-entwickler",
                                           "body":  "I have the same problem",
                                           "updatedAt":  "2022-07-13T18:41:51Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Exception throws while try to resolve assembly to unloaded context ",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52872",
        "createdAt":  "2021-05-17T22:17:12Z",
        "number":  52872,
        "author":  "trampster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7qpgQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "perlun",
                                            "createdAt":  "2024-10-08T20:03:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-29T19:51:40Z",
        "body":  "### Description\r\n\r\nA completely empty .net console project ( public static void Main() {} )produces many Valgrind issues on linux including:\r\n* Use of uninitialised values\r\n* Conditional jumps on uninitialised values\r\n* 60 Bytes definitely lost\r\n\r\nI found this because I was trying to use valgrind to debug an issue with some native (pinvoke) interop. But there where so many .net issues that it was impossible to find the ones from my interop (valgrind stops reporting after it reaches an issue limit)\r\n\r\n[valgrind.log](https://github.com/dotnet/runtime/files/6497158/valgrind.log)\r\n\r\n\r\n\u003e ==122230== Memcheck, a memory error detector\r\n\u003e ==122230== Copyright (C) 2002-2017, and GNU GPL\u0027d, by Julian Seward et al.\r\n\u003e ==122230== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n\u003e ==122230== Command: ./IntegrationTests\r\n\u003e ==122230== \r\n\u003e \r\n\u003e NOTE I have skiped most of the file as it exceeds the 65 k limit on github full file is attached.\r\n\u003e \r\n\u003e ==122230== \r\n\u003e ==122230== Conditional jump or move depends on uninitialised value(s)\r\n\u003e ==122230==    at 0x5CAD289: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C58B652: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5C38BAE9: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5DF2AB6: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C418AA: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5B08830: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C8695A: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5F7165D: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==122230==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==122230== \r\n\u003e ==122230== Use of uninitialised value of size 8\r\n\u003e ==122230==    at 0x5CAD2A5: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C58B652: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5C38BAE9: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5DF2AB6: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C418AA: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5B08830: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C8695A: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5F7165D: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==122230==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==122230== \r\n\u003e ==122230== Use of uninitialised value of size 8\r\n\u003e ==122230==    at 0x5CAD366: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C58B652: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5C38BAE9: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/System.Private.CoreLib.dll)\r\n\u003e ==122230==    by 0x5DF2AB6: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C418AA: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5B08830: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5C8695A: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x5F7165D: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/libcoreclr.so)\r\n\u003e ==122230==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==122230==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==122230== \r\n\u003e ==122230== \r\n\u003e ==122230== HEAP SUMMARY:\r\n\u003e ==122230==     in use at exit: 2,161,722 bytes in 2,482 blocks\r\n\u003e ==122230==   total heap usage: 24,315 allocs, 21,833 frees, 8,585,401 bytes allocated\r\n\u003e ==122230== \r\n\u003e ==122230== LEAK SUMMARY:\r\n\u003e ==122230==    definitely lost: 60 bytes in 1 blocks\r\n\u003e ==122230==    indirectly lost: 0 bytes in 0 blocks\r\n\u003e ==122230==      possibly lost: 6,561 bytes in 20 blocks\r\n\u003e ==122230==    still reachable: 2,155,101 bytes in 2,461 blocks\r\n\u003e ==122230==         suppressed: 0 bytes in 0 blocks\r\n\u003e ==122230== Rerun with --leak-check=full to see details of leaked memory\r\n\u003e ==122230== \r\n\u003e ==122230== Use --track-origins=yes to see where uninitialised values come from\r\n\u003e ==122230== For lists of detected and suppressed errors, rerun with: -s\r\n\u003e ==122230== ERROR SUMMARY: 13735 errors from 908 contexts (suppressed: 0 from 0)\r\n\u003e \r\n\r\n### Configuration\r\n\r\ndotnet --version gives  5.0.203\r\nOS: ubuntu 20.04\r\nInstalled using the .deb\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkb7DVQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjY3ODEwMw==",
                                           "createdAt":  "2021-05-17T22:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-17T22:17:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mjc3ODY0OQ==",
                                           "createdAt":  "2021-05-18T02:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@tmds Was this taken care of by the fixes you made earlier this year?",
                                           "updatedAt":  "2021-05-18T02:34:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjgyMDA5Ng==",
                                           "createdAt":  "2021-05-18T04:40:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@trampster it would be interesting to know the results with the latest 6.0 preview.",
                                           "updatedAt":  "2021-05-18T04:40:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjgyMjUxNQ==",
                                           "createdAt":  "2021-05-18T04:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "There appears to be no .deb (or any other installer) available for linux in the preview https://dotnet.microsoft.com/download/dotnet/6.0",
                                           "updatedAt":  "2021-05-18T04:48:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mjg4NDI1Ng==",
                                           "createdAt":  "2021-05-18T06:26:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@trampster you can download a binary from this website: https://dotnet.microsoft.com/download/dotnet/6.0.\r\n\r\n.NET leaks some \u0027global\u0027 allocated memory, so it is expected to see some definitely lost.\r\nThe uninitialized errors should be fixed.",
                                           "updatedAt":  "2021-05-18T06:26:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzMzNzQ2OQ==",
                                           "createdAt":  "2021-05-18T16:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I haven\u0027t used Valgrind: if we intentionally (?) leak memory on exit, is there an established way to \"baseline\" such intentional leaks, so we can easily spot new issues if they emerge in future?",
                                           "updatedAt":  "2021-05-18T16:39:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzU4NTMyNQ==",
                                           "createdAt":  "2021-05-18T21:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "FYI \u0027definitely lost\u0027 means that that memory was unreachable at program exit, that is that there was no pointer that could reach that memory. (I\u0027m yet to see a good reason to do this on purpose)\r\n\r\nThis is different from \u0027still reachable\u0027 which means there was still a pointer to the memory at program exit, leaving this for the OS to clean up is acceptable.",
                                           "updatedAt":  "2021-05-18T21:49:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzU5MTc1MA==",
                                           "createdAt":  "2021-05-18T21:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "Releasing a product as important as .net with Use of uninitialised values and Conditional jumps on uninitialised values is a big problem.\r\n\r\nIt is errors like these that people exploit to compromise software.\r\n\r\nI would recommend running valgrind in your CI and gating your release on it. It is not acceptable to release with these errors.",
                                           "updatedAt":  "2021-05-18T22:53:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYzMDgwMw==",
                                           "createdAt":  "2021-05-18T23:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "I ran valgrind on .net 6, \r\n\r\nThere are still many \u0027Use of uninitialised values\u0027 and \u0027Conditional jumps on uninitialised values\u0027\r\n\r\nAnd there are more \u0027definitely lost bytes\u0027 \r\n\r\n(Sample from end of log, complete log is attached)\r\n\r\n\u003e ==162133== Use of uninitialised value of size 8\r\n\u003e ==162133==    at 0x5BA3E000: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x5B8912C3: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x55F78A6: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5456DCA: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5310590: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x548CB9A: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x578AFCD: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==162133==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==162133== \r\n\u003e ==162133== Use of uninitialised value of size 8\r\n\u003e ==162133==    at 0x5BA3E006: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x5B8912C3: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x55F78A6: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5456DCA: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5310590: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x548CB9A: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x578AFCD: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==162133==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==162133== \r\n\u003e ==162133== Conditional jump or move depends on uninitialised value(s)\r\n\u003e ==162133==    at 0x54B1D89: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5BA3E022: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x5B8912C3: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x55F78A6: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5456DCA: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5310590: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x548CB9A: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x578AFCD: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==162133==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==162133== \r\n\u003e ==162133== Use of uninitialised value of size 8\r\n\u003e ==162133==    at 0x54B1DA5: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5BA3E022: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x5B8912C3: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x55F78A6: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5456DCA: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5310590: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x548CB9A: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x578AFCD: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==162133==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==162133== \r\n\u003e ==162133== Use of uninitialised value of size 8\r\n\u003e ==162133==    at 0x54B1E66: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5BA3E022: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x5B8912C3: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/System.Private.CoreLib.dll)\r\n\u003e ==162133==    by 0x55F78A6: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5456DCA: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x5310590: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x548CB9A: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x578AFCD: ??? (in /home/daniel/dotnet/shared/Microsoft.NETCore.App/6.0.0-preview.3.21201.4/libcoreclr.so)\r\n\u003e ==162133==    by 0x4868608: start_thread (pthread_create.c:477)\r\n\u003e ==162133==    by 0x4CF7292: clone (clone.S:95)\r\n\u003e ==162133== \r\n\u003e ==162133== \r\n\u003e ==162133== HEAP SUMMARY:\r\n\u003e ==162133==     in use at exit: 2,135,150 bytes in 2,349 blocks\r\n\u003e ==162133==   total heap usage: 16,517 allocs, 14,168 frees, 6,857,844 bytes allocated\r\n\u003e ==162133== \r\n\u003e ==162133== LEAK SUMMARY:\r\n\u003e ==162133==    definitely lost: 140 bytes in 4 blocks\r\n\u003e ==162133==    indirectly lost: 0 bytes in 0 blocks\r\n\u003e ==162133==      possibly lost: 4,719 bytes in 14 blocks\r\n\u003e ==162133==    still reachable: 2,130,291 bytes in 2,331 blocks\r\n\u003e ==162133==         suppressed: 0 bytes in 0 blocks\r\n\u003e ==162133== Rerun with --leak-check=full to see details of leaked memory\r\n\u003e ==162133== \r\n\u003e ==162133== Use --track-origins=yes to see where uninitialised values come from\r\n\u003e ==162133== For lists of detected and suppressed errors, rerun with: -s\r\n\u003e ==162133== ERROR SUMMARY: 12823 errors from 743 contexts (suppressed: 0 from 0)\r\n\r\n\r\n\r\n[dotnet6valgrind.log](https://github.com/dotnet/runtime/files/6504878/dotnet6valgrind.log)\r\n",
                                           "updatedAt":  "2021-05-18T23:23:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYzNTYwNQ==",
                                           "createdAt":  "2021-05-18T23:35:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBrVk-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trampster",
                                                                               "createdAt":  "2021-05-19T01:45:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e\"baseline\" such intentional leaks\r\n\r\ne.g. since [5.0 preview 3](https://github.com/dotnet/runtime/pull/34462#issuecomment-607976280), there are 542 more cond jump cases found in .NET 6 preview 5, when merely running `dotnet new console` (net6: 718, net5: 176)\r\n\r\ni have also noticed platforms taking valgrid reported memleaks seriously and keeping the number to 0 (e.g. llvm/clang does that), no matter how trivial.",
                                           "updatedAt":  "2021-05-18T23:35:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYzODQyMg==",
                                           "createdAt":  "2021-05-18T23:43:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "(BTW, I did not mean to imply it is doing this intentionally, I\u0027m an observer in this issue.)\r\n\r\ncc @GrabYourPitchforks ",
                                           "updatedAt":  "2021-05-18T23:43:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzgxODI4NA==",
                                           "createdAt":  "2021-05-19T07:20:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e A completely empty .net console project ( public static void Main() {} )\r\n\r\nI reported and fixed a few issues here: https://github.com/dotnet/runtime/issues/46905. I just verified these haven\u0027t regressed.\r\n\r\n\u003e I haven\u0027t used Valgrind\r\n\r\nvalgrind didn\u0027t work well on .NET Core before: it didn\u0027t properly handle some code generated by the JIT and crashed. I reported a bug for it: https://bugs.kde.org/show_bug.cgi?id=422174 which got fixed less than a year ago.\r\n\r\n\u003e is there an established way to \"baseline\" such intentional leaks, so we can easily spot new issues if they emerge in future?\r\n\r\nYes, valgrind can do this using \u0027suppression\u0027 files.\r\n\r\n\u003e i have also noticed platforms taking valgrid reported memleaks seriously and keeping the number to 0 (e.g. llvm/clang does that), no matter how trivial.\r\n\r\nI have worked on projects like this too. It is nice when you are in a state where you are at zero and remain at zero.\r\n\r\nWhen there are many existing issues, it\u0027s different. Fixing them is important, but when they don\u0027t cause issues it doesn\u0027t become urgent. It\u0027s a matter of making time and improving things. I intend to make some time for it again.\r\n\r\nIt\u0027s a similar story for Coverity issues.",
                                           "updatedAt":  "2021-05-19T07:20:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQ5NTIzOA==",
                                           "createdAt":  "2021-05-19T21:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "Given that this issue isn\u0027t getting resolved anytime soon, how would you recommend I debug the segfault I\u0027m getting after I pinvoke to some native code.\r\n\r\nThe segfault itself is in .net code (occurs while throwing/handling a .net excetion) but I assume it\u0027s caused by corrupt memory caused by the native code I pinvoked to or by the pinvoke itself. \r\n\r\nValgrind doesn\u0027t help because there is a reporting limit and .net Valgrind issues fill it up before it can get to my native code.",
                                           "updatedAt":  "2021-05-19T21:43:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDU3MzczMQ==",
                                           "createdAt":  "2021-05-19T23:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "To chase down segmentation faults, I\u0027d recommend [installing SOS plugin](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-sos) and running your application under lldb debugger:\r\n```sh\r\n# step0: install lldb from package manager\r\n\r\n# step1: install sos plugin\r\n$ dotnet tool install --global dotnet-sos\r\n$ dotnet-sos install\r\n# also possible to install non- --globally, and also possible to fetch the\r\n# standalone sos binary without the need for dotnet SDK..  see\r\n# github/dotnet/diagnostics repo for details, docs, issues surrounding sos\r\n\r\n# step2: the actual debugging\r\n$ lldb /path/to/dirX/yourapplication arg1 arg2 ..\r\n# in lldb REPL\r\n$ setsymbolserver -directory /path/to/dirX\r\n$ process handle SIGSEGV --notify true --pass true --stop true\r\n$ run\r\n# when sigsegv occurs, these are your friends for analysis:\r\n$ bt # lldb command for backtrace\r\n$ bt --all # lldb command for bt all threads\r\n$ clrstack -a # sos command that reads managed frames and lists managed methods, local variables etc.\r\n```\r\n\r\nto get all symbols properly resolved, `yourapplication.pdb` (for managed debug info), pdb of managed dependency assemblies and `libYouArePInvoking.so.dbg` (native debug symbol file) would need to be present next to their corresponding binaries.\r\n\r\n",
                                           "updatedAt":  "2021-05-19T23:51:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY2Njg5Ng==",
                                           "createdAt":  "2021-05-21T05:35:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "What do I put for the setsymbolserver directory?\r\n\r\nThis is what I get for the backtrace:\r\n\r\n\u003e   * frame #0: 0x00007ffff7a9218b libc.so.6`raise + 203\r\n\u003e     frame #1: 0x00007ffff7a71859 libc.so.6`abort + 299\r\n\u003e     frame #2: 0x00007ffff737216e libcoreclr.so`___lldb_unnamed_symbol15183$$libcoreclr.so + 30\r\n\u003e     frame #3: 0x00007ffff73720bc libcoreclr.so`___lldb_unnamed_symbol15179$$libcoreclr.so + 220\r\n\u003e     frame #4: 0x00007ffff715429d libcoreclr.so`___lldb_unnamed_symbol7947$$libcoreclr.so + 957\r\n\u003e     frame #5: 0x00007ffff7154326 libcoreclr.so`___lldb_unnamed_symbol7948$$libcoreclr.so + 134\r\n\u003e     frame #6: 0x00007ffff70b2b4b libcoreclr.so`___lldb_unnamed_symbol5960$$libcoreclr.so + 539\r\n\u003e     frame #7: 0x00007fff7d8bb7dd\r\n\u003e     frame #8: 0x00007fff7e8e9561\r\n\u003e     frame #9: 0x00007fff7dcf5ffb\r\n\u003e     frame #10: 0x00007ffff71f6ab7 libcoreclr.so`___lldb_unnamed_symbol9785$$libcoreclr.so + 124\r\n\u003e     frame #11: 0x00007ffff70458ab libcoreclr.so`___lldb_unnamed_symbol4377$$libcoreclr.so + 1643\r\n\u003e     frame #12: 0x00007ffff6f18fca libcoreclr.so`___lldb_unnamed_symbol302$$libcoreclr.so + 890\r\n\u003e     frame #13: 0x00007ffff6f19319 libcoreclr.so`___lldb_unnamed_symbol303$$libcoreclr.so + 393\r\n\u003e     frame #14: 0x00007ffff6f57733 libcoreclr.so`___lldb_unnamed_symbol1149$$libcoreclr.so + 627\r\n\u003e     frame #15: 0x00007ffff6f0228d libcoreclr.so`coreclr_execute_assembly + 413\r\n\u003e     frame #16: 0x00007ffff75a0b4a libhostpolicy.so`___lldb_unnamed_symbol134$$libhostpolicy.so + 826\r\n\u003e     frame #17: 0x00007ffff75a0fb1 libhostpolicy.so`___lldb_unnamed_symbol135$$libhostpolicy.so + 49\r\n\u003e     frame #18: 0x00007ffff75a19ed libhostpolicy.so`corehost_main + 173\r\n\u003e     frame #19: 0x00007ffff7800fd2 libhostfxr.so`___lldb_unnamed_symbol182$$libhostfxr.so + 1746\r\n\u003e     frame #20: 0x00007ffff77ff72b libhostfxr.so`___lldb_unnamed_symbol180$$libhostfxr.so + 667\r\n\u003e     frame #21: 0x00007ffff77fbfe4 libhostfxr.so`hostfxr_main_startupinfo + 148\r\n\u003e     frame #22: 0x0000555555564fc5 IntegrationTests`___lldb_unnamed_symbol136$$IntegrationTests + 1045\r\n\u003e     frame #23: 0x00005555555654f0 IntegrationTests`___lldb_unnamed_symbol137$$IntegrationTests + 144\r\n\u003e     frame #24: 0x00007ffff7a730b3 libc.so.6`__libc_start_main + 243\r\n\u003e     frame #25: 0x0000555555558eaa IntegrationTests`___lldb_unnamed_symbol11$$IntegrationTests + 41\r\n\r\nThe CLR stack gives:\r\n\r\n\u003e OS Thread Id: 0x4f5d9 (1)\r\n\u003e         Child SP               IP Call Site\r\n\u003e 00007FFFFFFFCC10 00007ffff7a9218b [HelperMethodFrame: 00007fffffffcc10] \r\n\u003e 00007FFFFFFFCD80 00007FFF7D8BB7DD System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs @ 56]\r\n\u003e     PARAMETERS:\r\n\u003e         this = \u003cno data\u003e\r\n\u003e \r\n\u003e 00007FFFFFFFCD90 00007FFF7D884835 System.Threading.Tasks.Task+\u003c\u003ec.\u003cThrowAsync\u003eb__140_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 1883]\r\n\u003e     PARAMETERS:\r\n\u003e         this = \u003cno data\u003e\r\n\u003e         state = \u003cno data\u003e\r\n\u003e \r\n\u003e 00007FFFFFFFCDA0 00007FFF7DD012D9 Tait.Pttox.Tests.SingleThreadSynchronizationContext.Run(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e) [/home/daniel/Work/hydra-src/apps/Xamarin-PTToX/tests/IntegrationTests/SingleThreadedSynchronizationContext.cs @ 35]\r\n\u003e     PARAMETERS:\r\n\u003e         this (0x00007FFFFFFFCE08) = 0x00007fff480212c0\r\n\u003e         action (0x00007FFFFFFFCE00) = 0x00007fff48074680\r\n\u003e     LOCALS:\r\n\u003e         0x00007FFFFFFFCDF8 = 0x00007fff480746c0\r\n\u003e         0x00007FFFFFFFCDE8 = 0x00007fff4807c3f0\r\n\u003e         0x00007FFFFFFFCDE4 = 0x0000000000000000\r\n\u003e         0x00007FFFFFFFCDE0 = 0x0000000000000000\r\n\u003e         0x00007FFFFFFFCDDC = 0x0000000000000001\r\n\u003e \r\n\u003e 00007FFFFFFFCE20 00007FFF7E8E9561 Tait.Pttox.Tests.PttoxSteps.IChangeGroupsTo(System.String) [/home/daniel/Work/hydra-src/apps/Xamarin-PTToX/tests/IntegrationTests/Steps/PttoxSteps.cs @ 126]\r\n\u003e     PARAMETERS:\r\n\u003e         this (0x00007FFFFFFFCE48) = 0x00007fff48021288\r\n\u003e         groupName (0x00007FFFFFFFCE40) = 0x00007fff4800b170\r\n\u003e     LOCALS:\r\n\u003e         0x00007FFFFFFFCE38 = 0x00007fff48074660\r\n\u003e \r\n\u003e 00007FFFFFFFCE60 00007FFF7DCF5FFB Tait.Pttox.Tests.Program.Main() [/home/daniel/Work/hydra-src/apps/Xamarin-PTToX/tests/IntegrationTests/Program.cs @ 16]\r\n\u003e     LOCALS:\r\n\u003e         0x00007FFFFFFFCE78 = 0x00007fff48021288\r\n\r\nI managed to filter out all the .net valgrind issues using a suppression file, and was able to confirm that our native code isn\u0027t producing any valgrind warnings.  So the problem is either in .net or in our interop code.\r\n\r\nsegfault happens in .net code while raising/handling an exception, but only if I have done the pinvoke first. ",
                                           "updatedAt":  "2021-05-21T05:54:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY3OTIzOQ==",
                                           "createdAt":  "2021-05-21T06:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I have never seen that one. If you installed dotnet-sdk from package manager, then simply unset DOTNET_ROOT environment variable and it should work fine.\r\n\r\n\u003e What do I put for the setsymbolserver directory?\r\n\r\nAbsolute path to the directory that contains your application\u0027s PDB file(s). But you can skip setsymbolserver if yours is not a singlefile application.",
                                           "updatedAt":  "2021-05-21T06:04:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY4MzAwNw==",
                                           "createdAt":  "2021-05-21T06:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "@am11 That fixed the warning.\r\n\r\nAny idea why my backtrace has unnamed symbol instead of anything useful?",
                                           "updatedAt":  "2021-05-21T06:11:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY4NjYxNw==",
                                           "createdAt":  "2021-05-21T06:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e ___lldb_unnamed_symbol\r\n\r\nLooks like SOS didn\u0027t downloaded the symbols when you first ran lldb. It downloads the symbols when we first launch the app. Probably timed out. You can manually do that using another tool:\r\n\r\n```sh\r\n$ dotnet tool install --global dotnet-symbol\r\n$ dotnet-symbol $(command -v dotnet)\r\n# assuming you are on ubuntu and you have installed dotnet from package manager\r\n$ dotnet-symbol /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/*.so\r\n```\r\nit will download symbols for `dotnet(1)` and all the shared object files for 5.0.6. You can adjust the paths based on your installation accordingly. End result would be you will have libcoreclr.so.dbg (native symbols file) placed next to libcoreclr.so in your installation directory. Same goes for rest of the .so files.",
                                           "updatedAt":  "2021-05-21T06:21:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY4NzYzOA==",
                                           "createdAt":  "2021-05-21T06:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "dotnet install --global dotnet-symbol\r\n\r\nCould not execute because the specified command or file was not found.\r\nPossible reasons for this include:\r\n  * You misspelled a built-in dotnet command.\r\n  * You intended to execute a .NET program, but dotnet-install does not exist.\r\n  * You intended to run a global tool, but a dotnet-prefixed executable with this name could not be found on the PATH.",
                                           "updatedAt":  "2021-05-21T06:20:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY4ODM3MA==",
                                           "createdAt":  "2021-05-21T06:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Typo",
                                           "updatedAt":  "2021-05-21T06:22:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY5MDI0OA==",
                                           "createdAt":  "2021-05-21T06:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "ERROR: Access to the path \u0027/usr/bin/dotnet.dbg\u0027 is denied. -\u003e Permission denied\r\n\r\nDo I need to be root, (doesn\u0027t seem like a good idea)",
                                           "updatedAt":  "2021-05-21T06:25:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTY5Njc5Mw==",
                                           "createdAt":  "2021-05-21T06:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "You can skip dotnet(1) if you don\u0027t care about corehost (driver that initializes coreclr). However, for /usr/share/dotnet/shared/Microsoft.NETCore.App/5.0.6/, you may want to chown (change ownership) of that directory to your user if you aren\u0027t comfortable with sudo. It downloads ._debug files from dotnet symstore blobs in a store temp location, then renames them to .dbg to the location next to the binaries. If it times out, you can pass `--timeout 20` (unit is minutes) to dotnet-symbol command.",
                                           "updatedAt":  "2021-05-21T06:37:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjYzMDU3MA==",
                                           "createdAt":  "2021-05-23T22:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trampster",
                                           "body":  "I have the native backtrace as expected it is handling the exception when it dies:\r\n```\r\n(lldb) bt\r\n\r\n\u003e * thread #1, name = \u0027IntegrationTest\u0027, stop reason = signal SIGABRT\r\n\u003e   * frame #0: 0x00007ffff7a9218b libc.so.6`raise + 203\r\n\u003e     frame #1: 0x00007ffff7a71859 libc.so.6`abort + 299\r\n\u003e     frame #2: 0x00007ffff737216e libcoreclr.so`::PROCAbort() at process.cpp:3473:5\r\n\u003e     frame #3: 0x00007ffff73720bc libcoreclr.so`PROCEndProcess(hProcess=\u003cunavailable\u003e, uExitCode=\u003cunavailable\u003e, bTerminateUnconditionally=\u003cunavailable\u003e) at process.cpp:1473:13\r\n\u003e     frame #4: 0x00007ffff715429d libcoreclr.so`UnwindManagedExceptionPass1(ex=\u003cunavailable\u003e, frameContext=\u003cunavailable\u003e) at exceptionhandling.cpp:0\r\n\u003e     frame #5: 0x00007ffff7154326 libcoreclr.so`DispatchManagedException(ex=0x00007fffffffcd40, isHardwareException=\u003cunavailable\u003e) at exceptionhandling.cpp:4686:17\r\n\u003e     frame #6: 0x00007ffff70b2b4b libcoreclr.so`IL_Throw(obj=\u003cunavailable\u003e) at jithelpers.cpp:4195:5\r\n\u003e     frame #7: 0x00007fff7d8fb7dd\r\n\u003e     frame #8: 0x00007fff7f0dbc31\r\n\u003e     frame #9: 0x00007fff7dd35ffb\r\n\u003e     frame #10: 0x00007ffff71f6ab7 libcoreclr.so`CallDescrWorkerInternal at unixasmmacrosamd64.inc:838\r\n\u003e     frame #11: 0x00007ffff70458ab libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) at callhelpers.cpp:68:5\r\n\u003e     frame #12: 0x00007ffff7045850 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=\u003cunavailable\u003e, pArguments=0x00007fffffffd130, pReturnValue=0x0000000000000000, cbReturnValue=0) at callhelpers.cpp:544\r\n\u003e     frame #13: 0x00007ffff6f18fca libcoreclr.so`RunMain(MethodDesc*, short, int*, PtrArray**) [inlined] MethodDescCallSite::Call(this=0x00007fffffffd198, pArguments=0x00007fffffffd130) at callhelpers.h:458:9\r\n\u003e     frame #14: 0x00007ffff6f18fc1 libcoreclr.so`RunMain(MethodDesc*, short, int*, PtrArray**) at assembly.cpp:1464\r\n\u003e     frame #15: 0x00007ffff6f18e4a libcoreclr.so`RunMain(MethodDesc*, short, int*, PtrArray**) [inlined] RunMain(this=\u003cunavailable\u003e, pParam=\u003cunavailable\u003e)::$_0::operator()(Param*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at assembly.cpp:1536\r\n\u003e     frame #16: 0x00007ffff6f18e4a libcoreclr.so`RunMain(MethodDesc*, short, int*, PtrArray**) at assembly.cpp:1538\r\n\u003e     frame #17: 0x00007ffff6f18e37 libcoreclr.so`RunMain(pFD=\u003cunavailable\u003e, numSkipArgs=1, piRetVal=\u003cunavailable\u003e, stringArgs=\u003cunavailable\u003e) at assembly.cpp:1538\r\n\u003e     frame #18: 0x00007ffff6f19319 libcoreclr.so`Assembly::ExecuteMainMethod(this=0x00005555557bfaa0, stringArgs=0x00007fffffffd580, waitForOtherThreads=YES) at assembly.cpp:1648:18\r\n\u003e     frame #19: 0x00007ffff6f57733 libcoreclr.so`CorHost2::ExecuteAssembly(this=\u003cunavailable\u003e, dwAppDomainId=\u003cunavailable\u003e, pwzAssemblyPath=u\"/home/daniel/Work/hydra-src/apps/Xamarin-PTToX/tests/IntegrationTests/bin/Debug/net5.0/IntegrationTests.dll\", argc=\u003cunavailable\u003e, argv=0x0000000000000000, pReturnValue=0x00007fffffffd6e0) at corhost.cpp:384:39\r\n\u003e     frame #20: 0x00007ffff6f0228d libcoreclr.so`::coreclr_execute_assembly(hostHandle=0x00005555557c96f0, domainId=1, argc=\u003cunavailable\u003e, argv=0x0000000000000000, managedAssemblyPath=\u003cunavailable\u003e, exitCode=0x00007fffffffd6e0) at unixinterface.cpp:431:24\r\n\u003e     frame #21: 0x00007ffff75a0b4a libhostpolicy.so`run_app_for_context(context=\u003cunavailable\u003e, argc=\u003cunavailable\u003e, argv=0x0000000000000000) at hostpolicy.cpp:240:32\r\n\u003e     frame #22: 0x00007ffff75a0fb1 libhostpolicy.so`run_app(argc=0, argv=0x00007fffffffdce0) at hostpolicy.cpp:275:12\r\n\u003e     frame #23: 0x00007ffff75a19ed libhostpolicy.so`::corehost_main(argc=\u003cunavailable\u003e, argv=0x00007fffffffdcd8) at hostpolicy.cpp:408:12\r\n\u003e     frame #24: 0x00007ffff7800fd2 libhostfxr.so`___lldb_unnamed_symbol182$$libhostfxr.so + 1746\r\n\u003e     frame #25: 0x00007ffff77ff72b libhostfxr.so`___lldb_unnamed_symbol180$$libhostfxr.so + 667\r\n\u003e     frame #26: 0x00007ffff77fbfe4 libhostfxr.so`hostfxr_main_startupinfo + 148\r\n\u003e     frame #27: 0x0000555555564fc5 IntegrationTests`___lldb_unnamed_symbol136$$IntegrationTests + 1045\r\n\u003e     frame #28: 0x00005555555654f0 IntegrationTests`___lldb_unnamed_symbol137$$IntegrationTests + 144\r\n\u003e     frame #29: 0x00007ffff7a730b3 libc.so.6`__libc_start_main + 243\r\n\u003e     frame #30: 0x0000555555558eaa IntegrationTests`___lldb_unnamed_symbol11$$IntegrationTests + 41\r\n```",
                                           "updatedAt":  "2021-05-24T02:41:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjY5MjM4MQ==",
                                           "createdAt":  "2021-05-24T02:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@trampster I edited your post to add triple back ticks (`) above and below to format it.",
                                           "updatedAt":  "2021-05-24T02:42:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PGEVf",
                                           "createdAt":  "2024-10-08T20:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "For reference, this is still an issue with .NET 8 (seen in my GitLab pipeline here: https://gitlab.perlang.org/perlang/perlang/-/jobs/264). Haven\u0027t tested with .NET 9 yet but unless some effort has been put into resolving this, I would doubt that the problems have magically gone away.\r\n\r\n\u003e Yes, valgrind can do this using \u0027suppression\u0027 files.\r\n\r\nI think this :point_up: would be the way to go. In fact, providing a set of suppression files would be very useful since (I guess) those could also be used by us who are more \"consumers\" of the platform than actually developing it. It means we could still use valgrind _for our own code_ (particularly related to P/Invoke and such where it becomes relevant), suppressing the \"false positives\" that have nothing to do with the particular problems we are debugging.\r\n\r\nHaving that said, the current state is not \"incredibly bad\". Valgrind can still be used with .NET (as long as you add the `COMPlus_GCHeapHardLimit=C800000` environment variable), but you can perhaps not get the full value out of it because you can\u0027t really enable all the leak checking.\r\n\r\n(_Edit_: If you just want to get rid of the \"still reachable\" warnings, I think that `--show-reachable=no` could be of help. Not an advanced Valgrind user myself, it\u0027s just helpful when working (wrestling) with unmanaged C++ code. :see_no_evil:)",
                                           "updatedAt":  "2024-10-08T20:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PGGdx",
                                           "createdAt":  "2024-10-08T20:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "(btw, please someone fix the typo in the issue title. :slightly_smiling_face:)",
                                           "updatedAt":  "2024-10-08T20:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PGNAl",
                                           "createdAt":  "2024-10-08T20:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1dpAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "kasperk81",
                                                                               "createdAt":  "2024-10-08T22:10:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "perlun",
                                                                               "createdAt":  "2024-10-09T19:01:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "@perlun for one, `Mismatched free()` count is 0 with dotnet9/10 builds. :)\r\n\r\nOn linux-musl-arm64, here is the summary:\r\n\u003cins\u003e8.0.403\u003c/ins\u003e: ==2155== ERROR SUMMARY: 26058 errors from 756 contexts (suppressed: 0 from 0)\r\n\u003cins\u003e10.0.100-alpha.1.24508.1\u003c/ins\u003e: ==1874== ERROR SUMMARY: 15087 errors from 968 contexts (suppressed: 0 from 0)\r\n\r\nstill things to improve, but overall, things are improving on this front.\r\n\r\n\u003e `COMPlus_GCHeapHardLimit=C800000`\r\n\r\nnit: slightly better `DOTNET_GCHeapHardLimit=C800000` since COMPlus_ prefix is legacy.",
                                           "updatedAt":  "2024-10-08T20:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PPW4_",
                                           "createdAt":  "2024-10-09T19:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1e2nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-10-09T21:39:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "perlun",
                                           "body":  "\u003e still things to improve, but overall, things are improving on this front.\n\nNice to hear that @am11! 🥇 👍 Much appreciated. Do we even run Valgrind in CI perhaps?\n\n(and thanks for the `DOTNET_GCHeapHardLimit` suggestion too. 🙇 The COMPlus approach was something I learned from https://github.com/dotnet/runtime/issues/76986#issuecomment-1420014949 I think)",
                                           "updatedAt":  "2024-10-09T19:14:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQiV_",
                                           "createdAt":  "2024-10-09T21:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD10ooQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "perlun",
                                                                               "createdAt":  "2024-10-12T05:39:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "perlun",
                                                                               "createdAt":  "2024-10-12T05:39:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Do we even run Valgrind in CI perhaps?\n\nWe don\u0027t currently run Valgrind in CI because the system is at its limit. However, @janvorli and others occasionally review Valgrind reports manually.\n\nTo resolve symbols for Valgrind, you can use the `dotnet-symbol` tool:\n\n```sh\n$ dotnet tool install --global dotnet-symbol\n$ dotnet-symbol --timeout 20 docs/examples/quickstart/hello_world.per\n$ dotnet-symbol --timeout 20 src/Perlang.ConsoleApp/bin/Debug/net8.0/perlang\n\n# Now, run Valgrind with the following command:\n$ DOTNET_GCHeapHardLimit=C800000 valgrind --undef-value-errors=no \\\n    --error-exitcode=1 --leak-check=full --show-leak-kinds=all \\\n    src/Perlang.ConsoleApp/bin/Debug/net8.0/perlang docs/examples/quickstart/hello_world.per\n```\n\nThis will report issues like:\n\n```\n==16620== Use of uninitialized value of size 8\n==16620==    at 0x5E1380: RawSetMethodTable (src/coreclr/vm/object.h:148)\n==16620==    by 0x5E1380: SetMethodTable (src/coreclr/vm/object.h:154)\n==16620==    by 0x5E1380: JIT_NewS_MP_FastPortable(CORINFO_CLASS_STRUCT_*) (src/coreclr/vm/jithelpers.cpp:1237)\n```\n\nand\n\n```\n==16620== Conditional jump or move depends on uninitialized value(s)\n==16620==    at 0x5E1EB4: JIT_NewArr1VC_MP_FastPortable(CORINFO_CLASS_STRUCT_*, long) (src/coreclr/vm/jithelpers.cpp:1467)\n```\n\nIt seems like these type of warnings are related to JIT helper calls in the execution engine (EE), and something in the EE-to-JIT transition isn\u0027t fully complying to Valgrind\u0027s expectations.\n",
                                           "updatedAt":  "2024-10-09T21:39:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PjU92",
                                           "createdAt":  "2024-10-12T05:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD10uVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-10-12T06:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "perlun",
                                           "body":  "Thanks again @am11, for taking your time to go into detail about my use case like this! 🙇 Beyond expectations. 🌟 (Not sure the `dotnet-symbol --timeout 20 docs/examples/quickstart/hello_world.per` will work though, because this is the source code for a Perlang program and not a \"normal\" .NET binary? But your comment is useful anyway and might help others. 👍)",
                                           "updatedAt":  "2024-10-12T05:46:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RvsNV",
                                           "createdAt":  "2024-10-29T19:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "\u003e still things to improve, but overall, things are improving on this front.\n\nFor reference, here\u0027s the [Valgrind suppression file](https://valgrind.org/docs/manual/manual-core.html#manual-core.suppress) I added to my project for now: https://gitlab.perlang.org/perlang/perlang/-/blob/21ab6e771e171e0410f0b61c5d6377e09a583e3e/scripts/valgrind-suppressions.txt. This makes it possible for me to Valgrind-check my C++-based shared library, being called from a C# executable, without false positives unrelated to my own code base. 🎉 \n\nIn case anyone else is working on a similar project, feel free to use it as you wish. Use `--suppressions=/path/to/file.supp` in the Valgrind command line to enable an additional suppression file (Valgrind provides some default suppressions, located in `/usr/libexec/valgrind/default.supp` on my system). You can also use `--gen-suppressions=yes` to generate suppressions automatically for a program being executed (and then just copy those suppressions into your suppression file).",
                                           "updatedAt":  "2024-10-29T19:51:39Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "Many Valgrind Issues on linux",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53493",
        "createdAt":  "2021-05-31T09:09:26Z",
        "number":  53493,
        "author":  "NMSAzulX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-06T12:34:44Z",
        "body":  "## Background and Motivation\r\n\r\nI have encountered some thorny situations that cannot be uninstalled: \r\n1. Dynamically generating Controller. in Asp.netCore. \r\n2. A class library that uses AppDomain events.\r\n3. Use Autofac as the WEB framework of DI.\r\n\r\nCan the official provide a method that allows an object to be marked if it is referenced? When GC occurs, the object is forcibly recycled. (remove reference). Or forcibly empty the memory where it is located.\r\n\r\n\u003e Since the uninstall is manual, developers should know when to use this API.\r\n\r\n## Proposed API\r\n\r\n```C#\r\ndefaultDomain.Foo = myDomain.Bar;\r\nmyDomain.Bar.Collect( CollectionOptions.NextGC );\r\n\r\n//GCing.......\r\nAssert.IsDefault(defaultDomain.Fool); // true\r\n```\r\n\r\n## Usage Examples\r\n\r\n\r\n## Alternative Designs\r\n\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\n## Risks\r\n\r\n\u003e Although this is a bit inappropriate, I would like to talk about the future Internet architecture will be dominated by dynamic logic and configuration files.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOScvCTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM0NTEzMw==",
                                           "createdAt":  "2021-05-31T09:09:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-31T09:09:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM2ODQ1Nw==",
                                           "createdAt":  "2021-05-31T09:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "I don\u0027t understand what you\u0027re asking for. If you\u0027re talking about unloading app domains, then .Net Core/.Net 5+ has only one, so it doesn\u0027t make sense to unload that. If you want to unload an assembly, you can use [`AssemblyLoadContext`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.loader.assemblyloadcontext?view=net-5.0\u0026WT.mc_id=DOP-MVP-5002735) for that. Have you looked into that?",
                                           "updatedAt":  "2021-05-31T09:47:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM2OTk1OA==",
                                           "createdAt":  "2021-05-31T09:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "@svick i think what they\u0027re asking is an API to force free (\"GC\") an object that is otherwise being kept alive by being subscribed to event handlers (on `AppDomain` specifically).",
                                           "updatedAt":  "2021-05-31T09:49:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM3MDEyMQ==",
                                           "createdAt":  "2021-05-31T09:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "If you\u0027re asking for a way to forcibly GC an object, can you explain why exactly do you need that and why other alternative approaches are not sufficient?",
                                           "updatedAt":  "2021-05-31T09:49:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM3MjY2NQ==",
                                           "createdAt":  "2021-05-31T09:54:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@Suchiman In that case, I would ask: Why can\u0027t you unsubscribe that handler? If it\u0027s because code that you need and can\u0027t modify does something that you don\u0027t want, then I would suggest the usual .Net approach for that kind of situation: use reflection.",
                                           "updatedAt":  "2021-05-31T09:54:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTM4ODA4Nw==",
                                           "createdAt":  "2021-05-31T10:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Strongly listening static event is a common pattern of managed memory leak. In this case they should be adjusted to use weak event pattern.",
                                           "updatedAt":  "2021-05-31T10:19:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTQwODY3MA==",
                                           "createdAt":  "2021-05-31T11:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@svick Yes,  I aready use ALC long long ago. ",
                                           "updatedAt":  "2021-05-31T11:00:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTQxMTE2OQ==",
                                           "createdAt":  "2021-05-31T11:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@svick @Suchiman https://github.com/dotnet/runtime/issues/13323#issuecomment-535937611",
                                           "updatedAt":  "2021-05-31T11:04:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTQyMDI5Mw==",
                                           "createdAt":  "2021-05-31T11:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "@NMSAzulX the code to hack this with reflection would look something like\r\n```csharp\r\nvar pExit = typeof(AppContext).GetField(nameof(AppContext.ProcessExit), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);\r\nvar del = ((Delegate)pExit?.GetValue(null))?.GetInvocationList().FirstOrDefault(x =\u003e x.Method.Name == \"EnsureClearingPools\");\r\nif (del != null)\r\n{\r\n    AppContext.ProcessExit -= (EventHandler)del;\r\n}\r\n```\r\nand then the same again for `DomainUnload`",
                                           "updatedAt":  "2021-05-31T11:21:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTQyMzY2MA==",
                                           "createdAt":  "2021-05-31T11:26:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@Suchiman  Thank you!   And https://github.com/dotnet/aspnetcore/issues/21906 to asp.net core.",
                                           "updatedAt":  "2021-05-31T11:26:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTU5NzQ2OQ==",
                                           "createdAt":  "2021-05-31T16:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nI have encountered some thorny situations that cannot be uninstalled: \r\n1. Dynamically generating Controller. in Asp.netCore. \r\n2. A class library that uses AppDomain events.\r\n3. Use Autofac as the WEB framework of DI.\r\n\r\nCan the official provide a method that allows an object to be marked if it is referenced? When GC occurs, the object is forcibly recycled. (remove reference). Or forcibly empty the memory where it is located.\r\n\r\n\u003e Since the uninstall is manual, developers should know when to use this API.\r\n\r\n## Proposed API\r\n\r\n```C#\r\ndefaultDomain.Foo = myDomain.Bar;\r\nmyDomain.Bar.Collect( CollectionOptions.NextGC );\r\n\r\n//GCing.......\r\nAssert.IsDefault(defaultDomain.Fool); // true\r\n```\r\n\r\n## Usage Examples\r\n\r\n\r\n## Alternative Designs\r\n\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\n## Risks\r\n\r\n\u003e Although this is a bit inappropriate, I would like to talk about the future Internet architecture will be dominated by dynamic logic and configuration files.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNMSAzulX\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-31T16:56:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjQ1ODc3Mg==",
                                           "createdAt":  "2021-06-01T21:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFG7Iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-12-03T09:46:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "changing the label to VM - it would be up to the VM to remove references to objects if it wants objects to be considered reclaimable by the GC (without causing any functional problems).",
                                           "updatedAt":  "2021-06-01T21:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48HHBp",
                                           "createdAt":  "2022-01-10T02:31:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "Is this issue already being processed?",
                                           "updatedAt":  "2022-01-10T02:31:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JyF0L",
                                           "createdAt":  "2022-09-06T09:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@Maoni0  How\u0027s the progress? :)",
                                           "updatedAt":  "2022-09-06T09:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jy8JN",
                                           "createdAt":  "2022-09-06T12:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I think you mean @mangod9 ",
                                           "updatedAt":  "2022-09-06T12:34:44Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  " Proposed API : Make it convenient and feasible to unload the domain.",
        "labels":  [
                       "api-suggestion",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54267",
        "createdAt":  "2021-06-16T09:26:18Z",
        "number":  54267,
        "author":  "chrfin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-06T06:23:24Z",
        "body":  "We have an embedded system (Variscite DART-MX8M-MINI) running our own Linux-build based on a kernel from Debian Bullseye (5.4.3-g0267163-dirty SMP PREEMPT aarch64).\r\n\r\n.NET Core and the SDK run fine on that system, BUT whenever we start any .NET program (including e.g. **`dotnet --info`**) we get the following output at the beginning:\r\n\r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)  \r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)  \r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)  \r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)  \r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)  \r\n\u003e dotnet: /lib64/libstdc++.so.6: no version information available (required by dotnet)\r\n\r\nAll programs work fine afterwards.\r\n\r\nSearching for this error we think this is related to different library-versions in the toolchains (cross-)compiling `dotnet` and our image.\r\n\r\nIs there a way to get rid of these warnings without using the same toolchain (as this is not possible in our case)?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM2QraA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjIwMjcyOA==",
                                           "createdAt":  "2021-06-16T09:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-16T09:26:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "\"/lib64/libstdc++.so.6: no version information available\" running on custom linux with kernel 5.4.3 on ARM64",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55697",
        "createdAt":  "2021-07-15T00:47:50Z",
        "number":  55697,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T17:16:47Z",
        "body":  "The unloadability features in runtime don\u0027t track the lifetime of the shuffle thunks or the related delegate classes (looks like it happens only for delegates pointing to static methods) and when I have attempted to allocate them from the stub heap of the respective collectible loader allocator, they ended up being used after the loader allocator was destroyed and their underlying memory unmapped. That obviously resulted in crashes.\r\n\r\nWe should figure out how to track then in a way that would keep the loader allocator alive until all the shuffle thunks belonging to that allocator are destroyed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh84_cQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDMwNDA5NA==",
                                           "createdAt":  "2021-07-15T00:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-15T00:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ivEqw",
                                           "createdAt":  "2023-07-29T01:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli doesnt feel like this is critical for 8? ",
                                           "updatedAt":  "2023-07-29T01:25:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hzj9x",
                                           "createdAt":  "2024-08-09T17:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The fix is reverted in #106072. The crashes resurfaced https://github.com/dotnet/runtime/pull/106072#issuecomment-2278350065",
                                           "updatedAt":  "2024-08-09T17:47:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Problem with shuffle thunks tracking in collectible AssemblyLoaderAllocator",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56110",
        "createdAt":  "2021-07-17T07:37:03Z",
        "number":  56110,
        "author":  "longnvht",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:33:14Z",
        "body":  "I have successfully installed dotnet SDK. And was able to run the commands \"dotnet --version\", \"dotnet --list-sdks\", \"dotnet --list-runtimes\"... But when I run any of the commands in the SDK command group like: new, clean, build, test ... all get the error message \"terminated by signal SIGSEGV (Address boundary error)\" (ex: fish: Job 1, \u0027dotnet new console\u0027 terminated by signal SIGSEGV (Address boundary) error))\r\nPlease help me fix this error. I am using Garuda and Fish terminal.\r\n\r\n![Screenshot_1](https://user-images.githubusercontent.com/15057890/126060140-b7393c66-0f29-4937-a808-ef84ec97acbc.png)\r\n\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 8cc2e9c2-f333-f6a1-064e-790d950b684c\r\n* Version Independent ID: 25a4c9b9-2808-e296-df03-5837000dcbad\r\n* Content: [Create a .NET console application using Visual Studio Code - .NET](https://docs.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code)\r\n* Content Source: [docs/core/tutorials/with-visual-studio-code.md](https://github.com/dotnet/docs/blob/main/docs/core/tutorials/with-visual-studio-code.md)\r\n* Product: **dotnet-fundamentals**\r\n* GitHub Login: @tdykstra\r\n* Microsoft Alias: **tdykstra**",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONNtpjA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40nF4Y",
                                           "createdAt":  "2021-07-19T15:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tdykstra",
                                           "body":  "@adegeo Does this look like a Linux installation problem?",
                                           "updatedAt":  "2021-07-19T15:56:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nSSJ",
                                           "createdAt":  "2021-07-19T17:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adegeo",
                                           "body":  "I have terminal envy.... \r\n\r\nThis is some sort dependency problem. It would be easier to investigate via an issue in the SDK repo and then if there is a doc update, file something here. I\u0027ll transfer it.",
                                           "updatedAt":  "2021-07-19T17:09:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nSXU",
                                           "createdAt":  "2021-07-19T17:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-07-19T17:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uFEQ",
                                           "createdAt":  "2021-07-21T20:57:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-21T20:57:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4022mM",
                                           "createdAt":  "2021-07-26T15:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "since this is failing on a specific distro, will move to .net 7. ",
                                           "updatedAt":  "2021-07-26T15:17:45Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Error \"terminated by signal SIGSEGV (Address boundary error)\" when run dotnet SDK command",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55964",
        "createdAt":  "2021-07-19T20:56:24Z",
        "number":  55964,
        "author":  "msallin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCp9onQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "athinboy",
                                            "createdAt":  "2021-07-20T01:23:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "riedd2",
                                            "createdAt":  "2021-07-20T03:58:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BEagle1984",
                                            "createdAt":  "2021-07-20T07:22:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "igorgiovannini",
                                            "createdAt":  "2021-07-22T12:11:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2021-07-30T13:29:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjeanrichard",
                                            "createdAt":  "2021-08-03T09:57:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardo-vp",
                                            "createdAt":  "2022-08-03T19:46:08Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-07-10T21:52:19Z",
        "body":  "We run Jenkins slaves inside a Docker containers. As we figured out, they have a low pids_limit set, which caused or unit tests to fail.\r\n\r\nHowever, they failed with an out of memory exception, which let us waste a lot of time searching for the cause. We only discovered this pids_limit as cause because or friends from the Java development team had the same problem and they got a more descriptive error message from the runtime \"unable to create native thread: possibly out of memory or process/resource limits reached\".\r\n\r\nCan this be improved for the dotnet runtime?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYuEfjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40n0VY",
                                           "createdAt":  "2021-07-19T20:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-19T20:56:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ivEtO",
                                           "createdAt":  "2023-07-29T01:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli is this fixed as part of your logging changes early in 8? ",
                                           "updatedAt":  "2023-07-29T01:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i4R-O",
                                           "createdAt":  "2023-07-31T18:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@mangod9 no, this was not fixed yet.",
                                           "updatedAt":  "2023-07-31T18:21:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "OutOfMemory Exception thrown on low pids_limit",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56213",
        "createdAt":  "2021-07-23T13:59:45Z",
        "number":  56213,
        "author":  "mmurrell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3esWg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2021-07-23T14:06:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Hellevar",
                                            "createdAt":  "2021-07-23T16:49:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "GrabYourPitchforks",
                                            "createdAt":  "2021-07-23T18:54:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdesanty",
                                            "createdAt":  "2021-07-23T20:31:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "vcsjones",
                                            "createdAt":  "2021-07-23T22:59:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "nathan-moore",
                                            "createdAt":  "2021-07-24T03:27:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "InCerryGit",
                                            "createdAt":  "2021-07-27T02:27:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NMSAzulX",
                                            "createdAt":  "2021-07-27T02:34:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenLampson",
                                            "createdAt":  "2021-07-27T02:56:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "windsOne",
                                            "createdAt":  "2021-07-27T06:30:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "hez2010",
                                            "createdAt":  "2021-07-27T07:30:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "NMSAzulX",
                                            "createdAt":  "2021-07-27T07:35:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "jkotas",
                                            "createdAt":  "2021-07-27T10:24:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "jlchavez",
                                            "createdAt":  "2021-07-29T22:22:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "athinboy",
                                            "createdAt":  "2021-08-05T02:15:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2021-08-20T12:26:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "smj389",
                                            "createdAt":  "2022-01-28T22:47:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "conorlawton",
                                            "createdAt":  "2023-09-27T12:15:47Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "yiyuezhuo",
                                            "createdAt":  "2024-04-25T12:45:11Z"
                                        }
                                    ],
                          "totalCount":  19
                      },
        "updatedAt":  "2023-05-23T19:56:18Z",
        "body":  "### Background and motivation\n\nIt would be nice if the framework supported a way to dynamically replace a method body of an instance of an object,at runtime.  I can think of several cases where a pattern like this could be leveraged, but the primary use case for me would support test automation.  \r\n\r\nAs an example, say I\u0027d like to test a class that has multiple dependencies:\r\n```C#\r\npublic class SystemUnderTest \r\n{ \r\n    private Checker _checker;  // Initialized by constructor, omitted for brevity\r\n    private Doer _doer;\r\n    public void DoTheRightThing() \r\n    { \r\n        if(_checker.Check()) \r\n            Doer.DoA(); \r\n        else \r\n            Doer.DoB(); \r\n    } \r\n}\r\n```\r\nThe predominant seam for isolating the SUT from the dependencies would be to litter interfaces throughout the code (`IChecker` and `IDoer`).  This is fine in the naive case, but in larger projects this causes a proliferation of single-use interfaces.  If the framework supported replacing method bodies, one could simply create a new `Checker` object and replace `Check()` with `return true` or `return false`, and replace `DoA()` with an assertion to pass or fail. \r\n\r\nThis concept is not novel and already exists in other frameworks (eg Ruby).  Also, proving the demand for such an extension, there are commercial offerings which use proprietary techniques to accomplish a similar goal, but these are expensive, complex, and fragile.  I believe these attach to the CLR Profiler to intercept method invocation, but I\u0027m probably wrong...\n\n### API Proposal\n\nI would like to propse the API should support a reflection option where a method body could be replaced at the instance level of an object with a delegate of matching signature:\r\n\r\n```C#\r\nFunc\u003cbool\u003e returnsTrue = () =\u003e { return true; }\r\nvar method = typeof(Checker).GetMethod(nameof(Checker.Check));\r\n\r\n//Proposed functionality\r\nmethod.ReplaceBody(instance, returnsTrue);\r\n```     \r\n\n\n### API Usage\n\nExtending the testing example above, the API could be used as follows.\r\n```C#\r\n[TestMethod]\r\npublic void Test()\r\n{\r\n   var checker = new Checker();\r\n   typeof(Checker).GetMethod(\"Check\").ReplaceBody(checker, () =\u003e return false);\r\n   \r\n   var doer = new Doer();\r\n   typeof(Doer).GetMethod(\"DoA\").ReplaceBody(doer, () =\u003e Assert.Pass());\r\n   typeof(Doer).GetMethod(\"DoB\").ReplaceBody(doer, () =\u003e Assert.Fail());\r\n\r\n    var sut = new SystemUnderTest(checker, doer);\r\n    sut.DoTheRightThing();\r\n}\r\n```     \r\n\n\n### Risks\n\nWhile there are risks of application instability, I\u0027d suggest those are owned by the developer.  Although my perspective is limited, I believe this would offer no greater risk than a developer writing poor code using Reflection.Emit.\r\n\r\nThe larger risk, in my mind is the security risk associated with letting users replace random methods.  There are a few options here for mitigation, but I would hope that this could be mitigated by an attribute allowing a user to opt-in or opt-out of having their methods replaced.  Microsoft may choose to opt-out all System assemblies by default, opting-in certain assemblies or methods they deem valuable, and consumers could opt-in their assemblies or classes at their own discretion.\r\n\r\nThanks for your consideration!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXPxccw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40yhZg",
                                           "createdAt":  "2021-07-23T13:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-23T13:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yior",
                                           "createdAt":  "2021-07-23T14:06:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "This would go against [the W^X work that\u0027s already been done](https://github.com/dotnet/runtime/issues/50391) which is [a big deal going forward](https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-6/#runtime-wx-memory-policy).",
                                           "updatedAt":  "2021-07-23T14:06:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yk4c",
                                           "createdAt":  "2021-07-23T14:19:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmurrell",
                                           "body":  "In the API Usage example above, wouldn\u0027t all the code be compiled in advance, and not limited by W^X?  Both the original implementation and the replaced delegate would be loaded in \u0027execute\u0027 pages.  Unless I misunderstand, switching the method by reflection would be more akin to changing an attribute on the object level, akin `PropertyInfo.SetValue()` and not blocked by W^X.\r\n\r\nPerhaps my comparisons with `Reflection.Emit` break down in light of W^X, but I would hope the original argument still stands.",
                                           "updatedAt":  "2021-07-23T14:19:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40y2F8",
                                           "createdAt":  "2021-07-23T16:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Non virtual methods are bound to type, not instance. Virtual method table is stored in type information, not directly in object.\r\nThe CLR code structure does not allow modifying method body **by instance**. Changing so would likely to break performance of \"common\" code.",
                                           "updatedAt":  "2021-07-23T16:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zM0x",
                                           "createdAt":  "2021-07-23T18:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Pathed this to VM because I\u0027m not sure where else it can go. At minimum it would affect the type system and JIT, possibly also p/invoke and calli stub invocation.",
                                           "updatedAt":  "2021-07-23T18:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400goM",
                                           "createdAt":  "2021-07-25T10:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuPgWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-27T06:33:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2021-07-27T08:26:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:23:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mewnojs",
                                                                               "createdAt":  "2024-08-15T10:08:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "acaly",
                                           "body":  "Your are mixing OOP concepts of methods (per class) and fields/properties (per instance). If something really differs at the instance granularity, C# has delegates and you are free to assign different delegates as a field or property to your checker instances.",
                                           "updatedAt":  "2021-07-25T10:32:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404OlH",
                                           "createdAt":  "2021-07-27T02:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrffsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2021-07-27T02:27:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-27T06:24:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zlzforever",
                                                                               "createdAt":  "2021-07-27T06:24:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-09-01T06:00:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "So when will this feature be on the agenda? I don\u0027t care if you replace the assembly or some other way.",
                                           "updatedAt":  "2021-07-27T02:15:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404OxN",
                                           "createdAt":  "2021-07-27T02:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESOu-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-07-27T04:51:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-09-01T06:00:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "dominik246",
                                                                               "createdAt":  "2025-05-15T11:24:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "\u003e Your are mixing OOP concepts of methods (per class) and fields/properties (per instance). If something really differs at the instance granularity, C# has delegates and you are free to assign different delegates as a field or property to your checker instances.\r\n\r\n你说了句废话! 懒得翻译英文回你.",
                                           "updatedAt":  "2021-07-27T02:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Sws",
                                           "createdAt":  "2021-07-27T03:08:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1KgaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2021-07-27T03:12:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-27T06:19:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:27:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "athinboy",
                                                                               "createdAt":  "2021-08-05T02:23:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "BenLampson",
                                           "body":  "I like this API!\r\nAnd~ Can we add some way to close and open this feature, like the: add the env or app config or compile options?\r\n\r\n",
                                           "updatedAt":  "2021-07-27T03:08:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404aUK",
                                           "createdAt":  "2021-07-27T04:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCILZyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:24:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "athinboy",
                                                                               "createdAt":  "2021-12-30T09:09:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e \u003e Your are mixing OOP concepts of methods (per class) and fields/properties (per instance). If something really differs at the instance granularity, C# has delegates and you are free to assign different delegates as a field or property to your checker instances.\r\n\u003e \r\n\u003e 你说了句废话! 懒得翻译英文回你.\r\n\r\nThis is not your issue. If you don\u0027t want to reply, then don\u0027t reply. \r\n\r\nAlso please obey Code of Conduct.\r\n\r\n",
                                           "updatedAt":  "2021-07-27T04:40:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404bed",
                                           "createdAt":  "2021-07-27T04:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@NMSAzulX in this repo there are contributors from around the world but we use English as a common language. Also, please take care to follow the code of conduct.",
                                           "updatedAt":  "2021-07-27T04:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404iuu",
                                           "createdAt":  "2021-07-27T06:08:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0CI3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-07-27T14:26:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "\u003e \u003e \u003e Your are mixing OOP concepts of methods (per class) and fields/properties (per instance). If something really differs at the instance granularity, C# has delegates and you are free to assign different delegates as a field or property to your checker instances.\r\n\u003e \u003e \r\n\u003e \u003e \r\n\u003e \u003e 你说了句废话! 懒得翻译英文回你.\r\n\u003e \r\n\u003e This is not your issue. If you don\u0027t want to reply, then don\u0027t reply.\r\n\u003e \r\n\u003e Also please obey Code of Conduct.\r\n\r\nDear fellow Canadians, you made a meaningless remark. I don\u0027t think you understand his scene at all. This scene is very important.",
                                           "updatedAt":  "2021-07-27T06:08:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404j5b",
                                           "createdAt":  "2021-07-27T06:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB000iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:25:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-08-03T03:37:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@acaly I don\u0027t know if you are using .NET as the programming language, but Delegate as fields and properties is basic knowledge, as we all know, you respond to the features expected by others with basic knowledge, such as XCYB. Am I right? Now you should know that the function he expects is more different.",
                                           "updatedAt":  "2021-07-27T06:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404l52",
                                           "createdAt":  "2021-07-27T06:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "OK. Then what is the problem of using delegates as properties in his scenario? \r\n\r\nNote that his original code replaces methods for a single instance. If that is to be allowed, we should expect user to replace methods for many different instances. Obviously, if you have basic knowledge, \"replace the assembly\" as you said won\u0027t be a solution here even it somehow works, because it would potentially gives you many copies of the assembly, which is unacceptable considering the performance impact, memory footprint and safety.\r\n\r\nOne may expect a direct method call to be faster than calling a delegate. That is true, but the difference is sufficiently small. That is the reason why delegates are everywhere in .NET. If the purpose was to replace a method that can be called in a faster way than using delegates, I don\u0027t think it should ever be made to the runtime. Besides this consideration, I don\u0027t know other reason for not using delegates in his original scenario.\r\n\r\nThere are other scenarios such as hot replace, but it is not clear if the original question was to ask for such functions.\r\n\r\nAlso I am an international student currently living in Canada. My nationality is Chinese. This is not important to this discussion but it seems you care a lot about it.",
                                           "updatedAt":  "2021-07-27T06:35:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404mmF",
                                           "createdAt":  "2021-07-27T06:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@acaly Profiling api can do that, so why can\u0027t you support it in runtime?  Canada is a beautiful country and their air is sweet. I just think you answered in a hurry.",
                                           "updatedAt":  "2021-07-27T06:40:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404nKR",
                                           "createdAt":  "2021-07-27T06:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "Which profiling API can replace methods per instance? And again, my question was, what is the problem of using delegates as properties in his scenario?\r\n\r\nIf you don\u0027t explain clearly what you want to achieve, why existing methods don\u0027t help you, and how it can be made possible, then you don\u0027t expect the proposal to go anywhere.",
                                           "updatedAt":  "2021-07-27T06:45:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404oVi",
                                           "createdAt":  "2021-07-27T06:55:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "InCerryGit",
                                           "body":  "\u003e Which profiling API can replace methods per instance? And again, my question was, what is the problem of using delegates as properties in his scenario?\r\n\u003e \r\n\u003e If you don\u0027t explain clearly what you want to achieve, why existing methods don\u0027t help you, and how it can be made possible, then you don\u0027t expect the proposal to go anywhere.\r\n\r\nThe profiling api must be in C++ and is rather complex，officially does not recommend this either。\r\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/profiling/profiling-overview#unsupported-functionality\r\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-getilfunctionbody-method\r\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-setilfunctionbody-method\r\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo4-requestrejit-method\r\n",
                                           "updatedAt":  "2021-07-27T06:55:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404of2",
                                           "createdAt":  "2021-07-27T06:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@acaly  Why do you require him to use fields and properties?\r\nWe have to admit that Delegate can solve the problem of method replacement. If so, is it necessary for the method to exist? If everyone uses Delegate, there won\u0027t be this issue, and of course we can\u0027t let everyone do that. His focus is on this API. And this API will bring more benefits, such as AOP, such as upgrading old programs that lose source code, such as updating services that cannot be stopped, and so on.",
                                           "updatedAt":  "2021-07-27T06:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404okH",
                                           "createdAt":  "2021-07-27T06:57:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e Which profiling API can replace methods per instance? And again, my question was, what is the problem of using delegates as properties in his scenario?\r\n\r\nNote that I said **_per instance_**. Those are just replacing single method. My first comment was also about replacing for single instance. If it was about replacing for all instances, then I wouldn\u0027t suggest using delegates.",
                                           "updatedAt":  "2021-07-27T06:57:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404pkX",
                                           "createdAt":  "2021-07-27T07:04:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e If so, is it necessary for the method to exist? If everyone uses Delegate, there won\u0027t be this issue\r\n \r\nI hope you know lambda and delegate are themselves implemented with methods. \r\n\r\n\u003e We have to admit that Delegate can solve the problem of method replacement. \r\n\r\nYou mean that this proposal is not necessary, don\u0027t you?\r\n\r\n\u003e And this API will bring more benefits, such as AOP, such as upgrading old programs that lose source code, such as updating services that cannot be stopped, and so on.\r\n\r\nFor what you\u0027ve suggested, replacing the behavior of an instance from external code is completely against OOP. It will make everyone who maintains public APIs to worry about how user will use their library.",
                                           "updatedAt":  "2021-07-27T07:04:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404rCd",
                                           "createdAt":  "2021-07-27T07:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "@acaly Don\u0027t try to negate his API. If the method can be replaced, then he needs to control whether the previous method is called or the later method is called. The premise is that we can replace the method. As for the safety factor, I think this is the most useless focus. Because there are many technologies that can destroy it, certificate verification or other verification mechanisms can be added to the replacement function.",
                                           "updatedAt":  "2021-07-27T07:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404sDj",
                                           "createdAt":  "2021-07-27T07:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NMSAzulX",
                                           "body":  "```C#\r\ntypeof(Doer).AddVerity();\r\n```\r\n```C#\r\nvar method =  typeof(Doer).GetMethod(\"DoA\");\r\nvar handler = method.Vertify(....);\r\nhandler.Replace(.....);\r\n```",
                                           "updatedAt":  "2021-07-27T07:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404sOr",
                                           "createdAt":  "2021-07-27T07:23:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBz-RpA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2021-07-27T07:33:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-27T07:35:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BenLampson",
                                           "body":  "Maybe there has some real scence to use this feature.\r\nIf you are the programer who write the client code,\r\nuse the xLua you can do this (the code below copy from the internet):\r\n``` xLua\r\nprint(\"*********multiple method replace***********\") \r\n\r\nxlua.hotfix(CS.HotfixMain, {\r\n\tUpdate = function(self)\r\n\t\tprint(os.time())\r\n\tend,\r\n\tAdd = function(self, a, b )\r\n\t\treturn a + b\r\n\tend,\r\n\tSpeak = function(a)\r\n\t\tprint(a)\r\n\tend\r\n})\r\n\r\nxlua.hotfix(CS.HotfixTest, { \r\n\t[\".ctor\"] = function()\r\n\t\tprint(\"Lua hot fix ctor\")\r\n\tend,\r\n\tSpeak = function(self,a)\r\n\t\tprint(\"UnitySir\" .. a)\r\n\tend, \r\n\tFinalize = function()\r\n\t\t\r\n\tend\r\n})\r\n```\r\n\r\nAnd this feature always uses to hotfix some little bug or dynamic change the client behavior.\r\n\r\nThe DotNet has this feature, but it is very hard to use. So if we have this API, we can do this easily.\r\nSo, what reason makes us negate this API?\r\n\r\n\r\nWhile maybe this API getting the application\u0027s risks, but I think this feature needs the switch to close. So why we don\u0027t like It?\r\n\r\n\r\nHo forgot the little thing, most of the U3D\u0027s development use the C# and xLua to realization this feature.",
                                           "updatedAt":  "2021-07-27T07:23:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404sRC",
                                           "createdAt":  "2021-07-27T07:23:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0c1LA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2021-07-27T07:33:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-07-27T08:22:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "renanrcp",
                                                                               "createdAt":  "2021-07-27T17:56:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:33:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Replacing **non-virtual** method per instance is technically impossible. The method is often inlined before getting the object. Disable inlining or even add a check will downgrade performance a lot.",
                                           "updatedAt":  "2021-07-27T07:23:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404sbS",
                                           "createdAt":  "2021-07-27T07:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e Don\u0027t try to negate his API.\r\n\r\nI cannot negate this API. I am just commenting my own thinking on this API. Every API will go through official API review.\r\n\r\n\u003e then he needs to control whether the previous method is called or the later method is called\r\n\r\n\u003e certificate verification or other verification mechanisms can be added to the replacement function\r\n\r\nHow? Those need to be added to the API proposal if they are necessary for it to work.",
                                           "updatedAt":  "2021-07-27T07:24:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404uSS",
                                           "createdAt":  "2021-07-27T07:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0c1xQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:35:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "It\u0027s not possible to replace a non-virtual method body at runtime (some methods even get inlined after JIT and no actual code generated for them dedicately, you can reassign delegates because they\u0027re actually function pointers), you can manipulate il as a build task after compiled as you want. \r\n\r\nFor example, using Fody: https://github.com/Fody/Fody",
                                           "updatedAt":  "2021-07-27T07:41:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404xn7",
                                           "createdAt":  "2021-07-27T07:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "InCerryGit",
                                           "body":  "\u003e Maybe there has some real scence to use this feature.\r\n\u003e If you are the programer who write the client code,\r\n\u003e use the xLua you can do this (the code below copy from the internet):\r\n\u003e \r\n\u003e ```\r\n\u003e print(\"*********multiple method replace***********\") \r\n\u003e \r\n\u003e xlua.hotfix(CS.HotfixMain, {\r\n\u003e \tUpdate = function(self)\r\n\u003e \t\tprint(os.time())\r\n\u003e \tend,\r\n\u003e \tAdd = function(self, a, b )\r\n\u003e \t\treturn a + b\r\n\u003e \tend,\r\n\u003e \tSpeak = function(a)\r\n\u003e \t\tprint(a)\r\n\u003e \tend\r\n\u003e })\r\n\u003e \r\n\u003e xlua.hotfix(CS.HotfixTest, { \r\n\u003e \t[\".ctor\"] = function()\r\n\u003e \t\tprint(\"Lua hot fix ctor\")\r\n\u003e \tend,\r\n\u003e \tSpeak = function(self,a)\r\n\u003e \t\tprint(\"UnitySir\" .. a)\r\n\u003e \tend, \r\n\u003e \tFinalize = function()\r\n\u003e \t\t\r\n\u003e \tend\r\n\u003e })\r\n\u003e ```\r\n\u003e \r\n\u003e And this feature always uses to hotfix some little bug or dynamic change the client behavior.\r\n\u003e \r\n\u003e The DotNet has this feature, but it is very hard to use. So if we have this API, we can do this easily.\r\n\u003e So, what reason makes us negate this API?\r\n\u003e \r\n\u003e While maybe this API getting the application\u0027s risks, but I think this feature needs the switch to close. So why we don\u0027t like It?\r\n\u003e \r\n\u003e Ho forgot the little thing, most of the U3D\u0027s development use the C# and xLua to realization this feature.\r\n\r\njava has this feature. very easy to use\r\nFor example,  java asm, javaassit, java instrumentation",
                                           "updatedAt":  "2021-07-27T07:59:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc405c2h",
                                           "createdAt":  "2021-07-27T12:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0IClA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-07-27T14:25:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2021-07-27T20:30:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2021-07-28T01:30:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-28T03:14:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "mmurrell",
                                           "body":  "Addressing some of the comments on the thread:\r\n\r\nRegarding delegates -I understand their use; I just don\u0027t think it applies here.  My very specific API request was to support better isolation for testing, and that can already be done by declaring an interface for every class, no matter how small.  However, the cost (development, maintainability, complexity) of maintaining all those extra declarations is non-trivial.  The same problem would apply with delegates.  -- As a contrast, the API request is a way to perform a common task, minimizing the amount of overhead or friction to developers.  \r\n\r\n\u003eWhich profiling API can replace methods per instance? And again, my question was, what is the problem of using delegates as properties in his scenario?\r\n\r\nThe profiling API was the \u0027proprietary techniques\u0027 I cited in the original post referencing the commercial products.  Yes, the profiling API does allow method interception, albeit on a class level (not instance), but I agree with the other commenter that it is prohibitively complex / cumbersome to implement.  That is a very large amount of risk, complexity, and overhead to consider for common use.  I would consider method interception as an alternative to this proposal, if such a feature were more easily available in the runtime.\r\n\r\n\u003e **virtual** method per instance is technically impossible. The method is often inlined before getting the object. Disable inlining or even add a check will downgrade performance a lot.\r\n\r\n\u003e For what you\u0027ve suggested, replacing the behavior of an instance from external code is completely against OOP. It will make everyone who maintains public APIs to worry about how user will use their library.\r\n\r\nI would hope that allowing developers to opt-in to replacement could mitigate these concerns. \r\n\r\nOn the general topic of class vs instance replacement, if we\u0027re opening up the source to add this feature, instance based method replacement would be ideal.  If that is somehow prohibitive, class based method replacement would suffice.  \r\n\r\nAnd finally, though I\u0027m not sure how this is relevant, I\u0027m a big fan of Canada. =)\r\n",
                                           "updatedAt":  "2021-07-27T12:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc406wfd",
                                           "createdAt":  "2021-07-27T20:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0c2bQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jlchavez",
                                                                               "createdAt":  "2021-07-29T22:37:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "acaly",
                                           "body":  "If you are mainly worried about creating too many interface implementations, would inline anonymous types help? There are proposals in C# to allow user to implement interfaces with anomymous types inside method body like in Java.",
                                           "updatedAt":  "2021-07-27T20:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_Fxz",
                                           "createdAt":  "2023-05-23T19:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "If you really need this feature, you might want to have a look at [Ryder](https://github.com/71/Ryder). I\u0027d use this for prototyping or development tools but certainly not for production.",
                                           "updatedAt":  "2023-05-23T19:56:18Z"
                                       }
                                   ],
                         "totalCount":  30
                     },
        "title":  "[API Proposal]: Please allow for the replacing of method bodies at runtime.",
        "labels":  [
                       "api-suggestion",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56611",
        "createdAt":  "2021-07-30T09:46:07Z",
        "number":  56611,
        "author":  "Martmists-GH",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzxjbA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "athinboy",
                                            "createdAt":  "2021-08-05T01:43:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CM2Walki",
                                            "createdAt":  "2023-11-04T17:08:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-08-01T17:05:10Z",
        "body":  "Using the DLL file extension would, to most users, imply the file can only be used on windows and works just like any other DLL, which may cause confusion to linux/macos users. As CLR uses a custom format and with dotnet core being cross-platform, it should either adapt to the platform (e.g. switching to .so on linux) or use a custom extension like .dotnet or .clr or similar.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "CLR should use a different file extension than DLL",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56706",
        "createdAt":  "2021-08-02T02:26:07Z",
        "number":  56706,
        "author":  "publicarray",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCH-4gQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "publicarray",
                                            "createdAt":  "2021-08-25T21:08:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piejanssens",
                                            "createdAt":  "2021-12-27T20:56:30Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-05-11T18:30:09Z",
        "body":  "### Description\r\n\r\nWe have several applications that work fine on x64 and ARM64 Synology Devices, but we have reports that they fail to run on some ARMv7 processors: https://github.com/SynoCommunity/spksrc/issues/4546 and https://github.com/publicarray/spksrc/issues/28\r\n\r\nwith `Illegal instruction (core dumped)`\r\n\r\nReproducing the problem is difficult as I don\u0027t have an ARMv7 processor to hand. The only thing I have is a DSM environment where I can\u0027t reproduce the problem.\r\n\r\nSo the natural question is What are the ARMv7 processor feature requirements? And the specific versions of supported libs .e.g. (glib/libstdc++)? (we already ship the software with an updated libstdc++)\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? **5.0.8**\r\n* What OS and version, and what distro if applicable? **Linux - Synology DSM**\r\n* What is the architecture (x64, x86, ARM, ARM64)? **ARM**\r\n* Do you know whether it is specific to that configuration? **Probably**\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in? **No**\r\n\r\n### Other information\r\n\r\n```\r\nprocessor       : 0\r\nmodel name      : ARMv7 Processor rev 4 (v7l)\r\nSpeed           : 1.4GHz\r\nFeatures        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer : 0x41\r\nCPU architecture: 7\r\nCPU variant     : 0x2\r\nCPU part        : 0xc0f\r\nCPU revision    : 4\r\n```\r\n\r\n```\r\nProcessor\t: Marvell PJ4Bv7 Processor rev 2 (v7l)\r\nprocessor\t: 0\r\nBogoMIPS\t: 1332.01\r\n\r\nprocessor\t: 1\r\nBogoMIPS\t: 1332.01\r\n\r\nFeatures\t: swp half thumb fastmult vfp edsp vfpv3 tls \r\nCPU implementer\t: 0x56\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0x584\r\nCPU revision\t: 2\r\n\r\nHardware\t: Marvell Armada XP Development Board\r\nRevision\t: 0000\r\nSerial\t\t: 0000000000000000\r\n```\r\n\r\nCC/ Radarr: @ta264 Jellyfin: @anthonylavado\r\n\r\nIf I\u0027ve overlooked something simple I\u0027m sorry for notifying people. But I think that this problem requires collaboration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQwFHzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41FnUX",
                                           "createdAt":  "2021-08-02T02:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-02T02:26:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41F1cL",
                                           "createdAt":  "2021-08-02T05:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "is it possible to share a dump when a failure occurs? ",
                                           "updatedAt":  "2021-08-02T05:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41F7ZF",
                                           "createdAt":  "2021-08-02T06:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ta264",
                                           "body":  "Something I found a while ago:\r\n```The default arm compilation configuration for CoreCLR is armv7-a with thumb-2 instruction set and VFPv3 floating point with 32 64-bit FPU registers.```\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/cross-building.md#cross-compiling-coreclr-for-other-vfp-configurations",
                                           "updatedAt":  "2021-08-02T06:06:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Ggxc",
                                           "createdAt":  "2021-08-02T10:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "publicarray",
                                           "body":  "Thanks I\u0027ve asked if @rfrmarco is able to provide one.\r\n\r\nThanks @ta264, So the CPUs should work...",
                                           "updatedAt":  "2021-08-02T10:06:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc418CRO",
                                           "createdAt":  "2021-08-24T19:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stinker1978",
                                           "body":  "Running into what I believe is the same issue.  DS715+ and latest Radarr upgrade won\u0027t start.  I am not sure if the CPU on the DS715+ is supported or not, so can you let me know?\r\n\r\n`processor\t: 0\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 1\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 2\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 3\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nHardware\t: AnnapurnaLabs Alpine (Device Tree)\r\nRevision\t: 0000\r\nSerial\t\t: 0000000000000000\r\nprocessor\t: 0\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 1\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 2\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nprocessor\t: 3\r\nmodel name\t: ARMv7 Processor rev 4 (v7l)\r\nSpeed\t\t: 1.4GHz\r\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \r\nCPU implementer\t: 0x41\r\nCPU architecture: 7\r\nCPU variant\t: 0x2\r\nCPU part\t: 0xc0f\r\nCPU revision\t: 4\r\n\r\nHardware\t: AnnapurnaLabs Alpine (Device Tree)\r\nRevision\t: 0000\r\nSerial\t\t: 0000000000000000`\r\n",
                                           "updatedAt":  "2021-08-24T19:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc419Beu",
                                           "createdAt":  "2021-08-25T05:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "publicarray",
                                           "body":  "` DS715+` doesn\u0027t exist you probably mean `DS715`. Sorry but your CPU `Annapurna Labs Alpine AL-314` is the one having this issue, so I\u0027ve marked it as unsupported for the Radarr package for now. If you want you can add :+1: to this issue if you want to give it more attention for the devs here. I\u0027ve done all I can.",
                                           "updatedAt":  "2021-08-25T05:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41-Hyl",
                                           "createdAt":  "2021-08-25T12:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stinker1978",
                                           "body":  "\u003e `DS715+` doesn\u0027t exist you probably mean `DS715`. Sorry but your CPU `Annapurna Labs Alpine AL-314` is the one having this issue, so I\u0027ve marked it as unsupported for the Radarr package for now. If you want you can add 👍 to this issue if you want to give it more attention for the devs here. I\u0027ve done all I can.\r\n\r\nYou are correct, it\u0027s the DS715.\r\n\r\nHow do I add a 👍 ?  Also, if there is anything I can do to help gather more info and such to better diagnose the issue, let me know!",
                                           "updatedAt":  "2021-08-25T12:56:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc479zym",
                                           "createdAt":  "2022-01-05T20:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "publicarray",
                                           "body":  "I just received a report that the DS2015xs, Annapurna Labs Alpine AL-514 is having the same issue with radarr",
                                           "updatedAt":  "2022-01-05T20:36:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DAUfM",
                                           "createdAt":  "2022-05-11T18:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ta264",
                                           "body":  "@stinker1978 Please can you come by the radarr discord?  https://radarr.video/discord  I may have a solution.",
                                           "updatedAt":  "2022-05-11T18:30:09Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Synology ARMv7 (Alpine AL-314 \u0026 Marvell Armada XP MV78230) Illegal instruction ",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57793",
        "createdAt":  "2021-08-20T01:11:03Z",
        "number":  57793,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-23T16:24:18Z",
        "body":  "Per https://github.com/dotnet/runtime/pull/57790#discussion_r692571650, we can now investigate the possibility and potential benefit of moving PEImage into utilcode.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider moving PEImage into utilcode",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59196",
        "createdAt":  "2021-09-16T10:43:25Z",
        "number":  59196,
        "author":  "ByteCopilot",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-20T04:45:06Z",
        "body":  "thank u for codes and docs in this project, it helps me understand more about how clr and jit works.\r\nafter read shared-generic.md , methodDesc and jit docs .\r\ni still  can`t figure out how to find generic method native code address.\r\n\r\nuse windgb, i see NonGenericMethod methodDesc  and  jitted  code address.\r\nbut in GenericMethod  methodDesc,  it shows not jitted, after called GenericMethod, still show not jitted.\r\ntried to see the memory of methodDesc with windgb, all pointers  can`t lead me to the right native code address.\r\n\r\nhow to understand this picture below. \r\n![image](https://user-images.githubusercontent.com/17214944/133597788-8d19c06d-37e1-4ec0-8355-bf940e2f4068.png)\r\n\r\n\r\nclass define like below\r\n```\r\nclass SimpleClass\r\n{\r\n   public void NonGenericMethod()\r\n  {\r\n    Console.WriteLine(\"NoneGenericMethod\");\r\n  }\r\n  public void GenericMethod\u003cT\u003e()\r\n  {\r\n    Console.WriteLine(\"GenericMethod\");\r\n  }\r\n}\r\n\r\nvar simple = new SimpleClass();\r\nsimple.GenericMethod\u003cint\u003e();\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONuIg2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc424iDY",
                                           "createdAt":  "2021-09-16T10:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-16T10:43:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "how to get native code address of generic method in class",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60467",
        "createdAt":  "2021-10-15T13:59:40Z",
        "number":  60467,
        "author":  "dufkaf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCBTtbA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sps014",
                                            "createdAt":  "2021-11-05T06:24:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-23T23:14:25Z",
        "body":  "\r\nWe are running lot of microservices in AKS cluster and tried Alpine Linux .NET Core docker images instead of Debian due to its size and runtime memory requirements. We see better RAM utilization - typical small aspnet microservice that consumes 200-400MB with debian/glibc consumes 100-250MB  with alpine/musl. However we also noticed performance degradation issue with multithreaded memory heavy workloads. We see 30-40% slowdowns  when compared to debian/glibc. We noticed it on service with 4-5GB in memory data set where REST API queries this data while the data set is updated on the background. \r\n\r\nLooks like it is known issue of musl libc memory allocator - both old and new introduced recently.\r\n\r\nhttps://www.linkedin.com/pulse/testing-alternative-c-memory-allocators-pt-2-musl-mystery-gomes\r\nhttps://news.ycombinator.com/item?id=23081071 - discussion about its features notably no per thread heaps\r\n\r\nAs musl is also used in memory constrained/embedded  environments, the features of the allocator (concurrency issues) is more a design choice than a bug.\r\n\r\nThere is custom memory allocator https://github.com/microsoft/mimalloc with quite positive reviews overall that tries to solve such issues.\r\n\r\nWould it make sense to support mimalloc on Alpine Linux (or even Debian/Ubuntu or Windows) as part of .net runtime build to replace default OS allocator?\r\n\r\nSince there is garbage collector and its own memory handling in CLR that may possibly be tuned at build time to musl/glibc, is it worth even trying to just blindly LD_PRELOAD mimalloc on Alpine or Debian when starting .net core app without any support in the runtime?\r\n\r\nAlpine Linux is one of three  .NET  Linux docker images supported and published and is promoted by members of  .NET Team as a better choice  (e.g. here https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/ \"We also recommend Alpine because ...\" ) however looks like at least for us the current performance of Alpine is lacking when compared to more heavy Linux docker images.\r\n\r\nFeel free to change type of this issue, \"performance\" felt like best fit.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOFakiw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44SUHw",
                                           "createdAt":  "2021-10-15T13:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-15T13:59:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SWFh",
                                           "createdAt":  "2021-10-15T14:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nWe are running lot of microservices in AKS cluster and tried Alpine Linux .NET Core docker images instead of Debian due to its size and runtime memory requirements. We see better RAM utilization - typical small aspnet microservice that consumes 200-400MB with debian/glibc consumes 100-250MB  with alpine/musl. However we also noticed performance degradation issue with multithreaded memory heavy workloads. We see 30-40% slowdowns  when compared to debian/glibc. We noticed it on service with 4-5GB in memory data set where REST API queries this data while the data set is updated on the background. \r\n\r\nLooks like it is known issue of musl libc memory allocator - both old and new introduced recently.\r\n\r\nhttps://www.linkedin.com/pulse/testing-alternative-c-memory-allocators-pt-2-musl-mystery-gomes\r\nhttps://news.ycombinator.com/item?id=23081071 - discussion about its features notably no per thread heaps\r\n\r\nAs musl is also used in memory constrained/embedded  environments, the features of the allocator (concurrency issues) is more a design choice than a bug.\r\n\r\nThere is custom memory allocator https://github.com/microsoft/mimalloc with quite positive reviews overall that tries to solve such issues.\r\n\r\nWould it make sense to support mimalloc on Alpine Linux (or even Debian/Ubuntu or Windows) as part of .net runtime build to replace default OS allocator?\r\n\r\nSince there is garbage collector and its own memory handling in CLR that may possibly be tuned at build time to musl/glibc, is it worth even trying to just blindly LD_PRELOAD mimalloc on Alpine or Debian when starting .net core app without any support in the runtime?\r\n\r\nAlpine Linux is one of three  .NET  Linux docker images supported and published and is promoted by members of  .NET Team as a better choice  (e.g. here https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/ \"We also recommend Alpine because ...\" ) however looks like at least for us the current performance of Alpine is lacking when compared to more heavy Linux docker images.\r\n\r\nFeel free to change type of this issue, \"performance\" felt like best fit.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edufkaf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-15T14:09:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44TWeU",
                                           "createdAt":  "2021-10-15T19:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "GC will not use a malloc allocator to acquire memory. chatted with @janvorli a bit about this and he can comment on the malloc side of things.",
                                           "updatedAt":  "2021-10-15T19:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44TY4g",
                                           "createdAt":  "2021-10-15T19:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The malloc stuff is used only for native allocations in the runtime and the 3rd party libraries we use (like openssl etc.). These can be happening on multiple threads concurrently, so it seems that it would be worth trying to preload the mimalloc and see if it makes things better.\r\nGC memory is unrelated, as it uses mmap directly to allocate memory.",
                                           "updatedAt":  "2021-10-15T19:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44VpEF",
                                           "createdAt":  "2021-10-17T21:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dufkaf",
                                           "body":  "Thank you for confirming that GC memory does not use OS provided malloc. However that raises more questions than answers for me. So this means that when our typical small  c# aspnetcore webapi service is started and is listening for requests, with some data cached in memory (aggregated from other services via webapi calls) - all c# code, and total memory allocated for alpine/musl vs glibc/debian based aspnetcore runtime is e.g. 130MB vs 250MB. Then since you say GC does not depend on OS malloc and I have here difference of 120MB out of 250 - that would mean that majority of memory (150-200MB) is actually native allocations? Interesting, what these would be?\r\n\r\nAlso with that big service with 5GB RAM in total (deep hierarchical tree structures of c# objects in memory) where background threads are updating it while clients query it via webapi calls - when we see the 40% slowdown for musl vs glibc (both in background jobs and client response times) these are again caused by some native allocations outside of those c# objects? That is quite surprising.\r\n\r\nSo I guess we would need to do some memory dumps to see where the memory goes and do some cpu profiling.\r\nAnyway, thank you, so if these are really all native allocations that make the difference then the preloaded mimalloc could help with those.",
                                           "updatedAt":  "2021-10-17T21:24:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44VqSL",
                                           "createdAt":  "2021-10-17T22:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  I have here difference of 120MB out of 250 - that would mean that majority of memory (150-200MB) is actually native allocations?\r\n\r\nThis may or may not be the case. You may be seeing some second order effects from glibc vs. musl differences. As you have suggested, the best way to figure this out is by doing some memory and cpu profiling. Checking performance counters using https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters tool is a quick easy way to start.",
                                           "updatedAt":  "2021-10-17T22:02:35Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "allow custom memory allocator - mimalloc (linux,musl,glibc)",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60712",
        "createdAt":  "2021-10-21T12:08:49Z",
        "number":  60712,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-16T16:59:38Z",
        "body":  "### Description\r\n\r\nIn #60228 I made the JIT generate `lea` instructions for any handle that the runtime returns an `IMAGE_REL_BASED_REL32` hint for. We saw some regressions due to this, e.g. #60626.\r\n\r\nAfter investigating this further I have determined that the issue is similar to one we saw in #49549. We create a constant pointing to `kernel32!GetStdHandle`, and we try to use rip-relative addressing for this constant. The constant does not end up being reachable, which hits [this code path](https://github.com/dotnet/runtime/blob/294a284183093ec2b8ef87ffc5704719b90fa53f/src/coreclr/vm/jitinterface.cpp#L11250) in the runtime that permanently turns off rip-relative addressing for the remaining duration of the process.\r\n\r\nThe issue is not completely the same as #49549, however. For calls we always assume they are reachable with rip-relative addressing; for constant handles, we are using the `getRelocTypeHint` function to figure out if this is the case.\r\n\r\nFor this particular case `getRelocTypeHint` is returning `IMAGE_REL_BASED_REL32` for the address that ends up not being reachable. The reason is that the runtime [allocates a 4GB range](https://github.com/dotnet/runtime/blob/294a284183093ec2b8ef87ffc5704719b90fa53f/src/coreclr/utilcode/executableallocator.cpp#L66-L80) around coreclr.dll that is the preferred range: it returns `IMAGE_REL_BASED_REL32` for any address within this range. However, if jitted code is placed in the beginning of the range, and a handle is at the end, then this is not reachable with rip-relative addressing, and we hit the path above that turns off rip-relative addressing.\r\n\r\nAfter speaking to folks it seems there are conflicting assumptions about what `getRelocTypeHint` can be used for on both the JIT side and the runtime side. For the runtime side, it is assumed that this function is called only for addresses in the current loader heap and for addresses in coreclr.dll. The runtime tries to allocate memory from loader heaps in a circular fashion, which means that under the above assumption we only end up turning off rip-relative addressing once we have pretty much run out of memory in the preferred range.\r\n\r\nHowever the JIT uses the check more generally to mean that it is assumed the address will be within +-2GB. My change exacerbated this, but it is already the case even before the change. In particular, any indir is checked for rip-relative addressing using this function. Due to this it is quite simple to write a program that reliably turns off rip-relative addressing without actually allocating much of the preferred range, see next.\r\n\r\n### Reproduction Steps\r\n\r\nThe following program reliably turns off rip-relative addressing permanently for the remaining duration of the process. It is a preexisting issue to #60228 - even with that PR reverted this example hits the case. Note that the address could come from anywhere, e.g. it could be a pointer into static memory from a native image that would likely be in the preferred range as well. However the `VirtualAlloc` with explicit address makes the repro simple and reliable.\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\nusing System.Threading;\r\n\r\npublic unsafe class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        for (int i = 0; i \u003c 100; i++)\r\n        {\r\n            Foo();\r\n            if (i \u003e= 35)\r\n                Thread.Sleep(30);\r\n        }\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void Foo()\r\n    {\r\n        Volatile.Read(ref NearbyMemory[15]);\r\n    }\r\n\r\n    private static readonly byte* NearbyMemory = AllocUnreachableMemoryInPreferredRange();\r\n\r\n    private static byte* AllocUnreachableMemoryInPreferredRange()\r\n    {\r\n        delegate*\u003cbyte*\u003e codeAddr = \u0026AllocUnreachableMemoryInPreferredRange;\r\n        byte* start = (byte*)codeAddr + 0x90000000;\r\n\r\n        for (byte* addr = start; ; addr += 0x1000)\r\n        {\r\n            IntPtr alloced = VirtualAlloc((IntPtr)addr, 0x1000, 0x1000 | 0x2000, 0x04);\r\n            if (alloced != IntPtr.Zero)\r\n                return (byte*)alloced;\r\n        }\r\n    }\r\n\r\n    [DllImport(\"kernel32.dll\", SetLastError = true, ExactSpelling = true)]\r\n    static extern IntPtr VirtualAlloc(IntPtr lpAddress, nint dwSize, uint flAllocationType, uint flProtect);\r\n}\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nWe should not be turning off rip-relative addressing globally unless we are actually running out of memory in the preferred range.\r\n\r\n### Actual behavior\r\n\r\nWe do turn it off. We see three JITs of `Foo` in the above:\r\n```asm\r\n; Assembly listing for method Program:Foo()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; Tier-0 compilation\r\n; MinOpts code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+00H]   do-not-enreg[] \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 32\r\n\r\nG_M24659_IG01:              ;; offset=0000H\r\n       55                   push     rbp\r\n       4883EC20             sub      rsp, 32\r\n       488D6C2420           lea      rbp, [rsp+20H]\r\n                                                ;; bbWeight=1    PerfScore 1.75\r\nG_M24659_IG02:              ;; offset=000AH\r\n       48B908B28E2AFD7F0000 mov      rcx, 0x7FFD2A8EB208\r\n       BA03000000           mov      edx, 3\r\n       E8320BA35F           call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE\r\n       B90F000000           mov      ecx, 15\r\n       4863C9               movsxd   rcx, ecx\r\n       48030D53F32400       add      rcx, qword ptr [reloc classVar[0x2a8ecf18]]\r\n       E8FEBBFEFF           call     System.Threading.Volatile:Read(byref):ubyte\r\n       90                   nop\r\n                                                ;; bbWeight=1    PerfScore 5.25\r\nG_M24659_IG03:              ;; offset=0033H\r\n       4883C420             add      rsp, 32\r\n       5D                   pop      rbp\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.75\r\n\r\n; Total bytes of code 57, prolog size 10, PerfScore 14.45, instruction count 14, allocated bytes for code 57 (MethodHash=999a9fac) for method Program:Foo()\r\n; ============================================================\r\n\r\n; Assembly listing for method Program:Foo()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; Tier-1 compilation\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; No PGO data\r\n; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data\r\n; Final local variable assignments\r\n;\r\n;# V00 OutArgs      [V00    ] (  1,  1   )  lclBlk ( 0) [rsp+00H]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01    ] (  0,  0   )   byref  -\u003e  zero-ref    \"Inlining Arg\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M24659_IG01:              ;; offset=0000H\r\n                                                ;; bbWeight=1    PerfScore 0.00\r\nG_M24659_IG02:              ;; offset=0000H\r\n       8B0500000000         mov      eax, dword ptr [(reloc 0x7ffdba69000f)]\r\n                                                ;; bbWeight=1    PerfScore 2.00\r\nG_M24659_IG03:              ;; offset=0006H\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.00\r\n\r\n; Total bytes of code 7, prolog size 0, PerfScore 3.70, instruction count 2, allocated bytes for code 7 (MethodHash=999a9fac) for method Program:Foo()\r\n; ============================================================\r\n\r\nHit jump stub overflow\r\n; Assembly listing for method Program:Foo()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; Tier-1 compilation\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; No PGO data\r\n; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data\r\n; Final local variable assignments\r\n;\r\n;# V00 OutArgs      [V00    ] (  1,  1   )  lclBlk ( 0) [rsp+00H]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01    ] (  0,  0   )   byref  -\u003e  zero-ref    \"Inlining Arg\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M24659_IG01:              ;; offset=0000H\r\n                                                ;; bbWeight=1    PerfScore 0.00\r\nG_M24659_IG02:              ;; offset=0000H\r\n       48B80F0069BAFD7F0000 mov      rax, 0x7FFDBA69000F\r\n       3900                 cmp      dword ptr [rax], eax\r\n                                                ;; bbWeight=1    PerfScore 3.25\r\nG_M24659_IG03:              ;; offset=000CH\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.00\r\n\r\n; Total bytes of code 13, prolog size 0, PerfScore 5.55, instruction count 3, allocated bytes for code 13 (MethodHash=999a9fac) for method Program:Foo()\r\n; ============================================================\r\n```\r\n\"Hit jump stub overflow\" is a simple `printf` I added to the runtime code that turns off rip-relative addressing.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nIMO, it would be ideal if the runtime could guess roughly where the jitted code will be located before the JIT has given it a size back and it has done the allocation. Then the reloc hint address range could be based on that.\r\n\r\nAlternatively, as suggested by @jkotas, we could eagerly reserve memory before jit and back out of the unused memory.\r\n\r\nAnother short-term alternative might be to halve the preferred address range so that we get +-1 GB around coreclr.dll; this \r\nshould mean that the entire region is reachable regardless of where the code ends up.\r\n\r\nIn any case, as long as the final scheme works in vast majority of practical cases that should be ok -- for pathological cases we can always fall back to turning off rip-relative addressing.\r\n\r\nFixing this on the JIT side is also a possibility. In that case the JIT should change to ensure that it only uses the hint function for very particular data addresses (e.g. static field addrs, managed method entry points). In this case I\u0027m not really sure what the point is of checking the preferred range at all on the runtime side, compared to just checking if we are allowing rip-relative addressing.\r\n\r\ncc @dotnet/jit-contrib, @jkotas, @janvorli ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVXAXig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44ibVH",
                                           "createdAt":  "2021-10-21T12:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-21T12:08:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44jDL0",
                                           "createdAt":  "2021-10-21T15:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it would be ideal if the runtime could guess roughly where the jitted code will be located before the JIT has given it a size back and it has done the allocation. \r\n\r\nYou can end up in situations where we have to JIT the method multiple times until we guess right. It is most likely going to happen for large methods where multiplying the JIT time is going to be very noticeable.\r\n\r\nThe problem of the current scheme is that it is based on guesses. If we come up with a new scheme, we should try to eliminate dependency on guesses as much as possible.",
                                           "updatedAt":  "2021-10-21T15:07:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44jL4L",
                                           "createdAt":  "2021-10-21T15:52:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e You can end up in situations where we have to JIT the method multiple times until we guess right. It is most likely going to happen for large methods where multiplying the JIT time is going to be very noticeable.\r\n\u003e \r\n\u003e The problem of the current scheme is that it is based on guesses. If we come up with a new scheme, we should try to eliminate dependency on guesses as much as possible.\r\n\r\nI suppose we always have to guess, either for the rough location or for the size of final code (if we want to do the reservation eagerly).\r\n\r\nThe above could be solved by forcing new JIT requests to wait. I hope this should be sufficiently rare that this is ok. For example, let\u0027s make an assumption that no function will generate more than 25 MB of code (for large IL we can always turn off rip-relative addressing).\r\n1. The current code heap pointer is `x`\r\n2. We start a new JIT; we allow rip-relative addressing in the range +- 2GB of x, minus a few percent (so maybe minus 50 MB).\r\n3. Multithreaded jitting happens. If we notice `x` move more than 25 MB while the initial jitting has not finished, we force subsequential jits to wait until the initial JIT request is finished and committed.\r\n\r\nOf course this is probably more complicated due to the fact that there can be multiple segments in the code heap and so on.",
                                           "updatedAt":  "2021-10-21T15:52:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44jNRl",
                                           "createdAt":  "2021-10-21T15:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The above could be solved by forcing new JIT requests to wait.\r\n\r\nI do not think that would work. It would lead to deadlocks (JITing a method on one thread can be blocked by JITing a method on different thread) and/or startup performance regressions.",
                                           "updatedAt":  "2021-10-21T15:59:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44j1l2",
                                           "createdAt":  "2021-10-21T19:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Btw, reloc is not supported on Linux at all:\r\n```csharp\r\nprivate static int field = 0;\r\n\r\nstatic void DoWork(object o)\r\n{\r\n    if (o != null)\r\n        field = 42;\r\n}\r\n```\r\nTier0 codegen on Windows vs Linux (actual Linux, not altjit) with TieredPGO=1: https://www.diffchecker.com/QYRmJO1J - both the block counter (PGO) and `field` access don\u0027t use reloc on Linux (on the right)",
                                           "updatedAt":  "2021-10-21T19:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VbGDe",
                                           "createdAt":  "2023-02-16T14:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Just wanted to comment since I\u0027ve looked at this in relation to #82213 \r\n\r\nI\u0027m not convinced this is terribly difficult or even a lot of work to make happen. We already have a mechanism for patching instructions (`jumps` in particular) in the emitter.\r\n\r\nLooking at things, we could extend `instrDescJmp` to instead be something like `instrDescPatchable`. On 32-bit, we\u0027d be extending the struct size by 4-bytes to accommodate more info and on 64-bit we\u0027d be taking up the existing 4-bytes of padding space.\r\n\r\nIn particular we\u0027d want a byte to track a patch-point kind (call vs jump vs anythingFuture) and we\u0027d want the potential 32-bit relative address tracked fully (which would push the 2-3 bit flags into the remaining 3 bytes, and allow up to 21 more bit flags in the future).\r\n\r\nWe\u0027d then want `emitIns_Call` to add an entry to the \"patch list\" for patchable candidates and update the few places that are handling `emitJumpList` today to take the new patch kind into account.\r\n\r\nThis would ultimately take our existing functionality and extend it to be more generally usable. Given the scenarios that potentially patchable instructions come up, I wouldn\u0027t expect this to be have a net negative impact, particularly given we\u0027d be emitting smaller code than we already are.\r\n\r\n-- In particular a patchable call needs to be an already constant address that is within the +/- 2GB window of the general method address + unpatched offset. This is primarily going to impact P/Invokes and indirect calls, both of which are rare and allows us to skip creating patch points for things that are \"definitely out of range\"\r\n\r\n-- I also think there\u0027s something to be said for the point made above around having a small percentage buffer on the window. That is, we already disable optimizations for \"very large\" methods and so if we\u0027re only doing patch points in T1 code then we can effectively guarantee that something which is `+/- (2GB - x%)` of the method base address will definitely be in range. Since today, we\u0027re already falling back to a recompilation for the case where the relocation fails, falling back to MinOpts for such an odd scenario case doesn\u0027t seem unreasonable. Notably we also don\u0027t need to fallback to MinOpts. The codegen stream is still fine and so we really only need to \"redo emit\" with the RIP relative call optimization disabled.",
                                           "updatedAt":  "2023-02-16T14:23:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vbi4s",
                                           "createdAt":  "2023-02-16T15:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not see how the instruction patching scheme helps. Today, the steps are like this:\r\n1. JIT computes the code layout. It needs to guess whether the call target is going near or far.\r\n2. JIT asks VM for code buffer of given size.\r\n3. JIT writes the code into the code buffer.\r\n\r\nHow does the instruction patching fits into or modifies this scheme?",
                                           "updatedAt":  "2023-02-16T15:37:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VbjaM",
                                           "createdAt":  "2023-02-16T15:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Notably we also don\u0027t need to fallback to MinOpts\r\n\r\nI don\u0027t think we do that, afair, we just turn them off globally and all future compilations including current won\u0027t just use them.\r\n(well, not for calls, for calls we just emit jump-stubs in that case and we\u0027re fine continue relying on relocs).\r\n\r\nAfair, for this issue we planned to slightly refactor code manager to let jit know early whether it has good chances for relocs or not",
                                           "updatedAt":  "2023-02-16T15:38:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VboGs",
                                           "createdAt":  "2023-02-16T15:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e How does the instruction patching fits into or modifies this scheme?\r\n\r\nFor x64, if we can patch instructions then we have the ability to estimate potentially patchable `calls` as 9 or 12-bytes.\r\n\r\nThe difference is:\r\n```asm\r\nmov rax, cns64    ; 10-bytes\r\ncall rax          ;  2-bytes\r\n\r\n; For some addresses we also do this\r\nmov rax, cns32    ; 7-bytes\r\ncall rax          ;  2-bytes  \r\n```\r\n\r\nvs what we could emit\r\n```asm\r\ncall [rip+off32] ; 6-bytes\r\n\r\n; For some addresses we also can do this\r\ncall rel32       ; 5-bytes\r\n```\r\n\r\nWe\u0027re basically estimating patchable `calls` could be up to 9 or 12-bytes (depending on if its a sign-extendable 32-bit constant or a true 64-bit constant) and then patching them to be as few as 5-6 bytes. This is exactly how jumps are done today (we estimate \"worst case\" and patch to be \"best case\"). It\u0027s also no worse than what we actually have today which is such calls actually being the larger size.\r\n\r\nIt would require a very minor change in how `Lowering` handles the calls for it to assign the return register as a temporary to the `CALL` node, rather than having a non-contained child node track the register instead.",
                                           "updatedAt":  "2023-02-16T15:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VbpZG",
                                           "createdAt":  "2023-02-16T15:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is also another option of emitting a method local constant that is guaranteed to be RIP relative for the fallback case.\r\n\r\nThat is, if we determine \"real address\" cannot be RIP relative, we can pessimize the case by emitting a method constant (either like we do for Arm64 where it actually trails the method or like for x64 where its in another section of memory) and just emitting a `call [rip+off32]` anyways\r\n\r\nThere are quite a few options here and many of them are not complex and would resolve the general case without us needing to globally disable relocs or fallback to recompiling the method.",
                                           "updatedAt":  "2023-02-16T15:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vbt0N",
                                           "createdAt":  "2023-02-16T16:06:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Most of the calls are expected to be always rip-relative, ~~the idea to redirect them to data section instead of jump-stub in a failed case is nice (I think we discussed it somewhere) but not sure it will also work nicely with memory loads/stores especially on arm in terms of performance in the failed case (likely one).~~ Actually, not I\u0027m not sure I understand what you mean - `call [rip+off32]` won\u0027t work for an address emitted in the data section because in most cases calls are indirect in the first place.\r\n\r\nJIT still needs a more accurate info earlier to plan things, e.g. perform aggressive CSE if the address is very likely won\u0027t be reachable",
                                           "updatedAt":  "2023-02-16T16:09:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vbws8",
                                           "createdAt":  "2023-02-16T16:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e There are quite a few options here and many of them are not complex and would resolve the general case without us needing to globally disable relocs or fallback to recompiling the method.\r\n\r\nYes, there are option. I think that the scheme you have described would lead to overestimating allocated code size buffer sizes and a bunch of unused space in the codeheap. Do you agree? We have been talking about changing the code manager as part of the solution (https://github.com/dotnet/runtime/issues/60712#issuecomment-1433286284) to avoid this problem.",
                                           "updatedAt":  "2023-02-16T16:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vbw0w",
                                           "createdAt":  "2023-02-16T16:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Actually, not I\u0027m not sure I understand what you mean - call [rip+off32] won\u0027t work for an address emitted in the data section because in most cases calls are indirect in the first place.\r\n\r\nThis is specifically for when the address is a known constant such as `static readonly delegate*` or for already resolved P/Invokes (including SGCT P/Invokes) and therefore we don\u0027t have an indirection. But would also apply to when the normal reloc space runs out since you can always get something RIP local to the method.\r\n\r\nTo your first point, yes Arm64 may need some slightly different tweaks or handling than what will work for x64. In general it does do simple loads for \"method local constants\" however (e.g. `float`, `double`, and `SIMD` constants at the very least are typically a `ldr s0, [@RWD##]`)",
                                           "updatedAt":  "2023-02-16T16:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vb4Nz",
                                           "createdAt":  "2023-02-16T16:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I think that the scheme you have described would lead to overestimating allocated code size buffer sizes and a bunch of unused space in the codeheap. Do you agree?\r\n\r\nYes, but also no.\r\n\r\nIf we treated all calls as patchable, that would be problematic as that would unnecessarily increase the size of what\u0027s being allocated as compared to today.\r\n\r\nHowever, I\u0027m not suggesting we treat all calls as patchable as we really only need to treat calls that could be within the +/-2GB window as patchable. Something that is +3GB from the method can be skipped entirely. Likewise patching can be skipped for any calls that are already loading from a non-relative indirection.\r\n\r\nFor the remaining things that could be patchable, some of those are then `P/Invokes` (either `SGCT` annotated or already resolved as of the latest PR). For those cases we\u0027re emitting the following 100% of the time today:\r\n```xasm\r\nmov rax, cns32\r\ncall rax\r\n\r\n-or-\r\n\r\nmov rax, cns64\r\ncall rax\r\n```\r\n\r\nThis means we\u0027re already over-estimating from the more optimal case of `5-bytes` if the address happened to be relative. So as compared to today, we\u0027ll have no increase to method size allocation. We\u0027ll just be able to emit the more efficient code. We could also handle this such that we estimate 6 instead of 12. If it fits in the 5 byte relative, we do that and otherwise we emit a `call [@RWD##]` which we can guarantee is RIP relative (as we do on Arm64 today with float/double/simd constants for example).\r\n\r\nThere are then the other cases, like managed calls, where we want to emit a `call [rip+offs32]` since we want to load the address from memory somewhere and its not from a method local constant. For these, the estimation today is `6-bytes` and if we determine that it \"can\u0027t fit\" in the RIP relative window, we disable relocs and recompile the method (significant overhead and additional JIT time).  -- Noting this fallback to recompilation is also I think unnecessary. We should just need to rerun emit with a flag that says \"no relocs\", not recompile the whole thing\r\n\r\nThis latter case is the scenario where we\u0027d end up increasing the unused space if we started overestimating all of these to fallback to `mov rax, cns64; call [rax]` for the case where RIP relative wasn\u0027t possible (since that\u0027d be `+3-6` bytes per call). For this, the handling is a little bit trickier but overall I think the fix is along the lines of https://github.com/dotnet/runtime/issues/80589, where we want the emitter to be able to soft reserve some reusable space up front for doing the emit and then afterwards when we have the actual \"exact size\" to allocate the real space and copy it over. Doing that makes the emitter altogether more flexible and allows more interesting codegen optimizations and peepholes",
                                           "updatedAt":  "2023-02-16T16:38:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vb6tf",
                                           "createdAt":  "2023-02-16T16:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e There are then the other cases, like managed calls, where we want to emit a call [rip+offs32] since we want to load the address from memory somewhere and its not from a method local constant. For these, the estimation today is 6-bytes and if we determine that it \"can\u0027t fit\" in the RIP relative window, we disable relocs and recompile the method (significant overhead and additional JIT time).\r\n\r\nManaged calls use jump-stubs if RIP fails, so managed calls almost always look like this:\r\n\r\n```asm\r\ncall [rip+offset] ;; target is either precode slot or jump-stub that goes to precode by full address\r\n```\r\n\r\nno re-compilation happens in this case.\r\n\r\nTo avoid jump stubs and use data section instead you need to patch it to\r\n\r\n```asm\r\nmov reg, [rip+localoffset]\r\ncall [reg]\r\n```\r\nbut that needs a register that you might not have in the emitter.",
                                           "updatedAt":  "2023-02-16T16:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vb8NZ",
                                           "createdAt":  "2023-02-16T16:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e but that needs a register that you might not have in the emitter.\r\n\r\nThis gets back to \"we always have a register available here\".\r\n\r\nThat is, for the default x64 calling convention `RAX` is always caller save (considered volatile across the call boundary) and is not used to pass any parameters. AFAIK, all of the calling conventions we support have a similar premise and there is even special handling in LSRA for `GenTreeCall::gtControlExpr` to go in this register when it\u0027s present (that is when `gtControlExpr != nullptr` and therefore `gtDirectAddress == nullptr`).\r\n\r\nThus, we just need to slightly modify the logic for it to be available via `GetSingleTempReg` (or similar) on the call node for it to be \"safe\".",
                                           "updatedAt":  "2023-02-16T16:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VcBeK",
                                           "createdAt":  "2023-02-16T16:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2Ns9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-02-16T17:06:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e However, I\u0027m not suggesting we treat all calls as patchable as we really only need to treat calls that could be within the +/-2GB window as patchable. Something that is +3GB from the method can be skipped entirely. \r\n\r\nThat is the main problem for now - the current getRelocHint impl just checks the address whether it\u0027s +/- 2GB around coreclr, not around the method itself. We need to fix that first so we can rely on it to filter-out 100% bad cases",
                                           "updatedAt":  "2023-02-16T16:59:37Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Runtime\u003c-\u003eJIT reloc hinting mechanism needs work ",
        "labels":  [
                       "arch-x64",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62302",
        "createdAt":  "2021-12-02T22:23:22Z",
        "number":  62302,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3dAEw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-24T15:06:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-10-30T15:46:34Z",
        "body":  "On x64 we emit the following code for jump stubs:\r\n```asm\r\nmov rax, 123456789abcdef0h\r\njmp rax\r\n```\r\nas I understand from https://github.com/dotnet/runtime/blob/70d20f1445127d6473283047d0a551ccf85f897f/src/coreclr/vm/amd64/cgenamd64.cpp#L505-L507\r\n\r\nwhile on arm64 we make a memory load (from data section via pc):\r\n```asm\r\nldr x16, [pc, #8]\r\nbr  x16\r\n[target address]\r\n```\r\nhttps://github.com/dotnet/runtime/blob/eeb79b33d2a602915d4bd0153945fff75abdbbf7/src/coreclr/vm/arm64/cgencpu.h#L294-L296\r\n\r\nI\u0027m just wondering if it\u0027s not faster to do what x64 does and emit the const directly even if it takes 4 instructions to populate it...\r\n```asm\r\nmov     x8, #9044\r\nmovk    x8, #9268, lsl #16\r\nmovk    x8, #61203, lsl #32\r\nmovk    x8, #43981, lsl #48\r\nbr      x8\r\n```\r\nI\u0027m asking because I have a feeling that it could be a bottleneck if I read it correctly from the TE traces (Plaintext benchmark):\r\n![image](https://user-images.githubusercontent.com/523221/144512647-b4eeffe5-9298-490b-951a-5f11b3b24ce0.png)\r\n\r\ncc @dotnet/jit-contrib @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTUPKBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46trg4",
                                           "createdAt":  "2021-12-02T22:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "~~Also, doesn\u0027t arm64 allow us to do just `br [pc, #8]`?~~ it doesn\u0027t.",
                                           "updatedAt":  "2021-12-02T22:30:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ttGw",
                                           "createdAt":  "2021-12-02T22:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "echesakov",
                                           "body":  "If distance between `pCode` and `target` smaller than 128MB I guess we could do\r\n```asm\r\nb \u003cpcRelDistance\u003e\r\n```",
                                           "updatedAt":  "2021-12-02T22:40:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tuRZ",
                                           "createdAt":  "2021-12-02T22:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Wouldn\u0027t it take 4 instructions to populate an address constant in the worst case?",
                                           "updatedAt":  "2021-12-02T22:49:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tvWM",
                                           "createdAt":  "2021-12-02T22:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "We are not good in hoisting address constant population, so if this is part of the loop, we might regress. ",
                                           "updatedAt":  "2021-12-02T22:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46txS3",
                                           "createdAt":  "2021-12-02T23:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Note that we require that the target is atomically patchable without suspending the execution. It makes it close to impossible to split this into multiple instructions.\r\n\r\nI agree that the whole scheme for how we deal with the precodes and back patching is likely very suboptimal on non-x86 architectures (and maybe even on current x86). I think the more optimal path may look like this:\r\n\r\n- Loading of the indirection is inlined into the JITed code. The direct call to indirect jump that we have there today is replaced with indirect call - it should be an improvement. The JITed code will look like this:\r\n```\r\n...\r\n    ldr    x16, [pc + 0x1230] // Indirection cell that lives in the local data section\r\n    blx    x16\r\n...\r\n```\r\n\r\n- Keep track of the indirection cells that live in the local data sections. If tiering comes up with a new copy of method, we need to patch them all to point to the new method.\r\n\r\n- We can also consider emitting direct call to the actual method for cases when we know that the target method is not going to change because of it reached the final tier. The direct calls would have to be treated as if the method was inlined by profiler ReJIT. ",
                                           "updatedAt":  "2021-12-02T23:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tyhi",
                                           "createdAt":  "2021-12-02T23:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I\u0027m just wondering if it\u0027s not faster to do what x64 does and emit the const directly even if it takes 3 instructions\r\n\r\nMy bet would be that the bottleneck is more caused more by the call + indirect jump combination than by the memory load. Patterns like that used to cause pipeline stalls on x86 in the past, and I think it is likely that they are problem for arm64 too.",
                                           "updatedAt":  "2021-12-02T23:22:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ussK",
                                           "createdAt":  "2021-12-03T08:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@jkotas thanks for a detailed explanation! 👍\r\n\r\n\u003e Wouldn\u0027t it take 4 instructions to populate an address constant in the worst case?\r\n\r\n@BruceForstall Right, I was wondering if it\u0027s still faster, because otherwise I\u0027d expect native compilers to always prefer doing a memory load from data section rather than doing 4 movs (e.g. https://godbolt.org/z/cWYsTq6P6). I played locally with `llvm-mca` tool targeting `-mcpu=apple-a13`:\r\n\r\n![image](https://user-images.githubusercontent.com/523221/144571690-7bcbe6e7-0c1d-4c20-afd3-9a5b5f134d43.png)\r\n\r\nFrom what I read it takes 3x less cycles to do 4 movs.\r\n\r\n",
                                           "updatedAt":  "2021-12-03T08:50:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46vlH1",
                                           "createdAt":  "2021-12-03T14:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFJO_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-12-03T14:13:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think we should look into optimizing the jump stubs and friends for arm64. I agree with your initial observation that there is likely bottleneck.",
                                           "updatedAt":  "2021-12-03T14:10:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc461N0y",
                                           "createdAt":  "2021-12-06T18:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I guess we also more likely to hit a jump stub on ARM64, quoting [jump-stubs.md](https://github.com/dotnet/runtime/blob/main/docs/design/features/jump-stubs.md):\r\n\r\n\u003e The need for jump stubs only arises when jumps of greater than 2GB range (on x64; 128MB on arm64) are required\r\n\r\nso even pretty simple TE benchmarks hit that.",
                                           "updatedAt":  "2021-12-06T18:12:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48biLh",
                                           "createdAt":  "2022-01-16T10:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Just noticed that a completely empty `void Main() {}` program (in TieredCompilation=0 mode) emits just one jump-stub on x64 (for `ProcessCLRException`) and 35 on arm64.",
                                           "updatedAt":  "2022-01-16T10:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48bjUd",
                                           "createdAt":  "2022-01-16T11:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "The following methods request a jump-stub on arm64 during compilation of a completely empty program in TC=0:\r\n```\r\ngetNextJumpStub from System.Runtime.CompilerServices.CastHelpers::StelemRef, sig=void *(class System.Array,int32,object)\r\ngetNextJumpStub from System.Runtime.CompilerServices.CastHelpers::StelemRef, sig=void *(class System.Array,int32,object)\r\ngetNextJumpStub from System.AppContext::Setup, sig=void *(char**,char**,int32)\r\ngetNextJumpStub from System.Collections.Generic.Dictionary`2[__Canon,__Canon]::.ctor, sig=instance void *(int32,class System.Collections.Generic.IEqualityComparer`1\u003c!0\u003e)\r\ngetNextJumpStub from System.Collections.Generic.Dictionary`2[__Canon,__Canon]::Initialize, sig=instance int32 *(int32)\r\ngetNextJumpStub from System.Collections.Generic.Dictionary`2[__Canon,__Canon]::Initialize, sig=instance int32 *(int32)\r\ngetNextJumpStub from System.Collections.HashHelpers::GetPrime, sig=int32 *(int32)\r\ngetNextJumpStub from System.Collections.HashHelpers::GetPrime, sig=int32 *(int32)\r\ngetNextJumpStub from System.Collections.HashHelpers::GetPrime, sig=int32 *(int32)\r\ngetNextJumpStub from System.Collections.HashHelpers::GetPrime, sig=int32 *(int32)\r\ngetNextJumpStub from System.Collections.HashHelpers::.cctor, sig=void *()\r\ngetNextJumpStub from System.Collections.HashHelpers::.cctor, sig=void *()\r\ngetNextJumpStub from System.Collections.Generic.EqualityComparer`1[__Canon]::get_Default, sig=class System.Collections.Generic.EqualityComparer`1\u003c!0\u003e *()\r\ngetNextJumpStub from System.Collections.Generic.EqualityComparer`1[__Canon]::.cctor, sig=void *()\r\ngetNextJumpStub from System.Collections.Generic.EqualityComparer`1[__Canon]::.cctor, sig=void *()\r\ngetNextJumpStub from System.Collections.Generic.ComparerHelpers::CreateDefaultEqualityComparer, sig=object *(class System.Type)\r\ngetNextJumpStub from System.Runtime.CompilerServices.CastHelpers::ChkCastAny, sig=object *(void*,object)\r\ngetNextJumpStub from System.Environment::.cctor, sig=void *()\r\ngetNextJumpStub from System.Environment::.cctor, sig=void *()\r\ngetNextJumpStub from System.Threading.AutoreleasePool::CreateAutoreleasePool, sig=void *()\r\ngetNextJumpStub from System.StartupHookProvider::ProcessStartupHooks, sig=void *()\r\ngetNextJumpStub from System.StartupHookProvider::ProcessStartupHooks, sig=void *()\r\ngetNextJumpStub from System.AppContext::TryGetSwitch, sig=bool *(string,bool\u0026)\r\ngetNextJumpStub from System.AppContext::TryGetSwitch, sig=bool *(string,bool\u0026)\r\ngetNextJumpStub from System.Diagnostics.Tracing.EventListener::get_EventListenersLock, sig=object *()\r\ngetNextJumpStub from System.Runtime.InteropServices.Marshal::GetFunctionPointerForDelegate, sig=native int *(class System.Delegate)\r\ngetNextJumpStub from System.Diagnostics.Tracing.EventListener::AddEventSource, sig=void *(class System.Diagnostics.Tracing.EventSource)\r\ngetNextJumpStub from System.Diagnostics.Tracing.EventListener::AddEventSource, sig=void *(class System.Diagnostics.Tracing.EventSource)\r\ngetNextJumpStub from System.Diagnostics.Tracing.EventListener::AddEventSource, sig=void *(class System.Diagnostics.Tracing.EventSource)\r\ngetNextJumpStub from Program::Main, sig=int32 *(string[])\r\ngetNextJumpStub from System.Runtime.Loader.AssemblyLoadContext::OnProcessExit, sig=void *()\r\ngetNextJumpStub from System.Diagnostics.Tracing.EventListener::DisposeOnShutdown, sig=void *()\r\ngetNextJumpStub from System.Runtime.CompilerServices.CastHelpers::StelemRef_Helper_NoCacheLookup, sig=void *(object\u0026,void*,object)\r\ngetNextJumpStub from System.Threading.Monitor::IsEntered, sig=bool *(object)\r\ngetNextJumpStub from System.GC::SuppressFinalize, sig=void *(object)\r\n```\r\nnone of them do that on x64",
                                           "updatedAt":  "2022-01-16T11:21:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48bj6v",
                                           "createdAt":  "2022-01-16T11:26:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Apparently all FCalls use jump-stubs, e.g.:\r\n```csharp\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\nusing System;\r\n\r\npublic class Program\r\n{\r\n    static void Main() =\u003e CallCos(3.14);\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static double CallCos(double d) =\u003e Math.Cos(d);\r\n}\r\n```\r\n```asm\r\n        00000000          stp     fp, lr, [sp,#-16]!\r\n        00000000          mov     fp, sp\r\n        00000000          bl      System.Math:Cos(double):double  ;; \u003c--- jump stub\r\n        00000000          ldp     fp, lr, [sp],#16\r\n        00000000          ret     lr\r\n```\r\nIt explains why some microbenchmarks are slow - almost all Math.* functions go via double calls basically",
                                           "updatedAt":  "2022-01-16T12:13:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48bmE9",
                                           "createdAt":  "2022-01-16T12:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@jakobbotsch suggested to change these constants https://github.com/dotnet/runtime/blob/23de81782ca9cd24f024bd598563d363df29660c/src/coreclr/pal/src/include/pal/virtual.h#L188-L193 to 10mb and 128mb and it helped managed code to reach fcalls via reloc 😮 ",
                                           "updatedAt":  "2022-01-16T13:18:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48bn7-",
                                           "createdAt":  "2022-01-16T13:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCVa7vw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-30T16:09:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "```csharp\r\nusing BenchmarkDotNet.Attributes; \r\nusing BenchmarkDotNet.Running; \r\n \r\npublic class Program \r\n{ \r\n    static void Main(string[] args) =\u003e \r\n        BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args); \r\n \r\n    [Benchmark] \r\n    [Arguments(3.14)] \r\n    public double Test(double d) =\u003e Math.Cos(d) * Math.Sin(d) * Math.Tan(d);  // 3 InternalCalls\r\n}\r\n```\r\n```\r\n|  Method |        Job |               Toolchain |    d |      Mean |     Error |    StdDev | Ratio |\r\n|-------- |----------- |------------------------ |----- |----------:|----------:|----------:|------:|\r\n|    Test | Job-UWEEFQ |      /Core_Root/corerun | 3.14 |  9.884 ns | 0.0076 ns | 0.0071 ns |  1.00 |\r\n|    Test | Job-HATVTO | /Core_Root_base/corerun | 3.14 | 28.235 ns | 0.1235 ns | 0.1155 ns |  2.86 |\r\n```\r\n😮",
                                           "updatedAt":  "2022-01-16T13:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GUbaa",
                                           "createdAt":  "2022-07-10T16:38:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "https://github.com/dotnet/runtime/pull/70707 improved perf here, mainly, because we used to use `128Mb` as a step when we were probing memory around coreclr to reserve. That step didn\u0027t make sense for arm and was decreased to 4Mb resulting in more chances to successfully reserve memory near coreclr.\r\n\r\nAlthough, there are still ways to improve it - moving to Future.",
                                           "updatedAt":  "2022-07-10T16:38:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NP2Uj",
                                           "createdAt":  "2022-10-29T22:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "_Moving here,_ so apparently it\u0027s also an issue for x64 for large apps:\r\n\r\nI noticed that BingSNR (when I run it locally on Windows-x64) emits 44k jump stubs (44k calls to `allocJumpStubBlock`) - it happens because the app itself is quite big and its working set is 7-10Gb (thus, we likely have multiple loaderheaps) running locally for a benchmark. Also I noticed that the process of emitting jump stubs is quite hot, e.g. here is a flamegraph for a randomly selected time frame after start: 50s - 60s:\r\n\r\n![image](https://user-images.githubusercontent.com/523221/198849593-82d7b696-fa10-490c-b8c8-0e14b2e256a4.png)\r\n\r\nCan we do anything with this? E.g. just like in https://github.com/dotnet/runtime/pull/64148 to emit 64bit addresses to precode slots directly in methods",
                                           "updatedAt":  "2022-10-29T22:16:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NQWYn",
                                           "createdAt":  "2022-10-30T06:26:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I noticed that the process of emitting jump stubs is quite hot, e.g. here is a flamegraph for a randomly selected time frame after start: 50s - 60s:\r\n\r\nNotice that the expensive path goes into HostCodeHeap. HostCodeHeap is used for DynamicMethods. Each dynamic method gets its own set of jump stubs that are all freed when the dynamic method is collected. It is how we ensure that the dynamic stubs are not leaking when the dynamic methods are collected. It means the cost of the jump stubs is not amortized for dynamic methods. I think it is why they are expensive.\r\n\r\n\u003e emit 64bit addresses to precode slots directly in methods\r\n\r\nYes, I think it would make sense for dynamic methods at least. (Alternatively, we may be able to come up with some sort of ref-counting scheme for jumps stubs in dynamic methods so that their cost gets amortized.)",
                                           "updatedAt":  "2022-10-30T06:27:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NQ4Xo",
                                           "createdAt":  "2022-10-30T14:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e HostCodeHeap is used for DynamicMethods\r\n\r\nAh, so for this specific project it\u0027s the same problem with redundant dynamic methods (at least they look so) that they might fix",
                                           "updatedAt":  "2022-10-30T14:16:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NQ8oE",
                                           "createdAt":  "2022-10-30T15:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuuB9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2022-10-30T15:49:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, there are two different concerns. (1) Is given usage of dynamic methods warranted? (2) Does runtime behave efficiently for large projects with a lot of dynamic methods? It is still worth fixing (2) even if the answer for (1) is negative for BingSNR.",
                                           "updatedAt":  "2022-10-30T15:46:34Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Optimize jump stubs on arm64",
        "labels":  [
                       "arch-arm64",
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65543",
        "createdAt":  "2022-02-18T02:59:03Z",
        "number":  65543,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCPUEjw==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "jkotas",
                                            "createdAt":  "2022-02-18T06:02:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-23T20:38:02Z",
        "body":  "A followup to a bugfix PR as discussed in \r\n\r\nhttps://github.com/dotnet/runtime/pull/65358#discussion_r807107816",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPjcETA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-NwRM",
                                           "createdAt":  "2022-02-18T02:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-18T02:59:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unify thread cleanup on use of TlsDestructionMonitor",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65787",
        "createdAt":  "2022-02-23T17:00:46Z",
        "number":  65787,
        "author":  "TalAloni",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T16:47:27Z",
        "body":  "### Description\r\n\r\nThe issue was observed twice on .NET Core 3.1.10 (out of \u003e1000 repro attempts).\r\nWe have captured two memory dumps and used them to pinpoint the source of the issue, which seems to be an incorrect usage of `movdqa` assembly instruction in [AsmMacros.inc](https://github.com/dotnet/coreclr/blob/b4f19e3e849044ffe4feb9f7788edda9a129a773/src/vm/amd64/AsmMacros.inc#L78) for operand that is not divisible by 16.\r\n\r\n![image](https://user-images.githubusercontent.com/981778/155360761-08298717-241a-47a4-af7b-578cfda5b1f5.png)\r\n\r\n![image](https://user-images.githubusercontent.com/981778/155360792-241ed5d7-018d-471a-8839-0713590505e1.png)\r\n\r\nAccording to the definition of the assembly instruction `movdqa` (see [here](https://reverseengineering.stackexchange.com/a/13751) and [here](http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/mergedProjects/instructions/instruct32_hh/vc183.htm)), the memory operand should be aligned by 16.\r\nAs can be seen, in both cases the operand is not divisible by 16, which triggers an Access violation (0xc0000005).\r\n\r\nFor reference, here is the a link to the source code containing this assembly instruction:\r\nhttps://github.com/dotnet/coreclr/blob/b4f19e3e849044ffe4feb9f7788edda9a129a773/src/vm/amd64/AsmMacros.inc#L78\r\n\r\n\r\n### Reproduction Steps\r\n\r\nThis issue is very hard to reproduce, only 2 of our 1000+ attempts reproduced the issue.\r\n\r\n### Expected behavior\r\n\r\nWe expect that the process would not crash\r\n\r\n### Actual behavior\r\n\r\nThe process crash due to Access violation (0xc0000005)\r\n\r\n### Regression?\r\n\r\nWe have migrated from .NET Framework 4.7.2 to .NET Core 3.1.10, the issue did not occur under .NET Framework 4.7.2\r\n\r\n### Known Workarounds\r\n\r\nThere isn\u0027t any workaround as far as I can tell\r\n\r\n### Configuration\r\n\r\n.NET Core 3.1.10,\r\nWindows Server 2012 R2,\r\n64-bit process.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP48W8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-hnpa",
                                           "createdAt":  "2022-02-23T17:00:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-23T17:00:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-h8W7",
                                           "createdAt":  "2022-02-23T18:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "rsp reqister is expected to be aligned at 16 bytes on x64. If you are seeing misaligned access here, the problem is that some code up the stack is creating misaligned rsp. Could you please share the stacktrace of the crash or find the code that is creating the misaligned rsp?",
                                           "updatedAt":  "2022-02-23T18:30:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-h-cc",
                                           "createdAt":  "2022-02-23T18:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Thanks, here is the top of the stack (the rest is user code):\r\n\r\n\r\n```\r\nOS Thread Id: 0x1f30 (46)\r\nCurrent frame: coreclr!ThePreStub + 0x30 [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\ThePreStubAMD64.asm:13]\r\nChild-SP         RetAddr          Caller, Callee\r\n000000426865DA10 00007ffc99965a65 coreclr!MethodTable::CheckRunClassInitThrowing + 0xb5 [f:\\workspace\\_work\\1\\s\\src\\vm\\methodtable.cpp:3762], calling coreclr!MethodTable::DoRunClassInitThrowing [f:\\workspace\\_work\\1\\s\\src\\vm\\methodtable.cpp:3429]\r\n000000426865DA18 00007ffc3d5e9870 (MethodDesc 00007ffc39ff1790 + 0x30 System.Environment.get_CurrentManagedThreadId()), calling coreclr!ThreadNative::GetManagedThreadId [f:\\workspace\\_work\\1\\s\\src\\vm\\comsynchronizable.cpp:687]\r\n000000426865DA28 00007ffc99971ca2 coreclr!JIT_GenericHandle_Framed + 0xca [f:\\workspace\\_work\\1\\s\\src\\vm\\jithelpers.cpp:3855], calling coreclr!LazyMachStateCaptureState [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\getstate.asm:62]\r\n000000426865DA40 00007ffc99a2b119 coreclr!JIT_GetSharedNonGCStaticBase_Helper + 0xd9 [f:\\workspace\\_work\\1\\s\\src\\vm\\jithelpers.cpp:1414], calling coreclr!__security_check_cookie [d:\\agent\\_work\\2\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000426865DAB0 00007ffc417f6ce6 (MethodDesc 00007ffc41148a50 + 0x286 System.Linq.Enumerable.Select[[System.__Canon, System.Private.CoreLib],[System.UInt64, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1\u003cSystem.__Canon\u003e, System.Func`2\u003cSystem.__Canon,UInt64\u003e)), calling 00007ffc417f1f10 (stub for System.Linq.Enumerable+SelectListIterator`2[[System.__Canon, System.Private.CoreLib],[System.UInt64, System.Private.CoreLib]]..ctor(System.Collections.Generic.List`1, System.Func`2))\r\n```\r\n\r\n```\r\nOS Thread Id: 0x1284 (27)\r\nCurrent frame: coreclr!ThePreStub + 0x30 [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\ThePreStubAMD64.asm:13]\r\nChild-SP         RetAddr          Caller, Callee\r\n000000A351BBB878 00007fff97c98638 (MethodDesc 00007fff9187fba8 + 0x58 System.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib]].System.Collections.Generic.IEnumerable\u003cT\u003e.GetEnumerator()), calling coreclr!JIT_CheckedWriteBarrier [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\JitHelpers_Fast.asm:436]\r\n000000A351BBB888 00007fff977d4d44 (MethodDesc 00007fff91a85fa0 + 0x44 System.Collections.Generic.List`1+Enumerator[[System.__Canon, System.Private.CoreLib]].MoveNext()), calling coreclr!JIT_CheckedWriteBarrier [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\JitHelpers_Fast.asm:436]\r\n000000A351BBB898 00007ffff1295560 coreclr!JIT_GetSharedGCThreadStaticBase + 0x70 [f:\\workspace\\_work\\1\\s\\src\\vm\\jithelpers.cpp:1838], calling coreclr!__security_check_cookie [d:\\agent\\_work\\2\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000A351BBB8C8 00007fff94e9b3e4 (MethodDesc 00007fff91ce1828 + 0x194 System.Linq.Enumerable+SelectManySingleSelectorIterator`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].MoveNext()), calling coreclr!JIT_WriteBarrier [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\JitHelpers_Fast.asm:466]\r\n000000A351BBB918 00007ffff1bae158 (MethodDesc 00007fff96bba3d8 + 0x128 System.Linq.Enumerable.TryGetLast[[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1\u003cSystem.__Canon\u003e, System.Func`2\u003cSystem.__Canon,Boolean\u003e, Boolean ByRef))\r\n000000A351BBB9A8 00007ffff1bade5b (MethodDesc 00007fff96bba0d0 + 0x2b System.Linq.Enumerable.LastOrDefault[[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1\u003cSystem.__Canon\u003e, System.Func`2\u003cSystem.__Canon,Boolean\u003e)), calling 00007fff965f3bc8 (stub for System.Linq.Enumerable.TryGetLast[[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1, System.Func`2, Boolean ByRef))\r\n000000A351BBB9B0 00007fff97e01fa2 (MethodDesc 00007fff91cbeb48 + 0x92 System.Linq.Enumerable.SelectMany[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1\u003cSystem.__Canon\u003e, System.Func`2\u003cSystem.__Canon,System.Collections.Generic.IEnumerable`1\u003cSystem.__Canon\u003e\u003e)), calling coreclr!JIT_WriteBarrier [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\JitHelpers_Fast.asm:466]\r\n000000A351BBB9C0 00007fff970200f8 (MethodDesc 00007fff95b3e1d0 + 0x98 Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)), calling (MethodDesc 00007fff9187fd28 + 0 System.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib]].Reverse(Int32, Int32))\r\n000000A351BBB9F8 00007fff965f3bad 00007fff965f3bad, calling coreclr!PrecodeFixupThunk [F:\\workspace\\_work\\1\\s\\src\\vm\\amd64\\AsmHelpers.asm:251]\r\n000000A351BBBA00 00007fff97026ae9 (MethodDesc 00007fff95b3e068 + 0x159 Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)), calling 00007fff965f3ba8 (stub for System.Linq.Enumerable.LastOrDefault[[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1, System.Func`2))\r\n000000A351BBBA90 00007fff9701d4b8 (MethodDesc 00007fff95b3e040 + 0x5d8 Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)), calling 00007fff957a8d10 (stub for Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type))\r\n000000A351BBBC10 00007fff970192cd (MethodDesc 00007fff95b3e258 + 0x37d Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type))\r\n```\r\n",
                                           "updatedAt":  "2022-02-23T18:40:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-iCez",
                                           "createdAt":  "2022-02-23T19:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There are the noisy `!eestack` stacktraces. It is not possible to tell where things went wrong from them.\r\n\r\nCould you please share the accurate stacktraces from `!k` or `!clrstack`? ",
                                           "updatedAt":  "2022-02-23T19:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-iEU1",
                                           "createdAt":  "2022-02-23T19:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "!clrstack:\r\n\r\n```\r\nOS Thread Id: 0x1f30 (46)\r\n        Child SP               IP Call Site\r\n000000426865E8C8 00007ffc99a56470 [GCFrame: 000000426865e8c8] \r\n000000426865EB30 00007ffc99a56470 [DebuggerU2MCatchHandlerFrame: 000000426865eb30] \r\n```\r\n\r\n```\r\nOS Thread Id: 0x1284 (27)\r\n        Child SP               IP Call Site\r\n000000A351BBF160 00007ffff12f6470 [DebuggerU2MCatchHandlerFrame: 000000a351bbf160]\r\n```\r\n",
                                           "updatedAt":  "2022-02-23T19:07:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-iKD-",
                                           "createdAt":  "2022-02-23T19:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "\u003e rsp reqister is expected to be aligned at 16 bytes on x64. If you are seeing misaligned access here, the problem is that some code up the stack is creating misaligned rsp.\r\n\r\nDoes this mean that \u0027__PWTB_StackAlloc\u0027 should be divisible by 16? because it is not.\r\nWe can see `sub         rsp,68h` in the print-screen in the description, IIUC this is actually\r\n`alloc_stack     __PWTB_StackAlloc` we can see [here](https://github.com/dotnet/coreclr/blob/b4f19e3e849044ffe4feb9f7788edda9a129a773/src/vm/amd64/AsmMacros.inc#L400)\r\n\r\n\r\n",
                                           "updatedAt":  "2022-02-23T19:35:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-jnrt",
                                           "createdAt":  "2022-02-24T06:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e !clrstack:\r\n\r\nLooks like clrstack has troubles walking the stack. Could you please also share `k`?\r\n\r\n\u003e Does this mean that \u0027__PWTB_StackAlloc\u0027 should be divisible by 16? because it is not.\r\n\r\nNo. The aligned rsp is required at a callsite. It is ok for rsp to temporarily misaligned during method prolog and epilog. The invariant is that the total amount pushed by the method call (ie return address) and the method prolog must be divisible by 16. This invariant is maintained by `ThePreStub `.",
                                           "updatedAt":  "2022-02-24T06:06:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-jtWY",
                                           "createdAt":  "2022-02-24T06:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "`!k` result in `No export k found`\r\n\r\nkpL100\r\n```\r\n # Child-SP          RetAddr           Call Site\r\n00 00000042`6865d9e8 00007ffc`3a842ac0 coreclr!ThePreStub(void)+0x30\r\n01 00000042`6865da98 0000003f`0b0a7170 0x00007ffc`3a842ac0\r\n02 00000042`6865daa0 00000040`0c775c80 0x0000003f`0b0a7170\r\n03 00000042`6865daa8 00000042`570e0200 0x00000040`0c775c80\r\n04 00000042`6865dab0 00000000`00000004 0x00000042`570e0200\r\n05 00000042`6865dab8 00007ffc`417f6ce6 0x4\r\n06 00000042`6865dac0 00000040`0c775c80 0x00007ffc`417f6ce6\r\n07 00000042`6865dac8 00000040`0c59cfe8 0x00000040`0c775c80\r\n08 00000042`6865dad0 00000041`0c7875c8 0x00000040`0c59cfe8\r\n09 00000042`6865dad8 00000042`56278e50 0x00000041`0c7875c8\r\n0a 00000042`6865dae0 00000000`00000000 0x00000042`56278e50\r\n```\r\n\r\n ```\r\n# Child-SP          RetAddr           Call Site\r\n00 000000a3`51bbb878 00007fff`f1bae158 coreclr!ThePreStub(void)+0x30\r\n01 000000a3`51bbb928 00007fff`f1bade5b System_Linq!System.Linq.Enumerable.TryGetLast[System.__Canon]+0x128\r\n02 000000a3`51bbb9b8 00007fff`965f3bad System_Linq!System.Linq.Enumerable.LastOrDefault[System.__Canon]+0x2b\r\n03 000000a3`51bbba08 00007fff`97026ae9 0x00007fff`965f3bad\r\n04 000000a3`51bbba10 00000000`00000000 0x00007fff`97026ae9\r\n\r\n```\r\n\r\nI can send links to both dumps to your email address for further analysis.\r\n",
                                           "updatedAt":  "2022-02-24T06:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-jwQZ",
                                           "createdAt":  "2022-02-24T07:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Sent an email with download links",
                                           "updatedAt":  "2022-02-24T07:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-mf0S",
                                           "createdAt":  "2022-02-24T21:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Thank you for sharing the dumps. The dumps show very significant stack corruption. The content of the registers does not match with the content of the stack memory. For example, the memory at `rsp+0x68` should have values of saved registers but it is not the case (this is from the first dump):\r\n```\r\n0:046\u003e r\r\nrax=00007ffc416e1f10 rbx=000000426865d7b0 rcx=0000003f0b0a7170\r\nrdx=000000400c775c80 rsi=0000000000000000 rdi=000000426865d2c0\r\nrip=00007ffc99a56470 rsp=000000426865d9e8 rbp=000000426865dab0\r\n r8=00000042570e0200  r9=0000000000000004 r10=00007ffc416e1f20\r\nr11=0000000000000002 r12=000000426865e750 r13=000000426865e910\r\nr14=0000000000000004 r15=000000426865e8f8\r\niopl=0         nv up ei pl nz ac po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010214\r\ncoreclr!ThePreStub+0x30:\r\n00007ffc`99a56470 660f7f442420    movdqa  xmmword ptr [rsp+20h],xmm0 ss:00000042`6865da08=000000426865e7500000739c7710ad64\r\n0:046\u003e dd 000000426865d9e8  L50\r\n00000042`6865d9e8  00000000 00000000 0c5211f0 00000040\r\n00000042`6865d9f8  7710bb4c 0000739c 6865e8f8 00000042\r\n00000042`6865da08  7710ad64 0000739c 6865e750 00000042\r\n00000042`6865da18  99965a65 00007ffc 3d5e9870 00007ffc\r\n00000042`6865da28  00000000 00000000 99971ca2 00007ffc\r\n00000042`6865da38  6865d828 00000042 7710acbc 0000739c\r\n00000042`6865da48  99a2b119 00007ffc 0c775c80 00000040 \u003c- saved rdi - it should be same as the value above\r\n00000042`6865da58  4235daf0 00007ffc 0b0a6ea0 0000003f \u003c- saved rsi, rbx - it should be same as the values above\r\n00000042`6865da68  6865dab0 00000042 6865e750 00000042\r\n00000042`6865da78  6865e910 00000042 00000004 00000000\r\n00000042`6865da88  6865e8f8 00000042 3a842ac0 00007ffc\r\n00000042`6865da98  0b0a7170 0000003f 0c775c80 00000040\r\n00000042`6865daa8  570e0200 00000042 00000004 00000000\r\n00000042`6865dab8  417f6ce6 00007ffc 0c775c80 00000040\r\n00000042`6865dac8  0c59cfe8 00000040 0c7875c8 00000041\r\n00000042`6865dad8  56278e50 00000042 00000000 00000000\r\n00000042`6865dae8  0c520de8 00000040 3e5da5b8 00007ffc\r\n00000042`6865daf8  40731672 00007ffc 00000406 00000000\r\n00000042`6865db08  00000000 00000000 00000000 00000000\r\n00000042`6865db18  00000000 00000000 00000000 00000000\r\n```",
                                           "updatedAt":  "2022-02-24T21:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-mh0B",
                                           "createdAt":  "2022-02-24T21:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am not able to find any clues what might have happened to get into this state. You can try setting `COMPlus_StressLog=1` env variable and wait for the crash to occur. `COMPlus_StressLog=1` enables flight data recorder that stored information about what happened in the process recently. You can then dump it using `!DumpLog` command in debugger.",
                                           "updatedAt":  "2022-02-24T21:34:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-misu",
                                           "createdAt":  "2022-02-24T21:38:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Thanks for your analysis.\r\nSo are you suggesting that I\u0027ll try to reproduce with the  `COMPlus_StressLog=1`  environment variable and provide a third process crash dump from an environment that already had this set?",
                                           "updatedAt":  "2022-02-24T21:39:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-mjke",
                                           "createdAt":  "2022-02-24T21:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e try to reproduce with the COMPlus_StressLog=1 environment variable and provide a third process crash dump from an environment that already had this set?\r\n\r\nYep",
                                           "updatedAt":  "2022-02-24T21:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jF7G",
                                           "createdAt":  "2022-03-13T19:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Thank you for sharing the dump with stress log. I do not see anything interesting happening in the runtime on the thread that crashed in the dump.\r\n\r\nI think that the crash is likely caused by some code in the libraries that you are using, the problem is likely in managed/unmanaged interop.\r\n\r\nDo you have a hunch what it may be? For example, a library that does a lot managed/unmanaged interop that you had problems with it in the past.",
                                           "updatedAt":  "2022-03-13T19:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jF8t",
                                           "createdAt":  "2022-03-13T19:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` since it may be missing important information. Please refer to our [contribution guidelines](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report) for tips on how to report issues effectively.",
                                           "updatedAt":  "2022-03-13T19:11:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jKep",
                                           "createdAt":  "2022-03-13T21:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Thank you Jan,\r\nNo, I don\u0027t have any library to suspect, note that we did not have any issue before the migration from .NET Framework to .NET Core 3.1.\r\nI\u0027m not seeing what we could be using that would have such effect on registers.\r\nIs there a way to get additional information in order to pin-point the source of the issue?",
                                           "updatedAt":  "2022-03-13T21:09:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jb0_",
                                           "createdAt":  "2022-03-14T01:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTIWkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "SupinePandora43",
                                                                               "createdAt":  "2022-03-16T05:11:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I\u0027m not seeing what we could be using that would have such effect on registers.\r\n\r\nThe registers are not the problem. The problem is that the stack memory is overwritten. It is probably getting overwritten by some other thread. \r\n\r\nHere is a program that demonstrates what is likely happening. The program is going to crash with fatal errors and no way to tell how we got there. There are no breadcrumbs that would connect the crash with `OverwriteStackAsynchronously`.\r\n```csharp\r\nOverwriteStackAsynchronously();\r\n\r\nfor (;;) Console.WriteLine(\"Hello world!\");\r\n\r\nunsafe void OverwriteStackAsynchronously()\r\n{\r\n    int* p = GetStackPointer();\r\n\r\n    Task.Run(() =\u003e {\r\n        for (;;) for (int i = 0; i \u003c 100; i++) *(p-i) = i;\r\n    });\r\n\r\n    static unsafe int* GetStackPointer()\r\n    {\r\n        int x = 0;\r\n        return \u0026x;\r\n    }\r\n}\r\n```\r\n\u003e Is there a way to get additional information in order to pin-point the source of the issue?\r\n\r\nOne option is to try to catch the crash using TTD https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview , but it may be too time consuming given that the issue is hard to reproduce.\r\n\r\nDo you have any logging in your app? Can you see any patterns in what the app was doing that preceded this crash?\r\n\r\n\u003e we did not have any issue before the migration from .NET Framework to .NET Core 3.1.\r\n\r\nOne potential explanation of why you have not seen it in .NET Framework is that .NET Framework was slower and so the stack was overwritten too late to actually cause damage.",
                                           "updatedAt":  "2022-03-14T01:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jxbz",
                                           "createdAt":  "2022-03-14T04:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Thank you for the clear explanation.\r\nThe only pattern I was able to see so far (what the app was doing that preceded this crash) is Linq usage.",
                                           "updatedAt":  "2022-03-14T04:59:39Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  ".NET Core 3.1 - AsmMacros.inc - memory operand not aligned by 16 causing Access violation (0xc0000005)",
        "labels":  [
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66279",
        "createdAt":  "2022-03-07T02:19:31Z",
        "number":  66279,
        "author":  "VincentBu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-13T23:34:56Z",
        "body":  "Run: [runtime-coreclr gcstress0x3-gcstress0xc 20220306.1](https://dev.azure.com/dnceng/public/_build/results?buildId=1647673\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=45501334\u0026resultId=109135\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nCoreCLR Linux arm Checked gcstress0x3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7-bfcd90a-20200121150440\r\n\r\n- JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\n```\r\n**Error message:**\r\n```\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/6/2022 3:58:23 PM, end: 3/6/2022 4:58:23 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/JIT.opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ArrBoundBinaryOp.dll \u0027\u0027\r\n\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/6/2022 3:58:23 PM, end: 3/6/2022 4:58:23 PM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=/root/helix/work/correlation\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at JIT_opt._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_sh()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV3J-pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_MC_l",
                                           "createdAt":  "2022-03-07T02:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-03-07T02:19:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_OA0a",
                                           "createdAt":  "2022-03-07T12:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime-coreclr gcstress0x3-gcstress0xc 20220306.1](https://dev.azure.com/dnceng/public/_build/results?buildId=1647673\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=45501334\u0026resultId=109135\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nCoreCLR Linux arm Checked gcstress0x3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7-bfcd90a-20200121150440\r\n\r\n- JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\n```\r\n**Error message:**\r\n```\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/6/2022 3:58:23 PM, end: 3/6/2022 4:58:23 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/JIT.opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ArrBoundBinaryOp.dll \u0027\u0027\r\n\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/6/2022 3:58:23 PM, end: 3/6/2022 4:58:23 PM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=/root/helix/work/correlation\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at JIT_opt._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_sh()\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVincentBu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm32`, `os-linux`, `GCStress`, `area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-07T12:30:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_oEGO",
                                           "createdAt":  "2022-03-15T01:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in:  [runtime-coreclr r2r-extra 20220313.1](https://dev.azure.com/dnceng/public/_build/results?buildId=1661469\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=45727274\u0026resultId=109755\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nR2R Linux arm Checked gcstress0xf @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7-bfcd90a-20200121150440\r\n\r\n- JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\n\r\n```\r\n**Error message:**\r\n```\r\nrm: cannot remove \u0027IL-CG2/composite-r2r.dll\u0027: No such file or directory\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh: line 246: -r:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/IL-CG2/*.dll: No such file or directory\r\nrm: cannot remove \u0027/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.dll.rsp\u0027: No such file or directory\r\n\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 3/14/2022 6:56:09 AM, end: 3/14/2022 8:26:09 AM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/JIT.opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/IL-CG2/ArrBoundBinaryOp.dll\r\nResponse file: /root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.dll.rsp\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/IL-CG2/ArrBoundBinaryOp.dll\r\n-o:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.dll\r\n-r:/root/helix/work/correlation/System..dll\r\n-r:/root/helix/work/correlation/Microsoft..dll\r\n-r:/root/helix/work/correlation/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--targetarch:arm\r\n-O\r\nRunning CrossGen2:  dotnet /root/helix/work/correlation/crossgen2/crossgen2.dll @/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.dll.rsp\r\n\r\nEmitting R2R PE file: /root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.dll\r\nin ReleaseLock\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ArrBoundBinaryOp.dll \u0027\u0027\r\n\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 3/14/2022 6:56:09 AM, end: 3/14/2022 8:26:09 AM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=/root/helix/work/correlation\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at JIT_opt._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_sh()\r\n```",
                                           "updatedAt":  "2022-03-15T01:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AYPv5",
                                           "createdAt":  "2022-03-28T01:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in: [runtime-coreclr gcstress0x3-gcstress0xc 20220327.1](https://dev.azure.com/dnceng/public/_build/results?buildId=1684389\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=46096170\u0026resultId=109781\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nCoreCLR Linux arm Checked gcstress0x3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7-bfcd90a-20200121150440\r\n\r\n- JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\n\r\n```\r\n**Error message:**\r\n```\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/27/2022 3:18:14 PM, end: 3/27/2022 4:18:14 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/JIT.opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ArrBoundBinaryOp.dll \u0027\u0027\r\n\r\ncmdLine:/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/27/2022 3:18:14 PM, end: 3/27/2022 4:18:14 PM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=/root/helix/work/correlation\r\n/root/helix/work/workitem/e/JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at JIT_opt._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_._AssertionPropagation_ArrBoundBinaryOp_ArrBoundBinaryOp_sh()\r\n```",
                                           "updatedAt":  "2022-03-28T01:51:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HV9aQ",
                                           "createdAt":  "2022-07-27T15:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@BruceForstall since this is failing on arm32 only, is there a way to disable for that platform only? Seems like its just timing out on arm? ",
                                           "updatedAt":  "2022-07-27T15:51:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hy0jO",
                                           "createdAt":  "2022-08-03T21:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "\u003e @BruceForstall since this is failing on arm32 only, is there a way to disable for that platform only? Seems like its just timing out on arm?\r\n\r\nIf there is a way to disable for GCStress only on arm32, I don\u0027t know how. If possible, it should be documented in https://github.com/dotnet/runtime/blob/main/docs/workflow/ci/disabling-tests.md.  fwiw, the test seems aggressively slow. On the other hand, maybe GCStress=3 is too slow, also.",
                                           "updatedAt":  "2022-08-03T21:31:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WvqJZ",
                                           "createdAt":  "2023-03-06T02:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed again in: [runtime-coreclr gcstress0x3-gcstress0xc 20230305.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=193799\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=3679823\u0026resultId=111310\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr windows arm64 Checked gcstress0x3 @ Windows.11.Arm64.Open\r\n\r\n- tracing\\\\eventpipe\\\\enabledisable\\\\enabledisable\\\\enabledisable.cmd\r\n\r\ncoreclr linux arm Checked gcstress0x3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n\r\n- tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh\r\n```\r\n**Error message:**\r\n```\r\ncmdLine:C:\\h\\w\\B6C009D4\\w\\B1690976\\e\\tracing\\eventpipe\\enabledisable\\enabledisable\\enabledisable.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/5/2023 3:30:55 PM, end: 3/5/2023 4:30:55 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      C:\\h\\w\\B6C009D4\\w\\B1690976\\uploads\\Reports\\tracing.eventpipe\\enabledisable\\enabledisable\\enabledisable.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\"C:\\h\\w\\B6C009D4\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  enabledisable.dll\r\n\r\ncmdLine:C:\\h\\w\\B6C009D4\\w\\B1690976\\e\\tracing\\eventpipe\\enabledisable\\enabledisable\\enabledisable.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/5/2023 3:30:55 PM, end: 3/5/2023 4:30:55 PM)\r\nUnable to find cdb.exe at C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\arm64\\cdb.exe\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=C:\\h\\w\\B6C009D4\\p\r\nC:\\h\\w\\B6C009D4\\w\\B1690976\\e\\tracing\\eventpipe\\enabledisable\\enabledisable\\enabledisable.cmd\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at tracing_eventpipe._enabledisable_enabledisable_enabledisable_._enabledisable_enabledisable_enabledisable_cmd()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```",
                                           "updatedAt":  "2023-03-06T02:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XWBRD",
                                           "createdAt":  "2023-03-13T01:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed in Run: [runtime-coreclr gcstress0x3-gcstress0xc 20230312.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=201836)\r\n \r\n **Failed tests:**\r\n ```\r\n coreclr linux arm Checked gcstress0x3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n     - tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh\r\n ```\r\n \r\n **Error message:**\r\n ```\r\n \r\ncmdLine:/root/helix/work/workitem/e/tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/12/2023 2:41:17 PM, end: 3/12/2023 3:41:17 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/tracing.eventpipe/enabledisable/enabledisable/enabledisable.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false enabledisable.dll \u0027\u0027\r\n\r\ncmdLine:/root/helix/work/workitem/e/tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/12/2023 2:41:17 PM, end: 3/12/2023 3:41:17 PM)\r\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_5912.dmp.crashreport.json\u0027\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\u003e set CORE_ROOT=/root/helix/work/correlation\r\n\u003e /root/helix/work/workitem/e/tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh\r\nExpected: True\r\nActual:   False\r\n ```\r\n \r\n **Stack trace:**\r\n ```\r\n   at tracing_eventpipe._enabledisable_enabledisable_enabledisable_._enabledisable_enabledisable_enabledisable_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n ```\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-03-12T23:19:41.584Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"BuildId\":\"201911\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"AzurePipelinesTestRunId\":\"3778250\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"BuildNumber\":\"20230312.3\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\"} | Schedule\r\n2023-03-12T22:47:52.958Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3778235\",\"BuildNumber\":\"20230312.3\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"configuration\":\"Release\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"BuildId\":\"201911\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2023-03-12T14:07:52.893Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201836\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"configuration\":\"Checked-gcstress0x3\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20230312.1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"architecture\":\"arm\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"112\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"3776998\"} | Schedule\r\n2023-03-12T11:12:22.907Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"architecture\":\"arm64\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"BuildNumber\":\"20230312.1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"Reason\":\"Schedule\",\"configuration\":\"Release\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"201770\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"AzurePipelinesTestRunId\":\"3776483\"} | Schedule\r\n2023-03-12T10:47:20.397Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"DefinitionId\":\"154\",\"BuildId\":\"201770\",\"BuildNumber\":\"20230312.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"AzurePipelinesTestRunId\":\"3776398\",\"DefinitionName\":\"runtime-extra-platforms\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | OS | Arch | Column1\r\n-- | -- | -- | --\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T23:22:49.15Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"BuildId\":\"201600\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.2\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3774448\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T22:49:21.284Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"201600\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3774375\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildNumber\":\"20230311.2\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T14:08:01.267Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildId\":\"201442\",\"DefinitionId\":\"112\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3772573\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Checked-gcstress0x3\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"architecture\":\"arm\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20230311.1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T11:17:52.129Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"3771806\",\"architecture\":\"arm64\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230311.1\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Release\",\"BuildId\":\"201384\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-11T10:49:45.736Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230311.1\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"BuildId\":\"201384\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3771763\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T23:17:39.178Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230310.4\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3766746\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"154\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"200810\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T22:51:20.409Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230310.4\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3766379\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"BuildId\":\"200810\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T11:14:15.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3756609\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"200157\",\"BuildNumber\":\"20230310.1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-10T10:51:46.147Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildNumber\":\"20230310.1\",\"Project\":\"public\",\"BuildId\":\"200157\",\"AzurePipelinesTestRunId\":\"3756555\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-09T22:53:39.594Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildNumber\":\"20230309.4\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"199603\",\"DefinitionId\":\"154\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"AzurePipelinesTestRunId\":\"3747505\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"Reason\":\"Schedule\",\"configuration\":\"Release\"} | Schedule\r\n2023-03-09T11:20:14.518Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"AzurePipelinesTestRunId\":\"3739164\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"configuration\":\"Release\",\"BuildId\":\"198817\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20230309.1\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"DefinitionId\":\"154\"} | Schedule\r\n2023-03-09T10:51:47.043Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"configuration\":\"Release\",\"DefinitionName\":\"runtime-extra-platforms\",\"DefinitionId\":\"154\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"AzurePipelinesTestRunId\":\"3738779\",\"BuildId\":\"198817\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20230309.1\"} | Schedule\r\n2023-03-08T23:32:23.11Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"198254\",\"System.JobName\":\"__default\",\"architecture\":\"arm64\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230308.6\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionName\":\"runtime-extra-platforms\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3732129\",\"Project\":\"public\",\"configuration\":\"Release\"} | Schedule\r\n2023-03-08T22:55:24.011Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"AzurePipelinesTestRunId\":\"3731538\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"configuration\":\"Release\",\"BuildNumber\":\"20230308.6\",\"BuildId\":\"198254\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"DefinitionId\":\"154\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\"} | Schedule\r\n2023-03-08T10:49:31.493Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"AzurePipelinesTestRunId\":\"3721111\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"BuildNumber\":\"20230308.2\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"configuration\":\"Release\",\"architecture\":\"x64\",\"BuildId\":\"197421\",\"DefinitionId\":\"154\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2023-03-07T23:35:30Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"architecture\":\"arm64\",\"BuildNumber\":\"20230307.2\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3712874\",\"DefinitionName\":\"runtime-extra-platforms\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Release\",\"DefinitionId\":\"154\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"196418\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\"} | Schedule\r\n2023-03-07T22:53:09.778Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"AzurePipelinesTestRunId\":\"3712315\",\"architecture\":\"x64\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20230307.2\",\"BuildId\":\"196418\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.StageAttempt\":\"1\",\"configuration\":\"Release\",\"Project\":\"public\"} | Schedule\r\n2023-03-07T11:16:41.865Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230307.1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"DefinitionId\":\"154\",\"BuildId\":\"195653\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3701458\",\"DefinitionName\":\"runtime-extra-platforms\",\"Project\":\"public\"} | Schedule\r\n2023-03-07T10:57:19.139Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"BuildId\":\"195653\",\"System.JobAttempt\":\"1\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3701403\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"DefinitionId\":\"154\",\"architecture\":\"x64\",\"BuildNumber\":\"20230307.1\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\"} | Schedule\r\n2023-03-06T23:23:30.655Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20230306.3\",\"configuration\":\"Release\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"AzurePipelinesTestRunId\":\"3695785\",\"architecture\":\"arm64\",\"DefinitionId\":\"154\",\"BuildId\":\"195010\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\"} | Schedule\r\n2023-03-06T22:53:58.791Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"DefinitionName\":\"runtime-extra-platforms\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230306.3\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionId\":\"154\",\"configuration\":\"Release\",\"System.StageName\":\"Build\",\"BuildId\":\"195010\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3695410\"} | Schedule\r\n2023-03-06T11:17:00.038Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"architecture\":\"arm64\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20230306.1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionId\":\"154\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"BuildId\":\"194177\",\"AzurePipelinesTestRunId\":\"3685682\",\"Reason\":\"Schedule\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2023-03-06T10:52:34.187Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20230306.1\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"Project\":\"public\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"BuildId\":\"194177\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"configuration\":\"Release\",\"AzurePipelinesTestRunId\":\"3685573\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\"} | Schedule\r\n2023-03-05T23:14:44.172Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"configuration\":\"Release\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20230305.2\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-extra-platforms\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildId\":\"193965\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"154\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"AzurePipelinesTestRunId\":\"3681114\"} | Schedule\r\n2023-03-05T22:50:40.484Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageAttempt\":\"1\",\"DefinitionId\":\"154\",\"configuration\":\"Release\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"BuildNumber\":\"20230305.2\",\"DefinitionName\":\"runtime-extra-platforms\",\"BuildId\":\"193965\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"3681076\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-05T14:09:14.158Z | runtime-coreclr gcstress0x3-gcstress0xc | Checked-gcstress0x3 | ubuntu.1804.armarch.open | arm | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-gcstress0x3\",\"BuildId\":\"193799\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"arm\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3679823\",\"DefinitionName\":\"runtime-coreclr gcstress0x3-gcstress0xc\",\"Project\":\"public\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"BuildNumber\":\"20230305.1\",\"System.JobName\":\"__default\",\"DefinitionId\":\"112\"} | Schedule\r\n2023-03-05T11:18:27.493Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3679460\",\"architecture\":\"arm64\",\"Project\":\"public\",\"BuildNumber\":\"20230305.1\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"configuration\":\"Release\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildId\":\"193758\"} | Schedule\r\n2023-03-05T10:52:37.479Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"193758\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"154\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"3679409\",\"Project\":\"public\",\"BuildNumber\":\"20230305.1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"configuration\":\"Release\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-04T23:12:39.165Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"BuildId\":\"193602\",\"DefinitionId\":\"154\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"Project\":\"public\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.StageName\":\"Build\",\"architecture\":\"arm64\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"configuration\":\"Release\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20230304.3\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"3677379\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-03-04T22:51:11.947Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20230304.3\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"3677352\",\"System.StageName\":\"Build\",\"BuildId\":\"193602\",\"configuration\":\"Release\",\"DefinitionId\":\"154\"} | Schedule\r\n2023-03-04T11:18:08.971Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"DefinitionId\":\"154\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20230304.1\",\"AzurePipelinesTestRunId\":\"3673967\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.JobName\":\"__default\",\"BuildId\":\"193309\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"Reason\":\"Schedule\",\"architecture\":\"arm64\",\"DefinitionName\":\"runtime-extra-platforms\"} | Schedule\r\n2023-03-04T10:49:56.592Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"DefinitionId\":\"154\",\"AzurePipelinesTestRunId\":\"3673866\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"BuildNumber\":\"20230304.1\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"193309\",\"System.JobAttempt\":\"1\",\"configuration\":\"Release\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\"} | Schedule\r\n2023-03-03T23:18:05.992Z | runtime-extra-platforms | Release | ubuntu.1804.armarch.open | arm64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"Reason\":\"Schedule\",\"Project\":\"public\",\"architecture\":\"arm64\",\"System.JobName\":\"__default\",\"DefinitionId\":\"154\",\"DefinitionName\":\"runtime-extra-platforms\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"BuildNumber\":\"20230303.3\",\"System.PhaseName\":\"build_linux_arm64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"configuration\":\"Release\",\"BuildId\":\"192904\",\"AzurePipelinesTestRunId\":\"3670440\",\"System.JobId\":\"e45de9b4-b3b3-54f9-2ea5-8e56201c788d\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2023-03-03T22:53:12.377Z | runtime-extra-platforms | Release | ubuntu.1804.amd64.open.rt | x64 | tracing/eventpipe/enabledisable/enabledisable/enabledisable.sh | Failed | {\"configuration\":\"Release\",\"operatingSystem\":\"Ubuntu.1804.Amd64.Open\",\"DefinitionId\":\"154\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"System.PhaseName\":\"build_linux_x64_Release_AllSubsets_Mono_LLVMFullAot_RuntimeTests\",\"System.JobId\":\"d25dc2c0-518b-5583-f661-5ac905106679\",\"DefinitionName\":\"runtime-extra-platforms\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"3670037\",\"BuildNumber\":\"20230303.3\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"BuildId\":\"192904\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\"} | Schedule\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-13T02:03:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xcn6m",
                                           "createdAt":  "2023-03-13T23:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Created new issue, https://github.com/dotnet/runtime/issues/83359, because test name is different.",
                                           "updatedAt":  "2023-03-13T23:34:56Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Test failure JIT/opt/AssertionPropagation/ArrBoundBinaryOp/ArrBoundBinaryOp.sh",
        "labels":  [
                       "arch-arm32",
                       "disabled-test",
                       "os-linux",
                       "GCStress",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67470",
        "createdAt":  "2022-04-01T23:52:34Z",
        "number":  67470,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCV5T3Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2022-04-02T00:44:24Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-07-20T16:23:28Z",
        "body":  "The reserved keyword `return` is macroized in __debugreturn.h__:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3c3155d92a632c16197afc31e787ab2d9a2b5a4f/src/coreclr/inc/debugreturn.h#L25\r\n\r\nhttps://github.com/dotnet/runtime/blob/3c3155d92a632c16197afc31e787ab2d9a2b5a4f/src/coreclr/inc/debugreturn.h#L93-L102\r\n\r\nThis is preventing import of some STL headers, causing build failures in PRs such as https://github.com/dotnet/runtime/pull/67464. Static analyzers like https://rules.sonarsource.com/cpp/RSPEC-5266 catch this as bad practice, and [MSVC also flags this as an error](https://github.com/microsoft/STL/blob/27877181dc50fc5f0dc9d679703437eb105e2b9f/stl/inc/xkeycheck.h#L359-L363).\r\n\r\nConsider using a different name, such as `CHECKED_RETURN`, instead of piggybacking on the reserved keyword `return`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYH1zMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Awo7W",
                                           "createdAt":  "2022-04-02T02:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Note that we do this in non-shipping debug/checked builds only.",
                                           "updatedAt":  "2022-04-02T02:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AwqSS",
                                           "createdAt":  "2022-04-02T02:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Consider using a different name, such as CHECKED_RETURN, instead of piggybacking on the reserved keyword return.\r\n\r\n The whole point of this hack is to catch bad accidental incorrect uses of the `return` statements. If we were to use different name, this hack would lose its point.\r\n\r\nI guess the proper fix would require getting rid of the macros that prohibit use of the `return` statements.",
                                           "updatedAt":  "2022-04-02T02:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A8NnU",
                                           "createdAt":  "2022-04-05T23:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Thanks for the context. I was looking around at other patterns that might work, such as clever use of dtors, but couldn\u0027t find anything that worked as well as the `#define` trick we\u0027re using.\r\n\r\nThe page https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/docs/coding-guidelines/clr-code-guide.md#214-dont-do-nonlocal-returns-from-within-gcprotect-blocks contains this text.\r\n\r\n\u003e Why is GCPROTECT not implemented via a C++ smart pointer? The GCPROTECT macro originates in .NET Framework v1. All error handling was done explicitly at that time, without any use C++ exception handling or stack allocated holders.\r\n\r\nIs there a technical reason forbidding reimplementing this functionality using C++ idioms like RAII for these scenarios, which would allow non-local returns? I can imagine that this would cause a decent amount of churn, assuming it\u0027s even pursuable.\r\n\r\nEdit: I guess one can always do something silly with C++ lambdas if so inspired, which would cause the _return_ to exit only the inner lambda, not the enclosing function. Changing the type away from \"void\" will cause _return_ to generate a compiler error. Big downside is that F10 breaks in the debugger. :(\r\n\r\n```cpp\r\n#define GCPROTECT_BEGIN() [\u0026]() [[msvc::forceinline]] -\u003e void {\r\n#define GCPROTECT_END() }();\r\n```",
                                           "updatedAt":  "2022-04-06T00:21:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BAQdv",
                                           "createdAt":  "2022-04-06T18:19:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZsCiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-04-25T16:27:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The GCPROTECT macro was reimplemented using standard C++ idioms already. You can delete  `DEBUG_ASSURE_NO_RETURN_BEGIN` use from it and also the quoted text from clr-code-guide.md.\r\n\r\nHowever, we have number of other key macros that still use `DEBUG_ASSURE_NO_RETURN_BEGIN` (e.g. HELPER_METHOD_FRAME macros) that are hard to reimplement using C++ idioms.\r\n\r\n\u003e  C++ lambdas\r\n\r\nFWIW, C++ lamdas come with significant code quality hit. We have tried to replace some macros in the GC with lamdas some time ago. We had to abandon the idea due to unacceptable performance impact.",
                                           "updatedAt":  "2022-04-06T18:19:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FGoLg",
                                           "createdAt":  "2022-06-18T05:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e I guess the proper fix would require getting rid of the macros that prohibit use of the return statements.\r\n\r\n@jkotas and @janvorli Thoughts on removing this compile time check? I agree it is unfortunate, but there is very little active development in this area anymore.",
                                           "updatedAt":  "2022-06-18T05:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FG8sm",
                                           "createdAt":  "2022-06-18T11:38:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCijA-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-06-18T16:01:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e there is very little active development in this area anymore.\r\n\r\nI believe that some VM code that has to follow these no-return rules is being changed like every week.\r\n\r\nRemoving this compile time check will turn compile error into some sort of runtime crash. You can try to introduce a bad return inside `HELPER_METHOD_FRAME` and then try to debug the runtime crash to see what the experience looks like with this compile check deleted.",
                                           "updatedAt":  "2022-06-18T11:38:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gfXMx",
                                           "createdAt":  "2023-07-03T16:25:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@AaronRobinsonMSFT probably something which can be moved out of 8?",
                                           "updatedAt":  "2023-07-03T16:25:25Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "debugreturn.h should not macroize C++ keywords",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67776",
        "createdAt":  "2022-04-08T21:28:42Z",
        "number":  67776,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-11T19:28:11Z",
        "body":  "There are some JIT helpers that are hand-written assembly but are only available on Windows-x64. The impact of these helpers can be profound, which means we might be missing benefits on non-Windows-x64 platforms.\r\n\r\nJIT helpers as assembly with fallbacks into the VM (C++), Windows-x64 only.\r\n|                    Method |      Mean |     Error |    StdDev |\r\n|-------------------------- |----------:|----------:|----------:|\r\n|     CORINFO_HELP_NEWSFAST |  1.865 ns | 0.0356 ns | 0.0333 ns |\r\n|          CORINFO_HELP_BOX |  4.234 ns | 0.0396 ns | 0.0351 ns |\r\n|  CORINFO_HELP_NEWARR_1_VC | 17.932 ns | 0.0935 ns | 0.0781 ns |\r\n| CORINFO_HELP_NEWARR_1_OBJ |  9.989 ns | 0.2062 ns | 0.1828 ns |\r\n\r\nJIT helpers (portable) calling into the VM (C++), non-Windows platforms. Note there is no BOX portable version.\r\n|                    Method |      Mean |     Error |    StdDev |\r\n|-------------------------- |----------:|----------:|----------:|\r\n|     CORINFO_HELP_NEWSFAST |  2.136 ns | 0.0269 ns | 0.0238 ns |\r\n|  CORINFO_HELP_NEWARR_1_VC | 17.999 ns | 0.2288 ns | 0.2028 ns |\r\n| CORINFO_HELP_NEWARR_1_OBJ | 10.001 ns | 0.1342 ns | 0.1190 ns |\r\n\r\nJIT helpers in the VM (C++). Collected on Windows-x64 for relative performance impact.\r\n|                    Method |     Mean |    Error |   StdDev |\r\n|-------------------------- |---------:|---------:|---------:|\r\n|     CORINFO_HELP_NEWSFAST | 12.84 ns | 0.309 ns | 0.402 ns |\r\n|          CORINFO_HELP_BOX | 15.50 ns | 0.316 ns | 0.363 ns |\r\n|  CORINFO_HELP_NEWARR_1_VC | 30.37 ns | 0.243 ns | 0.190 ns |\r\n| CORINFO_HELP_NEWARR_1_OBJ | 23.83 ns | 0.262 ns | 0.219 ns |\r\n\r\nIt could be possible to write the JIT helpers with new intrinsics as IL instead of assembly on all the platforms.\r\n\r\nSee the dynamic update for JIT helper:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ff6abfea0bb9b71eb3215157749047dd120a4d9f/src/coreclr/vm/jitinterfacegen.cpp#L86-L90\r\n\r\n```csharp\r\nusing System;\r\nusing System.Security.Cryptography;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var summary = BenchmarkRunner.Run\u003cJITHelpers\u003e(args: args);\r\n    }\r\n}\r\n\r\npublic struct VC\r\n{\r\n    public int A;\r\n    public float B;\r\n    public object C;\r\n}\r\n\r\npublic class C\r\n{\r\n    public int A;\r\n}\r\n\r\npublic class JITHelpers\r\n{\r\n    private VC _vc;\r\n\r\n    public JITHelpers()\r\n    {\r\n        _vc = new VC() { A = 10, B = .1f, C = this };\r\n    }\r\n\r\n    [Benchmark]\r\n    public C CORINFO_HELP_NEWSFAST() =\u003e new C();\r\n\r\n    [Benchmark]\r\n    public object CORINFO_HELP_BOX() =\u003e (object)_vc;\r\n\r\n    [Benchmark]\r\n    public VC[] CORINFO_HELP_NEWARR_1_VC() =\u003e new VC[32];\r\n\r\n    [Benchmark]\r\n    public C[] CORINFO_HELP_NEWARR_1_OBJ() =\u003e new C[32];\r\n}\r\n```\r\n\r\n/cc @davidwrighton ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdpG-1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BK5fb",
                                           "createdAt":  "2022-04-08T21:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9oonA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-17T06:33:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-06-10T19:50:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "I\u0027d really like to avoid hand-coded assembly for these things. I don\u0027t think the performance of these scenarios is quite important enough to justify hand coded assembly on all of our architectures, but if we could write C# (even C# which required some magic intrinsics to work) it would probably be worth it.",
                                           "updatedAt":  "2022-04-08T21:30:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BK5kC",
                                           "createdAt":  "2022-04-08T21:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXKYfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-04-08T21:46:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Could you attach a copy of the benchmark you\u0027re using to get these numbers?",
                                           "updatedAt":  "2022-04-08T21:31:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BK55I",
                                           "createdAt":  "2022-04-08T21:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Oops. Looks like I missed the dynamic options used on non-Windows. See\r\n\r\nhttps://github.com/dotnet/runtime/blob/ff6abfea0bb9b71eb3215157749047dd120a4d9f/src/coreclr/vm/jitinterfacegen.cpp#L76-L79\r\n\r\nLet me try them on Windows and compare that as well.",
                                           "updatedAt":  "2022-04-08T21:33:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNYSy",
                                           "createdAt":  "2022-04-09T13:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e CORINFO_HELP_BOX\r\n\r\nFrom my understanding this helper is only used for unoptimzed code and JIT inserts a `CORINFO_HELP_NEWSFAST` instead (in contrast with `CORINFO_HELP_BOX_NULLABLE`) so your benchmark measures `CORINFO_HELP_NEWSFAST` + memory copies",
                                           "updatedAt":  "2022-04-09T13:34:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNaaY",
                                           "createdAt":  "2022-04-09T13:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "So I am looking at `JIT_NewS_MP_FastPortable` and it seems it can be easily converted to C# but might require an intrinsic to get current `allocContext` (double indirect load basically to a global location) but I am not sure what exactly it solves?\r\nI assume in theory we can make it inlineable for hot paths? (and e.g. emit object size as a constant)\r\n\r\nIs the problem that C++ version of it emits worse code than the assembly version?",
                                           "updatedAt":  "2022-04-09T13:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNbck",
                                           "createdAt":  "2022-04-09T14:05:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Something like this I assume:\r\n![image](https://user-images.githubusercontent.com/523221/162577674-a1356f3c-586a-422e-9070-98b4440406eb.png)\r\n",
                                           "updatedAt":  "2022-04-09T14:05:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNigb",
                                           "createdAt":  "2022-04-09T15:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9oooQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-04-09T15:50:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-06-10T19:50:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You would also need to make sure that the whole method is non-interruptible. We cannot take a GC in the middle of the allocation helper.",
                                           "updatedAt":  "2022-04-09T15:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNjtZ",
                                           "createdAt":  "2022-04-09T15:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e You would also need to make sure that the whole method is non-interruptible. \r\n\r\nRight. This was why I alluded to \"new intrinsics\" for a helper in IL. Do we have a mechanism already to indicate a managed method is non-interruptible?",
                                           "updatedAt":  "2022-04-09T15:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNnww",
                                           "createdAt":  "2022-04-09T17:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnA-sA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2024-06-25T10:03:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Do we have a mechanism already to indicate a managed method is non-interruptible?\r\n\r\nWe do not have a way to indicate in IL that the method has to be non-interruptible. \r\n\r\nIt can be certainly added. To reiterate, we would need:\r\n- Add JIT intrinsic for access unmanaged thread statics (it is different for each architecture and OS).\r\n- Add a mechanism to force a method to be non-interruptible",
                                           "updatedAt":  "2022-04-09T17:28:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52jO11",
                                           "createdAt":  "2024-03-11T16:54:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Recently we have noticed that `JIT_NewS_MP_FastPortable` helper using more cycles on arm64 when compared to x64. Is there any optimization which might be missing on arm64 here? ",
                                           "updatedAt":  "2024-03-11T16:54:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52jclQ",
                                           "createdAt":  "2024-03-11T17:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@mangod9 What is the OS that you are see it on?\r\n\r\nThe `JIT_New` helpers are often the first piece of code that touches new memory and tend to incur a lot of cache misses. If you are seeing more cycles spent in these helpers on Arm64, it may be due to higher cost of cache misses. Are you able to tell how much cycles are spent due to cache misses in these helpers?",
                                           "updatedAt":  "2024-03-11T17:16:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52jn8K",
                                           "createdAt":  "2024-03-11T17:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "this is on linux, will try to determine if we can get any perf counters related to cache misses. ",
                                           "updatedAt":  "2024-03-11T17:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52kb7U",
                                           "createdAt":  "2024-03-11T19:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "related: https://github.com/dotnet/runtime/issues/99552",
                                           "updatedAt":  "2024-03-11T19:28:10Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Consider hand-written JIT helpers for more platforms or use portable version everywhere",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69805",
        "createdAt":  "2022-05-25T17:02:30Z",
        "number":  69805,
        "author":  "mpiracha",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-16T04:06:47Z",
        "body":  "I am testing .NET 6 on my dev environment. The simple hello world console app works well, but simple ASP.NET Core Web application consistently throwing following exception when running on Windows Server 2016. I had the same app running well on different EC2 with similar configuration. I need some help to understand what\u0027s causing the issue before I prepare/deploy application on production.\r\n\r\nThanks.\r\n\r\nFrom Windows Event Logs:\r\n\r\nFaulting application name: WebTestApp6.exe, version: 1.0.0.0, time stamp: 0x62571213\r\nFaulting module name: coreclr.dll, version: 6.0.522.21309, time stamp: 0x625708f4\r\nException code: 0xc0000005\r\nFault offset: 0x0000000000082288\r\nFaulting process id: 0x44c\r\nFaulting application start time: 0x01d87055e87be788\r\nFaulting application path: D:\\TestWeb2\\WebTestApp6.exe\r\nFaulting module path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.5\\coreclr.dll\r\nReport Id: a368f0c5-d5c3-446f-b79a-b92b1fa6df3f\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n\r\n\r\nStack trace:\r\n```\r\nD:\\TestWeb2\u003eWebTestApp6.exe\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Span`1\u003cSystem.Object\u003e ByRef, System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u003cSystem.Object\u003e ByRef, System.Reflection.RuntimeModule, Int32, System.RuntimeType, Boolean, ListBuilder`1\u003cSystem.Object\u003e)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(System.Reflection.RuntimeModule, Int32, Int32, System.RuntimeType)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(System.RuntimeType, System.RuntimeType, Boolean)\r\n   at System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, Boolean)\r\n   at System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, Boolean)\r\n   at System.Diagnostics.Tracing.EventSource.GetCustomAttributeHelper(System.Reflection.MemberInfo, System.Type, System.Diagnostics.Tracing.EventManifestOptions)\r\n   at System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\r\n   at System.Diagnostics.Tracing.EventSource..ctor(System.Diagnostics.Tracing.EventSourceSettings, System.String[])\r\n   at System.Net.NetEventSource..cctor()\r\n   at System.Net.Quic.Implementations.MsQuic.Internal.MsQuicApi..cctor()\r\n   at System.Net.Quic.Implementations.MsQuic.MsQuicImplementationProvider.get_IsSupported()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder)\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder)\r\n   at Microsoft.AspNetCore.WebHost.ConfigureWebDefaults(Microsoft.AspNetCore.Hosting.IWebHostBuilder)\r\n   at Microsoft.Extensions.Hosting.GenericHostBuilderExtensions+\u003c\u003ec__DisplayClass0_0.\u003cConfigureWebHostDefaults\u003eb__0(Microsoft.AspNetCore.Hosting.IWebHostBuilder)\r\n   at Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder, System.Action`1\u003cMicrosoft.AspNetCore.Hosting.IWebHostBuilder\u003e, System.Action`1\u003cMicrosoft.Extensions.Hosting.WebHostBuilderOptions\u003e)\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder..ctor(Microsoft.AspNetCore.Builder.WebApplicationOptions, System.Action`1\u003cMicrosoft.Extensions.Hosting.IHostBuilder\u003e)\r\n   at Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(System.String[])\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\nEC2 instance and OS version:\r\n\r\nOS Name:                   Microsoft Windows Server 2016 Datacenter\r\nOS Version:                10.0.14393 N/A Build 14393\r\nOS Manufacturer:           Microsoft Corporation\r\nOS Configuration:          Member Server\r\nOS Build Type:             Multiprocessor Free\r\nRegistered Owner:          EC2\r\nRegistered Organization:   Amazon.com\r\nProduct ID:                00376-40000-00000-AA849\r\nOriginal Install Date:     4/12/2019, 10:46:23 AM\r\nSystem Boot Time:          5/24/2022, 4:38:08 PM\r\nSystem Manufacturer:       Xen\r\nSystem Model:              HVM domU\r\nSystem Type:               x64-based PC\r\nProcessor(s):              1 Processor(s) Installed.\r\n                           [01]: Intel64 Family 6 Model 79 Stepping 1 GenuineIntel ~2300 Mhz\r\nBIOS Version:              Xen 4.2.amazon, 8/24/2006",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObsmgUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DzdJd",
                                           "createdAt":  "2022-05-25T17:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-05-25T17:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0X3p",
                                           "createdAt":  "2022-05-25T20:10:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Beau-Gosse-dev",
                                           "body":  "@mpiracha since this looks like a sample ASP.NET Core Web application, can you share the code here so we can try to reproduce? Also you said \"I had the same app running well on different EC2 with similar configuration.\" what if anything was different about that EC2 instance?",
                                           "updatedAt":  "2022-05-25T20:10:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0cwY",
                                           "createdAt":  "2022-05-25T20:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "[WebTestApp6.zip](https://github.com/dotnet/runtime/files/8774325/WebTestApp6.zip)\r\n@Beau-Gosse-dev , the sample attached.\r\n\r\nThe samples are just out-of-the-box project files. I have one console app that runs without any issue. The ASP.NET 6 is crashing though. Self contain option also crashed if it helps.\r\n\r\nAll EC2 instances have same OS and May CU applied. I have also stopped AV just in case. Otherwise, there are unfortunately no obvious differences that I can find.",
                                           "updatedAt":  "2022-05-25T20:35:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0nVH",
                                           "createdAt":  "2022-05-25T21:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Beau-Gosse-dev",
                                           "body":  "@mpiracha I just tried to reproduce this with your code on a new Windows Server 2016 EC2 instance with the latest version of .NET and it worked just fine. I\u0027m not sure what to suggest other than updating everything and maybe starting over from scratch with another `dotnet new webapp` from the command line. ",
                                           "updatedAt":  "2022-05-25T21:31:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0quZ",
                                           "createdAt":  "2022-05-25T21:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "birojnayak",
                                           "body":  "@Beau-Gosse-dev @mpiracha looks like this Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic is experimental... I don\u0027t see that in the attached code...",
                                           "updatedAt":  "2022-05-25T21:51:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0q7f",
                                           "createdAt":  "2022-05-25T21:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "@Beau-Gosse-dev, thank you for helping me out. The dotnet new webapp from CLI did not change any thing :(.\r\n\r\nLet me go a look for any other differences between my EC2 instances.",
                                           "updatedAt":  "2022-05-25T21:52:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D0sgM",
                                           "createdAt":  "2022-05-25T22:02:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "@birojnayak, The related assemblies are in C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.5 folder. Do you feel they need to be in some other location?\r\n\r\n![image](https://user-images.githubusercontent.com/49162697/170374668-0bfe0c30-33ea-4516-8e01-05e3966fdb4a.png)\r\n",
                                           "updatedAt":  "2022-05-25T22:02:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D5MhB",
                                           "createdAt":  "2022-05-26T21:17:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "FYI\r\n\r\nThe QuicImplementationProviders.Default.IsSupported call from System.Net.Quic causing the issue.\r\n\r\nSee the attached code.\r\n\r\n[msquictest.zip](https://github.com/dotnet/runtime/files/8782159/msquictest.zip)\r\n ",
                                           "updatedAt":  "2022-05-26T21:17:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D5RKt",
                                           "createdAt":  "2022-05-26T21:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Beau-Gosse-dev",
                                           "body":  "@mpiracha Are you saying that this sample console app throws the same error? Does it only throw on that single EC2 instance? Running on Windows 10 it doesn\u0027t give any errors for me.\r\n![image](https://user-images.githubusercontent.com/1557741/170584578-61301e35-e86d-4ecc-85cc-695445e28baa.png)\r\n",
                                           "updatedAt":  "2022-05-26T21:40:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D5TFO",
                                           "createdAt":  "2022-05-26T21:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "@Beau-Gosse-dev, yes, so far its crashing only on couple of Windows Server 2016. My local Win10 machine has no issues.\r\n\r\nAlso, I found some discussion around Quic issue here: https://github.com/dotnet/aspnetcore/pull/40376 in case you find it helpful.",
                                           "updatedAt":  "2022-05-26T21:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D8rAG",
                                           "createdAt":  "2022-05-27T19:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "@Beau-Gosse-dev, @birojnayak \r\n\r\nSome more details.\r\nWe were able to narrow down the issue to specific area - the attribute [EventSource(Name = \"Derived.EventSource\")] is the culprit.\r\n\r\nThe attached sample will run fine, if compiled under .NET5 but produce the same internal error when compiled for NET6.\r\n\r\n![image](https://user-images.githubusercontent.com/49162697/170779747-b9bab891-925f-496a-9d61-58ad7942b51e.png)\r\n\r\n\r\n[NetEventSourceTest.zip](https://github.com/dotnet/runtime/files/8789376/NetEventSourceTest.zip)\r\n\r\nI hope this provides some useful insight to the issue.",
                                           "updatedAt":  "2022-05-27T19:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ET1jj",
                                           "createdAt":  "2022-06-03T15:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mpiracha",
                                           "body":  "@jeffschwMSFT \r\n\r\nOne additional piece of information.\r\n\r\nOut of two servers, where I have this exception, one server, runs fine under win-x86.\r\n\r\n![image](https://user-images.githubusercontent.com/49162697/171879673-9e648cd9-5c1a-4ca8-bdc8-26b7bdfde02e.png)\r\n",
                                           "updatedAt":  "2022-06-03T15:00:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GNEFc",
                                           "createdAt":  "2022-07-07T15:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@mpiracha are you able to capture a dump with the failure? That would help with diagnosing further. Thx!",
                                           "updatedAt":  "2022-07-07T15:49:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hxq1T",
                                           "createdAt":  "2022-08-03T16:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1JpnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rpresser",
                                                                               "createdAt":  "2022-11-28T15:07:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JamesQMurphy",
                                                                               "createdAt":  "2022-11-28T17:23:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-01-31T16:08:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ChernayaKoshka",
                                           "body":  "@mpiracha if you are using certain security agents (e.g. Contrast .NET) they may be interfering. I was having an extremely similar issue to you and it turns out our Contrast .NET agent was the version prior to adding .NET 6 support. Upgrading the agent resolved this mysterious crash.\r\n\r\nIf you aren\u0027t, I hope whoever else comes across this post will find it useful.",
                                           "updatedAt":  "2022-08-03T16:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFL5M",
                                           "createdAt":  "2023-01-31T16:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@rameshreddy5763 hit this in dotnet/aspnetcore#46348.\r\n\r\n@rameshreddy5763 do you have any extra software on the OS such as security agents, 3rd party virus checkers/anti malware, etc? If so can you try again after disabling those (or just on a fresh OS image) since it appears to have helped others above.",
                                           "updatedAt":  "2023-01-31T16:00:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFOlX",
                                           "createdAt":  "2023-01-31T16:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rameshreddy5763",
                                           "body":  "We have Symantec running on the machine. Let me disable and try again\r\n",
                                           "updatedAt":  "2023-01-31T16:07:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFOzU",
                                           "createdAt":  "2023-01-31T16:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "one more thing @rameshreddy5763 -- can you try running just the application linked by @mpiracha here? https://github.com/dotnet/runtime/issues/69805#issuecomment-1139093838\r\n\r\nessentially just create a console app and paste this code in\r\n```c#\r\nusing System;\r\nusing System.Diagnostics.Tracing;\r\n\r\nnamespace NetEventSourceTest\r\n{\r\n    [EventSource(Name = \"Derived.EventSource\")]\r\n    internal sealed partial class DerivedEventSource : EventSource\r\n    {\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Guid guid = EventSource.GetGuid(typeof(DerivedEventSource));\r\n            Console.WriteLine($\"{nameof(DerivedEventSource)} {guid}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThat works fine for me, but apparently on machines where this issue appears, it does not.",
                                           "updatedAt":  "2023-01-31T16:08:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFT9k",
                                           "createdAt":  "2023-01-31T16:21:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rameshreddy5763",
                                           "body":  "@danmoseley \r\n\r\nThis code works fine in local machine, but its failing on machines where this issue appears.",
                                           "updatedAt":  "2023-01-31T16:21:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uyZ5X",
                                           "createdAt":  "2023-12-16T04:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhangbest5",
                                           "body":  "I found problem,You need to uninstall all **security software** or test on a new server. The problem will be solved.",
                                           "updatedAt":  "2023-12-16T04:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uyaBQ",
                                           "createdAt":  "2023-12-16T04:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhangbest5",
                                           "body":  "security software is the Key!",
                                           "updatedAt":  "2023-12-16T04:06:46Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Running a simple ASP.NET core application causing Coreclr.dll throwing exception",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69924",
        "createdAt":  "2022-05-27T21:53:08Z",
        "number":  69924,
        "author":  "PJB3005",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCfGQVw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "theolivenbaum",
                                            "createdAt":  "2022-05-28T06:01:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-27T21:30:51Z",
        "body":  "The .NET runtime itself still has a very significant overhead of working set memory usage, on top of the actual app\u0027s managed heap. This isn\u0027t really surprising, since you need structures for the GC, JIT, JITed code space, etc... It is however also my understanding that the runtime can be eager to not release memory back to the OS for various reasons, such as Retain VM. \r\n\r\nThe problem here is that, as far as I know, there is no good way to get a handle on *where* this unmanaged memory is going? Tools like `dotnet counters` don\u0027t allow you any more advanced diagnostic than \"subtract GC Heap Size from Working Set = runtime overhead\", and obviously that gets even muddier when accounting for any unmanaged libraries you may be using.\r\n\r\nThis is of particular interest to us because of the aforementioned tendency for the runtime to not release memory back to the OS unless there\u0027s memory pressure. We want to be able to get accurate memory usage statistics for our game (to write system requirements, both server and client) and we have no way to know how much of this working set overhead (it easily varies from 500 MB to 2 GB in our case) is necessary or \"can be culled during pressure\".",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ_ZqiQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5D9ABi",
                                           "createdAt":  "2022-05-27T21:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe .NET runtime itself still has a very significant overhead of working set memory usage, on top of the actual app\u0027s managed heap. This isn\u0027t really surprising, since you need structures for the GC, JIT, JITed code space, etc... It is however also my understanding that the runtime can be eager to not release memory back to the OS for various reasons, such as Retain VM. \r\n\r\nThe problem here is that, as far as I know, there is no good way to get a handle on *where* this unmanaged memory is going? Tools like `dotnet counters` don\u0027t allow you any more advanced diagnostic than \"subtract GC Heap Size from Working Set = runtime overhead\", and obviously that gets even muddier when accounting for any unmanaged libraries you may be using.\r\n\r\nThis is of particular interest to us because of the aforementioned tendency for the runtime to not release memory back to the OS unless there\u0027s memory pressure. We want to be able to get accurate memory usage statistics for our game (to write system requirements, both server and client) and we have no way to know how much of this working set overhead (it easily varies from 500 MB to 2 GB in our case) is necessary or \"can be culled during pressure\".\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePJB3005\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-27T21:53:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D9a6G",
                                           "createdAt":  "2022-05-28T05:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Tried `!eeheap` in SOS? It does output the information about a few heaps other than the GC heap.",
                                           "updatedAt":  "2022-05-28T05:00:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D9mqJ",
                                           "createdAt":  "2022-05-28T09:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PJB3005",
                                           "body":  "Aha! This does seem like the kind of thing I was looking for. It\u0027s a shame it\u0027s through SOS though, because that still makes it very annoying to run on live servers since I\u0027d have to at the very least hang them for multiple seconds to do a full dump. If this information could be exposed through even counters or something that would be amazing.",
                                           "updatedAt":  "2022-05-28T09:40:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Way to get more detailed statistics about runtime unmanaged memory overhead?",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70038",
        "createdAt":  "2022-05-31T18:39:13Z",
        "number":  70038,
        "author":  "ryanbrandenburg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-05T22:33:20Z",
        "body":  "### Description\n\nIn the [Razor Tooling repro](https://github.com/dotnet/razor-tooling) we run into an AccessViolation exception when [running this test](https://github.com/dotnet/razor-tooling/blob/e8f8c73da70c40859a9e08c1bac4fad029f017c7/src/Razor/test/Microsoft.VisualStudio.LanguageServerClient.Razor.Test/HtmlCSharp/SignatureHelpHandlerTest.cs#L147) on certain machines.\n\n### Reproduction Steps\n\n1. Clone the [razor-tooling repo](https://github.com/dotnet/razor-tooling).\r\n2. Run `.\\restore.ps1`\r\n3. Run `.\\build.cmd`\r\n4. Run `C:\\Users\\rybrande\\projects\\razor-tooling\\src\\Razor\\test\\Microsoft.VisualStudio.LanguageServerClient.Razor.Test`\r\n5. Run `dotnet test`\r\n6. If you\u0027re on an affected machine you should get an AccessViolation Exception.\n\n### Expected behavior\n\nNo AccessViolationException.\n\n### Actual behavior\n\nAccessViolationException.\n\n### Regression?\n\nI did not see this before our recent upgrade to dotnet 7.0.100-preview.4.22252.9, but that could just be a coincidence since I don\u0027t run this code often.\n\n### Known Workarounds\n\nNot all machines seem to be affected, so using a different machine can work around it.\n\n### Configuration\n\n```\r\n.NET SDK:\r\n Version:   7.0.100-preview.4.22252.9\r\n Commit:    6bc31786a8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.100-preview.4.22252.9\\\r\n\r\nglobal.json file:\r\n  C:\\Users\\rybrande\\projects\\razor-tooling\\global.json\r\n\r\nHost:\r\n  Version:      7.0.0-preview.4.22229.4\r\n  Architecture: x64\r\n  Commit:       9c37a3b3eb\r\n\r\n.NET SDKs installed:\r\n  2.1.526 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.419 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.105 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.100-preview.4.22252.9 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.0-preview.4.22251.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0-preview.3.22175.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0-preview.4.22229.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0-preview.4.22229.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\n\n### Other information\n\nMy machine is older (~2019) so reproducing on an older machine might be part of the issue. Seems to happen 100% of the time for me, so producing dumps should be possible provided you tell me how you would prefer them.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR8-FbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EGXKt",
                                           "createdAt":  "2022-05-31T18:39:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-05-31T18:39:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EGnRM",
                                           "createdAt":  "2022-05-31T19:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I\u0027ve just tried to follow the build steps and the very first step (restore) failed with a lot of network-related iisues:\r\n```\r\nFailed to download package \u0027Microsoft.VisualStudio.Threading.Analyzers.17.2.32\u0027 from \u0027https://pkgs.dev.azure.com/azur\r\n  e-public/3ccf6661-f8ce-4e8a-bb2e-eff943ddd3c7/_packaging/2a239fd0-3e21-40b0-b9d6-bc122fec7eb2/nuget/v3/flat2/microsof\r\n  t.visualstudio.threading.analyzers/17.2.32/microsoft.visualstudio.threading.analyzers.17.2.32.nupkg\u0027.\r\n  An error occurred while sending the request.\r\n    Unable to connect to the remote server\r\n    A connection attempt failed because the connected party did not properly respond after a period of time, or establi\r\n  shed connection failed because connected host has failed to respond 13.107.6.175:443\r\n  Failed to download package \u0027xunit.assert.2.4.1\u0027 from \u0027https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d\r\n  082ae6d/_packaging/45bacae2-5efb-47c8-91e5-8ec20c22b4f8/nuget/v3/flat2/xunit.assert/2.4.1/xunit.assert.2.4.1.nupkg\u0027.\r\n  An error occurred while sending the request.\r\n    Unable to connect to the remote server\r\n    A connection attempt failed because the connected party did not properly respond after a period of time, or establi\r\n  shed connection failed because connected host has failed to respond 13.107.6.175:443\r\n  Failed to download package \u0027Microsoft.CodeAnalysis.Remote.ServiceHub.4.3.0-2.22267.5\u0027 from \u0027https://pkgs.dev.azure.co\r\n  m/azure-public/3ccf6661-f8ce-4e8a-bb2e-eff943ddd3c7/_packaging/78665e4c-b767-412b-9804-2b1ef7a48b8a/nuget/v3/flat2/mi\r\n  crosoft.codeanalysis.remote.servicehub/4.3.0-2.22267.5/microsoft.codeanalysis.remote.servicehub.4.3.0-2.22267.5.nupkg\r\n  \u0027.\r\n  An error occurred while sending the request.\r\n    Unable to connect to the remote server\r\n    A connection attempt failed because the connected party did not properly respond after a period of time, or establi\r\n  shed connection failed because connected host has failed to respond 13.107.6.175:443\r\n  Failed to download package \u0027System.Runtime.CompilerServices.Unsafe.5.0.0\u0027 from \u0027https://pkgs.dev.azure.com/dnceng/9ee\r\n  6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/45bacae2-5efb-47c8-91e5-8ec20c22b4f8/nuget/v3/flat2/system.runtime.compi\r\n  lerservices.unsafe/5.0.0/system.runtime.compilerservices.unsafe.5.0.0.nupkg\u0027.\r\n```",
                                           "updatedAt":  "2022-05-31T19:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELfAv",
                                           "createdAt":  "2022-06-01T16:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ryanbrandenburg",
                                           "body":  "@EgorBo we saw a bunch of restore issues on our CI yesterday too, would you mind clearing your cache and trying again now that it seems resolved?",
                                           "updatedAt":  "2022-06-01T16:43:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELvfJ",
                                           "createdAt":  "2022-06-01T17:33:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCfurkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ryanbrandenburg",
                                                                               "createdAt":  "2022-06-01T17:39:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e @EgorBo we saw a bunch of restore issues on our CI yesterday too, would you mind clearing your cache and trying again now that it seems resolved?\r\n\r\nThanks, builds just fine today. Furthermore, I was able to reproduce AVE on my machine",
                                           "updatedAt":  "2022-06-01T17:33:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELy3M",
                                           "createdAt":  "2022-06-01T17:42:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@ryanbrandenburg the assembly with the test is net4.7 - not sure I understand how .NET 7.0 is involved here",
                                           "updatedAt":  "2022-06-01T17:42:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E9iJz",
                                           "createdAt":  "2022-06-15T21:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@EgorBo do you happen to have stack trace of the AVE? I was trying to repro it locally and the restore step failed to me due to some weird sdk / msbuild version mismatch.",
                                           "updatedAt":  "2022-06-15T21:50:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GwuKF",
                                           "createdAt":  "2022-07-18T11:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@ryanbrandenburg I was trying to follow the repro steps, but the restore.cmd fails \r\n```\r\nF:\\issues\\70038\\razor-tooling\\src\\Razor\\src\\Microsoft.CodeAnalysis.Remote.Razor\\Microsoft.CodeAnalysis.Remote.Razor.csproj : error : Version 7.0.100-preview.5.\r\n22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild. The current available version of MSBuild is 16.11.2.50704. Change the .NET SDK specified\r\nin global.json to an older version that requires the MSBuild version currently available.\r\nF:\\issues\\70038\\razor-tooling\\src\\Razor\\src\\Microsoft.CodeAnalysis.Remote.Razor\\Microsoft.CodeAnalysis.Remote.Razor.csproj : error MSB4236: The SDK \u0027Microsoft.\r\nNET.Sdk\u0027 specified could not be found.\r\nF:\\issues\\70038\\razor-tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj : error MSB4236: The SDK \u0027M\r\nicrosoft.NET.Sdk\u0027 specified could not be found.\r\nF:\\issues\\70038\\razor-tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.Common\\Microsoft.AspNetCore.Razor.Test.Common.csproj : error MSB4236: The SDK \u0027Mic\r\nrosoft.NET.Sdk\u0027 specified could not be found.\r\nF:\\issues\\70038\\razor-tooling\\src\\Razor\\src\\Microsoft.CodeAnalysis.Razor.Workspaces\\Microsoft.CodeAnalysis.Razor.Workspaces.csproj : error MSB4236: The SDK \u0027Mi\r\ncrosoft.NET.Sdk\u0027 specified could not be found.\r\n```\r\nCan you please check what\u0027s wrong so that I can try to repro the issue locally?",
                                           "updatedAt":  "2022-07-18T11:43:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G5z8k",
                                           "createdAt":  "2022-07-19T21:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ryanbrandenburg",
                                           "body":  "@janvorli I suggest checking out an old commit of razor-tooling such as https://github.com/dotnet/razor-tooling/commit/e014e91b63399c3b721c10df7c23f2e6d795b4fc from around that time. There were significant changes to the way RazorTooling builds since then and it\u0027s likely to be harder for you to build (and also likely doesn\u0027t reproduce) on latest commits.",
                                           "updatedAt":  "2022-07-19T21:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hz4Vs",
                                           "createdAt":  "2022-08-04T05:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@ryanbrandenburg I notice that the repro is from preview4, have you continued to see such failures on latest previews (6 or 7)? We have fixed a few non deterministic failures in various parts of the runtime since then. ",
                                           "updatedAt":  "2022-08-04T05:36:04Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Access Violation exception",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71220",
        "createdAt":  "2022-06-23T18:11:34Z",
        "number":  71220,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCjgVwQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2022-06-23T18:14:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2022-06-23T20:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2022-06-24T03:51:58Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-06-23T20:09:54Z",
        "body":  "There are places where we have checks like \r\n```#if defined(TARGET_AMD64) || defined(TARGET_ARM64) || defined(TARGET_LOONGARCH64)```\r\nwhile that really means `TARGET_64BIT`. We should review those and replace them by the `TARGET_64BIT` wherever it makes sense.\r\n\r\nThere also seem to be places where it is not clear whether the `HOST_64BIT` is necessary instead of `TARGET_64BIT`. Let\u0027s audit those too.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORW3GCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FbcYI",
                                           "createdAt":  "2022-06-23T20:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I\u0027d also add `TARGET_XARCH` and `TARGET_ARMARCH` just like in JIT",
                                           "updatedAt":  "2022-06-23T20:09:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Review usage of TARGET_XXX ifdefs",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72067",
        "createdAt":  "2022-07-13T01:02:03Z",
        "number":  72067,
        "author":  "lheinold",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-22T12:36:39Z",
        "body":  "### Description\r\n\r\nRunning a simple console app results in very high private memory usage: \r\n\r\nCode:\r\n```\r\nConsole.WriteLine($\"Running process id is {Environment.ProcessId}.\");\r\n\r\nSystem.Diagnostics.Process proc = System.Diagnostics.Process.GetCurrentProcess();\r\n        Console.WriteLine(\"Current Process WorkingSet64: \" + proc.WorkingSet64 + \", VirtualMemory64: \" + proc.VirtualMemorySize64\r\n            + \", PrivateMemorySize64: \" + proc.PrivateMemorySize64);\r\n```\r\n\r\nOutput:\r\n```\r\nRunning process id is 12548.\r\nCurrent Process WorkingSet64: 16375808, VirtualMemory64: 2976813056, PrivateMemorySize64: 2903838720\r\n```\r\n\r\nThe Working Set is 0.016GB, while the Private Memory Size is 2.9GB.\r\n\r\n### Configuration\r\n\r\n`dotnet --info`:\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.301\r\n Commit:    43f9b18481\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.301/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.6\r\n  Commit:  7cca709db2\r\n\r\n.NET SDKs installed:\r\n  6.0.301 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n### Regression?\r\n\r\nNot sure, I\u0027ve never run dotnet on CentOS before. I plan on running under an older version of dotnet just to see what happens.\r\n\r\n### Data\r\n\r\ndotnet-counters output: \r\n```\r\n[System.Runtime]\r\n    % Time in GC since last GC (%)                                 0    \r\n    Allocation Rate (B / 1 sec)                               15,760    \r\n    CPU Usage (%)                                                  0    \r\n    Exception Count (Count / 1 sec)                                0    \r\n    GC Committed Bytes (MB)                                        0    \r\n    GC Fragmentation (%)                                           0    \r\n    GC Heap Size (MB)                                              0    \r\n    Gen 0 GC Count (Count / 1 sec)                                 0    \r\n    Gen 0 Size (B)                                                 0    \r\n    Gen 1 GC Count (Count / 1 sec)                                 0    \r\n    Gen 1 Size (B)                                                 0    \r\n    Gen 2 GC Count (Count / 1 sec)                                 0    \r\n    Gen 2 Size (B)                                                 0    \r\n    IL Bytes Jitted (B)                                       28,268    \r\n    LOH Size (B)                                                   0    \r\n    Monitor Lock Contention Count (Count / 1 sec)                  0    \r\n    Number of Active Timers                                        0    \r\n    Number of Assemblies Loaded                                   11    \r\n    Number of Methods Jitted                                     190    \r\n    POH (Pinned Object Heap) Size (B)                              0    \r\n    ThreadPool Completed Work Item Count (Count / 1 sec)           0    \r\n    ThreadPool Queue Length                                        0    \r\n    ThreadPool Thread Count                                        0    \r\n    Time spent in JIT (ms / 1 sec)                                 4.813\r\n    Working Set (MB)                                              21    \r\n```\r\n\r\n`pmap \u003cpid\u003e`: \r\n\r\n```\r\n0000564c9b2f1000     16K r---- dotnet_test\r\n0000564c9b2f5000     88K r-x-- dotnet_test\r\n0000564c9b30b000     32K r---- dotnet_test\r\n0000564c9b313000      4K r---- dotnet_test\r\n0000564c9b314000      4K rw--- dotnet_test\r\n0000564c9cb67000   1556K rw---   [ anon ]\r\n00007fe7a4000000    132K rw---   [ anon ]\r\n00007fe7a4021000  65404K -----   [ anon ]\r\n00007fe7abffe000    136K rw---   [ anon ]\r\n00007fe7ac020000 262008K -----   [ anon ]\r\n00007fe7bbffe000      8K rw---   [ anon ]\r\n00007fe7bc000000 131064K -----   [ anon ]\r\n00007fe7c3ffe000     72K rw---   [ anon ]\r\n00007fe7c4010000 131008K -----   [ anon ]\r\n00007fe7cc000000    132K rw---   [ anon ]\r\n00007fe7cc021000  65404K -----   [ anon ]\r\n00007fe7d0000000    132K rw---   [ anon ]\r\n00007fe7d0021000  65404K -----   [ anon ]\r\n00007fe7d4000000    132K rw---   [ anon ]\r\n00007fe7d4021000  65404K -----   [ anon ]\r\n00007fe7d8000000    132K rw---   [ anon ]\r\n00007fe7d8021000  65404K -----   [ anon ]\r\n00007fe7dc000000    132K rw---   [ anon ]\r\n00007fe7dc021000  65404K -----   [ anon ]\r\n00007fe7e202f000    132K -----   [ anon ]\r\n00007fe7e2050000      4K rw---   [ anon ]\r\n00007fe7e2051000      8K -----   [ anon ]\r\n00007fe7e2053000      4K rwx--   [ anon ]\r\n00007fe7e2054000     20K rw---   [ anon ]\r\n00007fe7e2059000     16K -----   [ anon ]\r\n00007fe7e205d000      4K rwx--   [ anon ]\r\n00007fe7e205e000      8K -----   [ anon ]\r\n00007fe7e2060000      4K rw---   [ anon ]\r\n00007fe7e2061000     56K -----   [ anon ]\r\n00007fe7e206f000      4K rwx--   [ anon ]\r\n00007fe7e2070000     12K -----   [ anon ]\r\n00007fe7e2073000      4K rwx--   [ anon ]\r\n00007fe7e2074000    192K -----   [ anon ]\r\n00007fe7e20a4000      4K rwx--   [ anon ]\r\n00007fe7e20a5000    344K -----   [ anon ]\r\n00007fe7e20fb000      4K rwx--   [ anon ]\r\n00007fe7e20fc000     16K -----   [ anon ]\r\n00007fe7e2100000      4K r---- System.Private.CoreLib.dll\r\n00007fe7e2101000     60K -----   [ anon ]\r\n00007fe7e2110000   7760K r-x-- System.Private.CoreLib.dll\r\n00007fe7e28a4000     60K -----   [ anon ]\r\n00007fe7e28b3000   2380K rw--- System.Private.CoreLib.dll\r\n00007fe7e2b06000     60K -----   [ anon ]\r\n00007fe7e2b15000     32K r---- System.Private.CoreLib.dll\r\n00007fe7e2b1d000     12K -----   [ anon ]\r\n00007fe7e2b20000    384K rw---   [ anon ]\r\n00007fe7e2b80000     64K rw---   [ anon ]\r\n00007fe7e2b90000    148K rwx--   [ anon ]\r\n00007fe7e2bb5000    364K -----   [ anon ]\r\n00007fe7e2c10000     64K rw---   [ anon ]\r\n00007fe7e2c20000    256K rw---   [ anon ]\r\n00007fe7e2c60000     60K rw---   [ anon ]\r\n00007fe7e2c6f000      4K -----   [ anon ]\r\n00007fe7e2c70000     64K rw---   [ anon ]\r\n00007fe7e2c80000      4K r---- System.Diagnostics.Process.dll\r\n00007fe7e2c81000     60K -----   [ anon ]\r\n00007fe7e2c90000    196K r-x-- System.Diagnostics.Process.dll\r\n00007fe7e2cc1000     60K -----   [ anon ]\r\n00007fe7e2cd0000     56K rw--- System.Diagnostics.Process.dll\r\n00007fe7e2cde000     64K -----   [ anon ]\r\n00007fe7e2cee000      4K r---- System.Diagnostics.Process.dll\r\n00007fe7e2cef000      4K -----   [ anon ]\r\n00007fe7e2cf0000     64K rw---   [ anon ]\r\n00007fe7e2d00000      4K r---- System.ComponentModel.Primitives.dll\r\n00007fe7e2d01000     60K -----   [ anon ]\r\n00007fe7e2d10000     52K r-x-- System.ComponentModel.Primitives.dll\r\n00007fe7e2d1d000     60K -----   [ anon ]\r\n00007fe7e2d2c000     16K rw--- System.ComponentModel.Primitives.dll\r\n00007fe7e2d30000     60K -----   [ anon ]\r\n00007fe7e2d3f000      4K r---- System.ComponentModel.Primitives.dll\r\n00007fe7e2d40000      4K r---- System.Console.dll\r\n00007fe7e2d41000     60K -----   [ anon ]\r\n00007fe7e2d50000    144K r-x-- System.Console.dll\r\n00007fe7e2d74000     60K -----   [ anon ]\r\n00007fe7e2d83000     36K rw--- System.Console.dll\r\n00007fe7e2d8c000     60K -----   [ anon ]\r\n00007fe7e2d9b000      4K r---- System.Console.dll\r\n00007fe7e2d9c000     16K -----   [ anon ]\r\n00007fe7e2da0000     64K rw---   [ anon ]\r\n00007fe7e2db0000      4K r---- System.Threading.dll\r\n00007fe7e2db1000     60K -----   [ anon ]\r\n00007fe7e2dc0000     56K r-x-- System.Threading.dll\r\n00007fe7e2dce000     60K -----   [ anon ]\r\n00007fe7e2ddd000     16K rw--- System.Threading.dll\r\n00007fe7e2de1000     64K -----   [ anon ]\r\n00007fe7e2df1000      4K r---- System.Threading.dll\r\n00007fe7e2df2000     56K -----   [ anon ]\r\n00007fe7e2e00000     64K rw---   [ anon ]\r\n00007fe7e2e10000     64K rw---   [ anon ]\r\n00007fe7e2e20000      4K r---- Microsoft.Win32.Primitives.dll\r\n00007fe7e2e21000     60K -----   [ anon ]\r\n00007fe7e2e30000     12K r-x-- Microsoft.Win32.Primitives.dll\r\n00007fe7e2e33000     60K -----   [ anon ]\r\n00007fe7e2e42000      8K rw--- Microsoft.Win32.Primitives.dll\r\n00007fe7e2e44000     60K -----   [ anon ]\r\n00007fe7e2e53000      4K r---- Microsoft.Win32.Primitives.dll\r\n00007fe7e2e54000     48K -----   [ anon ]\r\n00007fe7e2e60000     64K rw---   [ anon ]\r\n00007fe7e2e70000      4K r---- System.Collections.dll\r\n00007fe7e2e71000     60K -----   [ anon ]\r\n00007fe7e2e80000    192K r-x-- System.Collections.dll\r\n00007fe7e2eb0000     60K -----   [ anon ]\r\n00007fe7e2ebf000     64K rw--- System.Collections.dll\r\n00007fe7e2ecf000     60K -----   [ anon ]\r\n00007fe7e2ede000      8K r---- System.Collections.dll\r\n00007fe7e2ee0000      4K r---- System.Memory.dll\r\n00007fe7e2ee1000     60K -----   [ anon ]\r\n00007fe7e2ef0000    124K r-x-- System.Memory.dll\r\n00007fe7e2f0f000     64K -----   [ anon ]\r\n00007fe7e2f1f000     40K rw--- System.Memory.dll\r\n00007fe7e2f29000     60K -----   [ anon ]\r\n00007fe7e2f38000      4K r---- System.Memory.dll\r\n00007fe7e2f39000     28K -----   [ anon ]\r\n00007fe7e2f40000     64K rw---   [ anon ]\r\n00007fe7e2f50000     20K rw---   [ anon ]\r\n00007fe7e2f55000     44K -----   [ anon ]\r\n00007fe7e2f60000     16K rwx--   [ anon ]\r\n00007fe7e2f64000 1848044K -----   [ anon ]\r\n00007fe855bc9000      4K -----   [ anon ]\r\n00007fe855bca000   8192K rw---   [ anon ]\r\n00007fe8563ca000   1984K r-x-- libicui18n.so.50.2\r\n00007fe8565ba000   2048K ----- libicui18n.so.50.2\r\n00007fe8567ba000     48K r---- libicui18n.so.50.2\r\n00007fe8567c6000      8K rw--- libicui18n.so.50.2\r\n00007fe8567c8000      4K rw---   [ anon ]\r\n00007fe8567c9000  20296K r-x-- libicudata.so.50.2\r\n00007fe857b9b000   2044K ----- libicudata.so.50.2\r\n00007fe857d9a000      4K r---- libicudata.so.50.2\r\n00007fe857d9b000      4K rw--- libicudata.so.50.2\r\n00007fe857d9c000   1424K r-x-- libicuuc.so.50.2\r\n00007fe857f00000   2048K ----- libicuuc.so.50.2\r\n00007fe858100000     64K r---- libicuuc.so.50.2\r\n00007fe858110000      4K rw--- libicuuc.so.50.2\r\n00007fe858111000     16K rw---   [ anon ]\r\n00007fe858115000      4K -----   [ anon ]\r\n00007fe858116000   8192K rw---   [ anon ]\r\n00007fe858916000   3204K r-x-- libclrjit.so\r\n00007fe858c37000     72K r---- libclrjit.so\r\n00007fe858c49000      4K rw--- libclrjit.so\r\n00007fe858c4a000    152K rw---   [ anon ]\r\n00007fe858c70000      4K -----   [ anon ]\r\n00007fe858c71000   9864K rw---   [ anon ]\r\n00007fe859613000   4096K -----   [ anon ]\r\n00007fe859a13000      4K -----   [ anon ]\r\n00007fe859a14000   8192K rw---   [ anon ]\r\n00007fe85a214000      4K -----   [ anon ]\r\n00007fe85a215000   8192K rw---   [ anon ]\r\n00007fe85aa15000      4K -----   [ anon ]\r\n00007fe85aa16000   8192K rw---   [ anon ]\r\n00007fe85b216000      4K -----   [ anon ]\r\n00007fe85b217000   8192K rw---   [ anon ]\r\n00007fe85ba17000     28K r-x-- librt-2.17.so\r\n00007fe85ba1e000   2044K ----- librt-2.17.so\r\n00007fe85bc1d000      4K r---- librt-2.17.so\r\n00007fe85bc1e000      4K rw--- librt-2.17.so\r\n00007fe85bc1f000   3596K r-x-- libcoreclr.so\r\n00007fe85bfa2000      4K rwx-- libcoreclr.so\r\n00007fe85bfa3000   2380K r-x-- libcoreclr.so\r\n00007fe85c1f6000      4K r---- libcoreclr.so\r\n00007fe85c1f7000    892K r-x-- libcoreclr.so\r\n00007fe85c2d6000    144K r---- libcoreclr.so\r\n00007fe85c2fa000    112K rw--- libcoreclr.so\r\n00007fe85c316000    256K rw---   [ anon ]\r\n00007fe85c356000   1808K r-x-- libc-2.17.so\r\n00007fe85c51a000   2044K ----- libc-2.17.so\r\n00007fe85c719000     16K r---- libc-2.17.so\r\n00007fe85c71d000      8K rw--- libc-2.17.so\r\n00007fe85c71f000     20K rw---   [ anon ]\r\n00007fe85c724000     84K r-x-- libgcc_s-4.8.5-20150702.so.1\r\n00007fe85c739000   2044K ----- libgcc_s-4.8.5-20150702.so.1\r\n00007fe85c938000      4K r---- libgcc_s-4.8.5-20150702.so.1\r\n00007fe85c939000      4K rw--- libgcc_s-4.8.5-20150702.so.1\r\n00007fe85c93a000   1028K r-x-- libm-2.17.so\r\n00007fe85ca3b000   2044K ----- libm-2.17.so\r\n00007fe85cc3a000      4K r---- libm-2.17.so\r\n00007fe85cc3b000      4K rw--- libm-2.17.so\r\n00007fe85cc3c000    932K r-x-- libstdc++.so.6.0.19\r\n00007fe85cd25000   2048K ----- libstdc++.so.6.0.19\r\n00007fe85cf25000     32K r---- libstdc++.so.6.0.19\r\n00007fe85cf2d000      8K rw--- libstdc++.so.6.0.19\r\n00007fe85cf2f000     84K rw---   [ anon ]\r\n00007fe85cf44000      8K r-x-- libdl-2.17.so\r\n00007fe85cf46000   2048K ----- libdl-2.17.so\r\n00007fe85d146000      4K r---- libdl-2.17.so\r\n00007fe85d147000      4K rw--- libdl-2.17.so\r\n00007fe85d148000     92K r-x-- libpthread-2.17.so\r\n00007fe85d15f000   2044K ----- libpthread-2.17.so\r\n00007fe85d35e000      4K r---- libpthread-2.17.so\r\n00007fe85d35f000      4K rw--- libpthread-2.17.so\r\n00007fe85d360000     16K rw---   [ anon ]\r\n00007fe85d364000    136K r-x-- ld-2.17.so\r\n00007fe85d3fb000     28K r---- libSystem.Native.so\r\n00007fe85d402000     40K r-x-- libSystem.Native.so\r\n00007fe85d40c000     16K r---- libSystem.Native.so\r\n00007fe85d410000      4K ----- libSystem.Native.so\r\n00007fe85d411000      4K r---- libSystem.Native.so\r\n00007fe85d412000      4K rw--- libSystem.Native.so\r\n00007fe85d413000      8K r--s- System.Threading.Thread.dll\r\n00007fe85d415000     32K r--s- System.Runtime.dll\r\n00007fe85d421000     64K rw---   [ anon ]\r\n00007fe85d431000      4K -----   [ anon ]\r\n00007fe85d432000    292K rw---   [ anon ]\r\n00007fe85d47b000     20K -----   [ anon ]\r\n00007fe85d480000      8K rw---   [ anon ]\r\n00007fe85d482000    100K -----   [ anon ]\r\n00007fe85d49b000     24K r---- libhostpolicy.so\r\n00007fe85d4a1000    272K r-x-- libhostpolicy.so\r\n00007fe85d4e5000     72K r---- libhostpolicy.so\r\n00007fe85d4f7000      4K ----- libhostpolicy.so\r\n00007fe85d4f8000      4K r---- libhostpolicy.so\r\n00007fe85d4f9000      4K rw--- libhostpolicy.so\r\n00007fe85d4fa000     24K r---- libhostfxr.so\r\n00007fe85d500000    304K r-x-- libhostfxr.so\r\n00007fe85d54c000     76K r---- libhostfxr.so\r\n00007fe85d55f000      4K ----- libhostfxr.so\r\n00007fe85d560000      4K r---- libhostfxr.so\r\n00007fe85d561000      4K rw--- libhostfxr.so\r\n00007fe85d562000     24K rw---   [ anon ]\r\n00007fe85d569000      8K r--s- dotnet_test.dll\r\n00007fe85d56b000      4K -----   [ anon ]\r\n00007fe85d56c000     12K rw---   [ anon ]\r\n00007fe85d56f000      4K -----   [ anon ]\r\n00007fe85d570000     12K rw---   [ anon ]\r\n00007fe85d573000      4K -----   [ anon ]\r\n00007fe85d574000     12K rw---   [ anon ]\r\n00007fe85d577000      4K -----   [ anon ]\r\n00007fe85d578000     32K rw---   [ anon ]\r\n00007fe85d580000      4K -----   [ anon ]\r\n00007fe85d581000     16K rw---   [ anon ]\r\n00007fe85d585000      4K r---- ld-2.17.so\r\n00007fe85d586000      4K rw--- ld-2.17.so\r\n00007fe85d587000      4K rw---   [ anon ]\r\n00007ffdc9b18000    136K rw---   [ stack ]\r\n00007ffdc9be0000      8K r-x--   [ anon ]\r\nffffffffff600000      4K r-x--   [ anon ]\r\n total          2907156K\r\n ```\r\n\r\nThe line `00007fe7e2f64000 1848044K -----   [ anon ]` sticks out to me as a potential issue but since it\u0027s an anonymous mapping I have no idea what\u0027s going on there.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX4UooQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GfcRX",
                                           "createdAt":  "2022-07-13T01:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-13T01:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GiaVU",
                                           "createdAt":  "2022-07-13T16:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli have you seen something similar before? ",
                                           "updatedAt":  "2022-07-13T16:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gijq-",
                                           "createdAt":  "2022-07-13T16:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "A couple of updates: \r\n\r\n- Saw the same issue with .NET Core 3.1 and .NET 5 (on CentOS7)\r\n- Ran on Ubuntu 20 and didn\u0027t run into any problems - Private Memory is around .06GB (technically higher than windows but a much more reasonable number)\r\n\r\nSo it appears this issue is on CentOS7 only.",
                                           "updatedAt":  "2022-07-13T16:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GintV",
                                           "createdAt":  "2022-07-13T17:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "This is actually correct. The value reflects the `/proc/*/status` `VmData` field, which is described in a Linux doc as\r\n\u003e VmData is calculated as the total address space\r\nusage (i.e. VmSize) with shared and stack pages subtracted.\r\n\r\n\u003e VmSize includes pages with PROT_NONE protection\r\n(i.e. which allow none of read, execute or write). These don’t\r\nconsume any RAM or swap, just address space, so this figure can be\r\nvery inaccurate if used as an estimate for anything other than address\r\nspace.\r\n\r\nSo it is the virtual address space. I guess that your CentOS machine has more physical memory or CPU cores, so GC creates larger / more GC heaps. These heaps reserve virtual address space.",
                                           "updatedAt":  "2022-07-13T17:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi1V8",
                                           "createdAt":  "2022-07-13T18:19:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "I originally saw the issue on a CentOS machine with 16 cores and 64GB memory. However I tried running dotnet on a CentOS machine with 8 cores and 32GB memory (matches my Ubuntu machine) and I got the exact same output.\r\n\r\nI have a program that is calling a native function that allocates some unmanaged memory. So I expect the private memory to go up a small amount, but not by much. \r\n\r\nOn CentOS7:\r\nBefore native function call:\r\n```\r\nCurrent Process WorkingSet64: 17031168, VirtualMemory64: 2977234944, PrivateMemorySize64: 2903871488\r\n```\r\nAfter native function call:\r\n```\r\nCurrent Process WorkingSet64: 98279424, VirtualMemory64: 7536672768, PrivateMemorySize64: 4097085440\r\n```\r\n\r\nAfter this the private memory doesn\u0027t change much but I start getting almost constant out of memory errors. I can\u0027t find a pattern to it and they are always thrown at different points in the program. The allocations are fairly small so I don\u0027t think it is the 2GB limitation (got one OutOfMemory exception on a `Console.WriteLine` of a 10 character string).\r\n\r\nOn Ubuntu:\r\nbefore native function call:\r\n```\r\nCurrent Process WorkingSet64: 27627520, VirtualMemory64: 3033710592, PrivateMemorySize64: 68952064\r\n```\r\nafter native function call:\r\n```\r\nCurrent Process WorkingSet64: 78090240, VirtualMemory64: 7539822592, PrivateMemorySize64: 875544576\r\n```\r\n\r\nThe private memory increases to around 0.8GB (expected) and the program runs as expected without any OutOfMemory errors. The program running is exactly the same (same dll). \r\n\r\nOn the CentOS machine, while the program is running, `free -h -m` gives\r\n```\r\n              total        used        free      shared  buff/cache   available\r\nMem:            61G         10G         46G        238M        5.1G         50G\r\nSwap:            0B          0B          0B\r\n```\r\n\r\nThe working set stays fairly small and the program never tries to garbage collect. I was originally thinking it was some kind of unmanaged memory leak issue but I would\u0027ve expected to see that on Ubuntu as well.\r\n\r\nI don\u0027t know of any good way to get/visualize available heap space of the program on Linux (I did try massif and valgrind but neither seem to play well with dotnet) - I tried inspecting the core using `dotnet-dump` but there was nothing to indicate why the OutOfMemory exceptions were being thrown. I can post some of the output from the core dump if that would be helpful.\r\n\r\n",
                                           "updatedAt":  "2022-07-13T18:19:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi3qC",
                                           "createdAt":  "2022-07-13T18:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, if you are getting OOMs, then there is definitely a problem. For the beginning, can you please check and share the following?\r\n* overcommit ratio you have set on your CentOS? - `sysctl -a | grep \"vm.overcommit*\"`\r\n* virtual memory limit - `ulimit -v`\r\n\r\n",
                                           "updatedAt":  "2022-07-13T18:29:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi47F",
                                           "createdAt":  "2022-07-13T18:35:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "```\r\nvm.overcommit_kbytes = 0\r\nvm.overcommit_memory = 0\r\nvm.overcommit_ratio = 50\r\n```\r\nand `ulimit -v` gives `unlimited`. \r\n\r\nOut of curiosity I ran the same commands on my Ubuntu machine and the outputs were the same.",
                                           "updatedAt":  "2022-07-13T18:35:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi6fv",
                                           "createdAt":  "2022-07-13T18:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Can you please also try .NET 6 and .NET 7 preview to see if the behavior is the same? We have made some changes in the memory reservations for GC, so it would be easier to reason about it with the recent runtime versions.",
                                           "updatedAt":  "2022-07-13T18:43:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi8Hn",
                                           "createdAt":  "2022-07-13T18:51:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "As far as I understand, the first comment says the issue was first noticed on .Net 6.",
                                           "updatedAt":  "2022-07-13T18:51:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gi_FF",
                                           "createdAt":  "2022-07-13T19:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ah, thank you @MichalPetryka for pointing it out, I am sorry for missing that.",
                                           "updatedAt":  "2022-07-13T19:04:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjNIL",
                                           "createdAt":  "2022-07-13T20:13:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@lheinold would you be able to create a simple repro that you could share?\r\nI also wonder, do you use server GC or workstation GC in your app? \r\nAnother thing that you could do would be to open the dump you\u0027ve created in lldb and use the sos plugin to get some more details on the heaps. The steps to debug a dump with SOS are described here: https://github.com/dotnet/diagnostics/blob/main/documentation/debugging-coredump.md\r\n\r\nYou\u0027d then run the `eeheap` and `dumpheap -stat` commands.",
                                           "updatedAt":  "2022-07-13T20:13:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjkAx",
                                           "createdAt":  "2022-07-13T22:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "I did previously try the `eeheap` and `dumpheap -stat` commands on the dump file and didn\u0027t see anything useful but I\u0027ll paste them here (this is just the app that prints out memory; not the one with the native function call to avoid potential proprietary code issues. If not having the native function call doesn\u0027t give you what you need I can try to get a dump of the full thing):\r\n\r\n```\r\n\u003e eeheap                                                                    \r\nLoader Heap:\r\n--------------------------------------\r\nSystem Domain:     00007f88ab5378c0\r\nLowFrequencyHeap:  00007F8832180000(10000:5000) 00007F8832040000(10000:10000) 00007F8831F20000(10000:10000) 00007F8831E90000(10000:f000) 00007F8831E40000(10000:10000) 00007F8831DA0000(10000:10000) 00007F8831D50000(50000:50000) 00007F8831280000(3000:1000) Size: 0xa5000 (675840) bytes total, 0x3000 (12288) bytes wasted.\r\nHighFrequencyHeap: 00007F88321A0000(10000:7000) 00007F8832170000(10000:10000) 00007F8832090000(10000:10000) 00007F8832030000(10000:10000) 00007F8831FD0000(10000:10000) 00007F8831EA0000(10000:10000) 00007F8831E80000(10000:10000) 00007F8831E70000(10000:10000) 00007F8831E60000(10000:10000) 00007F8831E50000(10000:10000) 00007F8831DB0000(10000:10000) 00007F8831284000(9000:5000) Size: 0xac000 (704512) bytes total, 0x4000 (16384) bytes wasted.\r\nStubHeap:          00007F883128D000(3000:1000) Size: 0x1000 (4096) bytes.\r\nVirtual Call Stub Heap:\r\n  IndcellHeap:     00007F8831290000(6000:1000) Size: 0x1000 (4096) bytes.\r\n  LookupHeap:      00007F883129F000(4000:1000) Size: 0x1000 (4096) bytes.\r\n  ResolveHeap:     00007F88312D4000(57000:1000) Size: 0x1000 (4096) bytes.\r\n  DispatchHeap:    00007F88312A3000(31000:1000) Size: 0x1000 (4096) bytes.\r\n  CacheEntryHeap:  Size: 0x0 (0) bytes.\r\nTotal size:        Size: 0x156000 (1400832) bytes total, 0x7000 (28672) bytes wasted.\r\n--------------------------------------\r\nDomain 1:          000055f8b29ab210\r\nLowFrequencyHeap:  00007F8832180000(10000:5000) 00007F8832040000(10000:10000) 00007F8831F20000(10000:10000) 00007F8831E90000(10000:f000) 00007F8831E40000(10000:10000) 00007F8831DA0000(10000:10000) 00007F8831D50000(50000:50000) 00007F8831280000(3000:1000) Size: 0xa5000 (675840) bytes total, 0x3000 (12288) bytes wasted.\r\nHighFrequencyHeap: 00007F88321A0000(10000:7000) 00007F8832170000(10000:10000) 00007F8832090000(10000:10000) 00007F8832030000(10000:10000) 00007F8831FD0000(10000:10000) 00007F8831EA0000(10000:10000) 00007F8831E80000(10000:10000) 00007F8831E70000(10000:10000) 00007F8831E60000(10000:10000) 00007F8831E50000(10000:10000) 00007F8831DB0000(10000:10000) 00007F8831284000(9000:5000) Size: 0xac000 (704512) bytes total, 0x4000 (16384) bytes wasted.\r\nStubHeap:          00007F883128D000(3000:1000) Size: 0x1000 (4096) bytes.\r\nVirtual Call Stub Heap:\r\n  IndcellHeap:     00007F8831290000(6000:1000) Size: 0x1000 (4096) bytes.\r\n  LookupHeap:      00007F883129F000(4000:1000) Size: 0x1000 (4096) bytes.\r\n  ResolveHeap:     00007F88312D4000(57000:1000) Size: 0x1000 (4096) bytes.\r\n  DispatchHeap:    00007F88312A3000(31000:1000) Size: 0x1000 (4096) bytes.\r\n  CacheEntryHeap:  Size: 0x0 (0) bytes.\r\nTotal size:        Size: 0x156000 (1400832) bytes total, 0x7000 (28672) bytes wasted.\r\n--------------------------------------\r\nJit code heap:\r\nLoaderCodeHeap:    0000000000000000(0:0) Size: 0x0 (0) bytes.\r\nTotal size:        Size: 0x0 (0) bytes.\r\n--------------------------------------\r\nModule Thunk heaps:\r\nModule 00007f8831284000: Size: 0x0 (0) bytes.\r\nModule 00007f8831e868d8: Size: 0x0 (0) bytes.\r\nModule 00007f8831e88568: Size: 0x0 (0) bytes.\r\nModule 00007f8831ea6c68: Size: 0x0 (0) bytes.\r\nModule 00007f8831ea7848: Size: 0x0 (0) bytes.\r\nModule 00007f8831eace20: Size: 0x0 (0) bytes.\r\nModule 00007f8831eae750: Size: 0x0 (0) bytes.\r\nModule 00007f8831fd5890: Size: 0x0 (0) bytes.\r\nModule 00007f8832090000: Size: 0x0 (0) bytes.\r\nModule 00007f8832093288: Size: 0x0 (0) bytes.\r\nModule 00007f883209b9d8: Size: 0x0 (0) bytes.\r\nTotal size:      Size: 0x0 (0) bytes.\r\n--------------------------------------\r\nModule Lookup Table heaps:\r\nModule 00007f8831284000: Size: 0x0 (0) bytes.\r\nModule 00007f8831e868d8: Size: 0x0 (0) bytes.\r\nModule 00007f8831e88568: Size: 0x0 (0) bytes.\r\nModule 00007f8831ea6c68: Size: 0x0 (0) bytes.\r\nModule 00007f8831ea7848: Size: 0x0 (0) bytes.\r\nModule 00007f8831eace20: Size: 0x0 (0) bytes.\r\nModule 00007f8831eae750: Size: 0x0 (0) bytes.\r\nModule 00007f8831fd5890: Size: 0x0 (0) bytes.\r\nModule 00007f8832090000: Size: 0x0 (0) bytes.\r\nModule 00007f8832093288: Size: 0x0 (0) bytes.\r\nModule 00007f883209b9d8: Size: 0x0 (0) bytes.\r\nTotal size:      Size: 0x0 (0) bytes.\r\n--------------------------------------\r\nTotal LoaderHeap size:   Size: 0x2ac000 (2801664) bytes total, 0xe000 (57344) bytes wasted.\r\n=======================================\r\nNumber of GC Heaps: 1\r\ngeneration 0 starts at 0x00007F87FBFFF030\r\ngeneration 1 starts at 0x00007F87FBFFF018\r\ngeneration 2 starts at 0x00007F87FBFFF000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00007F87FBFFE000  00007F87FBFFF000  00007F87FC01FFE8  00007F87FC020000  0x20fe8(135144)  0x21000(135168)\r\nLarge object heap starts at 0x00007F880BFFF000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00007F880BFFE000  00007F880BFFF000  00007F880BFFF018  00007F880C000000  0x18(24)  0x1000(4096)\r\nPinned object heap starts at 0x00007F8813FFF000\r\n00007F8813FFE000  00007F8813FFF000  00007F8814007C10  00007F8814010000  0x8c10(35856)  0x11000(69632)\r\nTotal Allocated Size:              Size: 0x29c10 (171024) bytes.\r\nTotal Committed Size:              Size: 0x33000 (208896) bytes.\r\n------------------------------\r\nGC Allocated Heap Size:    Size: 0x29c10 (171024) bytes.\r\nGC Committed Heap Size:    Size: 0x33000 (208896) bytes.\r\n\u003e dumpheap -stat                                                            \r\nStatistics:\r\n              MT    Count    TotalSize Class Name\r\n00007f883217bc40        1           24 System.IO.Enumeration.FileSystemEnumerableFactory+\u003c\u003ec\r\n00007f8832174050        1           24 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+\u003c\u003ec[[System.Byte, System.Private.CoreLib]]\r\n00007f883209b7a8        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.ReadOnlyMemory`1[[System.Char, System.Private.CoreLib]], System.Private.CoreLib]]\r\n00007f8832096170        1           24 System.ConsolePal+ReadOnlyMemoryContentComparer\r\n00007f8832091648        1           24 System.ConsolePal+TerminalFormatStrings+\u003c\u003ec\r\n00007f883203ad38        1           24 System.Threading.Tasks.Task+\u003c\u003ec\r\n00007f8831fdd250        1           24 System.IO.Stream+NullStream\r\n00007f8831fd8758        1           24 System.ConsolePal+\u003c\u003ec\r\n00007f8831fd5728        1           24 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+\u003c\u003ec[[System.Char, System.Private.CoreLib]]\r\n00007f8831ea0778        1           24 System.Diagnostics.Tracing.XplatEventLogger+\u003c\u003ec\r\n00007f8831e79600        1           24 System.OrdinalIgnoreCaseComparer\r\n00007f8831e79380        1           24 System.OrdinalCaseSensitiveComparer\r\n00007f8831e78b38        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.String, System.Private.CoreLib]]\r\n00007f8831e77058        1           24 System.Collections.Generic.NonRandomizedStringEqualityComparer+OrdinalIgnoreCaseComparer\r\n00007f8831e59018        1           24 System.Int32\r\n00007f8831fdf7b8        1           26 System.Globalization.CalendarId[]\r\n00007f883217ace8        1           32 System.IO.Enumeration.FileSystemEnumerableFactory+\u003c\u003ec__DisplayClass4_0\r\n00007f88321795b8        1           32 System.Collections.Generic.List`1[[System.Diagnostics.ThreadInfo, System.Diagnostics.Process]]\r\n00007f883209b5b8        1           32 System.RuntimeType[]\r\n00007f88320999f8        1           32 System.Type[]\r\n00007f8831ea35f0        1           32 System.Collections.Generic.List`1[[System.WeakReference`1[[System.Diagnostics.Tracing.EventSource, System.Private.CoreLib]], System.Private.CoreLib]]\r\n00007f8831ea2420        1           32 System.Diagnostics.Tracing.ActivityTracker\r\n00007f8831e8e130        1           32 System.Collections.Generic.List`1[[System.Char, System.Private.CoreLib]]\r\n00007f8831e8ac20        1           32 System.Guid\r\n00007f8832171608        1           40 System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Byte, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007f8832171248        1           40 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1[[System.Byte, System.Private.CoreLib]]\r\n00007f883209fd90        1           40 Interop+Sys+ControlCharacterNames[]\r\n00007f88320914e8        1           40 System.Lazy`1[[System.ConsolePal+TerminalFormatStrings, System.Console]]\r\n00007f883203ae68        1           40 System.IO.TextWriter+NullTextWriter\r\n00007f8832039aa8        1           40 System.Threading.Tasks.TaskFactory\r\n00007f8831eafe90        1           40 System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Char, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007f8831eaf4c0        1           40 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1[[System.Char, System.Private.CoreLib]]\r\n00007f8832094e60        1           48 System.Text.ASCIIEncoding+ASCIIEncodingSealed\r\n00007f8832090fb0        2           48 System.Runtime.CompilerServices.StrongBox`1[[System.Boolean, System.Private.CoreLib]]\r\n00007f883203f328        1           48 System.IO.TextWriter+SyncTextWriter\r\n00007f8832035698        1           48 System.Text.EncoderNLS\r\n00007f88320348e8        2           48 System.Text.EncoderReplacementFallback\r\n00007f8832034660        2           48 System.Text.DecoderReplacementFallback\r\n00007f88320342d0        1           48 System.Text.UTF8Encoding+UTF8EncodingSealed\r\n00007f8831fdb410        1           48 System.Reflection.RuntimeAssembly\r\n00007f8831fd84a0        1           48 System.ConsolePal+UnixConsoleStream\r\n00007f8831e76f18        2           48 System.Collections.Generic.NonRandomizedStringEqualityComparer+OrdinalComparer\r\n00007f8832171858        1           56 System.Runtime.CompilerServices.ConditionalWeakTable`2+Container[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Byte, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007f8832034c60        1           56 System.Text.ConsoleEncoding\r\n00007f88320326d8        1           56 System.UInt32[]\r\n00007f8831fde378        1           56 System.Globalization.TextInfo\r\n00007f8831fd09e8        1           56 System.Runtime.CompilerServices.ConditionalWeakTable`2+Container[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Char, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007f883217ba50        1           64 System.IO.Enumeration.FileSystemEnumerable`1+FindTransform[[System.String, System.Private.CoreLib]]\r\n00007f883217b678        1           64 System.IO.Enumeration.FileSystemEnumerable`1+FindPredicate[[System.String, System.Private.CoreLib]]\r\n00007f883217b1d0        1           64 System.IO.Enumeration.FileSystemEnumerable`1[[System.String, System.Private.CoreLib]]\r\n00007f88320943e0        2           64 System.Collections.Generic.List`1[[System.String, System.Private.CoreLib]]\r\n00007f8832091420        1           64 System.Func`1[[System.ConsolePal+TerminalFormatStrings, System.Console]]\r\n00007f8832038c30        1           64 System.Threading.ContextCallback\r\n00007f8831fd85e0        1           64 System.Func`1[[Microsoft.Win32.SafeHandles.SafeFileHandle, System.Private.CoreLib]]\r\n00007f88320919a8        1           72 System.TermInfo+Database\r\n00007f883203a950        1           72 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]]\r\n00007f8832031f78        1           72 System.Collections.Hashtable\r\n00007f8831ea29f8        3           72 System.WeakReference`1[[System.Diagnostics.Tracing.EventSource, System.Private.CoreLib]]\r\n00007f8831ea18e0        3           72 System.Diagnostics.Tracing.NoOpEventProvider\r\n00007f8831ea16e8        3           72 System.Diagnostics.Tracing.EventPipeEventProvider\r\n00007f8831ea1308        3           72 System.Diagnostics.Tracing.TraceLoggingEventHandleTable\r\n00007f8832176cb0        1           80 System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib],[System.Globalization.CultureData, System.Private.CoreLib]]\r\n00007f88320972e8        1           80 System.Collections.Generic.Dictionary`2[[System.ReadOnlyMemory`1[[System.Char, System.Private.CoreLib]], System.Private.CoreLib],[System.ConsoleKeyInfo, System.Console]]\r\n00007f8832093d58        1           80 System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib],[System.String, System.Private.CoreLib]]\r\n00007f8832032300        1           80 System.Collections.Hashtable+SyncHashtable\r\n00007f8831fd4f60        2           80 System.Gen2GcCallback\r\n00007f8831e8f8e8        1           80 System.Collections.Generic.Dictionary`2[[System.Char, System.Private.CoreLib],[System.String, System.Private.CoreLib]]\r\n00007f8831e8d098        2           80 System.Lazy`1[[System.String, System.Private.CoreLib]]\r\n00007f8831e72928        1           80 System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007f8832177a38        1           96 System.Collections.Generic.Dictionary`2+Entry[[System.String, System.Private.CoreLib],[System.Globalization.CultureData, System.Private.CoreLib]][]\r\n00007f8832032968        1           96 System.Collections.Hashtable+bucket[]\r\n00007f8831ea5298        2           96 System.WeakReference`1[[System.Diagnostics.Tracing.EventSource, System.Private.CoreLib]][]\r\n00007f8831ea0a30        3           96 System.LazyHelper\r\n00007f8831fdcd88        1          104 System.IO.StreamWriter\r\n00007f883217aaa8        3          120 System.IO.EnumerationOptions\r\n00007f8832179170        1          120 System.Diagnostics.ProcessInfo\r\n00007f883217cf98        1          128 System.IO.Enumeration.FileSystemEnumerable`1+DelegateEnumerator[[System.String, System.Private.CoreLib]]\r\n00007f8831fd53c0        2          128 System.Func`2[[System.Object, System.Private.CoreLib],[System.Boolean, System.Private.CoreLib]]\r\n00007f8831e8c918        2          128 System.Func`1[[System.String, System.Private.CoreLib]]\r\n00007f8831e6f100        1          128 System.ExecutionEngineException\r\n00007f8831e6f000        1          128 System.StackOverflowException\r\n00007f8831e6ef00        1          128 System.OutOfMemoryException\r\n00007f8831e67b00        4          128 System.Runtime.CompilerServices.GCHeapHash\r\n00007f8832091380        1          144 System.ConsolePal+TerminalFormatStrings\r\n00007f8832032500        2          148 System.UInt16[]\r\n00007f8832171a40        1          152 System.Runtime.CompilerServices.ConditionalWeakTable`2+Entry[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Byte, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]][]\r\n00007f8831fd0fb8        1          152 System.Runtime.CompilerServices.ConditionalWeakTable`2+Entry[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Char, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]][]\r\n00007f8832031208        1          160 System.Globalization.CalendarData\r\n00007f8832179b00        3          168 System.Diagnostics.ThreadInfo[]\r\n00007f8831db5290        7          168 System.Object\r\n00007f8831fd16c8        1          184 System.Buffers.ArrayPoolEventSource\r\n00007f8831ea51c8        1          184 System.Diagnostics.Tracing.NativeRuntimeEventSource\r\n00007f8832031288        1          208 System.Globalization.CalendarData[]\r\n00007f8832092788        2          224 System.Globalization.CultureInfo\r\n00007f8832171e10        1          240 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+PerCoreLockedStacks[[System.Byte, System.Private.CoreLib]][]\r\n00007f8831fd13d8        1          240 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+PerCoreLockedStacks[[System.Char, System.Private.CoreLib]][]\r\n00007f8831eab5c8        1          264 System.Diagnostics.Process\r\n00007f8831ea1100        2          288 System.Collections.Generic.Dictionary`2+Entry[[System.Char, System.Private.CoreLib],[System.String, System.Private.CoreLib]][]\r\n00007f8831e76890        1          288 System.Collections.Generic.Dictionary`2+Entry[[System.String, System.Private.CoreLib],[System.Object, System.Private.CoreLib]][]\r\n00007f883203fb20        1          296 System.String[,]\r\n00007f8831ea13d0        3          312 System.IntPtr[]\r\n00007f8832035cf8       11          352 System.IO.FileStream\r\n00007f8831ea2500        6          384 Interop+Advapi32+EtwEnableCallback\r\n00007f8831e8b238        1          384 System.Diagnostics.Tracing.RuntimeEventSource\r\n00007f8832176948        2          400 System.Globalization.NumberFormatInfo\r\n00007f8831db8ec8       11          440 System.RuntimeType\r\n00007f8832179528        8          448 System.Diagnostics.ThreadInfo\r\n00007f8832171488        1          456 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Byte, System.Private.CoreLib]][]\r\n00007f8831eafa40        1          456 System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Char, System.Private.CoreLib]][]\r\n00007f8831ea1f28        6          672 System.Diagnostics.Tracing.EventSource+OverrideEventProvider\r\n00007f8832036e30       11          704 System.IO.Strategies.UnixFileStreamStrategy\r\n00007f8831fdf648        2          912 System.Globalization.CultureData\r\n00007f8831fd7698       22         1408 Microsoft.Win32.SafeHandles.SafeFileHandle\r\n00007f8832095a68        1         1728 System.Collections.Generic.Dictionary`2+Entry[[System.String, System.Private.CoreLib],[System.String, System.Private.CoreLib]][]\r\n00007f8831e87c78       24         2472 System.String[]\r\n000055f8b299f940       21         3056      Free\r\n00007f8831e68080       30         5612 System.Int32[]\r\n00007f8831e67bc8      140         6208 System.SByte[]\r\n00007f883209dc80        5         6240 System.Collections.Generic.Dictionary`2+Entry[[System.ReadOnlyMemory`1[[System.Char, System.Private.CoreLib]], System.Private.CoreLib],[System.ConsoleKeyInfo, System.Console]][]\r\n00007f8832035138        5         8169 System.Byte[]\r\n00007f8831ea0d18        7         9410 System.Char[]\r\n00007f8831dbb0f8       17        38976 System.Object[]\r\n00007f8831e6d2e0      664        66876 System.String\r\nTotal 1135 objects\r\n\r\n```\r\n\r\nI decided to try reproducing on CentOS7 WSL (my home computer runs Windows) and I didn\u0027t run into any problems. For reference, I\u0027ve been running an Amazon EC2 instance with CentOS installed (the Ubuntu machine was Amazon EC2 as well).\r\n\r\nI also tried running `valgrind --tool=massif dotnet run` on the (broken) CentOS machine and it crashed with an illegal instruction error: \r\n```\r\n==23379== Massif, a heap profiler\r\n==23379== Copyright (C) 2003-2017, and GNU GPL\u0027d, by Nicholas Nethercote\r\n==23379== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==23379== Command: dotnet run\r\n==23379== \r\nvex amd64-\u003eIR: unhandled instruction bytes: 0x48 0xCF 0x48 0x8D 0x64 0x24 0x30 0x5D 0xC3 0x90\r\nvex amd64-\u003eIR:   REX=1 REX.W=1 REX.R=0 REX.X=0 REX.B=0\r\nvex amd64-\u003eIR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE\r\nvex amd64-\u003eIR:   PFX.66=0 PFX.F2=0 PFX.F3=0\r\n==23379== valgrind: Unrecognised instruction at address 0x6753c06.\r\n==23379==    at 0x6753C06: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x651170C: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6510395: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6514827: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6514C77: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6514FE5: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6465E97: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x5C9B9FDF: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C9ADDBE: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5D2BDCAE: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5D2BD9D7: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5D2BDFD0: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5D320F57: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5DC1E238: ???\r\n==23379==    by 0x5DC1E1AA: ???\r\n==23379==    by 0x5D2BE103: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5D322E6A: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==23379==    by 0x5C90D585: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C8F3F85: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C908777: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C908687: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C908626: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C9041CB: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x5C8E8941: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==23379==    by 0x65BDC76: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x63F3AED: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x640C671: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x63B8829: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x63B8E2C: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x640C746: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x6751A8D: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/libcoreclr.so)\r\n==23379==    by 0x4E34EA4: start_thread (pthread_create.c:307)\r\n==23379==    by 0x5B6B9FC: clone (clone.S:111)\r\n```\r\n\r\nThis is on a brand new dotnet console app (no changes to the default, just prints Hello World). \r\n\r\nI ran the same default console app on my CentOS WSL and it ran with no issues. I reinstalled dotnet since I first made this post so here is the new `dotnet --info`:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.302\r\n Commit:    c857713418\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.302/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.7\r\n  Architecture: x64\r\n  Commit:       0ec02c8c96\r\n\r\n.NET SDKs installed:\r\n  6.0.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\r\n\r\nI don\u0027t see any debugging symbols available on the package repo (been installing the .NET SDK using `yum`) so I can\u0027t read the stack trace.",
                                           "updatedAt":  "2022-07-13T22:07:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjlQj",
                                           "createdAt":  "2022-07-13T22:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e I don\u0027t see any debugging symbols available on the package repo (been installing the .NET SDK using `yum`) so I can\u0027t read the stack trace.\r\n\r\nYou can use the dotnet-symbol tool to extract those as described in the doc that I\u0027ve linked above. You just run it on the dump and it will fetch everything that\u0027s needed. You may also add the symbol files (the one for libcoreclr.so should be sufficient) manually in lldb, it doesn\u0027t seem to be able to fetch it automatically. The lldb command is:\r\n`target symbols add /path/to/libcoreclr.so.dwarf`\r\n",
                                           "updatedAt":  "2022-07-13T22:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjpkX",
                                           "createdAt":  "2022-07-13T22:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I have tried it on my local installation of CentOS 7 in a VM and I can repro what you were getting:\r\n```\r\nRunning process id is 3202.\r\nCurrent Process WorkingSet64: 17235968, VirtualMemory64: 3005341696, PrivateMemorySize64: 2920706048\r\n```\r\n\r\nSo I can investigate it locally",
                                           "updatedAt":  "2022-07-13T22:37:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GmCtg",
                                           "createdAt":  "2022-07-14T12:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@lheinold so this memory is really just what we reserve in virtual memory space with PROT_NONE. 2GB out of that is reserved for executable code allocator for performance reasons so that it resides close to the libcoreclr.so and JITted code can use PC relative calls / jumps as much as possible. \r\n\r\nAnd I can confirm that on Ubuntu 18.04, this is not accounted for in the PrivateMemorySize64 (which means in `VmData` in `/proc/*/status`, as I have mentioned). My guess is that this difference is caused by the differences in kernel. CentOS 7 has kernel 3.10 while Ubuntu 18.04 has kernel 4.15. I can see that the virtual memory accounting was reworked in 2015 (https://lwn.net/Articles/669536/) and kernel 3.10 was released in 2013.\r\n\r\nWith .NET 7, you\u0027ll find that the size has grown even larger, to 280GB. This is due to changes in GC that now reserves a lot more of virtual address space.\r\n\r\nNevertheless, this should not be related to OOMs unless you\u0027d have virtual memory size limits set (which you don\u0027t according to the `ulimit -v` output you\u0027ve shared). If you\u0027d be able to create a repro that demonstrates the OOMs on CentOS 7, I would be happy to debug that.",
                                           "updatedAt":  "2022-07-14T12:17:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GmpiP",
                                           "createdAt":  "2022-07-14T14:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "I can try to work on a repro of the OOM error and get back to you. \r\n\r\nDo you know of a tool like VMMap from sysinternals that I can run on linux? Tried running `pmap` but it was pretty unhelpful. Did you have a chance to run `valgrind --tool=massif` on your CentOS7 VM? I managed to load the symbols for the `.so` files (it isn\u0027t reading the pdb symbols though) and it looks like it is running into an exception of some kind:\r\n```\r\nvex amd64-\u003eIR: unhandled instruction bytes: 0x48 0xCF 0x48 0x8D 0x64 0x24 0x30 0x5D 0xC3 0x90\r\nvex amd64-\u003eIR:   REX=1 REX.W=1 REX.R=0 REX.X=0 REX.B=0\r\nvex amd64-\u003eIR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE\r\nvex amd64-\u003eIR:   PFX.66=0 PFX.F2=0 PFX.F3=0\r\n==8284== valgrind: Unrecognised instruction at address 0x6753c06.\r\n==8284==    at 0x6753C06: RtlRestoreContext (context2.S:182)\r\n==8284==    by 0x651170C: ExceptionTracker::ResumeExecution(_CONTEXT*) (src/coreclr/vm/exceptionhandling.cpp:3959)\r\n==8284==    by 0x6510395: ProcessCLRException (src/coreclr/vm/exceptionhandling.cpp:1199)\r\n==8284==    by 0x6514827: UnwindManagedExceptionPass2(PAL_SEHException\u0026, _CONTEXT*) (src/coreclr/vm/exceptionhandling.cpp:4448)\r\n==8284==    by 0x6514C77: UnwindManagedExceptionPass1(PAL_SEHException\u0026, _CONTEXT*) (src/coreclr/vm/exceptionhandling.cpp:4625)\r\n==8284==    by 0x6514FE5: DispatchManagedException(PAL_SEHException\u0026, bool) (src/coreclr/vm/exceptionhandling.cpp:4796)\r\n==8284==    by 0x6465E97: IL_Throw(Object*) (src/coreclr/vm/jithelpers.cpp:4129)\r\n==8284==    by 0x5DC51022: ???\r\n==8284==    by 0x5C8C3CAE: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C831759: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C8316DC: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5F8DB3D8: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Net.NetworkInformation.dll)\r\n==8284==    by 0x5F8DB176: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Net.NetworkInformation.dll)\r\n==8284==    by 0x5F8DB85E: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Net.NetworkInformation.dll)\r\n==8284==    by 0x5F8DB535: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Net.NetworkInformation.dll)\r\n==8284==    by 0x5F8D5B46: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Net.NetworkInformation.dll)\r\n==8284==    by 0x5D3311D5: ??? (in /usr/share/dotnet/sdk/6.0.302/dotnet.dll)\r\n==8284==    by 0x5C928A63: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C92D585: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C913E0A: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C928793: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C928687: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x5C931CD6: ??? (in /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.7/System.Private.CoreLib.dll)\r\n==8284==    by 0x65BDC76: CallDescrWorkerInternal (unixasmmacrosamd64.inc:850)\r\n==8284==    by 0x63F3AED: CallDescrWorkerWithHandler (src/coreclr/vm/callhelpers.cpp:67)\r\n==8284==    by 0x63F3AED: DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) (src/coreclr/vm/callhelpers.cpp:220)\r\n==8284==    by 0x640C671: ThreadNative::KickOffThread_Worker(void*) (src/coreclr/vm/comsynchronizable.cpp:157)\r\n==8284==    by 0x63B8829: ManagedThreadBase_DispatchInner (src/coreclr/vm/threads.cpp:7321)\r\n==8284==    by 0x63B8829: ManagedThreadBase_DispatchMiddle (src/coreclr/vm/threads.cpp:7365)\r\n==8284==    by 0x63B8829: operator() (src/coreclr/vm/threads.cpp:7523)\r\n==8284==    by 0x63B8829: operator() (src/coreclr/vm/threads.cpp:7525)\r\n==8284==    by 0x63B8829: ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) (src/coreclr/vm/threads.cpp:7549)\r\n==8284==    by 0x63B8E2C: ManagedThreadBase_FullTransition (src/coreclr/vm/threads.cpp:7569)\r\n==8284==    by 0x63B8E2C: ManagedThreadBase::KickOff(void (*)(void*), void*) (src/coreclr/vm/threads.cpp:7604)\r\n==8284==    by 0x640C746: ThreadNative::KickOffThread(void*) (src/coreclr/vm/comsynchronizable.cpp:228)\r\n==8284==    by 0x6751A8D: CorUnix::CPalThread::ThreadEntry(void*) (src/coreclr/pal/src/thread/thread.cpp:1862)\r\n==8284==    by 0x4E34EA4: start_thread (pthread_create.c:307)\r\n==8284==    by 0x5B6B9FC: clone (clone.S:111)\r\n==8284== Your program just tried to execute an instruction that Valgrind\r\n==8284== did not recognise.  There are two possible reasons for this.\r\n==8284== 1. Your program has a bug and erroneously jumped to a non-code\r\n==8284==    location.  If you are running Memcheck and you just saw a\r\n==8284==    warning about a bad jump, it\u0027s probably your program\u0027s fault.\r\n==8284== 2. The instruction is legitimate but Valgrind doesn\u0027t handle it,\r\n==8284==    i.e. it\u0027s Valgrind\u0027s fault.  If you think this is the case or\r\n==8284==    you are not sure, please let us know and we\u0027ll try to fix it.\r\n==8284== Either way, Valgrind will now raise a SIGILL signal which will\r\n==8284== probably kill your program.\r\n==8284== valgrind: Unrecognised instruction at address 0x6753c06.\r\n==8284==    at 0x6753C06: RtlRestoreContext (context2.S:182)\r\n==8284==    by 0x6753DB3: ExecuteHandlerOnCustomStack(int, siginfo_t*, void*, unsigned long, SignalHandlerWorkerReturnPoint*) (src/coreclr/pal/src/arch/amd64/signalhandlerhelper.cpp:74)\r\n==8284==    by 0x6717D9B: SwitchStackAndExecuteHandler (src/coreclr/pal/src/exception/signal.cpp:543)\r\n==8284==    by 0x6717D9B: sigsegv_handler(int, siginfo_t*, void*) (src/coreclr/pal/src/exception/signal.cpp:607)\r\n==8284==    by 0x4E3C62F: ??? (in /usr/lib64/libpthread-2.17.so)\r\n==8284==    by 0x674A950: CONTEXTFromNativeContext (src/coreclr/pal/src/thread/context.cpp:639)\r\n```\r\n\r\nIf I could get a massif output from the dotnet process getting the OOM error I think it would be very helpful with debugging.\r\n\r\nI was also wondering if, when getting an OOM exception, it\u0027s possible to view:\r\n\r\n- The number of bytes requested\r\n- The number of bytes that the program believes are available \r\n\r\nAdditionally, when I run my program and catch OOM exceptions, it can (sometimes) continue to run and even execute commands which previously resulted in an OOM exception (but the memory usage of the program does not seem to go down): (My native code triggers a callback where I print out memory usage)\r\n```\r\nRunning process id is 28151.\r\nCurrent Process WorkingSet64: 17137664, VirtualMemory64: 2977247232, PrivateMemorySize64: 2903883776\r\n{CALLBACK SETUP}\r\nCurrent Process WorkingSet64: 98402304, VirtualMemory64: 7536799744, PrivateMemorySize64: 4097212416\r\n{CALLBACK}\r\nCurrent Process WorkingSet64: 98639872, VirtualMemory64: 7536898048, PrivateMemorySize64: 4097310720\r\nGCMemInfo: \r\nTotalAvailableBytes: 66547007488\r\nFragmentedBytes: 0\r\nFinalization pending: 0\r\nHeapSizeBytes: 0\r\nTotal GC Memory: 322136\r\nCollection Count (0): 0\r\n{CALLBACK}\r\nOUT OF MEMORY!!! [GetCurrentProcess]\r\nOUT OF MEMORY!!! [GCMemInfo]\r\n{CALLBACK}\r\nOUT OF MEMORY!!! [GetCurrentProcess]\r\nGCMemInfo: \r\nTotalAvailableBytes: 66547007488\r\nFragmentedBytes: 0\r\nFinalization pending: 0\r\nHeapSizeBytes: 0\r\nTotal GC Memory: 370696\r\nCollection Count (0): 0\r\n{CALLBACK}\r\nOUT OF MEMORY!!! [GetCurrentProcess]\r\nOut of memory. \u003c-- uncaught exception from a statement that isn\u0027t GetGCMemInfo or GetCurrentProcess\r\n```",
                                           "updatedAt":  "2022-07-14T14:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gms-N",
                                           "createdAt":  "2022-07-14T14:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The Valgrind unrecognized instruction error in RtlRestoreContext is a known issue. It doesn’t understand the iret instruction. I think there was a fixed version of valgrind, but I may be mistaken. Anyways, when I’ve used Valgrind in the past, I’ve always built it from the latest sources.\r\nAs for the vmmap like tool, what were you missing in what pmap is providing? It seems to show basically the same information.\r\n\r\nAs for debugging the OOM, it would be useful to run it under lldb and set a breakpoint at ThrowOutOfMemory function. Stack trace would then show you what is stemmed from.",
                                           "updatedAt":  "2022-07-14T14:57:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GsIvN",
                                           "createdAt":  "2022-07-15T21:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "So I think I was wrong about this being CentOS specific - I have now run into it on Ubuntu as well, although it took me running my code a couple times to see it (which is odd).\r\n\r\nThe OutOfMemory exception is actually thrown here:\r\n```\r\n(lldb) bt\r\n* thread #11, name = \u0027UPD-CLIENT00\u0027, stop reason = breakpoint 1.1\r\n  * frame #0: 0x00007f5b743a01d4 libcoreclr.so`ThrowOutOfMemory() [inlined] void VolatileStoreWithoutBarrier\u003cint\u003e(pt=\u003cunavailable\u003e, val=-2147024882) at volatile.h:282:23\r\n    frame #1: 0x00007f5b743a01d4 libcoreclr.so`ThrowOutOfMemory() at ex.cpp:1044\r\n    frame #2: 0x00007f5b7419b946 libcoreclr.so`TieredCompilationManager::CreateBackgroundWorker() at tieredcompilation.cpp:367:13\r\n    frame #3: 0x00007f5b740b02f6 libcoreclr.so`CallCountingManager::OnCallCountThresholdReached(transitionBlock=\u003cunavailable\u003e, stubIdentifyingToken=\u003cunavailable\u003e) at callcounting.cpp:779:56\r\n    frame #4: 0x00007f5b7439ead9 libcoreclr.so`OnCallCountThresholdReachedStub2 at unixasmmacrosamd64.inc:974\r\n```\r\nOut of Memory is thrown if the line `if (!newThread-\u003eCreateNewThread(0, BackgroundWorkerBootstrapper0, newThread, W(\".NET Tiered Compilation Worker\")))` in `tiered compilation.cpp` fails. I stepped through the thread creation and found that we succeed until here: https://github.com/dotnet/runtime/blob/3d10d70a450e13d7cdbf1f843ff0b6bf768448cc/src/coreclr/pal/src/thread/thread.cpp#L768\r\n\r\nAt this point it gets weird because the compiler appears to have made this function inline which messes up the line numbers. According to the debugger, we then go to line 781 (`else`) and then line 800 (`pthread_attr_destroy`), which indicates we hit `goto EXIT` at some point. `palError` ends up being set to 1359 which is INTERNAL_ERROR. (value is technically optimized out but it does get passed to a function later). It does appear to do some error logging but I\u0027m not sure where it writes to. Not sure what the root cause of this could be. ",
                                           "updatedAt":  "2022-07-15T21:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GsOJ1",
                                           "createdAt":  "2022-07-15T22:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@lheinold than you for the details. The error happens somewhere in the CPalThread::ThreadEntry, that\u0027s what executed on the new thread and there are couple of possible failures there. We basically report failure in thread creation / start an OOM, so that would explain why you were getting it even though there was no shortage of memory. The OOM really means out of resources, which can also be that we got out of file descriptors. So I wonder, what is your open files limit? Can you please share the `ulimit -a` output to see all the limits your machine has set? \r\nI also wonder if your app might be leaking file descriptors (which includes net sockets). You can check number of file descriptors open e.g. by \r\n`ls -1 /proc/PID/fd | wc -l` where **PID** is the process id.",
                                           "updatedAt":  "2022-07-15T22:31:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G1Ivs",
                                           "createdAt":  "2022-07-18T21:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "@janvorli I believe I figured out what is going on. I tracked down the syscall causing thread creation to fail to `sched_setaffinity`. What\u0027s happening is: \r\n\r\n1. The first native code call creates a new thread, \"callback thread\" and accelerates it to realtime priority. It also uses `cpuset` to confine the thread to certain cpus (which are not necessarily the same cpus that the main process is running on) \r\n2. We use a native code call to setup a callback, and this callback always gets called from the \"callback thread\" \r\n3. When running code within the callback, the CLR tries to create a \"background worker\" which is why `ThreadEntry` gets called. The child thread it creates inherits the affinity (and realtime priority) from the \"callback thread\"\r\n4. The CLR tries to set the affinity of the child thread back to the affinity of the base thread, which fails since the affinity of the base thread is invalid for the \"callback thread\" (and therefore its child thread). \r\n5. Thread creation fails and an OOM exception is thrown\r\n\r\nDue to the fact that the callback thread created by the native code has been accelerated to realtime priority, it really shouldn\u0027t be creating any children, since they will inherit the realtime priority and likely starve each other. Is there a way to prevent child threads from being created for this one specific thread? The code currently running in the callback function does not technically need to stay there - I\u0027m wondering if there\u0027s a way to get the information passed to the callback to a different thread (that can create as many children as it wants) for processing. ",
                                           "updatedAt":  "2022-07-18T21:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G1dpM",
                                           "createdAt":  "2022-07-18T23:08:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@lheinold that\u0027s great that you were able to identify the culprit. The thread that is created is a helper thread that re-compiles CLR methods that have executed very frequently. The `CallCountingManager::OnCallCountThresholdReached` can be called when executing any method call on any thread and the only way to prevent that from happening is to disable tiered compilation completely. But that would hurt performance significantly, as we would not be able to optimize hot code.\r\nWhat kind of information do you need to pass to the callback? Would a value type be sufficient for this purpose?\r\n",
                                           "updatedAt":  "2022-07-18T23:08:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G33et",
                                           "createdAt":  "2022-07-19T13:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lheinold",
                                           "body":  "@janvorli The way it is set up right now is that on the native side, the callback is a function pointer of type `callback_func(C_ExampleStruct_t *st)`. I have created a C# delegate of type `callback_func(ref ExampleStruct_t st)` where `ExampleStruct_t` is a C# struct that matches the C struct `C_ExampleStruct_t`. `ExampleStruct_t` is around 50 bytes but has many members that are pointers to other structs (currently represented by `IntPtr` and then parsed using the `Marshal.PtrToStructure` method). The original reference / address of the original struct needs to be saved (currently kept as a private class variable). The structure is allocated (and freed) by the native code and is part of shared memory. I\u0027m hoping that I can use the callback to call a function running in a different (existing) thread, that takes a reference to the struct. I\u0027m not sure that this would help though.\r\n\r\nWhen creating the background worker thread, do you manually change the thread priority? Or does it always inherit (and therefore if called from a realtime thread will starve the parent thread as both threads can\u0027t run at the same time)?",
                                           "updatedAt":  "2022-07-19T13:24:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fhSih",
                                           "createdAt":  "2023-06-22T12:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emreyigit",
                                           "body":  "I can confirm that the issue is valid for .Net 7 on Amazon Linux 2 AMI. It can be reproduced with a simple \"Hello World\" application. `proc.PrivateMemorySize64` reports ~120mb while actual usage is about few hundred kb.\r\n",
                                           "updatedAt":  "2023-06-22T12:36:39Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "High Private Memory Size on CentOS",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73043",
        "createdAt":  "2022-07-29T04:19:12Z",
        "number":  73043,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:33:29Z",
        "body":  "### Description\n\nI built v7.0.0-preview.6.22324.4 using gcc-12 -fsanitize=undefined which inserts runtime checks into the compiled C++ code. The default optimization level was used.\r\n\r\nThere are a number of runtime errors reported when I run my simple gcperfsim C# application.  I only ran one program, as I was doing a survey of effectiveness of this tool chain.\r\n\r\nAttached is the stderr of the running process. The few I\u0027ve examined look to be true-positives.\r\n\r\nAll of these errors need to be investigated and fixed or carefully suppressed.\n\n### Reproduction Steps\n\nI have my own hairy build script that wraps the \"standard\" build scripts.  I compile with gcc-12 using -fsanitize=undefined\r\n[runtime_error_x64.txt](https://github.com/dotnet/runtime/files/9216003/runtime_error_x64.txt)\r\n[runtime_error_aarch64.txt](https://github.com/dotnet/runtime/files/9216020/runtime_error_aarch64.txt)\r\n\n\n### Expected behavior\n\nNo runtime errors\n\n### Actual behavior\n\nLots of runtime errors.  Each needs to be examined closely.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYH4ePA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HdTZK",
                                           "createdAt":  "2022-07-29T04:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-29T04:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gfWFJ",
                                           "createdAt":  "2023-07-03T16:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@AaronRobinsonMSFT is this something we are looking into for 8?",
                                           "updatedAt":  "2023-07-03T16:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gfYPl",
                                           "createdAt":  "2023-07-03T16:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "There are series of issues related to sanitizers that I\u0027ve deferred due to @jkoritzinsky working on getting infrastructure in place - see https://github.com/dotnet/runtime/pull/74623. We can move this to vNext. I\u0027d prefer to keep it out of Future as it makes it easy to lose track of.",
                                           "updatedAt":  "2023-07-03T16:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gfh48",
                                           "createdAt":  "2023-07-03T16:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "Working the sanitizer issues is not something one can knock off in an\r\nhour.  To fairly address and eliminate the issues may require refactoring\r\nor other non-trivial changes.\r\n\r\nOn Mon, Jul 3, 2023 at 9:27 AM Aaron Robinson ***@***.***\u003e\r\nwrote:\r\n\r\n\u003e There are series of issues related to sanitizers that I\u0027ve deferred due to\r\n\u003e @jkoritzinsky \u003chttps://github.com/jkoritzinsky\u003e working on getting\r\n\u003e infrastructure in place - see #74623\r\n\u003e \u003chttps://github.com/dotnet/runtime/pull/74623\u003e. We can move this to\r\n\u003e vNext. I\u0027d prefer to keep it out of Future as it makes it easy to lose\r\n\u003e track of.\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/73043#issuecomment-1618838501\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/ABBLLY3F62PY5SLW46WM4BDXOLXH5ANCNFSM547NFMOQ\u003e\r\n\u003e .\r\n\u003e You are receiving this because you authored the thread.Message ID:\r\n\u003e ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2023-07-03T16:49:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "undefined behavior detected by runtime as compiled by g++-12 -fsanitize=undefined ",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73407",
        "createdAt":  "2022-08-04T22:07:47Z",
        "number":  73407,
        "author":  "trylek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-03T16:26:36Z",
        "body":  "According to the PR comments in\r\n\r\nhttps://github.com/dotnet/runtime/pull/73341\r\n\r\nCoreCLR runtime handling of explicit this in function pointer signatures is incomplete and inconsistent\r\nand needs improvements and fixes. This issue tracks this work that is expected to happen in .NET 8 timeframe.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\n/cc @jkotas @davidwrighton - please feel free to add more details or clarifications, my expertise here is still quite limited.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR99rAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H32gM",
                                           "createdAt":  "2022-08-04T22:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @steveharter This is related to function pointers support in reflection",
                                           "updatedAt":  "2022-08-04T22:16:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H32sD",
                                           "createdAt":  "2022-08-04T22:17:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "https://github.com/dotnet/runtime/issues/69273",
                                           "updatedAt":  "2022-08-04T22:17:32Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Clean up and fix management of ExplicitThis in the CoreCLR native runtime",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73418",
        "createdAt":  "2022-08-05T00:07:26Z",
        "number":  73418,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:33:41Z",
        "body":  "### Description\r\n\r\nhttps://github.com/dotnet/runtime/blob/cc4daddcbc8c92ecce117c9a63353c150277cedb/src/coreclr/vm/methodtablebuilder.cpp#L1054 (and many other places) invokes a placement new on a call to method GetStackingAllocator(), which calls UnsafeAllocNoThrow, which returns the placed new.  The placed new is not aligned to 0 mod 16.\r\n\r\nUnsafeAllocNoThrow() is a chamber of horrors.\r\n\r\n-  It returns a cast -1 when the number of things requested is 0, which happens.  (Perhaps this in itself is a bug.)\r\n-  -1 is not aligned to 0 mod 16. It also has the magic number \"7\" in the code, which should really be the desired alignment (a power of 2) -1.  (The code now assumes the caller is happy with alignment of 8 bytes.)\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\ncompile with clang-14 -g -O0 -fsanitize=undefined; run the code,; and wait for runtime errors.\r\n\r\n### Expected behavior\r\n\r\nno runtime errors\r\n\r\n### Actual behavior\r\n\r\nruntime errors from ubsan\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\ncc / @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSBoQsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4osb",
                                           "createdAt":  "2022-08-05T04:27:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e The placed new is not aligned to 0 mod 16.\r\n\r\n@RobertHenry6bev Other than things like SIMD, I\u0027m not aware of any 16-byte alignment requirements. Am I overlooking something that requires that alignment guarantee in the runtime?",
                                           "updatedAt":  "2022-08-05T04:27:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H5xUO",
                                           "createdAt":  "2022-08-05T11:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "From what I can understand, only the global new operators (`operator new(size_t)` and `operator new[](size_t)` are required to return memory aligned to `__STDCPP_DEFAULT_NEW_ALIGNMENT__` (otherwise I don\u0027t see how things like `std::vector\u003cT\u003e` would be implemented). For the placement forms the requirement is to return something that is aligned to the input type, i.e. `alignof(bmtMethodSlotTable)` in this case. So maybe the problem is that the latter is not happening?",
                                           "updatedAt":  "2022-08-05T11:07:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H6gEf",
                                           "createdAt":  "2022-08-05T14:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e required to return memory aligned to `__STDCPP_DEFAULT_NEW_ALIGNMENT__`\r\n\r\nAh. Thanks @jakobbotsch. Agreed, this doesn\u0027t seem to apply to placement new operators.",
                                           "updatedAt":  "2022-08-05T14:26:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H8kVH",
                                           "createdAt":  "2022-08-05T22:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "is this required in 7? ",
                                           "updatedAt":  "2022-08-05T22:28:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H8nPC",
                                           "createdAt":  "2022-08-05T22:43:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqJJCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2022-08-05T22:57:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e is this required in 7?\r\n\r\nNot at this point.",
                                           "updatedAt":  "2022-08-05T22:43:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IBLXs",
                                           "createdAt":  "2022-08-08T15:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@RobertHenry6bev do you know where it was called from when it got the 0 size argument? Comment in the code when checking for the zero 0 says it returns -1 to indicate a failure. We cannot return NULL in that case, as we would interpret it as OOM. I would expect it to crash at a caller due to the invalid address returned in such case.",
                                           "updatedAt":  "2022-08-08T15:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ICjse",
                                           "createdAt":  "2022-08-08T21:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "0  StackingAllocator::UnsafeAllocNoThrow (this=0x7fffffff87c0, Size=0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/stackingallocator.h:129\r\n#1  0x00007ffff51c800e in operator new[] (n=0, alloc=0x7fffffff87c0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/stackingallocator.cpp:395\r\n#2  0x00007ffff5081aaf in MethodTableBuilder::EnumerateClassFields (this=0x7fffffffad58) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/methodtablebuilder.cpp:3352\r\n#3  0x00007ffff5077e8b in MethodTableBuilder::BuildMethodTableThrowing (this=0x7fffffffad58, pAllocator=0x7ffff6d2dac0 \u003cg_pSystemDomainMemory+2320\u003e, pLoaderModule=0x7fff74a54000, pModule=0x7fff74a54000, cl=33554527, \r\n    pBuildingInterfaceList=0x0, pLayoutRawFieldInfos=0x0, pParentMethodTable=0x0, bmtGenericsInfo=0x7fffffffaef0, parentInst=..., cBuildingInterfaceList=0)\r\n    at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/methodtablebuilder.cpp:1594\r\n#4  0x00007ffff50bb016 in ClassLoader::CreateTypeHandleForTypeDefThrowing (pModule=0x7fff74a54000, cl=33554527, inst=..., pamTracker=0x7fffffffb458)\r\n    at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/methodtablebuilder.cpp:12396\r\n#5  0x00007ffff4adf4c5 in ClassLoader::CreateTypeHandleForTypeKey (pKey=0x7fffffffc080, pamTracker=0x7fffffffb458) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:2902\r\n#6  0x00007ffff4adf17f in ClassLoader::DoIncrementalLoad (pTypeKey=0x7fffffffc080, typeHnd=..., currentLevel=CLASS_LOAD_BEGIN) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:2842\r\n#7  0x00007ffff4ae28c0 in ClassLoader::LoadTypeHandleForTypeKey_Body (this=0x5555556e9f30, pTypeKey=0x7fffffffc080, typeHnd=..., targetLevel=CLASS_LOAD_EXACTPARENTS)\r\n    at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:3518\r\n#8  0x00007ffff4ad5c32 in ClassLoader::LoadTypeHandleForTypeKey (this=0x5555556e9f30, pTypeKey=0x7fffffffc080, typeHnd=..., targetLevel=CLASS_LOADED, pInstContext=0x0)\r\n    at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:3237\r\n#9  0x00007ffff4ad9caa in ClassLoader::LoadTypeDefThrowing (pModule=0x7fff74a54000, typeDef=33554527, fNotFoundAction=ClassLoader::ReturnNullIfNotFound, fUninstantiated=ClassLoader::PermitUninstDefOrRef, tokenNotToLoad=0, \r\n    level=CLASS_LOADED, pTargetInstantiation=0x0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:2218\r\n#10 0x00007ffff4acd0a3 in ClassLoader::LoadTypeHandleThrowing (this=0x5555556e9f30, pName=0x7fffffffc5e0, level=CLASS_LOADED, pLookInThisModuleOnly=0x0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:1465\r\n#11 0x00007ffff4acc7c9 in ClassLoader::LoadTypeHandleThrowIfFailed (this=0x5555556e9f30, pName=0x7fffffffc5e0, level=CLASS_LOADED, pLookInThisModuleOnly=0x0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:324\r\n#12 0x00007ffff4acc617 in ClassLoader::LoadTypeByNameThrowing (pAssembly=0x5555556e9ed0, nameSpace=0x7ffff5ec30c1 \"System\", name=0x7ffff5ec6c91 \"Object\", fNotFound=ClassLoader::ThrowIfNotFound, fLoadTypes=ClassLoader::LoadTypes, \r\n    level=CLASS_LOADED) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/clsload.cpp:285\r\n\r\n\r\nHere\u0027s a \"list\" (source code) at the top frames of interest, in the likely event that your notion of line number is a little off from my notion of line number:\r\n\r\n\r\n0  StackingAllocator::UnsafeAllocNoThrow (this=0x7fffffff87c0, Size=0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/stackingallocator.h:129\r\n129\t            RETURN (void*)(-1LL);\r\n(gdb) list\r\n124\t\r\n125\t        assert(Size != 0);\r\n126\t        //special case, 0 size alloc, return non-null but invalid pointer\r\n127\t        if (Size == 0)\r\n128\t        {\r\n129\t            RETURN (void*)(-1LL);\r\n130\t            // RETURN (void*)(-1LL \u0026 ~(__STDCPP_DEFAULT_NEW_ALIGNMENT__ - 1));\r\n131\t        }\r\n132\t\r\n133\t        // Round size up to ensure alignment.\r\n(gdb) up\r\n#1  0x00007ffff51c800e in operator new[] (n=0, alloc=0x7fffffff87c0) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/stackingallocator.cpp:395\r\n395\t    void *retval = alloc-\u003eUnsafeAllocNoThrow((unsigned)n);\r\n(gdb) list\r\n390\t    if(n \u003e (size_t)(1\u003c\u003c31)) ThrowOutOfMemory();\r\n391\t#else\r\n392\t    if(n == (size_t)-1) ThrowOutOfMemory();    // overflow occurred\r\n393\t#endif\r\n394\t\r\n395\t    void *retval = alloc-\u003eUnsafeAllocNoThrow((unsigned)n);\r\n396\t    if (retval == NULL)\r\n397\t        ThrowOutOfMemory();\r\n398\t\r\n399\t    return retval;\r\n(gdb) up\r\n#2  0x00007ffff5081aaf in MethodTableBuilder::EnumerateClassFields (this=0x7fffffffad58) at /mnt/robhenry/dotnet/clang11/runtime/src/coreclr/vm/methodtablebuilder.cpp:3352\r\n3352\t    bmtMetaData-\u003epFields = new (GetStackingAllocator()) mdToken[bmtMetaData-\u003ecFields];\r\n(gdb) list\r\n3347\t    }\r\n3348\t\r\n3349\t    bmtMetaData-\u003ecFields = hEnumField.EnumGetCount();\r\n3350\t\r\n3351\t    // Retrieve the fields and store them in a temp array.\r\n3352\t    bmtMetaData-\u003epFields = new (GetStackingAllocator()) mdToken[bmtMetaData-\u003ecFields];\r\n3353\t    bmtMetaData-\u003epFieldAttrs = new (GetStackingAllocator()) DWORD[bmtMetaData-\u003ecFields];\r\n3354\t\r\n3355\t    DWORD   dwFieldLiteralInitOnly = fdLiteral | fdInitOnly;\r\n3356\t    DWORD   dwMaxFieldDefRid = pMDInternalImport-\u003eGetCountWithTokenKind(mdtFieldDef);\r\n(gdb) \r\n\r\n",
                                           "updatedAt":  "2022-08-08T21:27:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IClyk",
                                           "createdAt":  "2022-08-08T21:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, it looks like this is benign. The bmtMetaData-\u003epFields and bmtMetaData-\u003epFieldAttrs are never accessed if the bmtMetaData-\u003ecFields is zero.",
                                           "updatedAt":  "2022-08-08T21:37:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IGcbM",
                                           "createdAt":  "2022-08-09T17:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "I suspect that ubsan modifies the IL to check the address of the memory to be passed to the constructor **assuming** that if  the constructor is invoked as `new type_t[n]` that n \u003e 0.  Perhaps this is a bug or over-generalization in ubsan.\r\n\r\nIndeed, when new Type[0] is run, the clang++-14 built binaries complain at runtime with a runtime error, but g++-12 does not.",
                                           "updatedAt":  "2022-08-09T17:13:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IGhCx",
                                           "createdAt":  "2022-08-09T17:33:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "I opened issue\r\n\r\nhttps://github.com/llvm/llvm-project/issues/57032\r\n",
                                           "updatedAt":  "2022-08-09T17:33:23Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "placement new does not return aligned data in/near  GetStackingAllocator()",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73833",
        "createdAt":  "2022-08-12T05:12:22Z",
        "number":  73833,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:34:33Z",
        "body":  "### Description\n\nRunning on x86_64 compiled with clang14 -O0 -fsanitize=address compiling source near head/main as of Aug 12 00:09 UTC.\r\nAttached are the first 1000 lines of error reports, perhaps many of them redundant.\r\nI was unable to get the tsan\u0027ed application to run under gdb, but did not perservere.\r\n\r\nInterpreting tsan output is tricky.  I hold the tsan lead author in very high regard.\n\n### Reproduction Steps\n\ncompile with clang14  -fsanitize=address\r\nRun with LD_PRELOAD pointing to the appropriate libtsan.so.N file, as it needs to be loaded before anything else.\n\n### Expected behavior\n\nno thread sanitizer errors at runtime\n\n### Actual behavior\n\n\r\n[robhenry-first-tsan.txt](https://github.com/dotnet/runtime/files/9313791/robhenry-first-tsan.txt)\r\nLots of apparent errors.  These are tricky to understand.  See attachment.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVZ9WA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ISOKA",
                                           "createdAt":  "2022-08-12T05:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-12T05:12:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVn1Y",
                                           "createdAt":  "2023-07-12T19:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "is this required for 8? ",
                                           "updatedAt":  "2023-07-12T19:03:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "tsan (thread sanitizer) failures on x86_64 from clang14",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74432",
        "createdAt":  "2022-08-23T15:02:27Z",
        "number":  74432,
        "author":  "mwetzko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-23T17:22:16Z",
        "body":  "Hello,\r\n\r\nwith .NET 6.0.8 the following line\r\n\r\nhttps://github.com/dotnet/runtime/blob/916876dd8f3e1648508d5ac115718a0e99b9f08c/src/coreclr/vm/threads.cpp#L8218\r\n\r\nthrows a FailFastException when loaded by Chrome Browser:\r\n![image](https://user-images.githubusercontent.com/49561427/186179713-50b28d29-d0d3-437f-b93d-7771bf042631.png)\r\n![image](https://user-images.githubusercontent.com/49561427/186180463-92c18028-da5e-4c82-a288-2755bbadd660.png)\r\n\r\nThis does only occur on some computers where the OS does not matter (occurs on both Win10 and Win11). Having 2 PCs with Windows 11, same Chrome browser version installed, one does work, the other crashes.\r\n\r\nIt looks like coreclr.dll is not Intel CET (Control-flow Enforcement) compatible, because the PC where it is working, CET is off, the PC where it is crashing, CET is on.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSPq6xA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5I99WW",
                                           "createdAt":  "2022-08-23T15:02:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-23T15:02:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I-fkz",
                                           "createdAt":  "2022-08-23T16:53:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli fyi. There was partial CET support on .NET 6, and the support is much improved in 7. Would it be possible to check this on latest .NET 7 builds? ",
                                           "updatedAt":  "2022-08-23T16:53:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I-rrE",
                                           "createdAt":  "2022-08-23T17:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mwetzko",
                                           "body":  "@mangod9 thank you for your reply. Ok, I will check.",
                                           "updatedAt":  "2022-08-23T17:22:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Process exits silently with FailFastException thrown in Thread::StaticInitialize",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74930",
        "createdAt":  "2022-09-01T14:09:47Z",
        "number":  74930,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T23:32:45Z",
        "body":  "### Description\r\n\r\nper ubsan on x86_64 ubuntu linux memcpy called with at least 1 null pointer arg, with 0 length.  AddBlob is asked to add an empty blob, which memcpy\u0027s 0 bytes.  Easy fix.\r\n\r\n```\r\n(gdb) where\r\n#0  __ubsan::ScopedReport::~ScopedReport (this=this@entry=0x7fffffffb760, __in_chrg=\u003coptimized out\u003e)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_diag.cpp:388\r\n#1  0x00007ffff7991c81 in handleNonNullArg (Data=Data@entry=0x7ffff6cfaa60, Opts=..., IsAttr=IsAttr@entry=true)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:740\r\n#2  0x00007ffff7994a44 in __ubsan::__ubsan_handle_nonnull_arg (Data=Data@entry=0x7ffff6cfaa60)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:744\r\n#3  0x00007ffff4b85118 in StgBlobPool::AddBlob (this=0x5555557c9c50, pData=\u003coptimized out\u003e, pnOffset=0x7fffffffbaac)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/utilcode/stgpool.cpp:1566\r\n#4  0x00007ffff5d5afbc in StgBlobPool::InitNew (this=this@entry=0x5555557c9c50, cbSize=\u003coptimized out\u003e, cItems=\u003coptimized out\u003e, \r\n    fAddEmptryItem=fAddEmptryItem@entry=1) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/utilcode/stgpool.cpp:1432\r\n#5  0x00007ffff5c0a44f in MetaData::BlobHeapRW::InitializeEmpty_WithItemsCount (cItemsCount=\u003coptimized out\u003e, cbAllocationSize=200, \r\n    this=0x5555557c9c50) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/md/inc/../heaps/blobheap.h:127\r\n#6  CMiniMdRW::InitNew (this=this@entry=0x5555557c8700) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/md/enc/metamodelrw.cpp:1935\r\n#7  0x00007ffff5b8a002 in CLiteWeightStgdbRW::InitNew (this=this@entry=0x5555557c8700)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/md/enc/liteweightstgdbrw.cpp:520\r\n#8  0x00007ffff5acddae in RegMeta::CreateNewMD (this=this@entry=0x5555557c3b10)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/md/compiler/regmeta.cpp:247\r\n#9  0x00007ffff5a0a850 in Disp::DefineScope (this=\u003coptimized out\u003e, rclsid=..., dwCreateFlags=0, riid=..., ppIUnk=0x7fffffffbfc0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/md/compiler/disp.cpp:101\r\n#10 0x00007ffff4ed1e97 in (anonymous namespace)::DefineEmitScope (iid=..., ppEmit=0x7fffffffbfc0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/assembly.cpp:104\r\n#11 Assembly::CreateDynamic (pBinder=0x5555555b3870, pAssemblyNameParts=pAssemblyNameParts@entry=0x7fffffffc408, \r\n    hashAlgorithm=hashAlgorithm@entry=0, access=access@entry=1, pKeepAlive=pKeepAlive@entry=0x7fffffffc2d8)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/assembly.cpp:418\r\n#12 0x00007ffff4ebd384 in AppDomain_CreateDynamicAssembly (assemblyLoadContext=..., pAssemblyNameParts=0x7fffffffc408, hashAlgorithm=0, access=1, \r\n    retAssembly=...) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/appdomainnative.cpp:32\r\n#13 0x00007fff74d7c633 in ?? ()\r\n#14 0x000000003754b4c8 in ?? ()\r\n#15 0x00007ffff60a9c88 in vtable for InlinedCallFrame () from /home/robhenry/git-work-e2/robhenry-perf/dotnet_teche/published7.0/libcoreclr.so\r\n#16 0xffffffffffffffff in ?? ()\r\n#17 0x0000000000000000 in ?? ()\r\n(gdb) frame 4\r\n#4  0x00007ffff5d5afbc in StgBlobPool::InitNew (this=this@entry=0x5555557c9c50, cbSize=\u003coptimized out\u003e, cItems=\u003coptimized out\u003e, \r\n    fAddEmptryItem=fAddEmptryItem@entry=1) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/utilcode/stgpool.cpp:1432\r\n1432\t        IfFailRet(AddBlob(\u0026emptyBlob, \u0026nIndex_Ignore));\r\n(gdb) \r\n```\r\n\r\n### Reproduction Steps\r\n\r\nrun ubsan, or by inspection\r\n\r\n### Expected behavior\r\n\r\ndo not call memcpy with null pointers\r\n\r\n### Actual behavior\r\n\r\nbad call to memcpy\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n/cc @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSZJ7UQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JkntR",
                                           "createdAt":  "2022-09-01T14:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-01T14:09:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ubsan: memcpy illegal invocation",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74946",
        "createdAt":  "2022-09-01T18:10:11Z",
        "number":  74946,
        "author":  "devenr23",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-01T18:53:33Z",
        "body":  "### Description\n\nI\u0027ve narrowed down a specific scenario where a `nullable int` loses it\u0027s value when passed in an async method call _on Linux runtimes only_. It behaves correctly on Windows runtimes.\r\n\r\nI cannot remove any method params or stop using the dynamic object or else the bug doesn\u0027t reproduce in Linux.\r\n\r\nWhen this code uses .NET 5, 6 or 7 the problem is fixed for Windows and Linux runtimes. It is specific to Core 3.1 on Linux.\n\n### Reproduction Steps\n\nProject file:\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nSource code:\r\n```\r\nusing Newtonsoft.Json.Linq;\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TestConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main()\r\n        {\r\n            int? nullableInt = new Random().Next();\r\n            dynamic dynamicObj = JObject.Parse(\"{ SomeProp: \\\"someValue\\\" }\");\r\n\r\n            Console.WriteLine($\"Started with: {nullableInt}\");\r\n\r\n            await AsyncMethod(null, null, dynamicObj.SomeProp.ToString(), nullableInt, null, null, null);\r\n\r\n            Console.WriteLine($\"Finished with: {nullableInt}\");\r\n        }\r\n\r\n        public static Task AsyncMethod(string stringParam, string stringParam1, string stringParam2, int? nullableInt, string stringParam3, string stringParam4, string stringParam5)\r\n        {\r\n            Console.WriteLine($\"Method has Value: {nullableInt}, HasValue: {nullableInt.HasValue}\");\r\n\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDockerfile for my local computer:\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:3.1 AS build\r\nWORKDIR /source\r\n\r\n# copy project file and restore as distinct layers\r\nCOPY TestConsoleApp.csproj ./\r\nRUN dotnet restore TestConsoleApp.csproj\r\n\r\n# copy and build app\r\nCOPY *.cs ./\r\nWORKDIR /source\r\nRUN dotnet publish -c Release --no-restore -o /app\r\n\r\n# final stage/image\r\nFROM mcr.microsoft.com/dotnet/runtime:3.1\r\nWORKDIR /app\r\nCOPY --from=build /app .\r\nENTRYPOINT [\"dotnet\", \"TestConsoleApp.dll\"]\r\n```\r\n\r\nUsing `dotnet run` on a windows machine yields expected results. Running the same code on a Linux image reproduces the problem.\r\n\r\nIf you have docker for Windows installed and set to linux images (the default). Run these commands to build and run it:\r\n```\r\ndocker build -t testconsoleapp .\r\ndocker run --rm -it testconsoleapp\r\n```\r\n\n\n### Expected behavior\n\nThe nullable int should retain it\u0027s value in the async method.\r\n\r\nCorrect output running on Windows:\r\n```\r\nC:\\Code\\TestConsoleApp\u003edotnet run\r\nStarted with: 1812515723\r\nMethod has Value: 1812515723, HasValue: True\r\nFinished with: 1812515723\r\n```\n\n### Actual behavior\n\nIncorrect output running on a Linux image:\r\n\r\n```\r\nC:\\Code\\TestConsoleApp\u003edocker run --rm -it testconsoleapp\r\nStarted with: 689686085\r\nMethod has Value: 0, HasValue: True\r\nFinished with: 689686085\r\n```\r\n\r\nThe value is set to zero in the async method instead of retaining its value.\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows x64 arch.\r\nDocker for Windows using default Linux Debian image.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSZdpPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JlsuY",
                                           "createdAt":  "2022-09-01T18:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-01T18:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JluWu",
                                           "createdAt":  "2022-09-01T18:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devenr23",
                                           "body":  "@mangod9 I don\u0027t know if I have rights to label this issue to your area (area-VM-coreclr).",
                                           "updatedAt":  "2022-09-01T18:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jl1zO",
                                           "createdAt":  "2022-09-01T18:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @devenr23, 3.1 is going to be out of support soon, so we might not be able to make a fix in that release. Assume you have a workaround where if its passed as a single parameter it does work? Thx! ",
                                           "updatedAt":  "2022-09-01T18:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jl2k8",
                                           "createdAt":  "2022-09-01T18:53:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devenr23",
                                           "body":  "Yes, we can work around it if needed.\r\n\r\nWhat is a little scary is that in this example, the problem disappears if I change the number of method parameters or stop using a dynamic object before calling the method. So, it isn\u0027t clear what the criteria are that are safe or not to use.",
                                           "updatedAt":  "2022-09-01T18:53:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Nullable value lost calling async method with other parameters on Linux 3.1 runtime",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74964",
        "createdAt":  "2022-09-01T20:48:02Z",
        "number":  74964,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:30:51Z",
        "body":  "### Description\r\n\r\nBuilding with gcc-12, -fsanitize=undefined, -O1 on x86_64 ubuntu linux, results in the glibc malloc/free base library complaining at runtime about a double free.  This issue is not seen when compiling -O0 and -Og, but is seen -O1, -O2, -O3. I have not run asan to provide more powerful analysis.  I do not know if this happens on ARM64 hosts.  I do not know if this represents a bug in the ubsan instrumentation, a bug in gcc-12 optimization, or a bug in the dotnet/runtime.\r\n\r\n```\r\n#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140735140050496) at ./nptl/pthread_kill.c:44\r\n#1  __pthread_kill_internal (signo=6, threadid=140735140050496) at ./nptl/pthread_kill.c:78\r\n#2  __GI___pthread_kill (threadid=140735140050496, signo=signo@entry=6) at ./nptl/pthread_kill.c:89\r\n#3  0x00007ffff7445476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\r\n#4  0x00007ffff742b7f3 in __GI_abort () at ./stdlib/abort.c:79\r\n#5  0x00007ffff748c6f6 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff75deb8c \"%s\\n\")\r\n    at ../sysdeps/posix/libc_fatal.c:155\r\n#6  0x00007ffff74a3d7c in malloc_printerr (str=str@entry=0x7ffff75e17b0 \"double free or corruption (out)\") at ./malloc/malloc.c:5664\r\n#7  0x00007ffff74a5ef0 in _int_free (av=0x7ffff761cc80 \u003cmain_arena\u003e, p=0x7fff6c003bc0, have_lock=\u003coptimized out\u003e) at ./malloc/malloc.c:4588\r\n#8  0x00007ffff74a84d3 in __GI___libc_free (mem=\u003coptimized out\u003e) at ./malloc/malloc.c:3391\r\n#9  0x00007ffff61eeaa2 in PAL_free (pvMem=\u003coptimized out\u003e)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/cruntime/malloc.cpp:79\r\n#10 0x00007ffff60c38b6 in ClrFree (p=\u003coptimized out\u003e)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/utilcode/clrhost_nodependencies.cpp:304\r\n#11 operator delete[] (p=\u003coptimized out\u003e) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/utilcode/clrhost_nodependencies.cpp:410\r\n#12 0x00007ffff5bcdda9 in StackingAllocator::~StackingAllocator (this=this@entry=0x7fff6c001470, __in_chrg=\u003coptimized out\u003e)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/stackingallocator.cpp:76\r\n#13 0x00007ffff5a1d6b7 in Delete\u003cStackingAllocator\u003e (value=0x7fff6c001470)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:999\r\n#14 FunctionBase\u003cStackingAllocator*, \u0026(void DoNothing\u003cStackingAllocator*\u003e(StackingAllocator*)), \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*))\u003e::DoRelease (this=0x7fff74079370) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:716\r\n#15 BaseHolder\u003cStackingAllocator*, FunctionBase\u003cStackingAllocator*, \u0026(void DoNothing\u003cStackingAllocator*\u003e(StackingAllocator*)), \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*))\u003e, 0ul, \u0026(int CompareDefault\u003cStackingAllocator*\u003e(StackingAllocator*, StackingAllocator*))\u003e::Release\r\n    (this=0x7fff74079370) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:293\r\n#16 BaseHolder\u003cStackingAllocator*, FunctionBase\u003cStackingAllocator*, \u0026(void DoNothing\u003cStackingAllocator*\u003e(StackingAllocator*)), \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*))\u003e, 0ul, \u0026(int CompareDefault\u003cStackingAllocator*\u003e(StackingAllocator*, StackingAllocator*))\u003e::~BaseHolder (this=0x7fff74079370, __in_chrg=\u003coptimized out\u003e) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:261\r\n#17 BaseWrapper\u003cStackingAllocator*, FunctionBase\u003cStackingAllocator*, \u0026(void DoNothing\u003cStackingAllocator*\u003e(StackingAllocator*)), \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*))\u003e, 0ul, \u0026(int CompareDefault\u003cStackingAllocator*\u003e(StackingAllocator*, StackingAllocator*))\u003e::~BaseWrapper (this=0x7fff74079370, __in_chrg=\u003coptimized out\u003e) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:469\r\n#18 Wrapper\u003cStackingAllocator*, \u0026(void DoNothing\u003cStackingAllocator*\u003e(StackingAllocator*)), \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*)), 0ul, \u0026(int CompareDefault\u003cStackingAllocator*\u003e(StackingAllocator*, StackingAllocator*)), true\u003e::~Wrapper (this=0x7fff74079370, \r\n    __in_chrg=\u003coptimized out\u003e) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:781\r\n#19 SpecializedWrapper\u003cStackingAllocator, \u0026(void Delete\u003cStackingAllocator\u003e(StackingAllocator*))\u003e::~SpecializedWrapper (\r\n    this=0x7fff74079370, __in_chrg=\u003coptimized out\u003e) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/inc/holder.h:846\r\n#20 ClassLoader::CreateTypeHandleForTypeDefThrowing (pModule=\u003coptimized out\u003e, cl=\u003coptimized out\u003e, inst=..., \r\n    pamTracker=pamTracker@entry=0x7fff74079680) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/methodtablebuilder.cpp:12431\r\n#21 0x00007ffff55f4178 in ClassLoader::CreateTypeHandleForTypeKey (pKey=pKey@entry=0x7fff74079ab0, \r\n    pamTracker=pamTracker@entry=0x7fff74079680) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/typekey.h:146\r\n#22 0x00007ffff55f5593 in ClassLoader::DoIncrementalLoad (pTypeKey=pTypeKey@entry=0x7fff74079ab0, typeHnd=..., \r\n    currentLevel=currentLevel@entry=CLASS_LOAD_BEGIN) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/clsload.cpp:2883\r\n#23 0x00007ffff55f6d5e in ClassLoader::LoadTypeHandleForTypeKey_Body (this=this@entry=0x555555690730, \r\n    pTypeKey=pTypeKey@entry=0x7fff74079ab0, typeHnd=..., targetLevel=targetLevel@entry=CLASS_LOAD_EXACTPARENTS)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/clsload.cpp:3559\r\n#24 0x00007ffff55f79bd in ClassLoader::LoadTypeHandleForTypeKey (this=this@entry=0x555555690730, pTypeKey=pTypeKey@entry=0x7fff74079ab0, \r\n--Type \u003cRET\u003e for more, q to quit, c to continue without paging--q\r\nQuit\r\n(gdb) frame 12\r\n#12 0x00007ffff5bcdda9 in StackingAllocator::~StackingAllocator (this=this@entry=0x7fff6c001470, __in_chrg=\u003coptimized out\u003e)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/stackingallocator.cpp:76\r\n76\t        delete [] (char*)m_DeferredFreeBlock;\r\n\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nsee above\r\n\r\n### Expected behavior\r\n\r\nno runtime error from glibc free complaining about double free\r\n\r\n### Actual behavior\r\n\r\nruntime error\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n/cc @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSZkCEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JmQIS",
                                           "createdAt":  "2022-09-01T20:48:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-01T20:48:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ubsan build leads to double-free call to glibc free",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76041",
        "createdAt":  "2022-09-22T21:35:56Z",
        "number":  76041,
        "author":  "AntonLapounov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T17:22:18Z",
        "body":  "Affected tests:\r\n- `baseservices/finalization/CriticalFinalizer/CriticalFinalizer.sh`\r\n- `baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd`\r\n\r\nRunfo failures in [last 30 days - .sh](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime+name%3A%22baseservices%2Ffinalization%2Fcriticalfinalizer%2Fcriticalfinalizer.sh%22) and [last 30 days - .cmd](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime+name%3A%22baseservices%5C%5Cfinalization%5C%5Ccriticalfinalizer%5C%5Ccriticalfinalizer.cmd%22):\r\n- 9/23 - 188 failures\r\n    - First failure in Rolling run https://runfo.azurewebsites.net/view/build/?number=24556 on 9/20 ... more than 50x failures per day\r\n\r\nCoreCLR: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75573-merge-b0042e942c0145f38e/baseservices.finalization/1/console.e135272f.log?helixlogtype=result\r\n```\r\nBEGIN EXECUTION\r\n\"C:\\h\\w\\A68508F4\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  CriticalFinalizer.dll \r\nFinalized 0 Normal and 0 Critical objects.\r\nThe first Critical object was finalized after 0 Normal objects.\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n\r\nMono: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-74586-merge-662a1339f83d41b786/baseservices.finalization/1/console.0af36b40.log?helixlogtype=result\r\n```\r\nBEGIN EXECUTION\r\n/tmp/helix/working/A1850911/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false CriticalFinalizer.dll \u0027\u0027\r\nFinalized 100 Normal and 99 Critical objects.\r\nThe first Critical object was finalized after 100 Normal objects.\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n```\r\n{ \"ErrorMessage\":\"CriticalFinalizer\" } \r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n### Report\r\n|Build|Definition|Step Name|Console log|\r\n|---|---|---|---|\r\n|[28655](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28655)|dotnet/runtime|LLVM AOT compile CoreCLR tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/28655/logs/1777)\r\n\r\n|Build|Definition|Test|\r\n|---|---|---|\r\n|[29097](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29097)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29097\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=586054\u0026resultId=103265)|\r\n|[28963](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28963)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28963\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585362\u0026resultId=100006)|\r\n|[28964](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28964)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28964\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585370\u0026resultId=110809)|\r\n|[29051](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29051)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29051\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585598\u0026resultId=103004)|\r\n|[29016](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29016)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29016\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585520\u0026resultId=103041)|\r\n|[29012](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29012)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29012\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585474\u0026resultId=103041)|\r\n|[29010](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29010)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=29010\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585434\u0026resultId=100069)|\r\n|[28977](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28977)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28977\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=585086\u0026resultId=103262)|\r\n|[28942](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28942)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28942\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=584954\u0026resultId=100005)|\r\n|[28861](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28861)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28861\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=584842\u0026resultId=100142)|\r\n|[28621](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28621)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28621\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=583814\u0026resultId=110809)|\r\n|[28899](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28899)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28899\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=583614\u0026resultId=101098)|\r\n|[28892](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28892)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28892\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=583586\u0026resultId=101314)|\r\n|[28655](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28655)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28655\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=582966\u0026resultId=100089)|\r\n|[28841](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28841)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28841\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=582902\u0026resultId=100188)|\r\n|[28819](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28819)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28819\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=582510\u0026resultId=103262)|\r\n|[28749](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28749)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28749\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=581790\u0026resultId=110005)|\r\n|[28766](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28766)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28766\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=581716\u0026resultId=100122)|\r\n|[28692](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28692)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28692\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=581136\u0026resultId=100204)|\r\n|[28682](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28682)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28682\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=581120\u0026resultId=100224)|\r\n|[28649](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28649)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28649\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=578836\u0026resultId=103262)|\r\n|[28606](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28606)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28606\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=577392\u0026resultId=110809)|\r\n|[28615](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28615)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28615\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=577274\u0026resultId=100989)|\r\n|[28597](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28597)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28597\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=576808\u0026resultId=100304)|\r\n|[28592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28592)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28592\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=576724\u0026resultId=100269)|\r\n|[28591](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28591)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28591\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=576700\u0026resultId=100192)|\r\n|[27258](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27258)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27258\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=575262\u0026resultId=100071)|\r\n|[28513](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28513)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28513\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=574886\u0026resultId=110809)|\r\n|[28494](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28494)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28494\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=574254\u0026resultId=103262)|\r\n|[28476](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28476)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28476\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=573856\u0026resultId=103262)|\r\n|[28414](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28414)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28414\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=573554\u0026resultId=110809)|\r\n|[27149](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27149)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27149\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=572978\u0026resultId=103260)|\r\n|[28383](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28383)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28383\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=572118\u0026resultId=100254)|\r\n|[28313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28313)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28313\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=571294\u0026resultId=103262)|\r\n|[28293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28293)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28293\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=570840\u0026resultId=103262)|\r\n|[28278](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28278)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28278\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=571006\u0026resultId=101258)|\r\n|[28251](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28251)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28251\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=570948\u0026resultId=101314)|\r\n|[28306](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28306)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28306\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=570932\u0026resultId=101059)|\r\n|[28149](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28149)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28149\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=568764\u0026resultId=100166)|\r\n|[27779](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27779)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27779\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=567762\u0026resultId=103261)|\r\n|[27987](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27987)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27987\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=565762\u0026resultId=102210)|\r\n|[27102](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27102)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27102\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=566954\u0026resultId=100022)|\r\n|[28056](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28056)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28056\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=566628\u0026resultId=100144)|\r\n|[28047](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28047)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28047\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=565850\u0026resultId=103003)|\r\n|[28023](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28023)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=28023\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=566096\u0026resultId=101314)|\r\n|[27880](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27880)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27880\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=565226\u0026resultId=100076)|\r\n|[27960](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27960)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27960\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=564516\u0026resultId=103261)|\r\n|[27940](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27940)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27940\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=564364\u0026resultId=100391)|\r\n|[27866](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27866)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27866\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=562906\u0026resultId=100005)|\r\n|[26219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=26219)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=26219\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=562654\u0026resultId=100085)|\r\n|[27820](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27820)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27820\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=561308\u0026resultId=103261)|\r\n|[27804](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27804)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27804\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=561162\u0026resultId=103261)|\r\n|[27855](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27855)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27855\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=562074\u0026resultId=101059)|\r\n|[27831](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27831)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27831\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=561664\u0026resultId=100259)|\r\n|[27789](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27789)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27789\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=561164\u0026resultId=100804)|\r\n|[27742](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27742)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27742\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=560558\u0026resultId=103260)|\r\n|[27754](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27754)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27754\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=560328\u0026resultId=103002)|\r\n|[27703](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27703)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27703\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=559784\u0026resultId=100032)|\r\n|[26661](https://dev.azure.com/dnceng-public/public/_build/results?buildId=26661)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=26661\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=558390\u0026resultId=103259)|\r\n|[27657](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27657)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27657\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=558654\u0026resultId=100278)|\r\n|[27643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27643)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27643\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=558066\u0026resultId=100130)|\r\n|[27588](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27588)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27588\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=557792\u0026resultId=100158)|\r\n|[27630](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27630)|dotnet/runtime|[baseservices.finalization.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27630\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=557690\u0026resultId=103002)|\r\n|[27557](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27557)|dotnet/runtime|[baseservices\\\\finalization\\\\CriticalFinalizer\\\\CriticalFinalizer.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=27557\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=556856\u0026resultId=100002)|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|33|65|65|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY-_nPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K1p08",
                                           "createdAt":  "2022-09-22T21:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-22T21:36:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K2ABC",
                                           "createdAt":  "2022-09-22T23:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HJLeee",
                                           "body":  "@AntonLapounov Please take a look. https://github.com/dotnet/runtime/pull/76046",
                                           "updatedAt":  "2022-09-22T23:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K4FZI",
                                           "createdAt":  "2022-09-23T13:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@AntonLapounov it seems it may have been a regression caused by #75952.\r\nThis is blocking significantly CI (see top post with update and links) -- can you please roll back the change, or disable the affected test ASAP? (definitely before the weekend) Thanks!",
                                           "updatedAt":  "2022-09-23T13:38:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K502c",
                                           "createdAt":  "2022-09-23T20:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Failed in https://github.com/dotnet/runtime/pull/75965\r\nLog: https://helix.dot.net/api/2019-06-17/jobs/ab2fe355-3fb8-48fd-bf26-f1ab51bd2648/workitems/baseservices.finalization/console\r\n```log\r\nbaseservices\\finalization\\CriticalFinalizer\\CriticalFinalizer.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\h\\w\\BD950A05\\w\\B05A0982\\uploads\\Reports\\baseservices.finalization\\CriticalFinalizer\\CriticalFinalizer.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\h\\w\\BD950A05\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  CriticalFinalizer.dll \r\n      Finalized 0 Normal and 0 Critical objects.\r\n      The first Critical object was finalized after 0 Normal objects.\r\n      Expected: 100\r\n      Actual: 101\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=C:\\h\\w\\BD950A05\\p\r\n      \u003e C:\\h\\w\\BD950A05\\w\\B05A0982\\e\\baseservices\\finalization\\CriticalFinalizer\\CriticalFinalizer.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at baseservices_finalization._CriticalFinalizer_CriticalFinalizer_._CriticalFinalizer_CriticalFinalizer_cmd()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\h\\w\\BD950A05\\w\\B05A0982\\uploads\\Reports\\baseservices.finalization\\CriticalFinalizer\\CriticalFinalizer.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\h\\w\\BD950A05\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  CriticalFinalizer.dll \r\n        Finalized 0 Normal and 0 Critical objects.\r\n        The first Critical object was finalized after 0 Normal objects.\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=C:\\h\\w\\BD950A05\\p\r\n        \u003e C:\\h\\w\\BD950A05\\w\\B05A0982\\e\\baseservices\\finalization\\CriticalFinalizer\\CriticalFinalizer.cmd\r\n  Finished:    baseservices.finalization.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   baseservices.finalization.XUnitWrapper  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 1.235s\r\n```",
                                           "updatedAt":  "2022-09-23T20:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7L-N",
                                           "createdAt":  "2022-09-24T17:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCswg2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2022-09-24T18:46:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Disabling the test in https://github.com/dotnet/runtime/pull/76131. Please re-enable once fixed.",
                                           "updatedAt":  "2022-09-24T17:51:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7mtk",
                                           "createdAt":  "2022-09-25T07:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AustinWise",
                                           "body":  "If my system is doing something CPU intensive, like compiling CoreCLR, the test failure reproduces more reliably. It fails rough 1 in 100 runs.\r\n\r\nCalling `GC.Collect` and `GC.WaitForPendingFinalizers` several times in a loop seems to fix the problem. I\u0027m not sure though that is really a reliable way to fix the test.\r\n",
                                           "updatedAt":  "2022-09-25T07:32:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7nJ_",
                                           "createdAt":  "2022-09-25T07:46:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "There are two issues:\r\n* The lambda used in `Parallel.For` creates a closure object (`DisplayClass`) and places the `arr` reference there. That closure object may be kept alive by one of thread pool threads.\r\n* In some Mono runs the test reports only 99 `Critical` objects collected out of 100.  I suspect that `GC.WaitForPendingFinalizers()` might not synchronize the current thread with the finalizer thread regarding visibility of memory stores performed by finalizers.",
                                           "updatedAt":  "2022-09-25T07:46:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7oCo",
                                           "createdAt":  "2022-09-25T08:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "Looking at the Mono code, there may be a race condition in `sgen_have_pending_finalizers` for checking the `pending_unqueued_finalizer` flag: https://github.com/dotnet/runtime/blob/c986a12cdae428a3d603ced4e24690d2629c9cb3/src/mono/mono/sgen/sgen-gc.c#L2906-L2912",
                                           "updatedAt":  "2022-09-25T08:13:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ivEVu",
                                           "createdAt":  "2023-07-29T01:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I am closing this based on https://github.com/dotnet/runtime/pull/76046. We can reopen if this continues to be an issue. ",
                                           "updatedAt":  "2023-07-29T01:19:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7EV1",
                                           "createdAt":  "2023-08-13T18:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AustinWise",
                                           "body":  "@mangod9 This test is still disabled, referencing this issue:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/tests/issues.targets#L14-L16\r\n\r\nSo I\u0027m don\u0027t think the test was ever fixed to be reliable.\r\n\r\n",
                                           "updatedAt":  "2023-08-13T18:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7-c_",
                                           "createdAt":  "2023-08-14T04:43:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We should either delete the test or fix it to be reliable.",
                                           "updatedAt":  "2023-08-14T04:43:54Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Intermittent failure in CriticalFinalizer test",
        "labels":  [
                       "disabled-test",
                       "test-bug",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76581",
        "createdAt":  "2022-10-04T01:46:16Z",
        "number":  76581,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-03T19:03:29Z",
        "body":  "I was trying to use some of the UTF8 string handling over in #76505 and noticed that `AppendUTF8` in turn calls the `Append(SString\u0026)` overload. This overload calls `End()` that converts non-ascii UTF8 back to Unicode. This behavior seems quite odd, I would expect appending an UTF8 string to an UTF8 string to stay in UTF8.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYIA_lQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LehXk",
                                           "createdAt":  "2022-10-04T01:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI was trying to use some of the UTF8 string handling over in #76505 and noticed that `AppendUTF8` in turn calls the `Append(SString\u0026)` overload. This overload calls `End()` that converts non-ascii UTF8 back to Unicode. This behavior seems quite odd, I would expect appending an UTF8 string to an UTF8 string to stay in UTF8.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejakobbotsch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-04T01:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Le8z8",
                                           "createdAt":  "2022-10-04T05:09:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This is by-design. The preferred encoding for `SString` is UTF-16 and it is sticky if I recall. Starting with UTF8 is what you likely want here. Also, at the end you can always convert the string fully to UTF8 by calling `GetUTF8()`.\r\n\r\nCan you provide an example on precisely what you want and how the `SString` was instantiated?",
                                           "updatedAt":  "2022-10-04T05:14:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LfA7x",
                                           "createdAt":  "2022-10-04T05:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The preferred UTF-16 encoding for SString should come into play only when there is encoding mismatch. For example, when one is trying to append UTF-16 string to UTF-8 string.\r\n\r\nWhen I have UTF-8 string and trying to append another UTF-8 string to it, the result should stay as UTF-8. There is no reason for the result to get converted to UTF-16 (what is happening here).",
                                           "updatedAt":  "2022-10-04T05:39:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Lgb6K",
                                           "createdAt":  "2022-10-04T11:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e Can you provide an example on precisely what you want and how the `SString` was instantiated?\r\n\r\nI was trying to switch `CEEInfo::appendClassName` to UTF8, and my initial straightforward/naive implementations slowed down the JIT by an unexpected amount in checked builds (~25% more time taken to JIT SPC with PMI.dll on x86). When I stepped in I noticed this particular behavior for the UTF8-UTF8 string case, but I was not hitting this, I don\u0027t think there is an issue if the UTF8 strings stay within ASCII.\r\n\r\nThese are the versions I tried:\r\n\r\n[Version 1](https://github.com/jakobbotsch/runtime/blob/04def1fcb4e8dee93e88b40467e4923dcae0f68e/src/coreclr/vm/jitinterface.cpp#L3304-L3344) just used `TypeString` and `SString::GetUTF8()`. The `GetUTF8()` here was very hot, 25% of the time in the profile I captured was spent inside that.\r\n\r\nFor [version 2](https://gist.github.com/jakobbotsch/59150b9f9f0e25761cd88a290ef53ac3) I tried to avoid `TypeString` after discussing with @jkotas, since we thought it was related to the fact that it builds the string as UTF16 and thus incurs some unnecessary conversions. As you can see, I just instantiated it with `StackSString ss;`, maybe I should have used something else here?\r\n\r\nFor [version 3](https://github.com/jakobbotsch/runtime/blob/ffaf9a4c3958c91f39b31a11325e002370a02539/src/coreclr/vm/jitinterface.cpp#L3303-L3434) I avoided `SString` and used an append lambda function to copy directly into the buffer argument. This should avoid (at least) one copy, so it should be faster.\r\n\r\nCalling these three versions of `appendClassName` in a loop from JIT 100000 times with the `System.Runtime.CompilerServices.CastHelpers` class as an argument gives the following results on x86:\r\nVersion 1: 2391 ms\r\nVersion 2: 1656 ms\r\nVersion 3: 172 ms\r\n\r\nIt is quite unexpected to me that the first two variants are so much more expensive. The contracts add some overhead, but it also looks like the `AppendUTF8` path ends up creating quite a few temporary copies.",
                                           "updatedAt":  "2022-10-04T11:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Lhvlk",
                                           "createdAt":  "2022-10-04T14:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e The preferred UTF-16 encoding for SString should come into play only when there is encoding mismatch. For example, when one is trying to append UTF-16 string to UTF-8 string.\r\n\r\nI agree with this. If I recall the issue is that `SString`, by default, starts out as \"Unicode\".  By this, I mean if the default constructor is used it will be in \"Unicode\" mode and when calling an `AppendUTF8`, it is appending to \"Unicode\" and therefore by design. If the constructor for specifying UTF8 is used, then the `AppendUTF8` should behave as described. This is what I recall seeing. The pattern I was thinking of is `SString str{SSttring::Utf8, \"\"};`\r\n\r\n\u003e It is quite unexpected to me that the first two variants are so much more expensive. The contracts add some overhead, but it also looks like the AppendUTF8 path ends up creating quite a few temporary copies.\r\n\r\nOn this we completely agree. I very much dislike the `SString` as is and it is one of my longer term goals to slowly improve the API so it is more performant and intuitive. ",
                                           "updatedAt":  "2022-10-04T14:56:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LhxTF",
                                           "createdAt":  "2022-10-04T15:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I agree with this. If I recall the issue is that SString, by default, starts out as \"Unicode\".\r\n\r\nSString starts as `REPRESENTATION_EMPTY` without specific encoding.",
                                           "updatedAt":  "2022-10-04T15:01:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LhxvI",
                                           "createdAt":  "2022-10-04T15:02:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e If the constructor for specifying UTF8 is used, then the `AppendUTF8` should behave as described.\r\n\r\nWell, this is what I was reporting -- it doesn\u0027t seem to. It calls `Append(SString\u0026)` and that function calls `End()` which converts multi-byte \u0027this\u0027 into UTF16. For example:\r\n```cpp\r\nSString str(SString::Utf8, \"Planlægnings\");\r\nstr.AppendUTF8(\"periode\"); // \u0027str\u0027 is converted to UTF16 inside this call, before starting to append \"periode\"\r\n```\r\n",
                                           "updatedAt":  "2022-10-04T15:02:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Lh6_p",
                                           "createdAt":  "2022-10-04T15:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtSKfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-10-04T15:31:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jakobbotsch",
                                                                               "createdAt":  "2022-10-04T16:10:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@jakobbotsch I see the issue now. This is clearly unintuitive and I agree with your expectations here. Based on how this was implemented I get the why, but it shouldn\u0027t be this way. I\u0027ll add it to my list of things to fix up.",
                                           "updatedAt":  "2022-10-04T15:28:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gf7WJ",
                                           "createdAt":  "2023-07-03T18:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@AaronRobinsonMSFT can this be closed based on #76571, or is there more work required here? ",
                                           "updatedAt":  "2023-07-03T18:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ggD-V",
                                           "createdAt":  "2023-07-03T19:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I need to get back to this. I don\u0027t believe it is fixed yet.\r\n",
                                           "updatedAt":  "2023-07-03T19:03:21Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "SString::AppendUTF8 converts \u0027this\u0027 to UTF16 if it is non-ascii",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77703",
        "createdAt":  "2022-11-01T00:23:32Z",
        "number":  77703,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-01T02:19:25Z",
        "body":  "HNDTYPE_WEAK_NATIVE_COM is no longer used in the VM, but some related functionality is still present to ensure that clrgc.dll is compatible with .NET 7.0\r\n\r\nOnce we do not have the compatibility requirement the remaining pieces of HNDTYPE_WEAK_NATIVE_COM support can be deleted.\r\n\r\nSee: https://github.com/dotnet/runtime/pull/77196",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTVyEDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NW6JS",
                                           "createdAt":  "2022-11-01T00:27:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "@mangod9 - is 8.0 the right milestone for this?",
                                           "updatedAt":  "2022-11-01T00:27:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NXIQO",
                                           "createdAt":  "2022-11-01T01:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "guess this is something we will not do for 8, but possibly in 9",
                                           "updatedAt":  "2022-11-01T01:50:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Delete HNDTYPE_WEAK_NATIVE_COM when no longer needed.",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78657",
        "createdAt":  "2022-11-09T20:38:32Z",
        "number":  78657,
        "author":  "Limb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrjdeg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "michaldobrodenka",
                                            "createdAt":  "2022-11-10T15:23:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-01T04:00:18Z",
        "body":  "I\u0027m getting a Segmentation Fault after installing .NET 7.0 SDK (v7.0.100) - Linux Arm32 on a BeagleBone Black running Debian 10.4. I tried both an existing upgrade from 6.0, as well as a fresh SD card image.\r\n\r\nRunning just the dotnet command works fine, but any other command (even dotnet --version) results in a segmentation fault.\r\n```\r\ndebian@beaglebone:~$ dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\ndebian@beaglebone:~$ dotnet --version\r\nSegmentation fault\r\n```\r\n\r\nRunning ```strace dotnet --version``` the command seems to output properly (however I am not a strace expert by any means but I am seeing a proper \"write\" command in the output):\r\n```cacheflush(0xb55e7908, 0xb55e7930, 0)   = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=283537198}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=285314775}) = 0\r\ncacheflush(0xb55e7948, 0xb55e7960, 0)   = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=290090158}) = 0\r\ncacheflush(0xab7cab64, 0xab7cabd0, 0)   = 0\r\nioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\nwrite(69, \"7.0.100\", 77.0.100)                 = 7\r\nwrite(69, \"\\n\", 1\r\n)                      = 1\r\nunlink(\"/tmp/dotnet-diagnostic-13773-193303-socket\") = 0\r\nfutex(0x216f248, FUTEX_WAKE_PRIVATE, 1) = 1\r\nfutex(0x216f208, FUTEX_WAKE_PRIVATE, 1) = 1\r\nunlink(\"/tmp/clr-debug-pipe-13773-193303-in\") = 0\r\nunlink(\"/tmp/clr-debug-pipe-13773-193303-out\") = 0\r\nwrite(4, \"\\3\", 1)                       = 1\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=318814829}) = 0\r\nmunmap(0xb6ca3000, 225874)              = 0\r\nexit_group(0)                           = ?\r\n+++ exited with 0 +++\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjiQvlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5O1lxD",
                                           "createdAt":  "2022-11-09T20:38:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2022-11-09T20:38:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O1lyg",
                                           "createdAt":  "2022-11-21T21:29:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m getting a Segmentation Fault after installing .NET 7.0 SDK (v7.0.100) - Linux Arm32 on a BeagleBone Black running Debian 10.4. I tried both an existing upgrade from 6.0, as well as a fresh SD card image.\r\n\r\nRunning just the dotnet command works fine, but any other command (even dotnet --version) results in a segmentation fault.\r\n```\r\ndebian@beaglebone:~$ dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\ndebian@beaglebone:~$ dotnet --version\r\nSegmentation fault\r\n```\r\n\r\nRunning ```strace dotnet --version``` the command seems to output properly (however I am not a strace expert by any means but I am seeing a proper \"write\" command in the output):\r\n```cacheflush(0xb55e7908, 0xb55e7930, 0)   = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=283537198}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=285314775}) = 0\r\ncacheflush(0xb55e7948, 0xb55e7960, 0)   = 0\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=290090158}) = 0\r\ncacheflush(0xab7cab64, 0xab7cabd0, 0)   = 0\r\nioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\nwrite(69, \"7.0.100\", 77.0.100)                 = 7\r\nwrite(69, \"\\n\", 1\r\n)                      = 1\r\nunlink(\"/tmp/dotnet-diagnostic-13773-193303-socket\") = 0\r\nfutex(0x216f248, FUTEX_WAKE_PRIVATE, 1) = 1\r\nfutex(0x216f208, FUTEX_WAKE_PRIVATE, 1) = 1\r\nunlink(\"/tmp/clr-debug-pipe-13773-193303-in\") = 0\r\nunlink(\"/tmp/clr-debug-pipe-13773-193303-out\") = 0\r\nwrite(4, \"\\3\", 1)                       = 1\r\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=1948, tv_nsec=318814829}) = 0\r\nmunmap(0xb6ca3000, 225874)              = 0\r\nexit_group(0)                           = ?\r\n+++ exited with 0 +++\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLimb\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emarcpopMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-21T21:29:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O1l1j",
                                           "createdAt":  "2022-11-21T21:29:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcpopMSFT",
                                           "body":  "Routing to runtime as a likely issue in the runtime or host itself.",
                                           "updatedAt":  "2022-11-21T21:29:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7Nyj",
                                           "createdAt":  "2022-11-22T19:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@Limb Would it be possible for you to get/share a core dump of the crash?",
                                           "updatedAt":  "2022-11-22T19:29:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7RqX",
                                           "createdAt":  "2022-11-22T19:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Limb",
                                           "body":  "@elinor-fung Hopefully I created the core dump successfully, please see [core](https://drive.google.com/file/d/1atXQAPFkQwBv8zwPobxZMh4s7ASSWHB-/view?usp=sharing)",
                                           "updatedAt":  "2022-11-22T19:44:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O8lLF",
                                           "createdAt":  "2022-11-23T03:25:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Seems to be in `Microsoft.TemplateEngine.Cli.dll`:\r\n```\r\n[0x0]   0xb556c001!+   0xbebcc000   0xabb0b04b   \r\n[0x1]   Microsoft_TemplateEngine_Cli + 0x5c04b!Microsoft_TemplateEngine_Cli+0x5c04b   0xbebcc000   0xabb09ca1   \r\n[0x2]   Microsoft_TemplateEngine_Cli + 0x5aca1!Microsoft_TemplateEngine_Cli+0x5aca1   0xbebcc050   0xabaec809   \r\n[0x3]   Microsoft_TemplateEngine_Cli + 0x3d809!Microsoft_TemplateEngine_Cli+0x3d809   0xbebcc068   0xae8333a9   \r\n[0x4]   dotnet_ae760000 + 0xd33a9!dotnet_ae760000+0xd33a9   0xbebcc080   0xae82e42b   \r\n[0x5]   dotnet_ae760000 + 0xce42b!dotnet_ae760000+0xce42b   0xbebcc0b8   0x0   \r\n```\r\n\r\n@dotnet/dotnet-diag I\u0027m failing at getting managed stacks from the dump. Can someone tell me what I\u0027m missing?\r\nI\u0027m running a docker container with linux arm32 and getting this:\r\n```\r\n(lldb) sosstatus\r\nTarget OS: LINUX Architecture: Arm ProcessId: 6323 (0x18B3)\r\n#0 .NET Core runtime at 00000000B677F000 size 0046E2B9 index ad7c731feb7243bba7f5fa9b0f931444aaad01e0\r\n    Runtime module path: /home/issues/libcoreclr.so\r\n    Runtime module directory: /home/issues\r\n    DAC: /home/issues/libmscordaccore.so\r\n\r\n\r\nCurrent symbol store settings:\r\n-\u003e Cache: /root/.dotnet/symbolcache\r\n-\u003e Server: https://msdl.microsoft.com/download/symbols/ Timeout: 4 RetryCount: 0\r\nGC memory usage for managed SOS components: 628,552 bytes\r\n(lldb) clrstack\r\nFailed to load data access module, 0x80004002\r\nCan not load or initialize libmscordaccore.so. The target runtime may not be initialized.\r\n\r\nFor more information see https://go.microsoft.com/fwlink/?linkid=2135652\r\nClrStack  failed\r\n```",
                                           "updatedAt":  "2022-11-23T03:25:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O9MBb",
                                           "createdAt":  "2022-11-23T07:44:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I think that dump might not be complete or doesn\u0027t contain managed info. I\u0027m not expert on this, but I had problems with core dumps some time ago (also on arm32  ).\r\n\r\n![image](https://user-images.githubusercontent.com/2361931/203489944-792c8bad-fa9a-4e46-b11e-2c8b0c0ff87e.png)\r\n\r\nIt usually  means:\r\n\r\n- disk space issue - did you have enough space on partition where you made dump?\r\n- limit set to dump - maybe something like `ulimit -S -c unlimited` will help - not to limit dumps\r\n- correct flags - to include all info including managed - I use `echo 0xff \u003e /proc/\u003cPID\u003e/coredump_filter` in systemd for my process\r\n\r\nbut i may be wrong :)",
                                           "updatedAt":  "2022-11-23T07:44:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O_FK8",
                                           "createdAt":  "2022-11-23T14:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e https://github.com/orgs/dotnet/teams/dotnet-diag I\u0027m failing at getting managed stacks from the dump. Can someone tell me what I\u0027m missing?\r\n\u003e I think that dump might not be complete or doesn\u0027t contain managed info. I\u0027m not expert on this, but I had problems with core dumps some time ago (also on arm32 ).\r\n\r\nHi @elinor-fung and @michaldobrodenka!  It does indeed look like the dump is incomplete.  For more details on crash dump generation see [here](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dumps#collecting-dumps-on-crash).  I suggest collecting a full dump by setting `DOTNET_DbgMiniDumpType=4`.  Hope this helps!",
                                           "updatedAt":  "2022-11-23T14:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PBSB1",
                                           "createdAt":  "2022-11-23T22:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Thanks, @michaldobrodenka and @tommcdon.\r\n\r\n@Limb could you try collecting a full dump per https://github.com/dotnet/runtime/issues/78657#issuecomment-1325159100?",
                                           "updatedAt":  "2022-11-23T22:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PQyEs",
                                           "createdAt":  "2022-11-28T21:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Limb",
                                           "body":  "@elinor-fung  here is the [core dump](https://drive.google.com/file/d/1WuC8dTFiGPqXdN3b-e9Mac9jq-BmCi8h/view?usp=sharing) using ```DOTNET_DbgMiniDumpType=4```",
                                           "updatedAt":  "2022-11-28T21:47:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PQytV",
                                           "createdAt":  "2022-11-28T21:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Limb",
                                           "body":  "I will add that by chance I happened to run the ```dotnet --version``` command again after generating the dump and it worked, but executing the command again resulted in a segmentation fault. So this issue does seem to be inconsistent in generating a fault all the time.\r\n\r\n```bash\r\ndebian@beaglebone:~$ dotnet --version\r\n7.0.100\r\ndebian@beaglebone:~$ dotnet --version\r\nSegmentation fault (core dumped)\r\ndebian@beaglebone:~$ dotnet --version\r\nSegmentation fault (core dumped)\r\ndebian@beaglebone:~$ dotnet --version\r\nSegmentation fault (core dumped)\r\ndebian@beaglebone:~$ dotnet --version\r\n7.0.100\r\n```",
                                           "updatedAt":  "2022-11-28T21:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QGVOO",
                                           "createdAt":  "2022-12-09T04:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Thanks for the new dump. I\u0027m still unable to get at the managed stacks for some reason.\r\n\r\ncc @mikem8361 @hoyosjs who are far more useful than me at looking at dumps from linux arm32 - would one of you be able to take a look?",
                                           "updatedAt":  "2022-12-09T04:31:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q0S2m",
                                           "createdAt":  "2022-12-17T00:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "I\u0027ve tried looking at this a couple times but the dumps are in pretty bad state. We can\u0027t even load the DAC, but trying to attach to the debugger and setting a breakpoint ends up in hangs and stack overflows, even with LLDB 14. I can only really see:\r\n\r\n```\r\n(lldb) bt all\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV\r\n  * frame #0: 0xbebcc000 0xb556c000\r\n    frame #1: 0xbebcc000 0xabb0b04a\r\n    frame #2: 0xbebcc030 0xabb09ca0\r\n    frame #3: 0xbebcc058 0xabaec808\r\n    frame #4: 0xbebcc070 0xae8333a8\r\n    frame #5: 0xbebcc088 0xae82e42a\r\n    frame #6: 0xbebcc0c0 0xb6a52eee libcoreclr.so`CallDescrWorkerInternal + 54 at unixasmmacrosarm.inc:662\r\n  thread #2, stop reason = signal 0\r\n    frame #0: 0xb6767cf0 0xb6c70784 libc.so.6`__libc_start_main(main=(libc.so.6`__strptime_internal + 9317 at strptime_l.c:1110:8), argc=-1233748704, argv=0x00000074, init=0x00000000, fini=0xb67684b0, rtld_fini=0x9c98e400, stack_end=0xb6768440) + 376 at libc-start.c:333\r\n  thread #3, stop reason = signal 0\r\n    frame #0: 0xb5dfea00 0xb6c70784 libc.so.6`__libc_start_main(main=(libc.so.6`__strptime_internal + 9317 at strptime_l.c:1110:8), argc=-1254095296, argv=0x00000074, init=0x00000000, fini=0x00000000, rtld_fini=0x00000000, stack_end=0x00000000) + 376 at libc-start.c:333\r\n  thread #4, stop reason = signal 0\r\n    frame #0: 0xb53fe9c8 0xb6f24524 libpthread.so.0`check_add_mapping(name=0x00000000, namelen=18121792, fd=131072, existing=0x00000000) + 48 at sem_open.c:71\r\n  thread #5, stop reason = signal 0\r\n    frame #0: 0xb4bfdb40 0xb6f24524 libpthread.so.0`check_add_mapping(name=\"\\x02\", namelen=128, fd=0, existing=0x00000000) + 48 at sem_open.c:71\r\n  thread #6, stop reason = signal 0\r\n    frame #0: 0xb13fb7e0 0xb6f24524 libpthread.so.0`check_add_mapping(name=\"\", namelen=128, fd=0, existing=0xb13fb828) + 48 at sem_open.c:71\r\n  thread #7, stop reason = signal 0\r\n    frame #0: 0xaf403b40 0xb6f24524 libpthread.so.0`check_add_mapping(name=\"\", namelen=128, fd=0, existing=0xaf403b88) + 48 at sem_open.c:71\r\n```\r\n\r\nLoading the DAC gives `CORDBG_E_MISSING_DEBUGGER_EXPORTS`:\r\n```\r\n Error: 0 : CreateRuntime FAILED: Microsoft.Diagnostics.Runtime.ClrDiagnosticsException: Failure loading DAC: CreateDacInstance failed 0x80131c4f\r\n   at Microsoft.Diagnostics.Runtime.DacLibrary..ctor(DataTarget dataTarget, String dacPath, UInt64 runtimeBaseAddress)\r\n   at Microsoft.Diagnostics.Runtime.ClrInfo.ConstructRuntime(String dac)\r\n   at Microsoft.Diagnostics.Runtime.ClrInfo.CreateRuntime(String dacPath, Boolean ignoreMismatch)\r\n   at Microsoft.Diagnostics.DebugServices.Implementation.Runtime.CreateRuntime()\r\n Error: 0 : CLRDataCreateInstance FAILED 80131C4F\r\n Information: 0 : DataTargetWrapper.Destroy\r\nFailed to load data access module, 0x80004002\r\n```\r\n\r\nThe GNU Hash comes back empty (it shouldn\u0027t, since it should be able to map in the elf file and read from it, cc @mikem8361). Even after fixing up the addresses, things are so corrupt I can only get this: \r\n\r\n```\r\n(lldb) clrstack -f\r\nOS Thread Id: 0x18b3 (1)\r\nChild SP       IP Call Site\r\nBEBCC000 B556C000\r\nBEBCC000 ABB0B04A\r\nBEBCC030 ABB09CA0\r\nBEBCC058 ABAEC808\r\nBEBCC070 AE8333A8\r\nBEBCC088 AE82E42A\r\nBEBCC0C0 B6A52EEE libcoreclr.so!CallDescrWorkerInternal + 54 at /__w/1/s/src/coreclr/pal/inc/unixasmmacrosarm.inc:664\r\nBEBCC88C          [DynamicHelperFrame: bebcc88c]\r\nBEBCC900 AE83153C dotnet.dll!/home/debian/dotnet/sdk/7.0.100/dotnet.dll!Unknown + 140 \u003c- r2r md: 06000BDA\r\nBEBCC9D8 AE831166 dotnet.dll!/home/debian/dotnet/sdk/7.0.100/dotnet.dll!Unknown + 486\r\n```\r\n\r\nIf I look at the Frame\u0027s TransitionBlock I see:\r\n\r\n```\r\n(TransitionBlock *) $4 = 0xbebcc8cc {\r\n   = {\r\n    m_calleeSavedRegisters = (r4 = 0xb6a5367f, r5 = 0x00000000, r6 = 0xb14085d0, r7 = 0xb141f89c, r8 = 0xb3400228, r9 = 0xb141f8c8, r10 = 0x00000000, r11 = 0xbebcc9c8, r14 = 0xae83153d)\r\n     = (r4 = 0xb6a5367f, r5 = 0x00000000, r6 = 0xb14085d0, r7 = 0xb141f89c, r8 = 0xb3400228, r9 = 0xb141f8c8, r10 = 0x00000000, r11 = 0xbebcc9c8, m_ReturnAddress = 0xae83153d)\r\n  }\r\n  m_argumentRegisters = {\r\n    r = ([0] = 0xb141f8c8, [1] = 0x00035848, [2] = 0x000e5db5, [3] = 0xae865d8d)\r\n  }\r\n}\r\n```\r\n\r\nMain issue is also something is busted with metadata, so I can\u0027t see names. The return address doesn\u0027t give me anything in the jit frame and the disassembly around it makes little sense. @elinor-fung you might be more familiar with DynamicHelper, what might be useful to check? ",
                                           "updatedAt":  "2022-12-17T02:36:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q0oUy",
                                           "createdAt":  "2022-12-17T02:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Using IL Spy I see the last two frames have md tokens that are `Microsoft.DotNet.Cli.Program.Main` -\u003e `Microsoft.DotNet.Cli.Program.ProcessArgs`. ~They are both r2r, but the disassembly is also odd for ARM.~ (The oddity was LLDB failint to detect it was thumbv2 assembly). Maybe running with `DOTNET_ReadyToRun=0` might help?\r\n\r\nThe assembly right before the call is:\r\n```asm\r\nd152e: 49 f6 6a 74     movw    r4, #40810\r\nd1532: c0 f2 11 04     movt    r4, #17\r\nd1536: 7c 44           add     r4, pc\r\nd1538: 23 68           ldr     r3, [r4]\r\nd153a: 98 47           blx     r3\r\n```\r\n\r\nwith fixups it\u0027s \r\n\r\n```\r\n   0xae83100e   movw   r4, #0xc3b6\r\n   0xae831012   movt   r4, #0x11\r\n   0xae831016   add    r4, pc\r\n   0xae831018   ldr    r1, [r4]\r\n   0xae83101a   blx    r1\r\n```\r\n\r\nThe assembly doesn\u0027t explain the next frames in the stack though, so not sure I am interpreting this quite right.",
                                           "updatedAt":  "2022-12-21T00:30:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XSs0w",
                                           "createdAt":  "2023-03-10T21:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustSuperHuman",
                                           "body":  "I\u0027m wondering if anyone has an update on this. Does it happen w/ the .NET 8 beta? ",
                                           "updatedAt":  "2023-03-10T21:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XTKgr",
                                           "createdAt":  "2023-03-10T23:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "I don\u0027t think anyone is actively working on this. I am not sure anything has changed here. ",
                                           "updatedAt":  "2023-03-10T23:33:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XTqPO",
                                           "createdAt":  "2023-03-11T01:50:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Limb",
                                           "body":  "Sorry, I got sidetracked dealing with this. I will run the additional requested tests and also try this with .NET 8 and report back this weekend.\n\nOn Fri, Mar 10, 2023, at 6:33 PM, Juan Hoyos wrote:\n\u003e \n\u003e \n\u003e I don\u0027t think anyone is actively working on this. I am not sure anything has changed here.\n\u003e \n\u003e \n\u003e —\n\u003e Reply to this email directly, view it on GitHub \u003chttps://github.com/dotnet/runtime/issues/78657#issuecomment-1464641579\u003e, or unsubscribe \u003chttps://github.com/notifications/unsubscribe-auth/AAB2Y4H2QM6IOX6M6HNIHYDW3O243ANCNFSM6AAAAAASHCQPJA\u003e.\n\u003e You are receiving this because you were mentioned.Message ID: ***@***.***\u003e\n\u003e ",
                                           "updatedAt":  "2023-03-11T01:50:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XaAc2",
                                           "createdAt":  "2023-03-13T16:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Limb",
                                           "body":  "Some good and bad news to report. The issue still happens with SDK 8.0.100-preview.1.\r\n\r\nHowever, running commands with ```DOTNET_ReadyToRun=0``` as recommended by @hoyosjs results in the dotnet command running properly. This is true for both .NET 7 and 8.\r\n\r\nI was able to run ```dotnet --version``` ```dotnet new console``` and ```dotnet run``` without issues.",
                                           "updatedAt":  "2023-03-13T16:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xb3uT",
                                           "createdAt":  "2023-03-13T20:39:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustSuperHuman",
                                           "body":  "Ty for testing @Limb - Weird enough I\u0027m testing now w/ 7.0.200 and it seems to be working without adding the ReadyToRun flag 🤔\r\n\r\n![image](https://user-images.githubusercontent.com/109124789/224826942-452f4cf0-16e6-4472-8c0b-c6e080041c63.png)\r\n",
                                           "updatedAt":  "2023-03-13T20:39:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XcgJU",
                                           "createdAt":  "2023-03-13T22:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustSuperHuman",
                                           "body":  "Ran into new issues sadly, Am able to run projects normally by launching w/ `dotnet program.dll` (.NET 7 and 8) but get a segmentation fault when running from a service. `systemctl start program` (works fine w/ .NET 6)\r\n\r\nJust putting it out there in case anyone finds a way around it. \r\n\r\nTried putting \r\n`DOTNET_ReadyToRun=0` in /etc/environment but no go. ",
                                           "updatedAt":  "2023-03-13T22:58:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5igFTF",
                                           "createdAt":  "2023-07-26T22:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "outlookhazy",
                                           "body":  "I\u0027m not _positive_ this is related, but I\u0027ve been running into an issue with a .net7 published application running on BBB with behavior that sounds extremely similar (inconsistent segfaults). For what it\u0027s worth, the application appears to run fine if I turn off address randomization for the process (**setarch -R ./program**).\r\nI recompiled under .net6 with the only change being some datetime microseconds references (that aren\u0027t supported) and the application runs correctly every time. Unfortunately that native high-precision timing support is necessary for my application.  \r\n\r\nA couple more datapoints: \r\n\r\n- Running with strace (but without setarch -R), it does not seem to segfault at all. \r\n- I have observed instances where the application does _partially_ run, segfaulting after the first 1-2 log entries, and on a couple rare occasions it runs fine indefinitely. \r\n\r\nI can\u0027t prove it, but it almost seems like it\u0027s more likely to reach execution of application code as the system gets loaded down. This smells like some kind of use-after-free race condition with maybe garbage collection(?)",
                                           "updatedAt":  "2023-07-27T13:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wUxXX",
                                           "createdAt":  "2024-01-10T09:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bklop",
                                           "body":  "Any update to this? Will this be fixed in a future release?\r\n\r\nWe ran into this after upgrading our application from .net 6 to 8, took a while to figure out that the problem was not in our code. At least the workaround mentioned by @outlookhazy seems to work for now (disabling ASLR)...",
                                           "updatedAt":  "2024-01-10T09:35:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OHZc9",
                                           "createdAt":  "2024-09-30T22:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Blackclaws",
                                           "body":  "So we\u0027re still seeing this issue on the current net 8.0 the workaround with DOTNET_ReadyToRun=0 seems to work but this should get fixed somehow.",
                                           "updatedAt":  "2024-09-30T22:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OJC-W",
                                           "createdAt":  "2024-10-01T04:00:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "This issue fit into pattern mentioned here https://github.com/dotnet/runtime/issues/102396#issuecomment-2358863491\r\n\r\nStill a small sample, but maybe there is a problem with older ARMv7 cores. Beaglebone black has ARM A8. Maybe it\u0027s connected to VFPv3 vs VFPv4",
                                           "updatedAt":  "2024-10-01T04:00:17Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  ".NET 7 - Segmentation Fault on BeagleBone Black (arm32)",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78858",
        "createdAt":  "2022-11-24T04:27:47Z",
        "number":  78858,
        "author":  "kant2002",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-25T19:52:25Z",
        "body":  "**Version Used**: \r\n\r\n/home/loongson/.nuget/packages/microsoft.net.compilers.toolset/4.5.0-1.22553.5/tasks/net6.0/Microsoft.CSharp.Core.targets(80,5): error : \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. git clone dotnet/runtime\r\n2. ./build.sh clr+libs\r\n\r\nNot yet sure if this repro on non-loongson architecture.\r\n\r\n**Diagnostic Id**:\r\n\r\nIf this is a report about a bug in an analyzer, please include the diagnostic if possible (e.g. `\"IDE0030\"`).\r\n\r\n**Expected Behavior**:\r\nprobably do not crash :)\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nProcess terminated. System.InvalidOperationException: This program location is thought to be unreachable. File=\u0027/_/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker_Patterns.cs\u0027 Line=387 [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(SyntaxNode node, BoundDecisionDag decisionDag, BoundExpression expression, TypeWithState expressionType, Nullable`1 stateWhenNotNullOpt) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitSwitchStatement(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(BoundBlock block) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(BoundBlock node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitWithStackGuard(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node, Boolean expressionIsRead) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitMethodBodies(BoundBlock blockBody, BoundBlock expressionBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitNonConstructorMethodBody(BoundNonConstructorMethodBody node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean\u0026 badRegion) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Analyze(Boolean\u0026 badRegion, Optional`1 initialState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, Optional`1 initialState, Builder snapshotBuilderOpt, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useConstructorExitWarnings, Boolean useDelegateInvokeParameterTypes, Boolean useDelegateInvokeReturnType, MethodSymbol delegateInvokeMethodOpt, VariableState initialState, MethodSymbol baseOrThisInitializer, Builder analyzedNullabilityMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt, Boolean getFinalNullableState, VariableState\u0026 finalNullableState, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager\u0026 snapshotManager, ImmutableDictionary`2\u0026 remappedSymbols) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, BindingDiagnosticBag diagnostics, Boolean includeInitializersInBody, BoundNode initializersBody, Boolean reportNullableDiagnostics, ImportChain\u0026 importChain, Boolean\u0026 originalBodyNested, Boolean\u0026 prependedDefaultValueTypeConstructorInitializer, InitialState\u0026 forSemanticModel) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers\u0026 processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Environment.FailFast(System.String, System.Exception) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.FailFast+\u003c\u003ec.\u003c.cctor\u003eb__5_0(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagate(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagateUnlessCanceled(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundDecisionDag, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithState, System.Nullable`1\u003cPossiblyConditionalState\u003e) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitMethodBodies(Microsoft.CodeAnalysis.CSharp.BoundBlock, Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitNonConstructorMethodBody(Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Analyze(Boolean ByRef, Microsoft.CodeAnalysis.Optional`1\u003cLocalState\u003e) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(Microsoft.CodeAnalysis.CSharp.NullableWalker, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.Optional`1\u003cLocalState\u003e, Builder, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.Conversions, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean, Boolean, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, VariableState, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Builder\u003cMicrosoft.CodeAnalysis.CSharp.BoundExpression,System.ValueTuple`2\u003cMicrosoft.CodeAnalysis.NullabilityInfo,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol\u003e\u003e, Builder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1\u003cSystem.ValueTuple`2\u003cMicrosoft.CodeAnalysis.CSharp.BoundReturnStatement,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations\u003e\u003e, Boolean, VariableState ByRef, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, VariableState, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, VariableState, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, SnapshotManager ByRef, System.Collections.Immutable.ImmutableDictionary`2\u003cMicrosoft.CodeAnalysis.CSharp.Symbol,Microsoft.CodeAnalysis.CSharp.Symbol\u003e ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.BindingDiagnosticBag, Boolean, Microsoft.CodeAnalysis.CSharp.BoundNode, Boolean, Microsoft.CodeAnalysis.CSharp.ImportChain ByRef, Boolean ByRef, Boolean ByRef, InitialState ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Roslyn.Utilities.UICultureUtilities+\u003c\u003ec__DisplayClass5_0.\u003cWithCurrentUICulture\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.InnerInvoke() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__273_0(System.Object) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread+StartHelper.RunWorker() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread+StartHelper.Run() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread.StartCallback() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\nSystem.InvalidOperationException: This program location is thought to be unreachable. File=\u0027/_/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker_Patterns.cs\u0027 Line=387 [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(SyntaxNode node, BoundDecisionDag decisionDag, BoundExpression expression, TypeWithState expressionType, Nullable`1 stateWhenNotNullOpt) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitSwitchStatement(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(BoundBlock block) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(BoundBlock node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitWithStackGuard(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node, Boolean expressionIsRead) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitMethodBodies(BoundBlock blockBody, BoundBlock expressionBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitNonConstructorMethodBody(BoundNonConstructorMethodBody node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean\u0026 badRegion) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Analyze(Boolean\u0026 badRegion, Optional`1 initialState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, Optional`1 initialState, Builder snapshotBuilderOpt, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useConstructorExitWarnings, Boolean useDelegateInvokeParameterTypes, Boolean useDelegateInvokeReturnType, MethodSymbol delegateInvokeMethodOpt, VariableState initialState, MethodSymbol baseOrThisInitializer, Builder analyzedNullabilityMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt, Boolean getFinalNullableState, VariableState\u0026 finalNullableState, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager\u0026 snapshotManager, ImmutableDictionary`2\u0026 remappedSymbols) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, BindingDiagnosticBag diagnostics, Boolean includeInitializersInBody, BoundNode initializersBody, Boolean reportNullableDiagnostics, ImportChain\u0026 importChain, Boolean\u0026 originalBodyNested, Boolean\u0026 prependedDefaultValueTypeConstructorInitializer, InitialState\u0026 forSemanticModel) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers\u0026 processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTyVAQw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEjq",
                                           "createdAt":  "2022-11-24T05:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "Can you specify the git sha for the runtime you have cloned?",
                                           "updatedAt":  "2022-11-24T05:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEjt",
                                           "createdAt":  "2022-11-24T06:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Most current one - https://github.com/dotnet/runtime/commit/78b3f9ddfab76eb99cd02c2744d3c2d055ed7270",
                                           "updatedAt":  "2022-11-24T06:01:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEjx",
                                           "createdAt":  "2022-11-24T07:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "That\u0027s minimal repro which I come up with for now\r\n```\r\n\r\n/home/loongson/runtime/.dotnet/dotnet exec \"/home/loongson/.nuget/packages/microsoft.net.compilers.toolset/4.5.0-1.22564.5/tasks/net6.0/bincore/csc.dll\" \r\n/nullable:enable\r\n/reference:/home/loongson/.nuget/packages/microsoft.codeanalysis.csharp/4.4.0-2.22423.18/lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.dll\r\n/reference:/home/loongson/.nuget/packages/microsoft.codeanalysis.common/4.4.0-2.22423.18/lib/netstandard2.0/Microsoft.CodeAnalysis.dll\r\n/reference:/home/loongson/runtime/artifacts/bin/Microsoft.Interop.SourceGeneration/Debug/netstandard2.0/Microsoft.Interop.SourceGeneration.dll\r\n/reference:/home/loongson/.nuget/packages/netstandard.library/2.0.3/build/netstandard2.0/ref/netstandard.dll\r\n/out:/home/loongson/runtime/artifacts/obj/JSImportGenerator/Debug/netstandard2.0/Microsoft.Interop.JavaScript.JSImportGenerator.dll\r\n/target:library\r\n/langversion:preview\r\nAttributeData.cs\r\nConstants.cs\r\nFallbackJSMarshallingInfoProvider.cs\r\nJSGeneratorFactory.cs\r\nJSGeneratorOptions.cs\r\nJSManagedTypeInfo.cs\r\nJSMarshallingInfo.cs\r\nJSStubCodeContext.cs\r\nJSTypeFlags.cs\r\nKnownManagedType.cs\r\nLanguageSupport.cs\r\nMarshaling/BaseJSGenerator.cs\r\nMarshaling/IJSMarshallingGenerator.cs\r\nMarshaling/PrimitiveJSGenerator.cs\r\n/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/src/System/Runtime/InteropServices/JavaScript/MarshalerType.cs\r\n```",
                                           "updatedAt":  "2022-11-24T07:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEjy",
                                           "createdAt":  "2022-11-25T08:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "After I replace content of `microsoft.net.compilers.toolset/4.5.0-1.22564.5` with custom built `Microsoft.CodeAnalysis.CSharp.dll` and `Microsoft.CodeAnalysis.dll` I receive this happy stack trace.\r\n\r\n```\r\nProcess terminated. Assertion failed.\r\nDid not find Microsoft.CodeAnalysis.CSharp.BoundCall `fullTypeName.StartsWith(Constants.TaskGlobal, StringComparison.Ordinal)` in the map.\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.VerifyExpression(BoundExpression expression, Boolean overrideSkippedExpression) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 61\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.VisitExpressionWithoutStackGuard(BoundExpression node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 68\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32\u0026 recursionDepth, BoundExpression node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 212\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 83\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSwitchLabel(BoundSwitchLabel node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 9859\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchLabel.Accept(BoundTreeVisitor visitor) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 5443\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 151\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 85\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeWalker.cs:line 22\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSwitchSection(BoundSwitchSection node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 9852\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchSection.Accept(BoundTreeVisitor visitor) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 5410\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 151\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 85\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeWalker.cs:line 22\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSwitchStatement(BoundSwitchStatement node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 9602\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(BoundTreeVisitor visitor) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 3537\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 151\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 85\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeWalker.cs:line 22\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitBlock(BoundBlock node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 9538\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 3062\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 151\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 85\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitNonConstructorMethodBody(BoundNonConstructorMethodBody node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 10213\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(BoundTreeVisitor visitor) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs:line 8241\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs:line 151\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Visit(BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 85\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.DebugVerifier.Verify(ImmutableDictionary`2 analyzedNullabilityMap, SnapshotManager snapshotManagerOpt, BoundNode node) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.DebugVerifier.cs:line 39\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, Boolean requiresAnalysis) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs:line 1458\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager\u0026 snapshotManager, ImmutableDictionary`2\u0026 remappedSymbols) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs:line 1411\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, BindingDiagnosticBag diagnostics, Boolean includeInitializersInBody, BoundNode initializersBody, Boolean reportNullableDiagnostics, ImportChain\u0026 importChain, Boolean\u0026 originalBodyNested, Boolean\u0026 prependedDefaultValueTypeConstructorInitializer, InitialState\u0026 forSemanticModel) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs:line 1809\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers\u0026 processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs:line 1044\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs:line 530\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs:line 424\r\n   at Roslyn.Utilities.UICultureUtilities.\u003c\u003ec__DisplayClass5_0.\u003cWithCurrentUICulture\u003eb__0() in C:\\d\\github\\dotnet\\roslyn\\src\\Compilers\\Core\\Portable\\InternalUtilities\\UICultureUtilities.cs:line 139\r\n```\r\n\r\nLocation of code which seems to be trigger that verification is https://github.com/dotnet/runtime/blob/4832236b4820ca83bbc9ce96003c2029b85c6ce2/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSManagedTypeInfo.cs#L120-L125",
                                           "updatedAt":  "2022-11-25T08:11:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEj0",
                                           "createdAt":  "2022-11-25T18:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Not yet sure if this repro on non-loongson architecture.\r\n\r\nRight, the first thing to check is whether it repros on x64 or arm64. If you are only able to reproduce it on loongson, it is most likely a bug in the loongson port.",
                                           "updatedAt":  "2022-11-25T18:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEj3",
                                           "createdAt":  "2022-11-25T18:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwN4dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-11-25T21:22:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e git clone dotnet/runtime\r\n\u003e ./build.sh clr+libs\r\n\r\nThis runs thousands of times each day in dotnet/runtime CI. It means that this repros on loongson only",
                                           "updatedAt":  "2022-11-25T18:37:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJEkv",
                                           "createdAt":  "2022-11-25T18:37:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Version Used**: \r\n\r\n/home/loongson/.nuget/packages/microsoft.net.compilers.toolset/4.5.0-1.22553.5/tasks/net6.0/Microsoft.CSharp.Core.targets(80,5): error : \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. git clone dotnet/runtime\r\n2. ./build.sh clr+libs\r\n\r\nNot yet sure if this repro on non-loongson architecture.\r\n\r\n**Diagnostic Id**:\r\n\r\nIf this is a report about a bug in an analyzer, please include the diagnostic if possible (e.g. `\"IDE0030\"`).\r\n\r\n**Expected Behavior**:\r\nprobably do not crash :)\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nProcess terminated. System.InvalidOperationException: This program location is thought to be unreachable. File=\u0027/_/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker_Patterns.cs\u0027 Line=387 [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(SyntaxNode node, BoundDecisionDag decisionDag, BoundExpression expression, TypeWithState expressionType, Nullable`1 stateWhenNotNullOpt) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitSwitchStatement(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(BoundBlock block) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(BoundBlock node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitWithStackGuard(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node, Boolean expressionIsRead) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitMethodBodies(BoundBlock blockBody, BoundBlock expressionBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitNonConstructorMethodBody(BoundNonConstructorMethodBody node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean\u0026 badRegion) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Analyze(Boolean\u0026 badRegion, Optional`1 initialState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, Optional`1 initialState, Builder snapshotBuilderOpt, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useConstructorExitWarnings, Boolean useDelegateInvokeParameterTypes, Boolean useDelegateInvokeReturnType, MethodSymbol delegateInvokeMethodOpt, VariableState initialState, MethodSymbol baseOrThisInitializer, Builder analyzedNullabilityMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt, Boolean getFinalNullableState, VariableState\u0026 finalNullableState, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager\u0026 snapshotManager, ImmutableDictionary`2\u0026 remappedSymbols) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, BindingDiagnosticBag diagnostics, Boolean includeInitializersInBody, BoundNode initializersBody, Boolean reportNullableDiagnostics, ImportChain\u0026 importChain, Boolean\u0026 originalBodyNested, Boolean\u0026 prependedDefaultValueTypeConstructorInitializer, InitialState\u0026 forSemanticModel) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers\u0026 processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Environment.FailFast(System.String, System.Exception) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.FailFast+\u003c\u003ec.\u003c.cctor\u003eb__5_0(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagate(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagateUnlessCanceled(System.Exception, Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundDecisionDag, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithState, System.Nullable`1\u003cPossiblyConditionalState\u003e) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitMethodBodies(Microsoft.CodeAnalysis.CSharp.BoundBlock, Microsoft.CodeAnalysis.CSharp.BoundBlock) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitNonConstructorMethodBody(Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2[[Microsoft.CodeAnalysis.CSharp.NullableWalker+LocalState, Microsoft.CodeAnalysis.CSharp, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Analyze(Boolean ByRef, Microsoft.CodeAnalysis.Optional`1\u003cLocalState\u003e) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(Microsoft.CodeAnalysis.CSharp.NullableWalker, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.Optional`1\u003cLocalState\u003e, Builder, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.Conversions, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean, Boolean, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, VariableState, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Builder\u003cMicrosoft.CodeAnalysis.CSharp.BoundExpression,System.ValueTuple`2\u003cMicrosoft.CodeAnalysis.NullabilityInfo,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol\u003e\u003e, Builder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1\u003cSystem.ValueTuple`2\u003cMicrosoft.CodeAnalysis.CSharp.BoundReturnStatement,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations\u003e\u003e, Boolean, VariableState ByRef, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, VariableState, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Binder, VariableState, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, SnapshotManager ByRef, System.Collections.Immutable.ImmutableDictionary`2\u003cMicrosoft.CodeAnalysis.CSharp.Symbol,Microsoft.CodeAnalysis.CSharp.Symbol\u003e ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.BindingDiagnosticBag, Boolean, Microsoft.CodeAnalysis.CSharp.BoundNode, Boolean, Microsoft.CodeAnalysis.CSharp.ImportChain ByRef, Boolean ByRef, Boolean ByRef, InitialState ByRef) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Roslyn.Utilities.UICultureUtilities+\u003c\u003ec__DisplayClass5_0.\u003cWithCurrentUICulture\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.InnerInvoke() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__273_0(System.Object) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread+StartHelper.RunWorker() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread+StartHelper.Run() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at System.Threading.Thread.StartCallback() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\nSystem.InvalidOperationException: This program location is thought to be unreachable. File=\u0027/_/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker_Patterns.cs\u0027 Line=387 [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromDecisionDag(SyntaxNode node, BoundDecisionDag decisionDag, BoundExpression expression, TypeWithState expressionType, Nullable`1 stateWhenNotNullOpt) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitSwitchStatementDispatch(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitSwitchStatement(BoundSwitchStatement node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundSwitchStatement.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatementsWithLocalFunctions(BoundBlock block) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitBlock(BoundBlock node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitWithStackGuard(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node, Boolean expressionIsRead) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitMethodBodies(BoundBlock blockBody, BoundBlock expressionBody) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitNonConstructorMethodBody(BoundNonConstructorMethodBody node) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody.Accept(BoundTreeVisitor visitor) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean\u0026 badRegion) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Analyze(Boolean\u0026 badRegion, Optional`1 initialState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, Optional`1 initialState, Builder snapshotBuilderOpt, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useConstructorExitWarnings, Boolean useDelegateInvokeParameterTypes, Boolean useDelegateInvokeReturnType, MethodSymbol delegateInvokeMethodOpt, VariableState initialState, MethodSymbol baseOrThisInitializer, Builder analyzedNullabilityMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt, Boolean getFinalNullableState, VariableState\u0026 finalNullableState, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeWithSemanticInfo(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, Boolean requiresAnalysis) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, VariableState initialState, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager\u0026 snapshotManager, ImmutableDictionary`2\u0026 remappedSymbols) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, BindingDiagnosticBag diagnostics, Boolean includeInitializersInBody, BoundNode initializersBody, Boolean reportNullableDiagnostics, ImportChain\u0026 importChain, Boolean\u0026 originalBodyNested, Boolean\u0026 prependedDefaultValueTypeConstructorInitializer, InitialState\u0026 forSemanticModel) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers\u0026 processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.\u003c\u003ec__DisplayClass25_0.\u003cCompileNamedTypeAsync\u003eb__0() [/home/loongson/runtime/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator/JSImportGenerator.csproj]\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekant2002\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.InteropServices`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-25T18:37:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJRKT",
                                           "createdAt":  "2022-11-25T19:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "I did not discount that possibility by any means, but I’m I denial phase yet. I build whole BCL on loongarch but issue appears only in very specific place independently if I execute via MSBUild or if I execute csc manually. And location in Roslyn where crash happens seems pretty regular compiler stuff. Tree traversal and nothing very specific. ",
                                           "updatedAt":  "2022-11-25T19:30:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJUBD",
                                           "createdAt":  "2022-11-25T19:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwN4fg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-11-25T21:22:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "What you have described is a very common manifestation of GC holes.",
                                           "updatedAt":  "2022-11-25T19:52:25Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[loongarch64] Crash inside FlowAnalysis",
        "labels":  [
                       "area-VM-coreclr",
                       "arch-loongarch64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79383",
        "createdAt":  "2022-12-08T05:54:12Z",
        "number":  79383,
        "author":  "fangzhouxia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-31T18:56:35Z",
        "body":  "### Description\n\nAfter the MSVC team implented [P2468R2 The Equality Operator You Are Looking For](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2468r2.html), we got a compiler error with /std:c++latest like below, the error is due to the operator== https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.h#L659 and https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.cpp#L7052 here needs a \u0027const\u0027. Could you please look this issue? Thanks.\n\n### Reproduction Steps\n\n1. git clone https://github.com/dotnet/runtime F:\\gitP\\dotnet\\runtime\r\n2. set VSCMD_SKIP_SENDTELEMETRY=1 \u0026 \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -host_arch=amd64 -arch=amd64\r\n3. set _CL_=/std:c++latest /permissive /wd5054 /wd5055 /wd5033 /D_HAS_STD_BYTE=0\r\n4.  cd F:\\gitP\\dotnet\\runtime\r\n5. .\\build.cmd -subset clr+libs -c release -arch x64 \r\n6. cd F:\\gitP\\dotnet\\runtime\\src\\coreclr\r\n7. .\\build-runtime.cmd x64 release\n\n### Expected behavior\n\nBuild successfully\n\n### Actual behavior\n\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\vm\\exceptionhandling.cpp(4077): error C2666: \u0027ExceptionTracker::EnclosingClauseInfo::operator ==\u0027: overloaded functions have similar conversions\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\vm\\exceptionhandling.h(663): note: could be \u0027bool ExceptionTracker::EnclosingClauseInfo::operator ==(const ExceptionTracker::EnclosingClauseInfo \u0026)\u0027\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\inc\\nativevaraccessors.h(14): note: or       \u0027bool operator ==(const ICorDebugInfo::VarLoc \u0026,const ICorDebugInfo::VarLoc \u0026)\u0027\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\inc\\sbuffer.h(567): note: or       \u0027BOOL operator ==(const SBuffer \u0026,const SBuffer \u0026)\u0027\n\n### Regression?\n\nNext release version of VS\n\n### Known Workarounds\n\nCan try to add https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.h#L659 and https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.cpp#L7052 a \u0027const\u0027.\n\n### Configuration\n\nVS version: VS2019(16.11.20)\r\nOperating system: windows server 2019\r\nThe commit is 9703660\n\n### Other information\n\n[build (2).log](https://github.com/dotnet/runtime/files/10182451/build.2.log)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUFtd-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P_r9c",
                                           "createdAt":  "2022-12-08T05:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @hoyosjs\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAfter the MSVC team implented [P2468R2 The Equality Operator You Are Looking For](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2468r2.html), we got a compiler error with /std:c++latest like below, the error is due to the operator== https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.h#L659 and https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.cpp#L7052 here needs a \u0027const\u0027. Could you please look this issue? Thanks.\n\n### Reproduction Steps\n\n1. git clone https://github.com/dotnet/runtime F:\\gitP\\dotnet\\runtime\r\n2. set VSCMD_SKIP_SENDTELEMETRY=1 \u0026 \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -host_arch=amd64 -arch=amd64\r\n3. set _CL_=/std:c++latest /permissive /wd5054 /wd5055 /wd5033 /D_HAS_STD_BYTE=0\r\n4.  cd F:\\gitP\\dotnet\\runtime\r\n5. .\\build.cmd -subset clr+libs -c release -arch x64 \r\n6. cd F:\\gitP\\dotnet\\runtime\\src\\coreclr\r\n7. .\\build-runtime.cmd x64 release\n\n### Expected behavior\n\nBuild successfully\n\n### Actual behavior\n\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\vm\\exceptionhandling.cpp(4077): error C2666: \u0027ExceptionTracker::EnclosingClauseInfo::operator ==\u0027: overloaded functions have similar conversions\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\vm\\exceptionhandling.h(663): note: could be \u0027bool ExceptionTracker::EnclosingClauseInfo::operator ==(const ExceptionTracker::EnclosingClauseInfo \u0026)\u0027\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\inc\\nativevaraccessors.h(14): note: or       \u0027bool operator ==(const ICorDebugInfo::VarLoc \u0026,const ICorDebugInfo::VarLoc \u0026)\u0027\r\nF:\\gitP\\dotnet\\runtime\\src\\coreclr\\inc\\sbuffer.h(567): note: or       \u0027BOOL operator ==(const SBuffer \u0026,const SBuffer \u0026)\u0027\n\n### Regression?\n\nNext release version of VS\n\n### Known Workarounds\n\nCan try to add https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.h#L659 and https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/exceptionhandling.cpp#L7052 a \u0027const\u0027.\n\n### Configuration\n\nVS version: VS2019(16.11.20)\r\nOperating system: windows server 2019\r\nThe commit is 9703660\n\n### Other information\n\n[build (2).log](https://github.com/dotnet/runtime/files/10182451/build.2.log)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efangzhouxia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-08T05:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QSREV",
                                           "createdAt":  "2022-12-12T18:01:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@fangzhouxia I wonder why you are testing with such an old state of the runtime repo. The commit you\u0027ve mentioned is more than a year old (from August 2021). ",
                                           "updatedAt":  "2022-12-12T18:01:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QW135",
                                           "createdAt":  "2022-12-13T10:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fangzhouxia",
                                           "body":  "We are currently using is 2019 version of vs and has not migrated to 2022.\r\nBut this error can be repro in our internal latest unreleased version.",
                                           "updatedAt":  "2022-12-13T10:42:16Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[MSVC][std:c++latest] CoreCLR build failed due to error C2666: \u0027ExceptionTracker::EnclosingClauseInfo::operator ==\u0027: overloaded functions have similar conversions",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80356",
        "createdAt":  "2023-01-09T04:56:36Z",
        "number":  80356,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-21T08:17:22Z",
        "body":  "Run: [runtime-coreclr outerloop 20230107.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=129543\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2800314\u0026resultId=120469\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr OSX x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\r\n\r\n- baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n- baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\n```\r\n**Error message:**\r\n```\r\nProcess terminated. Parallel crash in main thread\r\nat System.Environment.FailFast(System.String)\r\nat ParallelCrash.Main(System.String[])\r\n[createdump] Invalid process id: task_for_pid(99238) FAILED (os/kern) failure (5)\r\n[createdump] This failure may be because createdump or the application is not properly signed and entitled.\r\n[createdump] Failure took 0ms\r\n[createdump] waitpid() returned successfully (wstatus 0000ff00)\r\n\r\ncmdLine:/private/tmp/helix/working/B6BE098F/w/B7D109CE/e/baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/7/2023 6:00:33 PM, end: 1/7/2023 6:10:34 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /tmp/helix/working/B6BE098F/w/B7D109CE/uploads/Reports/baseservices.exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nexport CDPATH=/private/tmp/helix/working/B6BE098F/w/B7D109CE/e/baseservices/exceptions/simple/ParallelCrashMainThread\r\n/usr/bin/env bash ../ParallelCrash/ParallelCrash.sh \u00271\u0027\r\nBEGIN EXECUTION\r\n/tmp/helix/working/B6BE098F/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ParallelCrash.dll \u00271\u0027\r\n[createdump] Target process is alive\r\n\r\ncmdLine:/private/tmp/helix/working/B6BE098F/w/B7D109CE/e/baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/7/2023 6:00:33 PM, end: 1/7/2023 6:10:34 PM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\r\nset CORE_ROOT=/tmp/helix/working/B6BE098F/p\r\n/private/tmp/helix/working/B6BE098F/w/B7D109CE/e/baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at baseservices_exceptions._simple_ParallelCraMainThread_ParallelCraMainThread_._simple_ParallelCrashMainThread_ParallelCrashMainThread_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n\r\nQueued | OS | Arch | Column1\r\n-- | -- | -- | --\r\n2023-01-07T22:51:52.802Z | osx.1200.amd64.open | x64 | [runtime-coreclr outerloop Checked-no_tiered_compilation](https://dev.azure.com/dnceng/public/_build/results?buildId=129543\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2800314\u0026resultId=120469\u0026paneView=debug)\r\n2023-01-07T11:21:08.126Z | osx.1200.amd64.open | x64 | [runtime-coreclr outerloop Checked-no_tiered_compilation](https://dev.azure.com/dnceng/public/_build/results?buildId=129376\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2796552\u0026resultId=120469\u0026paneView=debug)\r\n2023-01-07T22:51:52.802Z | osx.1200.amd64.open | x64 | [runtime-coreclr outerloop Checked-no_tiered_compilation](https://dev.azure.com/dnceng/public/_build/results?buildId=129543\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2800314\u0026resultId=120468\u0026paneView=debug)\r\n\r\n\u003c!-- Error message template  --\u003e\r\n### Known Issue Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo3lx3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R9nRR",
                                           "createdAt":  "2023-01-09T04:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-09T04:56:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uio0d",
                                           "createdAt":  "2023-02-06T01:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Run: [runtime-coreclr gcstress-extra 20230204.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=160036\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=3291745\u0026resultId=110802\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr linux arm Checked gcstress0xc_zapdisable_jitstress2 @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n\r\n- baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\n\r\ncoreclr linux arm Checked gcstress0xc_zapdisable @ (Ubuntu.1804.Arm32.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n\r\n- baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n\r\ncoreclr linux arm64 Checked gcstress0xc_zapdisable_jitstress2 @ (Ubuntu.1804.Arm64.Open)Ubuntu.1804.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\r\n\r\n- baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n\r\ncoreclr linux x64 Checked gcstress0xc_jitstress1 @ Ubuntu.1804.Amd64.Open\r\n\r\n- baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\n- baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n```\r\n**Error message:**\r\n```\r\nProcess terminated. Parallel crash in main thread\r\nat System.Environment.FailFast(System.String)\r\nat ParallelCrash.Main(System.String[])\r\n[createdump] waitpid() returned successfully (wstatus 00000000)\r\n/root/helix/work/workitem/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh: line 425:  5533 Illegal instruction     (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/baseservices.exceptions/simple/ParallelCrash/ParallelCrash.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ParallelCrash.dll \u0027\u0027\r\n[createdump] Gathering state for process 5533 corerun\r\n[createdump] Crashing thread 0000159d signal 00000006\r\n[createdump] Writing crash report to file /home/helixbot/dotnetbuild/dumps/coredump.5533.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /home/helixbot/dotnetbuild/dumps/coredump.5533.dmp\r\n[createdump] Written 143884288 bytes (35128 pages) to core file\r\n[createdump] Target process is alive\r\n[createdump] Dump successfully written in 763ms\r\nExpected: 134\r\nActual: 132\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/5/2023 12:33:51 AM\r\nProcessing /home/helixbot/dotnetbuild/dumps/coredump.5533.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/coredump.5533.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/root/helix/work/workitem/e\u0027. No such file or directory\r\nat System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\nat System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\nat CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, StreamWriter outputWriter)\r\nFinish looking for *.crashreport.json. No new files created.\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\r\nset CORE_ROOT=/root/helix/work/correlation\r\n/root/helix/work/workitem/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at baseservices_exceptions._simple_ParallelCra_ParallelCra_._simple_ParallelCrash_ParallelCrash_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n",
                                           "updatedAt":  "2023-02-06T01:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VEaHn",
                                           "createdAt":  "2023-02-13T02:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed in Run: [runtime-coreclr gcstress-extra 20230212.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=169006)\r\n \r\n **Failed tests:**\r\n ```\r\ncoreclr linux x64 Checked gcstress0xc_jitstress2 @ Ubuntu.1804.Amd64.Open\r\n     - baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\ncoreclr linux x64 Checked gcstress0xc_tailcallstress @ Ubuntu.1804.Amd64.Open\r\n     - baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh \r\n```\r\n \r\n **Error message:**\r\n ```\r\n Process terminated. Parallel crash in main thread\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.Main(System.String[])\r\n[createdump] waitpid() returned successfully (wstatus 00000000)\r\n/datadisks/disk1/work/9E9308D7/w/C40B09F9/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh: line 425: 13244 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /datadisks/disk1/work/9E9308D7/w/C40B09F9/uploads/Reports/baseservices.exceptions/simple/ParallelCrash/ParallelCrash.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/datadisks/disk1/work/9E9308D7/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false ParallelCrash.dll \u0027\u0027\r\n[createdump] Gathering state for process 13244 corerun\r\n[createdump] Crashing thread 000033bc signal 00000006\r\n[createdump] Writing crash report to file /home/helixbot/dotnetbuild/dumps/coredump.13244.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /home/helixbot/dotnetbuild/dumps/coredump.13244.dmp\r\n[createdump] Written 145395712 bytes (35497 pages) to core file\r\n[createdump] Target process is alive\r\n[createdump] Dump successfully written in 597ms\r\nExpected: 134\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/12/2023 10:50:58 PM\r\nProcessing /home/helixbot/dotnetbuild/dumps/coredump.13244.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/coredump.13244.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nStack trace:\r\n----------------------------------\r\nThread Id: 0x33bc\r\n      Child SP               IP Call Site\r\n 0x7ffc38633a10 0x7f4b6e20432a libpthread.so.0!waitpid\r\n 0x7ffc38633a40 0x7f4b6d3d0560 libcoreclr.so!PROCCreateCrashDump(std::vector\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e\u0026, char*, int) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2223:22\r\n 0x7ffc38633ab0 0x7f4b6d3d1304 libcoreclr.so!PROCCreateCrashDumpIfEnabled at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2413:9\r\n 0x7ffc38633b40 0x7f4b6d3cdf21 libcoreclr.so!PROCAbort at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2441:5\r\n 0x7ffc38633b60 0x7f4b6d3cdcbf libcoreclr.so!PROCEndProcess(void*, unsigned int, int) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:1346:13\r\n 0x7ffc38633b90 0x7f4b6d3cdd55 libcoreclr.so!TerminateProcess at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:1239:11\r\n 0x7ffc38633bc0 0x7f4b6cf7c220 libcoreclr.so!SafeExitProcess(unsigned int, ShutdownCompleteAction) at /__w/1/s/src/coreclr/vm/eepolicy.cpp:0:9\r\n 0x7ffc38633c00 0x7f4b6cf7d53b libcoreclr.so!CHECK::CHECK() at /__w/1/s/src/coreclr/inc/check.h:115:17\r\n (inlined by) EEPolicy::HandleFatalError(unsigned int, unsigned long, char16_t const*, _EXCEPTION_POINTERS*, char16_t const*, char16_t const*) at /__w/1/s/src/coreclr/vm/eepolicy.cpp:795:5\r\n 0x7ffc386341f0 0x7f4b6d2ce3c7 libcoreclr.so!SBuffer::~SBuffer() at /__w/1/s/src/coreclr/inc/sbuffer.inl:180:9\r\n (inlined by) SystemNative::GenericFailFast(REF\u003cStringObject\u003e, REF\u003cExceptionObject\u003e, unsigned long, unsigned int, REF\u003cStringObject\u003e) at /__w/1/s/src/coreclr/classlibnative/bcltype/system.cpp:289:5\r\n 0x7ffc386344d0 0x7f4b6d2ce6ad libcoreclr.so!HelperMethodFrame_1OBJ::Pop() at /__w/1/s/src/coreclr/classlibnative/../vm/frames.h:1421:28\r\n (inlined by) FrameWithCookie\u003cHelperMethodFrame_1OBJ\u003e::Pop() at /__w/1/s/src/coreclr/classlibnative/../vm/frames.h:3249:47\r\n (inlined by) SystemNative::FailFast(StringObject*) at /__w/1/s/src/coreclr/classlibnative/bcltype/system.cpp:308:5\r\n 0x7ffc386346a0 0x7f4aeeee1b3b ParallelCrash.dll!ParallelCrash.Main(System.String[])\r\n----------------------------------\r\nThread Id: 0x33bd\r\n      Child SP               IP Call Site\r\n 0x7f4b6c8e6d60 0x7f4b6d5d6bb9 libc.so.6!__poll\r\n 0x7f4b6c8e6d90 0x7f4b6d3be83e libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadPrepareForShutdown() at /__w/1/s/src/coreclr/pal/src/sync\r\n ```\r\n \r\n **Stack trace:**\r\n ```\r\n   at baseservices_exceptions._simple_ParallelCra_ParallelCra_._simple_ParallelCrash_ParallelCrash_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n ```",
                                           "updatedAt":  "2023-02-13T02:00:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLGzj",
                                           "createdAt":  "2023-02-14T01:34:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Some recent failures of ParallelCrash:\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\u003cdiv\u003e\u003cbr/\u003e\u003cbr/\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch\r\n-- | -- | -- | -- | --\r\n2023-02-13T07:55:46.964Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress2 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-13T03:39:46.694Z | runtime-coreclr r2r-extra | Checked-gcstress0xc | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-12T22:39:43.294Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_tailcallstress | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-12T22:39:42.157Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_jitstress2 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-12T07:41:18.287Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_zapdisable_heapverify1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-11T22:39:54.718Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_jitstress1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-06T08:23:41.332Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress1 | osx.1200.arm64.open | arm64\r\n2023-02-06T08:00:30.958Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress2 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-06T08:00:28.275Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_zapdisable | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-05T22:51:16.936Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_tailcallstress | ubuntu.1804.armarch.open | arm64\r\n2023-02-05T07:51:45.652Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-05T07:51:40.417Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitminopts_heapverify1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-05T07:51:40.417Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitminopts_heapverify1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-04T22:57:30.335Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_jitstress1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-02-04T22:56:11.956Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_zapdisable_jitstress2 | ubuntu.1804.armarch.open | arm\r\n2023-01-23T08:15:21.364Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_zapdisable | ubuntu.1804.amd64.open.rt | x64\r\n2023-01-23T08:15:20.208Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-01-22T22:36:00.945Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_jitstress1 | ubuntu.1804.amd64.open.rt | x64\r\n2023-01-22T08:03:24.673Z | runtime-coreclr crossgen2-composite gcstress | Checked-gcstress0xc_jitstress2 | ubuntu.1804.amd64.open.rt | x64\r\n2023-01-21T22:40:06.836Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_zapdisable | ubuntu.1804.armarch.open | arm64\r\n2023-01-21T22:40:04.914Z | runtime-coreclr gcstress-extra | Checked-gcstress0xc_tailcallstress | ubuntu.1804.armarch.open | arm64\r\n2023-01-07T22:51:52.802Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64\r\n\r\n\u003c/div\u003e\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e",
                                           "updatedAt":  "2023-02-14T01:35:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLHpq",
                                           "createdAt":  "2023-02-14T01:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Since all recent failures have been GCStress, I\u0027m marking it as such. The OSX failure hasn\u0027t happened in a while.",
                                           "updatedAt":  "2023-02-14T01:38:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLH0B",
                                           "createdAt":  "2023-02-14T01:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Also, the `runtime-coreclr outerloop` pipeline hasn\u0027t failed, so changing the `blocking` label",
                                           "updatedAt":  "2023-02-14T01:39:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLKWQ",
                                           "createdAt":  "2023-02-14T01:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Dup? https://github.com/dotnet/runtime/issues/80357",
                                           "updatedAt":  "2023-02-14T01:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLMmT",
                                           "createdAt":  "2023-02-14T02:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "caused by #81387?",
                                           "updatedAt":  "2023-02-14T02:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLN-D",
                                           "createdAt":  "2023-02-14T02:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@kunalspathak These tests are designed to crash -- that is considered success. Would #81387 intercept this crash and interfere with the test run? How would I test this when running locally?",
                                           "updatedAt":  "2023-02-14T02:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VLVRV",
                                           "createdAt":  "2023-02-14T02:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e Would https://github.com/dotnet/runtime/pull/81387 intercept this crash and interfere with the test run?\r\n\r\nI don\u0027t think so. It is an added functionality on top of existing one that collects crashdumps. Ideally, for this test, the test would have verified that it crashed as expected and then return the ExitCode = 0, but that doesn\u0027t seem be happening and the test crashes before that and the test driver doesn\u0027t get ExitCode=0 but gets a crash dump which #81387 will use to create stack trace. Additionally, this functionality was added 2 weeks back, while this test seems to be failing since January.\r\n\r\nIf it helps, here is the call stack that we got (through #81387) for [x64](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-82024-merge-42dfac0bcbf841a1b8/PayloadGroup0/1/console.4eb7dcb8.log?helixlogtype=result). However, for [Arm64](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-82024-merge-a7de35a39d4f45848a/PayloadGroup0/1/console.e88575db.log?helixlogtype=result), for some reason, we do not print the stack trace. @hoyosjs  - isn\u0027t llvm-symbolizer installed on those boxes?\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eStack trace on x64\u003c/summary\u003e\r\n\r\n```\r\n   Stack trace:\r\n      ----------------------------------\r\n      Thread Id: 0x2417\r\n            Child SP               IP Call Site\r\n       0x7fff6a8051a0 0x7fe268f6f32a libpthread.so.0!waitpid\r\n       0x7fff6a8051d0 0x7fe26813b560 libcoreclr.so!PROCCreateCrashDump(std::vector\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e\u0026, char*, int) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2223:22\r\n       0x7fff6a805240 0x7fe26813c304 libcoreclr.so!PROCCreateCrashDumpIfEnabled at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2413:9\r\n       0x7fff6a8052d0 0x7fe268138f21 libcoreclr.so!PROCAbort at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:2441:5\r\n       0x7fff6a8052f0 0x7fe268138cbf libcoreclr.so!PROCEndProcess(void*, unsigned int, int) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:1346:13\r\n       0x7fff6a805320 0x7fe268138d55 libcoreclr.so!TerminateProcess at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:1239:11\r\n       0x7fff6a805350 0x7fe267ce7220 libcoreclr.so!SafeExitProcess(unsigned int, ShutdownCompleteAction) at /__w/1/s/src/coreclr/vm/eepolicy.cpp:0:9\r\n       0x7fff6a805390 0x7fe267ce853b libcoreclr.so!CHECK::CHECK() at /__w/1/s/src/coreclr/inc/check.h:115:17\r\n       (inlined by) EEPolicy::HandleFatalError(unsigned int, unsigned long, char16_t const*, _EXCEPTION_POINTERS*, char16_t const*, char16_t const*) at /__w/1/s/src/coreclr/vm/eepolicy.cpp:795:5\r\n       0x7fff6a805980 0x7fe2680393c7 libcoreclr.so!SBuffer::~SBuffer() at /__w/1/s/src/coreclr/inc/sbuffer.inl:180:9\r\n       (inlined by) SystemNative::GenericFailFast(REF\u003cStringObject\u003e, REF\u003cExceptionObject\u003e, unsigned long, unsigned int, REF\u003cStringObject\u003e) at /__w/1/s/src/coreclr/classlibnative/bcltype/system.cpp:289:5\r\n       0x7fff6a805c60 0x7fe2680396ad libcoreclr.so!HelperMethodFrame_1OBJ::Pop() at /__w/1/s/src/coreclr/classlibnative/../vm/frames.h:1421:28\r\n       (inlined by) FrameWithCookie\u003cHelperMethodFrame_1OBJ\u003e::Pop() at /__w/1/s/src/coreclr/classlibnative/../vm/frames.h:3249:47\r\n       (inlined by) SystemNative::FailFast(StringObject*) at /__w/1/s/src/coreclr/classlibnative/bcltype/system.cpp:308:5\r\n       0x7fff6a805e30 0x7fe1e9c21b76 ParallelCrash.dll!ParallelCrash.Main(System.String[])\r\n      ----------------------------------\r\n      Thread Id: 0x2418\r\n            Child SP               IP Call Site\r\n       0x7fe267651d60 0x7fe268341bb9 libc.so.6!__poll\r\n       0x7fe267651d90 0x7fe26812983e libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadPrepareForShutdown() at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:3250:13\r\n       0x7fe267651db0 0x7fe26812c9c4 libcoreclr.so!?? at ??:0:0\r\n       0x7fe267651dc0 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe267651f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe267651fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2419\r\n            Child SP               IP Call Site\r\n       0x7fe266e50a30 0x7fe268341bb9 libc.so.6!__poll\r\n       0x7fe266e50a60 0x7fe267fa4cac libcoreclr.so!ipc_retry_syscall(int) at /__w/1/s/src/native/eventpipe/ds-ipc-pal-socket.c:283:16\r\n       (inlined by) ipc_poll_fds(pollfd*, unsigned long, unsigned int) at /__w/1/s/src/native/eventpipe/ds-ipc-pal-socket.c:486:11\r\n       (inlined by) ds_ipc_poll(_DiagnosticsIpcPollHandle*, unsigned long, unsigned int, void (*)(char const*, unsigned int)) at /__w/1/s/src/native/eventpipe/ds-ipc-pal-socket.c:1096:16\r\n       0x7fe266e50aa0 0x7fe2680a9af6 libcoreclr.so!ds_ipc_stream_factory_get_next_available_stream(void (*)(char const*, unsigned int)) at /__w/1/s/src/native/eventpipe/ds-ipc.c:406:15\r\n       0x7fe266e50dd0 0x7fe2680a7276 libcoreclr.so!server_thread(void*) at /__w/1/s/src/native/eventpipe/ds-server.c:130:8\r\n       0x7fe266e50e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe266e50f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe266e50fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241a\r\n            Child SP               IP Call Site\r\n       0x7fe265a84670 0x7fe268f6ee9e libpthread.so.0!open64\r\n       0x7fe265a846e0 0x7fe267fa5b3c libcoreclr.so!TwoWayPipe::WaitForConnection() at /__w/1/s/src/coreclr/debug/debug-pal/unix/twowaypipe.cpp:87:19\r\n       0x7fe265a84710 0x7fe267f9d3ab libcoreclr.so!DbgTransportSession::TransportWorker() at /__w/1/s/src/coreclr/debug/ee/../shared/dbgtransportsession.cpp:1315:17\r\n       0x7fe265a84e20 0x7fe267f9bf75 libcoreclr.so!DbgTransportSession::TransportWorkerStatic(void*) at /__w/1/s/src/coreclr/debug/ee/../shared/dbgtransportsession.cpp:1235:5\r\n       0x7fe265a84e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe265a84f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe265a84fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241b\r\n            Child SP               IP Call Site\r\n       0x7fe265283990 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe265283a60 0x7fe268129237 libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:0:28\r\n       0x7fe265283ad0 0x7fe26812887b libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:301:22\r\n       0x7fe265283b30 0x7fe268131f7f libcoreclr.so!CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) at /__w/1/s/src/coreclr/pal/src/synchmgr/wait.cpp:637:45\r\n       0x7fe265283cf0 0x7fe26813290f libcoreclr.so!WaitForMultipleObjectsEx at /__w/1/s/src/coreclr/pal/src/synchmgr/wait.cpp:201:13\r\n       0x7fe265283d40 0x7fe267f98b66 libcoreclr.so!DebuggerRCThread::MainLoop() at /__w/1/s/src/coreclr/debug/ee/rcthread.cpp:927:14\r\n       0x7fe265283de0 0x7fe267f98989 libcoreclr.so!DebuggerRCThread::ThreadProc() at /__w/1/s/src/coreclr/debug/ee/rcthread.cpp:730:5\r\n       0x7fe265283e20 0x7fe267f983e0 libcoreclr.so!DebuggerRCThread::ThreadProcStatic(void*) at /__w/1/s/src/coreclr/debug/ee/rcthread.cpp:1321:5\r\n       0x7fe265283e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe265283f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe265283fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241c\r\n            Child SP               IP Call Site\r\n       0x7fe264a82530 0x7fe268f6afb9 libpthread.so.0!pthread_cond_timedwait\r\n       0x7fe264a82630 0x7fe268129218 libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:0:0\r\n       0x7fe264a826a0 0x7fe26812887b libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:301:22\r\n       0x7fe264a82700 0x7fe268131f7f libcoreclr.so!CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) at /__w/1/s/src/coreclr/pal/src/synchmgr/wait.cpp:637:45\r\n       0x7fe264a828c0 0x7fe26813268c libcoreclr.so!WaitForSingleObjectEx at /__w/1/s/src/coreclr/pal/src/synchmgr/wait.cpp:138:13\r\n       0x7fe264a82910 0x7fe267df5721 libcoreclr.so!CLREventWaitHelper(void*, unsigned int, int)::$_1::operator()(CLREventWaitHelper(void*, unsigned int, int)::Param*) const at /__w/1/s/src/coreclr/vm/synch.cpp:397:24\r\n       (inlined by) CLREventWaitHelper(void*, unsigned int, int) at /__w/1/s/src/coreclr/vm/synch.cpp:399:5\r\n       (inlined by) CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) at /__w/1/s/src/coreclr/vm/synch.cpp:466:20\r\n       0x7fe264a829c0 0x7fe267d015af libcoreclr.so!FinalizerThread::WaitForFinalizerEvent(CLREvent*) at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:130:5\r\n       0x7fe264a82a00 0x7fe267d01932 libcoreclr.so!FinalizerThread::FinalizerThreadWorker(void*) at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:262:13\r\n       0x7fe264a82c60 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe264a82dc0 0x7fe267c470dd libcoreclr.so!ManagedThreadBase_NoADTransition(void (*)(void*), UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:7517:5\r\n       (inlined by) ManagedThreadBase::FinalizerBase(void (*)(void*)) at /__w/1/s/src/coreclr/vm/threads.cpp:7536:5\r\n       0x7fe264a82df0 0x7fe267d01f78 libcoreclr.so!FinalizerThread::FinalizerThreadStart(void*) at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:394:22\r\n       0x7fe264a82e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe264a82f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe264a82fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241d\r\n            Child SP               IP Call Site\r\n       0x7fe2628fe070 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe2628fe140 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fe2628fe190 0x7fe267dfa9b2 libcoreclr.so!Thread::RareDisablePreemptiveGC() at /__w/1/s/src/coreclr/vm/threadsuspend.cpp:2161:28\r\n       0x7fe2628fe1e0 0x7fe267ad8c62 libcoreclr.so!void GCHolderBase::PopInternal\u003c1\u003e() at /__w/1/s/src/coreclr/vm/threads.h:5067:27\r\n       0x7fe2628fe210 0x7fe267aeff39 libcoreclr.so!GCPreempThreadExists::~GCPreempThreadExists() at /__w/1/s/src/coreclr/vm/threads.h:5450:5\r\n       0x7fe2628fe220 0x7fe267c09da7 libcoreclr.so!PreStubWorker at /__w/1/s/src/coreclr/vm/prestub.cpp:1957:13\r\n       0x7fe2628fe340 0x7fe267f0dac4 libcoreclr.so!ThePreStub at /__w/1/s/src/coreclr/vm/amd64/theprestubamd64.S:18:0\r\n       0x7fe2628fe430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2628fe770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2628fe850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2628feab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2628fead0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2628feaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2628feb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2628febc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2628fec30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2628fed90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2628fedc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2628fee40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2628fef00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2628fefc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241e\r\n            Child SP               IP Call Site\r\n       0x7fe2620fc220 0x7fe267ecb172 libcoreclr.so!WKS::enter_spin_lock_noinstru(int volatile*) at /__w/1/s/src/coreclr/gc/gc.cpp:1403:39\r\n       (inlined by) WKS::enter_spin_lock(WKS::GCDebugSpinLock*) at /__w/1/s/src/coreclr/gc/gc.cpp:1445:5\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47421:5\r\n       0x7fe2620fc280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fe2620fc2c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fe2620fc340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fe2620fc470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fe2620fc560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fe2620fc5c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fe2620fcb10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fe2620fcb60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fe2620fd290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fe2620fd350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fe2620fd3e0 0x7fe1e9c226ec System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fe2620fd430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2620fd770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2620fd850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2620fdab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2620fdad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2620fdaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2620fdb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2620fdbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2620fdc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2620fdd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2620fddc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2620fde40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2620fdf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2620fdfc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x241f\r\n            Child SP               IP Call Site\r\n       0x7fe2618fb170 0x7fe268f6b804 libpthread.so.0!pthread_cond_broadcast\r\n       0x7fe2618fb1e0 0x7fe267dfe7f5 libcoreclr.so!IsGCSpecialThread() at /__w/1/s/src/coreclr/inc/utilcode.h:3672:15\r\n       (inlined by) ThreadSuspend::RestartEE(int, int) at /__w/1/s/src/coreclr/vm/threadsuspend.cpp:5625:5\r\n       0x7fe2618fb220 0x7fe267ecb64f libcoreclr.so!void VolatileStore\u003cint\u003e(int*, int) at /__w/1/s/src/coreclr/inc/volatile.h:272:5\r\n       (inlined by) Volatile\u003cint\u003e::Store(int const\u0026) at /__w/1/s/src/coreclr/inc/volatile.h:392:9\r\n       (inlined by) Volatile\u003cint\u003e::operator=(int) at /__w/1/s/src/coreclr/inc/volatile.h:433:43\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47542:25\r\n       0x7fe2618fb280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fe2618fb2c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fe2618fb340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fe2618fb470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fe2618fb560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fe2618fb5c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fe2618fbb10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fe2618fbb60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fe2618fc290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fe2618fc350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fe2618fc3e0 0x7fe1e9c226e8 System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fe2618fc430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2618fc770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2618fc850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2618fcab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2618fcad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2618fcaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2618fcb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2618fcbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2618fcc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2618fcd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2618fcdc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2618fce40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2618fcf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2618fcfc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2420\r\n            Child SP               IP Call Site\r\n       0x7fe2610fb070 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe2610fb140 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fe2610fb190 0x7fe267dfa9b2 libcoreclr.so!Thread::RareDisablePreemptiveGC() at /__w/1/s/src/coreclr/vm/threadsuspend.cpp:2161:28\r\n       0x7fe2610fb1e0 0x7fe267ad8c62 libcoreclr.so!void GCHolderBase::PopInternal\u003c1\u003e() at /__w/1/s/src/coreclr/vm/threads.h:5067:27\r\n       0x7fe2610fb210 0x7fe267aeff39 libcoreclr.so!GCPreempThreadExists::~GCPreempThreadExists() at /__w/1/s/src/coreclr/vm/threads.h:5450:5\r\n       0x7fe2610fb220 0x7fe267c09da7 libcoreclr.so!PreStubWorker at /__w/1/s/src/coreclr/vm/prestub.cpp:1957:13\r\n       0x7fe2610fb340 0x7fe267f0dac4 libcoreclr.so!ThePreStub at /__w/1/s/src/coreclr/vm/amd64/theprestubamd64.S:18:0\r\n       0x7fe2610fb430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2610fb770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2610fb850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2610fbab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2610fbad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2610fbaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2610fbb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2610fbbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2610fbc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2610fbd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2610fbdc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2610fbe40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2610fbf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2610fbfc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2421\r\n            Child SP               IP Call Site\r\n       0x7fe2608f90d0 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe2608f91a0 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fe2608f91f0 0x7fe267eb7d5f libcoreclr.so!WKS::gc_heap::wait_for_gc_done(int) at /__w/1/s/src/coreclr/gc/gc.cpp:14139:12\r\n       (inlined by) WKS::WaitLongerNoInstru(int) at /__w/1/s/src/coreclr/gc/gc.cpp:1359:13\r\n       0x7fe2608f9220 0x7fe267ecb128 libcoreclr.so!int volatile VolatileLoad\u003cint volatile\u003e(int volatile const*) at /__w/1/s/src/coreclr/inc/volatile.h:188:13\r\n       (inlined by) WKS::enter_spin_lock_noinstru(int volatile*) at /__w/1/s/src/coreclr/gc/gc.cpp:1392:16\r\n       (inlined by) WKS::enter_spin_lock(WKS::GCDebugSpinLock*) at /__w/1/s/src/coreclr/gc/gc.cpp:1445:5\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47421:5\r\n       0x7fe2608f9280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fe2608f92c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fe2608f9340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fe2608f9470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fe2608f9560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fe2608f95c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fe2608f9b10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fe2608f9b60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fe2608fa290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fe2608fa350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fe2608fa3e0 0x7fe1e9c226e4 System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fe2608fa430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2608fa770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2608fa850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2608faab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2608faad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2608faaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2608fab40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2608fabc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2608fac30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2608fad90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2608fadc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2608fae40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2608faf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2608fafc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2422\r\n            Child SP               IP Call Site\r\n       0x7fe2600f80d0 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe2600f81a0 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fe2600f81f0 0x7fe267eb7d5f libcoreclr.so!WKS::gc_heap::wait_for_gc_done(int) at /__w/1/s/src/coreclr/gc/gc.cpp:14139:12\r\n       (inlined by) WKS::WaitLongerNoInstru(int) at /__w/1/s/src/coreclr/gc/gc.cpp:1359:13\r\n       0x7fe2600f8220 0x7fe267ecb128 libcoreclr.so!int volatile VolatileLoad\u003cint volatile\u003e(int volatile const*) at /__w/1/s/src/coreclr/inc/volatile.h:188:13\r\n       (inlined by) WKS::enter_spin_lock_noinstru(int volatile*) at /__w/1/s/src/coreclr/gc/gc.cpp:1392:16\r\n       (inlined by) WKS::enter_spin_lock(WKS::GCDebugSpinLock*) at /__w/1/s/src/coreclr/gc/gc.cpp:1445:5\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47421:5\r\n       0x7fe2600f8280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fe2600f82c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fe2600f8340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fe2600f8470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fe2600f8560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fe2600f85c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fe2600f8b10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fe2600f8b60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fe2600f9290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fe2600f9350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fe2600f93e0 0x7fe1e9c226ec System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fe2600f9430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe2600f9770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2600f9850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe2600f9ab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe2600f9ad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe2600f9af0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe2600f9b40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe2600f9bc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe2600f9c30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe2600f9d90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe2600f9dc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe2600f9e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe2600f9f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe2600f9fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2423\r\n            Child SP               IP Call Site\r\n       0x7fe1e88680d0 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fe1e88681a0 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fe1e88681f0 0x7fe267eb7d5f libcoreclr.so!WKS::gc_heap::wait_for_gc_done(int) at /__w/1/s/src/coreclr/gc/gc.cpp:14139:12\r\n       (inlined by) WKS::WaitLongerNoInstru(int) at /__w/1/s/src/coreclr/gc/gc.cpp:1359:13\r\n       0x7fe1e8868220 0x7fe267ecb128 libcoreclr.so!int volatile VolatileLoad\u003cint volatile\u003e(int volatile const*) at /__w/1/s/src/coreclr/inc/volatile.h:188:13\r\n       (inlined by) WKS::enter_spin_lock_noinstru(int volatile*) at /__w/1/s/src/coreclr/gc/gc.cpp:1392:16\r\n       (inlined by) WKS::enter_spin_lock(WKS::GCDebugSpinLock*) at /__w/1/s/src/coreclr/gc/gc.cpp:1445:5\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47421:5\r\n       0x7fe1e8868280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fe1e88682c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fe1e8868340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fe1e8868470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fe1e8868560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fe1e88685c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fe1e8868b10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fe1e8868b60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fe1e8869290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fe1e8869350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fe1e88693e0 0x7fe1e9c226e8 System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fe1e8869430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fe1e8869770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe1e8869850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fe1e8869ab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fe1e8869ad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fe1e8869af0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fe1e8869b40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fe1e8869bc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fe1e8869c30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fe1e8869d90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fe1e8869dc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fe1e8869e40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fe1e8869f00 0x7fe268f646db libpthread.so.0!\r\n       0x7fe1e8869fc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2424\r\n            Child SP               IP Call Site\r\n       0x7fa1c34cd070 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fa1c34cd140 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fa1c34cd190 0x7fe267dfa9b2 libcoreclr.so!Thread::RareDisablePreemptiveGC() at /__w/1/s/src/coreclr/vm/threadsuspend.cpp:2161:28\r\n       0x7fa1c34cd1e0 0x7fe267ad8c62 libcoreclr.so!void GCHolderBase::PopInternal\u003c1\u003e() at /__w/1/s/src/coreclr/vm/threads.h:5067:27\r\n       0x7fa1c34cd210 0x7fe267aeff39 libcoreclr.so!GCPreempThreadExists::~GCPreempThreadExists() at /__w/1/s/src/coreclr/vm/threads.h:5450:5\r\n       0x7fa1c34cd220 0x7fe267c09da7 libcoreclr.so!PreStubWorker at /__w/1/s/src/coreclr/vm/prestub.cpp:1957:13\r\n       0x7fa1c34cd340 0x7fe267f0dac4 libcoreclr.so!ThePreStub at /__w/1/s/src/coreclr/vm/amd64/theprestubamd64.S:18:0\r\n       0x7fa1c34cd430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fa1c34cd770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c34cd850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c34cdab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fa1c34cdad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fa1c34cdaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fa1c34cdb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fa1c34cdbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fa1c34cdc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fa1c34cdd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fa1c34cddc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fa1c34cde40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fa1c34cdf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fa1c34cdfc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2425\r\n            Child SP               IP Call Site\r\n       0x7fa1c2ccb0d0 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fa1c2ccb1a0 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fa1c2ccb1f0 0x7fe267eb7d5f libcoreclr.so!WKS::gc_heap::wait_for_gc_done(int) at /__w/1/s/src/coreclr/gc/gc.cpp:14139:12\r\n       (inlined by) WKS::WaitLongerNoInstru(int) at /__w/1/s/src/coreclr/gc/gc.cpp:1359:13\r\n       0x7fa1c2ccb220 0x7fe267ecb128 libcoreclr.so!int volatile VolatileLoad\u003cint volatile\u003e(int volatile const*) at /__w/1/s/src/coreclr/inc/volatile.h:188:13\r\n       (inlined by) WKS::enter_spin_lock_noinstru(int volatile*) at /__w/1/s/src/coreclr/gc/gc.cpp:1392:16\r\n       (inlined by) WKS::enter_spin_lock(WKS::GCDebugSpinLock*) at /__w/1/s/src/coreclr/gc/gc.cpp:1445:5\r\n       (inlined by) WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) at /__w/1/s/src/coreclr/gc/gc.cpp:47421:5\r\n       0x7fa1c2ccb280 0x7fe267f047d0 libcoreclr.so!WKS::GCHeap::GarbageCollect(int, bool, int) at /__w/1/s/src/coreclr/gc/gc.cpp:46685:52\r\n       0x7fa1c2ccb2c0 0x7fe267f03973 libcoreclr.so!WKS::GCHeap::StressHeap(gc_alloc_context*) at /__w/1/s/src/coreclr/gc/gc.cpp:46303:9\r\n       0x7fa1c2ccb340 0x7fe267d0442c libcoreclr.so!Thread::HasPendingGCStressInstructionUpdate() at /__w/1/s/src/coreclr/vm/threads.h:4042:21\r\n       (inlined by) DoGcStress(_CONTEXT*, NativeCodeVersion) at /__w/1/s/src/coreclr/vm/gccover.cpp:1768:17\r\n       0x7fa1c2ccb470 0x7fe267d03f6a libcoreclr.so!OnGcCoverageInterrupt(_CONTEXT*) at /__w/1/s/src/coreclr/vm/gccover.cpp:0:9\r\n       0x7fa1c2ccb560 0x7fe267b56e72 libcoreclr.so!IsGcMarker(_CONTEXT*, _EXCEPTION_RECORD*) at /__w/1/s/src/coreclr/vm/excep.cpp:6184:19\r\n       0x7fa1c2ccb5c0 0x7fe267e340da libcoreclr.so!HandleHardwareException(PAL_SEHException*) at /__w/1/s/src/coreclr/vm/exceptionhandling.cpp:5257:59\r\n       0x7fa1c2ccbb10 0x7fe2680d5fb3 libcoreclr.so!SEHProcessException(PAL_SEHException*) at /__w/1/s/src/coreclr/pal/src/exception/seh.cpp:268:21\r\n       0x7fa1c2ccbb60 0x7fe2680d8017 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:1024:9\r\n       0x7fa1c2ccc290 0x7fe2680d7d0f libcoreclr.so!signal_handler_worker at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:499:36\r\n       0x7fa1c2ccc350 0x7fe26814321a libcoreclr.so!CallSignalHandlerWrapper0 at /__w/1/s/src/coreclr/pal/src/arch/amd64/callsignalhandlerwrapper.S:29:0\r\n       0x7fa1c2ccc3e0 0x7fe1e9c226e4 System.Private.CoreLib.dll!System.PackedSpanHelpers.NegateIfNeeded[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](System.Runtime.Intrinsics.Vector256`1\u003cByte\u003e)\r\n       0x7fa1c2ccc430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fa1c2ccc770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c2ccc850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c2cccab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fa1c2cccad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fa1c2cccaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fa1c2cccb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fa1c2cccbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fa1c2cccc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fa1c2cccd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fa1c2cccdc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fa1c2ccce40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fa1c2cccf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fa1c2cccfc0 0x7fe26834e61f libc.so.6!clone\r\n      ----------------------------------\r\n      Thread Id: 0x2426\r\n            Child SP               IP Call Site\r\n       0x7fa1c24cb070 0x7fe268f6aad3 libpthread.so.0!pthread_cond_wait\r\n       0x7fa1c24cb140 0x7fe2680cc616 libcoreclr.so!GCEvent::Impl::Wait(unsigned int, bool) at /__w/1/s/src/coreclr/gc/unix/events.cpp:149:22\r\n       0x7fa1c24cb190 0x7fe267dfa9b2 libcoreclr.so!Thread::RareDisablePreemptiveGC() at /__w/1/s/src/coreclr/vm/threadsuspend.cpp:2161:28\r\n       0x7fa1c24cb1e0 0x7fe267ad8c62 libcoreclr.so!void GCHolderBase::PopInternal\u003c1\u003e() at /__w/1/s/src/coreclr/vm/threads.h:5067:27\r\n       0x7fa1c24cb210 0x7fe267aeff39 libcoreclr.so!GCPreempThreadExists::~GCPreempThreadExists() at /__w/1/s/src/coreclr/vm/threads.h:5450:5\r\n       0x7fa1c24cb220 0x7fe267c09da7 libcoreclr.so!PreStubWorker at /__w/1/s/src/coreclr/vm/prestub.cpp:1957:13\r\n       0x7fa1c24cb340 0x7fe267f0dac4 libcoreclr.so!ThePreStub at /__w/1/s/src/coreclr/vm/amd64/theprestubamd64.S:18:0\r\n       0x7fa1c24cb430 0x7fe1e9c22246 System.Private.CoreLib.dll!System.PackedSpanHelpers.IndexOfAny[[System.SpanHelpers+DontNegate`1[[System.Int16, System.Private.CoreLib]], System.Private.CoreLib]](Int16 ByRef, Int16, Int16, Int32)\r\n       0x7fa1c24cb770 0x7fe1e8bbb532 System.Private.CoreLib.dll!System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c24cb850 0x7fe1e8a80d33 System.Private.CoreLib.dll!System.String.FormatHelper(System.IFormatProvider, System.String, System.ReadOnlySpan`1\u003cSystem.Object\u003e)\r\n       0x7fa1c24cbab0 0x7fe1e9c21c36 ParallelCrash.dll!ParallelCrash.CrashInParallel()\r\n       0x7fa1c24cbad0 0x7fe267f0cacf 0x7fe267f0cacf\r\n       0x7fa1c24cbaf0 0x7fe267c93b6b libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4663:5\r\n       (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n       0x7fa1c24cbb40 0x7fe267c93e9c libcoreclr.so!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:218:9\r\n       0x7fa1c24cbbc0 0x7fe267cb993b libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n       0x7fa1c24cbc30 0x7fe267c468be libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       0x7fa1c24cbd90 0x7fe267c4708d libcoreclr.so!ManagedThreadBase_FullTransition(void (*)(void*), void*, UnhandledExceptionLocation) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n       (inlined by) ManagedThreadBase::KickOff(void (*)(void*), void*) at /__w/1/s/src/coreclr/vm/threads.cpp:7528:5\r\n       0x7fa1c24cbdc0 0x7fe267cb9a86 libcoreclr.so!ThreadNative::KickOffThread(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:230:9\r\n       0x7fa1c24cbe40 0x7fe26813f142 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1760:16\r\n       0x7fa1c24cbf00 0x7fe268f646db libpthread.so.0!\r\n       0x7fa1c24cbfc0 0x7fe26834e61f libc.so.6!clone\r\n      \r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-14T02:53:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VP2Wa",
                                           "createdAt":  "2023-02-14T18:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Now disabled under GCStress pending failure investigation.",
                                           "updatedAt":  "2023-02-14T18:48:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mzLY_",
                                           "createdAt":  "2023-09-19T01:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr jitstress 20230917.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=409326\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=8899414\u0026resultId=119928\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr windows x86 Checked jitstress1 @ Windows.10.Amd64.Open\r\n    - baseservices\\\\exceptions\\\\simple\\\\ParallelCrashWorkerThreads\\\\ParallelCrashWorkerThreads.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\nProcess terminated. Parallel crash in thread 8!\r\n\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.CrashInParallel()\r\n   at System.Threading.Thread.StartCallback()\r\n\r\ncmdLine:C:\\h\\w\\AF4809D1\\w\\B3E4098E\\e\\baseservices\\exceptions\\simple\\ParallelCrashWorkerThreads\\ParallelCrashWorkerThreads.cmd Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 9/18/2023 5:42:31 AM, end: 9/18/2023 6:12:31 AM)\r\n\r\nReturn code:      -100\r\nRaw output file:      C:\\h\\w\\AF4809D1\\w\\B3E4098E\\uploads\\Reports\\baseservices.exceptions\\simple\\ParallelCrashWorkerThreads\\ParallelCrashWorkerThreads.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n cmd /c ..\\ParallelCrash\\ParallelCrash.cmd\r\nBEGIN EXECUTION\r\n \"C:\\h\\w\\AF4809D1\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  ParallelCrash.dll 2 \r\n\r\ncmdLine:C:\\h\\w\\AF4809D1\\w\\B3E4098E\\e\\baseservices\\exceptions\\simple\\ParallelCrashWorkerThreads\\ParallelCrashWorkerThreads.cmd Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 9/18/2023 5:42:31 AM, end: 9/18/2023 6:12:31 AM)\r\nInvoking: C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\cdb.exe -c \"$\u003cC:\\h\\w\\AF4809D1\\t\\tmp3iasdb.tmp\" -z \"C:\\cores\\crashdump_2428.dmp\"\r\nstdout: \r\nMicrosoft (R) Windows Debugger Version 10.0.18362.1 X86\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nLoading Dump File [C:\\cores\\crashdump_2428.dmp]\r\nUser Mini Dump File with Full Memory: Only application data is available\r\n\r\n\r\n************* Path validation summary **************\r\nResponse                         Time (ms)     Location\r\nOK                                             C:\\h\\w\\AF4809D1\\p\\PDB\r\nSymbol search path is: C:\\h\\w\\AF4809D1\\p\\PDB\r\nExecutable search path is: \r\nWindows 10 Version 14393 MP (4 procs) Free x86 compatible\r\nProduct: Server, suite: TerminalServer DataCenter SingleUserTS\r\n10.0.14393.5125 (rs1_release.220429-1732)\r\nMachine Name:\r\nDebug session time: Mon Sep 18 06:12:31.000 2023 (UTC + 0:00)\r\nSystem Uptime: 0 days 0:34:49.118\r\nProcess Uptime: 0 days 0:29:52.000\r\nERROR: Reload failure, partially initialized target\r\nWaitForEvent failed, HRESULT 0x8000FFFF\r\nCatastrophic failure\r\nWhen WaitForEvent fails on dump files the current state is not displayed.\r\nIf you are having symbol problems you will need to restart the debugger\r\nafter you correct the symbol path.  .restart can also be used.\r\n?:???\u003e cdb: Reading initial command \u0027$\u003cC:\\h\\w\\AF4809D1\\t\\tmp3iasdb.tmp\u0027\r\n?:???\u003e .load C:\\Users\\runner\\.dotnet\\sos\\sos.dll\r\nWARNING: The debugger does not have a current process or thread\r\nWARNING: Many commands will not work\r\n?:???\u003e ~*k\r\nWARNING: The debugger does not have a current process or thread\r\nWARNING: Many commands will not work\r\n       ^ Illegal thread error in \u0027~*k\u0027\r\n?:???\u003e !clrstack -f -all\r\nWARNING: The debugger does not have a current process or thread\r\nWARNING: Many commands will not work\r\nExtension called without current PC\r\nSOS does not support the current target architecture \u0027\u0027 (0x0000). A 32 bit target may require a 32 bit debugger or vice versa. In general, try to use the same bitness for the debugger and target process.\r\n?:???\u003e q\r\nWARNING: The debugger does not have a current process or thread\r\nWARNING: Many commands will not work\r\nquit:\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\Visualizers\\atlmfc.natvis\u0027\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\Visualizers\\concurrency.natvis\u0027\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\Visualizers\\cpp_rest.natvis\u0027\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\Visualizers\\stl.natvis\u0027\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\Visualizers\\Windows.Data.Json.natvis\u0027\r\nNatVis script unloaded from \u0027C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at baseservices_exceptions._simple_ParallelCrashWorkerThreads_ParallelCrashWorkerThreads_._simple_ParallelCrashWorkerThreads_ParallelCrashWorkerThreads_cmd()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n",
                                           "updatedAt":  "2023-09-19T01:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pO2O6",
                                           "createdAt":  "2023-10-17T01:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr r2r-extra 20231015.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=439272\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9777508\u0026resultId=120330\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 osx arm64 Checked jitstressregs0x80 @ OSX.1200.ARM64.Open\r\n    - baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\n../ParallelCrash/ParallelCrash.sh: line 358: -r:/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/IL-CG2/*.dll: No such file or directory\r\nProcess terminated. Parallel crash in thread 8!\r\n\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.CrashInParallel()\r\n   at System.Threading.Thread.StartCallback()\r\n\r\ncmdLine:/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 10/15/2023 8:50:53 PM, end: 10/15/2023 10:20:53 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /tmp/helix/working/9EE6089F/w/A8BE0947/uploads/Reports/baseservices.exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nexport CDPATH=/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrashWorkerThreads\r\n/usr/bin/env bash ../ParallelCrash/ParallelCrash.sh \u00272\u0027\r\nBEGIN EXECUTION\r\nin takeLock\r\n/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/IL-CG2/ParallelCrash.dll\r\n20:50:53\r\nResponse file: /private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll.rsp\r\n/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/IL-CG2/ParallelCrash.dll\r\n-o:/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll\r\n-r:/tmp/helix/working/9EE6089F/p/System.*.dll\r\n-r:/tmp/helix/working/9EE6089F/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/9EE6089F/p/xunit.*.dll\r\n-r:/tmp/helix/working/9EE6089F/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--targetarch:arm64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/9EE6089F/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/9EE6089F/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll --out /private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrash/ParallelCrash.dll.r2rdump --val\r\n20:50:55\r\nin ReleaseLock\r\nin takeLock\r\n/tmp/helix/working/9EE6089F/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true ParallelCrash.dll \u00272\u0027\r\n\r\ncmdLine:/private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 10/15/2023 8:50:53 PM, end: 10/15/2023 10:20:53 PM)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n\u003e set CORE_ROOT=/tmp/helix/working/9EE6089F/p\r\n\u003e /private/tmp/helix/working/9EE6089F/w/A8BE0947/e/baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at baseservices_exceptions._simple_ParallelCraWorkerThreads_ParallelCraWorkerThreads_._simple_ParallelCrashWorkerThreads_ParallelCrashWorkerThreads_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-16T10:34:01.086Z | runtime-coreclr outerloop | Checked | osx.1200.arm64.open | arm64 | baseservices/exceptions/simple/ParallelCrashWorkerThreads/ParallelCrashWorkerThreads.sh | Failed | {\"AzurePipelinesTestRunId\":\"9782924\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"BuildNumber\":\"20231016.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"439391\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"System.JobName\":\"__default\",\"DefinitionId\":\"108\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-17T01:12:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rz0RB",
                                           "createdAt":  "2023-11-13T18:19:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e Now disabled under GCStress pending failure investigation.\r\n\r\n@BruceForstall - seems we didn\u0027t disable the test for all modes? They seem to be still failing - https://dev.azure.com/dnceng-public/public/_build/results?buildId=467989\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10642174\u0026resultId=143206\u0026paneView=debug\r\n\r\n@mangod9 - any plans of investigating this sooner? this is high hit issue.",
                                           "updatedAt":  "2023-11-13T18:19:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rz1B8",
                                           "createdAt":  "2023-11-13T18:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e \u003e Now disabled under GCStress pending failure investigation.\r\n\u003e \r\n\u003e @BruceForstall - seems we didn\u0027t disable the test for all modes? They seem to be still failing - https://dev.azure.com/dnceng-public/public/_build/results?buildId=467989\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10642174\u0026resultId=143206\u0026paneView=debug\r\n\r\nnever mind. This one turns out to be a different issue https://github.com/dotnet/runtime/issues/94652",
                                           "updatedAt":  "2023-11-13T18:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AuZJu",
                                           "createdAt":  "2024-06-11T02:17:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240610.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=702114\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17485962\u0026resultId=118113\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr osx x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\r\n    - baseservices/exceptions/simple/ParallelCrashTester/ParallelCrashTester.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Process terminated. Parallel crash in main thread\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.Main(System.String[])\r\nProcess terminated. Parallel crash in thread 4!\r\n\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.CrashInParallel()\r\n   at System.Threading.Thread.StartCallback()\r\nProcess terminated. Parallel crash in main thread\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.Main(System.String[])\r\n\r\ncmdLine:/private/tmp/helix/working/AB0E09C4/w/AB1C09CE/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 6/10/2024 6:19:06 AM, end: 6/10/2024 6:29:06 AM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /tmp/helix/working/AB0E09C4/w/AB1C09CE/uploads/simple/ParallelCrashTester/output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/tmp/helix/working/AB0E09C4/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true ParallelCrashTester.dll \u0027\u0027\r\nRunning ParallelCrash test(1)\r\nRunning ParallelCrash test(2)\r\nRunning ParallelCrash test(0)\r\n\r\ncmdLine:/private/tmp/helix/working/AB0E09C4/w/AB1C09CE/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 6/10/2024 6:19:06 AM, end: 6/10/2024 6:29:06 AM)\r\nPrinting stacktrace from \u0027/cores/crashdump_62577.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/AB0E09C4/w/AB1C09CE/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\r\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 456\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, TextWriter outputWriter)\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\nSet up CORE_ROOT and run.\r\n\u003e /private/tmp/helix/working/AB0E09C4/w/AB1C09CE/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 146\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor127|0_128(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\r\n```",
                                           "updatedAt":  "2024-06-11T02:17:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fp7KL",
                                           "createdAt":  "2024-07-22T08:16:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240721.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=749526\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18967126\u0026resultId=118125\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr osx x64 Checked @ OSX.1200.Amd64.Open\r\n    - baseservices/exceptions/simple/ParallelCrashTester/ParallelCrashTester.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Process terminated. Parallel crash in main thread\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.Main(System.String[])\r\nProcess terminated. Parallel crash in thread 6!\r\n\r\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\r\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\r\n   at System.Environment.FailFast(System.String)\r\n   at ParallelCrash.CrashInParallel()\r\n   at System.Threading.Thread.StartCallback()\r\n\r\ncmdLine:/private/tmp/helix/working/AFE209A8/w/B882099F/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 7/21/2024 10:19:46 PM, end: 7/21/2024 10:29:46 PM)\r\n\r\nReturn code:      -100\r\nRaw output file:      /tmp/helix/working/AFE209A8/w/B882099F/uploads/simple/ParallelCrashTester/output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/tmp/helix/working/AFE209A8/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true ParallelCrashTester.dll \u0027\u0027\r\nRunning ParallelCrash test(1)\r\nRunning ParallelCrash test(2)\r\n\r\ncmdLine:/private/tmp/helix/working/AFE209A8/w/B882099F/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 7/21/2024 10:19:46 PM, end: 7/21/2024 10:29:46 PM)\r\nPrinting stacktrace from \u0027/cores/crashdump_27666.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/AFE209A8/w/B882099F/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\r\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 498\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 456\r\n   at System.Diagnostics.Process.Start() in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1284\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, TextWriter outputWriter)\r\nPrinting stacktrace from \u0027/cores/crashdump_28005.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/AFE209A8/w/B882099F/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\r\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 498\r\n   at System.Di\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor131|0_132(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\r\n```",
                                           "updatedAt":  "2024-07-22T08:16:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F3k1w",
                                           "createdAt":  "2024-07-23T18:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "this looks similar to #105229. ",
                                           "updatedAt":  "2024-07-23T18:16:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QLsbV",
                                           "createdAt":  "2024-10-17T09:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241016.7](https://dev.azure.com/dnceng-public/public/_build/results?buildId=845677\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=21943248\u0026resultId=117834\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr osx x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\n    - baseservices/exceptions/simple/ParallelCrashTester/ParallelCrashTester.cmd\n```\n\n**Error message:**\n```\n Process terminated. Parallel crash in main thread\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\n   at System.Environment.FailFast(System.String)\n   at ParallelCrash.Main(System.String[])\nProcess terminated. Parallel crash in thread 10!\n\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\n   at System.Environment.FailFast(System.String)\n   at ParallelCrash.CrashInParallel()\n   at System.Threading.Thread.StartCallback()\n\ncmdLine:/private/tmp/helix/working/9A3708F3/w/A0C30901/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 10/16/2024 10:28:21 PM, end: 10/16/2024 10:38:21 PM)\n\nReturn code:      -100\nRaw output file:      /tmp/helix/working/9A3708F3/w/A0C30901/uploads/simple/ParallelCrashTester/output.txt\nRaw output:\nBEGIN EXECUTION\n/tmp/helix/working/9A3708F3/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true ParallelCrashTester.dll \u0027\u0027\nRunning ParallelCrash test(1)\nRunning ParallelCrash test(2)\n\ncmdLine:/private/tmp/helix/working/9A3708F3/w/A0C30901/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 10/16/2024 10:28:21 PM, end: 10/16/2024 10:38:21 PM)\nPrinting stacktrace from \u0027/cores/crashdump_20636.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nErrors while running llvm-symbolizer --pretty-print\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/9A3708F3/w/A0C30901/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 456\n   at CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, TextWriter outputWriter)\nPrinting stacktrace from \u0027/cores/crashdump_20939.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nErrors while running llvm-symbolizer --pretty-print\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/9A3708F3/w/A0C30901/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/P\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 146\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor131|0_132(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-10-17T09:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YCaMc",
                                           "createdAt":  "2024-12-18T09:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241217.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=898161\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23560360\u0026resultId=117933\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr osx x64 Checked @ OSX.1200.Amd64.Open\n    - baseservices/exceptions/simple/ParallelCrashTester/ParallelCrashTester.cmd\n```\n\n**Error message:**\n```\n Process terminated. Parallel crash in main thread\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\n   at System.Environment.FailFast(System.String)\n   at ParallelCrash.Main(System.String[])\nProcess terminated. Parallel crash in thread 8!\n\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\n   at System.Environment.FailFast(System.String)\n   at ParallelCrash.CrashInParallel()\n   at System.Threading.Thread+StartHelper.RunWorker()\n\ncmdLine:/private/tmp/helix/working/AA9D0968/w/C2140A1A/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/17/2024 9:28:39 PM, end: 12/17/2024 9:38:39 PM)\n\nReturn code:      -100\nRaw output file:      /tmp/helix/working/AA9D0968/w/C2140A1A/uploads/simple/ParallelCrashTester/output.txt\nRaw output:\nBEGIN EXECUTION\n/tmp/helix/working/AA9D0968/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true ParallelCrashTester.dll \u0027\u0027\nRunning ParallelCrash test(1)\nRunning ParallelCrash test(2)\n\ncmdLine:/private/tmp/helix/working/AA9D0968/w/C2140A1A/e/baseservices/exceptions/baseservices-exceptions/../simple/ParallelCrashTester/ParallelCrashTester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/17/2024 9:28:39 PM, end: 12/17/2024 9:38:39 PM)\nPrinting stacktrace from \u0027/cores/crashdump_9901.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nErrors while running llvm-symbolizer --pretty-print\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/AA9D0968/w/C2140A1A/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 456\n   at System.Diagnostics.Process.Start() in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1284\n   at CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, TextWriter outputWriter)\nPrinting stacktrace from \u0027/cores/crashdump_10173.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nErrors while running llvm-symbolizer --pretty-print\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/AA9D0968/w/C2140A1A/e/baseservices/exceptions/baseservices-exceptions\u0027. No such file or directory\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\n   at Sy\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor131|0_132(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-18T09:12:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jeXHd",
                                           "createdAt":  "2025-03-21T08:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250320.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=988287\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26371424\u0026resultId=116201\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows x64 Checked @ Windows.10.Amd64.Open\n    - baseservices/exceptions/simple/ParallelCrashTester/ParallelCrashTester.cmd\n```\n\n**Error message:**\n```\n Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly \u0027TestLibrary, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\nFile name: \u0027TestLibrary, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027\n   at ParallelCrash.Main(String[] args)\n\nReturn code:      1\nRaw output file:      C:hwB1EF099BwB08E0975uploadssimpleParallelCrashTesteroutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwB1EF099Bpcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  ParallelCrashTester.dll \nRunning ParallelCrash test(1)\nSystem.Exception: Exit code = -532462766, expected -2146232797\n   at ParallelCrashTester.RunParallelCrash(Int32 arg)\n   at ParallelCrashTester.ParallelCrashMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 3/21/2025 2:44:01 AM\nProcessing C:corescorerun.exe.5140.dmp\nInvoking: C:Program Files (x86)Windows Kits10Debuggersdcdb.exe -c \"$\u003cC:hwB1EF099B\t\tmpgrmg5a.tmp\" -z \"C:corescorerun.exe.5140.dmp\"\nstdout: \nMicrosoft (R) Windows Debugger Version 10.0.18362.1 AMD64\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n\nLoading Dump File [C:corescorerun.exe.5140.dmp]\nUser Mini Dump File with Full Memory: Only application data is available\n\n\n************* Path validation summary **************\nResponse                         Time (ms)     Location\nOK                                             C:hwB1EF099BpPDB\nSymbol search path is: C:hwB1EF099BpPDB\nExecutable search path is: \nWindows 10 Version 14393 MP (4 procs) Free x64\nProduct: Server, suite: TerminalServer DataCenter SingleUserTS\n10.0.14393.6343 (rs1_release.230913-1727)\nMachine Name:\nDebug session time: Fri Mar 21 02:44:07.000 2025 (UTC + 0:00)\nSystem Uptime: 0 days 0:08:11.367\nProcess Uptime: 0 days 0:00:05.000\n...............................\n\n************* Symbol Loading Error Summary **************\nModule name            Error\nntdll                  The system cannot find the file specified\n\nYou can troubleshoot most symbol related issues by turning on symbol loading diagnostics (!sym noisy) and repeating the command that caused symbols to be loaded.\nYou should also verify that your symbol search path (.sympath) is correct.\nThis dump file has an exception of interest stored in it.\nThe stored exception information can be accessed via .ecxr.\n(1414.424): CLR exception - code e0434352 (first/second chance not available)\nFor analysis of this file, run !analyze -v\nntdll!NtWaitForMultipleObjects+0x14:\n00007ff9`c04b6be4 c3              ret\n0:000\u003e cdb: Reading initial command \u0027$\u003cC:hwB1EF099B\t\tmpgrmg5a.tmp\u0027\n0:000\u003e .load C:Users\nunner.dotnetsossos.dll\n0:000\u003e ~*k\n\n.  0  Id: 1414.424 Suspend: 0 Teb: 00000016`22c6c000 Unfrozen\nChild-SP          RetAddr           Call Site\n00000016`22f72a68 00007ff9`bd464ddf ntdll!NtWaitForMultipleObjects+0x14\n00000016`22f72a70 00007ff9`bd464cde KERNELBASE!WaitForMultipleObjectsEx+0xef\n00000016`22f72d70 00007ff9`bd9d08bc KERNELBASE!WaitForMultipleObjects+0xe\n00000016`22f72db0 00007ff9`bd9d03d3 kernel32!BasepReportFault+0x58c\n00000016`22f73360 00007ff9`bd47bf8b kernel32!BasepReportFault+0xa3\n00000016`22f733a0 00007ff9`c04be403 KERNELBASE!UnhandledExceptionFilter+0x23b\n00000016`22f734a0 00007ff9`c04a6b96 ntdll!memset+0x1ac3\n00000016`22f734d0 00007ff9`c04bab2d ntdll!_C_specific_handler+0x96\n00000016`22f73540 00007ff9`c04449d3 ntdll!_chkstk+0x11d\n00000016`22f73570 00007ff9`c04466e9 ntdll!RtlImageNtHeaderEx+0x483\n00000016`22f73c70 00007ff9`bd446ea8 ntdll!RtlRaiseException+0x2d9\n*** WARNING: Unable to verify checksum for coreclr.dll\n00000016`22f74a90 00007ff9`91329e03 KERNELBASE!RaiseException+0x68\n00000016`22f74b70 00007ff9`91328de5 coreclr!__RethrowException+0x33\n00000016`22f74ba0 00007ff9`c04ba173 coreclr!__FrameHandler4::CxxCallCatchBlock+0x275\n00000016`22f74c70\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor131|0_132(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-21T08:17:21Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Test failure baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh",
        "labels":  [
                       "disabled-test",
                       "os-mac-os-x",
                       "GCStress",
                       "arch-x64",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81316",
        "createdAt":  "2023-01-28T16:51:54Z",
        "number":  81316,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-28T16:53:48Z",
        "body":  "There are APIs throughout the codebase that accept printf-style-formats. Now that our internal `printf` implementation has been removed, https://github.com/dotnet/runtime/pull/81243, these APIs should be [marked appropriately](https://clang.llvm.org/docs/AttributeReference.html#format) so the compiler can validate them.\r\n\r\n**Examples**\r\n\r\nhttps://github.com/dotnet/runtime/blob/cd3f357e5425e5305824045c0c7da2d9b292a32e/src/coreclr/utilcode/stresslog.cpp#L788\r\n\r\nhttps://github.com/dotnet/runtime/blob/cd3f357e5425e5305824045c0c7da2d9b292a32e/src/coreclr/jit/error.cpp#L362\r\n\r\nhttps://github.com/dotnet/runtime/blob/cd3f357e5425e5305824045c0c7da2d9b292a32e/src/coreclr/md/compiler/regmeta.cpp#L839\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU-PRhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5T49GG",
                                           "createdAt":  "2023-01-28T16:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @am11 @elinor-fung @jkoritzinsky @mangod9 ",
                                           "updatedAt":  "2023-01-28T16:53:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Apply \"printf format\" to APIs",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82297",
        "createdAt":  "2023-02-17T14:25:27Z",
        "number":  82297,
        "author":  "arnecornillie-gantner",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-17T23:23:19Z",
        "body":  "### Description\r\n\r\nWe are running several microservices in an AWS ECS cluster. We are moving from .net 6 to .net 7, but we see the memory usage increased a lot.\r\n\r\n\r\n### Configuration\r\n\r\n* Create an asp.net core 7 application\r\n* Build the application\r\n* Use .net 7 docker image from dockerhub ex: \"mcr.microsoft.com/dotnet/aspnet:7.0\"\r\n\r\n\r\n### Analysis\r\n\r\nCompared with .net 6, our docker containers are using more memory. To run our .net6 applications, we are using the 6.0 version of the mentioned docker container.\r\n\r\nI did some analysis by exploring the cgroup metrics \u0026 I see a big difference in \"shmem\" parameter.\r\n\r\nDotnet 6:\r\n`payment_user@80a0abe5eb10:/sys/fs/cgroup/memory$ cat memory.stat\r\ncache 61927424\r\nrss 96665600\r\nrss_huge 2097152\r\n**shmem 12288**\r\nmapped_file 45645824\r\ndirty 28672\r\nwriteback 0\r\nswap 0\r\npgpgin 49249\r\npgpgout 11046\r\npgfault 30832\r\npgmajfault 536\r\ninactive_anon 98697216\r\nactive_anon 20480\r\ninactive_file 57602048\r\nactive_file 4313088\r\nunevictable 0\r\nhierarchical_memory_limit 9223372036854771712\r\nhierarchical_memsw_limit 9223372036854771712\r\ntotal_cache 61927424\r\ntotal_rss 96665600\r\ntotal_rss_huge 2097152\r\ntotal_shmem 12288\r\ntotal_mapped_file 45645824\r\ntotal_dirty 28672\r\ntotal_writeback 0\r\ntotal_swap 0\r\ntotal_pgpgin 49249\r\ntotal_pgpgout 11046\r\ntotal_pgfault 30832\r\ntotal_pgmajfault 536\r\ntotal_inactive_anon 98697216\r\ntotal_active_anon 20480\r\ntotal_inactive_file 57602048\r\ntotal_active_file 4313088\r\ntotal_unevictable 0`\r\n\r\n-\u003e **shmem 12288**\r\n\r\nDotnet 7\r\n`payment_user@3c57bc105917:/sys/fs/cgroup/memory$ cat memory.stat\r\ncache 48123904\r\nrss 116064256\r\nrss_huge 8388608\r\n**shmem 47308800**\r\nmapped_file 47874048\r\ndirty 53248\r\nwriteback 0\r\nswap 0\r\npgpgin 40473\r\npgpgout 2437\r\npgfault 71286\r\npgmajfault 8\r\ninactive_anon 159879168\r\nactive_anon 5521408\r\ninactive_file 815104\r\nactive_file 0\r\nunevictable 0\r\nhierarchical_memory_limit 9223372036854771712\r\nhierarchical_memsw_limit 9223372036854771712\r\ntotal_cache 48123904\r\ntotal_rss 116064256\r\ntotal_rss_huge 8388608\r\ntotal_shmem 47308800\r\ntotal_mapped_file 47874048\r\ntotal_dirty 53248\r\ntotal_writeback 0\r\ntotal_swap 0\r\ntotal_pgpgin 40473\r\ntotal_pgpgout 2437\r\ntotal_pgfault 71286\r\ntotal_pgmajfault 8\r\ntotal_inactive_anon 159879168\r\ntotal_active_anon 5521408\r\ntotal_inactive_file 815104\r\ntotal_active_file 0\r\ntotal_unevictable 0`\r\n\r\n--\u003e **shmem 47308800**\r\n\r\nIs this an issue in the dotnet 7 runtime? Or any tips to get rid of this behavior? \r\n\r\nThanks!\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVaSusA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VhF30",
                                           "createdAt":  "2023-02-17T14:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe are running several microservices in an AWS ECS cluster. We are moving from .net 6 to .net 7, but we see the memory usage increased a lot.\r\n\r\n\r\n### Configuration\r\n\r\n* Create an asp.net core 7 application\r\n* Build the application\r\n* Use .net 7 docker image from dockerhub ex: \"mcr.microsoft.com/dotnet/aspnet:7.0\"\r\n\r\n\r\n### Analysis\r\n\r\nCompared with .net 6, our docker containers are using more memory. To run our .net6 applications, we are using the 6.0 version of the mentioned docker container.\r\n\r\nI did some analysis by exploring the cgroup metrics \u0026 I see a big difference in \"shmem\" parameter.\r\n\r\nDotnet 6:\r\n`payment_user@80a0abe5eb10:/sys/fs/cgroup/memory$ cat memory.stat\r\ncache 61927424\r\nrss 96665600\r\nrss_huge 2097152\r\n**shmem 12288**\r\nmapped_file 45645824\r\ndirty 28672\r\nwriteback 0\r\nswap 0\r\npgpgin 49249\r\npgpgout 11046\r\npgfault 30832\r\npgmajfault 536\r\ninactive_anon 98697216\r\nactive_anon 20480\r\ninactive_file 57602048\r\nactive_file 4313088\r\nunevictable 0\r\nhierarchical_memory_limit 9223372036854771712\r\nhierarchical_memsw_limit 9223372036854771712\r\ntotal_cache 61927424\r\ntotal_rss 96665600\r\ntotal_rss_huge 2097152\r\ntotal_shmem 12288\r\ntotal_mapped_file 45645824\r\ntotal_dirty 28672\r\ntotal_writeback 0\r\ntotal_swap 0\r\ntotal_pgpgin 49249\r\ntotal_pgpgout 11046\r\ntotal_pgfault 30832\r\ntotal_pgmajfault 536\r\ntotal_inactive_anon 98697216\r\ntotal_active_anon 20480\r\ntotal_inactive_file 57602048\r\ntotal_active_file 4313088\r\ntotal_unevictable 0`\r\n\r\n-\u003e **shmem 12288**\r\n\r\nDotnet 7\r\n`payment_user@3c57bc105917:/sys/fs/cgroup/memory$ cat memory.stat\r\ncache 48123904\r\nrss 116064256\r\nrss_huge 8388608\r\n**shmem 47308800**\r\nmapped_file 47874048\r\ndirty 53248\r\nwriteback 0\r\nswap 0\r\npgpgin 40473\r\npgpgout 2437\r\npgfault 71286\r\npgmajfault 8\r\ninactive_anon 159879168\r\nactive_anon 5521408\r\ninactive_file 815104\r\nactive_file 0\r\nunevictable 0\r\nhierarchical_memory_limit 9223372036854771712\r\nhierarchical_memsw_limit 9223372036854771712\r\ntotal_cache 48123904\r\ntotal_rss 116064256\r\ntotal_rss_huge 8388608\r\ntotal_shmem 47308800\r\ntotal_mapped_file 47874048\r\ntotal_dirty 53248\r\ntotal_writeback 0\r\ntotal_swap 0\r\ntotal_pgpgin 40473\r\ntotal_pgpgout 2437\r\ntotal_pgfault 71286\r\ntotal_pgmajfault 8\r\ntotal_inactive_anon 159879168\r\ntotal_active_anon 5521408\r\ntotal_inactive_file 815104\r\ntotal_active_file 0\r\ntotal_unevictable 0`\r\n\r\n--\u003e **shmem 47308800**\r\n\r\nIs this an issue in the dotnet 7 runtime? Or any tips to get rid of this behavior? \r\n\r\nThanks!\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earnecornillie-gantner\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `tenet-performance`, `area-GC-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-17T14:38:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjeOC",
                                           "createdAt":  "2023-02-17T22:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "share memory usage is not from the GC heap (so I\u0027m removing the GC label). @janvorli reminded me of the shared memory usage of W^X. if you disable W^X by setting the DOTNET_EnableWriteXorExecute env var to 0 and the shmem drops to the .net 6 level, you would have confirmed it\u0027s from W^X. ",
                                           "updatedAt":  "2023-02-17T22:43:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VpK6w",
                                           "createdAt":  "2023-02-20T11:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arnecornillie-gantner",
                                           "body":  "Hi @Maoni0 \r\n\r\nBy setting the \"DOTNET_EnableWriteXorExecute\" variable to \"0\" the shared memory is back at the level of .net6.\r\n\r\nThanks! ",
                                           "updatedAt":  "2023-02-20T11:55:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "High shmem usage in dotnet 7 runtime docker",
        "labels":  [
                       "question",
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82825",
        "createdAt":  "2023-03-01T11:40:00Z",
        "number":  82825,
        "author":  "SheepRock",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0p6GQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "psychotoad",
                                            "createdAt":  "2023-12-14T21:25:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-03-17T23:26:54Z",
        "body":  "### Description\r\n\r\nFrom [this StackOverflow question](https://stackoverflow.com/questions/75601660/why-this-simple-struct-returns-different-hash-codes-for-objects-that-are-equal), two instances of a structure with a DateTime property, with the only difference being the `DateTime.Kind` returns `true` for the `Equal` method but have different HashCodes.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nvar d1 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Unspecified);\r\nvar d2 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Local);\r\n\r\nvar foo1 = new Foo { d = d1 };\r\nvar foo2 = new Foo { d = d2 };\r\n\r\nConsole.WriteLine($\"d1.Equals(d2): {d1.Equals(d2)}\");\r\nConsole.WriteLine($\"d1.GetHashCode() == d2.GetHashCode(): {d1.GetHashCode() == d2.GetHashCode()}\");\r\nConsole.WriteLine($\"foo1.Equals(foo2): {foo1.Equals(foo2)}\");\r\nConsole.WriteLine($\"foo1.GetHashCode() == foo2.GetHashCode(): {foo1.GetHashCode() == foo2.GetHashCode()}\");\r\n\r\nstruct Foo {\r\n    public DateTime d;\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\nd1.Equals(d2): True\r\nd1.GetHashCode() == d2.GetHashCode(): True\r\nfoo1.Equals(foo2): True\r\nfoo1.GetHashCode() == foo2.GetHashCode(): True\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\nd1.Equals(d2): True\r\nd1.GetHashCode() == d2.GetHashCode(): True\r\nfoo1.Equals(foo2): True\r\nfoo1.GetHashCode() == foo2.GetHashCode(): False\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 7 (but also previous versions)\r\n- Windows 11\r\n- x64\r\n- Appears to be global\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVogn-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WbMrH",
                                           "createdAt":  "2023-03-01T11:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-01T11:40:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wb8Zt",
                                           "createdAt":  "2023-03-01T13:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFrom [this StackOverflow question](https://stackoverflow.com/questions/75601660/why-this-simple-struct-returns-different-hash-codes-for-objects-that-are-equal), two instances of a structure with a DateTime property, with the only difference being the `DateTime.Kind` returns `true` for the `Equal` method but have different HashCodes.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nvar d1 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Unspecified);\r\nvar d2 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Local);\r\n\r\nvar foo1 = new Foo { d = d1 };\r\nvar foo2 = new Foo { d = d2 };\r\n\r\nConsole.WriteLine($\"d1.Equals(d2): {d1.Equals(d2)}\");\r\nConsole.WriteLine($\"d1.GetHashCode() == d2.GetHashCode(): {d1.GetHashCode() == d2.GetHashCode()}\");\r\nConsole.WriteLine($\"foo1.Equals(foo2): {foo1.Equals(foo2)}\");\r\nConsole.WriteLine($\"foo1.GetHashCode() == foo2.GetHashCode(): {foo1.GetHashCode() == foo2.GetHashCode()}\");\r\n\r\nstruct Foo {\r\n    public DateTime d;\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\nd1.Equals(d2): True\r\nd1.GetHashCode() == d2.GetHashCode(): True\r\nfoo1.Equals(foo2): True\r\nfoo1.GetHashCode() == foo2.GetHashCode(): True\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\nd1.Equals(d2): True\r\nd1.GetHashCode() == d2.GetHashCode(): True\r\nfoo1.Equals(foo2): True\r\nfoo1.GetHashCode() == foo2.GetHashCode(): False\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 7 (but also previous versions)\r\n- Windows 11\r\n- x64\r\n- Appears to be global\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSheepRock\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-01T13:36:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WeiiA",
                                           "createdAt":  "2023-03-01T21:05:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This looks like a regression from the .NET Framework it worth fixing it. ",
                                           "updatedAt":  "2023-03-01T21:05:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WenBZ",
                                           "createdAt":  "2023-03-01T21:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e This looks like a regression from the .NET Framework\r\n\r\nThe repro prints True, True, True, False on both .NET Core and .NET Framework.",
                                           "updatedAt":  "2023-03-01T21:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5We1yx",
                                           "createdAt":  "2023-03-01T22:14:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "You are right @stephentoub, I misread the code. A quick look at the issue, it is from how we calculate the hash code for the value types.  https://github.com/dotnet/runtime/blob/ef0241ed9316bc4343e715daca4d88c1ff90231b/src/coreclr/vm/comutilnative.cpp#L1877. This is not specific to `DateTime`.",
                                           "updatedAt":  "2023-03-01T22:17:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wh7QG",
                                           "createdAt":  "2023-03-02T11:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "synek317",
                                           "body":  "\u003e The repro prints True, True, True, False on both .NET Core and .NET Framework.\r\n\r\nIndeed ([dotnet fiddle](https://dotnetfiddle.net/Em8XA5)).\r\n\r\nOn the other hand, the question I posted on SO was a simplified case. I encountered this issue when I was using a struct with `DateTime`as a key in a Dictionary. And there is something that I don\u0027t understand, because this code:\r\n\r\n\t\tvar d1 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Unspecified);\r\n\t\tvar d2 = new DateTime(2023, 2, 28, 0, 0, 0, DateTimeKind.Local);\r\n\r\n\t\tvar foo1 = new Foo { d = d1 };\r\n\t\tvar foo2 = new Foo { d = d2 }; \r\n\r\n\t \tvar dict = new Dictionary\u003cFoo, int\u003e { { foo1, 42 } };\r\n\t\t\r\n\t\tConsole.WriteLine(\"Contains foo1: {0}\", dict.ContainsKey(foo1));\r\n\t\tConsole.WriteLine(\"Contains foo2: {0}\", dict.ContainsKey(foo2));\r\n\r\nPrints \"True, True\" on .NET 4.7.2 ([fiddle](https://dotnetfiddle.net/vZiSSS)) but \"True, False\" on .NET 7 and earlier .NET core versions ([fiddle](https://dotnetfiddle.net/THIKcb)).\r\n",
                                           "updatedAt":  "2023-03-02T11:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WiCf6",
                                           "createdAt":  "2023-03-02T12:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "synek317",
                                           "body":  "One more update / test case:\r\n\r\nI replaced `DateTime` with another struct with overridden `Equals` and `GetHashCode`. As  @tarekgh already stated, it turned out to be not `DateTime`-specific. BUT the `.Contains` test I provided above gives different results on .NET 4.7.2 (It prints \"True, False\", just like on .NET 7).\r\n\r\n[.NET 4.7.2 fiddle](https://dotnetfiddle.net/iplmd4), [.NET 7 fiddle](https://dotnetfiddle.net/1SPjHk)",
                                           "updatedAt":  "2023-03-02T12:06:36Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Equal method returns true but Hashcodes are different ",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83983",
        "createdAt":  "2023-03-27T17:29:52Z",
        "number":  83983,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-03T15:19:07Z",
        "body":  "https://github.com/dotnet/runtime/pull/83784 added initial support for thread suspend/restore of AVX512 state for Linux and did most of the work for MacOS.\r\n\r\nHowever, MacOS ended up being disabled due to additional complexities in how AVX-512 support works on such systems.\r\n\r\nWe should do some minimal additional investigation to determine if AVX-512 support can in fact be enabled for OSX. The believed most likely scenario is that our hardware exception handler may be observing the fault and surfacing it regardless.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWIvnNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Yi8jp",
                                           "createdAt":  "2023-03-27T17:34:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Since Apple gave up on x86 architecture, does it make any sense? ",
                                           "updatedAt":  "2023-03-27T17:34:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yi-c2",
                                           "createdAt":  "2023-03-27T17:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Its still worth it to do the minimal additional investigation to try and support enablement IMO.\r\n\r\nThere is quite a bit of existing hardware that has support, including in our own CI lab. They likewise still support x64 emulation and while they aren\u0027t actively producing new x64 machines today, we can\u0027t really say they won\u0027t have other support in the future.\r\n\r\nThat being said, I don\u0027t want to spend significant additional time on this. I really just want to complete the investigation based on the suspected blocking issue as if it is just that, then the rest of the logic to support AVX-512 on OSX already exists. If that doesn\u0027t resolve the issue, then this issue can be closed with a note that adding the support is low-priority and with a breakdown of where things are today.",
                                           "updatedAt":  "2023-03-27T17:40:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "MacOS save/restore for AVX-512 state",
        "labels":  [
                       "area-VM-coreclr",
                       "avx512"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84309",
        "createdAt":  "2023-04-04T13:55:45Z",
        "number":  84309,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:20Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Windows1019042\",\"Queue\":\"OwlWindows\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2023-03-31T23:04:55\",\"IsRegression\":true} --\u003e\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Int32\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseSpan(value%3a%20%224%22).html\u003e) | 9.97 ns | 11.69 ns | 1.17 | 0.03 | False | | |\r\n[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.TryFormat(value%3a%20-2147483648).html\u003e) | 14.68 ns | 15.75 ns | 1.07 | 0.04 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.Parse(value%3a%20%2212345%22).html\u003e) | 13.26 ns | 15.47 ns | 1.17 | 0.07 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.TryParse(value%3a%20%224%22).html\u003e) | 10.31 ns | 11.58 ns | 1.12 | 0.08 | False | | |\r\n[ParseHex - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseHex(value%3a%20%223039%22).html\u003e) | 12.11 ns | 14.24 ns | 1.18 | 0.07 | False | | |\r\n[ParseHex - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseHex(value%3a%20%224%22).html\u003e) | 9.46 ns | 11.02 ns | 1.16 | 0.05 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.Parse(value%3a%20%224%22).html\u003e) | 9.99 ns | 11.57 ns | 1.16 | 0.03 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseSpan(value%3a%20%2212345%22).html\u003e) | 13.20 ns | 15.71 ns | 1.19 | 0.04 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.TryParse(value%3a%20%2212345%22).html\u003e) | 14.28 ns | 16.21 ns | 1.14 | 0.04 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.TryParse(value%3a%20%22-2147483648%22).html\u003e) | 18.65 ns | 19.78 ns | 1.06 | 0.05 | False | | |\r\n[TryParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.TryParseSpan(value%3a%20%224%22).html\u003e) | 9.85 ns | 11.47 ns | 1.16 | 0.05 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseSpan(value%3a%20%222147483647%22).html\u003e) | 17.59 ns | 19.21 ns | 1.09 | 0.05 | False | | |\r\n[ParseHex - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int32.ParseHex(value%3a%20%2280000000%22).html\u003e) | 16.16 ns | 17.18 ns | 1.06 | 0.10 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_6.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32_7.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int32.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Int32*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Int32.ParseSpan(value: \"4\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.688708865447222 \u003e 10.466679098758487.\r\nIsChangePoint: Marked as a change because one of 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -56.410182187565226 (T) = (0 -11.690792342404619) / Math.Sqrt((0.00877915243491243 / (51)) + (0.00926574318182625 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.16759017863586367 = (10.012753238523622 - 11.690792342404619) / 10.012753238523622 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.TryFormat(value: -2147483648)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.746826834231344 \u003e 15.418154377879766.\r\nIsChangePoint: Marked as a change because one of 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -55.76974429073933 (T) = (0 -15.769167392535222) / Math.Sqrt((0.007577692488300606 / (51)) + (0.0032879355916948937 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.07440528039393608 = (14.67711270625306 - 15.769167392535222) / 14.67711270625306 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.Parse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.473824406706933 \u003e 13.92204567809555.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -35.26938641559637 (T) = (0 -15.454120772523925) / Math.Sqrt((0.17338898459872235 / (50)) + (0.0024050793798706224 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.15966565206203892 = (13.326358976869285 - 15.454120772523925) / 13.326358976869285 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.TryParse(value: \"4\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.582163809223998 \u003e 10.885061808084217.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -32.8466236274925 (T) = (0 -11.617203137751785) / Math.Sqrt((0.06781516149511323 / (51)) + (0.0007936803396629075 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.11766435079279551 = (10.394178833306553 - 11.617203137751785) / 10.394178833306553 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.ParseHex(value: \"3039\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.240884936053309 \u003e 12.779108186613088.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -20.876151403166297 (T) = (0 -14.351741318983448) / Math.Sqrt((0.0015815254723135907 / (50)) + (0.15322434081144307 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.17979563840871116 = (12.164599403283809 - 14.351741318983448) / 12.164599403283809 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.ParseHex(value: \"4\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.023042581503429 \u003e 9.933420691759594.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:36:59 AM, 3/6/2023 9:56:15 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -52.60721277435311 (T) = (0 -11.00688735589992) / Math.Sqrt((0.038587744567394194 / (51)) + (0.0008351954206278338 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.15814821459565184 = (9.503867654575448 - 11.00688735589992) / 9.503867654575448 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.Parse(value: \"4\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.568118418893523 \u003e 10.481737578087117.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -81.78573547722551 (T) = (0 -11.54019415315461) / Math.Sqrt((0.014376755050317401 / (51)) + (0.000635429806198543 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.14796552315920988 = (10.052735835999593 - 11.54019415315461) / 10.052735835999593 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.ParseSpan(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.714030873462416 \u003e 13.857961742048612.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -83.47304129278412 (T) = (0 -15.635804013216335) / Math.Sqrt((0.017266169827918204 / (50)) + (0.006390503454716811 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.17808744512278982 = (13.272193059986854 - 15.635804013216335) / 13.272193059986854 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.TryParse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.21274007426768 \u003e 15.008893429158709.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 8:17:12 PM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -46.24970461378922 (T) = (0 -16.15166053643448) / Math.Sqrt((0.006338051767119471 / (51)) + (0.020024769540812552 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1272717460769952 = (14.32809843114021 - 16.15166053643448) / 14.32809843114021 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.TryParse(value: \"-2147483648\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 19.77922639320121 \u003e 19.579912121026002.\r\nIsChangePoint: Marked as a change because one of 3/2/2023 11:02:42 PM, 3/3/2023 8:38:01 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -24.785669205753127 (T) = (0 -19.738914559926606) / Math.Sqrt((0.07161481822884386 / (51)) + (0.01335057152273026 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.06493139588605036 = (18.535386069168634 - 19.738914559926606) / 18.535386069168634 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.TryParseSpan(value: \"4\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.469157858961092 \u003e 10.328142708447.\r\nIsChangePoint: Marked as a change because one of 3/4/2023 1:07:20 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -31.42246680606014 (T) = (0 -11.536197676481406) / Math.Sqrt((0.09080966417371786 / (51)) + (0.012003067391175662 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.16265229421272892 = (9.922311024460631 - 11.536197676481406) / 9.922311024460631 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.ParseSpan(value: \"2147483647\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 19.214825196195655 \u003e 18.488435937158833.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -19.617783599463458 (T) = (0 -19.096084973431967) / Math.Sqrt((0.029500156566202456 / (50)) + (0.06954758952993383 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.08293856273351438 = (17.63358110106479 - 19.096084973431967) / 17.63358110106479 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int32.ParseHex(value: \"80000000\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 17.181791918059005 \u003e 16.91219654226632.\r\nIsChangePoint: Marked as a change because one of 3/30/2023 11:40:48 AM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -7.885205162003718 (T) = (0 -17.143739246544794) / Math.Sqrt((0.0179724762963288 / (42)) + (0.30276527469898346 / (23))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (42) + (23) - 2, .025) and -0.056660249974806405 = (16.224457432702277 - 17.143739246544794) / 16.224457432702277 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Enum\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%20OtherNotAssigned).html\u003e) | 10.14 ns | 11.48 ns | 1.13 | 0.11 | False | | |\r\n[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%2042).html\u003e) | 10.84 ns | 12.25 ns | 1.13 | 0.15 | False | | |\r\n[ToString_Format_NonFlags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_Format_NonFlags(value%3a%207%2c%20format%3a%20%22G%22).html\u003e) | 12.56 ns | 14.01 ns | 1.12 | 0.08 | False | | |\r\n[TryParseGeneric_Flags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.TryParseGeneric_Flags(text%3a%20%22Red%2c%20Orange%2c%20Yellow%2c%20Green%2c%20Blue%22).html\u003e) | 88.88 ns | 111.17 ns | 1.25 | 0.19 | False | | |\r\n[ToString_NonFlags_Small - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Small(value%3a%20TopDirectoryOnly).html\u003e) | 10.09 ns | 11.46 ns | 1.14 | 0.16 | False | | |\r\n[ToString_Format_NonFlags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_Format_NonFlags(value%3a%20Tuesday%2c%20format%3a%20%22d%22).html\u003e) | 10.00 ns | 11.86 ns | 1.19 | 0.12 | False | | |\r\n[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%20Control).html\u003e) | 10.10 ns | 11.49 ns | 1.14 | 0.12 | False | | |\r\n[Parse_Flags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.Parse_Flags(text%3a%20%22Red%2c%20Orange%2c%20Yellow%2c%20Green%2c%20Blue%22).html\u003e) | 157.90 ns | 179.23 ns | 1.14 | 0.19 | False | | |\r\n[ToString_Format_NonFlags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_Format_NonFlags(value%3a%20Saturday%2c%20format%3a%20%22D%22).html\u003e) | 10.01 ns | 11.85 ns | 1.18 | 0.11 | False | | |\r\n[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%20Format).html\u003e) | 10.11 ns | 11.48 ns | 1.14 | 0.10 | False | | |\r\n[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%20UppercaseLetter).html\u003e) | 10.13 ns | 11.48 ns | 1.13 | 0.10 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_6.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_7.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_8.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_9.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_10.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum_11.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Enum.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Enum*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: OtherNotAssigned)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.477743090180326 \u003e 10.620627328806549.\r\nIsChangePoint: Marked as a change because one of 1/28/2023 1:22:52 PM, 2/9/2023 12:40:40 PM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -21.739933815191968 (T) = (0 -11.580136466288238) / Math.Sqrt((0.013095526585581234 / (51)) + (0.05598872919067029 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.13956734377791002 = (10.161871107939618 - 11.580136466288238) / 10.161871107939618 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: 42)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.252321578628768 \u003e 11.378963840584834.\r\nIsChangePoint: Marked as a change because one of 1/20/2023 8:02:54 AM, 1/20/2023 7:19:11 PM, 1/27/2023 7:12:54 PM, 2/9/2023 12:40:40 PM, 2/28/2023 10:21:25 PM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -19.089671164019485 (T) = (0 -12.327909911975636) / Math.Sqrt((0.17241801039654583 / (51)) + (0.015202959348851878 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.11543729380115926 = (11.052086908413196 - 12.327909911975636) / 11.052086908413196 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_Format_NonFlags(value: 7, format: \"G\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.01468868313218 \u003e 13.217613590203857.\r\nIsChangePoint: Marked as a change because one of 2/4/2023 4:58:40 AM, 2/10/2023 2:43:15 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -31.117484228373414 (T) = (0 -13.965131916815794) / Math.Sqrt((0.0696975925990196 / (51)) + (0.006900354313144859 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.10629929551120117 = (12.623285555255421 - 13.965131916815794) / 12.623285555255421 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.TryParseGeneric_Flags(text: \"Red, Orange, Yellow, Green, Blue\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 111.16998847117065 \u003e 94.60191586587516.\r\nIsChangePoint: Marked as a change because one of 2/13/2023 6:54:14 PM, 4/1/2023 8:54:51 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -31.393643662698512 (T) = (0 -112.55804387195622) / Math.Sqrt((5.706922863266879 / (59)) + (2.6877683246606523 / (6))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (59) + (6) - 2, .025) and -0.2591993726879241 = (89.3885800083322 - 112.55804387195622) / 89.3885800083322 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Small(value: TopDirectoryOnly)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.455369828081585 \u003e 10.592308911809914.\r\nIsChangePoint: Marked as a change because one of 2/28/2023 2:11:18 PM, 3/6/2023 11:14:52 AM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -24.003934499110787 (T) = (0 -11.516290051845814) / Math.Sqrt((0.06719182866463916 / (51)) + (0.02495055921120835 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1312796868460118 = (10.179878756554917 - 11.516290051845814) / 10.179878756554917 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_Format_NonFlags(value: Tuesday, format: \"d\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.859687626413434 \u003e 10.497227058746534.\r\nIsChangePoint: Marked as a change because one of 2/10/2023 2:43:15 PM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -61.16153112536213 (T) = (0 -11.792344882659432) / Math.Sqrt((0.016694024814024856 / (50)) + (0.00756531635244287 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.1811328832946178 = (9.983927337427273 - 11.792344882659432) / 9.983927337427273 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: Control)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.491967725925187 \u003e 10.612801408270968.\r\nIsChangePoint: Marked as a change because one of 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -12.481714836725216 (T) = (0 -11.608914591840902) / Math.Sqrt((0.008721698510633617 / (51)) + (0.1904568261914036 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.14441531475224403 = (10.143969975055892 - 11.608914591840902) / 10.143969975055892 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.Parse_Flags(text: \"Red, Orange, Yellow, Green, Blue\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 179.22783919631578 \u003e 169.39809577042786.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 3/8/2023 9:36:36 PM, 3/14/2023 8:42:09 PM, 4/1/2023 8:54:51 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -15.294455306880755 (T) = (0 -182.01855375935048) / Math.Sqrt((36.09216494860579 / (59)) + (6.8407397399840555 / (5))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (59) + (5) - 2, .025) and -0.1340861033255226 = (160.49800207022267 - 182.01855375935048) / 160.49800207022267 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_Format_NonFlags(value: Saturday, format: \"D\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.847602953628266 \u003e 10.505286690906738.\r\nIsChangePoint: Marked as a change because one of 2/10/2023 2:43:15 PM, 3/10/2023 8:23:08 AM, 3/17/2023 1:30:52 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -77.57545122517804 (T) = (0 -11.833593529075882) / Math.Sqrt((0.011592412502870613 / (51)) + (0.00504652940784024 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.18896424935715012 = (9.952858999313122 - 11.833593529075882) / 9.952858999313122 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: Format)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.483230696456456 \u003e 10.617717865362032.\r\nIsChangePoint: Marked as a change because one of 1/26/2023 7:47:24 AM, 1/26/2023 4:17:33 PM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -42.73604998518165 (T) = (0 -11.528632119590283) / Math.Sqrt((0.006945038930966362 / (51)) + (0.01276798776991649 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.13638238150909004 = (10.145028915601912 - 11.528632119590283) / 10.145028915601912 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: UppercaseLetter)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.484484836312514 \u003e 10.62998815438435.\r\nIsChangePoint: Marked as a change because one of 1/28/2023 1:22:52 PM, 2/9/2023 12:40:40 PM, 2/15/2023 9:41:15 PM, 2/16/2023 1:21:52 PM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -59.596233410074056 (T) = (0 -11.492007642872423) / Math.Sqrt((0.024098634575664857 / (51)) + (0.00024873887296769984 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.12972438517082555 = (10.172399386718308 - 11.492007642872423) / 10.172399386718308 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkB18Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZL1G8",
                                           "createdAt":  "2023-04-04T13:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Int64\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int64.TryParse(value%3a%20%2212345%22).html\u003e) | 13.93 ns | 15.36 ns | 1.10 | 0.06 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int64.Parse(value%3a%20%2212345%22).html\u003e) | 13.70 ns | 15.45 ns | 1.13 | 0.06 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int64.ParseSpan(value%3a%20%2212345%22).html\u003e) | 14.02 ns | 16.28 ns | 1.16 | 0.04 | False | | |\r\n[TryParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int64.TryParseSpan(value%3a%20%2212345%22).html\u003e) | 13.98 ns | 15.63 ns | 1.12 | 0.05 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int64_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int64_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int64_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int64_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int64.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Int64*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Int64.TryParse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.359675145729328 \u003e 14.618602836633546.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -29.40712976477954 (T) = (0 -15.271047001721797) / Math.Sqrt((0.045960800440038224 / (51)) + (0.015453844009869738 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.09653241812307302 = (13.926671705576332 - 15.271047001721797) / 13.926671705576332 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int64.Parse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.447219742533868 \u003e 14.378578562385584.\r\nIsChangePoint: Marked as a change because one of 3/4/2023 4:50:07 AM, 3/20/2023 10:25:17 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -69.804535865018 (T) = (0 -15.37983529189752) / Math.Sqrt((0.004448213177135441 / (50)) + (0.006796519969690427 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.12205786241324375 = (13.706811214547923 - 15.37983529189752) / 13.706811214547923 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int64.ParseSpan(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.283247435485844 \u003e 14.68492145432828.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -62.119336581759384 (T) = (0 -16.241233720803418) / Math.Sqrt((0.0180037501441567 / (51)) + (0.013092332895419499 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.15911996802486333 = (14.011693499231514 - 16.241233720803418) / 14.011693499231514 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int64.TryParseSpan(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.627578787445515 \u003e 14.680099882666777.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -16.54459943616108 (T) = (0 -15.874962440538766) / Math.Sqrt((0.29578810535886235 / (51)) + (0.0745643015792356 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.12350481346511712 = (14.129857077850122 - 15.874962440538766) / 14.129857077850122 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.Tests.Perf_PriorityQueue\u0026lt;String, String\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Enumerate - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.Tests.Perf_PriorityQueue(String%2c%20String).Enumerate(Size%3a%201000).html\u003e) | 5.32 μs | 5.88 μs | 1.11 | 0.07 | False | | |\r\n[K_Max_Elements - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.Tests.Perf_PriorityQueue(String%2c%20String).K_Max_Elements(Size%3a%201000).html\u003e) | 57.17 μs | 61.63 μs | 1.08 | 0.09 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_PriorityQueue(String,%20String)_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_PriorityQueue(String,%20String)_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_PriorityQueue(String,%20String).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.Tests.Perf_PriorityQueue\u0026lt;String, String\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.Tests.Perf_PriorityQueue\u0026lt;String, String\u0026gt;.Enumerate(Size: 1000)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 5.876700827378714 \u003e 5.289348503024194.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:36:59 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -26.408581285198036 (T) = (0 -5873.5253299252245) / Math.Sqrt((24479.386228662945 / (51)) + (6.223090114022593 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.10932547911797089 = (5294.681714689622 - 5873.5253299252245) / 5294.681714689622 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Collections.Tests.Perf_PriorityQueue\u0026lt;String, String\u0026gt;.K_Max_Elements(Size: 1000)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 61.62505085301838 \u003e 60.009783674518914.\r\nIsChangePoint: Marked as a change because one of 3/1/2023 11:57:24 AM, 3/5/2023 11:54:18 PM, 3/14/2023 8:42:09 PM, 3/17/2023 1:30:52 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -22.211811156023597 (T) = (0 -61508.94956057811) / Math.Sqrt((405391.2277816038 / (51)) + (392814.10302282084 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.07356431322796413 = (57294.145122647256 - 61508.94956057811) / 57294.145122647256 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Single\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Single.ToStringWithFormat(value%3a%20-3.4028235E%2b38%2c%20format%3a%20%22G%22).html\u003e) | 143.17 ns | 151.33 ns | 1.06 | 0.04 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Single.TryParse(value%3a%20%2212345%22).html\u003e) | 67.12 ns | 72.03 ns | 1.07 | 0.06 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Single_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Single_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Single.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Single*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Single.ToStringWithFormat(value: -3.4028235E+38, format: \"G\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 151.3340490496402 \u003e 150.48367979824198.\r\nIsChangePoint: Marked as a change because one of 2/9/2023 4:10:34 PM, 2/16/2023 4:50:02 PM, 2/23/2023 8:54:44 PM, 3/8/2023 9:36:36 PM, 3/17/2023 1:30:52 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -34.323155027565114 (T) = (0 -151.36368493895864) / Math.Sqrt((2.132808364150358 / (51)) + (0.12845605627028128 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.05397078714801393 = (143.61278963769035 - 151.36368493895864) / 143.61278963769035 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Single.TryParse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 72.02547704225262 \u003e 69.67376916844914.\r\nIsChangePoint: Marked as a change because one of 2/1/2023 8:39:12 AM, 2/9/2023 4:10:34 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -31.092457726790432 (T) = (0 -72.14985284628985) / Math.Sqrt((1.0533201814876276 / (51)) + (0.2543252049445781 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.09278525531744043 = (66.02381620287439 - 72.14985284628985) / 66.02381620287439 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [ef6b6d581fbcdf65516d59c0597288755d46cb57](https://github.com/dotnet/runtime/commit/ef6b6d581fbcdf65516d59c0597288755d46cb57)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/ef6b6d581fbcdf65516d59c0597288755d46cb57...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_SByte\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_SByte.Parse(value%3a%20%22127%22).html\u003e) | 12.73 ns | 14.44 ns | 1.13 | 0.06 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_SByte.TryParse(value%3a%20%22-128%22).html\u003e) | 13.22 ns | 14.65 ns | 1.11 | 0.03 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_SByte.Parse(value%3a%20%22-128%22).html\u003e) | 13.30 ns | 14.32 ns | 1.08 | 0.03 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_SByte.TryParse(value%3a%20%22127%22).html\u003e) | 12.72 ns | 14.84 ns | 1.17 | 0.02 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_SByte_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_SByte_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_SByte_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_SByte_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_SByte.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-8e552dc1-5e74-4313-88ba-7e99d94df10a25bcdd7bcab4a7ab1/281142b8-3a97-476d-83b4-292ed05b3ef4.zip?sv=2021-08-06\u0026se=2023-04-30T14%3A56%3A48Z\u0026sr=c\u0026sp=rl\u0026sig=T%2BC0fwuOD5ca7%2BPW05L2q8XGItEIUGF73xS24K2nrko%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_SByte*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-8e552dc1-5e74-4313-88ba-7e99d94df10a25bcdd7bcab4a7ab1/281142b8-3a97-476d-83b4-292ed05b3ef4.zip?sv=2021-08-06\u0026se=2023-04-30T14%3A56%3A48Z\u0026sr=c\u0026sp=rl\u0026sig=T%2BC0fwuOD5ca7%2BPW05L2q8XGItEIUGF73xS24K2nrko%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_SByte.Parse(value: \"127\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.441193594649302 \u003e 13.361547554986792.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -96.82072120541476 (T) = (0 -14.50794729771744) / Math.Sqrt((0.00022943381766192295 / (50)) + (0.004690215298920284 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.14023011297468993 = (12.723701235944711 - 14.50794729771744) / 12.723701235944711 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_SByte.TryParse(value: \"-128\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.64661666709548 \u003e 13.935910195953323.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -107.14839162974732 (T) = (0 -14.667912340835093) / Math.Sqrt((0.0010621362251922656 / (51)) + (0.0021194791050963497 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1060284388245703 = (13.261785887190559 - 14.667912340835093) / 13.261785887190559 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_SByte.Parse(value: \"-128\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.316776339156545 \u003e 13.92443660661359.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -94.30522313674766 (T) = (0 -14.379885959890771) / Math.Sqrt((0.000732488234332827 / (51)) + (0.0017910241115164332 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.0848689988622962 = (13.254951496421208 - 14.379885959890771) / 13.254951496421208 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_SByte.TryParse(value: \"127\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.836590590528166 \u003e 13.350834842936766.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -92.59572579723935 (T) = (0 -14.808084491516965) / Math.Sqrt((0.0006047422806960678 / (51)) + (0.00700357855954968 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.16483060741346162 = (12.712650575347366 - 14.808084491516965) / 12.712650575347366 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.Tests.Add_Remove_SteadyState\u0026lt;Int32\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ImmutableStack - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.Tests.Add_Remove_SteadyState(Int32).ImmutableStack(Count%3a%20512).html\u003e) | 9.14 ns | 11.83 ns | 1.29 | 0.08 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Add_Remove_SteadyState(Int32)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Add_Remove_SteadyState(Int32).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.Tests.Add_Remove_SteadyState\u0026lt;Int32\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.Tests.Add_Remove_SteadyState\u0026lt;Int32\u0026gt;.ImmutableStack(Count: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.825958454613517 \u003e 9.606479859828996.\r\nIsChangePoint: Marked as a change because one of 2/28/2023 10:21:25 PM, 3/4/2023 1:07:20 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -300.53077166191713 (T) = (0 -11.844232063144336) / Math.Sqrt((0.0023850061468565324 / (51)) + (0.00046611577435690316 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.2937142053182969 = (9.155215282057029 - 11.844232063144336) / 9.155215282057029 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Utf8JsonReaderCommentsTests\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Utf8JsonReaderCommentParsing - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Tests.Utf8JsonReaderCommentsTests.Utf8JsonReaderCommentParsing(CommentHandling%3a%20Skip%2c%20SegmentSize%3a%20100%2c%20TestCase%3a%20ShortSingleLine).html\u003e) | 113.18 ns | 122.75 ns | 1.08 | 0.04 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Json.Tests.Utf8JsonReaderCommentsTests.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Text.Json.Tests.Utf8JsonReaderCommentsTests*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Json.Tests.Utf8JsonReaderCommentsTests.Utf8JsonReaderCommentParsing(CommentHandling: Skip, SegmentSize: 100, TestCase: ShortSingleLine)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 122.74638943029683 \u003e 118.87520033623785.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 3/6/2023 11:14:52 AM, 3/17/2023 9:25:32 PM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -84.88978425794055 (T) = (0 -122.61677054773149) / Math.Sqrt((0.21101973618703268 / (51)) + (0.10501011353323006 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.0807166988034651 = (113.45875443905776 - 122.61677054773149) / 113.45875443905776 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_UInt64\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt64.Parse(value%3a%20%2212345%22).html\u003e) | 13.86 ns | 15.25 ns | 1.10 | 0.03 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt64.ParseSpan(value%3a%20%220%22).html\u003e) | 9.72 ns | 11.54 ns | 1.19 | 0.05 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt64.ParseSpan(value%3a%20%2212345%22).html\u003e) | 13.97 ns | 15.53 ns | 1.11 | 0.07 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt64.Parse(value%3a%20%220%22).html\u003e) | 10.57 ns | 11.60 ns | 1.10 | 0.06 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt64_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt64_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt64_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt64_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt64.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_UInt64*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_UInt64.Parse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.245420528548582 \u003e 14.547311449215135.\r\nIsChangePoint: Marked as a change because one of 3/4/2023 7:07:20 AM, 3/4/2023 6:35:49 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -54.38554141489324 (T) = (0 -15.204680245645234) / Math.Sqrt((0.00277130411786626 / (50)) + (0.0080747507415261 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.09882326373085536 = (13.837239115251798 - 15.204680245645234) / 13.837239115251798 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt64.ParseSpan(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.5413350870634 \u003e 10.184888730940775.\r\nIsChangePoint: Marked as a change because one of 3/4/2023 1:07:20 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -81.5258446754297 (T) = (0 -11.544562107876368) / Math.Sqrt((0.018973206225982694 / (51)) + (0.0013032473841411618 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1796611826666629 = (9.786337193684297 - 11.544562107876368) / 9.786337193684297 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt64.ParseSpan(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.533426851698774 \u003e 14.622246116726311.\r\nIsChangePoint: Marked as a change because one of 1/25/2023 9:58:39 PM, 2/24/2023 9:01:57 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -17.478615307290834 (T) = (0 -15.480738351337964) / Math.Sqrt((0.3202511556737056 / (51)) + (0.010918767001293338 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.10480532723466378 = (14.012186554246956 - 15.480738351337964) / 14.012186554246956 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt64.Parse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.603700691137051 \u003e 10.760426353292551.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -29.9740370041322 (T) = (0 -11.57685511945331) / Math.Sqrt((0.08189002575985559 / (50)) + (0.002759424972438963 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.12474242747899206 = (10.292894476650781 - 11.57685511945331) / 10.292894476650781 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.CtorFromCollection\u0026lt;String\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Dictionary - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.CtorFromCollection(String).Dictionary(Size%3a%20512).html\u003e) | 3.79 μs | 4.06 μs | 1.07 | 0.04 | False | | |\r\n[FrozenDictionary - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.CtorFromCollection(String).FrozenDictionary(Size%3a%20512).html\u003e) | 3.88 μs | 4.17 μs | 1.08 | 0.01 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.CtorFromCollection(String)_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.CtorFromCollection(String)_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.CtorFromCollection(String).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.CtorFromCollection\u0026lt;String\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.CtorFromCollection\u0026lt;String\u0026gt;.Dictionary(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 4.058259487647024 \u003e 3.9785865888174112.\r\nIsChangePoint: Marked as a change because one of 1/28/2023 1:22:52 PM, 2/15/2023 2:23:18 PM, 3/3/2023 11:43:56 AM, 3/6/2023 11:14:52 AM, 3/17/2023 10:06:19 AM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -9.524841181112501 (T) = (0 -4055.7816429621266) / Math.Sqrt((21641.300901574188 / (51)) + (17.144841950007155 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.050913446741055565 = (3859.2917956653273 - 4055.7816429621266) / 3859.2917956653273 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Collections.CtorFromCollection\u0026lt;String\u0026gt;.FrozenDictionary(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 4.171568398326211 \u003e 4.145023619449192.\r\nIsChangePoint: Marked as a change because one of 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -11.275304798495535 (T) = (0 -4255.595856215176) / Math.Sqrt((11167.260584288479 / (51)) + (3568.842620573857 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.061207387824270675 = (4010.145335437371 - 4255.595856215176) / 4010.145335437371 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
                                           "updatedAt":  "2023-04-04T13:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZL1HE",
                                           "createdAt":  "2023-04-04T13:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_UInt16\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt16.TryParse(value%3a%20%220%22).html\u003e) | 9.75 ns | 11.55 ns | 1.18 | 0.09 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt16.TryParse(value%3a%20%2265535%22).html\u003e) | 14.86 ns | 16.56 ns | 1.11 | 0.04 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt16.TryParse(value%3a%20%2212345%22).html\u003e) | 14.88 ns | 16.59 ns | 1.11 | 0.03 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt16.Parse(value%3a%20%220%22).html\u003e) | 9.74 ns | 11.51 ns | 1.18 | 0.08 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt16_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt16_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt16_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt16_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt16.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_UInt16*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_UInt16.TryParse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.553786719767475 \u003e 10.233658144800637.\r\nIsChangePoint: Marked as a change because one of 1/21/2023 6:49:37 AM, 1/26/2023 7:47:24 AM, 3/6/2023 11:36:59 AM, 3/17/2023 1:30:52 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -42.2001341560258 (T) = (0 -11.525752786369212) / Math.Sqrt((0.0003401354729664951 / (51)) + (0.024674478078783407 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.18203504642876558 = (9.750770775529457 - 11.525752786369212) / 9.750770775529457 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt16.TryParse(value: \"65535\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.557623420088383 \u003e 15.597188930033216.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -57.91142311373443 (T) = (0 -16.54850432294151) / Math.Sqrt((0.0012206561363094328 / (51)) + (0.010737963956431047 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.11361409479345677 = (14.860178584584798 - 16.54850432294151) / 14.860178584584798 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt16.TryParse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.594613554997157 \u003e 15.603037058331012.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 2/28/2023 10:21:25 PM, 3/6/2023 11:14:52 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -66.25552302203623 (T) = (0 -16.483903288730648) / Math.Sqrt((0.0012294486619147317 / (51)) + (0.008079905810072265 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.10933235781180793 = (14.859300887288326 - 16.483903288730648) / 14.859300887288326 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt16.Parse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.514094388466733 \u003e 10.224861024942408.\r\nIsChangePoint: Marked as a change because one of 2/13/2023 6:54:14 PM, 3/23/2023 6:11:55 PM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -11.045996772649081 (T) = (0 -11.388809582706926) / Math.Sqrt((0.6561764870405911 / (51)) + (0.009498115630145283 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1272410184477846 = (10.10326043527884 - 11.388809582706926) / 10.10326043527884 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Int16\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int16.Parse(value%3a%20%220%22).html\u003e) | 10.32 ns | 11.81 ns | 1.14 | 0.06 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int16.TryParse(value%3a%20%2232767%22).html\u003e) | 14.69 ns | 16.79 ns | 1.14 | 0.05 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int16.TryParse(value%3a%20%22-32768%22).html\u003e) | 15.37 ns | 16.73 ns | 1.09 | 0.05 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Int16.TryParse(value%3a%20%220%22).html\u003e) | 10.56 ns | 12.03 ns | 1.14 | 0.11 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int16_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int16_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int16_3.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Int16.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Int16*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Int16.Parse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.807702229970813 \u003e 10.833400512382756.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 9:01:57 AM, 3/14/2023 8:42:09 PM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -49.87846566121579 (T) = (0 -11.74591324663958) / Math.Sqrt((0.027895762719651912 / (50)) + (0.0027353113563961164 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.1319247536143112 = (10.37693822768174 - 11.74591324663958) / 10.37693822768174 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int16.TryParse(value: \"32767\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.793352329659317 \u003e 15.299662702301157.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -52.91090934825167 (T) = (0 -16.590508581937907) / Math.Sqrt((0.0034713610404489502 / (51)) + (0.018953693161515822 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.13669913089907149 = (14.59533849455454 - 16.590508581937907) / 14.59533849455454 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int16.TryParse(value: \"-32768\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.72744498050256 \u003e 16.048964450576204.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 8:17:12 PM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -43.50612607537097 (T) = (0 -16.679039736786695) / Math.Sqrt((0.006308755549131219 / (51)) + (0.012810446506592878 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.09178424838859672 = (15.276864235222192 - 16.679039736786695) / 15.276864235222192 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Int16.TryParse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.03123366455412 \u003e 11.085916092306277.\r\nIsChangePoint: Marked as a change because one of 1/21/2023 6:49:37 AM, 1/25/2023 9:58:39 PM, 2/17/2023 9:53:52 PM, 2/21/2023 5:46:41 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -35.39083703617404 (T) = (0 -12.015835856846232) / Math.Sqrt((0.07072274028630372 / (51)) + (0.0030486935197085127 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.13375980553428454 = (10.598220009381764 - 12.015835856846232) / 10.598220009381764 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_BigInteger\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Ctor_ByteArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_BigInteger.Ctor_ByteArray(numberString%3a%20-2147483648).html\u003e) | 10.83 ns | 12.66 ns | 1.17 | 0.04 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_BigInteger_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_BigInteger.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Numerics.Tests.Perf_BigInteger*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_BigInteger.Ctor_ByteArray(numberString: -2147483648)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.65691642616098 \u003e 11.369427126563224.\r\nIsChangePoint: Marked as a change because one of 2/28/2023 10:21:25 PM, 3/5/2023 11:54:18 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -26.73393108948929 (T) = (0 -12.605701319786784) / Math.Sqrt((0.1722759377214823 / (51)) + (0.004555195632855369 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1481848756064626 = (10.978808019160283 - 12.605701319786784) / 10.978808019160283 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_UInt32\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.TryParse(value%3a%20%2212345%22).html\u003e) | 15.12 ns | 16.54 ns | 1.09 | 0.06 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.ParseSpan(value%3a%20%2212345%22).html\u003e) | 14.55 ns | 16.66 ns | 1.15 | 0.02 | False | | |\r\n[ParseSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.ParseSpan(value%3a%20%220%22).html\u003e) | 9.44 ns | 11.49 ns | 1.22 | 0.04 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.Parse(value%3a%20%220%22).html\u003e) | 9.99 ns | 11.75 ns | 1.18 | 0.05 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.Parse(value%3a%20%2212345%22).html\u003e) | 14.02 ns | 15.43 ns | 1.10 | 0.01 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_UInt32.TryParse(value%3a%20%220%22).html\u003e) | 10.01 ns | 11.73 ns | 1.17 | 0.11 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32_6.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_UInt32.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_UInt32*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_UInt32.TryParse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.537772788963213 \u003e 15.843671332277548.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:36:59 AM, 3/8/2023 9:36:36 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -36.09862897020217 (T) = (0 -16.67312074184134) / Math.Sqrt((0.04809981384325508 / (51)) + (0.010714397583862638 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.09828561371654325 = (15.181042648296502 - 16.67312074184134) / 15.181042648296502 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt32.ParseSpan(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.658128499045645 \u003e 15.267548444384932.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -55.902621784322235 (T) = (0 -16.653965103221985) / Math.Sqrt((0.01372316049195793 / (51)) + (0.01560443666771166 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.142677951063359 = (14.574504642995915 - 16.653965103221985) / 14.574504642995915 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt32.ParseSpan(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.49104336254709 \u003e 9.919448291183967.\r\nIsChangePoint: Marked as a change because one of 3/6/2023 11:14:52 AM, 3/20/2023 8:31:51 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -136.7259501972917 (T) = (0 -11.427250177622229) / Math.Sqrt((0.006970387939970047 / (50)) + (0.0008686352412725982 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.2045622412621337 = (9.486641525180815 - 11.427250177622229) / 9.486641525180815 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt32.Parse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.750909031396741 \u003e 10.476135238647258.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 8:06:06 PM, 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -47.94449913908933 (T) = (0 -11.725747987424283) / Math.Sqrt((9.226350812076719E-05 / (51)) + (0.01855650983696007 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.17503710274959972 = (9.979044882911275 - 11.725747987424283) / 9.979044882911275 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt32.Parse(value: \"12345\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.43004495743392 \u003e 14.68628921010817.\r\nIsChangePoint: Marked as a change because one of 2/24/2023 8:06:06 PM, 3/6/2023 8:17:12 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -122.5180896164999 (T) = (0 -15.43364818156463) / Math.Sqrt((0.0026680916015234322 / (51)) + (0.0011780793799463353 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.10486036491794651 = (13.968867624924552 - 15.43364818156463) / 13.968867624924552 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_UInt32.TryParse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.725701092345037 \u003e 10.500899806809578.\r\nIsChangePoint: Marked as a change because one of 1/21/2023 6:49:37 AM, 1/27/2023 7:12:54 PM, 3/6/2023 8:17:12 PM, 3/8/2023 9:36:36 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -39.52978204173568 (T) = (0 -11.706411047795395) / Math.Sqrt((0.07730823469333252 / (49)) + (0.0009950446595569941 / (14))) is less than -1.9996235849941724 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (49) + (14) - 2, .025) and -0.1589024910617737 = (10.10129077992585 - 11.706411047795395) / 10.10129077992585 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.CreateAddAndClear\u0026lt;String\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Queue - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.CreateAddAndClear(String).Queue(Size%3a%20512).html\u003e) | 2.55 μs | 3.06 μs | 1.20 | 0.25 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.CreateAddAndClear(String)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.CreateAddAndClear(String).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.CreateAddAndClear\u0026lt;String\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.CreateAddAndClear\u0026lt;String\u0026gt;.Queue(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 3.0602973860777194 \u003e 2.8488164991205913.\r\nIsChangePoint: Marked as a change because one of 2/4/2023 4:58:40 AM, 2/9/2023 4:27:10 AM, 2/13/2023 6:54:14 PM, 2/28/2023 10:21:25 PM, 3/14/2023 8:42:09 PM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -12.52819745499751 (T) = (0 -3074.0132709376094) / Math.Sqrt((25104.652777245206 / (51)) + (1387.8115314500296 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.11001280406462066 = (2769.349380188458 - 3074.0132709376094) / 2769.349380188458 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_Byte\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Byte.Parse(value%3a%20%220%22).html\u003e) | 9.97 ns | 11.57 ns | 1.16 | 0.07 | False | | |\r\n[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Byte.Parse(value%3a%20%22255%22).html\u003e) | 12.91 ns | 14.57 ns | 1.13 | 0.03 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Byte.TryParse(value%3a%20%22255%22).html\u003e) | 12.90 ns | 14.69 ns | 1.14 | 0.04 | False | | |\r\n[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_Byte.TryParse(value%3a%20%220%22).html\u003e) | 10.01 ns | 11.74 ns | 1.17 | 0.09 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Byte_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Byte_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Byte_3.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_Byte.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Byte*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_Byte.Parse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.571451495338287 \u003e 10.477807107988294.\r\nIsChangePoint: Marked as a change because one of 2/17/2023 9:53:52 PM, 3/17/2023 1:30:52 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -119.83925908609413 (T) = (0 -11.55030231538262) / Math.Sqrt((0.0022484015186606645 / (51)) + (0.001730080331622476 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.15519605893617286 = (9.998564508624938 - 11.55030231538262) / 9.998564508624938 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Byte.Parse(value: \"255\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.56528825901955 \u003e 13.549645827557892.\r\nIsChangePoint: Marked as a change because one of 3/14/2023 8:42:09 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -104.83926388578546 (T) = (0 -14.558384359922169) / Math.Sqrt((0.0004440477275678008 / (51)) + (0.003399486935366924 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.12893549300826035 = (12.895674243644004 - 14.558384359922169) / 12.895674243644004 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Byte.TryParse(value: \"255\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.685970364639637 \u003e 13.535619764332457.\r\nIsChangePoint: Marked as a change because one of 2/23/2023 8:54:44 PM, 2/24/2023 9:01:57 AM, 3/23/2023 6:11:55 PM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -3.4387265673627487 (T) = (0 -14.64069642471703) / Math.Sqrt((4.191751189162897 / (50)) + (0.0027063261843071904 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.07305875805961484 = (13.6438907140476 - 14.64069642471703) / 13.6438907140476 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_Byte.TryParse(value: \"0\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.739915379902174 \u003e 10.50790039961699.\r\nIsChangePoint: Marked as a change because one of 2/23/2023 8:54:44 PM, 2/24/2023 9:01:57 AM, 3/23/2023 6:11:55 PM, 3/25/2023 12:18:49 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -5.1991982364795275 (T) = (0 -11.776161035201829) / Math.Sqrt((2.6239095402856645 / (51)) + (0.0031503497376195134 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.1115583037126311 = (10.594281016001744 - 11.776161035201829) / 10.594281016001744 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
                                           "updatedAt":  "2024-06-22T01:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZL1HI",
                                           "createdAt":  "2023-04-04T13:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Tests.Perf_String\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ToLower - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_String.ToLower(s%3a%20%22test%22).html\u003e) | 14.30 ns | 16.58 ns | 1.16 | 0.03 | False | | |\r\n[ToUpper - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Tests.Perf_String.ToUpper(s%3a%20%22TEST%22).html\u003e) | 13.94 ns | 16.08 ns | 1.15 | 0.02 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_String_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_String_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Tests.Perf_String.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_String*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Tests.Perf_String.ToLower(s: \"test\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.577841809313743 \u003e 14.951343536912718.\r\nIsChangePoint: Marked as a change because one of 1/27/2023 7:12:54 PM, 2/24/2023 9:01:57 AM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -129.2908093269263 (T) = (0 -16.599512396232345) / Math.Sqrt((0.007917236889496889 / (51)) + (0.0024913958854582367 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.16573870550978442 = (14.239479497228567 - 16.599512396232345) / 14.239479497228567 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Tests.Perf_String.ToUpper(s: \"TEST\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 16.08066858176763 \u003e 14.625755358870716.\r\nIsChangePoint: Marked as a change because one of 2/9/2023 12:40:40 PM, 2/24/2023 9:01:57 AM, 3/16/2023 9:46:36 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -109.6273239980379 (T) = (0 -16.128831318125574) / Math.Sqrt((0.013022918656505589 / (51)) + (0.001920046147736238 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.15561337424326957 = (13.95694414551685 - 16.128831318125574) / 13.95694414551685 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.Tests.Perf_BitArray\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[BitArraySetLengthGrow - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.Tests.Perf_BitArray.BitArraySetLengthGrow(Size%3a%204).html\u003e) | 25.57 ns | 27.13 ns | 1.06 | 0.06 | False | | |\r\n[BitArrayLengthValueCtor - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.Tests.Perf_BitArray.BitArrayLengthValueCtor(Size%3a%204).html\u003e) | 13.67 ns | 14.99 ns | 1.10 | 0.03 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_BitArray_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_BitArray_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.Tests.Perf_BitArray.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.Tests.Perf_BitArray*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.Tests.Perf_BitArray.BitArraySetLengthGrow(Size: 4)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 27.130491166298107 \u003e 27.005207544062152.\r\nIsChangePoint: Marked as a change because one of 1/20/2023 4:39:21 PM, 1/25/2023 9:58:39 PM, 2/9/2023 4:10:34 PM, 3/10/2023 12:53:36 AM, 3/16/2023 8:14:39 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -14.051631387646001 (T) = (0 -27.343104711404827) / Math.Sqrt((0.2829855898975826 / (51)) + (0.1291295483083489 / (13))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (13) - 2, .025) and -0.06831039763527923 = (25.59471926130195 - 27.343104711404827) / 25.59471926130195 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Collections.Tests.Perf_BitArray.BitArrayLengthValueCtor(Size: 4)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 14.994468327675058 \u003e 14.350902993962766.\r\nIsChangePoint: Marked as a change because one of 2/10/2023 2:43:15 PM, 2/16/2023 4:50:02 PM, 2/28/2023 10:21:25 PM, 3/3/2023 11:43:56 AM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -50.95165179507631 (T) = (0 -14.974388320387261) / Math.Sqrt((0.020533839456855274 / (51)) + (0.004760066369275258 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.10220120679935311 = (13.585893599110555 - 14.974388320387261) / 13.585893599110555 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Collections.IterateForEach\u0026lt;Int32\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ImmutableQueue - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.IterateForEach(Int32).ImmutableQueue(Size%3a%20512).html\u003e) | 3.59 μs | 4.08 μs | 1.14 | 0.09 | False | | |\r\n[ConcurrentBag - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Collections.IterateForEach(Int32).ConcurrentBag(Size%3a%20512).html\u003e) | 2.03 μs | 2.22 μs | 1.09 | 0.10 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.IterateForEach(Int32)_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.IterateForEach(Int32)_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Collections.IterateForEach(Int32).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Collections.IterateForEach\u0026lt;Int32\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.IterateForEach\u0026lt;Int32\u0026gt;.ImmutableQueue(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 4.084082743566801 \u003e 3.7666282500672343.\r\nIsChangePoint: Marked as a change because one of 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -8.448179472298897 (T) = (0 -3994.794939454657) / Math.Sqrt((126.42893847490541 / (51)) + (33259.37150939206 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.11498970888310152 = (3582.8087987074705 - 3994.794939454657) / 3582.8087987074705 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### System.Collections.IterateForEach\u0026lt;Int32\u0026gt;.ConcurrentBag(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.2160004066869723 \u003e 2.1320708759602525.\r\nIsChangePoint: Marked as a change because one of 1/27/2023 7:12:54 PM, 2/9/2023 12:40:40 PM, 3/6/2023 11:14:52 AM, 4/1/2023 1:31:30 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -4.414886083642875 (T) = (0 -2253.5833536406185) / Math.Sqrt((1964.4189401766937 / (56)) + (19226.511862425996 / (9))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (56) + (9) - 2, .025) and -0.1004581368146214 = (2047.8592308507305 - 2253.5833536406185) / 2047.8592308507305 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [60b480424d51f42dfd66e09b010297dc041602f2](https://github.com/dotnet/runtime/commit/60b480424d51f42dfd66e09b010297dc041602f2)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/60b480424d51f42dfd66e09b010297dc041602f2...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Memory.Span\u0026lt;Byte\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ToArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Memory.Span(Byte).ToArray(Size%3a%204).html\u003e) | 6.99 ns | 8.13 ns | 1.16 | 0.06 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Memory.Span(Byte)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Memory.Span(Byte).html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Memory.Span\u0026lt;Byte\u0026gt;*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-0986ac71-fb98-4e35-95ee-7180e1acfb9a1ae983dd9084fe7b3/6d347a48-42d5-4cf0-8c06-c216e50d5de4.zip?sv=2021-08-06\u0026se=2023-04-30T18%3A04%3A40Z\u0026sr=c\u0026sp=rl\u0026sig=lz3mxyk7gm1PXSZcN89ufpayfqJsq58WctW5en2nr80%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Memory.Span\u0026lt;Byte\u0026gt;.ToArray(Size: 4)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 8.133384775453974 \u003e 7.087877461668383.\r\nIsChangePoint: Marked as a change because one of 3/15/2023 2:53:22 PM, 3/31/2023 8:05:26 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -19.07203713810211 (T) = (0 -7.832160898720877) / Math.Sqrt((0.03436096953729398 / (51)) + (0.026990017871969536 / (14))) is less than -1.9983405425199077 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (51) + (14) - 2, .025) and -0.14181856576571947 = (6.859374276742926 - 7.832160898720877) / 6.859374276742926 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | x64\r\nOS | Windows 10.0.19042\r\nQueue | OwlWindows\r\nBaseline | [ef6b6d581fbcdf65516d59c0597288755d46cb57](https://github.com/dotnet/runtime/commit/ef6b6d581fbcdf65516d59c0597288755d46cb57)\r\nCompare | [16cff65cac42f8caaeda07c675d89dc0816a2cf7](https://github.com/dotnet/runtime/commit/16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/ef6b6d581fbcdf65516d59c0597288755d46cb57...16cff65cac42f8caaeda07c675d89dc0816a2cf7)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Reflection.Attributes\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[IsDefinedClassMiss - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Reflection.Attributes.IsDefinedClassMiss.html\u003e) | 76.24 ns | 96.23 ns | 1.26 | 0.08 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Reflection.Attributes_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_04_2023/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Reflection.Attributes.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-8e552dc1-5e74-4313-88ba-7e99d94df10a25bcdd7bcab4a7ab1/281142b8-3a97-476d-83b4-292ed05b3ef4.zip?sv=2021-08-06\u0026se=2023-04-30T14%3A56%3A48Z\u0026sr=c\u0026sp=rl\u0026sig=T%2BC0fwuOD5ca7%2BPW05L2q8XGItEIUGF73xS24K2nrko%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Reflection.Attributes*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-8e552dc1-5e74-4313-88ba-7e99d94df10a25bcdd7bcab4a7ab1/281142b8-3a97-476d-83b4-292ed05b3ef4.zip?sv=2021-08-06\u0026se=2023-04-30T14%3A56%3A48Z\u0026sr=c\u0026sp=rl\u0026sig=T%2BC0fwuOD5ca7%2BPW05L2q8XGItEIUGF73xS24K2nrko%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-61692974-4a70-476b-a6e4-59249e7286fc9b6e38011ce40fabe/6db123d1-89fc-4875-b973-2ef997e7c508.zip?sv=2021-08-06\u0026se=2023-05-01T02%3A54%3A25Z\u0026sr=c\u0026sp=rl\u0026sig=HBSmvzpQ3CL8e%2BmC%2Bkenl%2FXpcovOU5err6IY8ufXiHw%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Reflection.Attributes.IsDefinedClassMiss\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 96.23100749077314 \u003e 79.65823789593757.\r\nIsChangePoint: Marked as a change because one of 1/27/2023 7:12:54 PM, 2/4/2023 4:58:40 AM, 2/13/2023 6:54:14 PM, 3/31/2023 4:22:12 PM, 4/3/2023 9:14:01 PM falls between 3/26/2023 7:47:31 AM and 4/3/2023 9:14:01 PM.\r\nIsRegressionStdDev: Marked as regression because -30.608393175650555 (T) = (0 -94.34967495039204) / Math.Sqrt((5.421620569481506 / (50)) + (3.160291261989949 / (14))) is less than -1.998971517032675 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (50) + (14) - 2, .025) and -0.23082218282955694 = (76.65581289207029 - 94.34967495039204) / 76.65581289207029 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
                                           "updatedAt":  "2024-06-22T01:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZL1u6",
                                           "createdAt":  "2023-04-04T16:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Commit range: https://github.com/dotnet/runtime/compare/da2a4ed1af5aa52fd6f5fda3db80f5eaefc91e18...5eeb91f5501e52aca089b24f37478b7d8e537a58\r\nOnly two PRs:\r\n1) https://github.com/dotnet/runtime/pull/84159\r\n2) https://github.com/dotnet/runtime/pull/84099\r\n\r\n@jkotas @agocke could any of these affect so many benchmarks? \r\n\r\nWindows-x64",
                                           "updatedAt":  "2023-04-04T16:33:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZL2wt",
                                           "createdAt":  "2023-04-04T16:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "FYI the regressions are not reported on Linux.",
                                           "updatedAt":  "2023-04-04T16:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZME_u",
                                           "createdAt":  "2023-04-04T17:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not see anything related.",
                                           "updatedAt":  "2023-04-04T17:24:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQHXx",
                                           "createdAt":  "2023-07-24T18:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is this issue still actionable? ",
                                           "updatedAt":  "2023-07-24T18:24:56Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Perf] Windows/x64: 72 Regressions on 3/31/2023 11:04:55 PM",
        "labels":  [
                       "os-windows",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "area-VM-coreclr",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84448",
        "createdAt":  "2023-04-06T21:37:10Z",
        "number":  84448,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T18:23:16Z",
        "body":  "Re: https://github.com/dotnet/runtime/pull/84430#discussion_r1160111346\r\n\r\nThe obvious goal is the code reuse.\r\n\r\nThere are some open questions here:\r\n- is it possible at all within current implementation to switch use of the native implementation to managed. Switching just some calls may not be interesting.\r\n- switching the adding to the cache seems more likely to work, but what about TryGet - can it be done as a call to managed, would it be fast enough?\r\n- would moving some cast helpers out to managed code help or benefit from such change?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider calling the managed methods from CastCache instead of having native implementation.",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84456",
        "createdAt":  "2023-04-07T00:04:57Z",
        "number":  84456,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-25T20:46:47Z",
        "body":  "The REP RET was a workaround for some peculiarities of branch predictors in AMD Family 10h/12h. \r\nAs of 15h (Bulldozer) the recommendation disappeared from the official optimization guides and for Zen families contain recommendation to not do that:\r\n\r\nhttps://www.amd.com/en/support/tech-docs/software-optimization-guide-for-the-amd-zen4-microarchitecture\r\n```\r\n2.8.1.3.2 REP RET\r\nFor prior processor families, such as Family 10h and 12h, a three-byte return-immediate RET \r\ninstruction had been recommended as an optimization to improve performance over a single-byte \r\nnear-return. For the AMD Zen4 microarchitecture, this is no longer recommended and a single-byte \r\nnear-return (opcode C3h) can be used with no negative performance impact. This will result in \r\nsmaller code size over the three-byte method. For the rationale for the former recommendation, see \r\nsection 6.2 in the Software Optimization Guide for AMD Family 10h and 12h Processors.\r\n```\r\n\r\n15h (Bulldozer) is a 12 years old architecture. Perhaps it is time to stop using the pattern? \r\n\r\nWe have a number of assembly helpers that use REPRET. I am not sure if JIT emits it too.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOahkWUg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZZMok",
                                           "createdAt":  "2023-04-07T00:05:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch, @kunalspathak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nThe REP RET was a workaround for some peculiarities of branch predictors in AMD Family 10h/12h. \r\nAs of 15h (Bulldozer) the recommendation disappeared from the official optimization guides and for Zen families contain recommendation to not do that:\r\n\r\n```\r\n2.8.1.3.2 REP RET\r\nFor prior processor families, such as Family 10h and 12h, a three-byte return-immediate RET \r\ninstruction had been recommended as an optimization to improve performance over a single-byte \r\nnear-return. For the AMD Zen4 microarchitecture, this is no longer recommended and a single-byte \r\nnear-return (opcode C3h) can be used with no negative performance impact. This will result in \r\nsmaller code size over the three-byte method. For the rationale for the former recommendation, see \r\nsection 6.2 in the Software Optimization Guide for AMD Family 10h and 12h Processors.\r\n```\r\n\r\n15h (Bulldozer) is 12 years old architecture. Perhaps it is time to stop using that? \r\n\r\nWe have a number of assembly helpers that use REPRET. I am not sure if JIT emits it too.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-07T00:05:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZZM5a",
                                           "createdAt":  "2023-04-07T00:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CC @tannergooding",
                                           "updatedAt":  "2023-04-07T00:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZcuYt",
                                           "createdAt":  "2023-04-07T22:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "cc @dotnet/jit-contrib. We will not have time to address this in .NET 8. Pushing to Future. ",
                                           "updatedAt":  "2023-04-07T22:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZeaDZ",
                                           "createdAt":  "2023-04-09T14:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@VSadov, I think its fine to no longer do an optimization that was only relevant to Phenom based processors.\r\n\r\nI\u0027d imagine fixing this should be trivial overall.",
                                           "updatedAt":  "2023-04-09T14:34:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_Dxj",
                                           "createdAt":  "2023-10-24T22:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "I only see two appearances in code and one in SPMI\u0027s pattern matcher. AFAIK the jit does not emit these.\r\n\r\n@VSadov are there more that you know of?\r\n```\r\nsrc/coreclr/tools/superpmi/superpmi/neardiffer.cpp:        if (u16_strcmp(instrMnemonic_1, L\"rep ret\") == 0)\r\nsrc/coreclr/vm/amd64/jithelpers_singleappdomain.S:        rep ret\r\nsrc/coreclr/vm/amd64/jithelpers_singleappdomain.S:        rep ret\r\n```",
                                           "updatedAt":  "2023-10-24T22:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qAITE",
                                           "createdAt":  "2023-10-25T02:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I am not sure if JIT emits this. It may be mostly relevant to various asm helpers like GC barriers. There is even a macro for this.\r\nLike here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/08903c00860939af0d291eb3f3c037a18d9820f6/src/coreclr/vm/amd64/jithelpers_fast.S#L163-L165",
                                           "updatedAt":  "2023-10-25T02:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qGRZS",
                                           "createdAt":  "2023-10-25T20:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK8liQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2023-10-25T21:06:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Ok, I am going to switch this over to runtime.",
                                           "updatedAt":  "2023-10-25T20:46:31Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Do we still need to use REP RET for returns targeted/following after jumps? ",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85895",
        "createdAt":  "2023-04-20T09:56:57Z",
        "number":  85895,
        "author":  "BennyBread",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-14T10:48:18Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWe have an embedded linux system on which dotnet5 runs without problems.\r\n\r\nI tried to upgrade to dotnet 6 or 7 but the newer dotnet versions do not run.\r\n\r\n\r\nWhen I try to start dotnet it cashes:\r\n\r\n```\r\nroot@dev:/dotnet-7# ./dotnet\r\nSegmentation fault (core dumped)\r\nroot@dev:/dotnet-7#\r\n```\r\n\r\n\r\ndotnet-6 and dotnet-7 both produce the same output.\r\n\r\nAll the dotnet Versions where downloaded from official site:\r\n\r\naspnetcore-runtime-5.0.17-linux-arm.tar.gz\r\naspnetcore-runtime-6.0.13-linux-arm.tar.gz\r\naspnetcore-runtime-7.0.2-linux-arm.tar.gz\r\n\r\ndotnet5 runs without problems:\r\n\r\n```\r\n\r\nroot@dev:/# dotnet --info\r\n\r\nHost (useful for support):\r\n  Version: 5.0.17\r\n  Commit:  6a98414363\r\n\r\n.NET SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.17 [/deprag/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [/deprag/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nroot@dev:/dotnet-7#\r\n```\r\n\r\ndotnet --info does of course also not run at all.\r\n\r\n\r\nWe\u0027d really highly appreciate it to upgrade to dotnet 7...\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\ndotnet executable and the \"user programs\" runs on the system..\r\n\r\n### Steps To Reproduce\r\n\r\nWhen I start dotnet 6  or 7 using gdb I get this output:\r\n\r\n```\r\nroot@dev:/dotnet-7# gdb ./dotnet\r\nGNU gdb (Linaro GDB) 7.8-2014.09\r\nCopyright (C) 2014 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"arm-linux-gnueabi\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n\u003chttp://bugs.linaro.org\u003e.\r\nFind the GDB manual and other documentation resources online at:\r\n\u003chttp://www.gnu.org/software/gdb/documentation/\u003e.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from ./dotnet...(no debugging symbols found)...done.\r\n(gdb)\r\n(gdb) r\r\nStarting program: /deprag/dotnet-7/dotnet\r\nwarning: Could not load shared library symbols for linux-vdso.so.1.\r\nDo you need \"set solib-search-path\" or \"set sysroot\"?\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0xb6fdf004 in relocate_pc24 (value=value@entry=0, addend=\u003coptimized out\u003e, map=0xb6fff958)\r\n    at ../sysdeps/arm/dl-machine.h:338\r\n338     ../sysdeps/arm/dl-machine.h: No such file or directory.\r\n(gdb)\r\n(gdb)\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\ndotnet 6 and 7\r\n\r\n### Anything else?\r\n\r\nSome linux system details:\r\n\r\n\r\nuname --a\r\nLinux dev 4.4.19-gdb0b54cdad dotnet/aspnetcore#54 PREEMPT Fri Dec 9 20:51:56 CET 2016 armv7l GNU/Linux\r\n\r\n\r\nglibc version is 2.21\r\n\r\n\r\ncat /proc/cpuinfo\r\nprocessor       : 0\r\nmodel name      : ARMv7 Processor rev 4 (v7l)\r\nBogoMIPS        : 48.00\r\nFeatures        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm\r\nCPU implementer : 0x41\r\nCPU architecture: 7\r\nCPU variant     : 0x2\r\nCPU part        : 0xc0f\r\nCPU revision    : 4\r\n\r\nHardware        : Keystone\r\nRevision        : 0000\r\nSerial          : 0000000000000000\r\n\r\nlspci:\r\n00:00.0 PCI bridge: Texas Instruments Device b00b (rev 01)\r\n\r\n free -m\r\n                     total        used        free      shared  buff/cache   available\r\nMem:           1512         129         593          68         790        1288\r\nSwap:             0           0           0\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcLUT6g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bpWoK",
                                           "createdAt":  "2023-05-01T06:52:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@BennyBread this is almost certainly something on the runtime side of the fence rather than ASP.NET, can you confirm that you are just trying to invoke the ```dotnet``` executable and there is no ASP.NET code involved yet? (that is what it looks like from the command-line invocations listed above).",
                                           "updatedAt":  "2023-05-01T06:52:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bpWoM",
                                           "createdAt":  "2023-05-06T09:34:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BennyBread",
                                           "body":  "@mitchdenny \r\nThere is no user code involved at all. I\u0027m only try to run the dotnet command without any parameters.\r\n\r\ndotnet 5 executable runs with no problems on the system. net6 and 7 does not. \r\nIs there any possibility to find out what\u0027s missing on that system? (I\u0027ts an embedded system on a controller we sell)",
                                           "updatedAt":  "2023-05-06T09:34:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bpWoP",
                                           "createdAt":  "2023-05-07T23:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "OK, I\u0027m going to transfer this to to dotnet/runtime since this is more there area.",
                                           "updatedAt":  "2023-05-07T23:30:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5btBne",
                                           "createdAt":  "2023-05-08T15:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "@mangod9 ",
                                           "updatedAt":  "2023-05-08T15:10:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5btVX8",
                                           "createdAt":  "2023-05-08T15:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @BennyBread, what distro are you trying this on? Are you able to provide a dump to investigate further? Thx!",
                                           "updatedAt":  "2023-05-08T15:43:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cVr2s",
                                           "createdAt":  "2023-05-16T08:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BennyBread",
                                           "body":  "@mangod9  It\u0027s an distro from TI K2G with some minor changes in the kernel. I can provide a gdb coredump, uploaded it here:\r\n[gdb core dump](https://github.com/BennyBread/myFiles/blob/main/dotnet7/core.23664)\r\nHope this helps.\r\n",
                                           "updatedAt":  "2023-05-16T08:02:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sVEVZ",
                                           "createdAt":  "2023-11-18T09:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaelys",
                                           "body":  "I have the same problem, different development versions, and .NET 8 is currently the same problem. Are there any progress or news?\r\n\r\nOr should I give up using .NET development \r\n\r\nembedded linux-arm?\r\n\r\n```\r\n/lib # ./libc.so.6\r\nGNU C Library (GNU libc) stable release version 2.29.\r\nCopyright (C) 2019 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.\r\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\r\nPARTICULAR PURPOSE.\r\nCompiled by GNU CC version 7.3.0.\r\nlibc ABIs: UNIQUE ABSOLUTE\r\nFor bug reporting instructions, please see:\r\n\u003chttp://www.gnu.org/software/libc/bugs.html\u003e.\r\n/lib # cat /proc/cpuinfo\r\nprocessor       : 0\r\nmodel name      : ARMv7 Processor rev 5 (v7l)\r\nBogoMIPS        : 48.00\r\nFeatures        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm\r\nCPU implementer : 0x41\r\nCPU architecture: 7\r\nCPU variant     : 0x0\r\nCPU part        : 0xc07\r\nCPU revision    : 5\r\n```",
                                           "updatedAt":  "2023-11-18T09:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wtRPq",
                                           "createdAt":  "2024-01-14T10:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RockNHawk",
                                           "body":  "I have same error after a fresh installation (both liunux system \u0026 .net core 7 is new installed)\r\n\r\n\r\n`\r\n\r\nxxx@xxx-uos-arm:~$ wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh\r\nxxx@xxx-uos-arm:~$ chmod +x ./dotnet-install.sh\r\nxxx@xxx-uos-arm:~$ ./dotnet-install.sh --channel 7.0\r\ndotnet-install: Attempting to download using aka.ms link https://dotnetcli.azureedge.net/dotnet/Sdk/7.0.405/dotnet-sdk-7.0.405-linux-arm64.tar.gz\r\ndotnet-install: Installation finished successfully.\r\nxxx@xxx-uos-arm:~$ dotnet\r\n段错误\r\nxxx@xxx-uos-arm:~$ dotnet --list-sdks\r\n段错误\r\nxxx@xxx-uos-arm:~$ uname -a\r\nLinux xxx-uos-arm 4.19.0-arm64-desktop #6108 SMP Wed Sep 13 13:46:40 CST 2023 aarch64 GNU/Linux\r\nxxx@xxx-uos-arm:~$\r\n\r\n`",
                                           "updatedAt":  "2024-01-14T10:48:18Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "embedded linux-arm dotnet 6/7 segmentation fault",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85650",
        "createdAt":  "2023-05-02T14:18:42Z",
        "number":  85650,
        "author":  "mateusrodrigues",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T18:16:59Z",
        "body":  "### Description\r\n\r\nI am investigating the current state of .NET on RISC-V and started by trying to build CoreCLR on a board. So I created a simple Hello World .NET app and tried to run it with `corerun`. I am currently getting the following error:\r\n\r\n```\r\nGC heap initialization failed with error 0x8007000E                                        \r\nBEGIN: coreclr_initialize failed - Error: 0x8007000e                                       \r\nExe path: /home/ubuntu/git/runtime/artifacts/bin/coreclr/linux.riscv64.Debug/corerun\r\nProperties:                                                                                \r\n    TRUSTED_PLATFORM_ASSEMBLIES = /home/ubuntu/git/runtime/artifacts/bin/coreclr/linux.risc\r\nv64.Debug//System.Private.CoreLib.dll:                                                     \r\n    APP_PATHS = /home/ubuntu/hello-world/                                                  \r\n    NATIVE_DLL_SEARCH_DIRECTORIES = /home/ubuntu/hello-world/:                             \r\n    HOST_RUNTIME_CONTRACT = 0x3fcdc1f718                                                   \r\nManaged assembly: /home/ubuntu/hello-world/HelloWorld.dll                                 \r\nArguments (0):                                                                             \r\nEND: coreclr_initialize failed - Error: 0x8007000e\r\n```\r\n\r\nAs the error code indicates an OOM error, I ran `strace` on this and got the following output:\r\n\r\n```\r\n36823 sysinfo({uptime=1576, loads=[66528, 43648, 29120], totalram=7523438592, freeram=6651424768, sharedram=1163264, bufferram=39895040, totalswap=0, freeswap=0, procs=131, totalhigh=0, freehigh=0, mem_unit=1}) = 0\r\n36823 mmap(NULL, 274877911040, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)\r\n```\r\n\r\nApparently, it\u0027s trying to allocate 274 GB of memory if I understood this correctly?\r\n\r\n### Reproduction Steps\r\n\r\n1. `./src/coreclr/build-runtime.sh`\r\n2. On an amd64 machine, built the CoreCLR managed parts from inside the `System.Private.CoreLib` directory with `../../../.dotnet/dotnet build -r linux-riscv64 -c Debug --no-self-contained /p:PlatformTarget=AnyCpu System.Private.CoreLib.csproj`\r\n3. Created a Hello World app on another machine (with .NET 8 latest preview):\r\n   2.1. `dotnet new console -o HelloWorld`\r\n   2.2. `dotnet build`\r\n   2.3. Copied the `HelloWorld.dll` file over to the board\r\n4. Went into the artifacts folder and ran `./corerun HelloWorld.dll`\r\n5. Error happened\r\n\r\n### Expected behavior\r\n\r\nShould output `Hello, World!`\r\n\r\n### Actual behavior\r\n\r\nOutputs the error included in the description.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- `corerun` built from the `main` branch CoreCLR\r\n- StarFive VisionFive v1 board\r\n- `lscpu` output\r\n```\r\nArchitecture:          riscv64\r\n  Byte Order:          Little Endian\r\nCPU(s):                2\r\n  On-line CPU(s) list: 0,1\r\nNUMA:                  \r\n  NUMA node(s):        1\r\n  NUMA node0 CPU(s):   0,1\r\n```\r\n- `/etc/os-release` info\r\n```\r\nPRETTY_NAME=\"Ubuntu 23.04\"\r\nNAME=\"Ubuntu\"\r\nVERSION_ID=\"23.04\"\r\nVERSION=\"23.04 (Lunar Lobster)\"\r\nVERSION_CODENAME=lunar\r\nID=ubuntu\r\nID_LIKE=debian\r\nHOME_URL=\"https://www.ubuntu.com/\"\r\nSUPPORT_URL=\"https://help.ubuntu.com/\"\r\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\r\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\r\nUBUNTU_CODENAME=lunar\r\nLOGO=ubuntu-logo\r\n```\r\n- `ulimit -v` output\r\n```\r\nunlimited\r\n```\r\n- Specs:\r\n```\r\nOS: Ubuntu 23.04 riscv64 \r\nHost: StarFive VisionFive V1 \r\nKernel: 5.19.0-1014-starfive \r\nUptime: 1 hour, 49 mins \r\nPackages: 801 (dpkg), 5 (snap) \r\nShell: bash 5.2.15 \r\nTerminal: tmux \r\nCPU: (2) \r\nMemory: 173MiB / 7174MiB\r\n```\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW5MKkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bTONZ",
                                           "createdAt":  "2023-05-02T16:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "See https://github.com/dotnet/runtime/issues/84834. \nGC-related is placed in not planned right now. \nYou may want to set DOTNET_GCgen0size=99999999 and use conservative GC mode for testing. ",
                                           "updatedAt":  "2023-05-02T16:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bYLTK",
                                           "createdAt":  "2023-05-03T13:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e Apparently, it\u0027s trying to allocate 274 GB of memory if I understood this correctly?\r\n\r\nIt is trying to reserve virtual memory space of that space, not allocate that much of physical memory. This is expected, but it causes problem on RISC-V as its virtual address space is limited to 256 GB IIRC (other 64 bit platforms have limit of 32TB). Setting `DOTNET_GCHeapHardLimit=3C00000000` (the value is a bit below 256GB) might also fix the problem, but maybe using the setting mentioned in the previous comment would be better since this came from the developers of the RISC-V support.",
                                           "updatedAt":  "2023-05-03T13:49:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bkwqS",
                                           "createdAt":  "2023-05-05T14:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8xcMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HJLeee",
                                                                               "createdAt":  "2023-05-30T23:14:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@mateusrodrigues There\u0027s already fix for this for VisionFive 1/2, please try https://github.com/dotnet/runtime/pull/84797",
                                           "updatedAt":  "2023-05-05T14:39:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "coreclr_initialize failed on RISC-V (error 0x8007000E)",
        "labels":  [
                       "area-VM-coreclr",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85845",
        "createdAt":  "2023-05-05T22:25:58Z",
        "number":  85845,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-01T00:16:41Z",
        "body":  "log.cpp `InitializeLogging` gets called from different native libraries that are expected to be loaded within the same process. Notoriously DBI and DAC on the debugger side and CLRJit and CoreCLR on the runtime side. This usually means that\r\n\r\n- Logs might get clobbered in multithreaded execution since there\u0027s a mutex per shared library.  \r\n- File handle creation happens per shared library. The default on initialization is files always get created, which means that logs that happen before the init will get erased.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW5p9pA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bmn2k",
                                           "createdAt":  "2023-05-05T22:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nlog.cpp `InitializeLogging` gets called from different native libraries that are expected to be loaded within the same process. Notoriously DBI and DAC on the debugger side and CLRJit and CoreCLR on the runtime side. This usually means that\r\n\r\n- Logs might get clobbered in multithreaded execution since there\u0027s a mutex per shared library.  \r\n- File handle creation happens per shared library. The default on initialization is files always get created, which means that logs that happen before the init will get erased.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-05T22:26:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "CLR Log initialization happens multiple times per process",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86145",
        "createdAt":  "2023-05-12T10:18:31Z",
        "number":  86145,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4TliA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "danmoseley",
                                            "createdAt":  "2023-06-01T00:43:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-01T00:03:14Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-03-14T00:15:32Z",
        "body":  "Currently, there are still some native code elements named with COM prefix from the COM+ era, like COMFloat and COMDouble:\r\n\r\nhttps://github.com/dotnet/runtime/blob/a5d13e24cb374b55c906061f825d864efec7f3fb/src/coreclr/classlibnative/inc/floatdouble.h#L10\r\n\r\nCan we rename them to things like CLRDouble, to make a clear distinction with COM interop? Are there any tools depending on these names?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOok0Z-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dpYhs",
                                           "createdAt":  "2023-06-01T00:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Are there any tools depending on these names?\r\n\r\nThere is no reason these can\u0027t be changed. Good suggestion.",
                                           "updatedAt":  "2023-06-01T00:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dpY12",
                                           "createdAt":  "2023-06-01T00:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "If someone wants to take this up, it would be most appropriate to provide a list of the types and APIs that will be updated.",
                                           "updatedAt":  "2023-06-01T00:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dqIta",
                                           "createdAt":  "2023-06-01T04:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC88dNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-06-01T15:28:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Most of these `COM*` types are holding types for FCalls. The newer naming convention is to use `Native` suffix. For example, `AssemblyNative`, `MarshalNative`, `ObjectNative`, `StreamNative`, ... .\r\n\r\nAlso, we may want to change FCalls to be extern \"C\" methods, similar to what we have done with QCalls a while back in #60992.   It would set us up for convergence with native AOT.  FCalls in native AOT have to be extern \"C\" methods to enable linking managed code with unmanaged runtime using platform linker.",
                                           "updatedAt":  "2023-06-01T04:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dts54",
                                           "createdAt":  "2023-06-01T15:23:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "A list of symbols that can be renamed at my site of view:\r\n\r\nCOM interop related:\r\nComPlusCall -\u003e ClrToComCall (the file has been renamed)\r\nComPlusCallInfo\r\nComPlusCallMethodDesc etc. Remove the \"ComPlus\" name.\r\n\r\nFCall related:\r\nCOMDateTime\r\nCOMDelegate\r\ncomdependenthandle.h\r\ncomdynamic.h (QCall)\r\nCOMModule\r\nCOMSynchronizable.h\r\ncomthreadpool.h\r\ncomwaithandle.h\r\nCOMCustomAttribute\r\nCOMString\r\ngCOM*Funcs in ecalllist.h\r\nCOMDouble\r\nCOMSingle\r\nCOMVariant\r\nCOMOAVariant\r\nCOMInterlocked\r\n\r\nMacros:\r\nCOMPlusThrow seires",
                                           "updatedAt":  "2023-06-01T15:23:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dtyYE",
                                           "createdAt":  "2023-06-01T15:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Thanks @huoyaoyuan \r\n\r\n\u003e A list of symbols that can be renamed at my site of view:\r\n\r\nFrom that list, the FCall related changes have a mix of real COM interop and just legacy naming. The COM interop related will need some more scrutiny. The exception macros can be changed for sure.\r\n\r\nThe `COMVariant`, `COMOAVariant`, `ComAwareWeakReferenceNative` and `COMDateTime` are a bit tricky for now and a mix of real COM types/specifications and just general .NET code. They should be left alone in this initial effort.",
                                           "updatedAt":  "2023-06-01T15:35:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57lmqi",
                                           "createdAt":  "2024-04-23T21:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Giviruk",
                                           "body":  "can I try to do this issue? do I just need to rename the types from the list or something else?",
                                           "updatedAt":  "2024-04-23T21:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57mBDK",
                                           "createdAt":  "2024-04-23T22:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Giviruk Sure. Please note the guidance from https://github.com/dotnet/runtime/issues/86145#issuecomment-1571326810.",
                                           "updatedAt":  "2024-04-23T22:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57nNpA",
                                           "createdAt":  "2024-04-24T02:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027d suggest to go with less types at a time, and exclude ones when you feel it\u0027s too complex. You can start with searching the usages.",
                                           "updatedAt":  "2024-04-24T02:20:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Ofxx",
                                           "createdAt":  "2024-05-28T07:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pierrebelin",
                                           "body":  "\u003e can I try to do this issue? do I just need to rename the types from the list or something else?\r\n\r\nI\u0027d like to work on this one, do you need any help ?",
                                           "updatedAt":  "2024-05-28T07:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_P7zw",
                                           "createdAt":  "2024-05-28T10:31:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjukuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pierrebelin",
                                                                               "createdAt":  "2024-05-29T15:13:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Giviruk",
                                           "body":  "Unfortunately, I was never able to start working on the task, so someone else can start doing it.",
                                           "updatedAt":  "2024-05-28T10:31:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_sdDj",
                                           "createdAt":  "2024-05-31T14:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pierrebelin",
                                           "body":  "Here is what I understand from the code to resolve this issue:\r\n\r\nFor COM interop related:\r\nComPlusCall -\u003e CallNative\r\nComPlusCallInfo -\u003e CallInfoNative\r\nComPlusCallMethodDesc -\u003e CallMethodDescNative\r\nGenericCLRToCOMCallStub -\u003e GenericCallNativeStub\r\n\r\nShould I also rename class like `ComPlusMethodFrame` to `MethodFrameNative` ?\r\n\r\nFor FCallsRelated :\r\nCOMDelegate -\u003e DelegateNative\r\nCOMModule -\u003e ModuleNative\r\n  along with calls like COMDelegate::GetMethodDesc -\u003e ModuleNative_GetMethodDesc as noticed in the PR #60992\r\n\r\ncomdependenthandle.h -\u003e dependenthandlenative.h\r\ncomdynamic.h -\u003e dynamicwritenative.h with COMDynamicWrite -\u003e DynamicWriteNative\r\ncomsynchronizable.h -\u003e synchronizablenative.h\r\ncomthreadpool.h -\u003e threadpoolnative.h\r\ncomwaithandle.h -\u003e waithandlenative.h\r\nCOMDouble -\u003e DoubleNative\r\nCOMSingle -\u003e SingleNative\r\nCOMInterlocked -\u003e InterlockedNative\r\nCOMPlusThrow -\u003e ThrowNative\r\n\r\nAm I on the right track? It\u0027s only my second issue",
                                           "updatedAt":  "2024-05-31T14:28:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_s0SU",
                                           "createdAt":  "2024-05-31T15:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The `Native` suffix should only be used for types that serves with corresponding managed type.\r\n\r\n\u003e ComPlusCall -\u003e CallNative\r\n\u003e ComPlusCallInfo -\u003e CallInfoNative\r\n\u003e ComPlusCallMethodDesc -\u003e CallMethodDescNative\r\n\u003e GenericCLRToCOMCallStub -\u003e GenericCallNativeStub\r\n\r\n\u003e Should I also rename class like `ComPlusMethodFrame` to `MethodFrameNative` ?\r\n\r\nThere should use `ComToClr` or `ClrToCom`.\r\n\r\n\u003e along with calls like COMDelegate::GetMethodDesc -\u003e ModuleNative_GetMethodDesc as noticed in the PR\r\n\r\nConverting should better be a separated PR other than renaming.\r\n\r\n\u003e COMPlusThrow -\u003e ThrowNative\r\n\r\nThese are native-only macros. `CLRThrow` should be better.",
                                           "updatedAt":  "2024-05-31T15:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_s82W",
                                           "createdAt":  "2024-05-31T15:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pierrebelin",
                                           "body":  "Thanks !\r\n\r\nI saw inside the solution types already named `CRLToCOMWorker`, I think it\u0027s a good idea to keep it for those usecases:\r\nComPlusCall -\u003e CRLToCOMCall\r\nComPlusCallInfo -\u003e CRLToCOMCallInfo\r\nComPlusCallMethodDesc -\u003e CRLToCOMCallMethodDesc\r\nGenericCLRToCOMCallStub -\u003e GenericCRLToCOMCallStub\r\n\r\nPerfect, I\u0027ll start to rename all on this and create a PR related",
                                           "updatedAt":  "2024-05-31T15:20:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_tAG2",
                                           "createdAt":  "2024-05-31T15:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkDq5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pierrebelin",
                                                                               "createdAt":  "2024-05-31T15:59:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I still suggest to start with a few cases per PR. Some of these like COMPlusThrow has quite big impact on the whole repo.",
                                           "updatedAt":  "2024-05-31T15:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_tSO1",
                                           "createdAt":  "2024-05-31T16:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pierrebelin",
                                           "body":  "No problem, I started with classes with ComPlus of COM interop related",
                                           "updatedAt":  "2024-05-31T16:11:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AsT15",
                                           "createdAt":  "2024-06-10T19:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlQ2FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-06-11T14:02:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "#102922 is not a complete fix for this issue.",
                                           "updatedAt":  "2024-06-10T19:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PtOF-",
                                           "createdAt":  "2024-10-14T11:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "syfFerdinand",
                                           "body":  "Hello everyone,\n\nI\u0027d like to contribute to this issue and work on renaming the types as suggested. Is there any specific guidance or parts of the list I should start with?\n\nI noticed some previous discussions regarding the complexity of certain types (like COMPlusThrow), so I can begin with the simpler cases to avoid conflicts. Any advice or confirmation on how to proceed would be greatly appreciated.\n\nThank you!",
                                           "updatedAt":  "2024-10-14T11:54:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PuJAQ",
                                           "createdAt":  "2024-10-14T13:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027m afraid this isn\u0027t suitable for beginners. Although completing the renaming isn\u0027t complex, it\u0027s better to have more knowledge of the internal mechanisms of the coreclr code base to understand the naming conventions, and find all references that can be missed by IDE.",
                                           "updatedAt":  "2024-10-14T13:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PvcEl",
                                           "createdAt":  "2024-10-14T15:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "syfFerdinand",
                                           "body":  "Thank you for your feedback!\n\nI understand that this issue might require deeper knowledge of the CoreCLR codebase. Given that, I’ll take a look at other issues where I can contribute while learning more about the internals. \n\nIf you have any suggestions for issues that might be more suitable for someone at my current level, I’d be happy to work on those as well.\n\nThanks again for your guidance!\n",
                                           "updatedAt":  "2024-10-14T15:19:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iTRn6",
                                           "createdAt":  "2025-03-14T00:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tikap",
                                           "body":  "As per comment history can the \"good first issue\" label be removed from this issue?",
                                           "updatedAt":  "2025-03-14T00:03:29Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Consider renaming COM* types in clr native code to CLR*",
        "labels":  [
                       "help wanted",
                       "area-VM-coreclr",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86703",
        "createdAt":  "2023-05-24T12:50:34Z",
        "number":  86703,
        "author":  "chhandakdey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T18:22:11Z",
        "body":  "### Description\n\nWe created a simple Api (simple-check) using .NET default template which has weather forecast api by default. I have used .NET 7 to create the Api.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12728691/b573ec24-0c1d-4211-b4cf-517582776677)\r\n\r\nI have used the below dockerfile -\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/aspnet:7.0-alpine AS base\r\nWORKDIR /app\r\nEXPOSE 80\r\nEXPOSE 443\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:7.0-alpine AS build\r\nWORKDIR /src\r\nCOPY [\"simple-check/simple-check.csproj\", \"simple-check/\"]\r\nRUN dotnet restore \"simple-check/simple-check.csproj\"\r\nCOPY . .\r\nWORKDIR \"/src/simple-check\"\r\nRUN dotnet build \"simple-check.csproj\" -c Release -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish \"simple-check.csproj\" -c Release -o /app/publish /p:UseAppHost=false\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\nENTRYPOINT [\"dotnet\", \"simple-check.dll\"]\r\n```\r\nI have used the below compose file -\r\n\r\n```\r\nversion: \u00273.9\u0027\r\n\r\nservices:\r\n  simple-check:\r\n    image: simple-check\r\n    build:\r\n      context: .\r\n      dockerfile: Dockerfile\r\n    ports:\r\n      - \"40898:80\"\r\n    deploy:\r\n      replicas: 1\r\n      update_config:\r\n        parallelism: 1\r\n        delay: 10s\r\n      restart_policy:\r\n        condition: on-failure\r\n```\r\n\r\nWhen I run it in my development system which is Macbook pro -\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12728691/97906ce6-e98f-491b-89bf-7a14ad559c6e)\r\n\r\nIts only occupying 18MiB - please check the last line\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12728691/f35cda8c-716f-45d3-96ac-5a92efccc00d)\r\n\r\nHowever, the same docker image if I run it in Mac Mini, its taking more than 1.5 G\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12728691/93f6f384-af88-4600-8e0a-b8ce760a7177)\r\n\r\nPlease check the first one -\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12728691/8efaa0e2-c6ec-4135-b45a-0d193b63eefe)\r\n\r\nI have tried with multi platform image also, but the result is same; So, wanted to know how to reduce the default memory usage? However, I can use docker resource limits to limit the resource and same is running fine with 200MB memory, but wanted to understand the reason behind the default memory usage.\r\n\r\n\n\n### Reproduction Steps\n\n1. Create a simple .NET 7 Api - like Weather Forecast.\r\n2. Add docker support.\r\n3. Run the application in Amd 64 machine using docker desktop.\r\n4. you notice the default memory usage is very low around 18 Mb.\r\n5. Run the same application (you can create multi platform image, but it does not differ the result) in Mac Mini (Arm 64 V8) using docker desktop.\r\n6. you notice the default memory usage is around 1.8Gb.\n\n### Expected behavior\n\nThe default memory usage should be same across amd 64 and arm 64 processors.\n\n### Actual behavior\n\namd 64 is taking very less memory compared to arm 64.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkBncQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dqG_U",
                                           "createdAt":  "2023-06-01T04:31:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC86HXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "oruchreis",
                                                                               "createdAt":  "2023-06-01T08:46:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "chhandakdey",
                                           "body":  "Any update on this issue?",
                                           "updatedAt":  "2023-06-01T04:31:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQGdx",
                                           "createdAt":  "2023-07-24T18:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I dont seem to be able to repro this issue. @chhandakdey can you please try on the latest 7.0 servicing release? @janvorli ",
                                           "updatedAt":  "2023-07-24T18:22:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Simple .NET 7 Api is using more than 1.5Gigs of memory for Apple Mac Mini Arm 64 processor ",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86749",
        "createdAt":  "2023-05-25T06:59:43Z",
        "number":  86749,
        "author":  "snltty",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyfXaQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TimLovellSmith",
                                            "createdAt":  "2023-09-09T00:05:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-07-24T18:15:57Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n**same application**\r\n\r\n![windows](https://github.com/dotnet/runtime/assets/10977033/39f41a44-0ad4-453c-ac6a-2b35338a95fc)\r\n\r\nlinux working set so  large\r\n![linux](https://github.com/dotnet/runtime/assets/10977033/8140c914-4038-42fa-94b6-85c33c556961)\r\n\r\n\r\n### Configuration\r\n\r\nwindows x64\r\nlinux debian x64\r\n\r\n### Regression?\r\n\r\n\r\n### Data\r\n\r\n### Analysis\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXZVOVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dIkXN",
                                           "createdAt":  "2023-05-25T08:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Can you provide some information about your application? For example what it\u0027s doing and how it\u0027s allocating objects.",
                                           "updatedAt":  "2023-05-25T08:50:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dIoo-",
                                           "createdAt":  "2023-05-25T09:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "Gen 0，Gen 1，Gen 2。no problem，i don\u0027t know  **working set** come from，why that need 78MB",
                                           "updatedAt":  "2023-05-25T09:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dKyTz",
                                           "createdAt":  "2023-05-25T15:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-05-25T15:30:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dLfzW",
                                           "createdAt":  "2023-05-25T17:57:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MSDN-WhiteKnight",
                                           "body":  "Is the \"Working set\" value on Linux a private working set, or includes memory shared with other processes (such as executable images for libraries loaded into multiple processes)? What tool generated this output?",
                                           "updatedAt":  "2023-05-25T17:57:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNCoG",
                                           "createdAt":  "2023-05-26T01:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "\u003e Is the \"Working set\" value on Linux a private working set, or includes memory shared with other processes (such as executable images for libraries loaded into multiple processes)? What tool generated this output?\r\n\r\n dotnet-counters\r\n\r\nproject     [/snltty/p2p-tunnel](https://github.com/snltty/p2p-tunnel)\r\n\r\nclient/client.service  or  server/server.service",
                                           "updatedAt":  "2023-05-26T01:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNIKS",
                                           "createdAt":  "2023-05-26T02:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Cc @mangod9 ",
                                           "updatedAt":  "2023-05-26T02:13:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNZZx",
                                           "createdAt":  "2023-05-26T04:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @snltty, would it be possible to provide a small repro for this? There are several factors which might affect working set, but primarily it would be related to amount of memory and # of cores on the machine/VM. Are both machine configurations similar for windows and linux? Also would be good to know what version of .NET you are using for this validation? \r\n\r\nThanks",
                                           "updatedAt":  "2023-05-26T04:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNpZU",
                                           "createdAt":  "2023-05-26T06:11:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "\u003e Hello @snltty, would it be possible to provide a small repro for this? There are several factors which might affect working set, but primarily it would be related to amount of memory and # of cores on the machine/VM. Are both machine configurations similar for windows and linux? Also would be good to know what version of .NET you are using for this validation?\r\n\u003e \r\n\u003e Thanks\r\n\r\n.NET 7.302\r\nwindows  CPU： i5 8400，Memory：8G 3600 * 2\r\nlinux  CPU：intel N2840，Memory：4G 1333\r\nlinux  already set **DOTNET_GCName=libclrgc.so**",
                                           "updatedAt":  "2023-05-26T06:15:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNqVt",
                                           "createdAt":  "2023-05-26T06:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "thanks for the info. Are you observing this with a simple helloworld style application or specifically for your application (would it possible to provide a repro?)\r\n\r\nAlso with the latest .NET 7 servicing release falling back to .NET 6 GC is no longer required. We have fixed the spurious 64mb of working set issue. ",
                                           "updatedAt":  "2023-05-26T06:16:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNrGE",
                                           "createdAt":  "2023-05-26T06:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "thank you，i will try  simple helloworld application",
                                           "updatedAt":  "2023-05-26T06:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dNtkq",
                                           "createdAt":  "2023-05-26T06:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "### code\r\n![3](https://github.com/dotnet/runtime/assets/10977033/cfd2f0ae-799d-46a9-8b05-215ab809b67d)\r\n\r\n### windows   3.1MB\r\n\r\n### linux\r\n![1](https://github.com/dotnet/runtime/assets/10977033/dc3b7dcd-d9ea-44f6-83bb-d3dce28b98c4)\r\n![2](https://github.com/dotnet/runtime/assets/10977033/5eb7612c-66f2-4826-94f7-812cb28d8430)\r\n",
                                           "updatedAt":  "2023-05-26T06:33:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dSOgJ",
                                           "createdAt":  "2023-05-26T23:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok thanks we will take a look. Is the windows number working set or \"active private working set\" in Task Manager (I notice about 25k working set for a simple HW app on my windows machine). Perhaps you should check with dotnet-counters as well on Windows to ensure you are looking at the same metric. ",
                                           "updatedAt":  "2023-05-26T23:13:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5datgo",
                                           "createdAt":  "2023-05-29T15:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "# windows\r\n![windows-runtime](https://github.com/dotnet/runtime/assets/10977033/1209f57b-a940-4e9e-abf7-7321a18b4f34)\r\n![windows-memory](https://github.com/dotnet/runtime/assets/10977033/72fb4dbc-dbdb-4333-88c0-7009991e0add)\r\n![windows-working-set](https://github.com/dotnet/runtime/assets/10977033/786453b0-e1e2-419c-ac9e-6abe0a530d73)\r\n\r\n# linux  2 cores  4GB 1333\r\n![linux](https://github.com/dotnet/runtime/assets/10977033/f30a8630-bdeb-425c-95f7-e95d295d84a4)\r\n![linux-runtime](https://github.com/dotnet/runtime/assets/10977033/6ee86fbb-a81a-426e-bb4f-68bed8508336)\r\n![dotnet-memory](https://github.com/dotnet/runtime/assets/10977033/be7739ae-dc91-48b3-89f7-a24dc9ea6e86)\r\n![dotnet-working-set](https://github.com/dotnet/runtime/assets/10977033/339e3ffc-235d-422f-bea6-2ad3462d7190)\r\n",
                                           "updatedAt":  "2023-05-30T02:27:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dgUC8",
                                           "createdAt":  "2023-05-30T16:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli to check since we recently did some analysis around working set on linux. @snltty, assume you are running the same app on both machines? Your earlier screenshot from few days ago shows working set of 37mb, but the recent one is 84mb -- what is different?",
                                           "updatedAt":  "2023-05-30T16:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dgY44",
                                           "createdAt":  "2023-05-30T16:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It seems that windows probably don\u0027t include assemblies and shared libraries in the value reported by the taskman. When we did the testing with a simple Web app, the managed assemblies alone consumed about 32 mb, then there were about 10MB from the native libraries of the .NET runtime and 11MB from 3rd party native libraries. The hello world would get somehow smaller numbers.",
                                           "updatedAt":  "2023-05-30T16:59:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dlU5V",
                                           "createdAt":  "2023-05-31T11:58:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snltty",
                                           "body":  "@mangod9 ， 5day ago，37MB is simple  hello world\r\n34MB and 78MB，is my project in Windows and Linux\r\n\r\nIt seems that the working set used by Linux is always larger than that of Windows，a lot，i don\u0027t know why\r\n\r\nPerhaps this is the normal situation？\r\n\r\nMy project just to using\r\n![1](https://github.com/dotnet/runtime/assets/10977033/027b9721-dca4-489b-a8e1-4f028ea53f6b)\r\n",
                                           "updatedAt":  "2023-05-31T12:04:29Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "NET7.0 use memory，linux  \u003e windows，so much~~~~~ more，why",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87173",
        "createdAt":  "2023-06-06T14:53:45Z",
        "number":  87173,
        "author":  "kunalspathak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:16:42Z",
        "body":  "On TE JSON benchmark, we have noticed that more time is spent on linux/arm64 in syscalls like `madvise`, `mprotect` and `mbind`.\r\n\r\nAmpere altra dual-socket:\r\n\r\n\u003cimg width=\"881\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/12488060/35d64918-3144-4d0b-acdc-2df881f5f9f2\"\u003e\r\n\r\nAmpere altra single-socket:\r\n\r\n\u003cimg width=\"900\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/12488060/a71ab8de-35fc-4c49-a45d-ad72bef1de80\"\u003e\r\n\r\nDell x64 r540:\r\n\r\n\u003cimg width=\"898\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/12488060/c6e1ce7b-1495-4ce4-8fd2-80d2c02777b0\"\u003e\r\n\r\nThe calls to mprotect have this backtrace:\r\n\r\n```\r\nCommitDoubleMappedMemory()\r\nUnlockedLoaderHeap::CommitPages()\r\nUnlockedLoaderHeap::GetMoreCommittedPages()\r\nUnlockedLoaderHeap::UnlockedAllocMemForCode_NoThrow() or UnlockedLoaderHeap::UnlockedAllocMem_NoThrow()\r\n```\r\n\r\nFlame graphs are courtesy of @a74nh ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObb9b3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eHG6R",
                                           "createdAt":  "2023-06-06T14:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "cc: @JulieLeeMSFT @a74nh ",
                                           "updatedAt":  "2023-06-06T14:54:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eH9xq",
                                           "createdAt":  "2023-06-06T17:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "When you analyze TE graphs - do you ignore the \"warm up\" part or this flamegraph represent the whole session?\r\n\r\nBecause when I want to profile througput/latency, I usually skip first, say 30 seconds in the PerfView.",
                                           "updatedAt":  "2023-06-06T17:07:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eH-aY",
                                           "createdAt":  "2023-06-06T17:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e My guess that UnlockedLoaderHeap::CommitPages is mostly startup related\r\n\r\nCould be and it will be good to understand that because we are also trying to improve arm64 startup. I saw them when I was profiling paint.net startup too.",
                                           "updatedAt":  "2023-06-06T17:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eMnYk",
                                           "createdAt":  "2023-06-07T10:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "\u003e When you analyze TE graphs - do you ignore the \"warm up\" part or this flamegraph represent the whole session?\r\n\u003e \r\n\u003e Because when I want to profile througput/latency, I usually skip first, say 30 seconds in the PerfView.\r\n\r\nThese were done in the order:\r\n- start aspnet\r\n- do a warmup wrk run of 15 seconds\r\n- start perf\r\n- do a wrk run of 15 seconds\r\n- stop perf\r\n",
                                           "updatedAt":  "2023-06-07T10:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eNHNi",
                                           "createdAt":  "2023-06-07T10:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "Some additional things to note:\r\n\r\nAlmost all of the time inside the madvise/mprotect/mbind is within the locking function osq_lock. The kernel is waiting for all the CPUs in the system - the more CPUs the more it has to wait for. For anything writing flag state, these calls are expensive - virtual memory areas (VMAs) are stored in a \"Maple Tree\" and access is via a read/write lock. Multiple concurrent readers are allowed but if a write lock is needed all the readers need to finish first. For example, the MADV_FREE flag the madvise code only needs a read lock for the vma traversal as it\u0027s not modifying the vma-\u003eflags. However DONTDUMP/DODUMP does need to modify the flags. Similarly for mprotect the VMA-\u003eflags are being modified thus a write lock is needed.\r\n\r\nI tried reducing the usage of these calls. Firstly I got rid of madvise calls with DODUMP/DONTDUMP which just dictates whether a map should be added to the coredump. Across all machines, performance did not appear to be effected. Looking at the flamegraphs, madvise had vanished from the graph, but the cost of mprotect and mbind increased, keeping the total time in osq_lock consistent with the original run. This suggests to me that the locking within osq_lock is completely saturated.\r\n\r\nNext I tried removing some of the mprotect calls (in addition to the above). Almost all the calls are due to memory allocation. One section in coreclr allocates a large chunk of memory, and then gives it out to the other parts of the vm in 4k chunks (via CommitDoubleMappedMemory). Each time this happens, it calls mprotect. I got rid of these calls and made the initial allocation give everything read+write+exec. Doing this _did_ reduce the amount of time spent in osq_lock overall. Curiously there also appeared to now be additional calls into mprotect from elsewhere in the GC. At a pure guess, this was allowing the GC to get through more work during the same timeframe, but I\u0027m not that familiar with that code. I tried the same to remove those calls too, but got stuck in segfaults.\r\n\r\nHaving a look at a run of the Java framework Netty, there are no calls to madvise/mprotect/mbind within the flamegraph. This suggests to me that OpenJDK isn\u0027t doing the same level of memory micromanagement that Coreclr is. Looking at the openjdk code, there are no uses of DODUMP/DONTDUMP\r\n\r\nI understand that any changes in these areas will have security implications, so any changes won\u0027t be as simple as just removing all the calls.\r\n",
                                           "updatedAt":  "2023-06-07T10:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eOtR2",
                                           "createdAt":  "2023-06-07T14:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@janvorli ",
                                           "updatedAt":  "2023-06-07T14:16:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ePNOH",
                                           "createdAt":  "2023-06-07T15:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@a74nh the DONTDUMP was added in https://github.com/dotnet/coreclr/pull/27089 to remedy a problem with huge core dumps . The core dumps were extremely large without it. \r\nAs for reserving memory as R+W + X instead of PROT_NONE, it would break the W^X support we\u0027ve introduced in .NET 6.0 (enabled by default in .NET 7). The W^X enabled can only have pages that are R+W or R+X, but not R+W+X. We could possibly map some memory as R+W or R+X from the very beginning, but when such memory is returned to the executable allocator and reused later, we would need to flip the protection in case the new block allocated from a place where there was a previous one had different protection. Also, not using PROT_NONE for memory that is just reserved gives up the protection against accessing memory that is not supposed to be accessible.\r\nIt would be interesting to see how much gain you get in say aspnet benchmarks with your change to make everything R+W+X from the very beginning to get understanding the performance difference.\r\n",
                                           "updatedAt":  "2023-06-07T15:18:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ePjBx",
                                           "createdAt":  "2023-06-07T16:09:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e to make everything R+W+X from the very beginning\r\n\r\nIs that equivalent to `DOTNET_EnableWriteXorExecute=0`?",
                                           "updatedAt":  "2023-06-07T16:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ePq1f",
                                           "createdAt":  "2023-06-07T16:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e Is that equivalent to `DOTNET_EnableWriteXorExecute=0`?\r\n\r\nFrom the protection point of view, I would say yes. From the fine-grained implementation detail, it is not. When W^X is enabled, it uses shared memory for the allocations so that it can create secondary RW mappings for RX regions.",
                                           "updatedAt":  "2023-06-07T16:29:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eUQhQ",
                                           "createdAt":  "2023-06-08T10:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "\u003e It would be interesting to see how much gain you get in say aspnet benchmarks with your change to make everything R+W+X from the very beginning to get understanding the performance difference.\r\n\r\nRunning the test 20 times (plus 1 warmup), and calculating standard deviation and coefficient of variation for each set of 20:\r\nRequests/sec Avg:271891 Std Dev: 1117.92 CV: 0.411164\r\nRequests/sec Avg:272652 Std Dev: 1555.01 CV: 0.570327\r\nRequests/sec Avg:272576 Std Dev: 1481.02 CV: 0.543341\r\nRequests/sec Avg:272581 Std Dev: 1297.21 CV: 0.4759\r\nRequests/sec Avg:271408 Std Dev: 1108.94 CV: 0.408589\r\nRequests/sec Avg:272940 Std Dev: 1444.37 CV: 0.52919\r\n\r\nWith DODUMP/DONTDUMP removed and removing most the calls to CommitDoubleMappedMemory(). Each set of 20 now looks like:\r\nRequests/sec Avg:274428 Std Dev: 900.245 CV: 0.328044\r\nRequests/sec Avg:273760 Std Dev: 1091.33 CV: 0.398644\r\nRequests/sec Avg:271993 Std Dev: 1166.95 CV: 0.429035\r\nRequests/sec Avg:272946 Std Dev: 1179.54 CV: 0.432153\r\nRequests/sec Avg:274146 Std Dev: 1182.08 CV: 0.431187\r\nRequests/sec Avg:271913 Std Dev: 970.991 CV: 0.357096\r\n\r\nIn total, the Requests/sec are up by about 1%.\r\nLooking at the CV values, it\u0027s a difference of 20%.\r\n\r\n(This is a single node altra machine with the test running across 16 CPUs. I was also alternating between which set of 20 runs I was doing).\r\n\r\n\r\n",
                                           "updatedAt":  "2023-06-08T10:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gKbas",
                                           "createdAt":  "2023-06-29T15:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@janvorli - did you get a chance to look into this?",
                                           "updatedAt":  "2023-06-29T15:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gK726",
                                           "createdAt":  "2023-06-29T16:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "we havent looked into this yet due to other priorities. ",
                                           "updatedAt":  "2023-06-29T16:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tcb_E",
                                           "createdAt":  "2023-12-01T14:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e @a74nh the DONTDUMP was added in [dotnet/coreclr#27089](https://github.com/dotnet/coreclr/pull/27089) to remedy a problem with huge core dumps . The core dumps were extremely large without it.\r\n\r\n@janvorli  - is it the case that without the calls to madvise with MADV_DODUMP or MADV_DONTDUMP, the memory will get included in coredump? If yes, can we just have calls with MADV_DONTDUMP and eliminate the calls with MADV_DODUMP because that memory will anyway get included in the coredump?",
                                           "updatedAt":  "2023-12-01T14:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tdvhU",
                                           "createdAt":  "2023-12-01T17:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "\u003e \u003e @a74nh the DONTDUMP was added in [dotnet/coreclr#27089](https://github.com/dotnet/coreclr/pull/27089) to remedy a problem with huge core dumps . The core dumps were extremely large without it.\r\n\u003e \r\n\u003e @janvorli - is it the case that without the calls to madvise with MADV_DODUMP or MADV_DONTDUMP, the memory will get included in coredump? If yes, can we just have calls with MADV_DONTDUMP and eliminate the calls with MADV_DODUMP because that memory will anyway get included in the coredump?\r\n\r\nLooking at the code, AIUI, memory can be in two states allocated and not committed (not visible to the subject application) or allocated and committed (visible to the subject application). When memory isn\u0027t committed it should be DONTDUMP, and when it is committed it should be DODUMP.\r\n\r\nThere\u0027s three over uses of DODUMP/DONTDUMP that I can see:\r\n\r\n1.\r\n`VirtualAlloc(MEM_COMMIT)`:\r\n- If memory not already allocated, then call `VIRTUALReserveMemory()` which calls `ReserveVirtualMemory()`. That does: `mmap() + mprotect() + madvise(DONTDUMP)`\r\n- Finally always `mprotect(`) + `madvise(DODUMP)`\r\n\r\nThe `DONTDUMP` in the above isn\u0027t required. Probably just needs an extra flag passing down to `ReserveVirtualMemory()` to skip the `madvise()`\r\n\r\n2.\r\n`VirtualProtect()` always calls `madvise` with the latest setting. However, it\u0027s possible the memory region already had that setting. Sadly, there\u0027s no way to query the kernel for the state.\r\nWould it possible to store the status of each chunk of memory - possibly in the RegionInformation? Not sure what extra memory and locking that would require.\r\n\r\n3.\r\n`VIRTUALResetMemory()` calls `madvise()` twice, once with `FREE` and once with `DONTDUMP`. These could be combined easily.\r\n\r\n\r\nIf all the above doesn\u0027t fix the issues, then I suspect it\u0027s just due to the amount of memory going back and too between committed and uncommitted.\r\n\r\n",
                                           "updatedAt":  "2023-12-01T17:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5teFW7",
                                           "createdAt":  "2023-12-01T18:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e Would it possible to store the status of each chunk of memory - possibly in the RegionInformation?\r\n\r\nWe actually want to move away from any accounting and windows style api simulation for virtual memory from PAL soon. So adding tracking of the state is something that would eventually be removed.\r\n\r\nOptimizing the cases that @a74nh has identified where we call madvise twice sound good to me.\r\n\r\nRegarding the issue in general though, I have not seen any real world benchmarks showing that the calls to madvice cause significant performance hit. The testing with removed madvise has shown only 1% difference in RPS and upto 20% difference in CV. That is very low and it might very well be a noise too.",
                                           "updatedAt":  "2023-12-01T18:41:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tng6u",
                                           "createdAt":  "2023-12-04T16:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "The graphs at the top of this issue are at least 6 months old now. So, I re-ran the tests on the latest HEAD.\r\n\r\nAmpere altra single-socket:\r\n\r\n![aspcore_bench-20231204140305-ent-arm-39-ubuntu-dotnet-benchmark](https://github.com/dotnet/runtime/assets/4146708/fb15db62-86a7-4248-b903-131689b5792c)\r\n\r\nSome things I noticed.\r\n* The part to the left of this is interesting (with backtrace `SVR...`). On the old graphs the backtrace was broken, but this has now been fixed. It is now obvious that this entire area is the GC.\r\n* The GC has _shrunk from 10% to 4%_. This is great.\r\n* However,  third of the time in the GC is spent in `mprotect()` and `madvise()`\r\n* The backtrace for these comes from `allocate_new_region()` + `generation_to_condemn()`\r\n\r\nThe GC section:\r\n\u003cimg width=\"1177\" alt=\"Screenshot 2023-12-04 at 16 14 02\" src=\"https://github.com/dotnet/runtime/assets/4146708/7bb3f0eb-0465-462c-9222-8c2a0f7c28cb\"\u003e\r\n\r\n* The changes myself and Kunal discussed above can be applied to the GC, but, they don\u0027t make any difference to these graphs. I will still raise a PR as they are improvements.\r\n* I suspect the time in `mprotect()` and `madvise()` is due to the .NET memory model where _allocated + uncommitted_ memory is marked as inaccessible, and _allocated + committed_ memory is given access permissions. If memory is changing a lot between these two states then the time in those syscalls makes sense.\r\n",
                                           "updatedAt":  "2023-12-04T16:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tuv7K",
                                           "createdAt":  "2023-12-05T15:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "I did a few more investigations. Rerunning the same test on multiple machines:\r\n\r\n**% of time spent in the GC:**\r\n- Altra N1 (Dual node): **9.82%**\r\n- Altra N1 (Single node): **4.11%**\r\n- Yitian N2: 0.53%\r\n- c7g V1: 0.9%\r\n- x86_64 epyc-7251: 0.11%\r\n\r\n\r\nI also noticed that the use of mprotect/madvise is dependant on the GC #define `USE_REGIONS`. Running the tests again:\r\n\r\n- Altra N1 (Dual node) with USE_REGIONS:\r\n  - Requests/sec Avg:228702 Std Dev: 12137.1 CV: 5.30693%\r\n  - Time spent in GC 9.82%\r\n- Altra N1 (Dual node) without USE_REGIONS:\r\n  - Requests/sec Avg:241285 Std Dev: 6784.61 CV: 2.81187%\r\n  - Time spent in GC 4.02%\r\n\r\nThis is a 5% performance boost, a halving of the CV (coefficient of variation), and halving the time spent in the GC.\r\n\r\n\r\n- Altra N1 (Single node) with USE_REGIONS:\r\n  - Requests/sec Avg:260657 Std Dev: 863.9 CV: 0.331432%\r\n  - Time spent in GC 4.11%\r\n- Altra N1 (Single node) without USE_REGIONS:\r\n  - Requests/sec Avg:261544 Std Dev: 1060.25 CV: 0.405379%\r\n  - Time spent in GC 3.61%\r\n\r\nHere the GC time has reduced, but the perf and CV difference is within noise.\r\n\r\nOther machines types showed no difference when changing USE_REGIONS.\r\n",
                                           "updatedAt":  "2023-12-05T15:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tu1b9",
                                           "createdAt":  "2023-12-05T15:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Thanks @a74nh for the experiments. So, seems `#USE_REGIONS` have more influence on dual node vs. single node. @mangod9 - do you recall if we have seen similar regressions?",
                                           "updatedAt":  "2023-12-05T15:14:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tvV5P",
                                           "createdAt":  "2023-12-05T16:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "we will have to take a look. @a74nh, are these measurements on the json benchmark still or a different benchmark? ",
                                           "updatedAt":  "2023-12-05T16:18:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tv1ve",
                                           "createdAt":  "2023-12-05T17:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "a74nh",
                                           "body":  "\u003ewe will have to take a look. @a74nh, are these measurements on the json benchmark still or a different benchmark?\r\n\r\nYes, it\u0027s the json benchmark.",
                                           "updatedAt":  "2023-12-05T17:13:14Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Arm64: Higher calls to madvise/mprotect/mbind",
        "labels":  [
                       "arch-arm64",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87858",
        "createdAt":  "2023-06-21T03:31:46Z",
        "number":  87858,
        "author":  "hyabean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-26T09:26:08Z",
        "body":  "### Description\r\n\r\nI have two programs that have encountered this error. AAAClient.exe crashed one time. And \r\nI\u0027ve come across with this fatal error (supposedly being ExecutionEngineException based on Googling for that exit code) that kills process whilst testing one fairly large application that deals with large scale data processing - Event Viewer captured the following details (crash address details appear to be consistent in 3 instances of this issue:\r\n\r\nApplication: AAAClient.exe\r\nCoreCLR Version: 6.0.21.52210\r\n.NET Version: 6.0.0\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 00007FF9476306EA (00007FF947570000) with exit code 80131506.\r\n\r\nExcerpt from 1 of the dmp files below. Full files available on request.\r\n\r\n\r\n```CONTEXT:  (.ecxr)\r\nrax=000000a6aa533000 rbx=00000097ee65f6f0 rcx=0000000000208800\r\nrdx=0000000000000018 rsi=0000000000000000 rdi=00000097ee65f200\r\nrip=00007ff9476306ea rsp=00000097ee65f930 rbp=000000a6aa533000\r\n r8=0000000000040000  r9=0000000001000214 r10=0000000000000020\r\nr11=000000a6b5423000 r12=0000000000000000 r13=000000a6aa532000\r\nr14=000000a6aa532938 r15=0000000000000001\r\niopl=0         nv up ei pl nz na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010204\r\ncoreclr!MethodTable::GetFlag [inlined in coreclr!WKS::gc_heap::revisit_written_page+0xba]:\r\n00007ff9`476306ea 8b02            mov     eax,dword ptr [rdx] ds:00000000`00000018=????????\r\nResetting default scope\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 00007ff9476306ea (coreclr!MethodTable::GetFlag)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000018\r\nAttempt to read from address 0000000000000018\r\n```\r\n\r\n\u003cremoved\u003e\r\n\r\n```\r\nSTACK_TEXT:  \r\n00000097`ee65f930 00007ff9`4762f2cb     : aaaaaaaa`aaaaaaaa aaaaaaaa`aaaaaaaa aaaaaaaa`aaaaaaaa 00000097`ee65fa38 : coreclr!WKS::gc_heap::revisit_written_page+0xba\r\n00000097`ee65f9d0 00007ff9`47687217     : 00007ff9`4760b001 aaaaaaaa`aaaaaaaa aaaaaaaa`aaaaaaaa aaaaaaaa`aaaaaaaa : coreclr!WKS::gc_heap::revisit_written_pages+0x177\r\n00000097`ee65fa90 00007ff9`4760053b     : 00007ff9`476d5f01 aaaaaaaa`aaaaaaaa 00007ff9`47570000 00000000`00000000 : coreclr!WKS::gc_heap::background_mark_phase+0x1f3\r\n00000097`ee65fb30 00007ff9`476bbb6c     : 00007ff9`476d5f01 00000000`00000000 00000000`00000000 aaaaaaaa`aaaaaaaa : coreclr!WKS::gc_heap::gc1+0x423\r\n00000097`ee65fb90 00007ff9`476d60ef     : 00007ff9`476d5f01 00007ff9`476bba90 00000097`ec9f83a0 00000097`eb604980 : coreclr!WKS::gc_heap::bgc_thread_function+0xb4\r\n00000097`ee65fbc0 00007ff9`554813f2     : 00007ff9`476d5f60 00000000`00000000 aaaaaaaa`aaaaaaaa aaaaaaaa`aaaaaaaa : coreclr!\u003clambda_4fc8bb1e4098c6fbe9a25a61985dcade\u003e::operator()+0x9f\r\n00000097`ee65fbf0 00007ff9`55f454f4     : 00007ff9`554813d0 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x22\r\n00000097`ee65fc20 00000000`00000000     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x34`\r\n```\r\n\r\n\r\nBBBServer.exe has no dump file when happened. \r\nApplication: BBBServer.exe\r\nCoreCLR Version: 6.0.21.52210\r\n.NET Version: 6.0.0\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 00007FFE5945715F (00007FFE59390000) with exit code 80131506.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nFatal error is inconsistent and application + data too large to create repro at this stage. \r\n\r\n### Expected behavior\r\n\r\nNot having fatal crash.\r\n\r\n### Actual behavior\r\n\r\nCrashes\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nCoreCLR Version: 6.0.21.52210\r\n.NET Version: 6.0.0\r\nIntel Xeon Gold 6230 server on Windows Server 2012 R2 DataCenter\r\n\r\n\r\n### Other information\r\n\r\n\"System.GC.Concurrent\": true,\r\n\"System.GC.Server\": false,\r\n\"System.Reflection.Metadata.MetadataUpdater.IsSupported\": false",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX8nvCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fXqzw",
                                           "createdAt":  "2023-06-21T04:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hyabean",
                                           "body":  "May related to  https://github.com/dotnet/runtime/pull/69106? Can this fix port back to branch release/6.0?",
                                           "updatedAt":  "2023-06-21T04:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fwoZ-",
                                           "createdAt":  "2023-06-26T04:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@hyabean would you be able to share some dumps when this issue repros? ",
                                           "updatedAt":  "2023-06-26T04:43:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fwohy",
                                           "createdAt":  "2023-06-26T04:43:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-06-26T04:43:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fye8J",
                                           "createdAt":  "2023-06-26T09:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hyabean",
                                           "body":  "\u003e @hyabean would you be able to share some dumps when this issue repros?\r\n\r\nsent by mail",
                                           "updatedAt":  "2023-06-26T09:26:01Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  ".NET Version: 6.0.0 Fatal Error The process was terminated due to an internal error in the .NET Runtime * with exit code 80131506(ExecutionEngineException?)",
        "labels":  [
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89165",
        "createdAt":  "2023-07-19T07:20:43Z",
        "number":  89165,
        "author":  "karmeli87",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-08T08:54:39Z",
        "body":  "### Description\r\n\r\n\r\nWe are running some stress tests on our database by inserting hundred of millions of documents.\r\nDuring one such test we got the following crash:\r\n\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup(System.Object ByRef, Void*, System.Object)\r\n   at System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper(System.Object ByRef, Void*, System.Object)\r\n   at Sparrow.Json.CachedProperties.UnlikelySortProperties(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e)\r\n   at Sparrow.Json.BlittableWriter`1[[Sparrow.Json.UnmanagedWriteBuffer, Sparrow, Version=6.0.0.0, Culture=neutral, PublicKeyToken=37f41c7f99471593]].WriteObjectMetadata(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e, Int64, Int32)\r\n   at Sparrow.Json.BlittableJsonDocumentBuilder.ReadInternal[[Sparrow.Json.BlittableJsonDocumentBuilder+WriteNone, Sparrow, Version=6.0.0.0, Culture=neutral, PublicKeyToken=37f41c7f99471593]]()\r\n   at Sparrow.Json.JsonOperationContext+\u003cParseToMemoryAsync\u003ed__65.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Sparrow.Json.JsonOperationContext+\u003cParseToMemoryAsync\u003ed__65, Sparrow, Version=6.0.0.0, Culture=neutral, PublicKeyToken=37f41c7f99471593]].MoveNext(System.Threading.Thread)\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at Sparrow.Utils.ZstdStream+\u003cReadAsync\u003ed__35.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Sparrow.Utils.ZstdStream+\u003cReadAsync\u003ed__35, Sparrow, Version=6.0.0.0, Culture=neutral, PublicKeyToken=37f41c7f99471593]].MoveNext(System.Threading.Thread)\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(Int32)\r\n   at System.Threading.Tasks.ValueTask`1+ValueTaskSourceAsTask+\u003c\u003ec[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003c.cctor\u003eb__4_0(System.Object)\r\n   at System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action`1\u003cSystem.Object\u003e, System.Object, Boolean, Boolean)\r\n   at System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\r\n   at System.Net.Sockets.SocketAsyncEventArgs+\u003c\u003ec.\u003c.cctor\u003eb__176_0(UInt32, UInt32, System.Threading.NativeOverlapped*)\r\n   at System.Threading.ThreadPoolTypedWorkItemQueue`2[[System.Threading.PortableThreadPool+IOCompletionPoller+Event, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Threading.PortableThreadPool+IOCompletionPoller+Callback, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n```\r\n\r\nA dump was automatically generated and is available here: https://drive.google.com/file/d/1mXzp3mASCkLaHmxG8fojnn9oV-IYZER_/view?usp=sharing\r\n\r\nHere is the version used: https://hibernatingrhinos.com/downloads/RavenDB%20for%20Windows%20x64/20230715-0102-Nightly\r\n\r\nReference to the code: https://github.com/ravendb/ravendb/blob/44a806981b4a4398b3b42bcf9604ac83d4df9d1d/src/Sparrow/Json/CachedProperties.cs#L324\r\n\r\nOS version: Windows 10 Version 19045 \r\n\r\nCLR version: 7.0.923.32018\r\n\r\n```\r\n0:047\u003e !analyze -v\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Exception Analysis                                   *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\nFailed to request MethodData, not in JIT code range\r\n\r\nKEY_VALUES_STRING: 1\r\n\r\n    Key  : AV.Dereference\r\n    Value: NullPtr\r\n\r\n    Key  : AV.Fault\r\n    Value: Read\r\n\r\n    Key  : Analysis.CPU.mSec\r\n    Value: 2093\r\n\r\n    Key  : Analysis.Elapsed.mSec\r\n    Value: 3311\r\n\r\n    Key  : Analysis.IO.Other.Mb\r\n    Value: 0\r\n\r\n    Key  : Analysis.IO.Read.Mb\r\n    Value: 1\r\n\r\n    Key  : Analysis.IO.Write.Mb\r\n    Value: 0\r\n\r\n    Key  : Analysis.Init.CPU.mSec\r\n    Value: 296\r\n\r\n    Key  : Analysis.Init.Elapsed.mSec\r\n    Value: 2339\r\n\r\n    Key  : Analysis.Memory.CommitPeak.Mb\r\n    Value: 177\r\n\r\n    Key  : CLR.Engine\r\n    Value: CORECLR\r\n\r\n    Key  : CLR.Version\r\n    Value: 7.0.923.32018\r\n\r\n    Key  : Failure.Bucket\r\n    Value: NULL_POINTER_READ_c0000005_coreclr.dll!ObjIsInstanceOfCore\r\n\r\n    Key  : Failure.Hash\r\n    Value: {065d61d5-ebc8-eed8-03df-c09bfba3540a}\r\n\r\n    Key  : Failure.Source.FileLine\r\n    Value: 2097\r\n\r\n    Key  : Failure.Source.FilePath\r\n    Value: D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp\r\n\r\n    Key  : Failure.Source.SourceServerCommand\r\n    Value: raw.githubusercontent.com/dotnet/runtime/8e9a17b2216f51a5788f8b1c467a4cf3b769e7d7/src/coreclr/vm/jithelpers.cpp\r\n\r\n    Key  : Timeline.OS.Boot.DeltaSec\r\n    Value: 382147\r\n\r\n    Key  : Timeline.Process.Start.DeltaSec\r\n    Value: 91190\r\n\r\n    Key  : WER.OS.Branch\r\n    Value: vb_release\r\n\r\n    Key  : WER.OS.Version\r\n    Value: 10.0.19041.1\r\n\r\n    Key  : WER.Process.Version\r\n    Value: 6.0.0.60\r\n\r\n\r\nFILE_IN_CAB:  Raven.Server.exe_230717_033345.dmp\r\n\r\nCOMMENT:  \r\n*** \"C:\\Program Files\\Procdump\\procdump.exe\" -accepteula -mp -j \"c:\\memdumps\" 2876 600 000002B280020000\r\n*** Just-In-Time debugger. PID: 2876 Event Handle: 600 JIT Context: .jdinfo 0x2b280020000\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nPROCESS_BAM_CURRENT_THROTTLED: 0\r\n\r\nPROCESS_BAM_PREVIOUS_THROTTLED: 0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nCONTEXT:  (.ecxr)\r\nrax=000000bdcc4be458 rbx=000000bdcc4be1f0 rcx=000002b28d36e090\r\nrdx=0000000000000130 rsi=000000bdcc4bda90 rdi=000000bdcc4bdd00\r\nrip=00007ff810b0de76 rsp=000000bdcc4be420 rbp=000000bdcc4be4a9\r\n r8=0000000000000000  r9=000002b30f800050 r10=0000000000000f57\r\nr11=0000000000000008 r12=0000000000000000 r13=0000000000000001\r\nr14=0000000000000000 r15=000002b285c0eb00\r\niopl=0         nv up ei pl zr na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010244\r\ncoreclr!MethodTable::GetFlag [inlined in coreclr!ObjIsInstanceOfCore+0x8a]:\r\n00007ff8`10b0de76 8b03            mov     eax,dword ptr [rbx] ds:000000bd`cc4be1f0=c0000005\r\nResetting default scope\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 00007ff810b0de76 (coreclr!MethodTable::GetFlag)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000000\r\nAttempt to read from address 0000000000000000\r\n\r\nPROCESS_NAME:  Raven.Server.exe\r\n\r\nREAD_ADDRESS:  0000000000000000 \r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\r\n\r\nEXCEPTION_CODE_STR:  c0000005\r\n\r\nEXCEPTION_PARAMETER1:  0000000000000000\r\n\r\nEXCEPTION_PARAMETER2:  0000000000000000\r\n\r\nSTACK_TEXT:  \r\n000000bd`cc4be420 00007ff8`10b0db3a     : 00000000`00000007 00000000`00000000 000000bd`cc4be5b9 00007ff8`10bf73ed : coreclr!ObjIsInstanceOfCore+0x8a\r\n000000bd`cc4be510 00007ff7`b3d7f106     : 00007ff7`b30b74f0 000002b2`8d36e0e8 000002b3`27d24e30 00000000`00000000 : coreclr!IsInstanceOfAny_NoCacheLookup+0x8a\r\n000000bd`cc4be670 00007ff7`b30b74f0     : 000002b2`8d36e0e8 000002b3`27d24e30 00000000`00000000 000002b3`0f816fd0 : System_Private_CoreLib!System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup+0x16\r\n000000bd`cc4be678 000002b2`8d36e0e8     : 000002b3`27d24e30 00000000`00000000 000002b3`0f816fd0 00007ff7`b379ff29 : 0x00007ff7`b30b74f0\r\n000000bd`cc4be680 000002b3`27d24e30     : 00000000`00000000 000002b3`0f816fd0 00007ff7`b379ff29 000002f3`8ef329b0 : 0x000002b2`8d36e0e8\r\n000000bd`cc4be688 00000000`00000000     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x000002b3`27d24e30\r\n\r\n\r\nFAULTING_SOURCE_LINE:  D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp\r\n\r\nFAULTING_SOURCE_FILE:  D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp\r\n\r\nFAULTING_SOURCE_LINE_NUMBER:  2097\r\n\r\nFAULTING_SOURCE_SRV_COMMAND:  https://raw.githubusercontent.com/dotnet/runtime/8e9a17b2216f51a5788f8b1c467a4cf3b769e7d7/src/coreclr/vm/jithelpers.cpp\r\n\r\nFAULTING_SOURCE_CODE:  \r\nNo source found for \u0027D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.h\u0027\r\n\r\n\r\nSYMBOL_NAME:  coreclr!ObjIsInstanceOfCore+8a\r\n\r\nMODULE_NAME: coreclr\r\n\r\nIMAGE_NAME:  coreclr.dll\r\n\r\nSTACK_COMMAND:  ~47s; .ecxr ; kb\r\n\r\nFAILURE_BUCKET_ID:  NULL_POINTER_READ_c0000005_coreclr.dll!ObjIsInstanceOfCore\r\n\r\nOS_VERSION:  10.0.19041.1\r\n\r\nBUILDLAB_STR:  vb_release\r\n\r\nOSPLATFORM_TYPE:  x64\r\n\r\nOSNAME:  Windows 10\r\n\r\nIMAGE_VERSION:  7.0.923.32018\r\n\r\nFAILURE_ID_HASH:  {065d61d5-ebc8-eed8-03df-c09bfba3540a}\r\n\r\nFollowup:     MachineOwner\r\n```\r\n\r\nNo apperent heap corruption\r\n\r\n```\r\n0:047\u003e !verifyheap\r\n10,001,159 objects verified, 0 errors.\r\nNo heap corruption detected.\r\n```\r\n\r\n\r\n```\r\nThread  47\r\nCurrent frame: coreclr!ObjIsInstanceOfCore + 0x8a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:2097]\r\nChild-SP         RetAddr          Caller, Callee\r\n000000BDCC4BE480 00007ff810bf7917 coreclr!SVR::gc_heap::a_fit_segment_end_p + 0x187 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:16819], calling coreclr!SVR::gc_heap::adjust_limit_clr [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:15839]\r\n000000BDCC4BE500 00007ff810b0db3a coreclr!IsInstanceOfAny_NoCacheLookup + 0x8a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:2225], calling coreclr!ObjIsInstanceOfCore [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:2080]\r\n000000BDCC4BE520 00007ff810bf73ed coreclr!SVR::gc_heap::allocate_soh + 0x2ad [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:17083], calling coreclr!SVR::gc_heap::a_fit_segment_end_p [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:16682]\r\n000000BDCC4BE590 00007ff7b3d7f106 (MethodDesc 00007ff7b115be48 + 0x16 System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup(System.Object ByRef, Void*, System.Object)), calling 00007ff810b0dab0 (stub for System.Runtime.CompilerServices.CastHelpers.IsInstanceOfAny_NoCacheLookup(Void*, System.Object))\r\n000000BDCC4BE628 00007ff810b0db1b coreclr!IsInstanceOfAny_NoCacheLookup + 0x6b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:2224], calling coreclr!LazyMachStateCaptureState\r\n000000BDCC4BE660 00007ff7b3d7f106 (MethodDesc 00007ff7b115be48 + 0x16 System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup(System.Object ByRef, Void*, System.Object)), calling 00007ff810b0dab0 (stub for System.Runtime.CompilerServices.CastHelpers.IsInstanceOfAny_NoCacheLookup(Void*, System.Object))\r\n000000BDCC4BE690 00007ff7b379ff29 (MethodDesc 00007ff7b115be30 + 0xa9 System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper(System.Object ByRef, Void*, System.Object)), calling (MethodDesc 00007ff7b115be48 + 0 System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup(System.Object ByRef, Void*, System.Object))\r\n000000BDCC4BE6B0 00007ff810bf6bf7 coreclr!SVR::GCHeap::Alloc + 0xb7 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:46314], calling coreclr!SVR::gc_heap::allocate_more_space [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp:18475]\r\n000000BDCC4BE6D0 00007ff7b3e223de (MethodDesc 00007ff7b2c5b928 + 0xde Sparrow.Json.CachedProperties.UnlikelySortProperties(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e)), calling (MethodDesc 00007ff7b115be18 + 0 System.Runtime.CompilerServices.CastHelpers.StelemRef(System.Array, IntPtr, System.Object))\r\n000000BDCC4BE6E0 00007ff7b3dc0ec6 (MethodDesc 00007ff7b166d488 + 0x76 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n000000BDCC4BE760 00007ff7b3ddb768 (MethodDesc 00007ff7b2c7b7d8 + 0xe8 Sparrow.Json.BlittableWriter`1[[Sparrow.Json.UnmanagedWriteBuffer, Sparrow]].WriteObjectMetadata(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e, Int64, Int32)), calling (MethodDesc 00007ff7b2c5b928 + 0 Sparrow.Json.CachedProperties.UnlikelySortProperties(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e))\r\n000000BDCC4BE7B0 00007ff7b43503aa (MethodDesc 00007ff7b3275570 + 0x26a Sparrow.Json.Parsing.UnmanagedJsonParser.Read()), calling coreclr!JIT_MemCpy\r\n000000BDCC4BE7C0 00007ff7b3d56e5d (MethodDesc 00007ff7b11f61f0 + 0x1dd System.Collections.Generic.Dictionary`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].FindValue(System.__Canon))\r\n000000BDCC4BE7D0 00007ff7b3ddc83f (MethodDesc 00007ff7b2c7b8f8 + 0x33f Sparrow.Json.BlittableWriter`1[[Sparrow.Json.UnmanagedWriteBuffer, Sparrow]].WriteValue(Byte*, Int32, Sparrow.Collections.FastList`1\u003cInt32\u003e, Sparrow.Json.BlittableJsonToken ByRef, UsageMode, System.Nullable`1\u003cInt32\u003e)), calling coreclr!JIT_MemCpy\r\n000000BDCC4BE870 00007ff7b4340d26 (MethodDesc 00007ff7b3276e68 + 0xd06 Sparrow.Json.BlittableJsonDocumentBuilder.ReadInternal[[Sparrow.Json.BlittableJsonDocumentBuilder+WriteNone, Sparrow]]()), calling (MethodDesc 00007ff7b2c7b7d8 + 0 Sparrow.Json.BlittableWriter`1[[Sparrow.Json.UnmanagedWriteBuffer, Sparrow]].WriteObjectMetadata(Sparrow.Collections.FastList`1\u003cPropertyTag\u003e, Int64, Int32))\r\n000000BDCC4BE8D0 00007ff810b64fb0 coreclr!JIT_GetSharedGCThreadStaticBase + 0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:1830], calling coreclr!__security_check_cookie [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000BDCC4BEE60 00007ff7b4480124 (MethodDesc 00007ff7b384fe00 + 0x1404 Sparrow.Json.JsonOperationContext+\u003cParseToMemoryAsync\u003ed__65.MoveNext()), calling (MethodDesc 00007ff7b3276e68 + 0 Sparrow.Json.BlittableJsonDocumentBuilder.ReadInternal[[Sparrow.Json.BlittableJsonDocumentBuilder+WriteNone, Sparrow]]())\r\n000000BDCC4BEE90 000000005b3943d7 libzstd_win_x64!ZSTD_decompressStream_simpleArgs + 0x59b7, calling libzstd_win_x64!ZSTD_decompressStream_simpleArgs + 0xe20\r\n000000BDCC4BF1B0 00007ff7b3dc0ec6 (MethodDesc 00007ff7b166d488 + 0x76 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n000000BDCC4BF220 00007ff7b4833b26 (MethodDesc 00007ff7b40e6518 + 0xf6 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib],[Sparrow.Json.JsonOperationContext+\u003cParseToMemoryAsync\u003ed__65, Sparrow]].MoveNext(System.Threading.Thread)), calling (MethodDesc 00007ff7b166d488 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n000000BDCC4BF230 00007ff7b3e2f9a1 (MethodDesc 00007ff7b1635098 + 0x21 System.Threading.Tasks.Task.FinishContinuations()), calling 00007ff810c125d0 (stub for System.Threading.Interlocked.Exchange(System.Object ByRef, System.Object))\r\n000000BDCC4BF260 00007ff810b64fb0 coreclr!JIT_GetSharedGCThreadStaticBase + 0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:1830], calling coreclr!__security_check_cookie [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000BDCC4BF2A0 00007ff7b4354197 (MethodDesc 00007ff7b1d7dc60 + 0xa7 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n000000BDCC4BF2C0 00007ff7b4374b47 (MethodDesc 00007ff7b344c200 + 0x97 Nito.Disposables.SingleDisposable`1[[System.__Canon, System.Private.CoreLib]].Dispose()), calling (MethodDesc 00007ff7b344c200 + 0xaf Nito.Disposables.SingleDisposable`1[[System.__Canon, System.Private.CoreLib]].Dispose())\r\n000000BDCC4BF310 00007ff7b4348677 (MethodDesc 00007ff7b16350b0 + 0x77 System.Threading.Tasks.Task.RunContinuations(System.Object)), calling (MethodDesc 00007ff7b1d7dc60 + 0 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n000000BDCC4BF330 00007ff7b4534569 (MethodDesc 00007ff7b396e4b0 + 0x5a9 Sparrow.Utils.ZstdStream+\u003cReadAsync\u003ed__35.MoveNext())\r\n000000BDCC4BF3B0 00007ff7b4534495 (MethodDesc 00007ff7b396e4b0 + 0x4d5 Sparrow.Utils.ZstdStream+\u003cReadAsync\u003ed__35.MoveNext()), calling (MethodDesc 00007ff7b1635098 + 0 System.Threading.Tasks.Task.FinishContinuations())\r\n000000BDCC4BF3D0 00007ff7b435cb86 (MethodDesc 00007ff7b246a000 + 0xbb6 Raven.Server.RavenServerStartup+\u003cRequestHandler\u003ed__11.MoveNext()), calling (MethodDesc 00007ff7b246a000 + 0xdbf Raven.Server.RavenServerStartup+\u003cRequestHandler\u003ed__11.MoveNext())\r\n000000BDCC4BF4C0 00007ff7b3dc0ec6 (MethodDesc 00007ff7b166d488 + 0x76 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n000000BDCC4BF530 00007ff7b484149f (MethodDesc 00007ff7b40e5e60 + 0xcf System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib],[Sparrow.Utils.ZstdStream+\u003cReadAsync\u003ed__35, Sparrow]].MoveNext(System.Threading.Thread)), calling (MethodDesc 00007ff7b166d488 + 0 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\r\n000000BDCC4BF570 00007ff810b64fb0 coreclr!JIT_GetSharedGCThreadStaticBase + 0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:1830], calling coreclr!__security_check_cookie [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000BDCC4BF5B0 00007ff7b4354197 (MethodDesc 00007ff7b1d7dc60 + 0xa7 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n000000BDCC4BF5D0 00007ff7b4365a18 (MethodDesc 00007ff7b1962198 + 0x68 Raven.Server.RavenServerStartup.RequestHandler(Microsoft.AspNetCore.Http.HttpContext)), calling (MethodDesc 00007ff7b2ee1398 + 0 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Raven.Server.RavenServerStartup+\u003cRequestHandler\u003ed__11, Raven.Server]](\u003cRequestHandler\u003ed__11 ByRef))\r\n000000BDCC4BF620 00007ff7b4348677 (MethodDesc 00007ff7b16350b0 + 0x77 System.Threading.Tasks.Task.RunContinuations(System.Object)), calling (MethodDesc 00007ff7b1d7dc60 + 0 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n000000BDCC4BF640 00007ff810b64fb0 coreclr!JIT_GetSharedGCThreadStaticBase + 0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp:1830], calling coreclr!__security_check_cookie [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000BDCC4BF6C0 00007ff7b43e6035 (MethodDesc 00007ff7b1892170 + 0x55 System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib]].TrySetResult(Int32)), calling (MethodDesc 00007ff7b1635098 + 0 System.Threading.Tasks.Task.FinishContinuations())\r\n000000BDCC4BF6D0 00007ff7b1ce6e1a (MethodDesc 00007ff7b1d7b508 + 0x3a System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib]].AwaitUnsafeOnCompleted[[System.Runtime.CompilerServices.TaskAwaiter, System.Private.CoreLib]](System.Runtime.CompilerServices.TaskAwaiter ByRef, System.Runtime.CompilerServices.IAsyncStateMachineBox)), calling (MethodDesc 00007ff7b1634e10 + 0 System.Threading.Tasks.Task.UnsafeSetContinuationForAwait(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean))\r\n000000BDCC4BF710 00007ff7b48412e3 (MethodDesc 00007ff7b40e5b50 + 0x83 System.Threading.Tasks.ValueTask`1+ValueTaskSourceAsTask+\u003c\u003ec[[System.Int32, System.Private.CoreLib]].\u003c.cctor\u003eb__4_0(System.Object)), calling (MethodDesc 00007ff7b1892170 + 0 System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib]].TrySetResult(Int32))\r\n000000BDCC4BF730 00007ff810b4e9b3 coreclr!GCHandleManager::DestroyHandleOfUnknownType + 0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gchandletable.cpp:129], calling coreclr!TableFreeSingleHandleToCache [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\handletablecache.cpp:768]\r\n000000BDCC4BF770 00007ff7b4373ef7 (MethodDesc 00007ff7b2d60880 + 0x37 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action`1\u003cSystem.Object\u003e, System.Object, Boolean, Boolean))\r\n000000BDCC4BF7A0 00007ff7b434f0fb (MethodDesc 00007ff7b2d56730 + 0x8b System.Net.Sockets.SocketAsyncEventArgs.\u003cCompleteCore\u003eg__CleanupIOCPResult|171_0()), calling 00007ff810c290e0 (stub for System.Runtime.InteropServices.GCHandle.InternalFree(IntPtr))\r\n000000BDCC4BF7E0 00007ff7b4373dbc (MethodDesc 00007ff7b2d60760 + 0x8c System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)), calling (MethodDesc 00007ff7b2d60880 + 0 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action`1\u003cSystem.Object\u003e, System.Object, Boolean, Boolean))\r\n000000BDCC4BF7F0 00007ff7b3dc6673 (MethodDesc 00007ff7b2d562c8 + 0xd3 System.Net.Sockets.SocketAsyncEventArgs.FinishOperationSyncSuccess(Int32, System.Net.Sockets.SocketFlags)), calling (MethodDesc 00007ff7b2d56730 + 0 System.Net.Sockets.SocketAsyncEventArgs.\u003cCompleteCore\u003eg__CleanupIOCPResult|171_0())\r\n000000BDCC4BF800 00007ff7b3dc494b (MethodDesc 00007ff7b1ca0808 + 0x1b System.Threading.ThreadPoolBoundHandle.GetOverlappedWrapper(System.Threading.NativeOverlapped*)), calling 00007ff810c33ac0 (stub for System.Threading.OverlappedData.GetOverlappedFromNative(System.Threading.NativeOverlapped*))\r\n000000BDCC4BF850 00007ff7b434ee90 (MethodDesc 00007ff7b2d63af8 + 0x130 System.Net.Sockets.SocketAsyncEventArgs+\u003c\u003ec.\u003c.cctor\u003eb__176_0(UInt32, UInt32, System.Threading.NativeOverlapped*))\r\n000000BDCC4BF870 00007ff7b434ec4b (MethodDesc 00007ff7b1d7a070 + 0x1b System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32, UInt32, System.Threading.NativeOverlapped*)), calling 00007ff810c33ac0 (stub for System.Threading.OverlappedData.GetOverlappedFromNative(System.Threading.NativeOverlapped*))\r\n000000BDCC4BF8B0 00007ff7b3e2de63 (MethodDesc 00007ff7b1ca3508 + 0x203 System.Threading.ThreadPoolTypedWorkItemQueue`2[[System.Threading.PortableThreadPool+IOCompletionPoller+Event, System.Private.CoreLib],[System.Threading.PortableThreadPool+IOCompletionPoller+Callback, System.Private.CoreLib]].System.Threading.IThreadPoolWorkItem.Execute())\r\n000000BDCC4BF9A0 00007ff7b3dc10fa (MethodDesc 00007ff7b1ca0b58 + 0x13a System.Threading.ThreadPoolWorkQueue.Dispatch())\r\n000000BDCC4BF9B8 00007ff7b3dc163e (MethodDesc 00007ff7b2cef7a0 + 0xde System.Threading.LowLevelLifoSemaphore.Wait(Int32, Boolean)), calling coreclr!ThreadNative_UninterruptibleSleep0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp:479]\r\n000000BDCC4BFA20 00007ff7b4530cf4 (MethodDesc 00007ff7b2cef608 + 0x1d4 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()), calling (MethodDesc 00007ff7b1ca0b58 + 0 System.Threading.ThreadPoolWorkQueue.Dispatch())\r\n000000BDCC4BFAA0 00007ff7b4530d42 (MethodDesc 00007ff7b2cef608 + 0x222 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()), calling coreclr!ThreadNative_UninterruptibleSleep0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp:479]\r\n000000BDCC4BFAB0 00007ff84154df75 combase!CoUninitialize + 0x135 [onecore\\com\\combase\\class\\compobj.cxx:3984], calling combase!__security_check_cookie [VCCRT\\vcstartup\\src\\gs\\amd64\\amdsecgs.asm:45]\r\n000000BDCC4BFB20 00007ff810c5fee3 coreclr!CallDescrWorkerInternal + 0x83\r\n000000BDCC4BFB60 00007ff810b0eed0 coreclr!DispatchCallSimple + 0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp:221], calling coreclr!CallDescrWorkerWithHandler [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp:54]\r\n000000BDCC4BFB70 00007ff8415cdd56 combase!RoInitialize + 0x26 [onecore\\com\\combase\\winrtbase\\winrtbase.cpp:351], calling combase!RoInitializeForApartmentType [onecore\\com\\combase\\winrtbase\\winrtbase.cpp:293]\r\n000000BDCC4BFBF0 00007ff810c508f3 coreclr!ThreadNative::KickOffThread_Worker + 0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp:158], calling coreclr!DispatchCallSimple [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp:171]\r\n000000BDCC4BFC40 00007ff810bb6961 coreclr!ETW::ThreadLog::FireThreadCreated + 0x39 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eventtrace.cpp:2599], calling coreclr!FireEtwThreadCreated [D:\\a\\_work\\1\\s\\artifacts\\obj\\coreclr\\windows.x64.Release\\inc\\clretwallmain.h:1677]\r\n000000BDCC4BFC50 00007ff810be9ec1 coreclr!ManagedThreadBase_DispatchMiddle + 0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:7342], calling ntdll!LdrpDispatchUserCallTarget\r\n000000BDCC4BFC60 00007ff810bb674c coreclr!ThreadStore::TransferStartedThread + 0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:5468], calling coreclr!ThreadSuspend::UnlockThreadStore [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp:1914]\r\n000000BDCC4BFC90 00007ff810bb6b40 coreclr!Thread::HasStarted + 0xf4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:1884], calling coreclr!CLRException::HandlerState::CleanupTry [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\clrex.cpp:791]\r\n000000BDCC4BFD30 00007ff810be9dd7 coreclr!ManagedThreadBase_DispatchOuter + 0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:7501], calling coreclr!ManagedThreadBase_DispatchMiddle [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:7302]\r\n000000BDCC4BFDD0 00007ff810be9cc9 coreclr!ThreadNative::KickOffThread + 0x79 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp:230], calling coreclr!ManagedThreadBase_DispatchOuter [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp:7453]\r\n000000BDCC4BFE30 00007ff841b77614 kernel32!BaseThreadInitThunk + 0x14, calling ntdll!LdrpDispatchUserCallTarget\r\n000000BDCC4BFE60 00007ff8429a26b1 ntdll!RtlUserThreadStart + 0x21, calling ntdll!LdrpDispatchUserCallTarget\r\n```\r\n\r\n```\r\n0:047\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n00 (Inline Function) --------`--------     coreclr!MethodTable::GetFlag [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.h @ 3522] \r\n01 (Inline Function) --------`--------     coreclr!MethodTable::HasComponentSize [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.h @ 1522] \r\n02 (Inline Function) --------`--------     coreclr!MethodTable::IsStringOrArray [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.h @ 1510] \r\n03 (Inline Function) --------`--------     coreclr!MethodTable::TestFlagWithMask [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.h @ 3507] \r\n04 (Inline Function) --------`--------     coreclr!MethodTable::HasInstantiation [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.inl @ 1021] \r\n05 (Inline Function) --------`--------     coreclr!Nullable::IsNullableForType+0x9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.inl @ 213] \r\n06 000000bd`cc4be420 00007ff8`10b0db3a     coreclr!ObjIsInstanceOfCore+0x8a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 2097] \r\n07 000000bd`cc4be510 00007ff7`b3d7f106     coreclr!IsInstanceOfAny_NoCacheLookup+0x8a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 2225] \r\n08 000000bd`cc4be670 00007ff7`b30b74f0     System_Private_CoreLib!System.Runtime.CompilerServices.CastHelpers.StelemRef_Helper_NoCacheLookup+0x16 [/_/src/coreclr/System.Private.CoreLib/src/System/Runtime/CompilerServices/CastHelpers.cs @ 623] \r\n09 000000bd`cc4be678 000002b2`8d36e0e8     0x00007ff7`b30b74f0\r\n0a 000000bd`cc4be680 000002b3`27d24e30     0x000002b2`8d36e0e8\r\n0b 000000bd`cc4be688 00000000`00000000     0x000002b3`27d24e30\r\n```\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6377808/47b7d0f2-e0f2-46ee-8978-d1115845fa88)\r\n\r\n\r\nPlease let me know if additional information is required.\r\n\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nFirst time it happened.\r\nHaven\u0027t tried to reproduce it yet.\r\nBut we run in a cluster of 5 nodes and this happened only on one of them.\r\n\r\n### Expected behavior\r\n\r\nNot to crash\r\n\r\n### Actual behavior\r\n\r\nProcess crashed\r\n\r\n### Regression?\r\n\r\nHard to tell, we constantly update to use the latest stable .net, but we do not run very often those stress tests and this is the first time it happened.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nOS version: Windows 10 Version 19045 x64\r\nCLR version: 7.0.923.32018\r\n\r\n### Other information\r\n\r\nReference to the code: https://github.com/ravendb/ravendb/blob/44a806981b4a4398b3b42bcf9604ac83d4df9d1d/src/Sparrow/Json/CachedProperties.cs#L324",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZgCgNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h6AMq",
                                           "createdAt":  "2023-07-19T18:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "we will look at the dump, but usually for such issues multiple dumps would be required to determine the root cause. ",
                                           "updatedAt":  "2023-07-19T18:56:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mAKA0",
                                           "createdAt":  "2023-09-08T08:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jandupej",
                                           "body":  "Can this be related to https://[dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/398094/logs/541](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/398094/logs/541) which I got on `Build Mono Product Build windows x64 release failed` in https://github.com/dotnet/runtime/pull/91393?",
                                           "updatedAt":  "2023-09-08T08:54:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Process crashed with Fatal error. Internal CLR error. (0x80131506)",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89776",
        "createdAt":  "2023-08-01T13:00:37Z",
        "number":  89776,
        "author":  "ayende",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6dzCw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcovr",
                                            "createdAt":  "2023-08-07T12:38:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koepalex",
                                            "createdAt":  "2023-09-04T10:12:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "felixse",
                                            "createdAt":  "2023-09-05T13:55:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramioh",
                                            "createdAt":  "2024-08-24T12:14:26Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-03-25T02:58:40Z",
        "body":  "### Description\r\n\r\nWhen looking into our process, we noticed a large number of entries like this:\r\n\r\n```\r\n7fb3b0895000-7fb3b0896000 rw-s 03ac6000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb3b0896000-7fb3b08a0000 ---s 03ac7000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb3b08a0000-7fb3b08ab000 rw-s 03ad1000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb3b08ab000-7fb3b08b0000 ---s 03adc000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb3b08b0000-7fb3b08b9000 rw-s 03ae1000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb3b08b9000-7fb3b08c0000 ---s 03aea000 00:01 2062                       /memfd:doublemapper (deleted)\r\n7fb427006000-7fb427007000 rw-s 00000000 00:01 2062                       /memfd:doublemapper (deleted)\r\n```\r\n\r\nThe process has been running for about 8 hours, and we have:\r\n\r\n```\r\nsudo cat /proc/10459/maps | grep doublemapper | wc -l\r\n3308\r\n```\r\n\r\nThat number is *not* stable and grows over time, but we are just now loading data into the system, not yet trying to stress it.\r\n\r\nLooking at the code, I found the source of that here:\r\nhttps://github.com/dotnet/runtime/blob/bd84336e095a882d2794dd08b64814918a010004/src/coreclr/minipal/Unix/doublemapping.cpp#L63\r\n\r\nBut looking at where this freed, I see:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bd84336e095a882d2794dd08b64814918a010004/src/coreclr/minipal/Unix/doublemapping.cpp#L99\r\n\r\nThis looks like this will only actually be freed on MaxOS, and not on Linux?\r\n\r\nFWIW, I couldn\u0027t find where this is _called_. \r\n\r\nIs this number of entries expected? Should we monitor this value?\r\nI understand that this is related to the way the JIT allocate memory? \r\n\r\n\r\nRelated, but we are seeing a large increase in memory usage in some production systems, which is not seen in .NET 6.0 but very noticeable in .NET 7.0\r\n\r\nI noticed this:\r\nhttps://github.com/dotnet/runtime/issues/80580\r\n\r\nAnd we are investigating whatever we do a lot of dynamic assembly generation (so far we don\u0027t think so, but can\u0027t rule it out).\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nWhen I started writing this post, I had:\r\n\r\n```\r\n sudo cat /proc/10459/maps | grep doublemapper | wc -l\r\n3308\r\n```\r\n\r\nBy the time I got here, I had:\r\n\r\n```\r\nsudo cat /proc/10459/maps | grep doublemapper | wc -l\r\n3312\r\n```\r\n\r\nSo I certainly think that there is something that work here.\r\nNote that at this point, the process in question was running for hours, basically in a big loop. So there should be no change in behavior nor would I expect it to run any JIT tiering or some such.\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nNot have the runtime allocate indefinitely memory\r\n\r\n### Actual behavior\r\n\r\nWe are seeing additional memory mapping over time\r\n\r\n### Regression?\r\n\r\nYes, we aren\u0027t seeing that in .NET 6.0\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo-iLIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jH_Te",
                                           "createdAt":  "2023-08-02T22:08:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@ayende that\u0027s an ifndef - so the doublemapper only deallocates on Linux. It\u0027s called from the destructor of `ExecutableAllocator`, which takes memory that\u0027s normally RX and creates an RW mapping as needed for W^X purposes. Lambdas that aren\u0027t cached and reflection can also cause such behavior too. cc: @janvorli ",
                                           "updatedAt":  "2023-08-02T22:08:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jIAC9",
                                           "createdAt":  "2023-08-02T22:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "I\u0027m sorry, didn\u0027t realize that this was `ifndef`, read that as `ifdef`.\r\nWhat do you mean by \"uncached lambda\"? \r\n\r\nIs there an expectation that this will grow without limit? What sort of reflection would cause this? ",
                                           "updatedAt":  "2023-08-02T22:12:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jIC4E",
                                           "createdAt":  "2023-08-02T22:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Actually, even in the lambda case of capturing context, I expect allocations of a managed object, but not jitting of new objects. Essentially, I expect tiering, loading, and some debugger operations to cause RX -\u003e RW paging. You can use dotnet counters to see if jitting method count increases. I am not sure what\u0027s causing the growth in this case. @janvorli, does this count against the real memory usage? Any ideas what might be contributing to this? I thought since the mapping is deleted it becomes free for the process. I do expect it to count against the max_map_count though. ",
                                           "updatedAt":  "2023-08-02T22:27:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jIGCs",
                                           "createdAt":  "2023-08-02T22:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The shared memory that is visible as `/memfd:doublemapper` is used for allocating all executable code for JIT and also for runtime generated helpers and data that need to be allocated close to code that references them. This is the base of the W^X feature that ensures that no memory in the process is writeable and executable at the same time. We double map executable code blocks are writeable memory temporarily to write or modify the code. ",
                                           "updatedAt":  "2023-08-02T22:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jK6s-",
                                           "createdAt":  "2023-08-03T11:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Hi,\r\nFor reference, we run the workload with `DOTNET_EnableWriteXorExecute=0` and we are seeing `10561` entries in the `/proc/PID/maps`\r\n\r\nIt is going up \u0026 down a bit but appears to be mostly stable.\r\n\r\nWithout this flag, we are seeing a _lot_ more mapping, and they are always increasing. \r\n\r\nMy expectation that with `W^X`, we\u0027ll _stop_ needing those once the system stabilized, but we saw overall increase over time even after hours of running.\r\n",
                                           "updatedAt":  "2023-08-03T11:22:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jaLsO",
                                           "createdAt":  "2023-08-07T12:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcovr",
                                           "body":  "We are currently facing a similar issue, where we found runtime crashes like this:\r\n```\r\nFatal error. The RW block to unmap was not found\r\nRepeat 2 times:\r\n--------------------------------\r\n   at System.Runtime.CompilerServices.RuntimeHelpers.CompileMethod(System.RuntimeMethodHandleInternal)\r\n--------------------------------\r\n   at System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type, System.Object)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(System.Linq.Expressions.LambdaExpression)\r\n   ...\r\n```\r\n\r\nThis seems to be the case because we run into the default maximum number of memory maps\r\n```\r\n$ sysctl vm.max_map_count\r\nvm.max_map_count = 65530\r\n```\r\n\r\nI wanted to find out why this is happening and by examining `/proc/1/maps` I can see that ~90% of all memorymaps are coming from doublemapper\r\n```sh\r\n$  cat /proc/1/maps | grep doublemapper | wc -l\r\n59588\r\n$  cat /proc/1/maps | wc -l\r\n63878\r\n```\r\n",
                                           "updatedAt":  "2023-08-07T12:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jalPr",
                                           "createdAt":  "2023-08-07T13:59:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "We also hit the limit on the # of maps recently in production.\r\n\r\nI\u0027m not sure how to point a finger, but it absolutely _feels_ like there is a leak here.",
                                           "updatedAt":  "2023-08-07T13:59:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jmkv8",
                                           "createdAt":  "2023-08-09T10:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "We looked in more detail on the `/proc/self/maps` and we see:\r\n\r\n``\r\n/memfd:doublemapper 7,462 times\r\nUnknown 34,901 times\r\n```\r\n\r\nThose unknown are looking roughly like: `7f9a8bb2e000-7f9b08000000 ---p 00000000 00:00 0`\r\n\r\nWe run roughly the same process on Windows as well, and looked at the VM Map results.\r\n\r\nWe have 268GB (!) of `Thread Execution Block` ? \r\nFor that matter you can see that there is a TEB here that is 90MB in size, which seems.. really high\r\n\r\n![image](https://github.com/dotnet/runtime/assets/116915/467c944c-3310-476c-8e97-16329632e1d3)\r\n\r\nHere is the vmmap data:\r\n\r\n[Raven-VMMap.zip](https://github.com/dotnet/runtime/files/12301035/Raven-VMMap.zip)\r\n\r\nAny ideas what we are looking at here?",
                                           "updatedAt":  "2023-08-09T10:18:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kF2vW",
                                           "createdAt":  "2023-08-15T16:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@ayende I wonder if it would be possible to run your app with and without W^X enabled for about the same time and then share the `/proc/{PID}/smaps` (`smaps` have more details than `maps`) for each of the cases. I\u0027d like to take a look at the mappings to see how they differ between those two cases, as you\u0027ve mentioned that the number of mappings looked stable with W^X disabled.\r\n",
                                           "updatedAt":  "2023-08-15T16:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lAdJu",
                                           "createdAt":  "2023-08-27T09:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "AWS: c5.xlarge\r\n\r\n```\r\n$  lsb_release -d\r\nDescription:    Ubuntu 22.04.2 LTS\r\n\r\n$ uname -a\r\nLinux ip-172-31-16-178 5.15.0-1031-aws #35-Ubuntu SMP Fri Feb 10 02:07:18 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$ wget https://daily-builds.s3.amazonaws.com/RavenDB-5.4.109-linux-x64.tar.bz2\r\n\r\n$ sudo apt install bzip\r\n\r\n$ tar -xf RavenDB-5.4.109-linux-x64.tar.bz2\r\n\r\n$ ./RavenDB/run.sh\r\n\r\n$ cat \u003c\u003cEOF \u003e RavenDB/Server/settings.json\r\n{\r\n    \"ServerUrl\": \"http://127.0.0.1:8080\",\r\n    \"Setup.Mode\": \"None\",\r\n    \"DataDir\": \"RavenData\",\r\n    \"License.Eula.Accepted\": true\r\n}\r\nEOF\r\n\r\n$ ./RavenDB/run.sh\r\n```\r\n\r\nIn the browser:\r\n- go to http://localhost:8080\r\n- Create database: Test\r\n\r\n$ $ curl \"http://localhost:8080/databases/test/admin/smuggler/import?url=https://twitter-2020-rvn-dump.s3.us-west-1.amazonaws.com/2023-03-29-07-46-59.ravendb-full-backup\"\r\n\r\n** Note: That is a _very_ large file.\r\n\r\nWhat happens under the covers is that we import a lot of data into RavenDB.\r\nThere should be no assembly generation in this process, and pretty much all the code that is involved is basically the same big loop.\r\n\r\n$  cat /proc/$(pidof Raven.Server)/smaps | grep memfd | wc -l\r\n\r\nWe see a very rapid growth to ~2,600 memfd items\r\nThen slow growth over time, this takes ~few minutes or so but adds another few over time.\r\n\r\n```\r\n[09:07:10] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l\r\n2652\r\n[09:07:11] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l\r\n2654\r\n[09:07:15] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l\r\n2654\r\n[09:07:28] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l\r\n2659\r\n[09:07:40] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l\r\n2669\r\n```\r\n\r\nHere is all the maps here:\r\ncat /proc/$(pidof Raven.Server)/maps |wc -l\r\n3958\r\n\r\nOutput from `smaps`:\r\n\r\n```\r\n7fed43c26000-7fed43c27000 r-xs 00167000 00:01 3072                       /memfd:doublemapper (deleted)\r\nSize:                  4 kB\r\nKernelPageSize:        4 kB\r\nMMUPageSize:           4 kB\r\nRss:                   4 kB\r\nPss:                   4 kB\r\nShared_Clean:          0 kB\r\nShared_Dirty:          0 kB\r\nPrivate_Clean:         0 kB\r\nPrivate_Dirty:         4 kB\r\nReferenced:            4 kB\r\nAnonymous:             0 kB\r\nLazyFree:              0 kB\r\nAnonHugePages:         0 kB\r\nShmemPmdMapped:        0 kB\r\nFilePmdMapped:         0 kB\r\nShared_Hugetlb:        0 kB\r\nPrivate_Hugetlb:       0 kB\r\nSwap:                  0 kB\r\nSwapPss:               0 kB\r\nLocked:                0 kB\r\nTHPeligible:    0\r\nProtectionKey:         0\r\nVmFlags: rd ex sh mr mw me ms sd\r\n7fed43c27000-7fed43c28000 rw-s 00168000 00:01 3072                       /memfd:doublemapper (deleted)\r\nSize:                  4 kB\r\nKernelPageSize:        4 kB\r\nMMUPageSize:           4 kB\r\nRss:                   4 kB\r\nPss:                   4 kB\r\nShared_Clean:          0 kB\r\nShared_Dirty:          0 kB\r\nPrivate_Clean:         0 kB\r\nPrivate_Dirty:         4 kB\r\nReferenced:            4 kB\r\nAnonymous:             0 kB\r\nLazyFree:              0 kB\r\nAnonHugePages:         0 kB\r\nShmemPmdMapped:        0 kB\r\nFilePmdMapped:         0 kB\r\nShared_Hugetlb:        0 kB\r\nPrivate_Hugetlb:       0 kB\r\nSwap:                  0 kB\r\nSwapPss:               0 kB\r\nLocked:                0 kB\r\nTHPeligible:    0\r\nProtectionKey:         0\r\nVmFlags: rd wr sh mr mw me ms sd\r\n```\r\n\r\nI tried running: `$ sudo strace -kfp $(pidof Raven.Server) -e trace=memfd_create`\r\n\r\nGave this output:\r\n\r\n```\r\nubuntu@ip-172-31-16-178:~$ sudo strace -kfp $(pidof Raven.Server) -e trace=memfd_create\r\nstrace: Process 2495 attached with 39 threads\r\nstrace: Process 2856 attached\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2861ac6]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e4535]\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2861abb]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e4535]\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2861d6b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e4535]\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2861abb]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e4535]\r\n[pid  2856] +++ exited with 0 +++\r\n[pid  2640] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x27ad3c5]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e66df]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee81a]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3b57]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3aa4]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee24e]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3947]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f389e]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ecbc4]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f2849]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f2691]\r\n \u003e /memfd:doublemapper (deleted)() [0x2833af0]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28331a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x27edb9c]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832f5d]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee36f]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832d2e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e8d06]\r\n \u003e /memfd:doublemapper (deleted)() [0x2741f2d]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832b0e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x28018a8]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28328fe]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fb6a5]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28326de]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x281863f]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x283249e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x2817aed]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x283226e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x2817487]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2831d1e]\r\n \u003e /memfd:doublemapper (deleted)() [0x28135c2]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fbd3c]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2814b19]\r\n \u003e /memfd:doublemapper (deleted)() [0x2754c86]\r\n \u003e /memfd:doublemapper (deleted)() [0x2727c5c]\r\n \u003e /home/ubuntu/RavenDB/Server/System.Private.CoreLib.dll() [0x228532]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x2bf057) [0x4c4a57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xee07e) [0x2f3a7e]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106182) [0x30bb82]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb699a) [0x2bc39a]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb6f9d) [0x2bc99d]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106257) [0x30bc57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x44c1ce) [0x651bce]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__xmknodat+0x230) [0x126a00]\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__nptl_death_event+0x187) [0x91197]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_cond_wait+0x211) [0x93ac1]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x43f9db) [0x6453db]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x43f691) [0x645091]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x444072) [0x649a72]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x4442a9) [0x649ca9]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1d273a) [0x3d813a]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1d6fe5) [0x3dc9e5]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x15f287) [0x364c87]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x2c00bd) [0x4c5abd]\r\n \u003e /memfd:doublemapper (deleted)() [0x280fa88]\r\n \u003e /memfd:doublemapper (deleted)() [0x280f514]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f6b78]\r\n \u003e /memfd:doublemapper (deleted)() [0x280cec7]\r\n \u003e /memfd:doublemapper (deleted)() [0x2845d08]\r\n \u003e /memfd:doublemapper (deleted)() [0x2843a70]\r\n \u003e /memfd:doublemapper (deleted)() [0x27b77d8]\r\n \u003e /memfd:doublemapper (deleted)() [0x22d9c97]\r\n \u003e /memfd:doublemapper (deleted)() [0x22d992c]\r\n \u003e /memfd:doublemapper (deleted)() [0x1e676d7]\r\n \u003e /memfd:doublemapper (deleted)() [0x1e65733]\r\n \u003e /home/ubuntu/RavenDB/Server/System.Private.CoreLib.dll() [0x216dfb]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x2bf057) [0x4c4a57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xee07e) [0x2f3a7e]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106182) [0x30bb82]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb699a) [0x2bc39a]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb6f9d) [0x2bc99d]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106257) [0x30bc57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x44c1ce) [0x651bce]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__xmknodat+0x230) [0x126a00]\r\n[pid  2640] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x41d08d) [0x622a8d]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x42cdc3) [0x6327c3]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x43b0fa) [0x640afa]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1d73e6) [0x3dcde6]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1356b9) [0x33b0b9]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x224766) [0x42a166]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x23cce5) [0x4426e5]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x26ec31) [0x474631]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x13ae0f) [0x34080f]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1399eb) [0x33f3eb]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x1561b4) [0x35bbb4]\r\n \u003e /memfd:doublemapper (deleted)() [0x27409d7]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ebcc7]\r\n \u003e /memfd:doublemapper (deleted)() [0x27eaa2f]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ea354]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e531e]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee81a]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3b57]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3aa4]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee24e]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f3947]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f389e]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ecbc4]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f2849]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f2691]\r\n \u003e /memfd:doublemapper (deleted)() [0x2833af0]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28331a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x27edb9c]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832f5d]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27ee36f]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832d2e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27e8d06]\r\n \u003e /memfd:doublemapper (deleted)() [0x2741f2d]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2832b0e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x28018a8]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28328fe]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fb6a5]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x28326de]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x281863f]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x283249e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x2817aed]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x283226e]\r\n \u003e /memfd:doublemapper (deleted)() [0x276492b]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724853]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe57b]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fe4a6]\r\n \u003e /memfd:doublemapper (deleted)() [0x2817487]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2831d1e]\r\n \u003e /memfd:doublemapper (deleted)() [0x28135c2]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x27fbd3c]\r\n \u003e /memfd:doublemapper (deleted)() [0x2724dd9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2814b19]\r\n \u003e /memfd:doublemapper (deleted)() [0x2754c86]\r\n \u003e /memfd:doublemapper (deleted)() [0x2727c5c]\r\n \u003e /home/ubuntu/RavenDB/Server/System.Private.CoreLib.dll() [0x228532]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x2bf057) [0x4c4a57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xee07e) [0x2f3a7e]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106182) [0x30bb82]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb699a) [0x2bc39a]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb6f9d) [0x2bc99d]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106257) [0x30bc57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x44c1ce) [0x651bce]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__xmknodat+0x230) [0x126a00]\r\nstrace: Process 2857 attached\r\n[pid  2527] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=2495, si_uid=1000} ---\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__nss_database_lookup+0x3784a) [0x1afbba]\r\n \u003e /memfd:doublemapper (deleted)() [0x2720b31]\r\n \u003e /memfd:doublemapper (deleted)() [0x2850c63]\r\n \u003e /memfd:doublemapper (deleted)() [0x2853650]\r\n \u003e /memfd:doublemapper (deleted)() [0x2852fa1]\r\n \u003e /memfd:doublemapper (deleted)() [0x27f6bcf]\r\n \u003e /memfd:doublemapper (deleted)() [0x280cec7]\r\n \u003e /memfd:doublemapper (deleted)() [0x2845d08]\r\n \u003e /memfd:doublemapper (deleted)() [0x2843a70]\r\n \u003e /memfd:doublemapper (deleted)() [0x27b77d8]\r\n \u003e /memfd:doublemapper (deleted)() [0x22d9c97]\r\n \u003e /memfd:doublemapper (deleted)() [0x22d992c]\r\n \u003e /memfd:doublemapper (deleted)() [0x1e676d7]\r\n \u003e /memfd:doublemapper (deleted)() [0x1e65733]\r\n \u003e /home/ubuntu/RavenDB/Server/System.Private.CoreLib.dll() [0x216dfb]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x2bf057) [0x4c4a57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xee07e) [0x2f3a7e]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106182) [0x30bb82]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb699a) [0x2bc39a]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0xb6f9d) [0x2bc99d]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x106257) [0x30bc57]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so(GetCLRRuntimeHost+0x44c1ce) [0x651bce]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(__xmknodat+0x230) [0x126a00]\r\n```\r\n\r\n\r\nI then killed the RavenDB process:\r\n\r\n```\r\n$ export DOTNET_EnableWriteXorExecute=0\r\n$ ./RavenDB/run.sh\r\n```\r\n\r\nI deleted and re-created the Test database and then:\r\n\r\n```\r\n$ curl \"http://localhost:8080/databases/test/admin/smuggler/import?url=https://twitter-2020-rvn-dump.s3.us-west-1.amazonaws.com/2023-03-29-07-46-59.ravendb-full-backup\"\r\n```\r\n\r\nObviously, there are no `memfd` items in the maps there, but I tried:\r\n\r\n```\r\n[09:19:47] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps |  wc -l\r\n4123\r\n[09:19:56] ubuntu@ip-172-31-16-178:~$ cat /proc/$(pidof Raven.Server)/maps |  wc -l\r\n4129\r\n```\r\nI\u0027m adding the full maps from two times, so you can see this over time (without `W^X`).\r\n[maps-no-w^x.zip](https://github.com/dotnet/runtime/files/12447676/maps-no-w.x.zip)\r\n\r\n\r\nAnd here is the smaps output for both modes:\r\n\r\n[smaps.zip](https://github.com/dotnet/runtime/files/12447677/smaps.zip)\r\n",
                                           "updatedAt":  "2023-08-27T09:28:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5loFud",
                                           "createdAt":  "2023-09-04T10:23:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "koepalex",
                                           "body":  "I\u0027m currently try to understand why in our application, the process memory (full memory dump) is way bigger, than what we \"use\" (details see: https://stackoverflow.com/questions/77023695/missmatch-between-expected-memory-size-of-an-dotnet-application-and-real-consume )\r\n\r\nSo today I checked `/proc\u003cpid\u003e/maps` and saw that **2452** entries out of **3265** contain `/memfd:doublemapper(deleted)` \r\n@ayende do you also a missmatch in the expected memory size (Heaps, Stacks, Modules) and the consumed process memory?",
                                           "updatedAt":  "2023-09-04T10:23:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lozX9",
                                           "createdAt":  "2023-09-04T12:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Yes, we are also seeing some weirdness around that.",
                                           "updatedAt":  "2023-09-04T12:34:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1TBR",
                                           "createdAt":  "2023-09-19T10:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "I just tested this on .NET 8.0 RC1, we are seeing (still) an increase in the number of `memfd` files over time.\r\n\r\nI can reproduce this quite easily:\r\n\r\n* starting RavenDB\r\n* `cat /proc/$(pidof Raven.Server)/maps | grep memfd | wc -l` == 838\r\n* create (empty) database\r\n* `cat ...` == 909\r\n* create sample data\r\n* `cat ...` == 1996\r\n* reset an index\r\n* `cat ...` == 2000\r\n* reset an index\r\n* `cat ...` == 2004\r\n* reset an index\r\n* `cat ...` == 2007\r\n\r\nI\u0027m getting some results from this:\r\n```\r\n strace -f --instruction-pointer --stack-traces -e memfd_create  RavenDB/Server/Raven.Server\r\n```\r\n\r\n```\r\n[pid  7658] [00007f00a0346c81] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=7565, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2d67c81]\r\n \u003e /memfd:doublemapper (deleted)() [0x2da928e]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ff791]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ffc2b]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ff48e]\r\n \u003e /memfd:doublemapper (deleted)() [0x68c1d16]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ee05c]\r\n \u003e /memfd:doublemapper (deleted)() [0x68dd66c]\r\n \u003e /memfd:doublemapper (deleted)() [0x6821b7f]\r\n \u003e /memfd:doublemapper (deleted)() [0x636d5a2]\r\n \u003e /memfd:doublemapper (deleted)() [0x223ef8d]\r\n \u003e /memfd:doublemapper (deleted)() [0x223c6d9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2d925b4]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x49b7c7]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2d5df6]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2ebab2]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2a4e05]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2a53bd]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2ebb88]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x612a2e]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e unexpected_backtracing_error [0x135e]\r\n[pid  7579] [????????????????] +++ exited with 0 +++\r\n[pid  7658] [00007f00a0389e27] --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=7565, si_uid=1000} ---\r\n \u003e /memfd:doublemapper (deleted)() [0x2daae27]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ffe9c]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ff48e]\r\n \u003e /memfd:doublemapper (deleted)() [0x68c1d16]\r\n \u003e /memfd:doublemapper (deleted)() [0x68ee05c]\r\n \u003e /memfd:doublemapper (deleted)() [0x68dd66c]\r\n \u003e /memfd:doublemapper (deleted)() [0x6821b7f]\r\n \u003e /memfd:doublemapper (deleted)() [0x636d5a2]\r\n \u003e /memfd:doublemapper (deleted)() [0x223ef8d]\r\n \u003e /memfd:doublemapper (deleted)() [0x223c6d9]\r\n \u003e /memfd:doublemapper (deleted)() [0x2d925b4]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x49b7c7]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2d5df6]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2ebab2]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2a4e05]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2a53bd]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x2ebb88]\r\n \u003e /home/ubuntu/RavenDB/Server/libcoreclr.so() [0x612a2e]\r\n \u003e /usr/lib/x86_64-linux-gnu/libc.so.6(pthread_condattr_setpshared+0x513) [0x94b43]\r\n \u003e unexpected_backtracing_error [0x7ebf2e4eef40]\r\n```\r\n\r\nI can\u0027t get symbols from `strace`, and I can\u0027t get `lldb` (where I do get symbols) to stop on the right location.\r\n\r\nRunning with: `b VMToOSInterface::CreateDoubleMemoryMapper` gives the right output, but doesn\u0027t actually stop.\r\n\r\n",
                                           "updatedAt":  "2023-09-19T10:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m5aIe",
                                           "createdAt":  "2023-09-19T19:07:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHPO7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2023-09-19T21:37:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@ayende `dotnet symbol` should be able to get them for you with the `--symbols` flag if it\u0027s the Microsoft-built runtime: https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-symbol",
                                           "updatedAt":  "2023-09-19T19:07:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m8MIF",
                                           "createdAt":  "2023-09-20T06:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Yes, I tried running that, it didn\u0027t seem to matter in terms of strace, it did work with lldb, I think, but couldn\u0027t get the breakpoint to hit.",
                                           "updatedAt":  "2023-09-20T06:34:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nNxtA",
                                           "createdAt":  "2023-09-22T16:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e it didn\u0027t seem to matter in terms of strace\r\n\r\nInterestingly, I\u0027ve seen the symbols both working and not working with strace on the same Ubuntu 22.04 (except that one was in WSL2 - that didn\u0027t work, and the other in a docker container - which worked). I am currently trying to figure out what makes it different, since I need to get it working for an investigation I am doing.",
                                           "updatedAt":  "2023-09-22T16:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tSf77",
                                           "createdAt":  "2023-11-30T11:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theolivenbaum",
                                           "body":  "@janvorli seeing something similar on our application, over \u003e16k `/memfd:doublemapper (deleted)` after a few days of uptime. Tested on .NET8, but probably the same on .NET7 was we had strange problems with OOM in the past.\r\n\r\nWe do generate assemblies at runtime using [Microsoft.CodeAnalysis.Scripting.Script\u003cT\u003e](https://github.com/dotnet/roslyn/blob/main/src/Scripting/Core/Script.cs), is this known for leaking memory like in #80580?\r\n\r\nPossibly related: https://github.com/dotnet/roslyn/issues/52217 and https://github.com/dotnet/roslyn/issues/41722",
                                           "updatedAt":  "2023-11-30T11:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tWbAh",
                                           "createdAt":  "2023-11-30T21:33:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOG7aA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2023-11-30T21:34:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@theolivenbaum this is not a leak, the number of allocations of regions marked with /memfd:doublemapper are expected to grow when runtime compiles more and more code. If this code is not inside of a collectible AssemblyLoadContext and thus it is not unloadable, this stuff is not freed either. ",
                                           "updatedAt":  "2023-11-30T21:33:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tWbg7",
                                           "createdAt":  "2023-11-30T21:35:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theolivenbaum",
                                           "body":  "\u003e @theolivenbaum this is not a leak, the number of allocations of regions marked with /memfd:doublemapper are expected to grow when runtime compiles more and more code. If this code is not inside of a collectible AssemblyLoadContext and thus it is not unloadable, this stuff is not freed either. \n\nThanks! I\u0027m changing our code to use AssemblyLoadContext, I\u0027ll check again in a week to see how it behaves ",
                                           "updatedAt":  "2023-11-30T21:35:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aJI0c",
                                           "createdAt":  "2025-01-13T02:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stg609",
                                           "body":  "How\u0027s it going ? \nWe also generate assemblies at runtime using `Microsoft.CodeAnalysis.Scripting.Script` and **collectiable** `AssemblyLoadContext` for serveral days, the memory has easily reached 3.5 GiB out of a total of 4.5 GiB, ultimately resulting in OOMKilled.  \nThe number of alived `AssemblyLoadContext` is less than 100. (I have triggered GC.Collect() serveral times.)\n\nThe grafana shows lots of memory is cache.\n![Image](https://github.com/user-attachments/assets/07559a62-2c2b-447c-b433-bf0b72c43d10)\n\nThe result of `cat /sys/fs/cgroup/memory/memory.stat`\n```\ncache 2491609088\nrss 1338695680\nrss_huge 815792128\nshmem 2400313344   \u003c----  looks like an issue\nmapped_file 394776576\ndirty 4096\nwriteback 0\nswap 0\npgpgin 54481949\npgpgout 53756387\npgfault 70779121\npgmajfault 237\ninactive_anon 2270507008\nactive_anon 1533079552\ninactive_file 46526464\nactive_file 44769280\nunevictable 0\nhierarchical_memory_limit 4718592000\nhierarchical_memsw_limit 4718592000\ntotal_cache 2491609088\ntotal_rss 1338695680\ntotal_rss_huge 815792128\ntotal_shmem 2400313344\ntotal_mapped_file 394776576\ntotal_dirty 4096\ntotal_writeback 0\ntotal_swap 0\ntotal_pgpgin 54481949\ntotal_pgpgout 53756387\ntotal_pgfault 70779121\ntotal_pgmajfault 237\ntotal_inactive_anon 2270507008\ntotal_active_anon 1533079552\ntotal_inactive_file 46526464\ntotal_active_file 44769280\ntotal_unevictable 0\n```\nI created a dump file using `dotnet-dump` before OOMKilled. And below is the result of some commands:\n\n`eeversion`\n```\n\u003e eeversion                                                                                                                                                                                                                                                                \n8.0.1024.46610\n8.0.1024.46610 @Commit: 81cabf2857a01351e5ab578947c7403a5b128ad1\nServer mode with 3 gc heaps\nSOS Version: 9.0.11.3101 @Commit: 5b61d34de04d6100e6003415f7d7e9c4b971afd4\n```\n\n`eeheap -gc` shows the size of gc heap is less than 400M:\n```\nGC Allocated Heap Size:    Size: 0x1622e368 (371385192) bytes.\nGC Committed Heap Size:    Size: 0x17562000 (391520256) bytes.\n```\n\n`dumpheap -type LoaderAllocator` shows only 65 alived AssemblyLoadContext :\n```\nStatistics:\n          MT Count TotalSize Class Name\n7f459ad18488    66     1,584 System.Reflection.LoaderAllocatorScout\n7f459ad18360    65     3,120 System.Reflection.LoaderAllocator\nTotal 131 objects, 4,704 bytes\n```\n\n`!maddress` shows the size of Image is 3.54gb:\n```\n +----------------------------------------------------------------------+ \n | Memory Type         |          Count |         Size |   Size (bytes) | \n +----------------------------------------------------------------------+ \n | Image               |            980 |       3.54gb |  3,801,517,056 | \n | PAGE_READWRITE      |          1,178 |       1.17gb |  1,255,059,968 | \n | Stack               |             66 |     499.35mb |    523,604,992 | \n | GCHeap              |             61 |     373.38mb |    391,520,256 | \n | HighFrequencyHeap   |          1,829 |     115.05mb |    120,635,392 | \n | LoaderCodeHeap      |            148 |      78.54mb |     82,354,176 | \n | PAGE_READONLY       |            276 |      78.41mb |     82,223,104 | \n | LowFrequencyHeap    |            765 |      53.26mb |     55,848,960 | \n | PAGE_EXECUTE_READ   |          1,042 |      53.20mb |     55,783,424 | \n | GCHeapToBeFreed     |             13 |      36.14mb |     37,900,288 | \n | FixupPrecodeHeap    |          1,634 |      25.81mb |     27,066,368 | \n | GCBookkeeping       |              9 |       8.89mb |      9,318,400 | \n | HostCodeHeap        |             25 |       3.65mb |      3,825,664 | \n | ExecutableHeap      |             25 |       1.50mb |      1,576,960 | \n | IndirectionCellHeap |             82 |       1.34mb |      1,400,832 | \n | HandleTable         |             14 |     792.00kb |        811,008 | \n | CacheEntryHeap      |             52 |     484.00kb |        495,616 | \n | StubHeap            |             51 |     332.00kb |        339,968 | \n | NewStubPrecodeHeap  |              4 |      64.00kb |         65,536 | \n +----------------------------------------------------------------------+ \n | [TOTAL]             |          8,254 |       6.01gb |  6,451,347,968 | \n +----------------------------------------------------------------------+ \n```\n\nThe number of `doublemapper__deleted_` is 65, and the total size of `doublemapper__deleted_`  is 3.2gb\n```\n | Image               |     7f3fae82e000 |     7f3fb4000000 |      87.82mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_EXECUTE_READ | doublemapper__deleted_                                            | \n | Image               |     7f3fb4000000 |     7f3fb7fed000 |      63.93mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fb7fed000 |     7f3fbc000000 |      64.07mb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fbc000000 |     7f3fbfff8000 |      63.97mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fbfff8000 |     7f3fc4000000 |      64.03mb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fc4000000 |     7f3fcbff5000 |     127.96mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fcbff5000 |     7f3fcc000000 |      44.00kb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fcc000000 |     7f3fcfffb000 |      63.98mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fcfffb000 |     7f3fd0000000 |      20.00kb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fd0000000 |     7f3fd3ff6000 |      63.96mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fd3ff6000 |     7f3fd4000000 |      40.00kb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fd4000000 |     7f3fd7ff7000 |      63.96mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n | Image               |     7f3fd7ff7000 |     7f3fdc000000 |      64.04mb | MEM_IMAGE   | MEM_UNKNOWN | PAGE_UNKNOWN      | doublemapper__deleted_                                            | \n | Image               |     7f3fdc000000 |     7f3fdfffc000 |      63.98mb | MEM_IMAGE   | MEM_COMMIT  | PAGE_READWRITE    | doublemapper__deleted_                                            | \n....\n```\n",
                                           "updatedAt":  "2025-01-13T02:57:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aOHN9",
                                           "createdAt":  "2025-01-13T15:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@stg609 would you be able to share the dump? Unless you prefer a different way, you can share the dump with Microsoft by opening a feedback issue at https://developercommunity.visualstudio.com/, attaching the dump to it (the attachments are not publicly visible), and sharing the feedback issue ID here.",
                                           "updatedAt":  "2025-01-13T15:16:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aUGRS",
                                           "createdAt":  "2025-01-14T04:48:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stg609",
                                           "body":  "\u003e [@stg609](https://github.com/stg609) would you be able to share the dump? Unless you prefer a different way, you can share the dump with Microsoft by opening a feedback issue at https://developercommunity.visualstudio.com/, attaching the dump to it (the attachments are not publicly visible), and sharing the feedback issue ID here.\n\nYes, I have attached the dump file in the comment. see https://developercommunity.visualstudio.com/t/Many-doublemapper-Images-result-in-OOMKi/10827328#T-N10827379",
                                           "updatedAt":  "2025-01-14T04:48:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6crWXC",
                                           "createdAt":  "2025-02-01T00:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@stg609 I am sorry it took me quite some time to investigate your dump. Some of the numbers reported by the !maddress don\u0027t make sense. For example, it says that System.Private.CoreLib.dll has several mappings of size around 64MB and 332.67MB in total, while in reality, the size of the whole file is about 12MB. \n\nIn the end, I have written a windbg script in javascript to dump all blocks managed by the executable memory allocator and got this result:\n```\nTotal RX Blocks: 3666 Total Size: 327094272\nTotal RW Blocks: 3 Total Size: 28672\nTotal Free Blocks: 15305 Total Size: 1570635776\n```\n\n* The RW blocks are temporary mappings, so their number is small. \n* The RX blocks represent memory allocated by the executable allocator. Their total size is ~312MB, which is reasonable given the number of assemblies / load contexts you have\n* But the free blocks consume 1.46GB! They are supposed to be reused and not pile up like this. \n\nI don\u0027t have any idea why there are so many free blocks. Many blocks on the free list have sizes that are used very often, so I don\u0027t see why they wouldn\u0027t be reused.\n\nWould it be possible for you to take two dumps at two different time points of the same process while the memory consumption is growing so that I can check the trend in these numbers?",
                                           "updatedAt":  "2025-02-01T00:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dSALd",
                                           "createdAt":  "2025-02-06T03:28:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stg609",
                                           "body":  "Thanks! Would you mind sharing your windbg script? Maybe I can investigate on my own once I have the chance to take two dumps.\n@janvorli ",
                                           "updatedAt":  "2025-02-06T03:28:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dVsbi",
                                           "createdAt":  "2025-02-06T12:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFsm2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ArieSLV",
                                                                               "createdAt":  "2025-02-08T05:02:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@stg609 here is the script:\n```js\nhost.diagnostics.debugLog(\"Loaded script to dump executable memory allocator info\\n\");\n\nfunction getProtection(address)\n{\n    var ctl = host.namespace.Debugger.Utility.Control;\n    var output  = ctl.ExecuteCommand(\"!address \" + address.toString(16));\n\n    for (var line of output)\n    {\n        if (line.includes(\"Protect:\"))\n        {\n            var prot = line.split(/\\s+/)[2];\n            if (prot == \"PAGE_EXECUTE_READ\")\n            {\n                return \"RX\";\n            }\n            else if (prot == \"PAGE_READWRITE\")\n            {\n                return \"RW\";\n            }\n        }\n    }\n\n    return \"Unknown\";\n}\n\nfunction dumpBlocks()\n{\n   let allocator = host.evaluateExpression(\"ExecutableAllocator::g_instance\")\n   var totalSizeRX = 0;\n   var totalCountRX = 0;\n   var totalSizeRW = 0;\n   var totalCountRW = 0;\n   for (block = allocator.m_pFirstBlockRX; block.address != 0; block = block.next)\n   {\n      let prot = getProtection(block.baseRX.address);\n      host.diagnostics.debugLog(\"RX Block: 0x\" + block.baseRX.address.toString(16) + \" Protect: \" + prot + \" Size: \" + block.size + \"\\n\");\n\n      if (prot == \"RX\")\n      {\n        totalSizeRX += block.size;\n        totalCountRX++;\n      }\n      else if (prot == \"RW\")\n      {\n        totalSizeRW += block.size;\n        totalCountRW++;\n      }\n   }\n\n   var totalSizeRWMap = 0;\n   var totalCountRWMap = 0;\n   for (block = allocator.m_pFirstBlockRW; block.address != 0; block = block.next)\n    {\n       host.diagnostics.debugLog(\"RW Block: 0x\" + block.baseRW.address.toString(16) + \" Size: \" + block.size + \"\\n\");\n       totalSizeRWMap += block.size;\n       totalCountRWMap++;\n    }\n\n    var totalSizeFree = 0;\n    var totalCountFree = 0;\n    for (block = allocator.m_pFirstFreeBlockRX; block.address != 0; block = block.next)\n    {\n        host.diagnostics.debugLog(\"Free Block: Size: \" + block.size + \"\\n\");\n        totalSizeFree += block.size;\n        totalCountFree++;\n    }\n \n    host.diagnostics.debugLog(\"Total RX Blocks: \" + totalCountRX + \" Total Size: \" + totalSizeRX + \"\\n\");\n    host.diagnostics.debugLog(\"Total RW Blocks: \" + totalCountRW + \" Total Size: \" + totalSizeRW + \"\\n\");\n    host.diagnostics.debugLog(\"Total RW Remap Blocks: \" + totalCountRWMap + \" Total Size: \" + totalSizeRWMap + \"\\n\");\n    host.diagnostics.debugLog(\"Total Free Blocks: \" + totalCountFree + \" Total Size: \" + totalSizeFree + \"\\n\");\n}\n\n```\n\nYou load this script like this: `.scriptload D:\\WinDbgScripts\\dumpexec.js` and run the function using `dx Debugger.State.Scripts.dumpexec.Contents.dumpBlocks()`\n\n",
                                           "updatedAt":  "2025-02-06T12:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jj9TK",
                                           "createdAt":  "2025-03-21T18:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ysiivan",
                                           "body":  "I was given a dump file of about 7GB of which about 0.5 GB was the total consumed by CLR as reported by ```eeheap```. We see that picture all the time in K8s - relatively small managed memory footprint and quite large amount of native memory. Across different applications. Definitely a trend for us.\n\nSo, I came to this thread, because ``` /memfd:doublemapper (deleted)```. I got 5225 of them in this dump. \n```!maddress``` fails for me with:\n```\nEnumerating and tagging the entire address space and caching the result...\nSubsequent runs of this command should be faster.\n!address did not produce a standard header.\nThis may mean symbols could not be resolved for ntdll.\nPlease run !address and make sure the output looks correct.\n```\n\nThe above script returns:\n```\nTotal RX Blocks: 1205 Total Size: 147066880\nTotal RW Blocks: 2753 Total Size: 193200128\nTotal RW Remap Blocks: 3 Total Size: 12288\nTotal Free Blocks: 1 Total Size: 262144\n```\n\n```\n0:000\u003e !eeversion\n8.0.1224.60305\n8.0.1224.60305 @Commit: 89ef51c5d8f5239345127a1e282e11036e590c8b\nWorkstation mode\nSOS Version: 9.0.12.7501 retail build\n```\n(we\u0027ve seen the same the same overall picture with apps in GC Server mode as well)\n\n```\n\u003e!FinalizeQueue\n...\n7f9b504e9d10    31       744 System.WeakReference\u003cSystem.Diagnostics.Tracing.EventProvider\u003e\n7f9b504ea030    31       744 System.WeakReference\u003cSystem.Diagnostics.Tracing.EventSource\u003e\n7f9b5908c620     2       768 StackExchange.Redis.ConnectionMultiplexer\n7f9b54f36f88    20     1,280 ysi.angularcafebase.multitenant.dal.Data.HangfireSchedulerDbContext\n7f9b57135328    63     1,512 System.Threading.TimerHolder\n7f9b590b6580     8     1,536 StackExchange.Redis.PhysicalBridge\n7f9b571fa7c8    72     1,728 System.Reflection.Emit.DynamicResolver+DestroyScout\n7f9b57a3ec78    32     1,792 System.Net.Sockets.NetworkStream\n7f9b5e9012b0    17     3,264 System.Data.SqlClient.SqlConnection\n7f9b504e9710    62     3,968 System.Diagnostics.Tracing.EventSource+OverrideEventProvider\n7f9b5331fc70   168     4,032 System.WeakReference\u003cSystem.Runtime.Loader.AssemblyLoadContext\u003e\n7f9b57a3f3f0    64     4,096 System.Net.Sockets.SafeSocketHandle\n7f9b5bc4f660    16     4,096 Pipelines.Sockets.Unofficial.SocketAwaitableEventArgs\n7f9b51e5f200   130     4,160 System.IO.FileStream\n7f9b57f93420    17     4,216 Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketReceiver\n7f9b504a0ed0   203     4,872 System.WeakReference\n7f9b504a0d00    73     5,256 System.Threading.Thread\n7f9b575314f0   126     7,056 System.Threading.ReaderWriterLock\n7f9b511a2458    63     7,560 System.Net.Sockets.Socket\n7f9b51e3e330   136     8,704 Microsoft.Win32.SafeHandles.SafeFileHandle\n7f9b545daf80   302     9,664 Microsoft.Win32.SafeHandles.SafeWaitHandle\n7f9b57a512f8    41    12,136 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs\n7f9b58ad6c58   232    12,992 System.Diagnostics.ProcessThread\n7f9b55ba9500    26    13,312 System.Data.DataTable\n7f9b57170f90   167    13,360 System.Runtime.Loader.IndividualAssemblyLoadContext\n7f9b54f36b48 1,039    66,496 ysi.angularcafebase.multitenant.dal.Data.DbContext\n7f9b58e081b0   332    71,712 System.Data.DataColumn\n7f9b512d6358 2,103   151,416 System.Reflection.Emit.DynamicResolver\n7f9b5bee03c0 1,062   203,904 Microsoft.Data.SqlClient.SqlConnection\n```\n\n```\n0:000\u003e !DumpGCData\nconcurrent GCs                : 0\ncompacting GCs                : 56719\npromoting GCs                 : 33560\nGCs that did demotion         : 752\ncard bundles                  : 57793\nelevation logic               : 0\n\n[info per heap]\nInteresting data points\n           pre short: 130\n          post short: 553\n         merged pins: 0\n      converted pins: 0\n             pre pin: 129\n            post pin: 1007\n    pre and post pin: 605\n    pre short padded: 1\n   post short padded: 0\n\nCompacting reasons\n[M]             low on ephemeral space: 0\n[W]                 high fragmentation: 56455\n[M]             couldn\u0027t allocate gaps: 0\n[M]          user specfied compact LOH: 0\n[M]                 last GC before OOM: 0\n[M]              induced compacting GC: 0\n[W]     fragmented gen0 (ephemeral GC): 0\n[W]    high memory load (ephemeral GC): 0\n[M]          high memory load and frag: 0\n[M]     very high memory load and frag: 0\n[M]                         no gc mode: 0\n\nExpansion mechanisms\n    reused seg with normal fit: 0\n      reused seg with best fit: 0\n          expand promoting eph: 0\n         expand with a new seg: 0\n       no memory for a new seg: 0\n        expand in next full GC: 0\n\nOther mechanisms enabled\n     using mark list: 40342\n            demotion: 755\n```",
                                           "updatedAt":  "2025-03-21T18:13:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jlQDE",
                                           "createdAt":  "2025-03-21T21:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@ysiivan thank you for sharing the details. It is really weird that the total is about 7GB and yet the GC heap + code is that much smaller. Would you be able to share that dump? \nAs for the `!maddress` error, I\u0027ve seen it couple of times in the past too, but never had a chance to investigate it further. I\u0027ll try to ask the developers of that extension and also look at / instrument its source to see if there is something in the format of the `!address `command output that could break it. The `!maddress` parses the `!address` output.\nIf you cannot share the dump, could you please run the `!address` command and share several initial lines of its output? ",
                                           "updatedAt":  "2025-03-21T21:08:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jouAq",
                                           "createdAt":  "2025-03-22T16:56:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ysiivan",
                                           "body":  "@janvorli I can share the dump privately with Microsoft only, not publicly.\n\nHere are few initial lines from ```!address```:\n```\n0:000\u003e !address\n\n        BaseAddress      EndAddress+1        RegionSize     Type       State                 Protect             Usage\n--------------------------------------------------------------------------------------------------------------------------\n+        0`00000000     55d0`f97ac000     55d0`f97ac000                                                            \u003cunknown\u003e  \n+     55d0`f97ac000     55d0`f97b2000        0`00006000 MEM_PRIVATE MEM_COMMIT  PAGE_READONLY                      Image      [dotnet; \"/usr/share/dotnet/dotnet\"]\n+     55d0`f97b2000     55d0`f97bd000        0`0000b000 MEM_PRIVATE MEM_COMMIT  PAGE_EXECUTE_READ                  Image      [dotnet; \"/usr/share/dotnet/dotnet\"]\n+     55d0`f97bd000     55d0`f97bf000        0`00002000 MEM_PRIVATE MEM_COMMIT  PAGE_READONLY                      Image      [dotnet; \"/usr/share/dotnet/dotnet\"]\n+     55d0`f97bf000     55d0`f97c0000        0`00001000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Image      [dotnet; \"/usr/share/dotnet/dotnet\"]\n+     55d0`f97c0000     55d0`fa122000        0`00962000                                                            \u003cunknown\u003e  \n+     55d0`fa122000     55d1`12e82000        0`18d60000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     \u003cunknown\u003e  [................]\n+     55d1`12e82000     7f91`44000000     29c0`3117e000                                                            \u003cunknown\u003e  \n+     7f91`44000000     7f91`47cee000        0`03cee000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     \u003cunknown\u003e  [0..........P....]\n+     7f91`47cee000     7f91`4c000000        0`04312000                                                            \u003cunknown\u003e  \n+     7f91`4c000000     7f91`4ff6d000        0`03f6d000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     \u003cunknown\u003e  [0..........X....]\n+     7f91`4ff6d000     7f91`50000000        0`00093000                                                            \u003cunknown\u003e  ```",
                                           "updatedAt":  "2025-03-22T16:56:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j6Isg",
                                           "createdAt":  "2025-03-25T02:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOYdig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Leandropintogit",
                                                                               "createdAt":  "2025-04-11T04:10:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "warappa",
                                                                               "createdAt":  "2025-04-15T13:30:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ysiivan",
                                           "body":  "re: ```!maddress``` error - apparently a bug in the tool https://github.com/dotnet/diagnostics/issues/5091\nDowngrading ```sos.dll``` and now ```!maddress``` doesn\u0027t crash and shows only 9 ```doublemapper__deleted_``` and the size is minimal.\nMost memory in ```PAGE_READWRITE```:\n```\n+--------------------------------------------------------------------+ \n | Memory Type       |          Count |         Size |   Size (bytes) | \n +--------------------------------------------------------------------+ \n | PAGE_READWRITE    |          2,967 |       6.30gb |  6,762,665,472 | \n | Stack             |             76 |     692.96mb |    726,616,064 | \n | Image             |          1,111 |     410.48mb |    430,419,968 | \n | PAGE_EXECUTE_READ |          2,466 |     134.72mb |    141,266,944 | \n | PAGE_READONLY     |            284 |      26.74mb |     28,043,264 | \n | PAGE_UNKNOWN      |            249 |       6.16mb |      6,459,392 | \n +--------------------------------------------------------------------+ \n | [TOTAL]           |          7,153 |       7.54gb |  8,095,471,104 | \n +--------------------------------------------------------------------+ \n```\n```\n# eeheap ...\nTotal bytes consumed by CLR: 0x1f20d000 (522244096)\n```\nI guess I\u0027m looking at a native memory leak, or dotnet not returning memory to the native allocator, or the native allocator not returning memory to the OS.  \n\nNo idea how to proceed from here...\n",
                                           "updatedAt":  "2025-03-25T02:58:40Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "Large number of memfd:doublemapper (deleted) entries",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90135",
        "createdAt":  "2023-08-08T04:18:17Z",
        "number":  90135,
        "author":  "Kundanbharti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-11T03:49:12Z",
        "body":  "### Description\r\n\r\nWinUI3 application with .net6 core, we are observing a crash while running the application with below call stack. There is no indication on why it has failed but it does fail when CLR has been uninitialized or the runtime binaries are not installed or corrupted. Below is the call stack.\r\n\r\n```\r\ncoreclr.dll!EEPolicy::HandleFatalError(unsigned int exitCode, unsigned int address, const wchar_t * pszMessage, _EXCEPTION_POINTERS * pExceptionInfo, const wchar_t * errorSource, const wchar_t * argExceptionString) Line 777\tC++\r\n\u003e\tcoreclr.dll!UnsafeJitFunction(PrepareCodeConfig * config, COR_ILMETHOD_DECODER * ILHeader, CORJIT_FLAGS flags, unsigned long *) Line 13173\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLocked(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry, unsigned long * pFlags, CORJIT_FLAGS *) Line 1051\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry) Line 920\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCode(PrepareCodeConfig * pConfig) Line 860\tC++\r\n \tcoreclr.dll!MethodDesc::PrepareILBasedCode(PrepareCodeConfig * pConfig) Line 439\tC++\r\n \t[Inline Frame] coreclr.dll!MethodDesc::PrepareCode(PrepareCodeConfig *) Line 332\tC++\r\n \tcoreclr.dll!CodeVersionManager::PublishVersionableCodeIfNecessary(MethodDesc * pMethodDesc, CallerGCMode callerGCMode, bool * doBackpatchRef, bool * doFullBackpatchRef) Line 1701\tC++\r\n \tcoreclr.dll!MethodDesc::DoPrestub(MethodTable * pDispatchingMT, CallerGCMode callerGCMode) Line 2215\tC++\r\n \tcoreclr.dll!ECall::PopulateManagedCastHelpers() Line 173\tC++\r\n \tcoreclr.dll!SystemDomain::LoadBaseSystemClasses() Line 1486\tC++\r\n \tcoreclr.dll!SystemDomain::Init() Line 1274\tC++\r\n \tcoreclr.dll!EEStartupHelper() Line 998\tC++\r\n \tcoreclr.dll!EEStartup() Line 1162\tC++\r\n \tcoreclr.dll!EnsureEEStarted() Line 322\tC++\r\n \tcoreclr.dll!CorHost2::Start() Line 102\tC++\r\n \tcoreclr.dll!coreclr_initialize(const char * exePath, const char * appDomainFriendlyName, int propertyCount, const char * * propertyKeys, const char * * propertyValues, void * * hostHandle, unsigned int * domainId) Line 251\tC++\r\n \thostpolicy.dll!coreclr_t::create(const std::wstring \u0026 libcoreclr_path, const char * exe_path, const char * app_domain_friendly_name, const coreclr_property_bag_t \u0026 properties, std::unique_ptr\u003ccoreclr_t,std::default_delete\u003ccoreclr_t\u003e\u003e \u0026 inst) Line 58\tC++\r\n \thostpolicy.dll!`anonymous namespace\u0027::create_coreclr() Line 81\tC++\r\n \thostpolicy.dll!corehost_main(const int argc, const wchar_t * * argv) Line 426\tC++\r\n \thostfxr.dll!execute_app(const std::wstring \u0026 impl_dll_dir, corehost_init_t * init, const int argc, const wchar_t * * argv) Line 147\tC++\r\n \thostfxr.dll!`anonymous namespace\u0027::read_config_and_execute(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int new_argc, const wchar_t * * new_argv, host_mode_t mode, const bool is_sdk_command, wchar_t * out_buffer, int buffer_size, int * required_buffer_size) Line 533\tC++\r\n \thostfxr.dll!fx_muxer_t::handle_exec_host_command(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int argc, const wchar_t * * argv, int argoff, host_mode_t mode, const bool is_sdk_command, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 1018\tC++\r\n \thostfxr.dll!fx_muxer_t::execute(const std::wstring host_command, const int argc, const wchar_t * * argv, const host_startup_info_t \u0026 host_info, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 594\tC++\r\n \thostfxr.dll!hostfxr_main_startupinfo(const int argc, const wchar_t * * argv, const wchar_t * host_path, const wchar_t * dotnet_root, const wchar_t * app_path) Line 61\tC++\r\n \tCWAInstaller.exe!005aeada()\tUnknown\r\n \t[Frames below may be incorrect and/or missing, no symbols loaded for CWAInstaller.exe]\t\r\n \tCWAInstaller.exe!005aee1a()\tUnknown\r\n \tCWAInstaller.exe!005aff4c()\tUnknown\r\n \tkernel32.dll!@BaseThreadInitThunk@12()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart@8()\tUnknown\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nwhile launching the application.\r\n\r\n### Expected behavior\r\n\r\nThis shouldn\u0027t crash.\r\n\r\n### Actual behavior\r\n\r\nIts crashing with above given call stack.\r\n\r\n### Regression?\r\n\r\nNA\r\n\r\n### Known Workarounds\r\n\r\nNA\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY8nxtQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jeRss",
                                           "createdAt":  "2023-08-08T04:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWith winUI3 application with .net6 core we are observing a crash while running the application with below call stack. There is no indication on why it has failed but it does fail when CLR has been uninitialized or the runtime binaries are not installed or corrupted. Below is the call stack.\r\n\r\ncoreclr.dll!EEPolicy::HandleFatalError(unsigned int exitCode, unsigned int address, const wchar_t * pszMessage, _EXCEPTION_POINTERS * pExceptionInfo, const wchar_t * errorSource, const wchar_t * argExceptionString) Line 777\tC++\r\n\u003e\tcoreclr.dll!UnsafeJitFunction(PrepareCodeConfig * config, COR_ILMETHOD_DECODER * ILHeader, CORJIT_FLAGS flags, unsigned long *) Line 13173\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLocked(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry, unsigned long * pFlags, CORJIT_FLAGS *) Line 1051\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry) Line 920\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCode(PrepareCodeConfig * pConfig) Line 860\tC++\r\n \tcoreclr.dll!MethodDesc::PrepareILBasedCode(PrepareCodeConfig * pConfig) Line 439\tC++\r\n \t[Inline Frame] coreclr.dll!MethodDesc::PrepareCode(PrepareCodeConfig *) Line 332\tC++\r\n \tcoreclr.dll!CodeVersionManager::PublishVersionableCodeIfNecessary(MethodDesc * pMethodDesc, CallerGCMode callerGCMode, bool * doBackpatchRef, bool * doFullBackpatchRef) Line 1701\tC++\r\n \tcoreclr.dll!MethodDesc::DoPrestub(MethodTable * pDispatchingMT, CallerGCMode callerGCMode) Line 2215\tC++\r\n \tcoreclr.dll!ECall::PopulateManagedCastHelpers() Line 173\tC++\r\n \tcoreclr.dll!SystemDomain::LoadBaseSystemClasses() Line 1486\tC++\r\n \tcoreclr.dll!SystemDomain::Init() Line 1274\tC++\r\n \tcoreclr.dll!EEStartupHelper() Line 998\tC++\r\n \tcoreclr.dll!EEStartup() Line 1162\tC++\r\n \tcoreclr.dll!EnsureEEStarted() Line 322\tC++\r\n \tcoreclr.dll!CorHost2::Start() Line 102\tC++\r\n \tcoreclr.dll!coreclr_initialize(const char * exePath, const char * appDomainFriendlyName, int propertyCount, const char * * propertyKeys, const char * * propertyValues, void * * hostHandle, unsigned int * domainId) Line 251\tC++\r\n \thostpolicy.dll!coreclr_t::create(const std::wstring \u0026 libcoreclr_path, const char * exe_path, const char * app_domain_friendly_name, const coreclr_property_bag_t \u0026 properties, std::unique_ptr\u003ccoreclr_t,std::default_delete\u003ccoreclr_t\u003e\u003e \u0026 inst) Line 58\tC++\r\n \thostpolicy.dll!`anonymous namespace\u0027::create_coreclr() Line 81\tC++\r\n \thostpolicy.dll!corehost_main(const int argc, const wchar_t * * argv) Line 426\tC++\r\n \thostfxr.dll!execute_app(const std::wstring \u0026 impl_dll_dir, corehost_init_t * init, const int argc, const wchar_t * * argv) Line 147\tC++\r\n \thostfxr.dll!`anonymous namespace\u0027::read_config_and_execute(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int new_argc, const wchar_t * * new_argv, host_mode_t mode, const bool is_sdk_command, wchar_t * out_buffer, int buffer_size, int * required_buffer_size) Line 533\tC++\r\n \thostfxr.dll!fx_muxer_t::handle_exec_host_command(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int argc, const wchar_t * * argv, int argoff, host_mode_t mode, const bool is_sdk_command, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 1018\tC++\r\n \thostfxr.dll!fx_muxer_t::execute(const std::wstring host_command, const int argc, const wchar_t * * argv, const host_startup_info_t \u0026 host_info, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 594\tC++\r\n \thostfxr.dll!hostfxr_main_startupinfo(const int argc, const wchar_t * * argv, const wchar_t * host_path, const wchar_t * dotnet_root, const wchar_t * app_path) Line 61\tC++\r\n \tCWAInstaller.exe!005aeada()\tUnknown\r\n \t[Frames below may be incorrect and/or missing, no symbols loaded for CWAInstaller.exe]\t\r\n \tCWAInstaller.exe!005aee1a()\tUnknown\r\n \tCWAInstaller.exe!005aff4c()\tUnknown\r\n \tkernel32.dll!@BaseThreadInitThunk@12()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart@8()\tUnknown\n\n### Reproduction Steps\n\nwhile launching the application.\n\n### Expected behavior\n\nThis shouldn\u0027t crash.\n\n### Actual behavior\n\nIts crashing with above given call stack.\n\n### Regression?\n\nNA\n\n### Known Workarounds\n\nNA\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKundanbharti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-08T04:18:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jiErX",
                                           "createdAt":  "2023-08-08T15:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWinUI3 application with .net6 core, we are observing a crash while running the application with below call stack. There is no indication on why it has failed but it does fail when CLR has been uninitialized or the runtime binaries are not installed or corrupted. Below is the call stack.\r\n\r\ncoreclr.dll!EEPolicy::HandleFatalError(unsigned int exitCode, unsigned int address, const wchar_t * pszMessage, _EXCEPTION_POINTERS * pExceptionInfo, const wchar_t * errorSource, const wchar_t * argExceptionString) Line 777\tC++\r\n\u003e\tcoreclr.dll!UnsafeJitFunction(PrepareCodeConfig * config, COR_ILMETHOD_DECODER * ILHeader, CORJIT_FLAGS flags, unsigned long *) Line 13173\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLocked(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry, unsigned long * pFlags, CORJIT_FLAGS *) Line 1051\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig * pConfig, ListLockEntryBase\u003cNativeCodeVersion\u003e * pEntry) Line 920\tC++\r\n \tcoreclr.dll!MethodDesc::JitCompileCode(PrepareCodeConfig * pConfig) Line 860\tC++\r\n \tcoreclr.dll!MethodDesc::PrepareILBasedCode(PrepareCodeConfig * pConfig) Line 439\tC++\r\n \t[Inline Frame] coreclr.dll!MethodDesc::PrepareCode(PrepareCodeConfig *) Line 332\tC++\r\n \tcoreclr.dll!CodeVersionManager::PublishVersionableCodeIfNecessary(MethodDesc * pMethodDesc, CallerGCMode callerGCMode, bool * doBackpatchRef, bool * doFullBackpatchRef) Line 1701\tC++\r\n \tcoreclr.dll!MethodDesc::DoPrestub(MethodTable * pDispatchingMT, CallerGCMode callerGCMode) Line 2215\tC++\r\n \tcoreclr.dll!ECall::PopulateManagedCastHelpers() Line 173\tC++\r\n \tcoreclr.dll!SystemDomain::LoadBaseSystemClasses() Line 1486\tC++\r\n \tcoreclr.dll!SystemDomain::Init() Line 1274\tC++\r\n \tcoreclr.dll!EEStartupHelper() Line 998\tC++\r\n \tcoreclr.dll!EEStartup() Line 1162\tC++\r\n \tcoreclr.dll!EnsureEEStarted() Line 322\tC++\r\n \tcoreclr.dll!CorHost2::Start() Line 102\tC++\r\n \tcoreclr.dll!coreclr_initialize(const char * exePath, const char * appDomainFriendlyName, int propertyCount, const char * * propertyKeys, const char * * propertyValues, void * * hostHandle, unsigned int * domainId) Line 251\tC++\r\n \thostpolicy.dll!coreclr_t::create(const std::wstring \u0026 libcoreclr_path, const char * exe_path, const char * app_domain_friendly_name, const coreclr_property_bag_t \u0026 properties, std::unique_ptr\u003ccoreclr_t,std::default_delete\u003ccoreclr_t\u003e\u003e \u0026 inst) Line 58\tC++\r\n \thostpolicy.dll!`anonymous namespace\u0027::create_coreclr() Line 81\tC++\r\n \thostpolicy.dll!corehost_main(const int argc, const wchar_t * * argv) Line 426\tC++\r\n \thostfxr.dll!execute_app(const std::wstring \u0026 impl_dll_dir, corehost_init_t * init, const int argc, const wchar_t * * argv) Line 147\tC++\r\n \thostfxr.dll!`anonymous namespace\u0027::read_config_and_execute(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int new_argc, const wchar_t * * new_argv, host_mode_t mode, const bool is_sdk_command, wchar_t * out_buffer, int buffer_size, int * required_buffer_size) Line 533\tC++\r\n \thostfxr.dll!fx_muxer_t::handle_exec_host_command(const std::wstring \u0026 host_command, const host_startup_info_t \u0026 host_info, const std::wstring \u0026 app_candidate, const std::unordered_map\u003cenum known_options,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e,known_options_hash,std::equal_to\u003cenum known_options\u003e,std::allocator\u003cstd::pair\u003cenum known_options const ,std::vector\u003cstd::wstring,std::allocator\u003cstd::wstring\u003e\u003e\u003e\u003e\u003e \u0026 opts, int argc, const wchar_t * * argv, int argoff, host_mode_t mode, const bool is_sdk_command, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 1018\tC++\r\n \thostfxr.dll!fx_muxer_t::execute(const std::wstring host_command, const int argc, const wchar_t * * argv, const host_startup_info_t \u0026 host_info, wchar_t * result_buffer, int buffer_size, int * required_buffer_size) Line 594\tC++\r\n \thostfxr.dll!hostfxr_main_startupinfo(const int argc, const wchar_t * * argv, const wchar_t * host_path, const wchar_t * dotnet_root, const wchar_t * app_path) Line 61\tC++\r\n \tCWAInstaller.exe!005aeada()\tUnknown\r\n \t[Frames below may be incorrect and/or missing, no symbols loaded for CWAInstaller.exe]\t\r\n \tCWAInstaller.exe!005aee1a()\tUnknown\r\n \tCWAInstaller.exe!005aff4c()\tUnknown\r\n \tkernel32.dll!@BaseThreadInitThunk@12()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart()\tUnknown\r\n \tntdll.dll!__RtlUserThreadStart@8()\tUnknown\r\n\r\n### Reproduction Steps\r\n\r\nwhile launching the application.\r\n\r\n### Expected behavior\r\n\r\nThis shouldn\u0027t crash.\r\n\r\n### Actual behavior\r\n\r\nIts crashing with above given call stack.\r\n\r\n### Regression?\r\n\r\nNA\r\n\r\n### Known Workarounds\r\n\r\nNA\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKundanbharti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-08T15:52:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jiFHu",
                                           "createdAt":  "2023-08-08T15:53:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Do you have a repro application or dump you could share?\r\n\r\n\u003e  There is no indication on why it has failed but it does fail when CLR has been uninitialized or the runtime binaries are not installed or corrupted\r\n\r\nHow are you getting into an uninitialized or corrupted state?",
                                           "updatedAt":  "2023-08-08T15:53:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jpkh8",
                                           "createdAt":  "2023-08-09T17:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-08-09T17:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jpkxm",
                                           "createdAt":  "2023-08-09T17:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@Kundanbharti, could you please answer the question from elinor-fung?\r\n\r\n\u003e Do you have a repro application or dump you could share?\r\n\u003e \r\n\u003e \u003e There is no indication on why it has failed but it does fail when CLR has been uninitialized or the runtime binaries are not installed or corrupted\r\n\u003e \r\n\u003e How are you getting into an uninitialized or corrupted state?\r\n\r\n",
                                           "updatedAt":  "2023-08-09T17:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jwMuE",
                                           "createdAt":  "2023-08-10T16:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "It seems like a VM related. Moving to VM. CC @mangod9. ",
                                           "updatedAt":  "2023-08-10T16:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jyfG1",
                                           "createdAt":  "2023-08-11T03:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kundanbharti",
                                           "body":  "Dump link : https://drive.google.com/file/d/1c84t5f8NAMqBk5PlFf0duRr3iCPfCBhw/view?usp=drive_link . Please let me know if this is inaccessible. ",
                                           "updatedAt":  "2023-08-11T03:49:07Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "LoadJit function failing in CLR",
        "labels":  [
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90483",
        "createdAt":  "2023-08-13T10:52:22Z",
        "number":  90483,
        "author":  "raffaeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx7F5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richlander",
                                            "createdAt":  "2023-08-14T00:20:57Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-15T11:23:08Z",
        "body":  "## The goal\r\nThe main purpose of this feature is to simplify building mocking code/libraries (testing scenarios).\r\n\r\n### Mocking goals\r\n\r\nWhen talking about mocking, the main goals in my mind are the following:\r\n- Provide an intermediate object between the caller and an object (typically a service registered in the DI, but not necessarily)\r\n- The mock object acts like a stub therefore it can:\r\n   - set expectations on the input parameters\r\n   - determine the behavior on the call sequence invoked by the client\r\n   - return different results depending on the previous points\r\n- The mock object may just _intercept_ or entirely _replace_ the real object\r\n(This does not want to be a full list, you are welcome to add whatever it is valuable to this suggestion).\r\n\r\n### Hypothetical workflow\r\n\r\nI imagined this workflow:\r\n- The user creates a test assembly turning on the interception mechanism\r\n- The user uses an new assembly-level attribute to declare the class/interfaces to intercept as well as the factories that will create the mocks/stubs\r\n- A new C# code generator generates the partial class for the mock/stub\r\n- The C# compiler uses the above attributes to add metadata to the calls to the interception targets \r\n- At runtime the CLR uses the above metadata to add the stub between the caller and the callee\r\n\r\n### Switch to enable the interception\r\n\r\nSince an interception mechanism has an inherent performance cost, this feature could be enabled/disabled at project level. The performance cost is not an issue in a test assembly. \r\nThe interception should be enabled only for code in the test assembly with the interception enabled and when calling a \u0027normal\u0027 assembly.\r\n\r\nThe switch turning on this feature could also bypass the need to declare `[InternalsVisibleTo]` assembly in the main project. This would give the test assembly the ability to access the main project code as it was marked with `[InternalsVisibleTo]`. Since reflection can already access internal and private class/members, this switch does not change the real accessibility of the internal code.\r\n\r\n#### Conclusion\r\n\r\nI am aware this is not articulated as a formal \u0027proposal\u0027 but take this as a public brainstorming with the community and the core team who may agree/disagree/add other ideas and finally come to something more concrete or drop this completely.\r\n\r\n/cc @richlander \r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZBAYJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j71kj",
                                           "createdAt":  "2023-08-14T03:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDi5qw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2023-08-14T08:52:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is very similar to https://github.com/dotnet/runtime/issues/56213. From the runtime point of view, the main difference is that this proposal uses declarative approach (attributes) to communicate what to intercept vs. #56213 introduces API that needs to be called to communicate what to intercept.",
                                           "updatedAt":  "2023-08-14T03:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j9AqZ",
                                           "createdAt":  "2023-08-14T08:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Thank you @jkotas, I am glad to see that this need is shared by others.\r\n\r\nLet me anticipate the critics I\u0027ve read on the other thread.\r\nInterception could solve the issues deriving from trade-offs when designing code that needs to be tested (testing is good, but I don\u0027t want to lose performance or being forced to choices that otherwise I would not take).\r\n\r\nFor example, I could see teams avoiding the InternalsVisibleTo method and setting everyting public. Another example was setting everyting virtual with the only goal to allow the overriding test methods to provide mocked values.\r\n\r\nIn other words, I do not want to design for testing. I want to be able to test my code regardless the choices I make. This does not mean writing crappy extra-long methods or other similar bad practices of course.",
                                           "updatedAt":  "2023-08-14T08:52:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAMkz",
                                           "createdAt":  "2023-08-14T17:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is also worth pointing out that the IL rewriting can be done today using unmanaged profiler interfaces (see https://github.com/dotnet/runtime/issues/56213#issuecomment-887260514) or by IL rewriting build step (see https://github.com/dotnet/runtime/issues/56213#issuecomment-887284882). \r\n\r\nThis proposal can be thought of as exposing what is possible today via built-in managed runtime API that makes the IL rewriting easier to do.",
                                           "updatedAt":  "2023-08-14T17:30:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kEBgk",
                                           "createdAt":  "2023-08-15T11:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Thank you again @jkotas.\r\nAgree, I already used both those functionalities. The whole point here is to expose a functionality that easily allows to hook the calls.\r\n",
                                           "updatedAt":  "2023-08-15T11:23:08Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Feature Proposal]: Provide the infrastructure to ease proxying the call to an object",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91004",
        "createdAt":  "2023-08-23T18:02:18Z",
        "number":  91004,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyJvfw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2023-08-23T18:04:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "EgorBo",
                                            "createdAt":  "2023-08-23T19:45:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2023-08-23T19:48:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Zintom",
                                            "createdAt":  "2023-08-23T20:33:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "nathan-moore",
                                            "createdAt":  "2023-08-23T21:19:37Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "reflectronic",
                                            "createdAt":  "2023-08-23T22:11:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hughbe",
                                            "createdAt":  "2023-08-24T10:46:38Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-07-03T21:15:44Z",
        "body":  "The CoreCLR codebase is written in an old and arguably archaic style that is out of step with modern C++. A step toward improving this area is by adopting the [GSL](https://github.com/microsoft/GSL) and following the ISO [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZMG1Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kwX8h",
                                           "createdAt":  "2023-08-23T18:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @jkoritzinsky @GrabYourPitchforks @jkotas @davidwrighton ",
                                           "updatedAt":  "2023-08-23T18:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwZ8i",
                                           "createdAt":  "2023-08-23T18:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODElVwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-08-23T18:59:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I was trying for unifying the C++ number types to stdint. Old pal has been a blocker since it can\u0027t consume many standard headers like type_traits. It\u0027s time to refactor pal.",
                                           "updatedAt":  "2023-08-23T18:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwbUK",
                                           "createdAt":  "2023-08-23T18:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e I was trying for unifying the C++ number types to stdint. Old pal has been a blocker since it can\u0027t consume many standard headers like type_traits. It\u0027s time to refactor pal.\r\n\r\nYep. The PAL is on my list of things to start working on again now that we are moving into a new version. I am hoping that .NET 9 is the version where we are able to consume standard headers.",
                                           "updatedAt":  "2023-08-23T18:13:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Improve the C++ codebase by consuming the GSL",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92363",
        "createdAt":  "2023-09-20T18:48:01Z",
        "number":  92363,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyvfEw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SmartmanApps",
                                            "createdAt":  "2023-09-20T20:44:26Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-10T00:31:49Z",
        "body":  "# Problem\r\n\r\nSome environments where apps are running, e.g. Azure App Service/Container Apps, are configured to capture the console output and egress it to a table-based storage mechanism. In these circumstances, the new line character is used as the separator between individual log messages. In situations where an application is crashing on startup, before the app\u0027s usual logging system is initialized, perhaps due to a misconfiguration, the exception detail message printed by the `dotnet` host will result in many log records being created in the storage system, often interleaved with other messages from other instances of the application. This can make it very difficult to read the full exception details and diagnose why the application is crashing.\r\n\r\nHere\u0027s a simple example of what how this looks today for a console app that crashes with a callstack a few frames deep. Note that many apps often have much deeper callstacks when failing at startup using our frameworks:\r\n\r\n*Program.cs*\r\n\r\n```csharp\r\nConfigureMe();\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nvoid ConfigureMe()\r\n{\r\n    SomeNestedItemBeingConfigured();\r\n}\r\n\r\nvoid SomeNestedItemBeingConfigured()\r\n{\r\n    throw new InvalidOperationException(\"Oh no, I\u0027m misconfigured!!\\r\\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\");\r\n}\r\n```\r\n\r\n*Console output*\r\n\r\n```\r\n$ .\\bin\\Debug\\net8.0\\CrashyMcCrashFace.exe\r\nUnhandled exception. System.InvalidOperationException: Oh no, I\u0027m misconfigured!!\r\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__SomeNestedItemBeingConfigured|0_1() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 12\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__ConfigureMe|0_0() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 7\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 1\r\n```\r\n\r\n*Output captured in log tables*\r\n\r\n\u003cimg width=\"593\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/249088/49a40936-374f-41d7-99a9-d91afc126087\"\u003e\r\n\r\n# Proposal\r\n\r\nA runtime host option to force application-crashing exception details to be printed on a single line would improve the experience in these environments. The option would be settable via an environment variable, _ApplicationName.runtimeconfig.json_ JSON file, or property in the project file. An option to support JSON formatting the output could be interesting too.\r\n\r\nPerhaps the option could be named something like `DOTNET_CRASH_EXCEPTION_FORMAT` with values of:\r\n\r\n- `MULTI_LINE`\r\n    Default, does what it does today\r\n- `SINGLE_LINE`\r\n    Replaces all new line chars with inline whitespace\r\n- `JSON`\r\n    Produces a single line JSON string containing similar details to what the host logs to the Windows Application Event Log on app crash today, e.g.:\r\n    ```json\r\n    {\"faultingApplication\":{\"name\":\"CrashyMcCrashFace.exe\",\"version\":\"1.0.0.0\",\"timeStamp\":\"2023-09-20T18:25:43.511Z\"},\"exceptionCode\":\"0xe0434352\",\"faultOffset\":\"0x000000000006531c\",\"faultingProcessId\":\"1234\",\"faultingApplicationStartTime\":\"2023-09-20T18:25:43.491Z\",\"faultingApplicationPath\":\"D:\\\\src\\\\local\\\\CrashyMcCrashFace\\\\bin\\\\Debug\\net8.0\\\\CrashyMcCrashFace.exe\"}\r\n    ```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpl9Arg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nA0vC",
                                           "createdAt":  "2023-09-20T18:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Problem\r\n\r\nSome environments where apps are running, e.g. Azure App Service/Container Apps, are configured to capture the console output and egress it to a table-based storage mechanism. In these circumstances, the new line character is used as the separator between individual log messages. In situations where an application is crashing on startup, before the app\u0027s usual logging system is initialized, perhaps due to a misconfiguration, the exception detail message printed by the `dotnet` host will result in many log records being created in the storage system, often interleaved with other messages from other instances of the application. This can make it very difficult to read the full exception details and diagnose why the application is crashing.\r\n\r\nHere\u0027s a simple example of what how this looks today for a console app that crashes with a callstack a few frames deep. Note that many apps often have much deeper callstacks when failing at startup using our frameworks:\r\n\r\n*Program.cs*\r\n\r\n```csharp\r\nConfigureMe();\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nvoid ConfigureMe()\r\n{\r\n    SomeNestedItemBeingConfigured();\r\n}\r\n\r\nvoid SomeNestedItemBeingConfigured()\r\n{\r\n    throw new InvalidOperationException(\"Oh no, I\u0027m misconfigured!!\\r\\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\");\r\n}\r\n```\r\n\r\n*Console output*\r\n\r\n```\r\n$ .\\bin\\Debug\\net8.0\\CrashyMcCrashFace.exe\r\nUnhandled exception. System.InvalidOperationException: Oh no, I\u0027m misconfigured!!\r\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__SomeNestedItemBeingConfigured|0_1() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 12\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__ConfigureMe|0_0() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 7\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 1\r\n```\r\n\r\n*Output captured in log tables*\r\n\r\n\u003cimg width=\"593\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/249088/49a40936-374f-41d7-99a9-d91afc126087\"\u003e\r\n\r\n# Proposal\r\n\r\nA runtime host option to force application-crashing exception details to be printed on a single line would improve the experience in these environments. The option would be settable via an environment variable, _ApplicationName.runtimeconfig.json_ JSON file, or property in the project file. An option to support JSON formatting the output could be interesting too.\r\n\r\nPerhaps the option could be named something like `DOTNET_CRASH_EXCEPTION_FORMAT` with values of:\r\n\r\n- `MULTI_LINE`\r\n    Default, does what it does today\r\n- `SINGLE_LINE`\r\n    Replaces all new line chars with inline whitespace\r\n- `JSON`\r\n    Produces a single line JSON string containing similar details to what the host logs to the Windows Application Event Log on app crash today, e.g.:\r\n    ```json\r\n    {\"faultingApplication\":{\"name\":\"CrashyMcCrashFace.exe\",\"version\":\"1.0.0.0\",\"timeStamp\":\"2023-09-20T18:25:43.511Z\"},\"exceptionCode\":\"0xe0434352\",\"faultOffset\":\"0x000000000006531c\",\"faultingProcessId\":\"1234\",\"faultingApplicationStartTime\":\"2023-09-20T18:25:43.491Z\",\"faultingApplicationPath\":\"D:\\\\src\\\\local\\\\CrashyMcCrashFace\\\\bin\\\\Debug\\net8.0\\\\CrashyMcCrashFace.exe\"}\r\n    ```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDamianEdwards\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-20T18:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nBKSG",
                                           "createdAt":  "2023-09-20T20:08:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Problem\r\n\r\nSome environments where apps are running, e.g. Azure App Service/Container Apps, are configured to capture the console output and egress it to a table-based storage mechanism. In these circumstances, the new line character is used as the separator between individual log messages. In situations where an application is crashing on startup, before the app\u0027s usual logging system is initialized, perhaps due to a misconfiguration, the exception detail message printed by the `dotnet` host will result in many log records being created in the storage system, often interleaved with other messages from other instances of the application. This can make it very difficult to read the full exception details and diagnose why the application is crashing.\r\n\r\nHere\u0027s a simple example of what how this looks today for a console app that crashes with a callstack a few frames deep. Note that many apps often have much deeper callstacks when failing at startup using our frameworks:\r\n\r\n*Program.cs*\r\n\r\n```csharp\r\nConfigureMe();\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nvoid ConfigureMe()\r\n{\r\n    SomeNestedItemBeingConfigured();\r\n}\r\n\r\nvoid SomeNestedItemBeingConfigured()\r\n{\r\n    throw new InvalidOperationException(\"Oh no, I\u0027m misconfigured!!\\r\\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\");\r\n}\r\n```\r\n\r\n*Console output*\r\n\r\n```\r\n$ .\\bin\\Debug\\net8.0\\CrashyMcCrashFace.exe\r\nUnhandled exception. System.InvalidOperationException: Oh no, I\u0027m misconfigured!!\r\nPlease ensure a value for the \u0027SpecialValueNeeded\u0027 configuration key is defined.\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__SomeNestedItemBeingConfigured|0_1() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 12\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__ConfigureMe|0_0() in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 7\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\src\\local\\CrashyMcCrashFace\\Program.cs:line 1\r\n```\r\n\r\n*Output captured in log tables*\r\n\r\n\u003cimg width=\"593\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/249088/49a40936-374f-41d7-99a9-d91afc126087\"\u003e\r\n\r\n# Proposal\r\n\r\nA runtime host option to force application-crashing exception details to be printed on a single line would improve the experience in these environments. The option would be settable via an environment variable, _ApplicationName.runtimeconfig.json_ JSON file, or property in the project file. An option to support JSON formatting the output could be interesting too.\r\n\r\nPerhaps the option could be named something like `DOTNET_CRASH_EXCEPTION_FORMAT` with values of:\r\n\r\n- `MULTI_LINE`\r\n    Default, does what it does today\r\n- `SINGLE_LINE`\r\n    Replaces all new line chars with inline whitespace\r\n- `JSON`\r\n    Produces a single line JSON string containing similar details to what the host logs to the Windows Application Event Log on app crash today, e.g.:\r\n    ```json\r\n    {\"faultingApplication\":{\"name\":\"CrashyMcCrashFace.exe\",\"version\":\"1.0.0.0\",\"timeStamp\":\"2023-09-20T18:25:43.511Z\"},\"exceptionCode\":\"0xe0434352\",\"faultOffset\":\"0x000000000006531c\",\"faultingProcessId\":\"1234\",\"faultingApplicationStartTime\":\"2023-09-20T18:25:43.491Z\",\"faultingApplicationPath\":\"D:\\\\src\\\\local\\\\CrashyMcCrashFace\\\\bin\\\\Debug\\net8.0\\\\CrashyMcCrashFace.exe\"}\r\n    ```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDamianEdwards\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-20T20:08:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nBmI5",
                                           "createdAt":  "2023-09-20T21:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Some environments where apps are running, e.g. Azure App Service/Container Apps, are configured to capture the console output and egress it to a table-based storage mechanism\r\n\r\nDoes this table-based storage mechanism support unlimited single line lengths?",
                                           "updatedAt":  "2023-09-20T21:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nBn11",
                                           "createdAt":  "2023-09-20T21:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHWugA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-09-20T22:03:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "\u003e \u003e Some environments where apps are running, e.g. Azure App Service/Container Apps, are configured to capture the console output and egress it to a table-based storage mechanism\r\n\r\n\u003e Does this table-based storage mechanism support unlimited single line lengths?\r\n\r\nThat\u0027s a very good question. From a [quick search online](https://github.com/MicrosoftDocs/azure-docs/issues/55225#issuecomment-631193693) the max length is 32 KB. Longer than that and it will be truncated. ([reference](https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=powershell#data-limits))",
                                           "updatedAt":  "2023-09-20T21:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nBo7-",
                                           "createdAt":  "2023-09-20T22:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is very common for error messages to span multiple lines. Here is an example of error message for Python: https://learn.microsoft.com/en-us/azure/container-instances/container-instances-get-logs#view-logs\r\n\r\nIs this special option going to negatively impact readability of `az container logs` output and other similar places that assume that the output is human friendly?\r\n\r\nIs every language out there expected to implement a single-line error formatting option in order to play well with Azure App Service/Container Apps?",
                                           "updatedAt":  "2023-09-21T00:21:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nB5s8",
                                           "createdAt":  "2023-09-20T23:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Agreed on all points. Like many things, there are trade-offs involved. This would be opt-in of course. Having the platform host capture console logs in their \"natural\" format would always be preferred if possible, but this was raised as a possible mitigation.",
                                           "updatedAt":  "2023-09-20T23:29:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mX0Cu",
                                           "createdAt":  "2025-04-10T00:31:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-10T00:31:48Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Add a runtime configuration option to enable app-crashing exception details to be printed on a single line",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93288",
        "createdAt":  "2023-10-10T13:45:55Z",
        "number":  93288,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-16T18:17:30Z",
        "body":  "When we need to copy an array with GC references to another array we call `Buffer.BulkMoveWithWriteBarrier` (e.g. from `Array.Copy` or `Span.CopyTo`) which is lowered down to [InlinedForwardGCSafeCopyHelper](https://github.com/dotnet/runtime/blob/1d760d6de8250eecb5b3711957e0393a796c89b5/src/coreclr/classlibnative/bcltype/arraynative.inl#L16-L148) (or `InlinedBackwardGCSafeCopyHelper`) functions (if the length is more than `16384` bytes we do it in chunks to prevent GC starvation).\r\n\r\nA few questions:\r\n1) Should we add explicit NEON here for arm64 (if native compilers don\u0027t vectorize grouped 8-byte loads)\r\n2) Perhaps, even runtime-checked AVX2/AVX512 ? (since VM is compiled only for SSE2)\r\n3) Should we align arrays to 16 bytes like we did for the non-GC `Buffer.Memmove`\r\n~~4) Perhaps, even just call the native `memmove`? (I assume the downside of it that it doesn\u0027t realize our data is already 8-byte aligned)~~\r\n\r\n\r\ncc @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaKzA-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5oox_5",
                                           "createdAt":  "2023-10-10T14:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJNdkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2023-10-10T18:34:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Perhaps, even just call the native memmove?\r\n\r\nIt is not possible to call memmove here. The pointers have to be assigned atomically. memmove does not guarantee that. If the atomicity guarantees are broken, it causes bad crashes in the GC that take months to track down back to the root cause. The current implementation is fragile, valid C++ compiler optimizations can introduce bugs in it.\r\n\r\nDoing simple tweaks to improve perf (especially for Arm64) sounds good to me as long as it does not regress the perf for small sizes and the atomicity is explicitly guaranteed in architecture manuals. \r\n\r\nIt is probably not worth it to boil the ocean trying to optimize this. The bulk write barriers are not precise and they off-load work to the GC pause time. If the code ends up calling them a lot for large arrays, they will see a lot of time spent in GC pause times in end-to-end time, vectorization of this copy routine won\u0027t help much for end-to-end times.\r\n\r\nBTW: If you are going over our custom implementations of memory copying, you can also take a look at `memcopy` in the GC.",
                                           "updatedAt":  "2023-10-10T14:17:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oo6F2",
                                           "createdAt":  "2023-10-10T14:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "For the context, I am mostly interested in reducing possible reasons of noise we\u0027re observing in many benchmarks, we believe that 8-byte alignment in GC is one of them. So presumably it should be relatively simple to do a single 8-byte copy here to align to 16 bytes if it\u0027s not aligned ",
                                           "updatedAt":  "2023-10-10T14:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oo7g5",
                                           "createdAt":  "2023-10-10T14:35:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e The pointers have to be assigned atomically\r\n\r\nWell, the current implementation is using SIMD loads/stores on x64 which are not guaranteed to be atomic (only on hardware with AVX+ and if aligned to 16 bytes boundary). Meaning, CPU can do per-byte copy for the remainder that crossed the cache-line boundary (it\u0027s unlikely that modern CPUs do that, but nobody guarentee that)",
                                           "updatedAt":  "2023-10-10T14:37:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opDBX",
                                           "createdAt":  "2023-10-10T14:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I can believe that the current implementation has latent bugs.",
                                           "updatedAt":  "2023-10-10T14:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opMVa",
                                           "createdAt":  "2023-10-10T14:56:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e the current implementation is using SIMD loads/stores on x64 which are not guaranteed to be atomic\r\n\r\nThis was introduced in https://github.com/dotnet/coreclr/pull/9999/files#diff-e5b44a5dac885085c6a8b7ffdbbee7614c91a2c9914c997faa82b8715b76938eR65-R66",
                                           "updatedAt":  "2023-10-10T14:56:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orFwh",
                                           "createdAt":  "2023-10-10T19:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Together with @jakobbotsch we spent a bit of time trying to understand this:\r\n```c\r\n        // Align the destination pointer to 16 bytes for the next set of 16-byte copies\r\n        if (((SIZE_T)dptr \u0026 sizeof(SIZE_T)) != 0)\r\n        {\r\n            *dptr = *sptr;\r\n\r\n            ++sptr;\r\n            ++dptr;\r\n            len -= sizeof(SIZE_T);\r\n            if (len \u003c 4 * sizeof(SIZE_T))\r\n            {\r\n                continue;\r\n            }\r\n        }\r\n```\r\nIt seems like it just checks 4th/8th bit in `dptr` to decide whether it\u0027s aligned to 16 bytes or not (according to, presumably, stale comment) while it should have been `dptr \u0026 15 != 0`. Although, it seems like it doesn\u0027t result in an invalid behavior, however, it doesn\u0027t align dest to 16 bytes as advertised.\r\n\r\nAlso, technically, to use SIMD we need both src and destination to be aligned to 16 bytes which may not be possible if they have different alignment (not an issue on ARM64 where SIMD officially promises atomicity for 8 byte chunks if 8-byte aligned).",
                                           "updatedAt":  "2023-10-10T19:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orHx9",
                                           "createdAt":  "2023-10-10T19:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The method expects the sptr and dptr to be pointer aligned. It is asserted at the start of the method. GC does not support references at misaligned locations.",
                                           "updatedAt":  "2023-10-10T19:58:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orJWu",
                                           "createdAt":  "2023-10-10T20:03:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e The method expects the sptr and dptr to be pointer aligned. It is asserted at the start of the method. GC does not support references at misaligned locations.\r\n\r\nAh, nvm, that part is correct indeed, `dptr \u0026 8 != 0` gives us non 16-byte aligned result, however, it does not do that on 32bit, right? (since `sizeof(SIZE_T)` is 4 there), which is, presumably, not an issue since SIMD is used unde TARGET_AMD64.\r\n\r\nHowever, the point about non-aligned load (while destination is) still stands then on xarch.",
                                           "updatedAt":  "2023-10-10T20:03:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orK8y",
                                           "createdAt":  "2023-10-10T20:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e however, it does not do that on 32bit, right?\r\n\r\nAlso, as far as I can see, the code doesn\u0027t check whether AVX2 is supported so it isn\u0027t safe even on X64.",
                                           "updatedAt":  "2023-10-10T20:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orMD7",
                                           "createdAt":  "2023-10-10T20:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e however, it does not do that on 32bit, right?\r\n\u003e \r\n\u003e Also, as far as I can see, the code doesn\u0027t check whether AVX2 is supported so it isn\u0027t safe even on X64.\r\n\r\nShould be just AVX1 (to rely on 128bit vectors to be atomic), however, it\u0027s probably mostly theoretical issues.",
                                           "updatedAt":  "2023-10-10T20:11:12Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Improve Buffer.BulkMoveWithWriteBarrier",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93318",
        "createdAt":  "2023-10-10T22:53:29Z",
        "number":  93318,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-16T18:21:00Z",
        "body":  "https://github.com/dotnet/runtime/blob/5b7ab0416fe04b23b026534cef36731172c7675c/src/coreclr/vm/nativeformatreader.h#L19-L20\r\n\r\nI am not sure how perf-sensitive this code is, but it looks odd that the NEON path here:\r\nhttps://github.com/dotnet/runtime/blob/5b7ab0416fe04b23b026534cef36731172c7675c/src/coreclr/vm/nativeformatreader.h#L694-L704\r\n\r\nis only enabled for Windows and Linux/Mac use scalar fallback instead.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "USE_ARM_INTRINSICS_FOR_CUCKOO_FILTER is not defined for Linux/Mac",
        "labels":  [
                       "arch-arm64",
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108506",
        "createdAt":  "2023-11-30T16:30:38Z",
        "number":  108506,
        "author":  "FlsZen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7haqA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "psmulovics",
                                            "createdAt":  "2023-12-01T01:54:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2023-12-04T08:56:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "czdietrich",
                                            "createdAt":  "2024-01-16T07:32:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mayphi",
                                            "createdAt":  "2024-10-03T03:45:30Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-10-10T14:12:10Z",
        "body":  "### Description\n\nWhile updating from net7 to net8, a couple of my unit tests started deadlocking. It looks like they deadlock in JIT while accessing System.Windows types. \r\n\r\n![image](https://github.com/dotnet/runtime/assets/5813622/37d4e8bb-f765-4016-87b6-f8b309f9ee20)\r\n\n\n### Reproduction Steps\n\n1. Open attached Deadlock.sln\r\n2. Run the tests in Deadlock-net8 until failure\r\n\r\n[Deadlock.zip](https://github.com/dotnet/wpf/files/13515312/Deadlock.zip)\r\n\n\n### Expected behavior\n\nRunning Deadlock-net8 tests should be successful each time.\n\n### Actual behavior\n\nI observe it deadlocking at least every few runs.\n\n### Regression?\n\nThis works on net7. Run the tests in Deadlock-net7 until failure to observe.\n\n### Known Workarounds\n\nUsing xUnit Collection attributes to disable parallelization gets the test to run.\n\n### Impact\n\nI\u0027m concerned that this JIT / assembly loading issue could cause deadlocks at runtime.\r\n\r\nWhile my test cases are narrowed to calling a WPF assembly, I\u0027m not yet convinced that it isn\u0027t a runtime issue. I did try calling into a custom stub assembly instead of WPF and the tests ran fine. I\u0027m not sure if the issue could be related to something like how long it takes the assembly to load or some other non-WPF criteria.\n\n### Configuration\n\n.NET 8.0.0\r\nWindows 11 x64\r\nUnsure if specific to this configuration, but net7 runs the tests fine on the OS.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj1g3xA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Oe3Y7",
                                           "createdAt":  "2024-01-18T07:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czdietrich",
                                           "body":  "We experience a very similar problem since migrating to .NET 8. The issue also occurs for us when running unit tests, ~~but with the difference that it only happens when also collecting code coverage is switched on. (`dotnet test --collect \"Code Coverage\"`)~~\r\n\r\nOn the first glance, it looks like WPF is not involved in our case, but main parts of the call stack look fairly close to yours.\r\n\r\n![deadlock](https://github.com/user-attachments/assets/b02b8d9c-1574-4117-81a0-8e154e491bed)\r\n\r\nMaybe this is a general .NET issue and we should move it to the [dotnet/runtime](https://github.com/dotnet/runtime) repo.",
                                           "updatedAt":  "2024-10-04T10:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Oe3Y-",
                                           "createdAt":  "2024-01-19T09:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "@czdietrich Do you create the issues in [dotnet/runtime](https://github.com/dotnet/runtime) repo?",
                                           "updatedAt":  "2024-01-19T09:40:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Oe3Y_",
                                           "createdAt":  "2024-01-19T10:00:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD03aXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-01-19T11:14:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FlsZen",
                                                                               "createdAt":  "2024-10-04T15:53:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "czdietrich",
                                           "body":  "I hoped we could just move this issue, since @FlsZen has already attached repro steps. \r\nFor us the issue happens for our business application which is not open source, so creating useful reproduction steps that can be shared easily may be most probably time consuming. \r\nNevertheless I could share a memory dump of the hanging process internally.",
                                           "updatedAt":  "2024-01-19T10:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Oe3ZG",
                                           "createdAt":  "2024-10-02T12:25:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czdietrich",
                                           "body":  "Could we consider to bump up the priority of this issue? We still experience that problem even without collecting code coverage.\r\nThere are still no reproduction steps we can share publicly, but we could probably share memory dumps of the deadlocked processes internally, if requested.\r\n",
                                           "updatedAt":  "2024-10-02T12:27:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Oe3ZN",
                                           "createdAt":  "2024-10-02T13:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "miloush",
                                           "body":  "@singhashish-wpf could you move this to dotnet/runtime?",
                                           "updatedAt":  "2024-10-02T13:16:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OsHHk",
                                           "createdAt":  "2024-10-04T15:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-04T15:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ott6v",
                                           "createdAt":  "2024-10-04T18:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @dotnet/jit-contrib. ",
                                           "updatedAt":  "2024-10-04T18:34:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Otw1O",
                                           "createdAt":  "2024-10-04T18:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "The JIT does not take any locks by itself, so this is more likely a runtime issue.",
                                           "updatedAt":  "2024-10-04T18:43:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Otxi1",
                                           "createdAt":  "2024-10-04T18:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-04T18:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Otxon",
                                           "createdAt":  "2024-10-04T18:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "cc @mangod9 ",
                                           "updatedAt":  "2024-10-04T18:45:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Otz5z",
                                           "createdAt":  "2024-10-04T18:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@czdietrich, yeah if you have dumps please privately share them. \r\n\r\n@FlsZen, just checking whether your original issue still repros on latest .NET 8 servicing release? ",
                                           "updatedAt":  "2024-10-04T18:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OuGtX",
                                           "createdAt":  "2024-10-04T19:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlsZen",
                                           "body":  "@mangod9 Yes, it\u0027s reproducing for me with .NET 8.0.8. The stuck stacks look to me to be the same as before:\r\n![image](https://github.com/user-attachments/assets/61f9f3e8-c5d6-4e07-b43b-c373168a4699)",
                                           "updatedAt":  "2024-10-04T19:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OuSLd",
                                           "createdAt":  "2024-10-04T20:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlsZen",
                                           "body":  "@mangod9 I just tested with 9.0.0-rc1 and it completed 1,000 iterations without getting stuck. 8.0.8 gets stuck for me on the first or second iteration.\r\n",
                                           "updatedAt":  "2024-10-04T20:10:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OxWhw",
                                           "createdAt":  "2024-10-06T05:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I am not able to repro the deadlock on my machine. Adding @davidwrighton here since there has been a significant change around statics in 9 which might have changed the timings for this. If possible can you please share a full dump with the deadlock occurs? ",
                                           "updatedAt":  "2024-10-06T05:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ox6TQ",
                                           "createdAt":  "2024-10-06T13:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "It appears you are using the VS debugger in mixed mode to generate your call stacks. Unfortunately, that system has a flaw where it will never actually show stack frames in coreclr dll, which is where the meaningful part of the stack for us to investigate would be. The way to get good stacks in this case is to either debug this in VS while attaching to the process as a native process, or use a different debugger like windbg which will always show the native stack data. Or send us crash dumps where we can do this. Another option would be to make a crash dump from what you are looking at and open it in windbg and type `~*k` and put the output in the comments here.",
                                           "updatedAt":  "2024-10-06T13:51:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6O02Z6",
                                           "createdAt":  "2024-10-07T08:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czdietrich",
                                           "body":  "Thank you for pointing this out. Here is what WinDbg printed out:\r\n\u003cdetails\u003e\r\n\u003csummary\u003eWinDbg output\u003c/summary\u003e\r\n\r\n```\r\n0:000\u003e ~*k\r\n\r\n.  0  Id: 2668.25c8 Suspend: 0 Teb: 00000005`69db6000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`69f7dfb8 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`69f7dfc0 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`69f7e2b0 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`69f7e370 00007ffe`2c831e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n07 (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n08 (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n09 00000005`69f7e3f0 00007ffe`2c830f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0a (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0b (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n0c 00000005`69f7e500 00007ffe`000bd57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n0d 00000005`69f7e680 00007ffe`000c862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n0e 00000005`69f7e6b0 00007ffe`000e1749     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n0f 00000005`69f7e750 00007ffe`000e1536     System_Private_CoreLib!System.Threading.Tasks.Task.SpinThenBlockingWait+0xa9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3072] \r\n10 00000005`69f7e7d0 00007ffe`000e113a     System_Private_CoreLib!System.Threading.Tasks.Task.InternalWaitCore+0x76 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3007] \r\n11 00000005`69f7e850 00007ffe`000e1012     System_Private_CoreLib!System.Threading.Tasks.Task.Wait+0x3a [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2768] \r\n12 00000005`69f7e880 00007ffd`ccd2aa21     System_Private_CoreLib!System.Threading.Tasks.Task.Wait+0x12 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2634] \r\n13 00000005`69f7e8b0 000001bc`42433b58     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.Invoke+0x3d1\r\n14 00000005`69f7e8b8 00000000`00000000     0x000001bc`42433b58\r\n\r\n   1  Id: 2668.2514 Suspend: 0 Teb: 00000005`69dbe000 Unfrozen \".NET EventPipe\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6a57f1d8 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6a57f1e0 00007ffe`4380448e     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 00000005`6a57f4d0 00007ffe`2c83d963     KERNELBASE!WaitForMultipleObjects+0xe\r\n03 00000005`6a57f510 00007ffe`2c83d850     coreclr!ds_ipc_poll+0xf3 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc-pal-namedpipe.c @ 265] \r\n04 00000005`6a57f790 00007ffe`2c83d734     coreclr!ds_ipc_stream_factory_get_next_available_stream+0x108 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc.c @ 402] \r\n05 00000005`6a57f860 00007ffe`44144cb0     coreclr!server_thread+0x54 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 129] \r\n06 00000005`6a57f8d0 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n07 00000005`6a57f900 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n   2  Id: 2668.5a4 Suspend: 0 Teb: 00000005`69dc0000 Unfrozen \".NET Debugger\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6a6ff438 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6a6ff440 00007ffe`2c805f89     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 00000005`6a6ff730 00007ffe`2c805a5a     coreclr!DebuggerRCThread::MainLoop+0xe9 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 927] \r\n03 00000005`6a6ff7f0 00007ffe`2c805ffb     coreclr!DebuggerRCThread::ThreadProc+0x12e [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 730] \r\n04 00000005`6a6ff850 00007ffe`44144cb0     coreclr!DebuggerRCThread::ThreadProcStatic+0x5b [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 1321] \r\n05 00000005`6a6ff880 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n06 00000005`6a6ff8b0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  11  Id: 2668.2708 Suspend: 0 Teb: 00000005`69dd2000 Unfrozen \".NET Finalizer\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6ac7f178 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6ac7f180 00007ffe`2c835cc1     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 00000005`6ac7f470 00007ffe`2c835b13     coreclr!FinalizerThread::WaitForFinalizerEvent+0x6d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 173] \r\n03 00000005`6ac7f4b0 00007ffe`2c830259     coreclr!FinalizerThread::FinalizerThreadWorker+0x53 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 262] \r\n04 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n05 00000005`6ac7f700 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n06 00000005`6ac7f7c0 00007ffe`2c850641     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n07 (Inline Function) --------`--------     coreclr!ManagedThreadBase_NoADTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7494] \r\n08 (Inline Function) --------`--------     coreclr!ManagedThreadBase::FinalizerBase+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7513] \r\n09 00000005`6ac7f860 00007ffe`44144cb0     coreclr!FinalizerThread::FinalizerThreadStart+0x91 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 403] \r\n0a 00000005`6ac7f970 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n0b 00000005`6ac7f9a0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  12  Id: 2668.1584 Suspend: 0 Teb: 00000005`69dd4000 Unfrozen \".NET Tiered Compilation Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6adfd688 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6adfd690 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6adfd7b0 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6adfd7e0 00007ffe`2c7dbb2d     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n05 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 378] \r\n06 00000005`6adfd810 00007ffe`2c765925     coreclr!MethodTable::AllocateRegularStaticBox+0xd5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4204] \r\n07 00000005`6adfd890 00007ffe`2c650aa8     coreclr!CEEInfo::getFieldInfo+0x12e5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1632] \r\n08 (Inline Function) --------`--------     clrjit!Compiler::eeGetFieldInfo+0x31 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.hpp @ 42] \r\n09 00000005`6adfdaf0 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2eb8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8841] \r\n0a 00000005`6adfe300 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n0b 00000005`6adfe400 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n0c 00000005`6adfe470 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n0d (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n0e (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n0f 00000005`6adfe4a0 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n10 00000005`6adfe750 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n11 00000005`6adfe830 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n12 00000005`6adfe920 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n13 00000005`6adfeac0 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n14 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n15 (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n16 00000005`6adfeb60 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n17 00000005`6adff0c0 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n18 00000005`6adff1d0 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n19 00000005`6adff2f0 00007ffe`2c76f93f     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n1a 00000005`6adff390 00007ffe`2c7fb729     coreclr!MethodDesc::PrepareILBasedCode+0xc3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 441] \r\n1b (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n1c 00000005`6adff420 00007ffe`2c7faf82     coreclr!TieredCompilationManager::CompileCodeVersion+0xc5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 962] \r\n1d (Inline Function) --------`--------     coreclr!TieredCompilationManager::OptimizeMethod+0x25 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 939] \r\n1e 00000005`6adff540 00007ffe`2c8754fc     coreclr!TieredCompilationManager::DoBackgroundWork+0x1d6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 824] \r\n1f 00000005`6adff6d0 00007ffe`2c8753ed     coreclr!TieredCompilationManager::BackgroundWorkerStart+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 537] \r\n20 00000005`6adff720 00007ffe`2c830259     coreclr!TieredCompilationManager::BackgroundWorkerBootstrapper1+0x6d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 486] \r\n21 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n22 00000005`6adff760 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n23 00000005`6adff820 00007ffe`2c89530a     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n24 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n25 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n26 00000005`6adff8c0 00007ffe`44144cb0     coreclr!TieredCompilationManager::BackgroundWorkerBootstrapper0+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 469] \r\n27 00000005`6adff910 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n28 00000005`6adff940 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  13  Id: 2668.24dc Suspend: 0 Teb: 00000005`69dd8000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6af7d4d8 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6af7d4e0 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6af7d7d0 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6af7d890 00007ffe`2c831e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n07 (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n08 (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n09 00000005`6af7d910 00007ffe`2c830f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0a (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0b (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n0c 00000005`6af7da20 00007ffe`000bd57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n0d 00000005`6af7dba0 00007ffe`000c862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n0e 00000005`6af7dbd0 00007ffe`000c845d     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n0f 00000005`6af7dc70 00007ffd`cd949174     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0xd [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 447] \r\n10 00000005`6af7dca0 00000005`6af7dcf0     nunit_framework!NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion+0x24\r\n11 00000005`6af7dca8 00000000`00000002     0x00000005`6af7dcf0\r\n12 00000005`6af7dcb0 00000000`00000000     0x2\r\n\r\n  14  Id: 2668.21f0 Suspend: 0 Teb: 00000005`69dda000 Unfrozen \".NET TP Wait\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`69bef018 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`69bef020 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`69bef310 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`69bef3d0 00007ffe`2c832a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000005`69bef450 00007ffe`000c1672     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000005`69bef600 00007ffe`000db691     System_Private_CoreLib!System.Threading.WaitHandle.WaitAnyMultiple+0x132 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 335] \r\n07 00000005`69bef670 00007ffe`2c89c663     System_Private_CoreLib!System.Threading.PortableThreadPool.WaitThread.WaitThreadStart+0x91 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WaitThread.cs @ 246] \r\n08 00000005`69bef6e0 00007ffe`2c7515e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n09 00000005`69bef720 00007ffe`2c889a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0a 00000005`69bef7b0 00007ffe`2c830259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0c 00000005`69bef810 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0d 00000005`69bef8d0 00007ffe`2c83030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n10 00000005`69bef970 00007ffe`44144cb0     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n11 00000005`69bef9d0 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n12 00000005`69befa00 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  15  Id: 2668.2680 Suspend: 0 Teb: 00000005`69ddc000 Unfrozen \".NET ThreadPool IO\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6afbf7e8 00007ffe`438e2764     ntdll!NtRemoveIoCompletionEx+0x14\r\n01 00000005`6afbf7f0 00007ffe`000db019     KERNELBASE!GetQueuedCompletionStatusEx+0xc4\r\n02 00000005`6afbf890 00007ffe`2c89c663     System_Private_CoreLib!System.Threading.PortableThreadPool.IOCompletionPoller.Poll+0x89 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.IO.Windows.cs @ 188] \r\n03 00000005`6afbf9a0 00007ffe`2c7515e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n04 00000005`6afbf9e0 00007ffe`2c889a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n05 00000005`6afbfa70 00007ffe`2c830259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n06 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n07 00000005`6afbfad0 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n08 00000005`6afbfb90 00007ffe`2c83030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n09 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0a (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0b 00000005`6afbfc30 00007ffe`44144cb0     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0c 00000005`6afbfc90 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n0d 00000005`6afbfcc0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  16  Id: 2668.2580 Suspend: 0 Teb: 00000005`69dde000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b13ec28 00007ffe`429987d5     ntdll!NtWaitForSingleObject+0x14\r\n01 00000005`6b13ec30 00007ffe`4299e16c     mswsock!SockWaitForSingleObject+0x115\r\n02 00000005`6b13ecd0 00007ffe`45da2222     mswsock!WSPSelect+0x86c\r\n03 00000005`6b13ee80 00007ffe`29d45380     ws2_32!select+0x152\r\n04 00000005`6b13ef60 00007ffe`29d6c3f6     System_Net_Sockets!Interop.Winsock.select+0x80 [/_/src/libraries/System.Net.Sockets/src/Microsoft.Interop.LibraryImportGenerator/Microsoft.Interop.LibraryImportGenerator/LibraryImports.g.cs @ 549] \r\n05 00000005`6b13f050 00007ffe`29d538b5     System_Net_Sockets!System.Net.Sockets.SocketPal.Poll+0xb6 [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Windows.cs @ 846] \r\n06 00000005`6b13f0f0 00007ffd`ccd304eb     System_Net_Sockets!System.Net.Sockets.Socket.Poll+0x35 [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs @ 2230] \r\n07 00000005`6b13f140 000001bc`4242fec0     Microsoft_TestPlatform_CommunicationUtilities!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions.MessageLoopAsync+0x2db\r\n08 00000005`6b13f148 00000000`000f4240     0x000001bc`4242fec0\r\n09 00000005`6b13f150 00000000`00000000     0xf4240\r\n\r\n  17  Id: 2668.bc4 Suspend: 0 Teb: 00000005`69de0000 Unfrozen \".NET TP Gate\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b17f118 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6b17f120 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6b17f410 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6b17f4d0 00007ffe`2c832b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000005`6b17f550 00007ffe`000c0cf4     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000005`6b17f6d0 00007ffe`000d9201     System_Private_CoreLib!System.Threading.WaitHandle.WaitOneNoCheck+0x64 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 131] \r\n07 00000005`6b17f730 00007ffe`2c89c663     System_Private_CoreLib!System.Threading.PortableThreadPool.GateThread.GateThreadStart+0x141 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.GateThread.cs @ 54] \r\n08 00000005`6b17f870 00007ffe`2c7515e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n09 00000005`6b17f8b0 00007ffe`2c889a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0a 00000005`6b17f940 00007ffe`2c830259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0c 00000005`6b17f9a0 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0d 00000005`6b17fa60 00007ffe`2c83030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n10 00000005`6b17fb00 00007ffe`44144cb0     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n11 00000005`6b17fb60 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n12 00000005`6b17fb90 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  18  Id: 2668.f00 Suspend: 0 Teb: 00000005`69de2000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b2ff138 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6b2ff140 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6b2ff430 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6b2ff4f0 00007ffe`2c832401     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x53 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 00000005`6b2ff570 00007ffe`2c832130     coreclr!CLREventBase::Wait+0x59 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 413] \r\n07 00000005`6b2ff5c0 00007ffe`2c831fe2     coreclr!AwareLock::EnterEpilogHelper+0x134 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2617] \r\n08 00000005`6b2ff6a0 00007ffe`2c831f69     coreclr!AwareLock::EnterEpilog+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2488] \r\n09 00000005`6b2ff6f0 00007ffe`2c8317c6     coreclr!AwareLock::Enter+0x99 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2403] \r\n0a (Inline Function) --------`--------     coreclr!SyncBlock::EnterMonitor+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.h @ 1174] \r\n0b (Inline Function) --------`--------     coreclr!ObjHeader::EnterObjMonitor+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 1546] \r\n0c (Inline Function) --------`--------     coreclr!Object::EnterObjMonitor+0x16 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 277] \r\n0d 00000005`6b2ff720 00007ffe`2c8313df     coreclr!JIT_MonEnter_Helper+0x10a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3794] \r\n0e 00000005`6b2ff8b0 00007ffd`cdef8c89     coreclr!JIT_MonReliableEnter_Portable+0x16f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3842] \r\n0f 00000005`6b2ff8e0 00000000`00000000     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnCacheTimeHit+0x49\r\n\r\n  19  Id: 2668.27bc Suspend: 0 Teb: 00000005`69de4000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b47ea28 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6b47ea30 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6b47ed20 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6b47ede0 00007ffe`2c832401     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x53 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 00000005`6b47ee60 00007ffe`2c832130     coreclr!CLREventBase::Wait+0x59 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 413] \r\n07 00000005`6b47eeb0 00007ffe`2c831fe2     coreclr!AwareLock::EnterEpilogHelper+0x134 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2617] \r\n08 00000005`6b47ef90 00007ffe`2c831f69     coreclr!AwareLock::EnterEpilog+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2488] \r\n09 00000005`6b47efe0 00007ffe`2c8317c6     coreclr!AwareLock::Enter+0x99 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2403] \r\n0a (Inline Function) --------`--------     coreclr!SyncBlock::EnterMonitor+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.h @ 1174] \r\n0b (Inline Function) --------`--------     coreclr!ObjHeader::EnterObjMonitor+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 1546] \r\n0c (Inline Function) --------`--------     coreclr!Object::EnterObjMonitor+0x16 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 277] \r\n0d 00000005`6b47f010 00007ffe`2c8313df     coreclr!JIT_MonEnter_Helper+0x10a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3794] \r\n0e 00000005`6b47f1a0 00007ffd`cdef8c89     coreclr!JIT_MonReliableEnter_Portable+0x16f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3842] \r\n0f 00000005`6b47f1d0 00000000`00000000     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnCacheTimeHit+0x49\r\n\r\n  20  Id: 2668.5a0 Suspend: 0 Teb: 00000005`69de6000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b5fc9d8 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6b5fc9e0 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6b5fcb00 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6b5fcb30 00007ffe`2c7509cf     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6b5fcb60 00007ffe`2c752240     coreclr!ListLockEntryBase\u003cvoid *\u003e::FinishDeadlockAwareEnter+0x1f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 209] \r\n05 (Inline Function) --------`--------     coreclr!ListLockEntryBase\u003cvoid *\u003e::LockHolder::DeadlockAwareAcquire+0x208 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 234] \r\n06 00000005`6b5fcb90 00007ffe`2c751da0     coreclr!MethodTable::DoRunClassInitThrowing+0x410 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4489] \r\n07 00000005`6b5fd120 00007ffe`2c7e6d98     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n08 00000005`6b5fd150 00007ffe`2c7e6975     coreclr!DynamicHelperFixup+0x324 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3512] \r\n09 00000005`6b5fd560 00007ffe`2c89dc0a     coreclr!DynamicHelperWorker+0x165 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3821] \r\n0a 00000005`6b5fd680 00007ffe`00155f6a     coreclr!DelayLoad_Helper+0x7a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 61] \r\n0b 00000005`6b5fd740 00007ffe`0014a832     System_Private_CoreLib!System.Reflection.RuntimeParameterInfo.GetParameters+0x31a [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeParameterInfo.cs @ 100] \r\n0c 00000005`6b5fd850 00007ffe`0014a86f     System_Private_CoreLib!System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy+0x42 [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeConstructorInfo.CoreCLR.cs @ 184] \r\n0d 00000005`6b5fd8a0 00007ffd`ccd3e9ea     System_Private_CoreLib!System.Reflection.RuntimeConstructorInfo.GetParameters+0xf [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeConstructorInfo.CoreCLR.cs @ 188] \r\n0e 00000005`6b5fd8e0 00000000`00000001     Newtonsoft_Json!Newtonsoft.Json.Utilities.ReflectionUtils.\u003c\u003ec.\u003cGetDefaultConstructor\u003eb__11_0+0x2a\r\n0f 00000005`6b5fd8e8 00000000`00000000     0x1\r\n\r\n  21  Id: 2668.2504 Suspend: 0 Teb: 00000005`69de8000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b77ec68 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6b77ec70 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6b77ef60 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6b77f020 00007ffe`2c831e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n07 (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n08 (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n09 00000005`6b77f0a0 00007ffe`2c830f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0a (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0b (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n0c 00000005`6b77f1b0 00007ffe`000bd57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n0d 00000005`6b77f330 00007ffe`000c862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n0e 00000005`6b77f360 00007ffe`000c8312     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n0f 00000005`6b77f400 00007ffd`ccd32703     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x12 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 351] \r\n10 00000005`6b77f430 000001bc`42425c78     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ProcessRequests+0x43\r\n11 00000005`6b77f438 00000000`00000000     0x000001bc`42425c78\r\n\r\n  22  Id: 2668.1ba0 Suspend: 0 Teb: 00000005`69dea000 Unfrozen \".NET Timer\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6b8ff488 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6b8ff490 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6b8ff780 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6b8ff840 00007ffe`2c832b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000005`6b8ff8c0 00007ffe`000c0cf4     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000005`6b8ffa40 00007ffe`000d204f     System_Private_CoreLib!System.Threading.WaitHandle.WaitOneNoCheck+0x64 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 131] \r\n07 00000005`6b8ffaa0 00007ffe`2c89c663     System_Private_CoreLib!System.Threading.TimerQueue.TimerThread+0x8f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/TimerQueue.Portable.cs @ 89] \r\n08 00000005`6b8ffb30 00007ffe`2c7515e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n09 00000005`6b8ffb70 00007ffe`2c889a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0a 00000005`6b8ffc00 00007ffe`2c830259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0c 00000005`6b8ffc60 00007ffe`2c830173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0d 00000005`6b8ffd20 00007ffe`2c83030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n10 00000005`6b8ffdc0 00007ffe`44144cb0     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n11 00000005`6b8ffe20 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n12 00000005`6b8ffe50 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n  23  Id: 2668.26dc Suspend: 0 Teb: 00000005`69dec000 Unfrozen \"EventPumpThread\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6ba7c4f8 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6ba7c500 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6ba7c620 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6ba7c650 00007ffe`2c7dbb2d     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n05 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 378] \r\n06 00000005`6ba7c680 00007ffe`2c7db781     coreclr!MethodTable::AllocateRegularStaticBox+0xd5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4204] \r\n07 00000005`6ba7c700 00007ffe`2c752366     coreclr!MethodTable::AllocateRegularStaticBoxes+0x121 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4177] \r\n08 00000005`6ba7c760 00007ffe`2c751da0     coreclr!MethodTable::DoRunClassInitThrowing+0x536 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4496] \r\n09 00000005`6ba7ccf0 00007ffe`2c7e6d98     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n0a 00000005`6ba7cd20 00007ffe`2c7e6975     coreclr!DynamicHelperFixup+0x324 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3512] \r\n0b 00000005`6ba7d130 00007ffe`2c89dc0a     coreclr!DynamicHelperWorker+0x165 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3821] \r\n0c 00000005`6ba7d250 00007ffe`00155f6a     coreclr!DelayLoad_Helper+0x7a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 61] \r\n0d 00000005`6ba7d310 00007ffe`0014a832     System_Private_CoreLib!System.Reflection.RuntimeParameterInfo.GetParameters+0x31a [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeParameterInfo.cs @ 100] \r\n0e 00000005`6ba7d420 00007ffe`0014a86f     System_Private_CoreLib!System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy+0x42 [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeConstructorInfo.CoreCLR.cs @ 184] \r\n0f 00000005`6ba7d470 00007ffd`ccd3e9ea     System_Private_CoreLib!System.Reflection.RuntimeConstructorInfo.GetParameters+0xf [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeConstructorInfo.CoreCLR.cs @ 188] \r\n10 00000005`6ba7d4b0 00000000`00000001     Newtonsoft_Json!Newtonsoft.Json.Utilities.ReflectionUtils.\u003c\u003ec.\u003cGetDefaultConstructor\u003eb__11_0+0x2a\r\n11 00000005`6ba7d4b8 00000000`00000000     0x1\r\n\r\n  24  Id: 2668.2578 Suspend: 0 Teb: 00000005`69dee000 Unfrozen \"ParallelWorker#1\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6bbfc4c8 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6bbfc4d0 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6bbfc5f0 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6bbfc620 00007ffe`2c750734     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6bbfc650 00007ffe`2c7506c9     coreclr!ListLockEntryBase\u003cvoid *\u003e::DeadlockAwareEnter+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 106] \r\n05 00000005`6bbfc680 00007ffe`2c7505e4     coreclr!FileLoadLock::Acquire+0x19 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2220] \r\n06 00000005`6bbfc6b0 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0x7c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2858] \r\n07 00000005`6bbfc730 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n08 00000005`6bbfc790 00007ffe`2c75e1e9     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n09 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n0a (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n0b (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x32 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n0c (Inline Function) --------`--------     coreclr!CEEInfo::EnsureActive+0x4f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 2925] \r\n0d 00000005`6bbfc7c0 00007ffe`2c6507e8     coreclr!CEEInfo::resolveToken+0x3f9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1073] \r\n0e 00000005`6bbfcac0 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2bf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8640] \r\n0f 00000005`6bbfd2d0 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n10 00000005`6bbfd3d0 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n11 00000005`6bbfd440 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n12 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n13 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n14 00000005`6bbfd470 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n15 00000005`6bbfd720 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n16 00000005`6bbfd800 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n17 00000005`6bbfd8f0 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n18 00000005`6bbfda90 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n19 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n1a (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n1b 00000005`6bbfdb30 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n1c 00000005`6bbfe090 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n1d 00000005`6bbfe1a0 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n1e 00000005`6bbfe2c0 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n1f (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n20 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n21 00000005`6bbfe360 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n22 00000005`6bbfe760 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n23 00000005`6bbfe840 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n24 00000005`6bbfe940 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n25 00000005`6bbfe9f0 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n26 00000005`6bbfea30 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n27 00000005`6bbfed60 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n28 00000005`6bbfedb0 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n29 00000005`6bbfedf0 000001bc`448f4dd8     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n2a 00000005`6bbfedf8 000001bc`43c97528     0x000001bc`448f4dd8\r\n2b 00000005`6bbfee00 00000000`00000000     0x000001bc`43c97528\r\n\r\n  25  Id: 2668.1298 Suspend: 0 Teb: 00000005`69df0000 Unfrozen \"ParallelWorker#2\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6bd7b488 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6bd7b490 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6bd7b5b0 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6bd7b5e0 00007ffe`2c7dbb2d     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n05 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 378] \r\n06 00000005`6bd7b610 00007ffe`2c7db781     coreclr!MethodTable::AllocateRegularStaticBox+0xd5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4204] \r\n07 00000005`6bd7b690 00007ffe`2c752366     coreclr!MethodTable::AllocateRegularStaticBoxes+0x121 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4177] \r\n08 00000005`6bd7b6f0 00007ffe`2c751da0     coreclr!MethodTable::DoRunClassInitThrowing+0x536 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4496] \r\n09 00000005`6bd7bc80 00007ffe`2c8e287f     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n0a 00000005`6bd7bcb0 00007ffe`2c74fe7f     coreclr!DomainAssembly::Activate+0x147947 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 595] \r\n0b 00000005`6bd7bce0 00007ffe`2c74ff29     coreclr!DomainAssembly::DoIncrementalLoad+0x107 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 441] \r\n0c 00000005`6bd7bd20 00007ffe`2c75060e     coreclr!AppDomain::TryIncrementalLoad+0xa5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2947] \r\n0d 00000005`6bd7be10 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2881] \r\n0e 00000005`6bd7be90 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n0f 00000005`6bd7bef0 00007ffe`2c76fb73     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n10 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0x11 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n11 (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n12 (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n13 00000005`6bd7bf20 00007ffe`2c801b69     coreclr!MethodDesc::EnsureActive+0x67 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\method.cpp @ 186] \r\n14 (Inline Function) --------`--------     coreclr!GCHolderBase::EnterInternalCoop+0x94f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5171] \r\n15 (Inline Function) --------`--------     coreclr!GCCoopThreadExists::{ctor}+0x94f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5363] \r\n16 00000005`6bd7bf80 00007ffe`2c89db41     coreclr!ExternalMethodFixupWorker+0xdb9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3082] \r\n17 00000005`6bd7c230 00007ffe`2c89c663     coreclr!DelayLoad_MethodCall+0x71 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 25] \r\n18 00000005`6bd7c2e0 00007ffe`2c750530     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n19 00000005`6bd7c320 00007ffe`2c751608     coreclr!DispatchCallDebuggerWrapper+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 156] \r\n1a 00000005`6bd7c380 00007ffe`2c7501cc     coreclr!DispatchCallSimple+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 215] \r\n1b (Inline Function) --------`--------     coreclr!StressLog::InlinedStressLogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 804] \r\n1c (Inline Function) --------`--------     coreclr!StressLog::LogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 838] \r\n1d 00000005`6bd7c410 00007ffe`2c7522d6     coreclr!MethodTable::RunClassInitEx+0x134 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4329] \r\n1e 00000005`6bd7c4f0 00007ffe`2c751da0     coreclr!MethodTable::DoRunClassInitThrowing+0x4a6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4512] \r\n1f 00000005`6bd7ca80 00007ffe`2c8e287f     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n20 00000005`6bd7cab0 00007ffe`2c74fe7f     coreclr!DomainAssembly::Activate+0x147947 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 595] \r\n21 00000005`6bd7cae0 00007ffe`2c74ff29     coreclr!DomainAssembly::DoIncrementalLoad+0x107 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 441] \r\n22 00000005`6bd7cb20 00007ffe`2c75060e     coreclr!AppDomain::TryIncrementalLoad+0xa5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2947] \r\n23 00000005`6bd7cc10 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2881] \r\n24 00000005`6bd7cc90 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n25 00000005`6bd7ccf0 00007ffe`2c75e1e9     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n26 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n27 (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n28 (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x32 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n29 (Inline Function) --------`--------     coreclr!CEEInfo::EnsureActive+0x4f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 2925] \r\n2a 00000005`6bd7cd20 00007ffe`2c6507e8     coreclr!CEEInfo::resolveToken+0x3f9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1073] \r\n2b 00000005`6bd7d020 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2bf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8640] \r\n2c 00000005`6bd7d830 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n2d 00000005`6bd7d930 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n2e 00000005`6bd7d9a0 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n2f (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n30 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n31 00000005`6bd7d9d0 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n32 00000005`6bd7dc80 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n33 00000005`6bd7dd60 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n34 00000005`6bd7de50 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n35 00000005`6bd7dff0 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n36 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n37 (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n38 00000005`6bd7e090 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n39 00000005`6bd7e5f0 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n3a 00000005`6bd7e700 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n3b 00000005`6bd7e820 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n3c (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n3d (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n3e 00000005`6bd7e8c0 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n3f 00000005`6bd7ecc0 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n40 00000005`6bd7eda0 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n41 00000005`6bd7eea0 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n42 00000005`6bd7ef50 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n43 00000005`6bd7ef90 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n44 00000005`6bd7f2c0 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n45 00000005`6bd7f310 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n46 00000005`6bd7f350 00007ffd`cda28fbb     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n47 00000005`6bd7f358 00000000`fffffffc     0x00007ffd`cda28fbb\r\n48 00000005`6bd7f360 00000000`00000000     0xfffffffc\r\n\r\n  26  Id: 2668.24b8 Suspend: 0 Teb: 00000005`69df2000 Unfrozen \"ParallelWorker#3\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6befcb78 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6befcb80 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6befcca0 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6befccd0 00007ffe`2c750734     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6befcd00 00007ffe`2c7506c9     coreclr!ListLockEntryBase\u003cvoid *\u003e::DeadlockAwareEnter+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 106] \r\n05 00000005`6befcd30 00007ffe`2c7505e4     coreclr!FileLoadLock::Acquire+0x19 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2220] \r\n06 00000005`6befcd60 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0x7c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2858] \r\n07 00000005`6befcde0 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n08 00000005`6befce40 00007ffe`2c75e1e9     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n09 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n0a (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n0b (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x32 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n0c (Inline Function) --------`--------     coreclr!CEEInfo::EnsureActive+0x4f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 2925] \r\n0d 00000005`6befce70 00007ffe`2c6507e8     coreclr!CEEInfo::resolveToken+0x3f9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1073] \r\n0e 00000005`6befd170 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2bf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8640] \r\n0f 00000005`6befd980 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n10 00000005`6befda80 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n11 00000005`6befdaf0 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n12 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n13 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n14 00000005`6befdb20 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n15 00000005`6befddd0 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n16 00000005`6befdeb0 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n17 00000005`6befdfa0 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n18 00000005`6befe140 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n19 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n1a (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n1b 00000005`6befe1e0 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n1c 00000005`6befe740 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n1d 00000005`6befe850 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n1e 00000005`6befe970 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n1f (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n20 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n21 00000005`6befea10 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n22 00000005`6befee10 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n23 00000005`6befeef0 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n24 00000005`6befeff0 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n25 00000005`6beff0a0 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n26 00000005`6beff0e0 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n27 00000005`6beff410 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n28 00000005`6beff460 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n29 00000005`6beff4a0 000001bc`448f4dd8     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n2a 00000005`6beff4a8 000001bc`43c97528     0x000001bc`448f4dd8\r\n2b 00000005`6beff4b0 00000000`00000000     0x000001bc`43c97528\r\n\r\n  27  Id: 2668.24bc Suspend: 0 Teb: 00000005`69df4000 Unfrozen \"ParallelWorker#4\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c07c938 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6c07c940 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6c07ca60 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6c07ca90 00007ffe`2c750734     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6c07cac0 00007ffe`2c7506c9     coreclr!ListLockEntryBase\u003cvoid *\u003e::DeadlockAwareEnter+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 106] \r\n05 00000005`6c07caf0 00007ffe`2c7505e4     coreclr!FileLoadLock::Acquire+0x19 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2220] \r\n06 00000005`6c07cb20 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0x7c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2858] \r\n07 00000005`6c07cba0 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n08 00000005`6c07cc00 00007ffe`2c7e8833     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n09 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n0a (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n0b 00000005`6c07cc30 00007ffe`2c7db81c     coreclr!MethodTable::EnsureInstanceActive+0x43 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8428] \r\n0c 00000005`6c07cc60 00007ffe`2c7dbb63     coreclr!MethodTable::AllocateStaticBox+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4235] \r\n0d 00000005`6c07cca0 00007ffe`2c765925     coreclr!MethodTable::AllocateRegularStaticBox+0x10b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4212] \r\n0e 00000005`6c07cd20 00007ffe`2c650aa8     coreclr!CEEInfo::getFieldInfo+0x12e5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1632] \r\n0f (Inline Function) --------`--------     clrjit!Compiler::eeGetFieldInfo+0x31 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.hpp @ 42] \r\n10 00000005`6c07cf80 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2eb8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8841] \r\n11 00000005`6c07d790 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n12 00000005`6c07d890 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n13 00000005`6c07d900 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n14 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n15 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n16 00000005`6c07d930 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n17 00000005`6c07dbe0 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n18 00000005`6c07dcc0 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n19 00000005`6c07ddb0 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n1a 00000005`6c07df50 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n1b (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n1c (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n1d 00000005`6c07dff0 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n1e 00000005`6c07e550 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n1f 00000005`6c07e660 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n20 00000005`6c07e780 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n21 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n22 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n23 00000005`6c07e820 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n24 00000005`6c07ec20 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n25 00000005`6c07ed00 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n26 00000005`6c07ee00 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n27 00000005`6c07eeb0 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n28 00000005`6c07eef0 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n29 00000005`6c07f220 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n2a 00000005`6c07f270 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n2b 00000005`6c07f2b0 000001bc`448f4dd8     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n2c 00000005`6c07f2b8 000001bc`43c97528     0x000001bc`448f4dd8\r\n2d 00000005`6c07f2c0 00000000`00000000     0x000001bc`43c97528\r\n\r\n  28  Id: 2668.2658 Suspend: 0 Teb: 00000005`69df6000 Unfrozen \"ParallelWorker#5\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c1fd028 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6c1fd030 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6c1fd150 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6c1fd180 00007ffe`2c7509cf     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6c1fd1b0 00007ffe`2c752240     coreclr!ListLockEntryBase\u003cvoid *\u003e::FinishDeadlockAwareEnter+0x1f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 209] \r\n05 (Inline Function) --------`--------     coreclr!ListLockEntryBase\u003cvoid *\u003e::LockHolder::DeadlockAwareAcquire+0x208 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 234] \r\n06 00000005`6c1fd1e0 00007ffe`2c751da0     coreclr!MethodTable::DoRunClassInitThrowing+0x410 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4489] \r\n07 00000005`6c1fd770 00007ffe`2c7e6d98     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n08 00000005`6c1fd7a0 00007ffe`2c7e6975     coreclr!DynamicHelperFixup+0x324 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3512] \r\n09 00000005`6c1fdbb0 00007ffe`2c89dc0a     coreclr!DynamicHelperWorker+0x165 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3821] \r\n0a 00000005`6c1fdcd0 00007ffe`00155feb     coreclr!DelayLoad_Helper+0x7a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 61] \r\n0b 00000005`6c1fdd90 00007ffe`00152d52     System_Private_CoreLib!System.Reflection.RuntimeParameterInfo.GetParameters+0x39b [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeParameterInfo.cs @ 89] \r\n0c 00000005`6c1fdea0 00007ffd`cdef7e68     System_Private_CoreLib!System.Reflection.RuntimeMethodInfo.FetchReturnParameter+0x42 [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.CoreCLR.cs @ 80] \r\n0d 00000005`6c1fdef0 000001bc`40c0e000     Castle_Core!Castle.DynamicProxy.Generators.Emitters.MethodEmitter..ctor+0xc8\r\n0e 00000005`6c1fdef8 00000000`00000000     0x000001bc`40c0e000\r\n\r\n  29  Id: 2668.1be4 Suspend: 0 Teb: 00000005`69df8000 Unfrozen \"ParallelWorker#6\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c37c878 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6c37c880 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6c37c9a0 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6c37c9d0 00007ffe`2c750734     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 00000005`6c37ca00 00007ffe`2c7506c9     coreclr!ListLockEntryBase\u003cvoid *\u003e::DeadlockAwareEnter+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 106] \r\n05 00000005`6c37ca30 00007ffe`2c7505e4     coreclr!FileLoadLock::Acquire+0x19 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2220] \r\n06 00000005`6c37ca60 00007ffe`2c848a04     coreclr!AppDomain::LoadDomainAssembly+0x7c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2858] \r\n07 00000005`6c37cae0 00007ffe`2c84890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n08 00000005`6c37cb40 00007ffe`2c75e1e9     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n09 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n0a (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n0b (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x32 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n0c (Inline Function) --------`--------     coreclr!CEEInfo::EnsureActive+0x4f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 2925] \r\n0d 00000005`6c37cb70 00007ffe`2c6507e8     coreclr!CEEInfo::resolveToken+0x3f9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1073] \r\n0e 00000005`6c37ce70 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2bf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8640] \r\n0f 00000005`6c37d680 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n10 00000005`6c37d780 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n11 00000005`6c37d7f0 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n12 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n13 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n14 00000005`6c37d820 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n15 00000005`6c37dad0 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n16 00000005`6c37dbb0 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n17 00000005`6c37dca0 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n18 00000005`6c37de40 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n19 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n1a (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n1b 00000005`6c37dee0 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n1c 00000005`6c37e440 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n1d 00000005`6c37e550 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n1e 00000005`6c37e670 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n1f (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n20 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n21 00000005`6c37e710 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n22 00000005`6c37eb10 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n23 00000005`6c37ebf0 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n24 00000005`6c37ecf0 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n25 00000005`6c37eda0 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n26 00000005`6c37ede0 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n27 00000005`6c37f110 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n28 00000005`6c37f160 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n29 00000005`6c37f1a0 000001bc`448f4dd8     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n2a 00000005`6c37f1a8 000001bc`43c97528     0x000001bc`448f4dd8\r\n2b 00000005`6c37f1b0 00000000`00000000     0x000001bc`43c97528\r\n\r\n  30  Id: 2668.2540 Suspend: 0 Teb: 00000005`69dfa000 Unfrozen \"ParallelWorker#7\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c4fe3c8 00007ffe`4380458c     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000005`6c4fe3d0 00007ffe`2c832dd4     KERNELBASE!WaitForMultipleObjectsEx+0xec\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000005`6c4fe6c0 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000005`6c4fe780 00007ffe`2c832b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000005`6c4fe800 00007ffe`000c0cf4     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000005`6c4fe980 00007ffe`000c0c71     System_Private_CoreLib!System.Threading.WaitHandle.WaitOneNoCheck+0x64 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 131] \r\n07 00000005`6c4fe9e0 00007ffe`000cae60     System_Private_CoreLib!System.Threading.WaitHandle.WaitOne+0x11 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 102] \r\n08 00000005`6c4fea10 00007ffe`000ca720     System_Private_CoreLib!System.Threading.ReaderWriterLockSlim.WaitOnEvent+0xe0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ReaderWriterLockSlim.cs @ 1016] \r\n09 00000005`6c4fea60 00007ffe`000ca38d     System_Private_CoreLib!System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLockCore+0x2c0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ReaderWriterLockSlim.cs @ 748] \r\n0a 00000005`6c4feac0 00007ffd`cd969093     System_Private_CoreLib!System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock+0x1d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ReaderWriterLockSlim.cs @ 631] \r\n0b 00000005`6c4feaf0 000001fc`c5c89550     Castle_Core!Castle.Core.Internal.SynchronizedDictionary\u003cCastle.DynamicProxy.Generators.CacheKey,System.Type\u003e.GetOrAdd+0x83\r\n0c 00000005`6c4feaf8 00007ffd`cd9eb500     0x000001fc`c5c89550\r\n0d 00000005`6c4feb00 00000005`6c4ff108     0x00007ffd`cd9eb500\r\n0e 00000005`6c4feb08 00000005`6c4ff260     0x00000005`6c4ff108\r\n0f 00000005`6c4feb10 00000005`6c4feaf0     0x00000005`6c4ff260\r\n10 00000005`6c4feb18 00000000`00000000     0x00000005`6c4feaf0\r\n\r\n  31  Id: 2668.cc0 Suspend: 0 Teb: 00000005`69dfc000 Unfrozen \"ParallelWorker#8\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c67cd38 00007ffe`45f19f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000005`6c67cd40 00007ffe`45f174c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 00000005`6c67ce60 00007ffe`2c7ed89a     ntdll!RtlEnterCriticalSection+0x42\r\n03 00000005`6c67ce90 00007ffe`2c7dbb2d     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n05 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 378] \r\n06 00000005`6c67cec0 00007ffe`2c765925     coreclr!MethodTable::AllocateRegularStaticBox+0xd5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4204] \r\n07 00000005`6c67cf40 00007ffe`2c650aa8     coreclr!CEEInfo::getFieldInfo+0x12e5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1632] \r\n08 (Inline Function) --------`--------     clrjit!Compiler::eeGetFieldInfo+0x31 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.hpp @ 42] \r\n09 00000005`6c67d1a0 00007ffe`2c64ce02     clrjit!Compiler::impImportBlockCode+0x2eb8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8841] \r\n0a 00000005`6c67d9b0 00007ffe`2c64cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n0b 00000005`6c67dab0 00007ffe`2c6671fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n0c 00000005`6c67db20 00007ffe`2c636020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n0d (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n0e (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n0f 00000005`6c67db50 00007ffe`2c64b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n10 00000005`6c67de00 00007ffe`2c64a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n11 00000005`6c67dee0 00007ffe`2c5c8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n12 00000005`6c67dfd0 00007ffe`2c66aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n13 00000005`6c67e170 00007ffe`2c802ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n14 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n15 (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n16 00000005`6c67e210 00007ffe`2c77064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n17 00000005`6c67e770 00007ffe`2c770472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n18 00000005`6c67e880 00007ffe`2c770177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n19 00000005`6c67e9a0 00007ffe`2c7ff9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n1a (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n1b (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n1c 00000005`6c67ea40 00007ffe`2c7fee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n1d 00000005`6c67ee40 00007ffe`2c7fec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n1e 00000005`6c67ef20 00007ffe`2c89d9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n1f 00000005`6c67f020 00007ffe`2c89c663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n20 00000005`6c67f0d0 00007ffe`2c7d8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n21 00000005`6c67f110 00007ffe`00142c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n22 00000005`6c67f440 00007ffe`00142503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n23 00000005`6c67f490 00007ffd`cd9530a1     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n24 00000005`6c67f4d0 000001bc`448f4dd8     nunit_framework!NUnit.Framework.Internal.Reflect.InvokeMethod+0x51\r\n25 00000005`6c67f4d8 000001bc`43c97528     0x000001bc`448f4dd8\r\n26 00000005`6c67f4e0 00000000`00000000     0x000001bc`43c97528\r\n\r\n  32  Id: 2668.1640 Suspend: 0 Teb: 00000005`69dfe000 Unfrozen \"ParallelSTAWorker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`6c7fece8 00007ffe`43fa5c2e     win32u!NtUserMsgWaitForMultipleObjectsEx+0x14\r\n01 00000005`6c7fecf0 00007ffe`44cfa46b     user32!RealMsgWaitForMultipleObjectsEx+0x1e\r\n02 00000005`6c7fed30 00007ffe`44cf7db5     combase!CCliModalLoop::BlockFn+0x193 [onecore\\com\\combase\\dcomrem\\callctrl.cxx @ 2156] \r\n03 00000005`6c7fede0 00007ffe`44ceda40     combase!ClassicSTAThreadWaitForHandles+0xa5 [onecore\\com\\combase\\dcomrem\\classicsta.cpp @ 54] \r\n04 00000005`6c7fef00 00007ffe`2c98554c     combase!CoWaitForMultipleHandles+0x80 [onecore\\com\\combase\\dcomrem\\sync.cxx @ 123] \r\n05 00000005`6c7fef40 00007ffe`2c91c8eb     coreclr!MsgWaitHelper+0x44 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3292] \r\n06 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0xe9b61 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3328] \r\n07 00000005`6c7fef80 00007ffe`2c832c25     coreclr!Thread::DoAppropriateWaitWorker+0xe9c87 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3465] \r\n08 00000005`6c7ff040 00007ffe`2c831e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n09 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n0a (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n0b (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n0c (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n0d 00000005`6c7ff0c0 00007ffe`2c830f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0e (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0f (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n10 00000005`6c7ff1d0 00007ffe`000bd57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n11 00000005`6c7ff350 00007ffe`000c862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n12 00000005`6c7ff380 00007ffe`000c845d     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n13 00000005`6c7ff420 00007ffd`cd948eba     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0xd [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 447] \r\n14 00000005`6c7ff450 000001bc`43ecd420     nunit_framework!NUnit.Framework.Internal.Execution.WorkItemQueue.Dequeue+0x17a\r\n15 00000005`6c7ff458 00000000`000001f4     0x000001bc`43ecd420\r\n16 00000005`6c7ff460 00000000`00000001     0x1f4\r\n17 00000005`6c7ff468 00007ffd`cdafd790     0x1\r\n18 00000005`6c7ff470 00000000`00000002     0x00007ffd`cdafd790\r\n19 00000005`6c7ff478 00007ffe`00000193     0x2\r\n1a 00000005`6c7ff480 00000000`00000000     System_Private_CoreLib!System.Convert.ChangeType+0x6e3\r\n\r\n 230  Id: 2668.2048 Suspend: 0 Teb: 00000005`69d92000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000005`7ec7f828 00007ffe`45f0b77f     ntdll!NtWaitForWorkViaWorkerFactory+0x14\r\n01 00000005`7ec7f830 00007ffe`44144cb0     ntdll!TppWorkerThread+0x2df\r\n02 00000005`7ec7fb20 00007ffe`45f7eceb     kernel32!BaseThreadInitThunk+0x10\r\n03 00000005`7ec7fb50 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\n_I had to remove some unimportant threads from the output to not exceed the maximum comment size._\r\n\r\nThe modules being currently loaded on the stack by the CLR seem to be `DirectWriteForwarder` (ParallelWorker#2) and `PresentationCore` for the other ParallelWorker threads. So it seems that the issue is indeed related to loading WPF assemblies.\r\n\r\nHow can I share the memory dump with you. Do you have an e-mail I can share a One Drive link or so?",
                                           "updatedAt":  "2024-10-07T08:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6O7FNb",
                                           "createdAt":  "2024-10-07T20:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlsZen",
                                           "body":  "I\u0027ve uploaded a regular .dmp file of the stuck testhost.exe along with a TTD trace and a .dmp file made at the end when it was stuck. [Dropbox folder](https://www.dropbox.com/scl/fo/0uly9t44gt40ftkzupjuw/AON0M9w9UkHwOhVdPfOvbns?rlkey=ibzzjabfglcnjo63gb15gfeam\u0026st=re99mbqt\u0026dl=0)",
                                           "updatedAt":  "2024-10-07T20:40:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PC4L8",
                                           "createdAt":  "2024-10-08T13:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlsZen",
                                           "body":  "I should probably mention that my .dmp and trace files were taken by running `dotnet test` rather than kicking off from an IDE. It seems to occur more easily starting the tests that way.\r\n\r\n\u003csummary\u003eWinDbg output\u003c/summary\u003e\r\n\u003cdetails\u003e\r\n\r\n```\r\n   0  Id: 60ac.2e30 Suspend: 1 Teb: 00000045`0a534000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0a3fe1b8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0a3fe1c0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0a3fe4b0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0a3fe570 00007ffa`42a41e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n07 (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n08 (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n09 00000045`0a3fe5f0 00007ffa`42a40f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0a (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0b (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n0c 00000045`0a3fe700 00007ffa`3668d57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n0d 00000045`0a3fe880 00007ffa`3669862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n0e 00000045`0a3fe8b0 00007ffa`366b1749     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n0f 00000045`0a3fe950 00007ffa`366b1536     System_Private_CoreLib!System.Threading.Tasks.Task.SpinThenBlockingWait+0xa9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3072] \r\n10 00000045`0a3fe9d0 00007ffa`366b113a     System_Private_CoreLib!System.Threading.Tasks.Task.InternalWaitCore+0x76 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3007] \r\n11 00000045`0a3fea50 00007ffa`366b1012     System_Private_CoreLib!System.Threading.Tasks.Task.Wait+0x3a [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2768] \r\n12 00000045`0a3fea80 00007ff9`e2f59317     System_Private_CoreLib!System.Threading.Tasks.Task.Wait+0x12 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2634] \r\n13 00000045`0a3feab0 00007ff9`e2f52b19     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.Invoke+0x3d7\r\n14 00000045`0a3febb0 00007ff9`e2f527ef     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.Program.Run+0x89\r\n15 00000045`0a3febf0 00007ff9`e2f5197a     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.Program.Run+0x3f\r\n16 00000045`0a3fec30 00007ffa`42aac663     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.Program.Main+0x4a\r\n17 00000045`0a3feca0 00007ffa`429f4cb1     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n18 (Inline Function) --------`--------     coreclr!CallDescrWorkerWithHandler+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 67] \r\n19 00000045`0a3fece0 00007ffa`42a6088c     coreclr!MethodDescCallSite::CallTargetWorker+0x249 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 570] \r\n1a (Inline Function) --------`--------     coreclr!MethodDescCallSite::Call+0xb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.h @ 458] \r\n1b 00000045`0a3fee20 00007ffa`42a3e742     coreclr!RunMainInternal+0x11c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1304] \r\n1c 00000045`0a3fef40 00007ffa`42a3ea82     coreclr!RunMain+0xd2 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1375] \r\n1d 00000045`0a3feff0 00007ffa`42a3e0e7     coreclr!Assembly::ExecuteMainMethod+0x1ca [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1504] \r\n1e 00000045`0a3ff2c0 00007ffa`42a89778     coreclr!CorHost2::ExecuteAssembly+0x267 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\corhost.cpp @ 349] \r\n1f 00000045`0a3ff3c0 00007ffa`9f3b269f     coreclr!coreclr_execute_assembly+0xd8 [D:\\a\\_work\\1\\s\\src\\coreclr\\dlls\\mscoree\\exports.cpp @ 504] \r\n20 (Inline Function) --------`--------     hostpolicy!coreclr_t::execute_assembly+0x29 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\coreclr.cpp @ 109] \r\n21 00000045`0a3ff460 00007ffa`9f3b297c     hostpolicy!run_app_for_context+0x58f [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 256] \r\n22 00000045`0a3ff580 00007ffa`9f3b328a     hostpolicy!run_app+0x3c [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 285] \r\n23 00000045`0a3ff5c0 00007ffa`c7d0da09     hostpolicy!corehost_main+0x15a [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 426] \r\n24 00000045`0a3ff6c0 00007ffa`c7d0ff86     hostfxr!execute_app+0x2e9 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 145] \r\n25 00000045`0a3ff7a0 00007ffa`c7d1207c     hostfxr!`anonymous namespace\u0027::read_config_and_execute+0xa6 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 532] \r\n26 00000045`0a3ff890 00007ffa`c7d10553     hostfxr!fx_muxer_t::handle_exec_host_command+0x16c [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 1007] \r\n27 00000045`0a3ff940 00007ffa`c7d08390     hostfxr!fx_muxer_t::execute+0x483 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 578] \r\n28 00000045`0a3ffa80 00007ff7`b8cd2d47     hostfxr!hostfxr_main_startupinfo+0xa0 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\hostfxr.cpp @ 63] \r\n29 00000045`0a3ffb80 00007ff7`b8cd32c8     testhost_exe!exe_start+0x997 [D:\\a\\_work\\1\\s\\src\\corehost\\corehost.cpp @ 220] \r\n2a 00000045`0a3ffda0 00007ff7`b8cd4978     testhost_exe!wmain+0x88 [D:\\a\\_work\\1\\s\\src\\corehost\\corehost.cpp @ 287] \r\n2b (Inline Function) --------`--------     testhost_exe!invoke_main+0x22 [d:\\a01\\_work\\12\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 90] \r\n2c 00000045`0a3ffdd0 00007ffa`d0fbdbe7     testhost_exe!__scrt_common_main_seh+0x10c [d:\\a01\\_work\\12\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 288] \r\n2d 00000045`0a3ffe10 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n2e 00000045`0a3ffe40 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   1  Id: 60ac.8954 Suspend: 1 Teb: 00000045`0a53c000 Unfrozen \".NET EventPipe\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0abff818 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0abff820 00007ffa`cfdd3271     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 00000045`0abffb10 00007ffa`42a4d963     KERNELBASE!WaitForMultipleObjects+0x11\r\n03 00000045`0abffb50 00007ffa`42a4d850     coreclr!ds_ipc_poll+0xf3 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc-pal-namedpipe.c @ 265] \r\n04 00000045`0abffdd0 00007ffa`42a4d734     coreclr!ds_ipc_stream_factory_get_next_available_stream+0x108 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc.c @ 402] \r\n05 00000045`0abffea0 00007ffa`d0fbdbe7     coreclr!server_thread+0x54 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 129] \r\n06 00000045`0abfff10 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n07 00000045`0abfff40 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   2  Id: 60ac.5f10 Suspend: 1 Teb: 00000045`0a53e000 Unfrozen \".NET Debugger\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0ad7f6b8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0ad7f6c0 00007ffa`42a15f89     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 00000045`0ad7f9b0 00007ffa`42a15a5a     coreclr!DebuggerRCThread::MainLoop+0xe9 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 927] \r\n03 00000045`0ad7fa70 00007ffa`42a15ffb     coreclr!DebuggerRCThread::ThreadProc+0x12e [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 730] \r\n04 00000045`0ad7fad0 00007ffa`d0fbdbe7     coreclr!DebuggerRCThread::ThreadProcStatic+0x5b [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 1321] \r\n05 00000045`0ad7fb00 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n06 00000045`0ad7fb30 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   3  Id: 60ac.59d4 Suspend: 1 Teb: 00000045`0a540000 Unfrozen \".NET Finalizer\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0aeff3a8 00007ffa`cfdd201f     ntdll!NtWaitForSingleObject+0x14\r\n01 00000045`0aeff3b0 00007ffa`42a434d0     KERNELBASE!WaitForSingleObjectEx+0xaf\r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 372] \r\n03 00000045`0aeff450 00007ffa`42a45c75     coreclr!CLREventWaitHelper+0x20 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397] \r\n04 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 466] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n06 00000045`0aeff4b0 00007ffa`42a45b13     coreclr!FinalizerThread::WaitForFinalizerEvent+0x21 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 130] \r\n07 00000045`0aeff4f0 00007ffa`42a40259     coreclr!FinalizerThread::FinalizerThreadWorker+0x53 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 262] \r\n08 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n09 00000045`0aeff740 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0a 00000045`0aeff800 00007ffa`42a60641     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_NoADTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7494] \r\n0c (Inline Function) --------`--------     coreclr!ManagedThreadBase::FinalizerBase+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7513] \r\n0d 00000045`0aeff8a0 00007ffa`d0fbdbe7     coreclr!FinalizerThread::FinalizerThreadStart+0x91 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 403] \r\n0e 00000045`0aeff9b0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0f 00000045`0aeff9e0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   4  Id: 60ac.700c Suspend: 1 Teb: 00000045`0a546000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b1fdab8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0b1fdac0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0b1fddb0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0b1fde70 00007ffa`42a42b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0b1fdef0 00007ffa`36690cf4     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000045`0b1fe070 00007ff9`e3773f04     System_Private_CoreLib!System.Threading.WaitHandle.WaitOneNoCheck+0x64 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 131] \r\n07 00000045`0b1fe0d0 00007ff9`e3772bd7     xunit_runner_visualstudio_dotnetcore_testadapter!\r\n08 00000045`0b1fe5d0 00007ffa`368f24a4     xunit_runner_visualstudio_dotnetcore_testadapter!\r\n09 00000045`0b1fe620 00007ff9`e373e265     System_Private_CoreLib!System.Collections.Generic.List`1.ForEach+0x54 [/_/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs @ 610] \r\n0a 00000045`0b1fe670 00007ff9`e373ab40     xunit_runner_visualstudio_dotnetcore_testadapter!\r\n0b 00000045`0b1fe7e0 00007ff9`e3739d1f     xunit_runner_visualstudio_dotnetcore_testadapter!\r\n0c 00000045`0b1fe920 00007ff9`e373984f     Microsoft_VisualStudio_TestPlatform_Common!Microsoft.VisualStudio.TestPlatform.Common.ExtensionDecorators.SerialTestRunDecorator.RunTests+0x9f\r\n0d 00000045`0b1fe960 00007ff9`e3737793     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.InvokeExecutor+0xaf\r\n0e 00000045`0b1fe9c0 00007ff9`e373105d     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestInternalWithExecutors+0xb73\r\n0f 00000045`0b1ff090 00007ff9`e3730b1d     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestsInternal+0x10d\r\n10 00000045`0b1ff140 00007ff9`e3711931     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTests+0x8d\r\n11 00000045`0b1ff250 00007ff9`e37106f9     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun+0xe1\r\n12 00000045`0b1ff2e0 00007ff9`e2f9fc18     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.\u003c\u003ec__DisplayClass45_4.\u003cOnMessageReceived\u003eb__3+0x149\r\n13 00000045`0b1ff370 00007ff9`e2f9fb3e     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.\u003c\u003ec.\u003c.ctor\u003eb__31_2+0x28\r\n14 00000045`0b1ff3a0 00007ff9`e2f589b5     Microsoft_TestPlatform_CoreUtilities!Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue\u003cSystem.Action\u003e.SafeProcessJob+0x4e\r\n15 00000045`0b1ff410 00007ff9`e2f581b0     Microsoft_TestPlatform_CoreUtilities!Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue\u003cSystem.Action\u003e.BackgroundJobProcessor+0x3d5\r\n16 00000045`0b1ff560 00007ffa`366964bd     Microsoft_TestPlatform_CoreUtilities!Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue\u003cSystem.__Canon\u003e.\u003c.ctor\u003eb__16_0+0x20\r\n17 00000045`0b1ff590 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n18 00000045`0b1ff600 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n19 00000045`0b1ff6a0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n1a 00000045`0b1ff6e0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n1b 00000045`0b1ff770 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n1c (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n1d 00000045`0b1ff7d0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n1e 00000045`0b1ff890 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n1f (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n20 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n21 00000045`0b1ff930 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n22 00000045`0b1ff990 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n23 00000045`0b1ff9c0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   5  Id: 60ac.59f0 Suspend: 1 Teb: 00000045`0a548000 Unfrozen \".NET TP Wait\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b23f3a8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0b23f3b0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0b23f6a0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0b23f760 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0b23f7e0 00007ffa`36691672     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0b23f990 00007ffa`366ab691     System_Private_CoreLib!System.Threading.WaitHandle.WaitAnyMultiple+0x132 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 335] \r\n07 00000045`0b23fa00 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.WaitThread.WaitThreadStart+0x91 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WaitThread.cs @ 246] \r\n08 00000045`0b23fa70 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n09 00000045`0b23fab0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0a 00000045`0b23fb40 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0c 00000045`0b23fba0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0d 00000045`0b23fc60 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n10 00000045`0b23fd00 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n11 00000045`0b23fd60 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n12 00000045`0b23fd90 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   6  Id: 60ac.8ca0 Suspend: 1 Teb: 00000045`0a54a000 Unfrozen \".NET ThreadPool IO\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b27f488 00007ffa`cfe45fcf     ntdll!NtRemoveIoCompletionEx+0x14\r\n01 00000045`0b27f490 00007ffa`366ab019     KERNELBASE!GetQueuedCompletionStatusEx+0xbf\r\n02 00000045`0b27f540 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.IOCompletionPoller.Poll+0x89 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.IO.Windows.cs @ 188] \r\n03 00000045`0b27f650 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n04 00000045`0b27f690 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n05 00000045`0b27f720 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n06 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n07 00000045`0b27f780 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n08 00000045`0b27f840 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n09 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0a (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0b 00000045`0b27f8e0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0c 00000045`0b27f940 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0d 00000045`0b27f970 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   7  Id: 60ac.9084 Suspend: 1 Teb: 00000045`0a54c000 Unfrozen \".NET ThreadPool IO\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b2bf498 00007ffa`cfe45fcf     ntdll!NtRemoveIoCompletionEx+0x14\r\n01 00000045`0b2bf4a0 00007ffa`366ab019     KERNELBASE!GetQueuedCompletionStatusEx+0xbf\r\n02 00000045`0b2bf550 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.IOCompletionPoller.Poll+0x89 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.IO.Windows.cs @ 188] \r\n03 00000045`0b2bf660 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n04 00000045`0b2bf6a0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n05 00000045`0b2bf730 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n06 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n07 00000045`0b2bf790 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n08 00000045`0b2bf850 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n09 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0a (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0b 00000045`0b2bf8f0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0c 00000045`0b2bf950 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0d 00000045`0b2bf980 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   8  Id: 60ac.8d68 Suspend: 1 Teb: 00000045`0a54e000 Unfrozen \".NET ThreadPool IO\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b2ff548 00007ffa`cfe45fcf     ntdll!NtRemoveIoCompletionEx+0x14\r\n01 00000045`0b2ff550 00007ffa`366ab019     KERNELBASE!GetQueuedCompletionStatusEx+0xbf\r\n02 00000045`0b2ff600 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.IOCompletionPoller.Poll+0x89 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.IO.Windows.cs @ 188] \r\n03 00000045`0b2ff710 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n04 00000045`0b2ff750 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n05 00000045`0b2ff7e0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n06 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n07 00000045`0b2ff840 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n08 00000045`0b2ff900 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n09 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0a (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0b 00000045`0b2ff9a0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0c 00000045`0b2ffa00 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0d 00000045`0b2ffa30 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n   9  Id: 60ac.805c Suspend: 1 Teb: 00000045`0a550000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b47f2f8 00007ffa`cfdd272c     ntdll!NtRemoveIoCompletion+0x14\r\n01 00000045`0b47f300 00007ff9`e61a9f1c     KERNELBASE!GetQueuedCompletionStatus+0x6c\r\n02 00000045`0b47f360 00007ff9`e61a8b49     System_Private_CoreLib!System.Threading.LowLevelLifoSemaphore.WaitForSignal+0xfc [/_/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelLifoSemaphore.cs @ 140] \r\n03 00000045`0b47f440 00007ffa`366ac49f     System_Private_CoreLib!System.Threading.LowLevelLifoSemaphore.Wait+0x289 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelLifoSemaphore.cs @ 65] \r\n04 00000045`0b47f500 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart+0x1af [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.NonBrowser.cs @ 100] \r\n05 00000045`0b47f600 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n06 00000045`0b47f640 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n07 00000045`0b47f6d0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n08 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n09 00000045`0b47f730 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0a 00000045`0b47f7f0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0c (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0d 00000045`0b47f890 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0e 00000045`0b47f8f0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0f 00000045`0b47f920 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  10  Id: 60ac.84a0 Suspend: 1 Teb: 00000045`0a552000 Unfrozen \".NET TP Gate\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b4bf4b8 00007ffa`cfe451c3     ntdll!NtQuerySystemInformation+0x14\r\n01 00000045`0b4bf4c0 00007ff9`e61a92d6     KERNELBASE!GetSystemTimes+0xb3\r\n02 00000045`0b4bf580 00007ffa`366a9254     System_Private_CoreLib!System.Threading.PortableThreadPool.CpuUtilizationReader.get_CurrentUtilization+0x96 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.Windows.cs @ 35] \r\n03 00000045`0b4bf650 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.GateThread.GateThreadStart+0x194 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.GateThread.cs @ 106] \r\n04 00000045`0b4bf790 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n05 00000045`0b4bf7d0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n06 00000045`0b4bf860 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n07 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n08 00000045`0b4bf8c0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n09 00000045`0b4bf980 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0a (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0c 00000045`0b4bfa20 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0d 00000045`0b4bfa80 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0e 00000045`0b4bfab0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  11  Id: 60ac.649c Suspend: 1 Teb: 00000045`0a554000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b63ee88 00007ffa`cec968ea     ntdll!NtWaitForSingleObject+0x14\r\n01 00000045`0b63ee90 00007ffa`cec965c4     mswsock!SockWaitForSingleObject+0x15a\r\n02 00000045`0b63ef20 00007ffa`d0409781     mswsock!WSPSelect+0xa04\r\n03 00000045`0b63f0e0 00007ff9`e61aa532     ws2_32!select+0x201\r\n04 00000045`0b63f240 00007ff9`e61aa2cf     System_Net_Sockets!System.Net.Sockets.SocketPal.Poll+0x172 [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Windows.cs @ 846] \r\n05 00000045`0b63f350 00007ff9`e2f5dfa0     System_Net_Sockets!System.Net.Sockets.Socket.Poll+0x1f [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs @ 2230] \r\n06 00000045`0b63f3a0 00007ff9`e2f5da39     Microsoft_TestPlatform_CommunicationUtilities!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions.MessageLoopAsync+0x260\r\n07 00000045`0b63f520 00007ffa`368db78f     Microsoft_TestPlatform_CommunicationUtilities!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketClient.\u003cOnServerConnected\u003eb__16_0+0x89\r\n08 00000045`0b63f570 00007ffa`36696622     System_Private_CoreLib!System.Threading.Tasks.Task\u003cSystem.Threading.Tasks.Task\u003e.InnerInvoke+0x2f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 501] \r\n09 00000045`0b63f5b0 00007ffa`366b08f8     System_Private_CoreLib!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop+0x42 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 264] \r\n0a 00000045`0b63f600 00007ffa`3669f670     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0x98 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2349] \r\n0b 00000045`0b63f6a0 00007ffa`366ac463     System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch+0x210 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 989] \r\n0c 00000045`0b63f730 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart+0x173 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.NonBrowser.cs @ 102] \r\n0d 00000045`0b63f830 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0e 00000045`0b63f870 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0f 00000045`0b63f900 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n10 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n11 00000045`0b63f960 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n12 00000045`0b63fa20 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n14 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n15 00000045`0b63fac0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n16 00000045`0b63fb20 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n17 00000045`0b63fb50 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  12  Id: 60ac.4280 Suspend: 1 Teb: 00000045`0a556000 Unfrozen \".NET TP Worker\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b7bf3e8 00007ffa`cfdd272c     ntdll!NtRemoveIoCompletion+0x14\r\n01 00000045`0b7bf3f0 00007ff9`e61a9f1c     KERNELBASE!GetQueuedCompletionStatus+0x6c\r\n02 00000045`0b7bf450 00007ff9`e61a8b49     System_Private_CoreLib!System.Threading.LowLevelLifoSemaphore.WaitForSignal+0xfc [/_/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelLifoSemaphore.cs @ 140] \r\n03 00000045`0b7bf530 00007ffa`366ac49f     System_Private_CoreLib!System.Threading.LowLevelLifoSemaphore.Wait+0x289 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelLifoSemaphore.cs @ 65] \r\n04 00000045`0b7bf5f0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart+0x1af [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.NonBrowser.cs @ 100] \r\n05 00000045`0b7bf6f0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n06 00000045`0b7bf730 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n07 00000045`0b7bf7c0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n08 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n09 00000045`0b7bf820 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0a 00000045`0b7bf8e0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0c (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n0d 00000045`0b7bf980 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n0e 00000045`0b7bf9e0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n0f 00000045`0b7bfa10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  13  Id: 60ac.5d58 Suspend: 1 Teb: 00000045`0a558000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0b93f2d8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0b93f2e0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0b93f5d0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0b93f690 00007ffa`42a41e47     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \r\n06 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n07 (Inline Function) --------`--------     coreclr!Thread::Wait+0x45 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3945] \r\n08 (Inline Function) --------`--------     coreclr!Thread::Block+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3902] \r\n09 00000045`0b93f710 00007ffa`42a40f4d     coreclr!SyncBlock::Wait+0x1d3 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2878] \r\n0a (Inline Function) --------`--------     coreclr!ObjHeader::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2265] \r\n0b (Inline Function) --------`--------     coreclr!Object::Wait+0x42 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 337] \r\n0c 00000045`0b93f820 00007ffa`3668d57e     coreclr!ObjectNative::WaitTimeout+0xcd [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 307] \r\n0d 00000045`0b93f9a0 00007ffa`3669862e     System_Private_CoreLib!System.Threading.Monitor.Wait+0x1e [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156] \r\n0e 00000045`0b93f9d0 00007ffa`36698312     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x1be [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561] \r\n0f 00000045`0b93fa70 00007ff9`e2f5e743     System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x12 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 351] \r\n10 00000045`0b93faa0 00007ff9`e2f5e65f     Microsoft_TestPlatform_CrossPlatEngine!Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ProcessRequests+0x43\r\n11 00000045`0b93fad0 00007ffa`366964bd     testhost!Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.\u003c\u003ec__DisplayClass21_0.\u003cStartProcessingAsync\u003eb__0+0x5f\r\n12 00000045`0b93fb10 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n13 00000045`0b93fb80 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n14 00000045`0b93fc20 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n15 00000045`0b93fc60 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n16 00000045`0b93fcf0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n17 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n18 00000045`0b93fd50 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n19 00000045`0b93fe10 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n1a (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n1b (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n1c 00000045`0b93feb0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n1d 00000045`0b93ff10 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n1e 00000045`0b93ff40 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  14  Id: 60ac.5b4 Suspend: 1 Teb: 00000045`0a55a000 Unfrozen \".NET Timer\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0babf0e8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0babf0f0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0babf3e0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0babf4a0 00007ffa`42a42b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0babf520 00007ff9`e61a38b6     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000045`0babf6a0 00007ffa`366a204f     0x00007ff9`e61a38b6\r\n07 00000045`0babf710 00007ffa`42aac663     System_Private_CoreLib!System.Threading.TimerQueue.TimerThread+0x8f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/TimerQueue.Portable.cs @ 89] \r\n08 00000045`0babf7a0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n09 00000045`0babf7e0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0a 00000045`0babf870 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0b (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0c 00000045`0babf8d0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n0d 00000045`0babf990 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n10 00000045`0babfa30 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n11 00000045`0babfa90 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n12 00000045`0babfac0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  15  Id: 60ac.7638 Suspend: 1 Teb: 00000045`0a560000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0bc3ed48 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0bc3ed50 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0bc3f040 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0bc3f100 00007ffa`42a42b40     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0bc3f180 00007ffa`36690cf4     coreclr!WaitHandleNative::CorWaitOneNative+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 31] \r\n06 00000045`0bc3f300 00007ff9`e5fa78c9     System_Private_CoreLib!System.Threading.WaitHandle.WaitOneNoCheck+0x64 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 131] \r\n07 00000045`0bc3f360 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MessageBus.ReporterWorker+0x69\r\n08 00000045`0bc3f3e0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n09 00000045`0bc3f430 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0a 00000045`0bc3f4a0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0b 00000045`0bc3f540 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0c 00000045`0bc3f580 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0d 00000045`0bc3f610 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n0f 00000045`0bc3f670 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n10 00000045`0bc3f730 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n11 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n13 00000045`0bc3f7d0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n14 00000045`0bc3f830 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n15 00000045`0bc3f860 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  16  Id: 60ac.4568 Suspend: 1 Teb: 00000045`0a562000 Unfrozen \".NET Long Running Task\"\r\n*** WARNING: Unable to verify checksum for C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\DeadlockTests-net8\\bin\\Debug\\net8.0-windows\\ClassLibrary.dll\r\n*** WARNING: Unable to verify checksum for C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\DeadlockTests-net8\\bin\\Debug\\net8.0-windows\\DeadlockTests-net8.dll\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0bdb8c98 00007ffa`d259aec5     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000045`0bdb8ca0 00007ffa`d25a5def     ntdll!RtlpWaitOnCriticalSection+0x5a5\r\n02 00000045`0bdb8da0 00007ffa`d25a5548     ntdll!RtlpEnterCriticalSectionContended+0x1ff\r\n03 00000045`0bdb8e20 00007ffa`429fd89a     ntdll!RtlEnterCriticalSection+0xf8\r\n04 00000045`0bdb8e60 00007ffa`42960734     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n05 00000045`0bdb8e90 00007ffa`429606c9     coreclr!ListLockEntryBase\u003cvoid *\u003e::DeadlockAwareEnter+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\listlock.h @ 106] \r\n06 00000045`0bdb8ec0 00007ffa`429605e4     coreclr!FileLoadLock::Acquire+0x19 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2220] \r\n07 00000045`0bdb8ef0 00007ffa`42a58a04     coreclr!AppDomain::LoadDomainAssembly+0x7c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2858] \r\n08 00000045`0bdb8f70 00007ffa`42a5890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n09 00000045`0bdb8fd0 00007ffa`429f8833     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n0a (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n0b (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n0c 00000045`0bdb9000 00007ffa`429eb81c     coreclr!MethodTable::EnsureInstanceActive+0x43 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8428] \r\n0d 00000045`0bdb9030 00007ffa`429ebb63     coreclr!MethodTable::AllocateStaticBox+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4235] \r\n0e 00000045`0bdb9070 00007ffa`42975925     coreclr!MethodTable::AllocateRegularStaticBox+0x10b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4212] \r\n0f 00000045`0bdb90f0 00007ffa`48170aa8     coreclr!CEEInfo::getFieldInfo+0x12e5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1632] \r\n10 (Inline Function) --------`--------     clrjit!Compiler::eeGetFieldInfo+0x31 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.hpp @ 42] \r\n11 00000045`0bdb9350 00007ffa`4816ce02     clrjit!Compiler::impImportBlockCode+0x2eb8 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8841] \r\n12 00000045`0bdb9b60 00007ffa`4816cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n13 00000045`0bdb9c60 00007ffa`481871fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n14 00000045`0bdb9cd0 00007ffa`48156020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n15 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n16 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n17 00000045`0bdb9d00 00007ffa`4816b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n18 00000045`0bdb9fb0 00007ffa`4816a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n19 00000045`0bdba090 00007ffa`480e8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n1a 00000045`0bdba180 00007ffa`4818aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n1b 00000045`0bdba320 00007ffa`42a12ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n1c (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n1d (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n1e 00000045`0bdba3c0 00007ffa`4298064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n1f 00000045`0bdba920 00007ffa`42980472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n20 00000045`0bdbaa30 00007ffa`42980177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n21 00000045`0bdbab50 00007ffa`42a0f9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n22 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n23 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n24 00000045`0bdbabf0 00007ffa`42a0ee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n25 00000045`0bdbaff0 00007ffa`42a0ec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n26 00000045`0bdbb0d0 00007ffa`42aad9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n27 00000045`0bdbb1d0 00007ffa`42aac663     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n28 00000045`0bdbb280 00007ffa`42960530     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n29 00000045`0bdbb2c0 00007ffa`42961608     coreclr!DispatchCallDebuggerWrapper+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 156] \r\n2a 00000045`0bdbb320 00007ffa`429601cc     coreclr!DispatchCallSimple+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 215] \r\n2b (Inline Function) --------`--------     coreclr!StressLog::InlinedStressLogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 804] \r\n2c (Inline Function) --------`--------     coreclr!StressLog::LogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 838] \r\n2d 00000045`0bdbb3b0 00007ffa`429622d6     coreclr!MethodTable::RunClassInitEx+0x134 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4329] \r\n2e 00000045`0bdbb490 00007ffa`42961da0     coreclr!MethodTable::DoRunClassInitThrowing+0x4a6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4512] \r\n2f 00000045`0bdbba20 00007ffa`42a79823     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n30 00000045`0bdbba50 00007ff9`e5fdbc2d     coreclr!JIT_GetSharedNonGCStaticBase_Helper+0x93 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 1419] \r\n31 00000045`0bdbbbb0 00007ff9`e5fdb5ab     ClassLibrary!ClassLibrary.PredefinedColors.get_NumberOfColors+0x2d [C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\ClassLibrary\\PredefinedColors.cs @ 5] \r\n32 00000045`0bdbbbf0 00007ffa`42aac663     DeadlockTests_net8!DeadlockTests_net8.TestClassA.Test1+0xfb [C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\DeadlockTests-net8\\TestClassA.cs @ 12] \r\n33 00000045`0bdbbc70 00007ffa`429e8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n34 00000045`0bdbbcb0 00007ffa`36712c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n35 00000045`0bdbbfe0 00007ffa`36712503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n36 00000045`0bdbc030 00007ff9`e5fdb26c     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n37 00000045`0bdbc070 00007ff9`e5fdae40     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.CallTestMethod+0x4c\r\n38 00000045`0bdbc0b0 00007ff9`e5fda802     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003ec__DisplayClass48_0.\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed.MoveNext+0x5a0\r\n39 00000045`0bdbc2e0 00007ff9`e5fda720     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start\u003c\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003e+0xc2 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38] \r\n3a 00000045`0bdbc380 00007ff9`e5fda65a     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\u003c\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003e+0x60 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33] \r\n3b 00000045`0bdbc3c0 00007ff9`e5fda3b2     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003ec__DisplayClass48_0.\u003cInvokeTestMethodAsync\u003eb__1+0x9a\r\n3c 00000045`0bdbc430 00007ff9`e5fda21b     xunit_execution_dotnet!Xunit.Sdk.ExecutionTimer.\u003cAggregateAsync\u003ed__4.MoveNext+0x82\r\n3d 00000045`0bdbc4c0 00007ff9`e5fda17c     0x00007ff9`e5fda21b\r\n3e 00000045`0bdbc550 00007ff9`e5fda134     0x00007ff9`e5fda17c\r\n3f 00000045`0bdbc580 00007ff9`e5fda0c2     xunit_execution_dotnet!Xunit.Sdk.ExecutionTimer.AggregateAsync+0x54\r\n40 00000045`0bdbc5e0 00007ff9`e5fd9e6d     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.\u003c\u003ec__DisplayClass48_0.\u003cInvokeTestMethodAsync\u003eb__0+0xb2\r\n41 00000045`0bdbc640 00007ff9`e5fd9d64     xunit_core!Xunit.Sdk.ExceptionAggregator.\u003cRunAsync\u003ed__9.MoveNext+0x6d\r\n42 00000045`0bdbc6e0 00007ff9`e5fd9ccc     0x00007ff9`e5fd9d64\r\n43 00000045`0bdbc760 00007ff9`e5fd9c85     0x00007ff9`e5fd9ccc\r\n44 00000045`0bdbc790 00007ff9`e5fd91d6     xunit_core!Xunit.Sdk.ExceptionAggregator.RunAsync+0x55\r\n45 00000045`0bdbc7f0 00007ff9`e5fd8f18     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cInvokeTestMethodAsync\u003ed__48.MoveNext+0x216\r\n46 00000045`0bdbc8f0 00007ff9`e5fd8c10     0x00007ff9`e5fd8f18\r\n47 00000045`0bdbc990 00007ff9`e5fd8b8a     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u003cSystem.Decimal\u003e.Start\u003c\u003cInvokeTestMethodAsync\u003ed__48\u003e+0x60 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35] \r\n48 00000045`0bdbc9d0 00007ff9`e5fd86ce     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.InvokeTestMethodAsync+0xaa\r\n49 00000045`0bdbca50 00007ff9`e5fd66fc     xunit_execution_dotnet!Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync+0xde\r\n4a 00000045`0bdbcab0 00007ff9`e5fd5ad9     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003cRunAsync\u003eb__47_0\u003ed.MoveNext+0x42c\r\n4b 00000045`0bdbcbf0 00007ff9`e5fd59f0     0x00007ff9`e5fd5ad9\r\n4c 00000045`0bdbcca0 00007ff9`e5fd595f     0x00007ff9`e5fd59f0\r\n4d 00000045`0bdbcce0 00007ff9`e5fd56e6     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003eb__47_0+0x9f\r\n4e 00000045`0bdbcd60 00007ff9`e5fd55b4     xunit_core!Xunit.Sdk.ExceptionAggregator.\u003cRunAsync\u003ed__10\u003cSystem.Decimal\u003e.MoveNext+0x96\r\n4f 00000045`0bdbce20 00007ff9`e5fd551c     0x00007ff9`e5fd55b4\r\n50 00000045`0bdbcea0 00007ff9`e5fd5495     0x00007ff9`e5fd551c\r\n51 00000045`0bdbced0 00007ff9`e5fd53f1     xunit_core!Xunit.Sdk.ExceptionAggregator.RunAsync\u003cSystem.Decimal\u003e+0x55\r\n52 00000045`0bdbcf30 00007ff9`e5fd4cff     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.RunAsync+0x61\r\n53 00000045`0bdbcf70 00007ff9`e5fd4888     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync+0x10f\r\n54 00000045`0bdbd020 00007ff9`e5fd45f1     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.\u003cInvokeTestAsync\u003ed__4.MoveNext+0x1f8\r\n55 00000045`0bdbd140 00007ff9`e5fd4550     0x00007ff9`e5fd45f1\r\n56 00000045`0bdbd1d0 00007ff9`e5fd44fe     0x00007ff9`e5fd4550\r\n57 00000045`0bdbd200 00007ff9`e5fd446a     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.InvokeTestAsync+0x6e\r\n58 00000045`0bdbd270 00007ff9`e5fd4031     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cSystem.__Canon\u003e.\u003c\u003ec__DisplayClass43_0.\u003cRunAsync\u003eb__0+0x3a\r\n59 00000045`0bdbd2b0 00007ff9`e5fd3912     0x00007ff9`e5fd4031\r\n5a 00000045`0bdbd390 00007ff9`e5fd3710     0x00007ff9`e5fd3912\r\n5b 00000045`0bdbd430 00007ff9`e5fd35b5     0x00007ff9`e5fd3710\r\n5c 00000045`0bdbd470 00007ff9`e5fd2748     0x00007ff9`e5fd35b5\r\n5d 00000045`0bdbd4f0 00007ff9`e5fd2219     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__43.MoveNext+0x3a8\r\n5e 00000045`0bdbd6d0 00007ff9`e5fd20f0     0x00007ff9`e5fd2219\r\n5f 00000045`0bdbd780 00007ff9`e5fd1f49     0x00007ff9`e5fd20f0\r\n60 00000045`0bdbd7c0 00007ff9`e5fd05f8     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa9\r\n61 00000045`0bdbd840 00007ff9`e5fcff16     xunit_execution_dotnet!Xunit.Sdk.XunitTestCaseRunner.RunTestAsync+0x158\r\n62 00000045`0bdbd910 00007ff9`e5fcfc28     xunit_execution_dotnet!Xunit.Sdk.TestCaseRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__19.MoveNext+0x246\r\n63 00000045`0bdbda40 00007ff9`e5fcfb40     0x00007ff9`e5fcfc28\r\n64 00000045`0bdbdae0 00007ff9`e5fcfaa8     0x00007ff9`e5fcfb40\r\n65 00000045`0bdbdb20 00007ff9`e5fced62     xunit_execution_dotnet!Xunit.Sdk.TestCaseRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n66 00000045`0bdbdba0 00007ff9`e5fcec27     xunit_execution_dotnet!Xunit.Sdk.XunitTestCase.RunAsync+0xb2\r\n67 00000045`0bdbdc20 00007ff9`e5fce7a1     xunit_execution_dotnet!Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync+0xb7\r\n68 00000045`0bdbdc90 00007ff9`e5fce4b9     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestCasesAsync\u003ed__32.MoveNext+0x241\r\n69 00000045`0bdbddc0 00007ff9`e5fce3d0     0x00007ff9`e5fce4b9\r\n6a 00000045`0bdbde70 00007ff9`e5fce339     0x00007ff9`e5fce3d0\r\n6b 00000045`0bdbdeb0 00007ff9`e5fcdcc0     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestCasesAsync+0xa9\r\n6c 00000045`0bdbdf30 00007ff9`e5fcda82     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__31.MoveNext+0x1a0\r\n6d 00000045`0bdbe080 00007ff9`e5fcd9a0     0x00007ff9`e5fcda82\r\n6e 00000045`0bdbe120 00007ff9`e5fcd904     0x00007ff9`e5fcd9a0\r\n6f 00000045`0bdbe160 00007ff9`e5fcd499     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa4\r\n70 00000045`0bdbe1d0 00007ff9`e5fcbbe5     xunit_execution_dotnet!Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync+0x109\r\n71 00000045`0bdbe270 00007ff9`e5fcb38d     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestMethodsAsync\u003ed__38.MoveNext+0x7a5\r\n72 00000045`0bdbe5b0 00007ff9`e5fcb2a0     0x00007ff9`e5fcb38d\r\n73 00000045`0bdbe660 00007ff9`e5fcb203     0x00007ff9`e5fcb2a0\r\n74 00000045`0bdbe6a0 00007ff9`e5fc924d     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestMethodsAsync+0xb3\r\n75 00000045`0bdbe730 00007ff9`e5fc8f18     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__37.MoveNext+0x28d\r\n76 00000045`0bdbe8a0 00007ff9`e5fc8e30     0x00007ff9`e5fc8f18\r\n77 00000045`0bdbe940 00007ff9`e5fc8d98     0x00007ff9`e5fc8e30\r\n78 00000045`0bdbe980 00007ff9`e5fc8866     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n79 00000045`0bdbea00 00007ff9`e5fc7d31     xunit_execution_dotnet!Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync+0x116\r\n7a 00000045`0bdbeaa0 00007ff9`e5fc7609     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestClassesAsync\u003ed__28.MoveNext+0x681\r\n7b 00000045`0bdbecc0 00007ff9`e5fc7520     0x00007ff9`e5fc7609\r\n7c 00000045`0bdbed70 00007ff9`e5fc7489     0x00007ff9`e5fc7520\r\n7d 00000045`0bdbedb0 00007ff9`e5fc52ae     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestClassesAsync+0xa9\r\n7e 00000045`0bdbee30 00007ff9`e5fc4988     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__27.MoveNext+0x28e\r\n7f 00000045`0bdbefa0 00007ff9`e5fc4730     0x00007ff9`e5fc4988\r\n80 00000045`0bdbf040 00007ff9`e5fc45d8     0x00007ff9`e5fc4730\r\n81 00000045`0bdbf080 00007ff9`e5fc3c50     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n82 00000045`0bdbf100 00007ff9`e5fc3b63     xunit_execution_dotnet!Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync+0xd0\r\n83 00000045`0bdbf180 00007ffa`368db78f     xunit_execution_dotnet!Xunit.Sdk.XunitTestAssemblyRunner.\u003c\u003ec__DisplayClass14_2.\u003cRunTestCollectionsAsync\u003eb__2+0x93\r\n84 00000045`0bdbf1e0 00007ffa`366964bd     System_Private_CoreLib!System.Threading.Tasks.Task\u003cSystem.Threading.Tasks.Task\u003e.InnerInvoke+0x2f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 501] \r\n85 00000045`0bdbf220 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n86 00000045`0bdbf290 00007ffa`366b076d     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n87 00000045`0bdbf330 00007ffa`366b8c48     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteEntry+0x6d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2265] \r\n88 00000045`0bdbf370 00007ff9`e5fc3aa3     System_Private_CoreLib!System.Threading.Tasks.SynchronizationContextTaskScheduler.\u003c\u003ec.\u003c.cctor\u003eb__8_0+0x18 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskScheduler.cs @ 607] \r\n89 00000045`0bdbf3a0 00007ff9`e5fc3957     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext+0x43\r\n8a 00000045`0bdbf3e0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.\u003c\u003ec__DisplayClass11_0.\u003cWorkerThreadProc\u003eb__0+0x67\r\n8b 00000045`0bdbf430 00007ff9`e5fc3838     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n8c 00000045`0bdbf4a0 00007ff9`e5fc19c0     xunit_execution_dotnet!Xunit.Sdk.ExecutionContextHelper.Run+0x58\r\n8d 00000045`0bdbf4e0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0x1c0\r\n8e 00000045`0bdbf590 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n8f 00000045`0bdbf5e0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n90 00000045`0bdbf650 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n91 00000045`0bdbf6f0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n92 00000045`0bdbf730 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n93 00000045`0bdbf7c0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n94 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n95 00000045`0bdbf820 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n96 00000045`0bdbf8e0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n97 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n98 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n99 00000045`0bdbf980 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n9a 00000045`0bdbf9e0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n9b 00000045`0bdbfa10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  17  Id: 60ac.34d4 Suspend: 1 Teb: 00000045`0a564000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0bf3f248 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0bf3f250 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0bf3f540 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0bf3f600 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0bf3f680 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0bf3f830 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0bf3f900 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0bf3f940 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0bf3f9f0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0bf3fa40 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0bf3fab0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0bf3fb50 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0bf3fb90 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0bf3fc20 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0bf3fc80 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0bf3fd40 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0bf3fde0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0bf3fe40 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0bf3fe70 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  18  Id: 60ac.74ec Suspend: 1 Teb: 00000045`0a566000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c0b85f8 00007ffa`d259aec5     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 00000045`0c0b8600 00007ffa`d25a5def     ntdll!RtlpWaitOnCriticalSection+0x5a5\r\n02 00000045`0c0b8700 00007ffa`d25a5548     ntdll!RtlpEnterCriticalSectionContended+0x1ff\r\n03 00000045`0c0b8780 00007ffa`429fd89a     ntdll!RtlEnterCriticalSection+0xf8\r\n04 00000045`0c0b87c0 00007ffa`429ebb2d     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n05 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n06 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 378] \r\n07 00000045`0c0b87f0 00007ffa`429eb781     coreclr!MethodTable::AllocateRegularStaticBox+0xd5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4204] \r\n08 00000045`0c0b8870 00007ffa`42962366     coreclr!MethodTable::AllocateRegularStaticBoxes+0x121 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4177] \r\n09 00000045`0c0b88d0 00007ffa`42961da0     coreclr!MethodTable::DoRunClassInitThrowing+0x536 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4496] \r\n0a 00000045`0c0b8e60 00007ffa`42af287f     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n0b 00000045`0c0b8e90 00007ffa`4295fe7f     coreclr!DomainAssembly::Activate+0x147947 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 595] \r\n0c 00000045`0c0b8ec0 00007ffa`4295ff29     coreclr!DomainAssembly::DoIncrementalLoad+0x107 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 441] \r\n0d 00000045`0c0b8f00 00007ffa`4296060e     coreclr!AppDomain::TryIncrementalLoad+0xa5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2947] \r\n0e 00000045`0c0b8ff0 00007ffa`42a58a04     coreclr!AppDomain::LoadDomainAssembly+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2881] \r\n0f 00000045`0c0b9070 00007ffa`42a5890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n10 00000045`0c0b90d0 00007ffa`4297fb73     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n11 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0x11 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n12 (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n13 (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n14 00000045`0c0b9100 00007ffa`42a11b69     coreclr!MethodDesc::EnsureActive+0x67 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\method.cpp @ 186] \r\n15 (Inline Function) --------`--------     coreclr!GCHolderBase::EnterInternalCoop+0x94f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5171] \r\n16 (Inline Function) --------`--------     coreclr!GCCoopThreadExists::{ctor}+0x94f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5363] \r\n17 00000045`0c0b9160 00007ffa`42aadb41     coreclr!ExternalMethodFixupWorker+0xdb9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 3082] \r\n18 00000045`0c0b9410 00007ffa`42aac663     coreclr!DelayLoad_MethodCall+0x71 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 25] \r\n19 00000045`0c0b94c0 00007ffa`42960530     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n1a 00000045`0c0b9500 00007ffa`42961608     coreclr!DispatchCallDebuggerWrapper+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 156] \r\n1b 00000045`0c0b9560 00007ffa`429601cc     coreclr!DispatchCallSimple+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 215] \r\n1c (Inline Function) --------`--------     coreclr!StressLog::InlinedStressLogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 804] \r\n1d (Inline Function) --------`--------     coreclr!StressLog::LogOn+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\utilcode\\stresslog.cpp @ 838] \r\n1e 00000045`0c0b95f0 00007ffa`429622d6     coreclr!MethodTable::RunClassInitEx+0x134 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4329] \r\n1f 00000045`0c0b96d0 00007ffa`42961da0     coreclr!MethodTable::DoRunClassInitThrowing+0x4a6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4512] \r\n20 00000045`0c0b9c60 00007ffa`42af287f     coreclr!MethodTable::CheckRunClassInitThrowing+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 4650] \r\n21 00000045`0c0b9c90 00007ffa`4295fe7f     coreclr!DomainAssembly::Activate+0x147947 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 595] \r\n22 00000045`0c0b9cc0 00007ffa`4295ff29     coreclr!DomainAssembly::DoIncrementalLoad+0x107 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 441] \r\n23 00000045`0c0b9d00 00007ffa`4296060e     coreclr!AppDomain::TryIncrementalLoad+0xa5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2947] \r\n24 00000045`0c0b9df0 00007ffa`42a58a04     coreclr!AppDomain::LoadDomainAssembly+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2881] \r\n25 00000045`0c0b9e70 00007ffa`42a5890c     coreclr!AppDomain::LoadDomainAssembly+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\appdomain.cpp @ 2596] \r\n26 00000045`0c0b9ed0 00007ffa`4296e1e9     coreclr!DomainAssembly::EnsureLoadLevel+0x38 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.cpp @ 116] \r\n27 (Inline Function) --------`--------     coreclr!DomainAssembly::EnsureActive+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\domainassembly.h @ 228] \r\n28 (Inline Function) --------`--------     coreclr!Module::EnsureActive+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceeload.cpp @ 4930] \r\n29 (Inline Function) --------`--------     coreclr!MethodTable::EnsureInstanceActive+0x32 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\methodtable.cpp @ 8425] \r\n2a (Inline Function) --------`--------     coreclr!CEEInfo::EnsureActive+0x4f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 2925] \r\n2b 00000045`0c0b9f00 00007ffa`4817040f     coreclr!CEEInfo::resolveToken+0x3f9 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 1073] \r\n2c 00000045`0c0ba200 00007ffa`4816ce02     clrjit!Compiler::impImportBlockCode+0x281f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 8436] \r\n2d 00000045`0c0baa10 00007ffa`4816cad1     clrjit!Compiler::impImportBlock+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 11284] \r\n2e 00000045`0c0bab10 00007ffa`481871fe     clrjit!Compiler::impImport+0x3f1 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\importer.cpp @ 12234] \r\n2f 00000045`0c0bab80 00007ffa`48156020     clrjit!Compiler::fgImport+0xe [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\flowgraph.cpp @ 580] \r\n30 (Inline Function) --------`--------     clrjit!Phase::Run+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n31 (Inline Function) --------`--------     clrjit!DoPhase+0x61 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\phase.h @ 136] \r\n32 00000045`0c0babb0 00007ffa`4816b30f     clrjit!Compiler::compCompile+0x1d0 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 4542] \r\n33 00000045`0c0bae60 00007ffa`4816a6fd     clrjit!Compiler::compCompileHelper+0x34f [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7150] \r\n34 00000045`0c0baf40 00007ffa`480e8165     clrjit!Compiler::compCompile+0x24d [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 6292] \r\n35 00000045`0c0bb030 00007ffa`4818aad6     clrjit!jitNativeCode+0x265 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\compiler.cpp @ 7783] \r\n36 00000045`0c0bb1d0 00007ffa`42a12ced     clrjit!CILJit::compileMethod+0xa6 [D:\\a\\_work\\1\\s\\src\\coreclr\\jit\\ee_il_dll.cpp @ 299] \r\n37 (Inline Function) --------`--------     coreclr!invokeCompileMethodHelper+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12355] \r\n38 (Inline Function) --------`--------     coreclr!invokeCompileMethod+0xbc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12418] \r\n39 00000045`0c0bb270 00007ffa`4298064b     coreclr!UnsafeJitFunction+0x64d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 12863] \r\n3a 00000045`0c0bb7d0 00007ffa`42980472     coreclr!MethodDesc::JitCompileCodeLocked+0xeb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 939] \r\n3b 00000045`0c0bb8e0 00007ffa`42980177     coreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x17a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 820] \r\n3c 00000045`0c0bba00 00007ffa`42a0f9da     coreclr!MethodDesc::JitCompileCode+0x2d7 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 707] \r\n3d (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 433] \r\n3e (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x153 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 321] \r\n3f 00000045`0c0bbaa0 00007ffa`42a0ee91     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x27a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1734] \r\n40 00000045`0c0bbea0 00007ffa`42a0ec28     coreclr!MethodDesc::DoPrestub+0x131 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2597] \r\n41 00000045`0c0bbf80 00007ffa`42aad9a5     coreclr!PreStubWorker+0x218 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2424] \r\n42 00000045`0c0bc080 00007ff9`e5fdbc85     coreclr!ThePreStub+0x55 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\ThePreStubAMD64.asm @ 21] \r\n43 00000045`0c0bc130 00007ff9`e5fdb46b     ClassLibrary!ClassLibrary.RotateTransformCreator.CreateOne+0x25 [C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\ClassLibrary\\RotateTransformCreator.cs @ 5] \r\n44 00000045`0c0bc170 00007ffa`42aac663     DeadlockTests_net8!DeadlockTests_net8.TestClassB.Test2+0xfb [C:\\Users\\james_hood.LECO\\Downloads\\Deadlock\\DeadlockTests-net8\\TestClassB.cs @ 12] \r\n45 00000045`0c0bc1f0 00007ffa`429e8ab0     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n46 00000045`0c0bc230 00007ffa`36712c57     coreclr!RuntimeMethodHandle::InvokeMethod+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\reflectioninvocation.cpp @ 739] \r\n47 00000045`0c0bc560 00007ffa`36712503     System_Private_CoreLib!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs+0x37 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57] \r\n48 00000045`0c0bc5b0 00007ff9`e5fdb26c     System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x23 [/_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56] \r\n49 00000045`0c0bc5f0 00007ff9`e5fdae40     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.CallTestMethod+0x4c\r\n4a 00000045`0c0bc630 00007ff9`e5fda802     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003ec__DisplayClass48_0.\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed.MoveNext+0x5a0\r\n4b 00000045`0c0bc860 00007ff9`e5fda720     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start\u003c\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003e+0xc2 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38] \r\n4c 00000045`0c0bc900 00007ff9`e5fda65a     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\u003c\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003e+0x60 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33] \r\n4d 00000045`0c0bc940 00007ff9`e5fda3b2     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003ec__DisplayClass48_0.\u003cInvokeTestMethodAsync\u003eb__1+0x9a\r\n4e 00000045`0c0bc9b0 00007ff9`e5fda21b     xunit_execution_dotnet!Xunit.Sdk.ExecutionTimer.\u003cAggregateAsync\u003ed__4.MoveNext+0x82\r\n4f 00000045`0c0bca40 00007ff9`e5fda17c     0x00007ff9`e5fda21b\r\n50 00000045`0c0bcad0 00007ff9`e5fda134     0x00007ff9`e5fda17c\r\n51 00000045`0c0bcb00 00007ff9`e5fda0c2     xunit_execution_dotnet!Xunit.Sdk.ExecutionTimer.AggregateAsync+0x54\r\n52 00000045`0c0bcb60 00007ff9`e5fd9e6d     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.\u003c\u003ec__DisplayClass48_0.\u003cInvokeTestMethodAsync\u003eb__0+0xb2\r\n53 00000045`0c0bcbc0 00007ff9`e5fd9d64     xunit_core!Xunit.Sdk.ExceptionAggregator.\u003cRunAsync\u003ed__9.MoveNext+0x6d\r\n54 00000045`0c0bcc60 00007ff9`e5fd9ccc     0x00007ff9`e5fd9d64\r\n55 00000045`0c0bcce0 00007ff9`e5fd9c85     0x00007ff9`e5fd9ccc\r\n56 00000045`0c0bcd10 00007ff9`e5fd91d6     xunit_core!Xunit.Sdk.ExceptionAggregator.RunAsync+0x55\r\n57 00000045`0c0bcd70 00007ff9`e5fd8f18     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cInvokeTestMethodAsync\u003ed__48.MoveNext+0x216\r\n58 00000045`0c0bce70 00007ff9`e5fd8c10     0x00007ff9`e5fd8f18\r\n59 00000045`0c0bcf10 00007ff9`e5fd8b8a     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u003cSystem.Decimal\u003e.Start\u003c\u003cInvokeTestMethodAsync\u003ed__48\u003e+0x60 [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35] \r\n5a 00000045`0c0bcf50 00007ff9`e5fd86ce     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.InvokeTestMethodAsync+0xaa\r\n5b 00000045`0c0bcfd0 00007ff9`e5fd66fc     xunit_execution_dotnet!Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync+0xde\r\n5c 00000045`0c0bd030 00007ff9`e5fd5ad9     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003c\u003cRunAsync\u003eb__47_0\u003ed.MoveNext+0x42c\r\n5d 00000045`0c0bd170 00007ff9`e5fd59f0     0x00007ff9`e5fd5ad9\r\n5e 00000045`0c0bd220 00007ff9`e5fd595f     0x00007ff9`e5fd59f0\r\n5f 00000045`0c0bd260 00007ff9`e5fd56e6     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003eb__47_0+0x9f\r\n60 00000045`0c0bd2e0 00007ff9`e5fd55b4     xunit_core!Xunit.Sdk.ExceptionAggregator.\u003cRunAsync\u003ed__10\u003cSystem.Decimal\u003e.MoveNext+0x96\r\n61 00000045`0c0bd3a0 00007ff9`e5fd551c     0x00007ff9`e5fd55b4\r\n62 00000045`0c0bd420 00007ff9`e5fd5495     0x00007ff9`e5fd551c\r\n63 00000045`0c0bd450 00007ff9`e5fd53f1     xunit_core!Xunit.Sdk.ExceptionAggregator.RunAsync\u003cSystem.Decimal\u003e+0x55\r\n64 00000045`0c0bd4b0 00007ff9`e5fd4cff     xunit_execution_dotnet!Xunit.Sdk.TestInvoker\u003cSystem.__Canon\u003e.RunAsync+0x61\r\n65 00000045`0c0bd4f0 00007ff9`e5fd4888     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync+0x10f\r\n66 00000045`0c0bd5a0 00007ff9`e5fd45f1     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.\u003cInvokeTestAsync\u003ed__4.MoveNext+0x1f8\r\n67 00000045`0c0bd6c0 00007ff9`e5fd4550     0x00007ff9`e5fd45f1\r\n68 00000045`0c0bd750 00007ff9`e5fd44fe     0x00007ff9`e5fd4550\r\n69 00000045`0c0bd780 00007ff9`e5fd446a     xunit_execution_dotnet!Xunit.Sdk.XunitTestRunner.InvokeTestAsync+0x6e\r\n6a 00000045`0c0bd7f0 00007ff9`e5fd4031     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cSystem.__Canon\u003e.\u003c\u003ec__DisplayClass43_0.\u003cRunAsync\u003eb__0+0x3a\r\n6b 00000045`0c0bd830 00007ff9`e5fd3912     0x00007ff9`e5fd4031\r\n6c 00000045`0c0bd910 00007ff9`e5fd3710     0x00007ff9`e5fd3912\r\n6d 00000045`0c0bd9b0 00007ff9`e5fd35b5     0x00007ff9`e5fd3710\r\n6e 00000045`0c0bd9f0 00007ff9`e5fd2748     0x00007ff9`e5fd35b5\r\n6f 00000045`0c0bda70 00007ff9`e5fd2219     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__43.MoveNext+0x3a8\r\n70 00000045`0c0bdc50 00007ff9`e5fd20f0     0x00007ff9`e5fd2219\r\n71 00000045`0c0bdd00 00007ff9`e5fd1f49     0x00007ff9`e5fd20f0\r\n72 00000045`0c0bdd40 00007ff9`e5fd05f8     xunit_execution_dotnet!Xunit.Sdk.TestRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa9\r\n73 00000045`0c0bddc0 00007ff9`e5fcff16     xunit_execution_dotnet!Xunit.Sdk.XunitTestCaseRunner.RunTestAsync+0x158\r\n74 00000045`0c0bde90 00007ff9`e5fcfc28     xunit_execution_dotnet!Xunit.Sdk.TestCaseRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__19.MoveNext+0x246\r\n75 00000045`0c0bdfc0 00007ff9`e5fcfb40     0x00007ff9`e5fcfc28\r\n76 00000045`0c0be060 00007ff9`e5fcfaa8     0x00007ff9`e5fcfb40\r\n77 00000045`0c0be0a0 00007ff9`e5fced62     xunit_execution_dotnet!Xunit.Sdk.TestCaseRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n78 00000045`0c0be120 00007ff9`e5fcec27     xunit_execution_dotnet!Xunit.Sdk.XunitTestCase.RunAsync+0xb2\r\n79 00000045`0c0be1a0 00007ff9`e5fce7a1     xunit_execution_dotnet!Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync+0xb7\r\n7a 00000045`0c0be210 00007ff9`e5fce4b9     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestCasesAsync\u003ed__32.MoveNext+0x241\r\n7b 00000045`0c0be340 00007ff9`e5fce3d0     0x00007ff9`e5fce4b9\r\n7c 00000045`0c0be3f0 00007ff9`e5fce339     0x00007ff9`e5fce3d0\r\n7d 00000045`0c0be430 00007ff9`e5fcdcc0     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestCasesAsync+0xa9\r\n7e 00000045`0c0be4b0 00007ff9`e5fcda82     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__31.MoveNext+0x1a0\r\n7f 00000045`0c0be600 00007ff9`e5fcd9a0     0x00007ff9`e5fcda82\r\n80 00000045`0c0be6a0 00007ff9`e5fcd904     0x00007ff9`e5fcd9a0\r\n81 00000045`0c0be6e0 00007ff9`e5fcd499     xunit_execution_dotnet!Xunit.Sdk.TestMethodRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa4\r\n82 00000045`0c0be750 00007ff9`e5fcbbe5     xunit_execution_dotnet!Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync+0x109\r\n83 00000045`0c0be7f0 00007ff9`e5fcb38d     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestMethodsAsync\u003ed__38.MoveNext+0x7a5\r\n84 00000045`0c0beb30 00007ff9`e5fcb2a0     0x00007ff9`e5fcb38d\r\n85 00000045`0c0bebe0 00007ff9`e5fcb203     0x00007ff9`e5fcb2a0\r\n86 00000045`0c0bec20 00007ff9`e5fc924d     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestMethodsAsync+0xb3\r\n87 00000045`0c0becb0 00007ff9`e5fc8f18     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__37.MoveNext+0x28d\r\n88 00000045`0c0bee20 00007ff9`e5fc8e30     0x00007ff9`e5fc8f18\r\n89 00000045`0c0beec0 00007ff9`e5fc8d98     0x00007ff9`e5fc8e30\r\n8a 00000045`0c0bef00 00007ff9`e5fc8866     xunit_execution_dotnet!Xunit.Sdk.TestClassRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n8b 00000045`0c0bef80 00007ff9`e5fc7d31     xunit_execution_dotnet!Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync+0x116\r\n8c 00000045`0c0bf020 00007ff9`e5fc7609     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunTestClassesAsync\u003ed__28.MoveNext+0x681\r\n8d 00000045`0c0bf240 00007ff9`e5fc7520     0x00007ff9`e5fc7609\r\n8e 00000045`0c0bf2f0 00007ff9`e5fc7489     0x00007ff9`e5fc7520\r\n8f 00000045`0c0bf330 00007ff9`e5fc52ae     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunTestClassesAsync+0xa9\r\n90 00000045`0c0bf3b0 00007ff9`e5fc4988     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.\u003cRunAsync\u003ed__27.MoveNext+0x28e\r\n91 00000045`0c0bf520 00007ff9`e5fc4730     0x00007ff9`e5fc4988\r\n92 00000045`0c0bf5c0 00007ff9`e5fc45d8     0x00007ff9`e5fc4730\r\n93 00000045`0c0bf600 00007ff9`e5fc3c50     xunit_execution_dotnet!Xunit.Sdk.TestCollectionRunner\u003cXunit.Sdk.IXunitTestCase\u003e.RunAsync+0xa8\r\n94 00000045`0c0bf680 00007ff9`e5fc3b63     xunit_execution_dotnet!Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync+0xd0\r\n95 00000045`0c0bf700 00007ffa`368db78f     xunit_execution_dotnet!Xunit.Sdk.XunitTestAssemblyRunner.\u003c\u003ec__DisplayClass14_2.\u003cRunTestCollectionsAsync\u003eb__2+0x93\r\n96 00000045`0c0bf760 00007ffa`366964bd     System_Private_CoreLib!System.Threading.Tasks.Task\u003cSystem.Threading.Tasks.Task\u003e.InnerInvoke+0x2f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 501] \r\n97 00000045`0c0bf7a0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n98 00000045`0c0bf810 00007ffa`366b076d     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n99 00000045`0c0bf8b0 00007ffa`366b8c48     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteEntry+0x6d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2265] \r\n9a 00000045`0c0bf8f0 00007ff9`e5fc3aa3     System_Private_CoreLib!System.Threading.Tasks.SynchronizationContextTaskScheduler.\u003c\u003ec.\u003c.cctor\u003eb__8_0+0x18 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskScheduler.cs @ 607] \r\n9b 00000045`0c0bf920 00007ff9`e5fc3957     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext+0x43\r\n9c 00000045`0c0bf960 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.\u003c\u003ec__DisplayClass11_0.\u003cWorkerThreadProc\u003eb__0+0x67\r\n9d 00000045`0c0bf9b0 00007ff9`e5fc3838     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n9e 00000045`0c0bfa20 00007ff9`e5fc19c0     xunit_execution_dotnet!Xunit.Sdk.ExecutionContextHelper.Run+0x58\r\n9f 00000045`0c0bfa60 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0x1c0\r\na0 00000045`0c0bfb10 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\na1 00000045`0c0bfb60 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\na2 00000045`0c0bfbd0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\na3 00000045`0c0bfc70 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\na4 00000045`0c0bfcb0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\na5 00000045`0c0bfd40 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\na6 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\na7 00000045`0c0bfda0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\na8 00000045`0c0bfe60 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\na9 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\naa (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\nab 00000045`0c0bff00 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\nac 00000045`0c0bff60 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\nad 00000045`0c0bff90 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  19  Id: 60ac.2558 Suspend: 1 Teb: 00000045`0a568000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c23f208 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c23f210 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c23f500 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c23f5c0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c23f640 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c23f7f0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c23f8c0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c23f900 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c23f9b0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c23fa00 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c23fa70 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c23fb10 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c23fb50 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c23fbe0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c23fc40 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c23fd00 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c23fda0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c23fe00 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c23fe30 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  20  Id: 60ac.7d50 Suspend: 1 Teb: 00000045`0a56a000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c3bf1d8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c3bf1e0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c3bf4d0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c3bf590 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c3bf610 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c3bf7c0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c3bf890 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c3bf8d0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c3bf980 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c3bf9d0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c3bfa40 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c3bfae0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c3bfb20 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c3bfbb0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c3bfc10 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c3bfcd0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c3bfd70 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c3bfdd0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c3bfe00 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  21  Id: 60ac.c80 Suspend: 1 Teb: 00000045`0a56c000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c53ecf8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c53ed00 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c53eff0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c53f0b0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c53f130 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c53f2e0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c53f3b0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c53f3f0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c53f4a0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c53f4f0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c53f560 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c53f600 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c53f640 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c53f6d0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c53f730 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c53f7f0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c53f890 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c53f8f0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c53f920 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  22  Id: 60ac.65d8 Suspend: 1 Teb: 00000045`0a56e000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c6bee68 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c6bee70 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c6bf160 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c6bf220 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c6bf2a0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c6bf450 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c6bf520 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c6bf560 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c6bf610 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c6bf660 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c6bf6d0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c6bf770 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c6bf7b0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c6bf840 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c6bf8a0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c6bf960 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c6bfa00 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c6bfa60 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c6bfa90 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  23  Id: 60ac.191c Suspend: 1 Teb: 00000045`0a570000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c83f238 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c83f240 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c83f530 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c83f5f0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c83f670 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c83f820 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c83f8f0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c83f930 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c83f9e0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c83fa30 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c83faa0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c83fb40 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c83fb80 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c83fc10 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c83fc70 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c83fd30 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c83fdd0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c83fe30 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c83fe60 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  24  Id: 60ac.4c6c Suspend: 1 Teb: 00000045`0a572000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0c9bed28 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0c9bed30 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0c9bf020 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0c9bf0e0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0c9bf160 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0c9bf310 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0c9bf3e0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0c9bf420 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0c9bf4d0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0c9bf520 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0c9bf590 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0c9bf630 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0c9bf670 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0c9bf700 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0c9bf760 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0c9bf820 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0c9bf8c0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0c9bf920 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0c9bf950 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  25  Id: 60ac.3484 Suspend: 1 Teb: 00000045`0a574000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0cb3ec68 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0cb3ec70 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0cb3ef60 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0cb3f020 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0cb3f0a0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0cb3f250 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0cb3f320 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0cb3f360 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0cb3f410 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0cb3f460 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0cb3f4d0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0cb3f570 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0cb3f5b0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0cb3f640 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0cb3f6a0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0cb3f760 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0cb3f800 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0cb3f860 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0cb3f890 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  26  Id: 60ac.8064 Suspend: 1 Teb: 00000045`0a576000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0ccbed28 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0ccbed30 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0ccbf020 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0ccbf0e0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0ccbf160 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0ccbf310 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0ccbf3e0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0ccbf420 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0ccbf4d0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0ccbf520 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0ccbf590 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0ccbf630 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0ccbf670 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0ccbf700 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0ccbf760 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0ccbf820 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0ccbf8c0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0ccbf920 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0ccbf950 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  27  Id: 60ac.3efc Suspend: 1 Teb: 00000045`0a578000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0ce3eca8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0ce3ecb0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0ce3efa0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0ce3f060 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0ce3f0e0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0ce3f290 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0ce3f360 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0ce3f3a0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0ce3f450 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0ce3f4a0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0ce3f510 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0ce3f5b0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0ce3f5f0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0ce3f680 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0ce3f6e0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0ce3f7a0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0ce3f840 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0ce3f8a0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0ce3f8d0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  28  Id: 60ac.1e00 Suspend: 1 Teb: 00000045`0a57a000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0cfbef98 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0cfbefa0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0cfbf290 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0cfbf350 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0cfbf3d0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0cfbf580 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0cfbf650 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0cfbf690 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0cfbf740 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0cfbf790 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0cfbf800 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0cfbf8a0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0cfbf8e0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0cfbf970 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0cfbf9d0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0cfbfa90 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0cfbfb30 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0cfbfb90 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0cfbfbc0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  29  Id: 60ac.3fcc Suspend: 1 Teb: 00000045`0a57c000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d13ed88 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d13ed90 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d13f080 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d13f140 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d13f1c0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d13f370 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d13f440 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d13f480 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d13f530 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d13f580 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d13f5f0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d13f690 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d13f6d0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d13f760 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d13f7c0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d13f880 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d13f920 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d13f980 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d13f9b0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  30  Id: 60ac.260c Suspend: 1 Teb: 00000045`0a57e000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d2bf1f8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d2bf200 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d2bf4f0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d2bf5b0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d2bf630 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d2bf7e0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d2bf8b0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d2bf8f0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d2bf9a0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d2bf9f0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d2bfa60 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d2bfb00 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d2bfb40 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d2bfbd0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d2bfc30 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d2bfcf0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d2bfd90 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d2bfdf0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d2bfe20 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  31  Id: 60ac.6e90 Suspend: 1 Teb: 00000045`0a580000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d43ecb8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d43ecc0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d43efb0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d43f070 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d43f0f0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d43f2a0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d43f370 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d43f3b0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d43f460 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d43f4b0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d43f520 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d43f5c0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d43f600 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d43f690 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d43f6f0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d43f7b0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d43f850 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d43f8b0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d43f8e0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  32  Id: 60ac.3758 Suspend: 1 Teb: 00000045`0a582000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d5beb78 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d5beb80 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d5bee70 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d5bef30 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d5befb0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d5bf160 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d5bf230 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d5bf270 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d5bf320 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d5bf370 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d5bf3e0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d5bf480 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d5bf4c0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d5bf550 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d5bf5b0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d5bf670 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d5bf710 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d5bf770 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d5bf7a0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  33  Id: 60ac.2394 Suspend: 1 Teb: 00000045`0a584000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d73ec08 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d73ec10 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d73ef00 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d73efc0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d73f040 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d73f1f0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d73f2c0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d73f300 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d73f3b0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d73f400 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d73f470 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d73f510 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d73f550 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d73f5e0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d73f640 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d73f700 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d73f7a0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d73f800 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d73f830 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  34  Id: 60ac.6f20 Suspend: 1 Teb: 00000045`0a586000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0d8bf1c8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0d8bf1d0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0d8bf4c0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0d8bf580 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0d8bf600 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0d8bf7b0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0d8bf880 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0d8bf8c0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0d8bf970 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0d8bf9c0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0d8bfa30 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0d8bfad0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0d8bfb10 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0d8bfba0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0d8bfc00 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0d8bfcc0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0d8bfd60 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0d8bfdc0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0d8bfdf0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  35  Id: 60ac.58c Suspend: 1 Teb: 00000045`0a588000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0da3f078 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0da3f080 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0da3f370 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0da3f430 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0da3f4b0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0da3f660 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0da3f730 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0da3f770 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0da3f820 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0da3f870 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0da3f8e0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0da3f980 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0da3f9c0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0da3fa50 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0da3fab0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0da3fb70 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0da3fc10 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0da3fc70 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0da3fca0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  36  Id: 60ac.7f7c Suspend: 1 Teb: 00000045`0a58a000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0dbbf2f8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0dbbf300 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0dbbf5f0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0dbbf6b0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0dbbf730 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0dbbf8e0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0dbbf9b0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0dbbf9f0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0dbbfaa0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0dbbfaf0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0dbbfb60 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0dbbfc00 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0dbbfc40 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0dbbfcd0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0dbbfd30 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0dbbfdf0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0dbbfe90 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0dbbfef0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0dbbff20 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  37  Id: 60ac.75e8 Suspend: 1 Teb: 00000045`0a58c000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0dd3ef58 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0dd3ef60 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0dd3f250 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0dd3f310 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0dd3f390 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0dd3f540 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0dd3f610 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0dd3f650 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0dd3f700 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0dd3f750 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0dd3f7c0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0dd3f860 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0dd3f8a0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0dd3f930 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0dd3f990 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0dd3fa50 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0dd3faf0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0dd3fb50 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0dd3fb80 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  38  Id: 60ac.3850 Suspend: 1 Teb: 00000045`0a58e000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0debf128 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0debf130 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0debf420 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0debf4e0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0debf560 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0debf710 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0debf7e0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0debf820 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0debf8d0 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0debf920 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0debf990 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0debfa30 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0debfa70 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0debfb00 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0debfb60 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0debfc20 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0debfcc0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0debfd20 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0debfd50 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  39  Id: 60ac.8124 Suspend: 1 Teb: 00000045`0a590000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e03ebd8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e03ebe0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e03eed0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e03ef90 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e03f010 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e03f1c0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e03f290 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e03f2d0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e03f380 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e03f3d0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e03f440 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e03f4e0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e03f520 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e03f5b0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e03f610 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e03f6d0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e03f770 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e03f7d0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e03f800 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  40  Id: 60ac.3130 Suspend: 1 Teb: 00000045`0a592000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e1becb8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e1becc0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e1befb0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e1bf070 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e1bf0f0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e1bf2a0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e1bf370 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e1bf3b0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e1bf460 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e1bf4b0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e1bf520 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e1bf5c0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e1bf600 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e1bf690 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e1bf6f0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e1bf7b0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e1bf850 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e1bf8b0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e1bf8e0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  41  Id: 60ac.8de4 Suspend: 1 Teb: 00000045`0a594000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e33f178 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e33f180 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e33f470 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e33f530 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e33f5b0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e33f760 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e33f830 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e33f870 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e33f920 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e33f970 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e33f9e0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e33fa80 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e33fac0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e33fb50 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e33fbb0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e33fc70 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e33fd10 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e33fd70 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e33fda0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  42  Id: 60ac.5028 Suspend: 1 Teb: 00000045`0a596000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e4bed68 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e4bed70 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e4bf060 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e4bf120 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e4bf1a0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e4bf350 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e4bf420 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e4bf460 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e4bf510 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e4bf560 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e4bf5d0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e4bf670 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e4bf6b0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e4bf740 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e4bf7a0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e4bf860 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e4bf900 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e4bf960 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e4bf990 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  43  Id: 60ac.71a0 Suspend: 1 Teb: 00000045`0a598000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e63f2e8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e63f2f0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e63f5e0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e63f6a0 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e63f720 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e63f8d0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e63f9a0 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e63f9e0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e63fa90 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e63fae0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e63fb50 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e63fbf0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e63fc30 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e63fcc0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e63fd20 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e63fde0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e63fe80 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e63fee0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e63ff10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  44  Id: 60ac.4414 Suspend: 1 Teb: 00000045`0a59a000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e7bf058 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e7bf060 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e7bf350 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e7bf410 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e7bf490 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e7bf640 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e7bf710 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e7bf750 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e7bf800 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e7bf850 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e7bf8c0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e7bf960 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e7bf9a0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e7bfa30 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e7bfa90 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e7bfb50 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e7bfbf0 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e7bfc50 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e7bfc80 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  45  Id: 60ac.86ac Suspend: 1 Teb: 00000045`0a59c000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0e93eb78 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0e93eb80 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0e93ee70 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0e93ef30 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0e93efb0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0e93f160 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0e93f230 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0e93f270 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0e93f320 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0e93f370 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0e93f3e0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0e93f480 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0e93f4c0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0e93f550 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0e93f5b0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0e93f670 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0e93f710 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0e93f770 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0e93f7a0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  46  Id: 60ac.825c Suspend: 1 Teb: 00000045`0a59e000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0eabedc8 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0eabedd0 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0eabf0c0 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0eabf180 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0eabf200 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0eabf3b0 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0eabf480 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0eabf4c0 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0eabf570 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0eabf5c0 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0eabf630 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0eabf6d0 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0eabf710 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0eabf7a0 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0eabf800 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0eabf8c0 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0eabf960 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0eabf9c0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0eabf9f0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  47  Id: 60ac.24f4 Suspend: 1 Teb: 00000045`0a5a0000 Unfrozen \".NET Long Running Task\"\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0ec3f278 00007ffa`cfdd33a3     ntdll!NtWaitForMultipleObjects+0x14\r\n01 00000045`0ec3f280 00007ffa`42a42dd4     KERNELBASE!WaitForMultipleObjectsEx+0x123\r\n02 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateAptStateWait+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3333] \r\n03 00000045`0ec3f570 00007ffa`42a42c25     coreclr!Thread::DoAppropriateWaitWorker+0x170 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3467] \r\n04 00000045`0ec3f630 00007ffa`42a42a34     coreclr!Thread::DoAppropriateWait+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3182] \r\n05 00000045`0ec3f6b0 00007ffa`36691309     coreclr!WaitHandleNative::CorWaitMultipleNative+0xd4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 75] \r\n06 00000045`0ec3f860 00007ffa`366910fe     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x1e9 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 269] \r\n07 00000045`0ec3f930 00007ff9`e5fc18d2     System_Private_CoreLib!System.Threading.WaitHandle.WaitMultiple+0x2e [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 236] \r\n08 00000045`0ec3f970 00007ff9`e5fa6de3     xunit_execution_dotnet!Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc+0xd2\r\n09 00000045`0ec3fa20 00007ffa`366964bd     xunit_execution_dotnet!Xunit.Sdk.XunitWorkerThread.\u003c\u003ec.\u003cQueueUserWorkItem\u003eb__5_0+0x53\r\n0a 00000045`0ec3fa70 00007ffa`366b0914     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0x7d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \r\n0b 00000045`0ec3fae0 00007ffa`42aac663     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xb4 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2345] \r\n0c 00000045`0ec3fb80 00007ffa`429615e8     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0d 00000045`0ec3fbc0 00007ffa`42a99a43     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 221] \r\n0e 00000045`0ec3fc50 00007ffa`42a40259     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n0f (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7222] \r\n10 00000045`0ec3fcb0 00007ffa`42a40173     coreclr!ManagedThreadBase_DispatchMiddle+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7266] \r\n11 00000045`0ec3fd70 00007ffa`42a4030e     coreclr!ManagedThreadBase_DispatchOuter+0xab [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7425] \r\n12 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7470] \r\n13 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7505] \r\n14 00000045`0ec3fe10 00007ffa`d0fbdbe7     coreclr!ThreadNative::KickOffThread+0x7e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n15 00000045`0ec3fe70 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n16 00000045`0ec3fea0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  48  Id: 60ac.8fe4 Suspend: 1 Teb: 00000045`0a5a2000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0a77f698 00007ffa`d25d1dbe     ntdll!NtWaitForWorkViaWorkerFactory+0x14\r\n01 00000045`0a77f6a0 00007ffa`d0fbdbe7     ntdll!TppWorkerThread+0x37e\r\n02 00000045`0a77fa00 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n03 00000045`0a77fa30 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n  49  Id: 60ac.8a3c Suspend: 1 Teb: 00000045`0a5a4000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0edbf958 00007ffa`d25d1dbe     ntdll!NtWaitForWorkViaWorkerFactory+0x14\r\n01 00000045`0edbf960 00007ffa`d0fbdbe7     ntdll!TppWorkerThread+0x37e\r\n02 00000045`0edbfcc0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n03 00000045`0edbfcf0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n\r\n# 50  Id: 60ac.5e7c Suspend: 1 Teb: 00000045`0a5ae000 Unfrozen\r\n # Child-SP          RetAddr               Call Site\r\n00 00000045`0a8ff888 00007ffa`d26b535e     ntdll!DbgBreakPoint\r\n01 00000045`0a8ff890 00007ffa`d0fbdbe7     ntdll!DbgUiRemoteBreakin+0x4e\r\n02 00000045`0a8ff8c0 00007ffa`d2605a6c     KERNEL32!BaseThreadInitThunk+0x17\r\n03 00000045`0a8ff8f0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\r\n```\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2024-10-08T13:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PFF3B",
                                           "createdAt":  "2024-10-08T17:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1XIzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "miloush",
                                                                               "createdAt":  "2024-10-08T20:19:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "czdietrich",
                                                                               "createdAt":  "2024-10-09T06:44:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "@FlsZen @czdietrich I\u0027ve looked at the stack traces provided by @czdietrich I don\u0027t believe I need another crash dump.\r\n\r\nThe issue is indeed related to Wpf assemblies, and in particular to the use of C++/CLI within WPF, and is a symptom of a general bug in the runtime with respect to C++/CLI assemblies.\r\n\r\nNotably, we\u0027re in the process of running the module constructor to initialize the static variables on one assembly, and the field type is defined in a module with a module constructor, and on a different thread we are in the process of running that module constructor, and find ourselves needing to allocate memory for the static boxes. In this case I can see that we have a lock ordering violation, where we take two locks out of order. This was caused by PR #79188. In .NET 9, this logic was reworked to not have a lock at all.\r\n\r\n@EgorBo PTAL, I saw in the PR that @jkotas made some comments about fixing this issue, and you made a commit, that should probably have fixed it, but that change was reverted at some point before merging.\r\n\r\n@steveisok For visibility, I think you should be aware of this typesystem/loader issue.",
                                           "updatedAt":  "2024-10-08T17:50:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PFIeG",
                                           "createdAt":  "2024-10-08T17:56:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1XI3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "czdietrich",
                                                                               "createdAt":  "2024-10-09T06:44:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "@EgorBo, if you\u0027d like I can probably put together a 100% reliable repro of this. Contact me offline for this if you need it. It\u0027ll take a bit of time to put together.\r\n\r\n@czdietrich @FlsZen, the general workaround for this sort of issue is to have 1 single thread that runs before everything else call Assembly.Load to load the various C++/CLI assemblies. That should prevent any other part of your system from hitting this. I am not sure how to easily do this with dotnet test, but there\u0027s probably something you can do.",
                                           "updatedAt":  "2024-10-08T17:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PWDfE",
                                           "createdAt":  "2024-10-10T12:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1mEwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-10-10T12:59:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FlsZen",
                                                                               "createdAt":  "2024-10-10T13:00:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Hopefully, fixed via https://github.com/dotnet/runtime/pull/108736 ",
                                           "updatedAt":  "2024-10-10T12:12:05Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "net8 JIT locks up in unit tests when calling into WPF",
        "labels":  [
                       "investigate",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96293",
        "createdAt":  "2023-12-24T00:09:39Z",
        "number":  96293,
        "author":  "martindevans",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T16:51:00Z",
        "body":  "### Description\n\nWhen C# is acting as the host for WASM execution (using wasmtime-dotnet), [wasmtime will try to use fibers](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279#issuecomment-1775595020) and fail.\n\n[Wasmtime](https://wasmtime.dev/) supports async WASM execution, which can suspend running WASM code and resume it later.\n\nUnfortunately the implementation seems to be incompatible with running inside dotnet.\n\n### Reproduction Steps\n\n1. Clone [this PR](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279) which I wrote for wasmtime-dotnet to add async support\n2. Place a breakpoint inside an async callback\n3. Run tests\n4. Observe failures\n\n### Expected behavior\n\nWasmtime async should work in dotnet.\n\nWhether this should involve a change to dotnet or a change to wasmtime I\u0027m not sure. My motivation here is really just like to draw attention to this incompatibility and to get some input from dotnet developers on the PR.\n\n### Actual behavior\n\nTests fail with `System.Runtime.InteropServices.SEHException` when hitting a breakpoint.\n\nAccording to [this comment](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279#issuecomment-1775648516) it can sometimes crash with \"Fatal error. Internal CLR error.\" or \"AccessViolationException\".\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOksjwzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vXXvF",
                                           "createdAt":  "2023-12-24T00:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n[Wasmtime](https://wasmtime.dev/) supports async WASM execution, which can suspend running WASM code and resume it later.\r\n\r\nUnfortunately the implementation seems to be incompatible with dotnet.\n\n### Reproduction Steps\n\n1. Clone [this PR](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279) which I wrote for wasmtime-dotnet to add async support\r\n2. Place a breakpoint inside an async callback\r\n3. Run tests\r\n4. Observe failures\n\n### Expected behavior\n\nWasmtime async should work in dotnet.\r\n\r\nWhether this should involve a change to dotnet or a change to wasmtime I\u0027m not sure. My motivation here is really just like to draw attention to this incompatibility and to get some input from dotnet developers on the PR.\n\n### Actual behavior\n\nTests fail with `System.Runtime.InteropServices.SEHException` when hitting a breakpoint.\r\n\r\nAccording to [this comment](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279#issuecomment-1775648516) it can sometimes crash with \"Fatal error. Internal CLR error.\" or \"AccessViolationException\".\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emartindevans\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-VM-meta-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-24T00:21:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vXX_K",
                                           "createdAt":  "2023-12-24T00:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martindevans",
                                           "body":  "I would guess arch-wasm probably isn\u0027t the right tag, since this is about using wasm within dotnet rather than dotnet within wasm.",
                                           "updatedAt":  "2023-12-24T00:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vXaKb",
                                           "createdAt":  "2023-12-24T01:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQcDcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martindevans",
                                                                               "createdAt":  "2023-12-24T01:57:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e I would guess arch-wasm probably isn\u0027t the right tag\r\n\r\nYeah, I noticed - but it\u0027s probably the best way to get eyes on the issue from the right folks at this point in time - they can re-assign the arch if they feel it is incorrectly assigned.",
                                           "updatedAt":  "2023-12-24T01:27:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55dc7Y",
                                           "createdAt":  "2024-04-04T17:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "More work is happening here https://github.com/dicej/isyswasfa ",
                                           "updatedAt":  "2024-04-04T17:16:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SvUnf",
                                           "createdAt":  "2024-11-07T10:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I believe that we have initial implementation for this now for WASIp2. \n\nSee\nhttps://github.com/dotnet/runtime/blob/main/src/mono/sample/wasi/http-p2/Program.cs\n\nThis will improve with WASIp3",
                                           "updatedAt":  "2024-11-07T10:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SxRxp",
                                           "createdAt":  "2024-11-07T14:34:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martindevans",
                                           "body":  "@pavelsavara I don\u0027t think that resolves this issue. That looks like it\u0027s for async support when compiling C# to WASM. But this issue about the other case - when C# is acting as the host for WASM execution (using wasmtime-dotnet).\n\nIn this case the async features of wasmtime cannot be used because they are built with fibers, which are incompatible with dotnet:\n\n\u003e The .NET threading model does not support [fibers](https://learn.microsoft.com/en-us/windows/desktop/procthread/fibers). You should not call into any unmanaged function that is implemented by using fibers. Such calls may result in a crash of the .NET runtime.\n[source](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-and-unmanaged-threading-in-windows#threads-and-fibers).",
                                           "updatedAt":  "2024-11-07T14:34:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyHd7",
                                           "createdAt":  "2024-11-07T16:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Ah, so this is not about WASI at all. This is about CoreCLR vs wasmtime on windows",
                                           "updatedAt":  "2024-11-07T16:04:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyJQS",
                                           "createdAt":  "2024-11-07T16:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I think that somebody from CoreCLR needs to close this as `won\u0027t fix`.",
                                           "updatedAt":  "2024-11-07T16:04:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyKrC",
                                           "createdAt":  "2024-11-07T16:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-07T16:06:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyPDN",
                                           "createdAt":  "2024-11-07T16:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martindevans",
                                           "body":  "According to [this comment](https://github.com/bytecodealliance/wasmtime-dotnet/pull/279#issuecomment-1775600594) from one of the Wasmtime developers there\u0027s no alternative way to implement stack switching on Windows others than fibers. If there\u0027s no chance of dotnet gaining support for using fibers is there some other dotnet compatible alternative wasmtime could switch to?",
                                           "updatedAt":  "2024-11-07T16:13:41Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[CoreCLR] fibers on Windows  - Wasmtime Async Compatibility",
        "labels":  [
                       "os-windows",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96347",
        "createdAt":  "2023-12-28T16:14:38Z",
        "number":  96347,
        "author":  "LunarWhisper",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-eCXQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nsentinel",
                                            "createdAt":  "2023-12-28T16:17:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LunarWhisper",
                                            "createdAt":  "2023-12-28T16:17:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlbager",
                                            "createdAt":  "2023-12-28T17:24:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrediKats",
                                            "createdAt":  "2023-12-28T17:38:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FoKycHuK",
                                            "createdAt":  "2023-12-28T17:45:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LK9T9-Sektor",
                                            "createdAt":  "2023-12-28T18:41:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bykiev",
                                            "createdAt":  "2023-12-28T19:23:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "max-best",
                                            "createdAt":  "2023-12-29T08:10:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-12-29T17:11:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2024-01-01T01:53:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRastorguev",
                                            "createdAt":  "2024-01-03T14:58:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jpswing",
                                            "createdAt":  "2024-05-08T07:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BCSharp",
                                            "createdAt":  "2025-01-26T05:03:37Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-05-16T22:05:09Z",
        "body":  "### Description\r\n\r\nIn the process of migrating a huge Enterprise solution to .NET8, we encountered an unexpected regression:\r\nThe default stack size for the main and secondary threads has been reduced from `4 MB` (x64) to `1.5 MB`.\r\n\r\nThis resulted in a `StackOverflowException` in a RestAPI service using `AutoMapper`, custom serialization logic, and building dynamic methods.\r\n\r\nThe `DefaultStackSize` environment variable is internal and cannot be configured from an external .json config file.\r\n```c++\r\nRETAIL_CONFIG_DWORD_INFO(INTERNAL_DefaultStackSize, W(\"DefaultStackSize\"), 0, \"Stack size to use for new VM threads when thread is created with default stack size (dwStackSize == 0).\")\r\n```\r\n\r\n### Configuration\r\n\r\n* .NET 8 (SDK 8.0.100)\r\n* Windows 10 and Ubuntu 22 (64-bit)\r\n* x64 and AnyCPU (`Prefer 32-bit` is disabled)\r\n\r\n### Regression?\r\n\r\nYes, this is regression from .NET Framework where the default stack size was 4 MB for 64-bit applications.\r\nI expect 4 MB and this to work the same for the .NET Framework and .NET8+ on any OS, when building for x64 and AnyCPU platforms.\r\n\r\n### Data\r\n\r\n```csharp\r\n// This line of code will fail if you try to run .NET8 (AnyCPU/x64) application but will work for .NET Framework (x64)\r\nvar numbers = stackalloc byte[2 * 1024 * 1024];\r\n```\r\n### Analysis\r\n\r\nAn article about internals of threads:\r\nhttps://learn.microsoft.com/en-us/archive/blogs/markrussinovich/pushing-the-limits-of-windows-processes-and-threads\r\n\r\nCurrent .NET stack sizes:\r\n![image](https://github.com/dotnet/runtime/assets/26382228/f1e96ca2-3df1-4abf-9872-1af65e9a1a52)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfiPsPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vigjR",
                                           "createdAt":  "2023-12-28T16:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "cc @janvorli ",
                                           "updatedAt":  "2023-12-28T16:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vimwx",
                                           "createdAt":  "2023-12-28T16:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "AFAIR .NET 8 mostly defaults to the OS default stack sizes today, but I recall there being some talks in the past about having a guaranteed size for all platforms.\r\n\r\nIf you control the thread creation, you can change the stack limit in the managed code with the [Thread constructor](https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.-ctor?view=net-8.0#system-threading-thread-ctor(system-threading-parameterizedthreadstart-system-int32)).",
                                           "updatedAt":  "2023-12-28T16:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vinFl",
                                           "createdAt":  "2023-12-28T16:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQylBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LunarWhisper",
                                                                               "createdAt":  "2023-12-28T17:00:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-29T17:11:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e AFAIR .NET 8 mostly defaults to the OS default stack sizes today, but I recall there being some talks in the past about having a guaranteed size for all platforms.\r\n\u003e \r\n\u003e If you control the thread creation, you can change the stack limit in the managed code with the [Thread constructor](https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.-ctor?view=net-8.0#system-threading-thread-ctor(system-threading-parameterizedthreadstart-system-int32)).\r\n\r\n1.5MB is not a Windows OS default and you can\u0027t control it for the main thread (only via env vars).",
                                           "updatedAt":  "2023-12-28T16:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjAYh",
                                           "createdAt":  "2023-12-28T19:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e ```csharp\r\n\u003e // This line of code will fail if you try to run .NET8 (AnyCPU/x64) application but will work for .NET Framework (x64)\r\n\u003e var numbers = stackalloc byte[2 * 1024 * 1024];\r\n\u003e```\r\n\r\nSure, it might, but I hope you\u0027re not really trying to `stackalloc` a 2MB chunk?  If you need a chunk of memory that large, a memory pool is likely a better option.  Otherwise, it\u0027s trivial to find a number that would cause even the .NetF stack to overflow.",
                                           "updatedAt":  "2023-12-28T19:47:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjBMi",
                                           "createdAt":  "2023-12-28T19:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQylCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "LunarWhisper",
                                                                               "createdAt":  "2023-12-28T20:35:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-29T17:11:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Sure, it might, but I hope you\u0027re not really trying to `stackalloc` a 2MB chunk?\r\n\r\nit\u0027s not the only way to get an SO. We still have an open issue somwhere where Roslyn runs out of stack compiling a C# program. I think bumping main thread\u0027s default stack size AND/OR exposing DefaultStackSize option as a runtime-config/msbuild property does make sense.",
                                           "updatedAt":  "2023-12-28T19:55:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjBqQ",
                                           "createdAt":  "2023-12-28T19:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@jkotas do you happen to remember why we have opted for 1.5MB large main thread stack size for both 32 and 64 bit code instead of the 1MB / 4MB that .NET framework was using?",
                                           "updatedAt":  "2023-12-28T19:57:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjCxB",
                                           "createdAt":  "2023-12-28T20:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQuuKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LunarWhisper",
                                                                               "createdAt":  "2023-12-28T20:37:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e exposing DefaultStackSize option as a runtime-config/msbuild property\r\n\r\nThat would not work for the main thread - the main thread gets its stack size from the app .exe file header (Windows OS reads it from the PE file and sets it accordingly) and it is embedded in that header when we compile the dotnet.exe / apphost.exe. ",
                                           "updatedAt":  "2023-12-28T20:04:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjDR6",
                                           "createdAt":  "2023-12-28T20:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e exposing DefaultStackSize option as a runtime-config/msbuild property\r\n\u003e \r\n\u003e That would not work for the main thread - the main thread gets its stack size from the app .exe file header (Windows OS reads it from the PE file and sets it accordingly) and it is embedded in that header when we compile the dotnet.exe / apphost.exe.\r\n\r\nAh, good point",
                                           "updatedAt":  "2023-12-28T20:08:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjEVD",
                                           "createdAt":  "2023-12-28T20:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I still think that .NET should share a minimum of like 2MB or 4MB for all platforms.",
                                           "updatedAt":  "2023-12-28T20:15:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjUFp",
                                           "createdAt":  "2023-12-28T22:10:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODR7TSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2024-01-10T16:46:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e @jkotas do you happen to remember why we have opted for 1.5MB large main thread stack size for both 32 and 64 bit code\r\n\r\n`git blame` says that the 1.5MB value was introduced in https://github.com/dotnet/coreclr/pull/1144 as [a workaround for stackoverflows in debug builds of the runtime](https://github.com/dotnet/coreclr/pull/1144#issuecomment-139857908). It looks like completely accidental change. Prior to this change, we have been using the Windows native toolset default before that is 1MB.",
                                           "updatedAt":  "2023-12-28T22:10:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vjpfC",
                                           "createdAt":  "2023-12-28T23:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e It looks like completely accidental change\r\n\r\nSeems like it was the result of this suggestion:\r\nhttps://github.com/dotnet/coreclr/pull/1144#issuecomment-139857908",
                                           "updatedAt":  "2023-12-28T23:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Hpli",
                                           "createdAt":  "2024-02-16T10:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "@janvorli any news?\r\n\r\n\u003e The max stack size is a perf trade-off. The larger max stack size, the more (unused) memory is potentially committed to stacks. Growing max stack size is potentially replacing stack overflow with out of memory.\r\n\r\nIf there is no silver bullet, please give us the option to configure this via app.config/runtime.config/etc. per application because now this is the regression and there is no way to fix it in prod. :( \r\n",
                                           "updatedAt":  "2024-02-16T10:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50PmYk",
                                           "createdAt":  "2024-02-17T16:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZlvjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2024-03-06T11:55:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LunarWhisper",
                                                                               "createdAt":  "2024-03-06T17:17:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can workaround this for now by running `editbin.exe yourapp.exe /STACK:0x400000` on your app.\r\n\r\n`editbin` is part of C++ workload in Visual Studio. It is on a path like `C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\bin\\Hostx64\\x64\\editbin.exe`.",
                                           "updatedAt":  "2024-02-17T16:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52GYvF",
                                           "createdAt":  "2024-03-06T17:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "\u003e editbin.exe\r\n\r\n@jkotas unfortunately, this works in a very limited way:\r\n```\r\nWin: editbin.exe yourapp.exe /STACK:4194304  // 4mb\r\nWin: editbin.exe yourapp.dll /STACK:4194304  // 1.5mb\r\nLin: editbin.exe yourapp.dll /STACK:4194304  // 8mb\r\n```\r\nThis isn\u0027t quite the stack size control we expect. :)\r\n\r\n\u003e The max stack size is a perf trade-off.\r\nAlso, when developing multi-platform applications, we expect them to behave the same on each platform.\r\nYou don\u0027t need performance if your application crashes. Otherwise, this significantly increases the cost of testing.\r\n\r\nTherefore, the ability to explicitly specify the stack size of the main thread and threads in the thread pool is really necessary so that the application works the same, and we can use the AnyCPU platform (at least for now it is the default for all created projects in the IDE).",
                                           "updatedAt":  "2024-03-06T17:15:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Gtf5",
                                           "createdAt":  "2024-03-06T17:53:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZmPVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LunarWhisper",
                                                                               "createdAt":  "2024-03-06T18:13:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "If we enable the main thread stack size to be configurable, it will require your app to be launched via platform-specific apphost (ie `yourapp.exe` on Windows, `yourapp` on Linux). `dotnet yourapp.dll` won\u0027t work. This is OS limitation, outside of .NET runtime control. In other words, it would behave just like your test with editbin.\r\n\r\n\u003e at least for now it is the default for all created projects in the IDE\r\n\r\nThe current default for most projects is [Framework-dependent Executable](https://learn.microsoft.com/en-us/dotnet/core/deploying/deploy-with-cli#framework-dependent-executable). The build will produce the yourapp.exe on Windows, the Visual Studio debugger is going to use yourapp.exe to start you app, etc. (There is still yourapp.dll in the bin directory, but it is not meant to be the primary entrypoint for your app.)",
                                           "updatedAt":  "2024-03-06T17:53:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52G3d6",
                                           "createdAt":  "2024-03-06T18:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It is also worth noting that the editbin works for Windows binaries only. On Linux, you can influence the main thread stack size using the \"ulimit -s\" command before launching your executable.",
                                           "updatedAt":  "2024-03-06T18:16:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52G5zV",
                                           "createdAt":  "2024-03-06T18:22:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "\u003e `dotnet yourapp.dll` won\u0027t work\r\n\r\nIn this case, I hope that you can return the 4MB stack and make it the default for all configurations in Windows.\r\nIt seems to me that this is the minimum necessary to avoid catching errors in runtime after migrating from .NET Framework to .NET in enterprise solutions.\r\n\r\n\r\n\u003e It is also worth noting that the editbin works for Windows binaries only. On Linux, you can influence the main thread stack size using the \"ulimit -s\" command before launching your executable.\r\n\r\nWell, we haven\u0027t had to reduce the stack size yet, and 8 MB on Linux is definitely enough for us.\r\nThe main point of this Issue is that the behavior has changed relative to the .NET Framework, and this is very unexpected and leads to unpleasant bugs.",
                                           "updatedAt":  "2024-03-06T18:22:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52HHlV",
                                           "createdAt":  "2024-03-06T18:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I hope that you can return the 4MB stack and make it the default for all configurations in Windows.\r\n\r\nMaintaining bug-for-bug .NET Framework compatibility is not a strong argument at this point. There are number of scenarios where the stack consumption can be very different from how .NET Framework behaved. Also, we have 1.5MB default in .NET Core/5+ on Windows for close to 10 years and it worked fine so far. \r\n\r\nCould you please tell us more about what your app does that it is hitting the 1.5MB limit?\r\n\r\nWhy is the launching your app via platform specific `yourapp.exe` not an option for you? In general, launching your app via platform specific apphost (e.g. `yourapp.exe` )gives you better control over the exact behavior, and it is even required for some types of GUI apps. ",
                                           "updatedAt":  "2024-03-06T18:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-I-w8",
                                           "createdAt":  "2024-05-16T22:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "\u003e Could you please tell us more about what your app does that it is hitting the 1.5MB limit?\r\n\r\n@jkotas, as I said at the beginning:\r\n\r\n\u003e This resulted in a StackOverflowException in a RestAPI service using AutoMapper, custom serialization logic, and building dynamic methods.\r\n\r\nWe\u0027ve stopped using `AutoMapper`, we\u0027ve fixed the generation code, we\u0027ve changed a few recursive methods, and we\u0027ve fixed all issues we found. Unfortunately, this did not solve the problems that we are not aware of. Now all we have to do is intensively run regression tests and hope that the problems with which users come to support can be easily resolved.\r\n\r\n- or -\r\n\r\nCreate platform-specific wrappers with hard-wired limits to return the old behavior.\r\n\r\n**Expectations:** after changing the old version of the framework to a new one, and fixing the compatibility problems mentioned in the guides, we get a solution that works no worse than before.\r\n\r\nNow our expectations are different from reality. :(",
                                           "updatedAt":  "2024-05-16T22:05:09Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Migration from .NET Framework 4.7.2 to .NET 8 results in StackOverflowException due to reduced stack size",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97828",
        "createdAt":  "2024-01-19T18:18:08Z",
        "number":  97828,
        "author":  "kurt-mueller-osumc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_KSGA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NicolasBRERO",
                                            "createdAt":  "2024-01-24T14:03:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MikaStane",
                                            "createdAt":  "2024-01-24T14:04:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shad0w-jo4n",
                                            "createdAt":  "2024-01-30T18:31:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RobertWeaver",
                                            "createdAt":  "2024-02-18T09:44:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vmandic",
                                            "createdAt":  "2024-02-18T20:37:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brendonofficial",
                                            "createdAt":  "2024-03-14T11:53:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doniyorniazov",
                                            "createdAt":  "2024-07-06T10:08:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JuanuMusic",
                                            "createdAt":  "2024-08-04T02:03:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSharpFiasco",
                                            "createdAt":  "2024-09-25T13:47:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "molostovvs",
                                            "createdAt":  "2024-11-09T12:26:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "4n07h3r-0n3-3n61n33r",
                                            "createdAt":  "2025-02-17T12:59:02Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2024-09-12T16:57:00Z",
        "body":  "\u003c!--\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you\u0027re reporting the presence of an already disclosed security vulnerability, such as a CVE, you must follow the documented guidance on vulnerability reporting at https://github.com/dotnet/dotnet-docker/blob/main/documentation/vulnerability-reporting.md.\r\n\r\nIf you believe you have an issue that affects the security of .NET, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our bug bounty (https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\n\r\nFor other types of questions, consider posting to Discussions (https://github.com/dotnet/dotnet-docker/discussions) or Stack Overflow (https://stackoverflow.com).\r\n--\u003e\r\n\r\n### Describe the Bug\r\n\r\nSimilar to https://github.com/dotnet/dotnet-docker/issues/3338 and https://github.com/dotnet/runtime/issues/71856, trying to emulate the `linux/amd64` platform when building a docker image on an arm64 computer (i.e. Macbook) cause the build to hang when the `dotnet restore` command is ran.\r\n\r\n\u003c!-- A clear and concise description of what the bug is. --\u003e\r\n\r\n### Steps to Reproduce\r\n\r\n\u003c!--\r\nWe ❤ code! Include minimal steps to reproduce the problem if possible or point us to a simple repro project hosted in a GitHub repo.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate complex projects, so don\u0027t point us to such, please.\r\n- if we are not able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\n1. be on an arm64 machine (i.e. M1+ Mac)\r\n2. clone this repo: https://github.com/kurt-mueller-osumc/dotnet-amd64/tree/main\r\n3. run `docker build --platform linux/amd64 .`\r\n\r\nThis project source code is simply the default library template for the F# language.\r\n\r\n### Other Information\r\n\r\n\u003c!--\r\n* Please include any relevant error messages. If possible please include text rather than images (so it shows up in searches).\r\n* Does this issue consistently happen?  Include the conditions which cause the problem to occur.\r\n* Do you know of any workarounds?\r\n--\u003e\r\n\r\n### Output of `docker version`\r\n\r\n\u003c!-- Paste the output of `docker version` here. --\u003e\r\n\r\n```bash\r\n % docker version\r\nClient:\r\n Version:           24.0.7\r\n API version:       1.43\r\n Go version:        go1.20.10\r\n Git commit:        afdd53b\r\n Built:             Thu Oct 26 09:04:20 2023\r\n OS/Arch:           darwin/arm64\r\n Context:           desktop-linux\r\n\r\nServer: Docker Desktop 4.26.1 (131620)\r\n Engine:\r\n  Version:          24.0.7\r\n  API version:      1.43 (minimum version 1.12)\r\n  Go version:       go1.20.10\r\n  Git commit:       311b9ff\r\n  Built:            Thu Oct 26 09:08:15 2023\r\n  OS/Arch:          linux/arm64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.6.25\r\n  GitCommit:        d8f198a4ed8892c764191ef7b3b06d8a2eeb5c7f\r\n runc:\r\n  Version:          1.1.10\r\n  GitCommit:        v1.1.10-0-g18a0cb0\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n### Output of `docker info`\r\n\r\n\u003c!-- Paste the output of `docker info` here. --\u003e\r\n\r\n```bash\r\n% docker info\r\nClient:\r\n Version:    24.0.7\r\n Context:    desktop-linux\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.12.0-desktop.2\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.23.3-desktop.2\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-compose\r\n  dev: Docker Dev Environments (Docker Inc.)\r\n    Version:  v0.1.0\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-dev\r\n  extension: Manages Docker extensions (Docker Inc.)\r\n    Version:  v0.2.21\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-extension\r\n  feedback: Provide feedback, right in your terminal! (Docker Inc.)\r\n    Version:  0.1\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-feedback\r\n  init: Creates Docker-related starter files for your project (Docker Inc.)\r\n    Version:  v0.1.0-beta.10\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-init\r\n  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc.)\r\n    Version:  0.6.0\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-sbom\r\n  scan: Docker Scan (Docker Inc.)\r\n    Version:  v0.26.0\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-scan\r\n  scout: Docker Scout (Docker Inc.)\r\n    Version:  v1.2.0\r\n    Path:     /Users/mueller.128/.docker/cli-plugins/docker-scout\r\n\r\nServer:\r\n Containers: 11\r\n  Running: 11\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 75\r\n Server Version: 24.0.7\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: d8f198a4ed8892c764191ef7b3b06d8a2eeb5c7f\r\n runc version: v1.1.10-0-g18a0cb0\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: unconfined\r\n  cgroupns\r\n Kernel Version: 6.5.11-linuxkit\r\n Operating System: Docker Desktop\r\n OSType: linux\r\n Architecture: aarch64\r\n CPUs: 10\r\n Total Memory: 15.61GiB\r\n Name: docker-desktop\r\n ID: 236917cb-3681-48c7-97bb-b29239632267\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n HTTP Proxy: http.docker.internal:3128\r\n HTTPS Proxy: http.docker.internal:3128\r\n No Proxy: hubproxy.docker.internal\r\n Experimental: false\r\n Insecure Registries:\r\n  hubproxy.docker.internal:5555\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: daemon is not using the default seccomp profile\r\n```\r\n\r\n\u003c!-- Thanks for taking the time to report this! --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi-FVzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yjffO",
                                           "createdAt":  "2024-01-19T19:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "See this post: https://devblogs.microsoft.com/dotnet/improving-multiplatform-container-support/\r\n\r\nThere are two options:\r\n\r\n- Adopt the guidance in that post (e.g. use `$BUILDPLATFORM`)\r\n- Use Rosetta emulation\r\n",
                                           "updatedAt":  "2024-01-19T19:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yjffS",
                                           "createdAt":  "2024-01-30T18:38:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shad0w-jo4n",
                                           "body":  "@richlander Rosetta emulation doesn\u0027t work. After a long wait, it\u0027s shutdown with that:\r\n\r\n```\r\nassertion failed [block != nullptr]: BasicBlock requested for unrecognized address\r\n(BuilderBase.h:550 block_for_offset)\r\n```\r\n\r\nand exit code: 133",
                                           "updatedAt":  "2024-01-30T18:38:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yjffY",
                                           "createdAt":  "2024-01-30T18:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Did you consider the `$BUILDPLATFORM` approach?",
                                           "updatedAt":  "2024-01-30T18:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yjffd",
                                           "createdAt":  "2024-01-30T18:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpv6sQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2024-01-30T18:48:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daneb",
                                                                               "createdAt":  "2024-07-15T09:48:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "shad0w-jo4n",
                                           "body":  "@richlander That\u0027s works fine. But Rosetta\u0027s behaviour is very strange here.",
                                           "updatedAt":  "2024-01-30T18:47:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yjffh",
                                           "createdAt":  "2024-02-01T18:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Got it. Let\u0027s transfer this issue to dotnet/runtime.",
                                           "updatedAt":  "2024-02-01T18:01:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yjiOJ",
                                           "createdAt":  "2024-02-01T18:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzjPNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "greaterking",
                                                                               "createdAt":  "2024-04-05T14:26:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macalbert",
                                                                               "createdAt":  "2024-05-28T10:05:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CSharpFiasco",
                                                                               "createdAt":  "2024-09-25T14:20:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "kurt-mueller-osumc",
                                           "body":  "Hey @richlander, thanks for the link to that post. I\u0027ll read it and try to adopt my approach to utilize best practices.\r\n\r\nFor me, the problem is that official microsoft images like https://hub.docker.com/_/microsoft-azure-functions-dotnet-isolated are linux/amd64 only... and the only way I know how to get this docker image working on my M1 Macbook is using rosetta emulation.\r\n\r\nBut then that causes `dotnet restore` to hang indefinitely unless I set the following environment variable to false:\r\n\r\n```Dockerfile\r\nENV DOTNET_EnableWriteXorExecute=0\r\n```",
                                           "updatedAt":  "2024-02-01T18:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zFkHI",
                                           "createdAt":  "2024-02-06T22:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NikolaMilosavljevic",
                                           "body":  "[Triage] This doesn\u0027t seem like .NET setup issue. @richlander do you have a suggestion for who should take a look?",
                                           "updatedAt":  "2024-02-06T22:11:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zz62O",
                                           "createdAt":  "2024-02-14T02:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gsingh737",
                                           "body":  "Did you guys got it work. I am having similar problem. \r\n\r\n```\r\nFROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build\r\nARG TARGETARCH\r\nWORKDIR /source\r\n\r\nCOPY certs/. /usr/local/share/ca-certificates/\r\nRUN update-ca-certificates\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj .\r\nRUN dotnet restore  -a $TARGETARCH\r\n\r\n# copy and publish app and libraries\r\nCOPY . .\r\nRUN dotnet publish --no-restore -a $TARGETARCH -o /app\r\n\r\n\r\n# Enable globalization and time zones:\r\n# https://github.com/dotnet/dotnet-docker/blob/main/samples/enable-globalization.md\r\n# final stage/image\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine\r\nEXPOSE 5000\r\nENV ASPNETCORE_URLS=http://+:5000 \r\nWORKDIR /app\r\nCOPY --from=build /app .\r\nCOPY certs/. /usr/local/share/ca-certificates/\r\nRUN apk --no-cache add ca-certificates \u0026\u0026 \\\r\n    update-ca-certificates\r\n\r\n# Uncomment to enable non-root user\r\n# USER $APP_UID\r\nENTRYPOINT [\"./PropertyStandardsAPI\"]\r\n```\r\n\r\nI build it using buildctl/buildkit \r\nIt is stuck on restore\r\n\r\n```\r\n#9 [internal] load build context\r\n#9 transferring context: 36.64kB 0.0s done\r\n#9 DONE 0.3s\r\n\r\n#11 [build 3/8] COPY certs/. /usr/local/share/ca-certificates/\r\n#11 CACHED\r\n\r\n#12 [build 4/8] RUN update-ca-certificates\r\n#12 CACHED\r\n\r\n#13 [build 5/8] COPY *.csproj .\r\n#13 CACHED\r\n\r\n#14 [build 6/8] RUN dotnet restore -a amd64\r\n#14 2.956   Determining projects to restore...\r\n```\r\nIt runs fine locally on Ubuntu machine, \r\nbut not in Redhat machine (Red Hat Enterprise Linux release 8.2 (Ootpa))\r\n\r\n",
                                           "updatedAt":  "2024-02-14T02:28:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z0Z9S",
                                           "createdAt":  "2024-02-14T05:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I just tried our sample w/o issue on macOS Arm64 w/Rosetta emulation enabled.\r\n\r\nI used `--platform linux/amd64` as it appears you did, too.\r\n\r\nCan you share a project file so that I can test that? Are you reliant on any authorized feeds?",
                                           "updatedAt":  "2024-02-14T05:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51MXVs",
                                           "createdAt":  "2024-02-27T09:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "puddlewitt",
                                           "body":  "I appear to have the same issue..\r\n\r\nM1\r\nSonoma 14.3.1\r\nDocker 4.27.2 (with rosetta enabled)\r\n\r\n![image](https://github.com/dotnet/runtime/assets/2998294/6f1e1067-d926-4eeb-88d1-b55b7a91265c)\r\n![image](https://github.com/dotnet/runtime/assets/2998294/085988f3-b96b-44ad-a296-0196b15922cd)\r\n\r\nWhen I download the dotnet binaries (x64) and execute them (without docker and with rosetta) they run without issue. Given this I guess this is some kind of docker + rosetta issue.",
                                           "updatedAt":  "2024-02-27T09:53:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51OlAZ",
                                           "createdAt":  "2024-02-27T15:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kurt-mueller-osumc",
                                           "body":  "\u003e I just tried our sample w/o issue on macOS Arm64 w/Rosetta emulation enabled.\r\n\u003e \r\n\u003e I used `--platform linux/amd64` as it appears you did, too.\r\n\u003e \r\n\u003e Can you share a project file so that I can test that? Are you reliant on any authorized feeds?\r\n\r\n@richlander I have a simple project here that fails when running `dotnet restore`:\r\n\r\nhttps://github.com/kurt-mueller-osumc/dotnet-amd64",
                                           "updatedAt":  "2024-02-27T15:04:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52zvSM",
                                           "createdAt":  "2024-03-13T03:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtFSbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brendonofficial",
                                                                               "createdAt":  "2024-03-14T11:56:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doniyorniazov",
                                                                               "createdAt":  "2024-03-30T12:26:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seanamos",
                                                                               "createdAt":  "2024-04-04T22:37:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tsybikzhapov",
                                                                               "createdAt":  "2024-08-07T07:58:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "vorou",
                                           "body":  "\u003e [kurt-mueller-osumc/dotnet-amd64](https://github.com/kurt-mueller-osumc/dotnet-amd64)\r\n\r\nhangs for me too on M2\r\n\r\n\u003cimg width=\"1160\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/3007167/78c6ad38-5f76-4b26-abb0-38707c9aaa92\"\u003e\r\n",
                                           "updatedAt":  "2024-03-13T03:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc544fyH",
                                           "createdAt":  "2024-03-30T13:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKeNNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "greaterking",
                                                                               "createdAt":  "2024-04-05T14:26:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GordonSo",
                                                                               "createdAt":  "2024-04-18T19:20:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "GordonSo",
                                                                               "createdAt":  "2024-04-19T12:14:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macalbert",
                                                                               "createdAt":  "2024-05-28T10:04:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maitrungduc1410",
                                                                               "createdAt":  "2024-07-01T16:12:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "maitrungduc1410",
                                                                               "createdAt":  "2024-07-01T16:12:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "maitrungduc1410",
                                                                               "createdAt":  "2024-07-01T16:12:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "maitrungduc1410",
                                                                               "createdAt":  "2024-07-01T16:12:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SebastianKuesters",
                                                                               "createdAt":  "2024-07-11T06:49:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daneb",
                                                                               "createdAt":  "2024-07-15T09:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "phillijw",
                                                                               "createdAt":  "2024-09-27T20:48:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "facuescobar",
                                                                               "createdAt":  "2024-10-02T17:26:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "facuescobar",
                                                                               "createdAt":  "2024-10-02T17:26:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bobby-myob",
                                                                               "createdAt":  "2025-03-19T04:41:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "doniyorniazov",
                                           "body":  "Finally! I was able to fix this restore issue.\r\n\r\n### Machine specs\r\nMacbook Pro M1 Pro chip\r\nSonoma 14.3.1\r\nDocker 4.28.0 (139021)\r\n✅ Use Rosetta for x86_64/amd64 emulation on Apple Silicon\r\n\r\nI tried to build my docker image initially in default platform, it stuck in `dotnet restore` step but I need to build in linux/amd64 because Azure resource that I use to run my container doesn\u0027t support linux/arm64. Then I tried to build it in linux/amd64 but still `dotnet restore` was stuck. Then after reading multiple issues I\u0027ve tried adding `ENV DOTNET_EnableWriteXorExecute=0` and that fixed the issue.\r\n\r\nAnd here is my final Dockerfile\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:8.0 as build-env\r\nENV DOTNET_EnableWriteXorExecute=0 #Needed to add this line\r\nWORKDIR /src\r\n\r\nCOPY *.csproj .\r\nRUN dotnet restore CommandsService.csproj\r\n\r\nCOPY . ./\r\n# Build and publish a release\r\nRUN dotnet publish -c Release -o output\r\n\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0\r\nWORKDIR /app\r\nCOPY --from=build-env /src/output .\r\nENTRYPOINT [\"dotnet\", \"CommandsService.dll\"]\r\n```\r\n\r\nI didn\u0027t specify --platform because I\u0027ve set `DOCKER_DEFAULT_PLATFORM=linux/amd64` environment variable on my mac with M1 Pro chip.\r\n\r\nBut it seems wether you are building in `linux/amd64` or default `linux/arm64` you must set `ENV DOTNET_EnableWriteXorExecute=0` on your Dockerfile to be able to restore. It took 3-4 minutes on my case to restore so you need to be patient. \r\n ",
                                           "updatedAt":  "2024-03-30T13:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc544i7N",
                                           "createdAt":  "2024-03-30T14:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzBy7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "GordonSo",
                                                                               "createdAt":  "2024-04-19T12:14:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Kilowhisky",
                                                                               "createdAt":  "2024-07-05T17:32:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "deleteLater",
                                                                               "createdAt":  "2024-09-20T14:24:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "richlander",
                                           "body":  "It should go much faster if you follow this pattern.\r\n\r\nhttps://github.com/dotnet/dotnet-docker/blob/main/samples/aspnetapp/Dockerfile\r\n\r\nhttps://devblogs.microsoft.com/dotnet/improving-multiplatform-container-support/",
                                           "updatedAt":  "2024-03-30T14:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ADuJL",
                                           "createdAt":  "2024-06-04T21:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "douglasg14b",
                                           "body":  "A potential workaround is to remove the `--platform` flag and specify the runtime specifically, as others have found sucess with in this thread: https://github.com/dotnet/dotnet-docker/issues/4225\r\n\r\nThis has been an ongoing issue unfortunately... And none of the answers to the dozens and dozens of github issues for this topic (Or the blog post) seem to work for any of my coworkers on Apple silicon (Who have been affected for nearly a year now)",
                                           "updatedAt":  "2024-06-04T21:39:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ADvVR",
                                           "createdAt":  "2024-06-04T21:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkj0FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "douglasg14b",
                                                                               "createdAt":  "2024-06-04T21:46:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "richlander",
                                           "body":  "This specific comment is our guidance: https://github.com/dotnet/dotnet-docker/issues/4225#issuecomment-1733815253",
                                           "updatedAt":  "2024-06-04T21:43:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AD2Hk",
                                           "createdAt":  "2024-06-04T22:06:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Sorry. I misread what you said. Too much in a rush.\r\n\r\nCan you tell me more about your workaround?",
                                           "updatedAt":  "2024-06-04T22:06:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fj_hi",
                                           "createdAt":  "2024-07-20T00:47:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODz0BdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aytsemik",
                                                                               "createdAt":  "2024-09-27T08:20:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halilbulentorhon",
                                           "body":  "I had the same problem this solved my problem\r\nDockerfile:\r\n\r\n```\r\nFROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0 AS build\r\nARG TARGETARCH\r\nWORKDIR /app\r\n\r\nCOPY *.csproj ./\r\nENV DOTNET_NUGET_SIGNATURE_VERIFICATION=false\r\nRUN dotnet restore -a $TARGETARCH\r\n\r\nCOPY . .\r\nRUN dotnet publish -c Release -o out -a $TARGETARCH\r\n\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime\r\nWORKDIR /app\r\nCOPY --from=build /app/out ./\r\n\r\nEXPOSE 5241\r\nENTRYPOINT [\"dotnet\", \"AuthAPI.dll\"]\r\n```\r\n\r\nTo get a build you can just use the **--platform** argument in docker build. To build an image for linux/amd64 just use the following build command:\r\n```\r\ndocker build --platform linux/amd64 .\r\n```",
                                           "updatedAt":  "2024-07-20T00:47:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GbmE3",
                                           "createdAt":  "2024-07-29T08:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PrincessLunaOfficial",
                                           "body":  "Had the same problem few moths ago, and I managed get it working just with\r\n`docker build --platform linux/amd64 .`\r\n\r\nFor some reason today it refused to work\r\nAdding DOTNET_EnableWriteXorExecute=0 solved the issue",
                                           "updatedAt":  "2024-07-29T08:59:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L4VXN",
                                           "createdAt":  "2024-09-12T16:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5YD5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matemango",
                                                                               "createdAt":  "2024-11-04T19:22:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Gonkers",
                                           "body":  "Dotnet docker building is totally broken on my m2 mac, I don\u0027t know what\u0027s going on. I have tried the solutions listed above, but nothing works.\r\n\r\n\r\n```shell\r\ndocker system prune --all --force\r\nmkdir docker-test \u0026\u0026 cd docker-test\r\ncurl https://raw.githubusercontent.com/dotnet/dotnet-docker/main/samples/aspnetapp/Dockerfile -o Dockerfile\r\nnew webapp -n aspnetapp\r\ndocker build --platform linux/amd64 -t app .\r\n```\r\nAnd it just hangs forever....\r\n```\r\n =\u003e [build 3/6] COPY aspnetapp/*.csproj .                                                             0.0s\r\n =\u003e [build 4/6] RUN dotnet restore -a amd64                                                          98.6s\r\n =\u003e =\u003e #   Determining projects to restore...\r\n =\u003e [stage-1 2/3] WORKDIR /app                                                                        0.1s\r\n```\r\n```\r\n ~/src/docker-test❯uname -a\r\nDarwin CNHI-KTY020666V-macOS 23.6.0 Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020 arm64\r\n```",
                                           "updatedAt":  "2024-09-12T16:57:00Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  ".NET8 docker build stuck on dotnet restore",
        "labels":  [
                       "bug",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97316",
        "createdAt":  "2024-01-22T15:01:40Z",
        "number":  97316,
        "author":  "loop-evgeny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6zFkw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryan-morris",
                                            "createdAt":  "2024-02-02T15:17:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmxl",
                                            "createdAt":  "2024-07-09T19:44:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielschilling-ml",
                                            "createdAt":  "2024-09-05T17:43:30Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-04-02T21:59:15Z",
        "body":  "### Description\n\nWe have many instances of our ASP.NET Core application for different customers, each running as a systemd service. One specific instance has crashed twice with \"Fatal error. Failed to create RW mapping for RX memory\".\r\n\r\nThe last time was on 2023-Nov-30, so this doesn\u0027t happen often. It may be because this instance of the application is particularly large, using ~300 GB RAM while loading a lot of data (once per day) and ~50 GB at other times.\n\n### Reproduction Steps\n\nNot reproducible. Happened 2 times so far.\n\n### Expected behavior\n\nNo crash\n\n### Actual behavior\n\nCrash with the systemd journal containing:\r\n\r\n```\r\nFatal error. Failed to create RW mapping for RX memory\r\n   at DynamicClass.InvokeStub_ItemCollection`1..ctor(System.Object, System.Span`1\u003cSystem.Object\u003e)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.RuntimeType.CreateInstanceImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n... (our code here - can provide full stack privately if needed) ...\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions+ReflectionMiddlewareBinder+\u003c\u003ec__DisplayClass6_0.\u003cCreateMiddleware\u003eb__0(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\nMain process exited, code=killed, status=6/ABRT\r\n```\r\n\r\n(I don\u0027t have the stack trace from the first crash, unfortunately.)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8.0.0 x64, self-contained application\r\nUbuntu 22.04.3 this (second) time, Ubuntu 18.04.6 the first time\r\nRunning as a systemd service\r\nThe machine has 1TB RAM, but only ~36% of it was used at the time of the crash.\n\n### Other information\n\nThe only reference I can find to this error is in https://github.com/dotnet/runtime/issues/80580\r\nThe [last comment](https://github.com/dotnet/runtime/issues/80580#issuecomment-1410942438) there includes code to reproduce it by creating many dynamic assemblies, but that code runs successfully for me on the same machine (as well as other machines), both on .NET 8 and .NET 6. We do create some dynamic assemblies via `CSharpCompilation.Emit()` but I don\u0027t think we create thousands of them (but even if we did I would not expect .NET to crash like that).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpVVCmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xf6b0",
                                           "createdAt":  "2024-01-22T15:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "I know this isn\u0027t much info to go on. I\u0027ve installed `systemd-coredump` on the server now to try to get a crash dump next time, though I don\u0027t know if it will cope with a 300 GB dump!",
                                           "updatedAt":  "2024-01-22T15:02:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xf6t5",
                                           "createdAt":  "2024-01-22T15:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "@janvorli",
                                           "updatedAt":  "2024-01-22T15:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xgfg1",
                                           "createdAt":  "2024-01-22T16:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@loop-evgeny this error occurs when `mmap` fails to create a read-write mapping for an existing read-execute, which means an out of memory or out of maximum allowed number of memory mappings. Since you mentioned that you were not running in a container (like a docker) and that your machine still had a plenty of available memory, my guess is that the problem is likely exceeding of the allowed memory mappings limit. The limit can be raised using the vm.max_map_count setting. You can check your current one by `cat /proc/sys/vm/max_map_count`.",
                                           "updatedAt":  "2024-01-22T16:16:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xguzK",
                                           "createdAt":  "2024-01-22T16:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "@janvorli I see, thanks for the explanation. Correct, we\u0027re not running in a container.\r\n\r\nThis is a rather cryptic error message, so would be nice to include in the message what you wrote here, like \"Failed to create RW mapping for RX memory. This may be caused by running out of memory or out of memory mappings - check the vm.max_map_count setting on Linux or (whatever) on Windows\". But it seems like we\u0027re only the second ones to run into it.\r\n\r\nWe haven\u0027t changed max_map_count, so it\u0027s at the default value of 65530. But is there a downside to increasing this? Why is there even a limit?",
                                           "updatedAt":  "2024-01-22T16:49:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xgxQ8",
                                           "createdAt":  "2024-01-22T16:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "I checked the `/proc/PID/maps` file for the process and it currently has 19408 lines, which is much higher than other instances of our application, even large ones. That\u0027s under normal usage, so I think your hunch is right and during the daily data loading it may well go over 65530, but I\u0027ll add monitoring to check that.",
                                           "updatedAt":  "2024-01-22T16:55:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xhEP4",
                                           "createdAt":  "2024-01-22T17:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e But is there a downside to increasing this?\r\n\r\nThere is no downside. The setting has no effect on applications that use less mappings and enables proper execution of applications that use more. ",
                                           "updatedAt":  "2024-01-22T17:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yI5_M",
                                           "createdAt":  "2024-01-29T15:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "I\u0027ve been monitoring the count of maps for that process for a week now and while it hasn\u0027t gone over 65K yet, it is steadily increasing. RAM usage goes up during the daily data loading (smaller than usual last week), then down again, but the number of memory map areas does not go down signficantly. It started around 19K a week ago and is now at 32K. Can there be a \"leak\" in that somehow - without an obvious memory leak?",
                                           "updatedAt":  "2024-01-29T15:31:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y1SpI",
                                           "createdAt":  "2024-02-05T09:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "We finally had a few days where memory usage went \u003e 300 GB and the number of maps went over 80K. It then went down together with RAM usage, to ~34K. So it seems like there is no \"leak\" and increasing `vm.max_map_count` fixed this for us.\r\n\r\nIt would be good if the error message explained what the likely problem is, though. There is no way the average developer troubleshooting a crash will know that \"Failed to create RW mapping for RX memory\" means \"Either you\u0027re out of memory or you need to increase vm.max_map_count\".",
                                           "updatedAt":  "2024-02-05T09:39:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zkJiN",
                                           "createdAt":  "2024-02-12T15:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWao3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2024-02-12T15:10:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e It would be good if the error message explained what the likely problem is, though. There is no way the average developer troubleshooting a crash will know that \"Failed to create RW mapping for RX memory\" means \"Either you\u0027re out of memory or you need to increase vm.max_map_count\".\r\n\r\n@loop-evgeny thank you for the suggestion, that makes sense. When I have added that error message, I didn\u0027t realize that the max map count can be also causing the issue. I\u0027ll update the message along the lines of what you\u0027ve suggested.",
                                           "updatedAt":  "2024-02-12T15:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5957rO",
                                           "createdAt":  "2024-05-15T11:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 @janvorli \r\n\r\nWe do think there is a change with how .net 8 allocates/uses process memory. This could \"by design\": then the change in behavior was breaking that required a notice.\r\n\r\nReproducing should be fairly easy: run 2 processes (one in .net 7 and another .net 8) in a stress test environment allocating managed and unmanaged memory and recording proc/self/maps (VAS) counts, then compare if there is a significant difference.\r\nHave your team done that?\r\n\r\nOur environment:\r\n- A large fleet of small and large .NET containerized processes, some are 300 GB+ large in Ubuntu 20.04..\r\n- The larger footprint processes started experiencing \"Failed to create RW mapping for RX memory\" and \"Out of memory\" crashes with plenty of RAM still available, coincidentally after migrating to .net 8 framework.\r\n- Due to .net 7 GC [segfault](https://github.com/dotnet/runtime/issues/86183) issue we used to run .net 7 processes with .net 6 GC turned on. For .net 8 we had successfully switched to the native .net 8 GC, but then this new issue appeared.\r\n- Fortunately there was a workaround of increasing **vm.max_map_count** to a 4x default value totaliing 260,000. That ended both types of crashes but we were not confident that the value had to be customized based on the vm instance size so that there is no impact for smaller servers. That would introduce another level of complexity.\r\n\r\nTo illustrate the crash pattern after .net 8 upgrade and before **vm.max_map_count** increase:\r\n![image](https://github.com/dotnet/runtime/assets/22180333/9ca7e7d3-e09a-4e27-a02f-90bb0b2e00df)\r\n\r\nWe will provide more information as deemed necessary and also going to do a comparison stress test run.\r\n",
                                           "updatedAt":  "2024-05-15T11:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc596G4N",
                                           "createdAt":  "2024-05-15T12:23:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@baal2000 the growth in number of memory mappings between the .net 7 and 8 is significant only if there is a large amount of managed code being generated on the fly. We have never hit this in our internal testing as it requires quite specific behavior of the application. I agree that we should document somewhere that when you experience issue like this, the vm.max_map_count needs to be updated. The value can be set to any large value, enlarging it doesn\u0027t result in any additional growth in memory consumption other than one related to the needed growth of the number of mappings required by .NET. So, you don\u0027t really need to figure out some optimal value, you can e.g. set it to 100 times the default and be good.",
                                           "updatedAt":  "2024-05-15T12:23:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc596ZZS",
                                           "createdAt":  "2024-05-15T13:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli \r\n\u003e We have never hit this in our internal testing\r\n\r\nHave the team profiled proc/self/maps counts? We do not necesserily need to \"hit\" an issue.\r\n\r\n\u003e requires quite specific behavior of the application\r\n\r\nCould you elaborate and point to a specific area inside the framework that now allocates differently than under the old framework?\r\n\r\n",
                                           "updatedAt":  "2024-05-15T13:02:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc596qJr",
                                           "createdAt":  "2024-05-15T13:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e Have the team profiled proc/self/maps counts? We do not necesserily need to \"hit\" an issue.\r\n\r\nWe have not, but the high count is not necessarily a problem per se, so we had no reason to do that. And we were not aware of the relatively low default limit value, which would probably made us consider this being a problem until people reported it in this issue.\r\n\r\n\u003e Could you elaborate and point to a specific area inside the framework that now allocates differently than under the old framework?\r\n\r\nThe write xor execute feature to prevent code memory being executable and writeable at the same time was caused the difference in the memory mapping pattern.  There are several kinds of small stubs that are created for methods that are called by managed code, but were not compiled / resolved yet and for call counting to allow us dynamically re-jit methods on hot paths with more optimizations (this is called tiered compilation). The memory for these stubs is allocated as pairs of blocks of memory, one read-execute for the code of the stubs and one read-write for the writeable data of the stubs.  This is what causes the large number of mappings in case of a lot of methods, because these blocks are effectively interleaved in memory, so, each of them requires a separate memory mapping. These blocks are 16kB long. So e.g. for FixupPrecode stubs, each stub is 24 bytes long, so stubs for 682 methods fit into one pair of blocks. The call counting stubs 32 bytes long so 512 method stubs fit into each block.\r\n",
                                           "updatedAt":  "2024-05-15T13:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc598sZ5",
                                           "createdAt":  "2024-05-15T17:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli \r\nThe tiered compilation is not a new thing: is the behavior now different due to tiered PGO? I tried to turn it off and there was no difference. \r\n\r\n- Is there a switch that turns into the legacy behavior?\r\n- The counts are much higher for larger heap processes than for smaller even if they do the same kinds of processing. Is it expected to see a difference in how much of the memory mapping the dynamic JIT reqires in high/low heap size environments? \r\n- An illustration of the difference between .net 8 and 7 on one of our test servers. \r\n![image](https://github.com/dotnet/runtime/assets/22180333/02a4f442-f03a-460b-b7e1-dda52b705225)\r\n\r\n",
                                           "updatedAt":  "2024-05-15T18:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc599Aey",
                                           "createdAt":  "2024-05-15T18:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@baal2000 the write xor execute can be turned off by setting the env var DOTNET_EnableWriteXorExecute=0. \r\nAs for the tiered compilation, I was talking about the stubs. They were originally allocated from continuous read-write-execute mapped memory and those blocks tended up to be coalesced in the virtual memory, thus using much smaller number of mappings.\r\n\r\n\r\n\u003e The counts are much higher for larger heap processes than for smaller even if they do the same kinds of processing.\r\n\r\nThen it is probably not related to the write xor execute and the stubs I was talking about. Could you share a smap of a process with a large number of mappings? That could shed some light on the problem.",
                                           "updatedAt":  "2024-05-15T18:06:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc599C1-",
                                           "createdAt":  "2024-05-15T18:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli \r\n\u003e Could you share a smap of a process with a large number of mappings\r\n\r\n/proc/PID/smaps file?\r\n",
                                           "updatedAt":  "2024-05-15T18:12:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc599D7f",
                                           "createdAt":  "2024-05-15T18:15:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODh8Qkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baal2000",
                                                                               "createdAt":  "2024-05-15T20:20:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Yes, please. Please feel free to trim any filenames from it in case they are sensitive.",
                                           "updatedAt":  "2024-05-15T18:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59--sc",
                                           "createdAt":  "2024-05-15T23:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli \r\n\r\n`DOTNET_EnableWriteXorExecute=0` didn\u0027t make any difference therefore it is not related to `write xor execute`.\r\n\r\nOn another hand, as mentioned in my first message due to .net 7 GC [segfault](https://github.com/dotnet/runtime/issues/86183) issue we configured .net 7 with  `COMPlus_GCName=libclrgc.so`. I just tried the same to .net 8 process and the result was lower, stable maps count:\r\n![image](https://github.com/dotnet/runtime/assets/22180333/8b0d899c-5d9f-4302-8030-e12775f4ece7)\r\n\r\n**Update:**\r\nWe have provided /proc/PID/smaps files for both regular .net 8 and .net 8 + .net 6 GC processes that match the count differences above.",
                                           "updatedAt":  "2024-05-16T03:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_kgzT",
                                           "createdAt":  "2024-05-30T17:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj_KGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2024-05-31T07:00:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "In the meanwhile, @baal2000 has shared with me some smaps / maps logs. I was surprised to see that there are many mappings that are adjacent in the virtual address space, that have the same protection and all flags and yet the kernel has not merged them. All of them were multiple of 4MB large. \r\n@baal2000 also provided logs from running with the libclrgc.so set as the GC. Those didn\u0027t have this problem and the number of mappings was much smaller.\r\nIt turns out that 4MB is the default size of a GC region. GC regions were newly introduced in .NET 8 and the libclrgc.so has the same GC, but with the regions disabled.\r\nI have tried to repro the issue locally by mimicking how GC reserves and commits virtual memory. It first maps a very large area of virtual memory with PROT_NONE protection and then as is needs more memory, it changes a protection of memory pages in this range to PROT_READ | PROT_WRITE. First, I was unable to repro it, but then @cshung reminded me that when server GC is used, each CPU in the process would have its own set of GC regions. In @baal2000 case there were 96 CPUs, so there were very many regions. When I have modified my simple C repro app to run the protection changing on multiple threads, assigning each thread a 4MB memory range and changing a protection of the pages in it page by page AND touching the content of those pages, I was able to reproduce the issue.\r\nThe problem seems to be that there is a race condition in the Linux kernel that prevents merging of adjacent mappings when two threads are changing their protection at the same time. In my repro, the merging at the boundary of the 4MB regions sometimes succeeded and sometimes it didn\u0027t. So, I could see adjacent blocks of 4MB, 8MB, 12MB and sometimes even larger multiples of 4MB.\r\nI don\u0027t know if that\u0027s fixable in the Linux kernel without introducing performance issues due to some extra synchronization that would probably be needed there. I don\u0027t also see a reasonable way for working around that in the .NET GC without a performance hit.\r\nIn @baal2000 case, @cshung has suggested trying to set the default GC region size to 16MB, which would reduce the number of adjacent mappings that can possibly get created by 4 times. And that really helped, @baal2000 has reported that the number of mappings was no more growing until the OOM, but rather got capped slightly below 20000.\r\nI believe that just bumping the max number of mappings to 4 times that value (just a guess, might need more) would also let it be stable. Even with having more mappings, I would not expect observable performance difference in the app performance, as Linux kernel would likely use some O(log(n)) algorithm to look up the mappings.\r\n",
                                           "updatedAt":  "2024-05-30T17:01:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_klTT",
                                           "createdAt":  "2024-05-30T17:06:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027ve forgotten to mention how to set the GC region size to 16MB. Setting the `DOTNET_GCRegionSize` env variable to `1000000` does the trick. The `1000000` is 16MB in hexadecimal. It can be also prefixed by `0x`, it doesn\u0027t matter though as it is always hexadecimal.",
                                           "updatedAt":  "2024-05-30T17:06:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_onF0",
                                           "createdAt":  "2024-05-31T07:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Is increasing GC region size worth doing for us as well? We haven\u0027t hit the issue since increasing ` vm.max_map_count`.",
                                           "updatedAt":  "2024-05-31T07:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_rPaD",
                                           "createdAt":  "2024-05-31T12:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkCdXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2024-05-31T13:51:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@loop-evgeny it would be best if you\u0027d tried that with your app and based your decision on the real world perf results of it. We don\u0027t have any data on performance differences with different GC region sizes. My expectations would be that there would be no measurable difference, however it is always better to measure using the specific scenario to see what works best for you. And if you try that, please let us know about the results, as many people would benefit from that.",
                                           "updatedAt":  "2024-05-31T12:46:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_rZdV",
                                           "createdAt":  "2024-05-31T12:58:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkCdaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2024-05-31T13:51:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@loop-evgeny \r\nAs @janvorli said, try for yourself: this is a safe change to make. We have tried the next possible GC region size of 8MB `DOTNET_GCRegionSize=0x1000000` on a 600 GB/96 cores single process VM and the RAM usage with the GC heap patterns have changed: \r\n![image](https://github.com/dotnet/runtime/assets/22180333/54120713-8a73-4ea6-a05b-b82fa6784634)\r\n\r\n**Update: 1 week later**\r\nIt appears that the initial apparent difference was due to some initial conditions, but over longer period the RAM usage pattern looks similar for 8MB GC region vs. the default 4 MB, with the maps count much lower at under 50K vs. 90K for the defaulot region size:  \r\n![image](https://github.com/dotnet/runtime/assets/22180333/318a7961-964b-4516-938f-6676d7549b05)\r\n\r\n\r\n ",
                                           "updatedAt":  "2024-06-04T13:13:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AVPYK",
                                           "createdAt":  "2024-06-06T17:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "At the end of the day, the Linux kernel is responsible for creating and merging these virtual memory mappings. As such, I did a study on the Linux kernel to see how it works.\r\n\r\nAs part of the study, I wrote some notes on what I have found. In short, I think there is a missed opportunity there such that the Linux kernel can do a better job in our scenario. \r\n\r\nhttps://cshung.github.io/posts/linux-virtual-memory-mapping-debugging/",
                                           "updatedAt":  "2024-06-06T17:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AV132",
                                           "createdAt":  "2024-06-06T18:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@cshung Great work on getting to the root cause and the [blog](https://cshung.github.io/posts/linux-virtual-memory-mapping-debugging/).\r\n\r\nIs there a plan to continue full support for non-region based (libclrgc.so) GC in future versions of .NET?",
                                           "updatedAt":  "2024-06-06T18:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AcZl0",
                                           "createdAt":  "2024-06-07T14:10:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "In the foreseeable future, we still need segments for 32 bit platforms, so we will continue to release `libclrgc.so`. However, all the new innovations that we will do in the future will target regions, so you will miss out all the new stuff.",
                                           "updatedAt":  "2024-06-07T14:10:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C1Hja",
                                           "createdAt":  "2024-06-27T15:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@cshung @janvorli \r\n\r\nAfter thinking a bit about your findings: I feel that we should not lay all the blame at Linux\u0027s feet.\r\nIf the region-based GC becomes too aggressive in how the process commits/decommits memory regions from the underlying OS kernel. Eventually it may hit a limit on how quickly the kernel can process these efficiently. In other words, we can not push own perf issues to the level below and expect not to receive some sort of a back pressure.\r\n\r\nThis issue should be followed up by a more practical step of \"what we could do\" and not \"what they (Linux) should\". For instance, deciding on a different default region size (currently standing at 4MB), or some other parts of the GC implementation.",
                                           "updatedAt":  "2024-06-27T15:03:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C1ZJk",
                                           "createdAt":  "2024-06-27T15:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e This issue should be followed up by a more practical step of \"what we could do\" and not \"what they (Linux) should\". For instance, deciding on a different default region size (currently standing at 4MB), or some other parts of the GC implementation.\r\n\r\nI agree that we should try to do as much as we can, since even if a fix got into the Linux kernel now, it would take time to become mainstream. And since there was a Linux kernel patch that was trying to fix that problem in the past and it was rejected for reasonable reasons, I am a bit skeptical about it being changed in a foreseeable future.\r\n\r\nWe already have plans to run some performance benchmarks with different region sizes to see if it has any perf impact. I have also investigated a possibility of different pattern of accessing the memory to lower the probability of kernel will fail to merge the blocks. After we know the influence of the region sizes on the perf, we could decide to automatically pick the region size based e.g. on the total amount of available memory.\r\n\r\nHowever, I still haven\u0027t seen evidence that the large number of mappings that can result from the current state cause performance problems. The mapping count limit can be raised to a larger value to mitigate the OOMs. The default limit is quite conservative. \r\n\r\nI don\u0027t actually feel like we are aggressively committing / decommitting memory. We are just doing that on demand of the application - the more it allocates, the more we need to commit. ",
                                           "updatedAt":  "2024-06-27T15:35:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C1i4Q",
                                           "createdAt":  "2024-06-27T15:51:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli thanks for the work and the progress your team is making to address this.\r\n\r\nI saw the updated error message https://github.com/dotnet/runtime/pull/102458 but that could be too late to find out in the app development cycle. Other times the process crashes with no message at all other than \"General Protection Fault\" in kernel logs  or a simple \"out of memory\" message, not sure why. These are all related though because none happens once the limit is raised in the OS.\r\nAn upfront recommendation in the documentation could be in order: this [garbage collection fundamentals](https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals) or some other place. \r\n\r\n\u003e The default limit is quite conservative.\r\n\r\nCould you propose the change in Linux kernel repo? If there are no downside it is going to be merged in no time and the issue could be closed.\r\n\r\n",
                                           "updatedAt":  "2024-06-27T15:52:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C3M5f",
                                           "createdAt":  "2024-06-27T19:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Thanks for following up!\r\n\r\n\u003e I feel that we should not lay all the blame at Linux\u0027s feet.\r\n\r\nJust to reiterate, I said \"I think there is a missed opportunity there for Linux to improve\", I am not blaming them. This is probably just a scenario they never envision, and we should enlighten them on that.\r\n\r\n\u003e If the region-based GC becomes too aggressive in how the process commits/decommits memory regions from the underlying OS kernel.\r\n\r\nThe region-based GC isn\u0027t aggressive in terms of volume (we are not committing too much memory over what the application need), nor it is aggressive in terms of frequency (we have optimization in place to avoid frequent commit/decommit calls). It is the random _sequence_ of committing that is choking the underlying OS.\r\n\r\nTypical stack grows one way. Typical `malloc` implemented using `brk` grows one way. \r\n\r\nTo allow various optimizations, regions works by allowing multiple regions to grow independently, so think of that as many streams going on and they all go one way towards the right. Think of that like an old school parallel download app.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/3410332/3325a40e-f1df-42ec-94cc-c3baebd9cc9a)\r\n\r\nAt the end of the download, you expect one region, but no, on Linux, these stream don\u0027t merges and they have as many as the number of streams ever created.\r\n\r\nThis story starts with having 5N streams, where N is the number of cores and 5 is the number of generations. Once any of these streams ends, we create new ones. But then, by the time every of the initial 5N stream ends, all the earlier gaps should have been filled, and therefore we expect the number of streamed parts should stay roughly 5N to 10N. \r\n\r\nBut the number we observed from the maps is a 100 fold more than that, and that is because when end meets, Linux cannot merge them. So it ends up being the total number of streams created so far, these accumulate over times and therefore we have this issue.\r\n\r\nAll these have a caveat, that is based on my research on the Linux code base for just a few days, it might very well be wrong.\r\n\r\n\u003e This issue should be followed up by a more practical step of \"what we could do\" and not \"what they (Linux) should\".\r\n\r\nI agree with that, but retrofitting regions to fit the Linux way of one way committing is simply not an option. There are already various workaround we proposed in this thread, here they are (in preference order):\r\n\r\n1. Bump the system limit of mapping counts\r\n2. Adjust the region size\r\n3. Use `libclrgc.so`\r\n\r\nAnd all of these do not require a change in the runtime code, they are all configurable.\r\n\r\nExcept 3 (which actually grow the memory one way), both 1 and 2 didn\u0027t address the underlying issue the end of streams doesn\u0027t merge, all it does is either:\r\n\r\n1. Accept more ranges, so it is fine (up to what a typical user needs anyway), or\r\n2. Create less ranges, so it stays within limit.\r\n\r\nEventually, with bigger apps, these limit will hit again. IMO, this is just fixing the symptoms.\r\n\r\nWhat we really want to understand is the consequence of 1 and 2.\r\n\r\nWe suspect 1 might impact memory access latencies, but do we have data? The dependency of memory access latency on number of memory mapping should be logarithmic, so I expect even if we 4x the number of memory mappings, we will have at most two more memory accesses for each page fault. In the grand theme of things does that matter at all?\r\n\r\nWe experimented with 2, and there is a GC behavioral change. As of now, this is still mysterious to us, do we have data where we can use the analyze what is going on?",
                                           "updatedAt":  "2024-06-27T21:43:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C9nGt",
                                           "createdAt":  "2024-06-28T15:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@cshung \r\n\u003e  It is the random sequence of committing that is choking the underlying OS.\r\n\r\nThis nails it, thank you.\r\n\r\n\u003e Think of that like an old school parallel download app\r\n\r\nInteresting comparison, with the only difference is that with the partial download streams \"we\" create the  streams and \"we\" do the re-assembly at the end. In the regions GC scenario \"we\" do the distributed allocations to achieve better throughput, yet have no control over the vm maps re-assembly. Not saying this is wrong: this is to agree with the statement that this hasn\u0027t been expected and modeled.\r\n\r\n\u003e 1. Bump the system limit of mapping counts\r\n\r\nThe **sysctl** [documentation](https://android.googlesource.com/kernel/common/+/bcmdhd-3.10/Documentation/sysctl/vm.txt) does not say much about the **max_map_count** purpose other than stating what the value is and the assumption it is sufficient for standard use scenarios.\r\n\r\nRedHat [claims](https://access.redhat.com/solutions/99913) that the limit has something to do to letting kernel more access to its lowmem: `The upside of lowering this limit is that it can free up lowmem for other kernel uses.`\r\n\r\nFound this explanation in the original linux kernel [repo](https://github.com/torvalds/linux/blob/master/include/linux/mm.h#L180): it refers to the `coredump` as the reason. Is this relevant for debian and other Linux flavors today?\r\n\r\nNowhere can I find a word about the memory access performance though. \r\n\r\nMaybe a prudent thing to do for now would be documenting this similarly to Elasticsearch recommendation of  **max_map_count** at least 262144 to prevent out-of-memory exceptions: [elastic.co](https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html).\r\n\r\nThis is the value we also picked for our servers to stop the incidents.\r\n\r\nNot pretending for the best wording, but the spirit of the message could be:\r\n\r\n\u003e Since .NET 7 introduced regions-based GC, large memory, large CPU core count applications consuming 100GBs of RAM running on in Linux could run into the default operating system limit on mmap counts, which may result in out of memory crashes. You can increase the limits by ... (TBD)\r\n\r\n",
                                           "updatedAt":  "2024-06-28T16:01:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C9wkM",
                                           "createdAt":  "2024-06-28T15:58:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e RedHat [claims](https://access.redhat.com/solutions/99913) that the limit has something to do to letting kernel more access to its lowmem: The upside of lowering this limit is that it can free up lowmem for other kernel uses.\r\n\r\nJust as an FYI - this might have to do with non-paged pool.\r\n\r\nJust like user mode, kernel mode can also use virtual memory. However, with virtual memory, you can have a block of memory in contiguous virtual addresses that is not contiguous in physical addresses, this upset direct memory access (DMA) for devices like secondary storage or network cards.\r\n\r\nTherefore the kernel has a particular pool of memory that is restricted so that it can guarantee you have contiguous physical memory. This make it possible for use of DMA. \r\n\r\nBecause the virtual memory area are used to handle page fault, they probably need to be stored in that area too because you don\u0027t want to handle page fault with memory that can also result in a page fault.\r\n\r\nThat non-paged pool is probably a precious resource of its own, that is probably why we had the conservative limit.",
                                           "updatedAt":  "2024-06-28T15:58:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C91yh",
                                           "createdAt":  "2024-06-28T16:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "Also an FYI we are not alone: a similar issue reported for with ZGC in JVM on [SO forum](https://stackoverflow.com/questions/75713808/gc-warning-about-memory-mappings-per-process-and-jvm-crash-after-migrating-to). They do provide an early warning about the imminent max maps value overflow:\r\n\r\n\u003e The system limit on number of memory mappings per process might be too low for the given max Java heap size (NNNN). Please adjust /proc/sys/vm/max_map_count ...",
                                           "updatedAt":  "2024-06-28T16:13:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C95RO",
                                           "createdAt":  "2024-06-28T16:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnsbPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "baal2000",
                                                                               "createdAt":  "2024-06-28T16:35:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Also an FYI we are not alone: a similar issue reported for with ZGC in JVM on [SO forum](https://stackoverflow.com/questions/75713808/gc-warning-about-memory-mappings-per-process-and-jvm-crash-after-migrating-to). They do provide an early warning about the imminent max maps value overflow:\r\n\u003e \r\n\u003e \u003e The system limit on number of memory mappings per process might be too low for the given max Java heap size (NNNN). Please adjust /proc/sys/vm/max_map_count ...\r\n\r\nFYI it\u0027s best to avoid any references to JVM and such here due to its copyleft licensing.",
                                           "updatedAt":  "2024-06-28T16:21:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C-AwM",
                                           "createdAt":  "2024-06-28T16:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "\u003e copyleft licensing\r\n\r\n... can\u0027t apply to one forum user quoting another forum user\u0027s error message. But thanks for the reminder.\r\n\r\nNow steering back to what is the main topic here, i.e. unexpected application crush under region-based GC.\r\n\r\n",
                                           "updatedAt":  "2024-06-28T16:43:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FuRt7",
                                           "createdAt":  "2024-07-22T17:51:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I am moving this issue to \"future\" as there is nothing we can do for .NET 9 and the main topic of this issue has become a discussion on the memory mapping merging.",
                                           "updatedAt":  "2024-07-22T17:51:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TADjs",
                                           "createdAt":  "2024-11-09T15:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimdiego2098",
                                           "body":  "I am also paying attention to this issue because the same error occurred\n\n![Image](https://github.com/user-attachments/assets/97b34bba-fe1a-48c8-baa0-766ae45f6b42)\n",
                                           "updatedAt":  "2024-11-09T15:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lVUKZ",
                                           "createdAt":  "2025-04-02T21:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mldisibio",
                                           "body":  "Found the `vm.map_max_count` fix **very** helpful as well as the very detailed discussion around .Net 8 changes and how they interact with the linux kernel. We run intensive I/O and memory processes in parallel using containers on a server with 1.5T memory and 96 cores. We\u0027re already on .Net 9 and this error was thrown, but the `vm.map_max_count` seems to have fixed it.\n\nOne detail I thought I\u0027d throw in is that (since I\u0027ve never encountered the error previously with even more intense I/O Memory loads (but with .Net 6 runtime) is that I started using the `duckdb` library (duckdb.org very similar to sqlite) wrapped for dotnet. This executable is designed to absolutely maximize memory usage (it\u0027s selling point). ",
                                           "updatedAt":  "2025-04-02T21:59:14Z"
                                       }
                                   ],
                         "totalCount":  38
                     },
        "title":  ".NET 8 crash with \"Fatal error. Failed to create RW mapping for RX memory\"",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100242",
        "createdAt":  "2024-03-25T16:45:19Z",
        "number":  100242,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T20:44:47Z",
        "body":  "This pertains to the logic in https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/yieldprocessornormalized.cpp and where an initial discussion was raised here: https://github.com/dotnet/runtime/pull/99991#discussion_r1536151998\r\n\r\nThe general premise is that while the logic attempts to be robust and appears to get the results correct on Windows, for at least a subset of machines tested, the same general logic does not return a consistent result for the same hardware on Linux. Additionally, there are some potential scenarios where the logic will be incorrect when accounting for `big.LITTLE` (or power/efficiency) micro-architectures and where results can become skewed due to external factors such as processor downclock (energy savings), processing boosting, or even context switches caused by the Operating System.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeFls0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54TxJn",
                                           "createdAt":  "2024-03-25T16:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The simplest example is to test the results on a well documented system, such as an AMD Zen4 chip where `pause` is documented to take exactly 64 cycles. On Windows, the computed time is typically around 14ns (which is spot on for a 4.5GHz base clock processor). However, if you were to actually log the min/max times and the processor ID as seen over all calls, you\u0027d see something similar to the following:\r\n```\r\nmin: 12.76595744680851 8\r\nmax: 12.76595744680851 8\r\nmax: 13.924050632911392 8\r\nmin: 12.658227848101266 8\r\nmin: 11.702127659574469 8\r\nmax: 16.949152542372882 8\r\nmax: 24.390243902439025 30\r\nmax: 26.829268292682926 26\r\nmax: 81.69014084507042 8\r\nmax: 142.85714285714286 8\r\nmax: 182.33333333333334 0\r\n```\r\n\r\nThis variance is caused by processor frequency changes as well as by OS context switches, but also shows that the core being tested may not be consistent which can negatively impact other cores.\r\n\r\nOn Linux, however, the same code is returning drastically different measurements despite the knowledge that `pause` will take exactly 64 cycles:\r\n```\r\nmin: 8.333333333333334 23\r\nmax: 8.333333333333334 23\r\nmin: 7.046979865771812 23\r\nmin: 6.709677419354839 23\r\nmin: 6.580645161290323 23\r\nmin: 6.538461538461538 23\r\nmax: 9.0625 23\r\nmax: 10.412371134020619 23\r\nmax: 40.796460176991154 23\r\nmax: 54.01639344262295 23\r\nmax: 102.53571428571429 23\r\nmax: 181.78571428571428 23\r\nmax: 182.14285714285714 23\r\nmax: 182.33333333333334 23\r\nmin: 6.5 23\r\nmin: 6.4743589743589745 23\r\nmin: 6.3354037267080745 23\r\nmin: 6.31875 23\r\nmin: 6.3125 23\r\nmin: 6.273291925465839 22\r\n```",
                                           "updatedAt":  "2024-03-25T16:45:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54TyUd",
                                           "createdAt":  "2024-03-25T16:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T16:47:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54T0cw",
                                           "createdAt":  "2024-03-25T16:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Similar discrepancies are seen on Arm64 for devices like the `Volterra` (Windows DevKit) or a Raspberry PI.\r\n\r\nHowever, for Arm64 in particular it is worth noting that we currently use `yield`. The architecture manuals actually specify that `yield` may be a `nop` on many systems and in practice this can be visibly seen in the measurements:\r\n```\r\nmin: 0.4478280340349306 5\r\nmax: 0.4478280340349306 6\r\nmin: 0.42662116040955633 6\r\nmax: 0.5071461502996772 5\r\nmin: 0.41736227045075125 6\r\nmin: 0.3985651654045436 5\r\nmax: 2.345415778251599 6\r\nmax: 2.487562189054726 5\r\nmin: 0.3838771593090211 6\r\nmin: 0.37091988130563797 5\r\nmax: 36.47746243739566 6\r\nmax: 89.28571428571429 5\r\nmax: 173.2193732193732 6\r\nmax: 174.28571428571428 0\r\nmax: 182.33333333333334 6\r\n```\r\n\r\nIf you were to replace the `yield` with a true `nop`, you\u0027d actually see identical measurements.\r\n\r\nMany other runtimes have correspondingly switched to emitting `isb` instead due to the fact that `yield` is behaving as a `nop` on a very large amount of real hardware. This has a latency more around 9-10ns, which is much more similar to the x86/x64 `pause` instruction.\r\n\r\nAdditionally, Armv8 has an optional feature (which is now required in Armv8.7+) called `Wait for Event` and `Wait for Event with Timeout`. This new feature is intentionally designed to be used with `spin locks` and comes with explicit documented samples on how to use it correctly. As such, it may be desirable to adjust Arm64 to use `wfe` if available and otherwise to use `isb` if the underlying `yield` reports timings similar to `nop`.\r\n\r\nThis should result in better energy efficiency, fewer instructions executed, etc.",
                                           "updatedAt":  "2024-03-25T16:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54T1UA",
                                           "createdAt":  "2024-03-25T16:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "x64 similarly has newer optional functionality in the form of `tpause` (timed pause) which is preferred over `pause` on newer hardware and which allows explicitly opting for better perf or better energy efficiency. -- It also has `umwait` and `umonitor` which allow similar efficient waiting for an address to be read/written and which can be used for efficient semaphores or other optimizations.",
                                           "updatedAt":  "2024-03-25T16:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54UebE",
                                           "createdAt":  "2024-03-25T18:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kouvel",
                                           "body":  "@tannergooding could you please share the test case that yields the measurements in https://github.com/dotnet/runtime/issues/100242#issuecomment-2018447975?",
                                           "updatedAt":  "2024-03-25T18:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Ui2v",
                                           "createdAt":  "2024-03-25T18:32:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "It\u0027s just modifying `YieldProcessorNormalization::PerformMeasurement()` to print out the data to the console. But the same general premise can be observed from the `FireEtwYieldProcessorMeasurement` event or by setting a breakpoint.\r\n\r\nWhere the processor ID can be queried via `GetCurrentProcessorNumberEx()` (Win32) or `sched_getcpu` (Linux).",
                                           "updatedAt":  "2024-03-25T18:32:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54UybB",
                                           "createdAt":  "2024-03-25T19:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kouvel",
                                           "body":  "\u003e It\u0027s just modifying `YieldProcessorNormalization::PerformMeasurement()` to print out the data to the console. But the same general premise can be observed from the `FireEtwYieldProcessorMeasurement` event or by setting a breakpoint.\r\n\u003e \r\n\u003e Where the processor ID can be queried via `GetCurrentProcessorNumberEx()` (Win32) or `sched_getcpu` (Linux).\r\n\r\nSome variance is to be expected in normal situations, but are you saying that this variance occurs even with nothing else happening on the machine?",
                                           "updatedAt":  "2024-03-25T19:08:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54U9o_",
                                           "createdAt":  "2024-03-25T19:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes.\r\n\r\nI\u0027m consistently seeing Linux report numbers that are lower than Windows (and therefore also lower than the actual hardware documented time) and the actual variance to be quite substantial in some cases, really depending on the previous power state of the CPU.\r\n\r\nThe Intel Software Optimization manual then documents that a core license change (which can occur for heavy AVX2/AVX512 usage as an example) can take up to 500 microseconds and then will spend at least 2ms before it changes back to the higher clock speed. It also documents that many operating systems may use a time constant on the order of 10-100ms to detect processor workload demand and thus change the explicitly requested frequency.\r\n\r\nThese documented timings show that there can be a pretty substantial window under which `pause` latency can be mismeasured for a given core. It also doesn\u0027t factor in the implications around heterogenous architectures (where `pause` may have different latencies across different cores).\r\n\r\nOn Windows, we do get eventual consistency since the normalization is semi-regularly run for a thread as needed, but it\u0027s still not amazing and can get skewed if context switches happen and the core a thread is on gets changed.",
                                           "updatedAt":  "2024-03-25T19:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54U91M",
                                           "createdAt":  "2024-03-25T19:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I believe @EgorBo saw similar numbers as I did when he was looking at some Linux related perf traces for Arm64.",
                                           "updatedAt":  "2024-03-25T19:33:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54WWzT",
                                           "createdAt":  "2024-03-25T23:57:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Many other runtimes have correspondingly switched to emitting isb instead due to the fact that yield is behaving as a nop on a very large amount of real hardware. This has a latency more around 9-10ns, which is much more similar to the x86/x64 pause instruction.\r\n\r\nIt was discussed here: https://github.com/dotnet/runtime/pull/92611#issuecomment-1864766668",
                                           "updatedAt":  "2024-03-25T23:57:38Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "yieldprocessornormalized appears to be incorrect in some scenarios",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101536",
        "createdAt":  "2024-04-25T10:28:06Z",
        "number":  101536,
        "author":  "timcassell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T16:59:12Z",
        "body":  "### Description\r\n\r\nWhile debugging and attempting to fix flaky allocation measurements in BenchmarkDotNet (https://github.com/dotnet/BenchmarkDotNet/pull/2562), I found that `System.Runtime.InteropServices.RuntimeInformation` causes allocations during a `GC.Collect()`.\r\n\r\nI only observe this behavior in `net8.0` runtime. `net48` runtime using `Microsoft.DotNet.PlatformAbstractions` nuget package does not reproduce (or `AppDomain.MonitoringTotalAllocatedMemorySize` just doesn\u0027t observe it, since `GC.GetTotalAllocatedBytes` is not available in `net48`).\r\n\r\n### Reproduction Steps\r\n\r\nCreate a Console application and run this code in Release with net8.0.\r\n\r\n```cs\r\npublic static void Main()\r\n{\r\n    var bench = new Bench();\r\n    var action = bench.Benchmark1;\r\n    Warmup(action);\r\n\r\n    // Switch these lines to observe 0 allocated bytes.\r\n    var frameworkDescription = RuntimeInformation.FrameworkDescription;\r\n    //var frameworkDescription = \"\";\r\n\r\n    var initial = GetAllocatedBytes();\r\n    action();\r\n    var final = GetAllocatedBytes();\r\n\r\n    Console.WriteLine($\"allocated bytes: {final - initial}\");\r\n\r\n    GC.KeepAlive(frameworkDescription);\r\n}\r\n\r\nstatic long GetAllocatedBytes()\r\n{\r\n    GC.Collect(); // We only observe allocated bytes when GC.Collect() is called.\r\n    return GC.GetTotalAllocatedBytes(precise: true);\r\n}\r\n\r\nstatic void Warmup(Action action)\r\n{\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        action();\r\n    }\r\n}\r\n\r\npublic class Bench\r\n{\r\n    public void Benchmark1() =\u003e TestMethod();\r\n    \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static ulong TestMethod()\r\n    {\r\n        var r = 1ul;\r\n        for (var i = 0; i \u003c 50_000_000; i++)\r\n        {\r\n            r /= 1;\r\n        }\r\n        return r;\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nConsole prints `allocated bytes: 0`.\r\n\r\n### Actual behavior\r\n\r\nConsole prints `allocated bytes: 336` (sometimes it prints 48 or 672).\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nWindows 10 x64\r\n.Net 8.0\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe-AmjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57ym9z",
                                           "createdAt":  "2024-04-25T10:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-25T10:28:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc570x5T",
                                           "createdAt":  "2024-04-25T14:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There are number of background threads running in your app: finalizer thread, tiered JIT thread, diagnostics (event pipe) thread, ... .  All these threads can wake up, do work and allocate as side-effect. The allocations you are seeing are likely from these background threads waking up and allocating.\r\n\r\nWhen I run your repro under debugger (that also affects the timing), I see some allocations from finalizers running on the finalizer thread while your benchmark is running in the foreground.\r\n\r\nAdding/removing RuntimeInformation.FrameworkDescription call is changing the timing and the work that some of these background threads need to do. For example, adding the call can introduce more work for the tiered JIT thread. ",
                                           "updatedAt":  "2024-04-25T14:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc570_sh",
                                           "createdAt":  "2024-04-25T15:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "@jkotas Sure, I can believe that we may get some random allocations from background threads we cannot control, but I don\u0027t believe that\u0027s what\u0027s happening here. If I measure it repeatedly, I see the same results repeatedly.\r\n\r\n```cs\r\npublic static void Main()\r\n{\r\n    var bench = new Bench();\r\n    var action = bench.Benchmark1;\r\n    Warmup(action);\r\n\r\n    // Switch these lines to observe 0 allocated bytes.\r\n    var frameworkDescription = RuntimeInformation.FrameworkDescription;\r\n    //var frameworkDescription = \"\";\r\n\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n    Console.WriteLine($\"allocated bytes: {MeasureAllocations(action)}\");\r\n\r\n    GC.KeepAlive(frameworkDescription);\r\n}\r\n\r\nstatic long MeasureAllocations(Action action)\r\n{\r\n    var initial = GetAllocatedBytes();\r\n    action();\r\n    var final = GetAllocatedBytes();\r\n    return final - initial;\r\n}\r\n```\r\n\r\n```cmd\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\nallocated bytes: 336\r\n```\r\n\r\nWithout `GC.Collect()`:\r\n\r\n```cmd\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\nallocated bytes: 0\r\n```",
                                           "updatedAt":  "2024-04-25T15:05:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571KQ6",
                                           "createdAt":  "2024-04-25T15:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`GC.Collect()` triggers Gen2 GC. Gen2 GC triggers ArrayPool cleanup on finalizer thread. ArrayPool cleanup allocates ConditionalWeakTable enumerator at this callstack:\r\n\r\n```\r\n # Child-SP          RetAddr               Call Site\r\n00 000000ad`7007f178 00007ff7`d81d5630     coreclr!JIT_New [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 2435] \r\n01 000000ad`7007f180 00007ff7`d81d4c92     System_Private_CoreLib!System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].System.Collections.Generic.IEnumerable\u003cSystem.Collections.Generic.KeyValuePair\u003cTKey,TValue\u003e\u003e.GetEnumerator()+0xfffffff7`da3d20f0\r\n02 000000ad`7007f1e0 00007ff7`d81d49a9     System_Private_CoreLib!System.Buffers.SharedArrayPool`1[[System.Char, System.Private.CoreLib]].Trim()+0xfffffff7`da4fd382\r\n03 000000ad`7007f2e0 00007ff8`37d4b846     System_Private_CoreLib!System.Gen2GcCallback.Finalize()+0xfffffff7`da6fc319\r\n04 000000ad`7007f330 00007ff8`37c0e3cd     coreclr!FastCallFinalizeWorker+0x6 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 26] \r\n```",
                                           "updatedAt":  "2024-04-25T15:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571M2j",
                                           "createdAt":  "2024-04-25T15:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "(It is not the only alllocation that ArrayPool cleanup does.)",
                                           "updatedAt":  "2024-04-25T15:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571Ue9",
                                           "createdAt":  "2024-04-25T15:27:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "Hm, that makes sense. Can the allocations be eliminated? Or do you have any suggestions to avoid the issue?",
                                           "updatedAt":  "2024-04-25T15:27:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571mI5",
                                           "createdAt":  "2024-04-25T16:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I suppose it may be possible to eliminate it by somehow, but I am sure whether it is worth the troubles.\r\n\r\nMany of the background runtime activities can allocate for number of different reasons. It does not make sense to try to eliminate every single one of them to make the benchmark.net alllocation analyzer reliable.\r\n\r\nIf you do not want the background activities to interfere, the best way is to disable them: disable tiered JIT, disable event source, hang the finalizer by creating a finalizer with infinite sleep, etc.",
                                           "updatedAt":  "2024-04-25T16:03:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571meq",
                                           "createdAt":  "2024-04-25T16:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "If you are okay with the overhead, The native `ICorProfiler` allows you to capture all allocations.\r\n\r\nYou can filter out allocation that does not happen on the thread of interest. We have a sample test case here to show how it could be done.\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/tests/profiler/native/gcallocateprofiler/gcallocateprofiler.cpp",
                                           "updatedAt":  "2024-04-25T16:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc571x2u",
                                           "createdAt":  "2024-04-25T16:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "I don\u0027t know what other allocations there are, but I suppose a low effort reduction there would be to use a struct enumerator for the ConditionalWeakTable (internal only for safety, of course).\r\n\r\n\u003e If you do not want the background activities to interfere, the best way is to disable them: disable tiered JIT, disable event source, hang the finalizer by creating a finalizer with infinite sleep, etc.\r\n\r\nHanging the finalizer thread is certainly an interesting idea. I\u0027ll try to see if I can work that into our tests.",
                                           "updatedAt":  "2024-04-25T17:50:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc574CaN",
                                           "createdAt":  "2024-04-25T22:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-25T22:40:36Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "`RuntimeInformation` causes unexpected allocations",
        "labels":  [
                       "question",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101795",
        "createdAt":  "2024-05-02T11:45:12Z",
        "number":  101795,
        "author":  "theolivenbaum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:38:51Z",
        "body":  "### Description\r\n\r\n\r\nWe pre-load libjemalloc on our software using `LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so`, and this always worked fine with .NET, but now we\u0027re getting a crash during start:\r\n\r\n```\r\n# LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so\r\n# ./curiosity\r\nfree(): invalid pointer\r\nAborted (core dumped)\r\n```\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nSet LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so and run a .NET program\r\n\r\n### Expected behavior\r\n\r\nNo crash\r\n\r\n### Actual behavior\r\n\r\nCrash with: \r\n```\r\nfree(): invalid pointer \r\nAborted (core dumped)\r\n```\r\n\r\n### Regression?\r\n\r\nYes, we\u0027ve used this setup before. In other Linux releases it seems to work fine as well (for example: RHEL7)\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8.0.4\r\nDebian GNU/Linux 12 (bookworm)\r\nx64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfKn1YQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58mi7_",
                                           "createdAt":  "2024-05-02T13:17:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-02T13:17:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58qfVh",
                                           "createdAt":  "2024-05-02T20:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @theolivenbaum, is this a regression in 8.0.4 or 8 in general? Also to clarify it works on RHEL/Alpine but fails on Ubuntu/Debian?",
                                           "updatedAt":  "2024-05-02T20:38:25Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Crash when pre-loading libjemalloc.so on Debian 12",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101839",
        "createdAt":  "2024-05-03T10:42:37Z",
        "number":  101839,
        "author":  "benaadams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-26T22:27:39Z",
        "body":  "When a thread exits; all its thread locals end up on the finalization queue (perhaps unsurprisingly)\r\n\r\nHowever the runtime is controling when threads are exited; would it be possible it instead dispose all these locals as part of the thread exit so they don\u0027t all end up on the finalization queue?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgrJLeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58vNtX",
                                           "createdAt":  "2024-05-03T10:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-03T10:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58wBwd",
                                           "createdAt":  "2024-05-03T12:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-03T12:57:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xTfZ",
                                           "createdAt":  "2024-05-03T16:01:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUmMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2024-06-26T23:21:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The thread-local field might not be the only thing that refers to the same instance.  In that case, it would be wrong to automatically dispose or finalize the referenced instance when the thread exits, unless the thread-local field is opted in somehow.  (Perhaps a new `bool DisposeValueOnThreadExit` property on `ThreadStaticAttribute` and `ThreadLocal\u003cT\u003e`; the IDisposable.Dispose implementation could then call GC.SuppressFinalize.)\r\n",
                                           "updatedAt":  "2024-05-10T08:57:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59YfIB",
                                           "createdAt":  "2024-05-09T22:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-09T22:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cskt5",
                                           "createdAt":  "2024-06-26T22:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Adding @davidwrighton who has been doing work in this area. ",
                                           "updatedAt":  "2024-06-26T22:27:39Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "ThreadLocals and Finalization/GC",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102396",
        "createdAt":  "2024-05-17T19:39:24Z",
        "number":  102396,
        "author":  "maf1024",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-04T08:57:27Z",
        "body":  "### Description\n\nI\u0027m encountering random segmentation faults (and sometimes AccessViolationException and NullReferenceException) when running a dotnet 8.0 console app on 32-bit ARM linux. It seems to mainly occur for me when it attempts to connect to a SignalR hub as a client.\n\n### Reproduction Steps\n\nI have pushed a small repro app pair [here](https://github.com/maf1024/SignalRCrashRepro240517).\r\n\r\nNote that in addition to the crashing console app, it also contains a trivially simple SignalR webapp that I\u0027ve deployed to azure when reproducing. (Note the \"[CHANGE THIS TO YOUR WEBAPP URL]\" line in the console app)\r\n\r\nThe console app code just tries to make a SignalR connection over websockets and send/receive a few MessagePack messages before exiting.\r\n\r\nWhen running the console app repeatedly, it has a random chance of encountering the issue, after something like 10 to 100 attempts. (a helper bash loop .sh is included)\n\n### Expected behavior\n\nCan run repeatedly without crashing.\n\n### Actual behavior\n\nApproximately 5% of the time it fails with simply `Segmentation fault`.\r\n\r\nI have uploaded a core crash dump file of one of the segfault occurrences [here](https://tempshare24.blob.core.windows.net/public/core_.NET%20TP%20Worker.29729)\r\n\r\nOn some occasions it randomly has a NullReferenceException, with additional stack trace info:\r\n\r\n```\r\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.GetStateMachineBox[TStateMachine](TStateMachine\u0026 stateMachine, Task`1\u0026 taskField)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeAsync(ConnectionState startingConnectionState, Int32 protocolVersion, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncInner(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(CancellationToken cancellationToken)\r\n   at Program.\u003cMain\u003e$(String[] args)\r\n   at Program.\u003cMain\u003e(String[] args)\r\n```\r\n\r\n```\r\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter](TAwaiter\u0026 awaiter, IAsyncStateMachineBox box)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003cThrowAsync\u003eb__128_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.Tasks.Task+\u003c\u003ec.\u003cThrowAsync\u003eb__128_1(System.Object)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n```\r\n\n\n### Regression?\n\nIt seems to work fine (even with thousands of attempts) when changing the csproj back to dotnet 6.0 instead of 8.0.\r\n\r\n(I can\u0027t test dotnet 7.0 on this ARM device due to the higher glibc requirement 7.0 has)\n\n### Known Workarounds\n\nDowngrading the csproj to dotnet 6.0\n\n### Configuration\n\nCustom linux OS running on 32-bit ARM linux IoT device.\r\n\r\nProblem seems specific to 32-bit ARM. Ran repeatedly on a different custom *ARM64* device with no issues.\n\n### Other information\n\nOn some rare occasions **with very similar code (from my team\u0027s proprietary app)**, it encountered this AccessViolationException, which I suspect is stemming from the same cause:\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cForceAuthenticationAsync\u003ed__150`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].ClearStateUponCompletion()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cForceAuthenticationAsync\u003ed__150`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cForceAuthenticationAsync\u003ed__150`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(Int32)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(System.Threading.Tasks.Task`1\u003cInt32\u003e, Int32)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32)\r\n   at System.Net.Security.SslStream+\u003cReceiveHandshakeFrameAsync\u003ed__151`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cReceiveHandshakeFrameAsync\u003ed__151`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cReceiveHandshakeFrameAsync\u003ed__151`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cReceiveHandshakeFrameAsync\u003ed__151`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.ThreadPool+\u003c\u003ec.\u003c.cctor\u003eb__52_0(System.Object)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32)\r\n   at System.Net.Security.SslStream+\u003cEnsureFullTlsFrameAsync\u003ed__161`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1+StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cEnsureFullTlsFrameAsync\u003ed__161`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1+StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Net.Security.SslStream+\u003cEnsureFullTlsFrameAsync\u003ed__161`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.ThreadPool+\u003c\u003ec.\u003c.cctor\u003eb__52_0(System.Object)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Boolean)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.OnCompletedInternal()\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32, System.Net.Sockets.SocketFlags)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.CompletionCallback(Int32, System.Net.Sockets.SocketFlags, System.Net.Sockets.SocketError)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.TransferCompletionCallbackCore(Int32, System.Memory`1\u003cByte\u003e, System.Net.Sockets.SocketFlags, System.Net.Sockets.SocketError)\r\n   at System.Net.Sockets.SocketAsyncContext+OperationQueue`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ProcessAsyncOperation(System.__Canon)\r\n   at System.Net.Sockets.SocketAsyncContext+ReadOperation.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Net.Sockets.SocketAsyncContext.HandleEvents(SocketEvents)\r\n   at System.Net.Sockets.SocketAsyncEngine.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwdvnrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-Qhpd",
                                           "createdAt":  "2024-05-17T19:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-17T19:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Wvf-",
                                           "createdAt":  "2024-05-20T07:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Is it possible to check if your Linux OS flavor uses 64bit `time_t`? I am aware that couple of distributions moved to 64bit to avoid the year 2038 problem, which creates a binary break for ARM32 platform. This announcement may be relevant https://github.com/dotnet/core/discussions/9285.\r\n\r\nI have seen our tests suite occasionally crash on ARM32 Debian 12 (on main/9.0), possibly the same issue (but we disabled runs on that specific platform due to https://github.com/dotnet/runtime/issues/101444#issuecomment-2116482502 so I did not investigate further).",
                                           "updatedAt":  "2024-05-20T08:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-aiJ9",
                                           "createdAt":  "2024-05-20T17:27:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maf1024",
                                           "body":  "Looking at the result of a `printf(\"size of time_t is: %d\\n\", sizeof(time_t));` check using our platform-specific gcc and running it on our hardware, it says 4 bytes, so it seems it\u0027s 32-bit `time_t`.",
                                           "updatedAt":  "2024-05-20T17:27:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-aknB",
                                           "createdAt":  "2024-05-20T17:33:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e it says 4 bytes, so it seems it\u0027s 32-bit `time_t`.\r\n\r\nUnfortunately I am not sure that this test necessarily works. It still depends on the `_TIME_BITS` build option and the system would somehow have to set it globally and unconditionally (or for the OpenSSL build, specifically).",
                                           "updatedAt":  "2024-05-20T17:33:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-zoRP",
                                           "createdAt":  "2024-05-23T15:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maf1024",
                                           "body":  "Is there something I can try to run to more conclusively answer the `time_t` question?",
                                           "updatedAt":  "2024-05-23T15:46:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-78Fr",
                                           "createdAt":  "2024-05-24T14:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cw-ametek",
                                           "body":  "I think this may be the same issue that I have been tracking down on our ARM32 (nxp imx6q) embedded platform running Linux.\r\n\r\nThe fault can be reproduced using an unmodified dotnet 8 webapi sample program:\r\n```\r\ndotnet new webapi -n crash\r\ndotnet publish --self-contained -c Release -f net8.0 -r linux-arm crash\r\n```\r\n\r\nFor me the segmentation fault only seems to occur on the first web request, and is much more likely to happen with multiple simultaneous requests. \r\n \r\nI\u0027ve used this script running on the device to automate the process:\r\n``` sh\r\n#!/bin/bash\r\nPROGRAM=crash\r\nfail=0\r\nRUNS=100\r\n\r\nfor run in $(seq 1 $RUNS); do\r\n  echo \"Run $run ($fail failures)\"\r\n  ./$PROGRAM \u003e /dev/null \u0026\r\n  sleep 5\r\n  curl -k --parallel --parallel-immediate --parallel-max 50  http://localhost:5000/weatherforecast?[1-16] \u003e /dev/null\r\n  sleep 5\r\n\r\n  PID=$(pidof $PROGRAM)\r\n  if [ \"$PID\" == \"\" ]; then\r\n    echo \"CRASHED!\"\r\n        ((fail++))\r\n  else\r\n        kill $PID\r\n        sleep 2\r\n  fi\r\ndone\r\n\r\necho \"Program crashes $fail / $RUNS\"\r\n```\r\n\r\nWith a single request, the failure rate is only about 3%, but goes up to about 25% with 4 or more requests. \r\n\r\n.net7 shows the same fault, but .net6 works without any problems.\r\nARM64 and Ubuntu in WSL did not show the problem.\r\n\r\nThe kernel (5.4.147) is compiled with CONFIG_64BIT_TIME, but glibc is only version 2.31\r\nI can\u0027t see any indication that _TIME_BITS is being defined anywhere, so I think it is just 32 bit.\r\n\r\nI can collect a coredump if that will help.\r\n\r\nSometimes I get the AccessViolationException instead of a segmentation fault:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder+\u003cBindModelAsync\u003ed__8.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder+\u003cBindModelAsync\u003ed__8, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cBindModelAsync\u003ed__8 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult, Microsoft.AspNetCore.Mvc.Abstractions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].Start[[Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder+\u003cBindModelAsync\u003ed__8, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cBindModelAsync\u003ed__8 ByRef)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object, System.Object)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider+\u003c\u003ec__DisplayClass0_0+\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider+\u003c\u003ec__DisplayClass0_0+\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider+\u003c\u003ec__DisplayClass0_0+\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider+\u003c\u003ec__DisplayClass0_0.\u003cCreateBinderDelegate\u003eg__Bind|0(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object, System.Collections.Generic.Dictionary`2\u003cSystem.String,System.Object\u003e)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.BindArgumentsAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State ByRef, Scope ByRef, System.Object ByRef, Boolean ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State ByRef, Scope ByRef, System.Object ByRef, Boolean ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerRequestDelegateFactory+\u003c\u003ec__DisplayClass12_0.\u003cCreateRequestDelegate\u003eb__0(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.SetRoutingAndContinue(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nAborted\r\n\r\n\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetException(System.Exception, System.Threading.Tasks.Task`1\u003cSystem.Threading.Tasks.VoidTaskResult\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(System.Threading.Tasks.Task`1\u003cSystem.Threading.Tasks.VoidTaskResult\u003e, System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(System.Threading.Tasks.Task`1\u003cSystem.Threading.Tasks.VoidTaskResult\u003e, System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\r\n   at System.Threading.Tasks.Task.RunContinuations(System.Object)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(System.Threading.Tasks.Task`1\u003cSystem.Threading.Tasks.VoidTaskResult\u003e, System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nAborted\r\n\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Collections.Generic.Dictionary`2[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Linq.Expressions.Compiler.VariableStorageKind, System.Linq.Expressions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]..ctor(Int32, System.Collections.Generic.IEqualityComparer`1\u003cSystem.__Canon\u003e)\r\n   at System.Collections.Generic.Dictionary`2[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Linq.Expressions.Compiler.VariableStorageKind, System.Linq.Expressions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]..ctor()\r\n   at System.Text.Json.Serialization.Metadata.ReflectionEmitMemberAccessor.CreatePropertyGetter[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Reflection.PropertyInfo)\r\n   at System.Text.Json.Serialization.Metadata.ReflectionEmitCachingMemberAccessor+\u003c\u003ec__12`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cCreatePropertyGetter\u003eb__12_0(System.ValueTuple`3\u003cSystem.String,System.Type,System.Reflection.MemberInfo\u003e)\r\n   at System.Text.Json.Serialization.Metadata.ReflectionEmitCachingMemberAccessor+Cache`1+\u003c\u003ec__6`1[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cGetOrAdd\u003eb__6_0(System.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e, System.Func`2\u003cSystem.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e,System.__Canon\u003e)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e, System.Func`3\u003cSystem.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e,System.__Canon,System.__Canon\u003e, System.__Canon)\r\n   at System.Text.Json.Serialization.Metadata.ReflectionEmitCachingMemberAccessor+Cache`1[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e, System.Func`2\u003cSystem.ValueTuple`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e,System.__Canon\u003e)\r\n   at System.Text.Json.Serialization.Metadata.ReflectionEmitCachingMemberAccessor.CreatePropertyGetter[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Reflection.PropertyInfo)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.DeterminePropertyAccessors[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1\u003cSystem.__Canon\u003e, System.Reflection.MemberInfo, Boolean)\r\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DetermineReflectionPropertyAccessors(System.Reflection.MemberInfo, Boolean)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.PopulatePropertyInfo(System.Text.Json.Serialization.Metadata.JsonPropertyInfo, System.Reflection.MemberInfo, System.Text.Json.Serialization.JsonConverter, System.Nullable`1\u003cSystem.Text.Json.Serialization.JsonIgnoreCondition\u003e, Boolean, Boolean)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.CreatePropertyInfo(System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Type, System.Reflection.MemberInfo, System.Text.Json.JsonSerializerOptions, Boolean, Boolean)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.AddMembersDeclaredBySuperType(System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Type, Boolean, PropertyHierarchyResolutionState ByRef)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.PopulateProperties(System.Text.Json.Serialization.Metadata.JsonTypeInfo)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.CreateTypeInfoCore(System.Type, System.Text.Json.Serialization.JsonConverter, System.Text.Json.JsonSerializerOptions)\r\n   at System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.GetTypeInfo(System.Type, System.Text.Json.JsonSerializerOptions)\r\n   at System.Text.Json.JsonSerializerOptions.GetTypeInfoNoCaching(System.Type)\r\n   at System.Text.Json.JsonSerializerOptions+CachingContext.CreateCacheEntry(System.Type, CachingContext)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon, System.Func`3\u003cSystem.__Canon,System.__Canon,System.__Canon\u003e, System.__Canon)\r\n   at System.Text.Json.JsonSerializerOptions.GetTypeInfoInternal(System.Type, Boolean, System.Nullable`1\u003cBoolean\u003e, Boolean, Boolean)\r\n   at System.Text.Json.JsonSerializerOptions.GetTypeInfo(System.Type)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter+\u003cWriteResponseBodyAsync\u003ed__5.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter+\u003cWriteResponseBodyAsync\u003ed__5, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cWriteResponseBodyAsync\u003ed__5 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter+\u003cWriteResponseBodyAsync\u003ed__5, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cWriteResponseBodyAsync\u003ed__5 ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsyncCore(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ObjectResult, System.Type, System.Object)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ObjectResult)\r\n   at Microsoft.AspNetCore.Mvc.ObjectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultAsync(Microsoft.AspNetCore.Mvc.IActionResult)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](State ByRef, Scope ByRef, System.Object ByRef, Boolean ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResultFilterAsync[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](State ByRef, Scope ByRef, System.Object ByRef, Boolean ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State ByRef, Scope ByRef, System.Object ByRef, Boolean ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker+\u003c\u003cInvokeAsync\u003eg__Logged|17_1\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker+\u003c\u003cInvokeAsync\u003eg__Logged|17_1\u003ed, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003c\u003cInvokeAsync\u003eg__Logged|17_1\u003ed ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker+\u003c\u003cInvokeAsync\u003eg__Logged|17_1\u003ed, Microsoft.AspNetCore.Mvc.Core, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003c\u003cInvokeAsync\u003eg__Logged|17_1\u003ed ByRef)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeAsync\u003eg__Logged|17_1(Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerRequestDelegateFactory+\u003c\u003ec__DisplayClass12_0.\u003cCreateRequestDelegate\u003eb__0(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.SetRoutingAndContinue(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware+\u003c\u003cInvoke\u003eg__AwaitMatcher|10_0\u003ed, Microsoft.AspNetCore.Routing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nAborted \r\n```",
                                           "updatedAt":  "2024-05-24T14:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-8FJp",
                                           "createdAt":  "2024-05-24T14:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjG1zQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2024-05-24T14:43:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This looks like a GC hole.",
                                           "updatedAt":  "2024-05-24T14:34:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-8Fwy",
                                           "createdAt":  "2024-05-24T14:34:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-24T14:34:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EYWEG",
                                           "createdAt":  "2024-07-10T16:30:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @maf1024 @cw-ametek would you be able to provide a dump of the failure? If this consistently repros on certain platform might be worth trying with `DOTNET__HeapVerify=1` which might help diagnose heap corruption. ",
                                           "updatedAt":  "2024-07-10T16:30:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EZfwL",
                                           "createdAt":  "2024-07-10T19:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maf1024",
                                           "body":  "@mangod9  Buried in my original wall of text was a [link](https://tempshare24.blob.core.windows.net/public/core_.NET%20TP%20Worker.29729) to one sample of a crash dump (hosted on my free MSDN credits 😊)\r\n\r\nI\u0027ll try to attempt with HeapVerify soon and see if it makes the failures more consistent. Would it also possibly yield a more useful crash dump? (I\u0027m unfamiliar with that option but it sounds like it does more exhaustive policing of memory)",
                                           "updatedAt":  "2024-07-10T19:33:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ehmzl",
                                           "createdAt":  "2024-07-11T16:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maf1024",
                                           "body":  "@mangod9 `DOTNET__HeapVerify=1` doesn\u0027t seem to change the randomness of failures on my platform. [Here\u0027s](https://tempshare24.blob.core.windows.net/public/withHeapVerify.tar.gz) a batch of dumps with that setting enabled.",
                                           "updatedAt":  "2024-07-11T16:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EiFc_",
                                           "createdAt":  "2024-07-11T17:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok, we will investigate. However, just realized that I had a typo in the env. var `DOTNET_HeapVerify=1` (single underscore not double :( ) ",
                                           "updatedAt":  "2024-07-11T17:45:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ete2D",
                                           "createdAt":  "2024-07-12T23:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "The dumps are not easily diagnosable since this is on a custom distro. Assume you are not able to repro on standard Debian/Ubuntu/Alpine ?",
                                           "updatedAt":  "2024-07-12T23:16:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E2yNJ",
                                           "createdAt":  "2024-07-15T16:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maf1024",
                                           "body":  "I don\u0027t have any other 32-bit ARM hardware to even test it out on.\r\n\r\nI\u0027m open to suggestions for virtualized approaches to repro in a more standardized way.",
                                           "updatedAt":  "2024-07-15T16:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E20tY",
                                           "createdAt":  "2024-07-15T16:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODp5f9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2024-07-16T05:02:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maf1024",
                                           "body":  "Also for what it\u0027s worth, `DOTNET_HeapVerify=1` when set correctly doesn\u0027t seem to change the randomness of the failures (and I did see a noticeable performance drop, indicating I set it correctly)",
                                           "updatedAt":  "2024-07-15T16:53:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GHahX",
                                           "createdAt":  "2024-07-25T11:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Olaf-Kober-AP",
                                           "body":  "We noticed the same issue while porting our .NET applications from Mono to .NET 7/8. Since we could not find a quick solution, we stayed on .NET 6 first, as .NET 6 does not show the same crashes.\r\n\r\nNote, our applications run on NXP iMX6 dual/quad cores (Cortex-A9 ARM32) with a custom Yocto-based Linux (kernel 5.15).\r\n\r\nWe initially observed random seg faults while running \"dotnet test\" (we run unit tests on our embedded target hardware), but were able to reproduce those seg faults also by running PowerShell Core, for example, a simple command like\r\n```\r\nwhile true; do dotnet .pwsh/pwsh.dll -c ls; done\r\n```\r\nseg faults within a few minutes. Even simple applications like `dotnet --info` crash, although it happens less often.\r\n\r\nBut the repo sample posted by @cw-ametek  (https://github.com/dotnet/runtime/issues/102396#issuecomment-2129641835) might be easier to debug. We verified it on our hw/os combination; it crashes almost immediately.\r\n\r\nWe tried different hardware and custom operating system versions in the past. For example, a Raspberry PI 3 with a Ubuntu 32.04 Server Edition, 32bit does not show these crashes. Also other hardware based on Cortex-A15 does not seg fault. Is this related to Cortex-A9 only? We are not sure yet.\r\n\r\nDisabling Ready2Run, Tier Compilation, and using different GC settings (server, without concurrent, background GC, etc.) does not change anything. But, reducing the number of CPU cores helps. For example, on a dual-core system the crashes don\u0027t happen that often, also, when binding the process via taskset to a single CPU core reduces the probability of these seg faults to almost zero.\r\n\r\nThat said, would it help if we provide crash dumps? We are also on a custom Linux distro, but we can provide the necessary symbols for debugging those dumps, if needed. \r\n\r\nCan we do anything else? As a company we have high interest in getting that fixed.",
                                           "updatedAt":  "2024-07-25T11:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GH1uT",
                                           "createdAt":  "2024-07-25T12:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I\u0027m using dotnet on ARM32 IoT devices in thousands, dotnet process uptime in months, without problems. My CPU is Allwinner H3, 4x ARM A7 on custom Yocto Linux. I have also monitoring of the nodes, so I see if there is process restart or any problem. I migrated from mono to dotnet 5.0 and now I\u0027m using latest 8.0 and kernel 5.15.35. My app is not small, about 1M of lines of code + external libraries.",
                                           "updatedAt":  "2024-07-25T12:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GMxM-",
                                           "createdAt":  "2024-07-25T22:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e That said, would it help if we provide crash dumps? \r\n\r\nCould you please share stacktrace of the crash to start with?",
                                           "updatedAt":  "2024-07-25T22:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GPu0l",
                                           "createdAt":  "2024-07-26T08:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Olaf-Kober-AP",
                                           "body":  "Sure!\r\n\r\nHere are a few managed-only stack traces that we recorded in the past (various applications).\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Collections.Generic.Dictionary`2[[Interop+Error, System.Net.Sockets, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Net.Sockets.SocketError, System.Net.Primitives, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].TryInsert(Error, System.Net.Sockets.SocketError, System.Collections.Generic.InsertionBehavior)\r\n   at System.Net.Sockets.SocketErrorPal.GetSocketErrorForNativeError(Error)\r\n   at System.Net.Sockets.SafeSocketHandle.DoCloseHandle(Boolean)\r\n   at System.Net.Sockets.SafeSocketHandle.CloseHandle(Boolean, Boolean)\r\n   at System.Net.Sockets.SafeSocketHandle.CloseAsIs(Boolean)\r\n   at System.Net.Sockets.Socket.Dispose(Boolean)\r\n   at System.Net.Sockets.Socket.Dispose()\r\n   at NetMQ.Core.Utils.Signaler..ctor()\r\n   at NetMQ.Core.Mailbox..ctor(System.String)\r\n   at NetMQ.Core.Ctx..ctor()\r\n   at NetMQ.NetMQConfig.get_Context()\r\n   at NetMQ.NetMQSocket..ctor(NetMQ.ZmqSocketType, System.String, DefaultAction)\r\n   at NetMQ.Sockets.PairSocket..ctor(System.String)\r\n   at NetMQ.Sockets.PairSocket.CreateSocketPair(NetMQ.Sockets.PairSocket ByRef, NetMQ.Sockets.PairSocket ByRef, System.Action`1\u003cNetMQ.Sockets.PairSocket\u003e, System.Action`1\u003cNetMQ.Sockets.PairSocket\u003e)\r\n   at NetMQ.NetMQQueue`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]..ctor(Int32)\r\n   at Darwin.Shared.Monitoring.Transport.MonitoringPublisher..ctor(Int32, Int32, System.TimeSpan, System.TimeSpan, PostSharp.Aspects.ConstructorDepth)\r\n   at Darwin.Shared.Monitoring.Transport.MonitoringPublisher..ctor(Int32, PostSharp.Aspects.ConstructorDepth)\r\n   at Darwin.Shared.Monitoring.Transport.MonitoringPublisher..ctor(Int32)\r\n   at Darwin.Shared.Monitoring.MonitoringServer+\u003cStartAsync\u003ed__39.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at Darwin.Shared.Monitoring.MonitoringServer.StartAsync(Boolean, Boolean)\r\n   at Darwin.Fabric.Systeme.Initializers.SystemMonitoringServerInitializer+\u003c_StartServer\u003ed__3.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at Darwin.Fabric.Systeme.Initializers.SystemMonitoringServerInitializer._StartServer(Darwin.Fabric.Runtime.IRuntimeData, Darwin.Shared.Monitoring.IMonitoringServer)\r\n   at Darwin.Fabric.Systeme.Initializers.SystemMonitoringServerInitializer+\u003c\u003ec__DisplayClass2_0+\u003c\u003c_SetupCounters\u003eb__0\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\r\n   at Darwin.Fabric.Systeme.Initializers.SystemMonitoringServerInitializer+\u003c\u003ec__DisplayClass2_0.\u003c_SetupCounters\u003eb__0()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__281_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n```\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Runtime.CompilerServices.CastHelpers.IsInstanceOfInterface(Void*, System.Object)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections.Generic.IEnumerable`1\u003cDarwin.Fabric.PluginId\u003e)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections.Generic.IEnumerable`1\u003cDarwin.Fabric.PluginId\u003e)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections.Generic.IEnumerable`1\u003cDarwin.Fabric.PluginId\u003e)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections.Generic.IEnumerable`1\u003cDarwin.Fabric.PluginId\u003e)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections.Generic.IEnumerable`1\u003cDarwin.Fabric.PluginId\u003e)\r\n   at System.Linq.Enumerable.ToArray[[Darwin.Fabric.PluginId, Darwin.Fabric, Version=6.1.0.0, Culture=neutral, PublicKeyToken=ab309ed73cde3b9e]](System.Collections\r\n...\r\n```\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Collections.Generic.HashSet`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AddIfNotPresent(System.__Canon, Int32 ByRef)\r\n   at System.Collections.Generic.HashSet`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Add(System.__Canon)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.get_ParseResultLogRules()\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.get_ParseResultLogRules()\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(System.String[], System.TimeSpan, Microsoft.DotNet.Cli.Telemetry.ITelemetry)\r\n   at Microsoft.DotNet.Cli.Program.Main(System.String[])\r\n```\r\n\r\n```\r\nProcess terminated. An exception was not handled in an AsyncLocal\u003cT\u003e notification callback.\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(System.Threading.ExecutionContext, System.Threading.ExecutionContext)\r\n   at System.Threading.ExecutionContext.RestoreChangedContextToThread(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ExecutionContext)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler+\u003c\u003ec.\u003c.cctor\u003eb__10_0(System.Object)\r\n   at System.Threading.Thread+StartHelper.RunWorker()\r\n   at System.Threading.Thread+StartHelper.Run()\r\n   at System.Threading.Thread.StartCallback()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.ExecutionContext.OnValuesChanged(ExecutionContext previousExecutionCtx, ExecutionContext nextExecutionCtx)\r\n```\r\n\r\nWe see very erratic exception patterns. Looks like a kind of memory corruption to me.\r\n\r\nRight now, a colleague is trying to get managed+native stack traces via lldb+sos from one of the crash dumps, but we are facing some problems. The thread causing the crash (seg fault) does not show any backtraces. Maybe the dump is corrupted, too. We are working on it and come back to you.\r\n\r\nSidenote: I have to hurry into vacation. My colleagues will take over.\r\n",
                                           "updatedAt":  "2024-07-26T08:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mkf74",
                                           "createdAt":  "2024-09-18T12:47:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lvorpahl-nokia",
                                           "body":  "We see the same random segmentation faults with our cross built armel dotnet 8.0 runtime.\r\nOur applications run on a Marvell Armada XP SoC (ARMv7 CPU) with a custom Yocto-based Linux (kernel 5.10).\r\nPreviously we used dotnet 6.0 where we did not see the problem.",
                                           "updatedAt":  "2024-09-18T12:47:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ml7aC",
                                           "createdAt":  "2024-09-18T15:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@lvorpahl-nokia Are you able to collect a crash dump and open it under lldb w/ SOS extension? The next step to diagnose these crashes is to run VerifyHeap SOS command on the crash dump to see whether the GC heap is corrupted.",
                                           "updatedAt":  "2024-09-18T15:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MmWaD",
                                           "createdAt":  "2024-09-18T16:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODytjHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "AndreyLalaev",
                                                                               "createdAt":  "2024-09-18T18:38:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  " Marvell Armada XP SoC is based on Sheeva PJ4B-MP cores, which are probably modified Cortex A8. The other cpu cores with this problem were Cortex A9. I don\u0027t know if it is relevant. A8 \u0026 A9 are older designs based on ARMv7 ISA.\r\n\r\nI have no problems with ARM A7 cores. Could there be a connection with different FPU (A8 \u0026 A9 have VFPv3)? More recent deisgns use VFPv4 (A7/15/17...)",
                                           "updatedAt":  "2024-09-18T16:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MnsbG",
                                           "createdAt":  "2024-09-18T19:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyLalaev",
                                           "body":  "@michaldobrodenka, hmm, it is an interesting point. Thank you!\r\n\r\nLooks like by default `coreclr` for ARM32 is compiled with 32 64-bits FPU support([link to doc](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/cross-building.md#cross-compiling-coreclr-for-other-vfp-configurations)), but Cortex-A9 uses VFPv3-D16.\r\nI will recompile `coreclr` for different FPU and retest tomorrow.",
                                           "updatedAt":  "2024-09-18T19:09:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MsS8Q",
                                           "createdAt":  "2024-09-19T09:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lvorpahl-nokia",
                                           "body":  "@jkotas Unfortunately no, our toolchain has no lldb support. Therefore I apologize that I can not contribute more than reporting that we see the crashes on our CPU. We compiled `coreclr` with VFPv3-D16.",
                                           "updatedAt":  "2024-09-19T09:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MtH9M",
                                           "createdAt":  "2024-09-19T10:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "\u003e @jkotas Unfortunately no, our toolchain has no lldb support. Therefore I apologize that I can not contribute more than reporting that we see the crashes on our CPU. We compiled `coreclr` with VFPv3-D16.\r\n\r\nSorry for off topic, but what is thre reason you are compiling coreclr by yourself? Still somewhere could be VPFv4 assembly? But small chance probably :(",
                                           "updatedAt":  "2024-09-19T10:42:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mtjha",
                                           "createdAt":  "2024-09-19T11:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lvorpahl-nokia",
                                           "body":  "We are running an armel Linux and there is no official armel build as far as I know.",
                                           "updatedAt":  "2024-09-19T11:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MtvTm",
                                           "createdAt":  "2024-09-19T12:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I\u0027m getting lost in these arm arch and abbreviations, but I\u0027m compiling dotnet for ARMv6, use mono-vm and it\u0027s usable on R Pi1. It\u0027s not `core-clr`, but it might be helpful.\r\n\r\nI\u0027m using it as a docker container to build self-contained executable which then runs on Raspberry Pi compute modules. Only downside is, that every timer will stop working after UInt32.Max millis (49.7days).\r\n\r\nIf you want to try it: https://hub.docker.com/r/taphome/dotnet-armv6",
                                           "updatedAt":  "2024-09-19T12:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MtwT4",
                                           "createdAt":  "2024-09-19T12:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "And you can still use dotnet with mono runtime for ARMv7, it might help, use `-p:UseMonoRuntime=true -p:SelfContained=true` when compiling your app",
                                           "updatedAt":  "2024-09-19T12:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7SpJ",
                                           "createdAt":  "2024-10-15T18:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dgloeck",
                                           "body":  "I have run the `dotnet pwsh.dll -c ls` test on several boards using the same rootfs (Debian 12.7 armhf), the same kernel binary (v5.15.79), the official .NET 8.0.10 release build, and the pwsh.dll from Powershell 7.4.5.\n\nI can confirm that an Allwinner H3 with its four Cortex-A7 does not crash (at least not within 3 days of running that command in a loop). On boards with i.MX6Q (Cortex-A9 r2p10) and Zynq 7020 (Cortex-A9 r3p0) dotnet does crash after less than a minute. I even tried i.MX6Q boards from different vendors to rule out that the board is at fault.\n\nSince the type of ARMv7 core clearly makes a difference, maybe it is a known Cortex-A9 erratum? strace tells me that dotnet performs about 12500 cacheflush operations for this simple test. Maybe one of them goes wrong because of erratum 764369? The workaround in the kernel is enabled, but the description of the erratum says that the error might occur anyway in \"extremely rare and complex timing conditions\". Does someone have connections to ARM to verify that this is a CPU core bug?",
                                           "updatedAt":  "2024-10-15T18:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SjxzE",
                                           "createdAt":  "2024-11-06T06:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikaelj",
                                           "body":  "Any combination of \"setarch linux32/linux64 -R program\" and DOTNET_ReadyToRun=0 still crashes on dotnet on the IMX6DL.",
                                           "updatedAt":  "2024-11-06T06:59:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCola",
                                           "createdAt":  "2025-02-19T10:48:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lukasostendorf",
                                           "body":  "I am having the same problem in our application. We are using imx6q boards with 4x Cortex-A9 and a custom distro with Linux 5.4.290. I used @cw-ametek\u0027s script above and get about 25% segfault rate. Our own application sometimes ends with SIGABRT. .NET 6 works fine.\n\nAbove it was mentioned whether recompiling coreclr with other flags could help, but our imx6q board has armv7-a arch, vfp3 support and 32 64bit FPU registers, which are the default options according to docs. I dont think that this is an issue.\n\nIf I pin the sample application to a single core via taskset, dotnet does not seem to crash anymore. So far I tried ~150 runs, no crash.\n\nI installed lldb and dotnet-sos on our target to get some more info.\n\nverifyheap shows no heap corruption.\n```\n(lldb) verifyheap\n12,798 objects verified, 0 errors.\nNo heap corruption detected.\n```\nclrstack\n```\n(lldb) clrstack -all\nOS Thread Id: 0xbcb\nChild SP       IP Call Site\nBE98E0A8 b6ba1b24 [HelperMethodFrame_1OBJ: be98e0a8] System.Threading.Monitor.ObjWait(Int32, System.Object)\nBE98E140 9182A69C System.Threading.Monitor.Wait(System.Object, Int32) [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156]\nBE98E158 91837404 System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561]\nBE98E1C0 918517F6 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3093]\nBE98E200 91851522 System.Threading.Tasks.Task.InternalWaitCore(Int32, System.Threading.CancellationToken) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3007]\nBE98E238 918B83D0 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task, System.Threading.Tasks.ConfigureAwaitOptions) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/TaskAwaiter.cs @ 104]\nBE98E250 918B8366 System.Runtime.CompilerServices.TaskAwaiter.GetResult() [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/TaskAwaiter.cs @ 68]\nBE98E258 90749A70 Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(Microsoft.Extensions.Hosting.IHost) [/_/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/HostingAbstractionsHostExtensions.cs @ 53]\nBE98E270 907BF72A Microsoft.AspNetCore.Builder.WebApplication.Run(System.String) [/_/src/DefaultBuilder/src/WebApplication.cs @ 194]\nBE98E280 B5410FC2 Program.\u003cMain\u003e$(System.String[]) [/home/lukas/crash/Program.cs @ 39]\nOS Thread Id: 0xbd6\nChild SP       IP Call Site\n936FEB98 b6ba1b24 [DebuggerU2MCatchHandlerFrame: 936feb98]\nOS Thread Id: 0xbd7\nChild SP       IP Call Site\n9102EBA0 b6ba1b24 [DebuggerU2MCatchHandlerFrame: 9102eba0]\nOS Thread Id: 0xbd8\nChild SP       IP Call Site\n8CE3A93C b6ba1b24 [InlinedCallFrame: 8ce3a93c]\n8CE3A93C 8d04b4a8 [InlinedCallFrame: 8ce3a93c]\n8CE3A938 8D04B4A8 Interop+Sys.Read(System.Runtime.InteropServices.SafeHandle, Byte*, Int32) [/_/src/libraries/System.IO.FileSystem.Watcher/src/Microsoft.Interop.LibraryImportGenerator/Microsoft.Interop.LibraryImportGenerator/LibraryImports.g.cs @ 22]\n8CE3A9A0 8D0504F4 System.IO.FileSystemWatcher+RunningInstance.TryReadEvent(NotifyEvent ByRef) [/_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Linux.cs @ 790]\n8CE3A9E0 8D0500EC System.IO.FileSystemWatcher+RunningInstance.ProcessEvents() [/_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Linux.cs @ 559]\n8CE3AA88 8D0509C2 System.IO.FileSystemWatcher+RunningInstance+\u003c\u003ec.\u003cStart\u003eb__14_0(System.Object) [/_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Linux.cs @ 300]\n8CE3AA90 9182AEC8 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n8CE3AB68 b6903f76 [DebuggerU2MCatchHandlerFrame: 8ce3ab68]\nOS Thread Id: 0xbda\nChild SP       IP Call Site\n8A93C998 b6ba1b24 [HelperMethodFrame_1OBJ: 8a93c998] System.Threading.Monitor.ObjWait(Int32, System.Object)\n8A93CA30 9182A69C System.Threading.Monitor.Wait(System.Object, Int32) [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156]\n8A93CA48 9182A944 System.Threading.Monitor.Wait(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Monitor.cs @ 20]\n8A93CA50 8C16CF7E Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.TryDequeue(Microsoft.Extensions.Logging.Console.LogMessageEntry ByRef) [/_/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProcessor.cs @ 165]\n8A93CA78 8C16CD42 Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.ProcessLogQueue() [/_/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProcessor.cs @ 104]\n8A93CA90 9182AE76 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n8A93CB68 b6903f76 [DebuggerU2MCatchHandlerFrame: 8a93cb68]\nOS Thread Id: 0xbdf\nChild SP       IP Call Site\n88343920 b6ba1b24 [HelperMethodFrame_1OBJ: 88343920] System.Threading.Monitor.ObjWait(Int32, System.Object)\n883439B8 9182A69C System.Threading.Monitor.Wait(System.Object, Int32) [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Monitor.CoreCLR.cs @ 156]\n883439D0 91837404 System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 561]\n88343A38 91837086 System.Threading.ManualResetEventSlim.Wait(System.TimeSpan) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ManualResetEventSlim.cs @ 397]\n88343A70 8BB1868C Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat.TimerLoop() [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/Heartbeat.cs @ 74]\n88343A88 8BB7F8B2 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat+\u003c\u003ec.\u003c.ctor\u003eb__8_0(System.Object) [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/Heartbeat.cs @ 30]\n88343A90 9182AEC8 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n88343B68 b6903f76 [DebuggerU2MCatchHandlerFrame: 88343b68]\nOS Thread Id: 0xbdb\nChild SP       IP Call Site\n8A010B68 86dc1000 [DebuggerU2MCatchHandlerFrame: 8a010b68]\nOS Thread Id: 0xbdc\nChild SP       IP Call Site\n8980B8DC b6ba1b24 [HelperMethodFrame: 8980b8dc] System.Threading.WaitHandle.WaitOneCore(IntPtr, Int32)\n8980B970 9182E45A System.Threading.WaitHandle.WaitOneNoCheck(Int32) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs @ 128]\n8980B998 91847638 System.Threading.PortableThreadPool+GateThread.GateThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.GateThread.cs @ 54]\n8980BA90 9182AE76 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n8980BB68 b6903f76 [DebuggerU2MCatchHandlerFrame: 8980bb68]\nOS Thread Id: 0xbdd\nChild SP       IP Call Site\n897C6254 b6ba1b26 [DynamicHelperFrame: 897c6254]\n897C62C8 8BB173AC Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.BodyControl..ctor(Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature, Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpResponseControl) [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/BodyControl.cs @ 36]\n897C62F8 8BB6CAC8 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.InitializeBodyControl(Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody) [/_/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs @ 322]\n897C6320 8BBA0090 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs @ 667]\n897C63D8 86DBD332 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequests\u003ed__238`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\n897C6458 86DBD21E System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__238`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequests\u003ed__238`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\n897C6480 8BBA35A2 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[[System.__Canon, System.Private.CoreLib]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\n897C64E0 8BBA0AB2 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs @ 576]\n897C6530 86DBD140 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequestsAsync\u003ed__237`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\n897C6588 86DBD072 System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__237`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequestsAsync\u003ed__237`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\n897C65B0 8BBA3522 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[[System.__Canon, System.Private.CoreLib]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\n897C65E8 8BB993A6 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/Servers/Kestrel/Core/src/Internal/HttpConnection.cs @ 109]\n897C66B0 86DBBF84 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequestsAsync\u003ed__12`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\n897C6730 86DBBE6E System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cProcessRequestsAsync\u003ed__12`1\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\n897C6758 8BBA21D2 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[[System.__Canon, System.Private.CoreLib]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\n897C67B8 8BB968DE Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnectionMiddleware`1[[System.__Canon, System.Private.CoreLib]].OnConnectionAsync(Microsoft.AspNetCore.Connections.ConnectionContext) [/_/src/Servers/Kestrel/Core/src/Middleware/HttpConnectionMiddleware.cs @ 51]\n897C6820 8BB8397A Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.TransportManager+\u003c\u003ec__DisplayClass10_0.\u003cBindAsync\u003eb__0(Microsoft.AspNetCore.Connections.ConnectionContext) [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/TransportManager.cs @ 49]\n897C6828 8BB9A2AE Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/KestrelConnectionOfT.cs @ 69]\n897C68B8 86DBB104 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cExecuteAsync\u003ed__8\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\n897C6930 86DBAFFE System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1+\u003cExecuteAsync\u003ed__8[[System.__Canon, System.Private.CoreLib]], Microsoft.AspNetCore.Server.Kestrel.Core]](\u003cExecuteAsync\u003ed__8\u003cSystem.__Canon\u003e ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\n897C6958 8BB9747C Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1[[System.__Canon, System.Private.CoreLib]].ExecuteAsync()\n897C69A8 8BB97410 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection`1[[System.__Canon, System.Private.CoreLib]].System.Threading.IThreadPoolWorkItem.Execute() [/_/src/Servers/Kestrel/Core/src/Internal/Infrastructure/KestrelConnectionOfT.cs @ 38]\n897C69B0 9183FF4E System.Threading.ThreadPoolWorkQueue.Dispatch() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 1010]\n897C69F0 9184A9D6 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.NonBrowser.cs @ 102]\n897C6A90 9182AE76 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n897C6B68 b6903f76 [DebuggerU2MCatchHandlerFrame: 897c6b68]\nOS Thread Id: 0xbe0\nChild SP       IP Call Site\n875C7A18 b6ba1b26 [InlinedCallFrame: 875c7a18]\n875C7A18 8b749040 [InlinedCallFrame: 875c7a18]\n875C7A10 8B749040 System.Net.Sockets.SocketAsyncEngine.EventLoop() [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEngine.Unix.cs @ 183]\n875C7A88 8B749672 System.Net.Sockets.SocketAsyncEngine+\u003c\u003ec.\u003c.ctor\u003eb__14_0(System.Object) [/_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEngine.Unix.cs @ 162]\n875C7A90 9182AEC8 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\n875C7B68 b6903f76 [DebuggerU2MCatchHandlerFrame: 875c7b68]\nOS Thread Id: 0xbe4\nChild SP       IP Call Site\n86D62B68 86dc1000 [DebuggerU2MCatchHandlerFrame: 86d62b68]\nOS Thread Id: 0xbe5\nChild SP       IP Call Site\n8655DB68 b6cad8b4 [DebuggerU2MCatchHandlerFrame: 8655db68]\n```\n\nI ran a few more commands, e.g. native stack. See attached log.\n[dotnet8_arm32_lldb_log.txt](https://github.com/user-attachments/files/18866301/dotnet8_arm32_lldb_log.txt)\n\nIf there is anything else to check, let me know.",
                                           "updatedAt":  "2025-02-19T10:49:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o2Y3t",
                                           "createdAt":  "2025-04-27T00:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jpdillingham",
                                           "body":  "To hopefully add to the discussion, my .NET 8 app is crashing on a Raspberry Pi 4 (ARM64) running a 32 bit OS (Raspbian) with the following:\n\n```\nUnhandled exception. System.Runtime.InteropServices.COMException (0x8007054F): An internal error occurred.\n(0x8007054F)\n   at System.Threading.WaitHandle.WaitOneCore(IntPtr waitHandle, Int32 millisecondsTimeout)\n   at System.Threading.WaitHandle.WaitOneNoCheck(Int32 millisecondsTimeout)\n   at System.Threading.TimerQueue.TimerThread()\n   at System.Threading.Thread.StartCallback()\nFatal error. Internal CLR error. (0x80131506)\n   at System.Threading.WaitHandle.WaitOneCore(IntPtr, Int32)\n   at System.Threading.WaitHandle.WaitOneNoCheck(Int32)\n   at System.Threading.TimerQueue.TimerThread()\n   at System.Threading.Thread.StartCallback()\n```\n\nBased on the content, I\u0027m guessing the issue is this code (forgive me if this is way off base, I\u0027ve only skimmed the thread and didn\u0027t really grok what I did read 🙃):\n\n```c#\nprivate static Mutex Mutex { get; } = new Mutex(initiallyOwned: true, Compute.Sha256Hash(AppName));\n\n\n            if (!Mutex.WaitOne(millisecondsTimeout: 0, exitContext: false))\n            {\n                Log.Fatal($\"An instance of {AppName} is already running\");\n                return;\n            }\n```",
                                           "updatedAt":  "2025-04-27T00:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69K78h",
                                           "createdAt":  "2025-08-11T08:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "Just got an error report on an app that ran into a memory issue on a custom arm32 running a fwd (pure .NET (no native)) console application: \n\n\u003cimg width=\"1265\" height=\"284\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c903bd94-c7c1-4758-b864-4a8f58edd907\" /\u003e\n\n\nCrashes when communication starts. \n\nThis app has been verified to work on arm64 (Raspberrian) and x64 (WSL) - Linux and x64 Windows. ",
                                           "updatedAt":  "2025-08-11T08:35:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Lbqg",
                                           "createdAt":  "2025-08-11T09:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "\u003e Just got an error report on an app that ran into a memory issue on a custom arm32 running a fwd (pure .NET (no native)) console application:\n\u003e \n\u003e \u003cimg alt=\"Image\" width=\"1265\" height=\"284\" src=\"https://private-user-images.githubusercontent.com/9577365/476482879-c903bd94-c7c1-4758-b864-4a8f58edd907.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTQ5MDM5MzYsIm5iZiI6MTc1NDkwMzYzNiwicGF0aCI6Ii85NTc3MzY1LzQ3NjQ4Mjg3OS1jOTAzYmQ5NC1jN2MxLTQ3NTgtYjg2NC00YThmNThlZGQ5MDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDgxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA4MTFUMDkxMzU2WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MzdlMWUzM2M2OTU0MjFlYTY1NzYwNTdiM2IwNzdmNTg5YzVmZmFmYzlmN2Q0MWI1M2IwOGIyMjk5NzY4ZTkxYSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.l3WMfbQDoZfTqkAglsk1DXJgbbjU1kJ0aQ2YhBBZA_4\"\u003e\n\u003e Crashes when communication starts.\n\u003e \n\u003e This app has been verified to work on arm64 (Raspberrian) and x64 (WSL) - Linux and x64 Windows.\n\nWhat CPU do you use? Can you try to run this app with mono runtime? https://github.com/dotnet/runtime/issues/102396#issuecomment-2360804600",
                                           "updatedAt":  "2025-08-11T09:15:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Ltcx",
                                           "createdAt":  "2025-08-11T09:38:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "CPU: TI-AM3352 my source tells me. \n\n@michaldobrodenka , How would that mono runtime thing work ? \nPlease answer this: \n1) \nYour example says: \n_p:UseMonoRuntime=true -p:SelfContained=true_\n\nbut can I do it framework dependent instead? \n_p:UseMonoRuntime=true -p:SelfContained=false_\n\n\n2) Also, would this require me to run mono instead of dotnet xxx.dll ? ",
                                           "updatedAt":  "2025-08-11T09:40:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Lwu1",
                                           "createdAt":  "2025-08-11T09:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I use on ARMv7 only self contained apps, I\u0027m just curious if your problem is reproducible if it helps. I don\u0027t know if it can be used in framework dependent apps.",
                                           "updatedAt":  "2025-08-11T09:43:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69L9AK",
                                           "createdAt":  "2025-08-11T09:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd0sKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "JensNordenbro",
                                                                               "createdAt":  "2025-08-11T11:50:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I\u0027m not an expert, according to this doc it should work on your CPU https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/cross-building.md#cross-compiling-coreclr-for-other-vfp-configurations\n\nYour cpu TI AM3352 (Cortex-A8) should have VFPv3-D32, so it should be ok. But I have seems that dotnet was problematic on older core A8/A9 and ok on newer cores A7. If you are brave enough you can try to recompile your framework according to mentioned doc: `./build.sh --subset clr --configuration Release --cross --arch arm --cmakeargs \"-DCLR_ARM_FPU_CAPABILITY=0x3\" --cmakeargs \"-DCLR_ARM_FPU_TYPE=vfpv3-d16\"` for older FPU",
                                           "updatedAt":  "2025-08-11T09:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A7OOw",
                                           "createdAt":  "2025-08-29T11:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "My investigation shows: \nFor .NET8, .NET9, .NET10-preview runtimes\n+ Cortex A7 Raspberry PI 2 with RetroPI OS (latest release)\n+ Cortex A8 BeagleBone Black with Debian from 2025\n+ Cortex A9 iMX6 on custom Yocto system\n..all  work using both the .NET runtime and MONO runtime! \n\nThe customer system with the same CPU as BeagleBone Black does NOT work using the .NET-runtime. \nThis system has 8 year old software. I have been able to extract limited information but at least I know that:\n+ Linux Kernel 4.14.40 is from 2018, GCC 7.2 is from Nov 2017.\nThe system works with the MONO runtime. Thanks @michaldobrodenka  for the hint. \n\n**Are there any known barriers wrt kernel or GCC versions for .NET runtime?** I am under the impression that from a user space perspective the system is mostly affected by the kernel and libc and pot. minor things. \n\nOne problem is that it seems that, as I understand it, MONO runtime will be removed starting with .NET10, making the \"embedded\" support from .NET SDK worse, unless this is fixed. ",
                                           "updatedAt":  "2025-08-29T11:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A8juC",
                                           "createdAt":  "2025-08-29T13:45:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyLalaev",
                                           "body":  "\u003e Cortex A9 iMX6 on custom Yocto system\n    ..all work using both the .NET runtime and MONO runtime!\n\n@JensNordenbro, interesting. Could you please describe how you tested? In our case (iMX6Q with custom Yocto distro) .NET8 and later crashes :/\n",
                                           "updatedAt":  "2025-08-29T13:45:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A-NtU",
                                           "createdAt":  "2025-08-29T16:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "Well. I extracted the arm32 dotnet 8 runtime zip in a folder and added it to the path. Then I just ran my framework dependent app using dotnet xxx.dll and it worked great.\nMono experiment was selfcontained. \n\n\nWhat specifics do you want to know about @AndreyLalaev ?",
                                           "updatedAt":  "2025-08-29T16:05:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A-Z2t",
                                           "createdAt":  "2025-08-29T16:23:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyLalaev",
                                           "body":  "@JensNordenbro, could you say which kernel version \u0026 yocto release you used for iMX6?",
                                           "updatedAt":  "2025-08-29T16:23:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B2-eu",
                                           "createdAt":  "2025-09-04T08:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhQhkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndreyLalaev",
                                                                               "createdAt":  "2025-09-08T07:40:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "@AndreyLalaev :\nyocto: scarthgap\nkernel: NXP fork, 6.6.3\nlibc: libc6 2.39+git0+273a835fe7-r0\n\n...again (dotnet works fine on this conf) ",
                                           "updatedAt":  "2025-09-04T08:57:27Z"
                                       }
                                   ],
                         "totalCount":  42
                     },
        "title":  "Random segmentation fault in managed code on 32-bit ARM linux with dotnet 8.0",
        "labels":  [
                       "arch-arm32",
                       "tenet-reliability",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103340",
        "createdAt":  "2024-06-12T12:36:50Z",
        "number":  103340,
        "author":  "jnyrup",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC75ZyA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martinbernat",
                                            "createdAt":  "2024-06-13T21:05:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cliffchapmanrbx",
                                            "createdAt":  "2024-06-14T21:08:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "max-au",
                                            "createdAt":  "2024-10-17T00:06:55Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-09-04T20:34:47Z",
        "body":  "https://github.com/dotnet/runtime/pull/101490#issuecomment-2083213585 asked for a scenario to justify backporting the PR to .NET 8, but the PR has since been auto-closed, hence this new issue and an attempt to provide a justification.\r\n\r\nSearching [previous issues](https://github.com/dotnet/runtime/issues?q=is%3Aissue+EnableWriteXorExecute%3D0+) and most recently #102226 and #103063 are examples where the workaround to a crash or performance regression is to disable W^X by setting the environment variable `DOTNET_EnableWriteXorExecute=0`.\r\n\r\nIn our case we need to disable `EnableWriteXorExecute` for a particular application due to #75455.\r\nAs we run this application in Visual Studio, AWS Elastic Beanstalk (EB) and AWS Elastic Container Services (ECS) we would need to set that environment variable three different places.\r\nThis is doable but is an annoyance having to do it in multiple places \"far away\" from the part of the code needing to have W^X disabled.\r\n\r\nAs W^X is a security feature one should preferably only disable it where necessary.\r\nImagine we have the project structure `A -\u003e { B, C }` (A is compiled with either project B or C) and only B requires disabling W^X.\r\nDisabling W^X globally for A also disables it when compiled together with project C.\r\nBeing able to disable W^X in project B either in its `runtimeconfig.template.json` or in `B.csproj` and in combination with `\u003cGenerateRuntimeConfigurationFiles\u003e` should ensure that W^X is only disable when compiling project A together with project B.\r\nThis could be further expanded to e.g. only disable W^X when compiling for a certain OS or CPU arch.\r\n\r\nLet me know if this is the kind of scenario/justification that was sought to help determining if backporting to .NET 8 is feasible.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOit_FMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6A7PVj",
                                           "createdAt":  "2024-06-12T13:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-12T13:28:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E8Jjl",
                                           "createdAt":  "2024-07-16T08:49:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnyrup",
                                           "body":  "I might be misunderstanding this project\u0027s use of milestones, but I\u0027m a bit confused about why this is added to the [9.0.0](https://github.com/dotnet/runtime/milestone/124) milestone.\r\nSince #101490 is already in main, shouldn\u0027t the milestone for a _backport_ be e.g. [8.0.x](https://github.com/dotnet/runtime/milestone/130)?",
                                           "updatedAt":  "2024-07-16T14:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KCEwM",
                                           "createdAt":  "2024-08-28T16:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnyrup",
                                           "body":  "@mangod9 Have you a chance to look at my question above regarding the milestone?",
                                           "updatedAt":  "2024-08-28T16:30:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K38Uy",
                                           "createdAt":  "2024-09-04T20:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "yeah changed it to 8, we are still evaluating whether to port to 8. ",
                                           "updatedAt":  "2024-09-04T20:34:41Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Possible backport of \"Read EnableWriteXorExecute from runtimeConfig\" to .NET 8",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103465",
        "createdAt":  "2024-06-14T08:00:19Z",
        "number":  103465,
        "author":  "rzsc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-14T14:15:05Z",
        "body":  "`WriteXorExecute` is not fully supported on `riscv64` architecture yet.\r\nIt\u0027s been requested to disable it in default CLR configuration for `riscv64` architecture in PR #103408.\r\n\r\nThis issue is created to remain about re-enabling `WriteXorExecute` on riscv64 architecture when it gets full support.\r\n\r\nPart of #84834, cc @dotnet/samsung",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgTdHdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BN0d0",
                                           "createdAt":  "2024-06-14T12:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-14T12:07:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[RISC-V] Re-enable WriteXorExecute on riscv64 architecture.",
        "labels":  [
                       "area-VM-coreclr",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103489",
        "createdAt":  "2024-06-14T20:12:12Z",
        "number":  103489,
        "author":  "davidwrighton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T18:26:08Z",
        "body":  "### Description\n\nThe Linux Arm64 Release build as built with our current toolchain cannot unwind the `MethodTable::GetNativeSize` function. This causes the CoreCLR Pri1 Interop test suite to hang.\r\n\r\nOutput in gdb at the hang.\r\n\r\n```\r\nThread 1 \"corerun\" hit Breakpoint 1, RealCOMPlusThrow (throwable=0xffbfa2844560, rethrow=0, rethrow@entry=-11856) at /runtime/src/coreclr/vm/excep.cpp:2839\r\n2839    in /runtime/src/coreclr/vm/excep.cpp\r\n(gdb) bt\r\n#0  RealCOMPlusThrow (throwable=0xffbfa2844560, rethrow=0, rethrow@entry=-11856) at /runtime/src/coreclr/vm/excep.cpp:2839\r\n#1  0x0000fffff75ec8c0 in RealCOMPlusThrow (throwable=0xffbfa2844560) at /runtime/src/coreclr/vm/excep.cpp:2877\r\n#2  0x0000fffff7855220 in CallDescrWorkerInternal () at /runtime/src/coreclr/vm/arm64/calldescrworkerarm64.S:71\r\n#3  0x0000fffff76b9d30 in CallDescrWorkerWithHandler (pCallDescrData=0xffffffffd200, fCriticalCall=\u003coptimized out\u003e) at /runtime/src/coreclr/vm/callhelpers.cpp:67\r\n#4  DispatchCallSimple (pSrc=pSrc@entry=0xffffffffd2c8, numStackSlotsToCopy=0, numStackSlotsToCopy@entry=4294955712, pTargetAddress=\u003coptimized out\u003e,\r\n    pTargetAddress@entry=281473778063096, dwDispatchCallSimpleFlags=\u003coptimized out\u003e, dwDispatchCallSimpleFlags@entry=4294955712) at /runtime/src/coreclr/vm/callhelpers.cpp:218\r\n#5  0x0000fffff76e4ee8 in (anonymous namespace)::CallGetInterfaceImplementation (objPROTECTED=\u003coptimized out\u003e, interfaceTypeHandle=...)\r\n    at /runtime/src/coreclr/vm/dynamicinterfacecastable.cpp:57\r\n#6  DynamicInterfaceCastable::GetInterfaceImplementation (objPROTECTED=objPROTECTED@entry=0xffffffffd7a0, typeHandle=...)\r\n    at /runtime/src/coreclr/vm/dynamicinterfacecastable.cpp:88\r\n#7  0x0000fffff76a3150 in VirtualCallStubManager::Resolver (pMT=pMT@entry=0xffffb8a459a0, token=token@entry=..., protectedObj=protectedObj@entry=0xffffffffd7a0,\r\n    ppTarget=ppTarget@entry=0xffffffffd480, throwOnConflict=throwOnConflict@entry=1) at /runtime/src/coreclr/vm/virtualcallstub.cpp:2029\r\n#8  0x0000fffff76a2774 in VirtualCallStubManager::ResolveWorker (this=0xaaaaaab47b70, pCallSite=\u003coptimized out\u003e, protectedObj=0xffffffffd7a0, token=..., stubKind=\u003coptimized out\u003e)\r\n    at /runtime/src/coreclr/vm/virtualcallstub.cpp:1568\r\n#9  0x0000fffff76a1f88 in VSD_ResolveWorker (pTransitionBlock=\u003coptimized out\u003e, siteAddrForRegisterIndirect=\u003coptimized out\u003e, token=90194313216, flags=\u003coptimized out\u003e)\r\n    at /runtime/src/coreclr/vm/virtualcallstub.cpp:1381\r\n#10 0x0000fffff7854bf0 in ResolveWorkerAsmStub () at /runtime/src/coreclr/vm/arm64/asmhelpers.S:598\r\n#11 0x0000ffffb8ab1828 in ?? ()\r\n#12 0x0000ffbfa2838420 in ?? ()\r\nBacktrace stopped: previous frame inner to this frame (corrupt stack?)\r\n```\r\n\r\n\n\n### Reproduction Steps\n\nBuild the linux arm64 Release build of coreclr, and run the Interop coreclr test workitem.\n\n### Expected behavior\n\nTest passes\n\n### Actual behavior\n\nInterop test leg produces output that ends with the following sequence:\r\n\r\n```\r\nRunning BlittableClassByOutAttr...\r\n07:41:22.315 Passed test: global::LayoutClass.LayoutClassTest.BlittableClassByOutAttr()\r\n07:41:22.316 Running test: global::LayoutClass.LayoutClassTest.SealedBlittableClass()\r\nRunning SealedBlittableClass...\r\n07:41:22.317 Passed test: global::LayoutClass.LayoutClassTest.SealedBlittableClass()\r\n07:41:22.318 Running test: global::LayoutClass.LayoutClassTest.SealedBlittableClassByInAttr()\r\nRunning SealedBlittableClassByOutAttr...\r\n07:41:22.319 Passed test: global::LayoutClass.LayoutClassTest.SealedBlittableClassByInAttr()\r\n07:41:22.320 Running test: global::LayoutClass.LayoutClassTest.SealedBlittableClassByOutAttr()\r\nRunning SealedBlittableClassByOutAttr...\r\n07:41:22.320 Passed test: global::LayoutClass.LayoutClassTest.SealedBlittableClassByOutAttr()\r\n07:41:22.322 Running test: global::LayoutClass.LayoutClassTest.SealedBlittablePinned()\r\nRunning SealedBlittablePinned...\r\n07:41:22.322 Passed test: global::LayoutClass.LayoutClassTest.SealedBlittablePinned()\r\n07:41:22.323 Running test: global::LayoutClass.LayoutClassTest.BlittablePinned()\r\nRunning BlittablePinned...\r\n07:41:22.324 Passed test: global::LayoutClass.LayoutClassTest.BlittablePinned()\r\n07:41:22.325 Running test: global::LayoutClass.LayoutClassTest.NestedLayoutClass()\r\nRunning NestedLayoutClass...\r\n07:41:22.326 Passed test: global::LayoutClass.LayoutClassTest.NestedLayoutClass()\r\n07:41:22.327 Running test: global::LayoutClass.LayoutClassTest.RecursiveNativeLayout()\r\nRunning RecursiveNativeLayout...\r\nChild process took too long. Timed out... Exiting...\r\nApp Exit Code: 110\r\nExpected: 100\r\nActual: 110\r\nEND EXECUTION - FAILED\r\n+ test_exit_code=1\r\n+ dotnet /root/helix/work/correlation/XUnitLogChecker/XUnitLogChecker.dll --results-path Interop/Interop --test-wrapper Interop --dumps-path /home/helixbot/dotnetbuild/dumps\r\n[XUnitLogChecker]: 09:40:45.28: The full run will be done.\r\n[XUnitLogChecker]: 09:40:45.64: Item \u0027Interop\u0027 did not finish running. Checking and fixing the log...\r\n[XUnitLogChecker]: 09:40:45.74: XUnit log file has been fixed!\r\n\r\n22/286 tests run.\r\n* 22 tests passed.\r\n* 0 tests failed.\r\n* 0 tests skipped.\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nPut `[[clang::optnone]]` attribute on the `MethodTable::GetNativeSize` function.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhge5xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BQ6se",
                                           "createdAt":  "2024-06-14T20:12:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-14T20:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BRz1t",
                                           "createdAt":  "2024-06-14T23:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlwZJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2024-06-14T23:54:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-06-15T00:24:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "@jkoritzinsky @sbomer when we update clang or optimization data... we should revisit if we need the workaround",
                                           "updatedAt":  "2024-06-14T23:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bisbn",
                                           "createdAt":  "2024-06-17T13:08:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@davidwrighton have you tried to debug why the unwinder doesn\u0027t work? I also don\u0027t see the `MethodTable::GetNativeSize` on the call stack shown above, so I\u0027d like to understand where it the process an attempt to unwind it was made.",
                                           "updatedAt":  "2024-06-17T13:08:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bm4Gi",
                                           "createdAt":  "2024-06-17T21:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@davidwrighton one more question - how did you build the runtime? I\u0027ve built it on my Ubuntu 22.04 arm64 device with the default clang 14.0 and I was unable to repro the issue. So I\u0027d like to build it the same way you did.",
                                           "updatedAt":  "2024-06-17T21:25:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B4g_r",
                                           "createdAt":  "2024-06-19T16:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "The official cross build docker image is the one that failed. My local build on an arm64 Ubuntu machine also didn\u0027t fail.",
                                           "updatedAt":  "2024-06-19T16:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B4hpr",
                                           "createdAt":  "2024-06-19T16:21:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Oh... And I must have copied the wrong back trace. Sorry. The one that really failed had a MethodTable::GetNativeSize in it",
                                           "updatedAt":  "2024-06-19T16:21:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GBwT9",
                                           "createdAt":  "2024-07-24T17:59:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli, is this issue actionable for 9? ",
                                           "updatedAt":  "2024-07-24T17:59:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GB05T",
                                           "createdAt":  "2024-07-24T18:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@mangod9 it can be moved to the next version, I\u0027d just like to understand what\u0027s causing the unwind problem here - whether it is a compiler problem or the unwinder issue. David has already merged in a workaround for this, so it is not urgent.\r\n",
                                           "updatedAt":  "2024-07-24T18:09:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GB7nG",
                                           "createdAt":  "2024-07-24T18:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok moved out off 9 now. ",
                                           "updatedAt":  "2024-07-24T18:26:07Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Linux Arm64 Release build cannot unwind the `MethodTable::GetNativeSize` function",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105463",
        "createdAt":  "2024-07-25T10:13:55Z",
        "number":  105463,
        "author":  "gs-niteesh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-09T10:06:35Z",
        "body":  "# Description\r\nOur application is experiencing a freeze; upon analyzing the minidump, it appears as if the threads are deadlocked during thread suspension for GC.\r\n\r\nOur application is an agent that sits in a remote computer and connects to our server, transferring metrics and logs. The agent and the server communicate through HTTP and RPC.\r\n\r\nWe are uncertain about the conclusions drawn from our analysis. Therefore, we have raised this issue to seek confirmation of our findings.\r\n\r\n# Version\r\n```\r\n0:011\u003e !eeversion\r\n4.7.4095.0 free\r\nWorkstation mode\r\nSOS Version: 4.7.4095.0 retail build\r\n```\r\n\r\n# Analysis\r\nWe took a mini dump of the application process, and below is the summary of our analysis.\r\n\r\nThe `GC thread (IDX: 12 TID: 0x1470)` is in the mark phase and is trying to suspend the runtime while holding the `ThreadStoreLock (0x000001b685b1dc10)`, meanwhile there is an RPC call from the server, so a new unmanaged thread is created by the RPC system, and the RPC callback is invoked. In the RPC callback we invoke a C# function. We are not sure which function is invoked on our side(The stack trace of the `RPC Thread (IDX: 13 TID: 0x408)` mentions function `REM_SendMsgToAdapServer` but we are sure it is not the function that is not being called) but based on the stack trace it seems like a new managed thread is created in the invoked C# function, and while registering the newly created thread to the `ThreadStore` we try to acquire the `ThreadStoreLock(0x000001b685b1dc10)` but it has been acquired already by the background GC thread, thus causing a deadlock.\r\n\r\nI have attached the DebugDias diagnosis file. It contains stack traces of all the threads, information on critical sections, etc. But I am happy to post additional information if required.\r\n[ADAPAgent_MultipleRules.zip]()\r\n\r\nBelow is the output of the `ThreadState` command for all the threads, which is missing in the diagnosis file.\r\n```\r\n0:011\u003e !ThreadState 1470\r\n    GC On Transitions\r\n    Legal to Join\r\n    Yield Requested\r\n    Unstarted\r\n    CLR Owns\r\n0:011\u003e !ThreadState 11cc\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    Yield Requested\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    CLR Owns\r\n0:011\u003e !ThreadState 1278\r\n    Debug Suspend Pending\r\n    GC On Transitions\r\n    Legal to Join\r\n    Yield Requested\r\n    Background\r\n    CLR Owns\r\n0:011\u003e !ThreadState 11ac\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    Legal to Join\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    CLR Owns\r\n0:011\u003e !ThreadState a44\r\n    User Suspend Pending\r\n    Yield Requested\r\n    Background\r\n    Dead\r\n0:011\u003e !ThreadState 19c\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    GC On Transitions\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n0:011\u003e !ThreadState 3d0\r\n    GC On Transitions\r\n    Yield Requested\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    Background\r\n0:011\u003e !ThreadState d4c\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    Yield Requested\r\n    Blocking GC for Stack Overflow\r\n    Unstarted\r\n    Dead\r\n0:011\u003e !ThreadState c5c\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    GC On Transitions\r\n    Yield Requested\r\n    Unstarted\r\n    Dead\r\n0:011\u003e !ThreadState f80\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    Background\r\n    Unstarted\r\n    Dead\r\n0:011\u003e !ThreadState dac\r\n    User Suspend Pending\r\n    Debug Suspend Pending\r\n    Legal to Join\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    Unstarted\r\n    Dead\r\n0:011\u003e !ThreadState da8\r\n    Debug Suspend Pending\r\n    Legal to Join\r\n    Hijacked by the GC\r\n    Blocking GC for Stack Overflow\r\n    Unstarted\r\n    Dead\r\n0:011\u003e !ThreadState a24\r\n    User Suspend Pending\r\n    Legal to Join\r\n    Background\r\n    Dead\r\n```\r\n\r\nPlease confirm if our analysis is correct, f it is correct, kindly suggest a solution or workaround to address the issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh8FTqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GG-hj",
                                           "createdAt":  "2024-07-25T10:14:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-25T10:14:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gfhta",
                                           "createdAt":  "2024-07-29T16:42:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-29T16:42:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gfkxh",
                                           "createdAt":  "2024-07-29T16:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mangod9 I just put this in the VM area path.   I noticed from the thread state information in the repro steps that a stack overflow is in progress.  Perhaps that is related to the deadlock?",
                                           "updatedAt":  "2024-07-29T16:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G8qMH",
                                           "createdAt":  "2024-08-01T21:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @gs-niteesh, are you able to share a dump of when the deadlock happens? Also is this on .NET 4.7? ",
                                           "updatedAt":  "2024-08-01T21:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hd1bh",
                                           "createdAt":  "2024-08-07T06:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gs-niteesh",
                                           "body":  "Hey @mangod9 \r\n\r\nI apologize for the delay in my response.\r\n\r\nUnfortunately, we are unable to share the data dump as it contains sensitive information. However, if you could provide a list of the specific analyses you require, I would be happy to perform them and share the results with you.\r\n\r\nAnd regarding the version, it\u0027s .NET framework runtime 4.7.4095. But the application itself was compiled using .NET v4.5\r\n\r\nI have below attached details of the loaded CLR module in the dump.\r\n```\r\n    Loaded symbol image file: clr.dll\r\n    Image path: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\n    Image name: clr.dll\r\n    Browse all global symbols  functions  data\r\n    Timestamp:        Fri Apr  5 03:20:56 2024 (660F20C0)\r\n    CheckSum:         00A34DCF\r\n    ImageSize:        00A3A000\r\n    File version:     4.7.4095.0\r\n    Product version:  4.0.30319.0\r\n    File flags:       8 (Mask 3F) Private\r\n    File OS:          4 Unknown Win32\r\n    File type:        2.0 Dll\r\n    File date:        00000000.00000000\r\n    Translations:     0409.04b0\r\n    Information from resource tables:\r\n        CompanyName:      Microsoft Corporation\r\n        ProductName:      Microsoft® .NET Framework\r\n        InternalName:     clr.dll\r\n        OriginalFilename: clr.dll\r\n        ProductVersion:   4.7.4095.0\r\n        FileVersion:      4.7.4095.0 built by: NET472REL1LAST_B\r\n        PrivateBuild:     DDBLD299D\r\n        FileDescription:  Microsoft .NET Runtime Common Language Runtime - WorkStation\r\n        LegalCopyright:   © Microsoft Corporation.  All rights reserved.\r\n        Comments:         Flavor=Retail\r\n```",
                                           "updatedAt":  "2024-08-07T06:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HqgNa",
                                           "createdAt":  "2024-08-08T15:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @gs-niteesh,\r\n\r\nFor .NET Framework related issues you will have to route issues via developer community feedback: https://developercommunity.visualstudio.com/dotnet. Thx",
                                           "updatedAt":  "2024-08-08T15:09:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HwVOr",
                                           "createdAt":  "2024-08-09T10:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gs-niteesh",
                                           "body":  "Hey @mangod9,\r\n\r\nI have raised the issue there; you can close this issue if you want now.\r\nThank you.",
                                           "updatedAt":  "2024-08-09T10:00:02Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "App is experiencing a freeze, probably due to GC suspending threads",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105588",
        "createdAt":  "2024-07-27T15:56:11Z",
        "number":  105588,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-30T17:34:20Z",
        "body":  "This assertion is failing on freebsd-x64 with debug build suggesting the expected `lea` instruction is not found, during `dotnet publish` command execution:\r\nhttps://github.com/dotnet/runtime/blob/67d5c92a2f5ac9a94d73861035141db5466e7004/src/coreclr/vm/threadstatics.cpp#L880\r\n\r\nCommenting out the assertion let us publish the app, so I\u0027m not sure how critical it is. FreeBSD also uses ELF and .so dynamic libs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhlwnKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GXCSt",
                                           "createdAt":  "2024-07-27T15:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Found when investigating https://github.com/dotnet/runtime/issues/105358. fyi: @Thefrank",
                                           "updatedAt":  "2024-07-27T15:57:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GXCcr",
                                           "createdAt":  "2024-07-27T16:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-27T16:00:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "x64 `lea` assertion failure in threadstatic on freebsd-x64",
        "labels":  [
                       "os-freebsd",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107473",
        "createdAt":  "2024-09-06T16:27:32Z",
        "number":  107473,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T17:53:05Z",
        "body":  "### Deterministic repro\r\n\r\n1. Build a private coreclr.dll with `Sleep(1000)` added here: https://github.com/dotnet/runtime/blob/ad430a1d1c6b4016aedd63d15d3089291dced322/src/coreclr/vm/comsynchronizable.cpp#L719\r\n2. Enable page heap for corerun.exe using `gflags`\r\n3. Compile and run the following test using corerun.exe:\r\n```csharp\r\nusing System;\r\nusing System.Threading;\r\nusing System.Runtime.CompilerServices;\r\n\r\nHelper.Initialize();\r\n\r\nnew Thread(Work).Start();\r\n\r\nGC.Collect();\r\nGC.WaitForPendingFinalizers();\r\n\r\nThread.Sleep(3000);\r\n\t\r\nstatic void Work()\r\n{\r\n   for (;;)\r\n   {\r\n       if (Helper.ResurectedThread != null)\r\n       {\r\n           Helper.ResurectedThread.Join(1);\r\n       }\r\n   }\r\n}\r\n\r\nclass Helper\r\n{\r\n    public static volatile Thread ResurectedThread;\r\n\r\n    Thread _thread;\r\n \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static void Initialize() =\u003e GC.KeepAlive(new Helper());\r\n\r\n    Helper()\r\n    {\r\n        _thread = new Thread(() =\u003e { });\r\n        _thread.Start();\r\n        _thread.Join();\r\n    }\r\n\r\n    ~Helper()\r\n    {\r\n        ResurectedThread = _thread;\r\n    }\r\n}\r\n```\r\n\r\n(It is also possible to build non-deterministic repro that reproduces the crash on shipping bits.)\r\n\r\n### Actual result\r\n\r\n```\r\nAssert failure(PID 23336 [0x00005b28], Thread: 21216 [0x52e0]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! DoJoin + 0x2C3 (0x00007ffa`175c9d83)\r\nCORECLR! ThreadNative_Join + 0x15B (0x00007ffa`175cd87b)\r\n-----\r\n.AV on tid=0x52e0 (21216), cxr=0000009F9477E6C0, exr=0000009F9477EBB0\r\n```\r\n\r\nThe crash is caused by use-after-free of the unmanaged Thread object.\r\n\r\n### Expected result\r\n\r\nNo runtime crash. C# code that does not used `unsafe` blocks and that does not call any memory unsafe APIs should not lead to runtime crash.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvdUO-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LJGOW",
                                           "createdAt":  "2024-09-06T16:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The problem is not limited to `Thread.Join`. Majority of `Thread` APIs that are implemented using FCalls or QCalls suffer from this issue.",
                                           "updatedAt":  "2024-09-06T16:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LJlny",
                                           "createdAt":  "2024-09-06T17:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-06T17:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc691Q76",
                                           "createdAt":  "2025-08-13T17:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@jkotas since this is not a regression, ok to move to 11? ",
                                           "updatedAt":  "2025-08-13T17:39:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Runtime crash caused by Thread.Join called on resurrected Thread",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107876",
        "createdAt":  "2024-09-16T15:38:24Z",
        "number":  107876,
        "author":  "blushingpenguin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T16:47:51Z",
        "body":  "### Description\n\nRunning an app in a docker container on microk8s 1.30 fails with a segmentation fault. The segmentation fault does not occur if the RAM limit is removed from the container.\n\n### Reproduction Steps\n\nI can reproduce this with several of our (similar) applications that are web apis, but I don\u0027t have a good isolated reproduction\n\n### Expected behavior\n\nDoes not crash\n\n### Actual behavior\n\nfrom app...\r\n\r\n```\r\n...some startup messages...\r\n[2024-09-16 13:58:08 DBG] MassTransit.Transports.BusDepot Starting bus instances: IBus\r\n[2024-09-16 13:58:08 DBG] MassTransit Starting bus: rabbitmqs://hoppy.rabbitmq.svc.cluster.local/dev\r\nSegmentation fault (core dumped)\r\n```\r\n\r\ncollecting a core dump then creating a backtrace with lldb:\r\n\r\n```\r\n(lldb) bt\r\n* thread #1, name = \u0027Vendeq.Jobs.Api\u0027, stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007be9fb2a6bbb libcoreclr.so`SVR::GCHeap::Alloc(this=\u003cunavailable\u003e, context=0x00007be8500d9168, size=152, flags=2) at gc.cpp:43631:47\r\n    frame #1: 0x00007be9fb174877 libcoreclr.so`AllocateSzArray(MethodTable*, int, GC_ALLOC_FLAGS) at gchelpers.cpp:228:48\r\n    frame #2: 0x00007be9fb17480f libcoreclr.so`AllocateSzArray(pArrayMT=\u003cunavailable\u003e, cElements=16, flags=GC_ALLOC_CONTAINS_REF) at gchelpers.cpp:0\r\n    frame #3: 0x00007be9fafe5e23 libcoreclr.so`ThreadStaticHandleTable::AllocateHandles(unsigned int) at appdomain.cpp:524:35\r\n    frame #4: 0x00007be9fafe5e07 libcoreclr.so`ThreadStaticHandleTable::AllocateHandles(this=0x00007be8140017f0, nRequested=16) at appdomain.cpp:610:19\r\n    frame #5: 0x00007be9fb0ed42d libcoreclr.so`ThreadStatics::AllocateAndInitTLM(ModuleIndex, ThreadLocalBlock*, Module*) [inlined] ThreadLocalBlock::AllocateStaticFieldObjRefPtrs(this=0x00007be8500d9558, nRequested=16, ppLazyAllocate=0x00007be814000f00) at threadstatics.cpp:358:55\r\n    frame #6: 0x00007be9fb0ed3ef libcoreclr.so`ThreadStatics::AllocateAndInitTLM(ModuleIndex, ThreadLocalBlock*, Module*) [inlined] ThreadLocalBlock::AllocateThreadStaticHandles(this=0x00007be8500d9558, pModule=\u003cunavailable\u003e, pThreadLocalModule=0x00007be814000ef0) at threadstatics.cpp:326:9\r\n    frame #7: 0x00007be9fb0ed3e2 libcoreclr.so`ThreadStatics::AllocateAndInitTLM(index=(m_dwIndex = 0), pThreadLocalBlock=0x00007be8500d9558, pModule=\u003cunavailable\u003e) at threadstatics.cpp:651:24\r\n    frame #8: 0x00007be9fb1906f1 libcoreclr.so`JIT_GetGCThreadStaticBase_Helper(pMT=0x00007be981fb0508) at jithelpers.cpp:1760:46\r\n    frame #9: 0x00007be981684d35\r\n    frame #10: 0x00007be9816695e2\r\n    frame #11: 0x00007be9fb2f0657 libcoreclr.so`CallDescrWorkerInternal at unixasmmacrosamd64.inc:850\r\n    frame #12: 0x00007be9fb12614e libcoreclr.so`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:67:5\r\n    frame #13: 0x00007be9fb1260f5 libcoreclr.so`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=\u003cunavailable\u003e) at callhelpers.cpp:220:9\r\n    frame #14: 0x00007be9fb13ecd2 libcoreclr.so`ThreadNative::KickOffThread_Worker(ptr=\u003cunavailable\u003e) at comsynchronizable.cpp:157:5\r\n    frame #15: 0x00007be9fb0eac0a libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=\u003cunavailable\u003e) at threads.cpp:7321:5\r\n    frame #16: 0x00007be9fb0eac08 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:7365:9\r\n    frame #17: 0x00007be9fb0eabc2 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(this=\u003cunavailable\u003e, pParam=\u003cunavailable\u003e)::$_6::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at threads.cpp:7523:13\r\n    frame #18: 0x00007be9fb0eabc2 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:7525:9\r\n    frame #19: 0x00007be9fb0eab53 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=0x00007be9129ffd20) at threads.cpp:7549:5\r\n    frame #20: 0x00007be9fb0eb20d libcoreclr.so`ManagedThreadBase::KickOff(void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransition(pTarget=\u003cunavailable\u003e, args=\u003cunavailable\u003e, filterType=ManagedThread)(void*), void*, UnhandledExceptionLocation) at threads.cpp:7569:5\r\n    frame #21: 0x00007be9fb0eb1f5 libcoreclr.so`ManagedThreadBase::KickOff(pTarget=\u003cunavailable\u003e, args=\u003cunavailable\u003e)(void*), void*) at threads.cpp:7604:5\r\n    frame #22: 0x00007be9fb13eda7 libcoreclr.so`ThreadNative::KickOffThread(pass=0x00007be8500d9110) at comsynchronizable.cpp:228:9\r\n    frame #23: 0x00007be9fb484b0e libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00007be8500db610) at thread.cpp:1862:16\r\n    frame #24: 0x00007be9fb804ac3 libc.so.6`___lldb_unnamed_symbol3481 + 755\r\n    frame #25: 0x00007be9fb896850 libc.so.6`___lldb_unnamed_symbol3866 + 11\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRemoving or increasing the container ram limit seems to avoid the problem\n\n### Configuration\n\nMicrosoft.AspNetCore.App 6.0.33 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.33 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nrunning in a docker container based on ubuntu:22.04 running on microk8s 1.30 on a server running ubuntu24.04 (amd64)\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtEqz1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MRARK",
                                           "createdAt":  "2024-09-16T15:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-16T15:38:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRd0J",
                                           "createdAt":  "2024-09-16T16:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "hello @blushingpenguin, thanks for reporting the issue. Can you please clarify what config are you specifying for memory limits? Also .NET 6 would be going out of support soon, so checking if this repros on 8 for you? ",
                                           "updatedAt":  "2024-09-16T16:30:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRi6U",
                                           "createdAt":  "2024-09-16T16:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blushingpenguin",
                                           "body":  "@mangod9 I can\u0027t check on .NET8 unfortunately, the app isn\u0027t (yet) compatible. For memory:\r\n```\r\n    resources:\r\n      limits:\r\n        memory: 300Mi\r\n      requests:\r\n        memory: 250Mi\r\n```",
                                           "updatedAt":  "2024-09-16T16:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRsIf",
                                           "createdAt":  "2024-09-16T16:58:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks. Is this a regression in a 6 servicing release, or is this a new application which is being tried with memory limits. Would be possible to share a dump of the failure? ",
                                           "updatedAt":  "2024-09-16T16:58:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MR4ca",
                                           "createdAt":  "2024-09-16T17:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blushingpenguin",
                                           "body":  "@mangod9 I could share a dump privately. The regression is in adding newer nodes to the cluster and migrating workloads (they are 16 core / 32 threads vs 6 core / 12 threads). I suspect the difference in core count is involved somewhere -- the base OS of the new servers is ubuntu 24.04 vs 22.04 but they are the exact same containers, they crash on some nodes and not others.\r\n\r\nI\u0027ve tried playing around with GC settings in a container, and the two that make a difference are:\r\n\r\nDOTNET_GCHeapHardLimit=10048576\r\n\r\nif below 10Mb (tried in 1Mb chunks) then I get a segfault again, but anything higher and it works.  Setting the container resource limit to 330Mi also works.\r\n\r\nwhen setting DOTNET_gcServer=0, things work without limits (probably not so interesting)\r\n\r\n",
                                           "updatedAt":  "2024-09-16T17:24:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60SrPU",
                                           "createdAt":  "2025-07-01T16:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @blushingpenguin, is this still an issue for you on .NET 8? ",
                                           "updatedAt":  "2025-07-01T16:47:43Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Segmentation fault during app startup on .NET6",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108052",
        "createdAt":  "2024-09-20T07:13:28Z",
        "number":  108052,
        "author":  "peterchase",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T16:46:57Z",
        "body":  "### Description\n\nOur .Net application experiences an intermittent fatal AccessViolationException. It is a plain managed code .Net application and hence cannot directly cause such an exception.\r\n\r\nThe crash seems to occur in a TPL Task scheduler that we have implemented. This is still ordinary managed code, however.\n\n### Reproduction Steps\n\nUnfortunately we have not been able to identify a small reproduction case.\n\n### Expected behavior\n\nNo Access Violation\n\n### Actual behavior\n\nApplication: REDACTED\r\nCoreCLR Version: 8.0.824.36612\r\n.NET Version: 8.0.8\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nStack:\r\nat System.Runtime.CompilerServices.CastHelpers.IsInstanceOfInterface(Void*, System.Object)\r\nat System.Threading.Tasks.Task.RunContinuations(System.Object)\r\nat System.Threading.Tasks.Task.FinishSlow(Boolean)\r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\nat REDACTED\r\n\r\nFaulting application name: REDACTED, time stamp: 0x66960000\r\nFaulting module name: coreclr.dll, version: 8.0.824.36612, time stamp: 0x6696b815\r\nException code: 0xc0000005\r\nFault offset: 0x00000000001c2090\r\nFaulting process id: 0x23b8\r\nFaulting application start time: 0x01db03174ba027e7\r\nFaulting application path: REDACTED\r\nFaulting module path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.8\\coreclr.dll\r\nReport Id: cab987fc-5e3c-4a59-aa25-75c80d0fb0ed\r\nFaulting package full name:\r\nFaulting package-relative application ID:\n\n### Regression?\n\nAlso occurring with 8.0.7. Unsure about earlier versions.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 8.0.8 (also seen in 8.0.7)\r\n.Net SDK 8.0.401 \r\n\r\nSeen on:\r\nWindows 11, version 10.0\r\nWindows Server 2022, version 10.0\r\nWindows Server 2019, version 10.0\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtEqqaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6M2HEd",
                                           "createdAt":  "2024-09-20T07:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-20T07:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Sqpr",
                                           "createdAt":  "2025-07-01T16:46:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Not much we can investigate without a repro or dumps. Is this still an issue on latest servicing releases? ",
                                           "updatedAt":  "2025-07-01T16:46:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Access Violation in CastHelpers.IsInstanceOfInterface",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108249",
        "createdAt":  "2024-09-25T18:20:47Z",
        "number":  108249,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T06:48:09Z",
        "body":  "Re: https://github.com/dotnet/runtime/pull/108117#issuecomment-2374840871\r\n\r\nIt looks like we instrument code for GC stress only on the JIT-compile code path. Thus R2R code can\u0027t run through GC stress.\r\n\r\nWe should consider supporting R2R code in GC stress as well. It may just mean to call `SetupGcCoverage` at some appropriate point when R2R code is loaded.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjZQf-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NjVmX",
                                           "createdAt":  "2024-09-25T18:21:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-25T18:21:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NlB_4",
                                           "createdAt":  "2024-09-25T21:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Ah that reminds me of #10184 -- has it been 6 years since we had GC stress for prejitted code?",
                                           "updatedAt":  "2024-09-25T21:27:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Implement GC stress for R2R code.",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108423",
        "createdAt":  "2024-10-01T06:38:04Z",
        "number":  108423,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7hCQQ==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "ivanpovazan",
                                            "createdAt":  "2024-10-01T06:40:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2024-10-02T20:47:43Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-24T09:50:40Z",
        "body":  "Apple silently released JIT APIs for iOS 17.4+ / iPadOS 18+: https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon\r\n\r\nThey are the same APIs that were previously available on macOS - `pthread_jit_write_with_callback_np` and `PTHREAD_JIT_WRITE_ALLOW_CALLBACKS_NP`, and they require new entitlements. Unfortunately, they are also distinct from the original `pthread_jit_write_protect_np` API that was introduced with macOS 11 to support Apple Silicon, and it requires a different approach to use it.\r\n\r\nNeither CoreCLR nor MonoVM is currently structured in a way to make it easy to adapt.\r\n\r\nThis may possibly be interesting if we revive the [CoreCLR on iOS (Simulator)](https://github.com/dotnet/runtime/pull/98127) PR, or as an option to enable JIT for Hot Restart (MonoVM) scenarios when deploying to iOS from Windows.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOssnyGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OJvrl",
                                           "createdAt":  "2024-10-01T06:38:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-01T06:38:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OLYnM",
                                           "createdAt":  "2024-10-01T09:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I hate to turn down the excitement. Unfortunately, the entitlements necessary to make this work are still restricted:\r\n\r\n\u003e To build a web browser that uses an alternative browser engine, including the one in this sample project, you need to apply for certain entitlements from WWDR. For more information on how to use these entitlements, see [Creating browser extensions in Xcode](https://developer.apple.com/documentation/BrowserEngineKit/creating-browser-extensions-in-xcode?language=objc).\r\n\r\nThat severely restricts the usability. It still means that you can now officially use JIT on Mac Catalyst using supported APIs. I tested that scenario with ad-hoc signing but it should also work with the `com.apple.security.cs.allow-jit` entitlement which is not restricted on macOS.\r\n\r\n_Furthermore, the BrowserEngineKit APIs `be_memory_inline_jit_restrict_rwx_to_rw_with_witness` and `be_memory_inline_jit_restrict_rwx_to_rx_with_witness` match the functionality of `pthread_jit_write_protect_np` and may be easier to use for some quick hack to test the dev loop scenario. They are, however, restricted for App Store usage, so they are not a good replacement._",
                                           "updatedAt":  "2024-10-01T09:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OSKsN",
                                           "createdAt":  "2024-10-01T21:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-01T21:41:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y3gEV",
                                           "createdAt":  "2024-12-29T10:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Spidy123222",
                                           "body":  "There’s a growing community of iOS users who rely on jit-based emulators via debugging. However, with the introduction of net 9+, jit is no longer supported on Work-in-progress programs, causing them to remain stuck on 8 when newer code is on 9+. I hope this issue will be addressed when jit is reintroduced for iOS DotNet.",
                                           "updatedAt":  "2024-12-29T10:57:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ynmcD",
                                           "createdAt":  "2025-06-23T14:29:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@Spidy123222 could you please clarify on the usage of \"jit-based emulators\". AFAIK .NET on iOS never had a JIT because of the restrictions from the OS. While this issue describes some new ways of allowing JIT, it is still very limitted and effectively unusable for release apps (to the store). Given that store apps are the primary target for .NET on iOS, we don\u0027t have any plans to implement JIT on iOS. We do support interpreter, which should have effectively the same functionality, just different perf characteristics.",
                                           "updatedAt":  "2025-06-23T14:29:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ynnGz",
                                           "createdAt":  "2025-06-23T14:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@filipnavara I\u0027m inclined to close this issue. I don\u0027t see us special casing macCatalyst on its own, and on iOS this is not very useful.",
                                           "updatedAt":  "2025-06-23T14:29:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ynw26",
                                           "createdAt":  "2025-06-23T14:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXs_PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2025-06-23T15:22:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Spidy123222",
                                                                               "createdAt":  "2025-06-24T09:42:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Please don\u0027t close it just yet. I think it\u0027s still relevant for debugging scenarios (Mac Catalyst, iOS Simulator). We currently enable these scenarios by unsanctioned usage of the `pthread_jit_write_protect_np` which works locally but it\u0027s obviously ineligible for wide distribution. Apple is pushing these new APIs and we may eventually need to migrate on macOS too.\n\nI don\u0027t think the issue is immediately actionable though. We still have way too many places that use W^X memory. I\u0027ve gradually tried to remove some of them and many were removed with the ongoing interpreter work.\n\nUsing `pthread_jit_write_with_callback_np` is not easy with the current W^X memory abstraction in CoreCLR. The current abstraction uses an object on the stack which provides methods to get writable memory, while the new Apple API basically requires a callback that receives a temporary pointer to the writable memory. It\u0027s not trivially possible to modify the current abstraction to work with `pthread_jit_write_with_callback_np` without compromising the intent of the callback API (ie. not using a single process-wide callback) or using large temporary buffers.\n\nI am essentially waiting on the runtime to get in a better shape as part of the interpreter work to even pursue this task and experiment with it.\n\nAs for the thing @Spidy123222 mentioned. The emulators still rely on a debugger trick to enable the JIT. When the debugger is attached (or the system thinks it\u0027s attached) it allows some limitet JITing for function evaluation.",
                                           "updatedAt":  "2025-06-23T14:41:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ynxVk",
                                           "createdAt":  "2025-06-23T14:42:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "(Feel free to bump it to Future milestone though)",
                                           "updatedAt":  "2025-06-23T14:42:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yyfIb",
                                           "createdAt":  "2025-06-24T09:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Spidy123222",
                                           "body":  "\n\u003e As for the thing @Spidy123222 mentioned. The emulators still rely on a debugger trick to enable the JIT. When the debugger is attached (or the system thinks it\u0027s attached) it allows some limited JITing for function evaluation.\n\nYeah this is what\u0027s used with developer accounts of users for more power user methods to run advanced emulation (things that cannot run on a interpiter well) or tools like flutter with Hot Reload via Dart or like what you said function evaluation.\n\nI’m hoping to at least allow compilation for iOS to enable the execution of such programs with a flag to force the ability even if I\u0027m not able to submit for AppStore or just allow it like before (whatever is preferred). This feature could also adapt to accommodate additional capabilities when iOS introduces more countries for just-in-time compilation with web browsers or other programs. However, Dotnet 9 rendered all of this functionality unusable when upgrading Dotnet 8 projects to Dotnet 9 to keep up with the original project\u0027s changes (These iOS projects tend to be forks or part of the main program like Flutter).",
                                           "updatedAt":  "2025-06-24T09:50:40Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Investigate use of new Apple JIT APIs",
        "labels":  [
                       "area-VM-coreclr",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109442",
        "createdAt":  "2024-11-01T07:30:21Z",
        "number":  109442,
        "author":  "perlun",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T06:29:06Z",
        "body":  "### Description\n\nWhen `LimitNPROC=10` is set in a systemd unit for a .NET 8 application, the process exits with a `Failed to create CoreCLR, HRESULT: 0x8007000E` error.\n\n### Reproduction Steps\n\nSet up a systemd unit like this:\n\n```ini\n[Unit]\nDescription=Some .NET Program\nAfter=network-online.target\nWants=network-online.target\n \n[Service]\nType=simple\nUser=someuser\nPrivateTmp=true\nWorkingDirectory=/path/to/dotnet-program\nExecStart=/path/to/dotnet-program/some-program\nLimitNPROC=10\nProtectSystem=true\nProtectHome=true\nKillMode=process\n \n[Install]\nWantedBy=multi-user.target\n```\n\nThe .NET runtime fails to start, because of the error described above.\n\n### Expected behavior\n\nSuccessful startup of the application.\n\n### Actual behavior\n\nThe process exits with a `Failed to create CoreCLR, HRESULT: 0x8007000E` error.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRemove the `LimitNPROC` line, or set `LimitNPROC=infinity`. This makes the problem immediately go away.\n\n### Configuration\n\n* Standalone .NET application published using `dotnet publish --self-contained true -c Release -r linux-x64 -f net8.0 path/to/project.csproj`\n* .NET SDK 8.0.401 used in container where the app is published\n* Target host: Ubuntu 24.04.1 LTS (x86-64)\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtCCgCg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SHeLc",
                                           "createdAt":  "2024-11-01T07:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T07:30:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SH1HN",
                                           "createdAt":  "2024-11-01T08:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "\u003e Remove the `LimitNPROC` line, or set `LimitNPROC=infinity`. This makes the problem immediately go away.\n\nAlso worth pointing out: The `User=someuser` part is critical to be able to reproduce this. This is by design. Quoting from: https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#LimitCPU=\n\n\u003e _Please also note that the LimitNPROC= will not be enforced **if the service is running as root** (and not dropping privileges)._",
                                           "updatedAt":  "2024-11-04T07:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sdogo",
                                           "createdAt":  "2024-11-05T13:53:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I think it may be because of the nproc limit actually limiting the number of threads, not only processes. If you run with server GC, there is by default one extra thread per CPU for GC purposes. That can easily go over the 10 you are setting it to. ",
                                           "updatedAt":  "2024-11-05T13:53:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TNzDN",
                                           "createdAt":  "2024-11-12T08:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "\u003e That can easily go over the 10 you are setting it to.\n\nInteresting @janvorli. 🤔 The machine where we saw this is an Azure VM with 2 vCPUs for reference.\n\nHow do you control whether server GC is used or not, is it auto-determined by the runtime somehow?",
                                           "updatedAt":  "2024-11-12T08:18:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UieH_",
                                           "createdAt":  "2024-11-21T19:16:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-21T19:16:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60IKAK",
                                           "createdAt":  "2025-07-01T06:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@perlun, you can switch to workstation GC by switching gcServer=0. Here is the documentation: https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#workstation-vs-server",
                                           "updatedAt":  "2025-07-01T06:28:58Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Failed to initialize CoreCLR, HRESULT: 0x8007000E when LimitNPROC=10 set via systemd unit",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109632",
        "createdAt":  "2024-11-08T04:53:24Z",
        "number":  109632,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRnCgg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "romfir",
                                            "createdAt":  "2025-02-06T18:28:05Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "sakno",
                                            "createdAt":  "2025-03-07T08:24:14Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kt81",
                                            "createdAt":  "2025-03-13T07:36:16Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "sanamhub",
                                            "createdAt":  "2025-03-13T09:46:10Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Archimed-AVanoorenberghe",
                                            "createdAt":  "2025-03-13T16:16:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ArmoryNode",
                                            "createdAt":  "2025-03-25T17:19:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Sella-GH",
                                            "createdAt":  "2025-03-28T20:59:41Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "volkanalkilic",
                                            "createdAt":  "2025-04-11T13:22:45Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "tokKurumi",
                                            "createdAt":  "2025-04-22T11:52:55Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Zagrthos",
                                            "createdAt":  "2025-04-25T06:59:42Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-04-25T11:40:25Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "george-chakhidze",
                                            "createdAt":  "2025-04-25T11:48:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "giokoguashvili",
                                            "createdAt":  "2025-05-19T11:00:32Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "IhateTrains",
                                            "createdAt":  "2025-05-22T08:10:07Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Jaxter",
                                            "createdAt":  "2025-05-27T12:56:35Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Jaxter",
                                            "createdAt":  "2025-05-27T12:56:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AathifMahir",
                                            "createdAt":  "2025-06-13T13:53:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "AathifMahir",
                                            "createdAt":  "2025-06-13T13:53:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sanamhub",
                                            "createdAt":  "2025-06-20T04:29:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Kaayo",
                                            "createdAt":  "2025-07-07T23:20:06Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Kaayo",
                                            "createdAt":  "2025-07-07T23:20:07Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "cliffchapmanrbx",
                                            "createdAt":  "2025-07-08T19:11:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2025-07-13T00:05:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-07-27T06:35:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-07-27T06:35:12Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "istipeti",
                                            "createdAt":  "2025-07-27T08:34:26Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "istipeti",
                                            "createdAt":  "2025-07-27T08:34:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2025-08-17T17:08:44Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2025-08-17T17:08:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Zagrthos",
                                            "createdAt":  "2025-09-01T12:45:21Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "dameng324",
                                            "createdAt":  "2025-09-02T00:55:13Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rcj1",
                                            "createdAt":  "2025-09-03T06:02:13Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "leandromoh",
                                            "createdAt":  "2025-09-03T17:51:13Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "izanhzh",
                                            "createdAt":  "2025-09-18T09:09:46Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "KrzysztofBranicki",
                                            "createdAt":  "2025-09-18T13:49:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "KrzysztofBranicki",
                                            "createdAt":  "2025-09-18T13:49:42Z"
                                        }
                                    ],
                          "totalCount":  36
                      },
        "updatedAt":  "2025-09-17T18:09:03Z",
        "body":  "## Intro\n\nThis issue tracks progress on implementing so-called \"runtime-async\", meaning implementation for async methods directly inside the .NET runtime. This is in contrast to the current support which is implemented only in language compilers, like C#, VB, and F#.\n\nDraft specification: https://github.com/dotnet/runtime/blob/main/docs/design/specs/runtime-async.md\n\n## .NET 10\n\nThe runtime-async feature should be available for local testing and experimentation in .NET 10. While any code you compile with runtime-async will see performance benefits, the core framework and libraries have not been recompiled to use runtime-async, so any improvements will be limited to the code being compiled.\n\nTo use the feature, a number of flags need to be enabled:\n- The project must target net10.0 (note: running on net10.0 is not sufficient, it must compile against net10.0 to see the value)\n- `\u003cEnablePreviewFeatures\u003etrue\u003c/EnablePreviewFeatures\u003e` must be set in the project file\n- `\u003cFeatures\u003e$(Features);runtime-async=on\u003c/Features\u003e` must be set in the project file\n- When running, the environment variable `DOTNET_RuntimeAsync=1` must be set\n\n**Code complete:**\n\n- [x] Merge runtime into runtime-labs for integration\n- [x] Merge from runtime-labs into runtime\n- [X] Bring up testing in dotnet/runtime\n  - [X] Bring over Roslyn package for testing\n- [x] https://github.com/dotnet/runtime/issues/115093\n- [x] https://github.com/dotnet/runtime/issues/115260\n- [x] https://github.com/dotnet/runtime/issues/115259\n- [x] https://github.com/dotnet/runtime/issues/115258\n- [x] Compiler changes are available in production compiler, behind preview flag\n- [x] https://github.com/dotnet/runtime/issues/115099\n- [x] https://github.com/dotnet/runtime/issues/115264\n- [x] https://github.com/dotnet/runtime/issues/115101\n- [ ] https://github.com/dotnet/runtime/issues/115094\n\nDesign issues: \n\n- [X] Are we going to use an attribute of a `MethodImpl` flag to identify async methods? \n(Re comment:https://github.com/dotnet/runtime/pull/104063#discussion_r1834599653)\n- [X] What are restrictions and guarantees for runtime async methods in structs.\n- [X] What, if any, are the stack requirements on calling a method with the async calling convention inside an async method?\n- [X] What do we do for async delegates in general and `Func\u003cT\u003e` in particular?\n- [X] What to do with Event and Property accessors. Presumably they cannot be async, so what happens if return Task and Async marker is applied?\n\n\n## .NET 11\n\n- [ ] Enable runtime-async ifdef in `main`\n  - [ ] All Pri0 coreclr tests pass with ifdef enabled\n  - [ ] All Pri1 coreclr tests pass with ifdef enabled\n  - [ ] All libraries tests pass with ifdef enabled\n- [ ] https://github.com/dotnet/runtime/issues/115097\n- [ ] https://github.com/dotnet/runtime/issues/115262\n- [ ] https://github.com/dotnet/runtime/issues/115263\n- [ ] https://github.com/dotnet/runtime/issues/115261\n- [ ] https://github.com/dotnet/runtime/issues/115096\n- [ ] https://github.com/dotnet/runtime/issues/115098\n- [ ] Native AOT support\n- [ ] Interpreter support\n- [ ] Diagnostics\n- [ ] What do we do for function pointers to async methods?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkyglaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6S2hXg",
                                           "createdAt":  "2024-11-08T04:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-08T04:56:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S4lwi",
                                           "createdAt":  "2024-11-08T10:10:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e What, if any, are the stack requirements on calling a method with the async calling convention inside an async method?\n\nFrom RyuJIT\u0027s perspective restrictions will not make things simpler -- i.e. having the stack non-empty is fine. Of course these values are subject to same restrictions as locals live across suspension points.\n\n\u003e What do we do for async delegates in general and Func\u003cT\u003e in particular?\n\u003e What do we do for function pointers to async methods?\n\nI think without introducing an explicit async calling convention in the signature the only option is to let them point to the runtime synthesized `Task\u003cT\u003e` returning version of the method. It means taking the address of a runtime-async function is illegal in IL (when doing this in C# the compiler would instead generate IL taking the address of the `Task`/`Task\u003cT\u003e` returning version).\n\nFrom RyuJIT\u0027s perspective I think this can still be optimizable via PGO and delegate GDV in the \"runtime-async calling delegate that ends up in runtime-async\" case. Roslyn will generate the \"runtime-async calling compiler-async\" IL, but I think we can recognize this and optimize it to \"runtime-async calling runtime-async\" when GDV kicks in.\n\nHaving an explicit async calling convention would be a way for the user to ensure that this optimization kicks in. The `UnmanagedCallersOnly` and `delegate* unmanaged` work laid a pretty extensible framework for doing this sort of thing, so maybe it wouldn\u0027t be too expensive to build that support for function pointers. For delegates I\u0027m not so sure, seems like we would end up with `AsyncAction` and `AsyncFunc` there to encode the async calling convention.",
                                           "updatedAt":  "2024-11-08T10:10:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S6oZE",
                                           "createdAt":  "2024-11-08T14:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@agocke can you provide a bit more context to this? I assume there is a broader discussion and that this issue here is just kind of a \"summary\" of sorts.\n\nIs the idea to move away from \"compiler-generated\" async state machine and have the runtime recognize the actual pattern as a first-class thing?",
                                           "updatedAt":  "2024-11-08T14:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S8VUR",
                                           "createdAt":  "2024-11-08T17:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6D4eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-08T17:27:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KeterSCP",
                                           "body":  "@julealgon see https://github.com/dotnet/runtime/issues/94620",
                                           "updatedAt":  "2024-11-08T17:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S9OCR",
                                           "createdAt":  "2024-11-08T18:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "333fred",
                                           "body":  "\u003e What do we do for async delegates in general and Func\u003cT\u003e in particular?\n\nRelated is are also methods like the following:\n\n* `T M\u003cT\u003e()`, when called as `await M\u003cTask\u003e()`\n* `Task\u003cT\u003e M\u003cT\u003e()` when called as `await M\u003cint\u003e()`\n    * In particular, are these methods runtime-async capable? If so, what\u0027s the signature?",
                                           "updatedAt":  "2024-11-08T18:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TCkDX",
                                           "createdAt":  "2024-11-10T21:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@333fred I think those two questions are answered in the spec. There\u0027s a note at the bottom:\n\n\u003e [Note: these rules operate before generic substitution, meaning that a method which only meets requirements after substitution would not be considered as valid.]\n\nSo your example (1) is invalid -- that method is not async.\nYour example (2) is fine -- that method is async. The unwrapping signature is `modreq(Task\u003cT\u003e) T M\u003cT\u003e()`",
                                           "updatedAt":  "2024-11-10T21:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TCkKV",
                                           "createdAt":  "2024-11-10T21:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6VULA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-11T13:19:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "@julealgon Also see https://github.com/dotnet/runtime/pull/104063",
                                           "updatedAt":  "2024-11-10T21:23:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TKCVp",
                                           "createdAt":  "2024-11-11T19:27:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "333fred",
                                           "body":  "\u003e So your example (1) is invalid -- that method is not async.\n\nAndy and I talked about this offline: it is related to the `Func\u003cT\u003e` question, and is complicated by the fact that there\u0027s literally a new calling convention here. We need to do some experiments to measure whether the overhead of introducing an extra thunk for runtime-async methods is advantageous instead of just using the standard Task-runtime async thunk.\n\n\u003e The unwrapping signature is `modreq(Task\u003cT\u003e) T M\u003cT\u003e()`\n\nMore precision please 🙂. What\u0027s the IL you\u0027d like to see emitted here? Is it referencing the type parameter as `!0`, or is it filling in the concrete type?",
                                           "updatedAt":  "2024-11-11T19:27:23Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  ".NET Runtime-Async Feature",
        "labels":  [
                       "Epic",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109682",
        "createdAt":  "2024-11-10T11:37:36Z",
        "number":  109682,
        "author":  "adirh3",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-11T18:20:22Z",
        "body":  "### Description\n\n**Note** - I am not sure if this intended, opening just in case it\u0027s not.\nStarting a `Process` as admin seems to crash on `ntd.dll 0xc0000409` due to the [CET support](https://learn.microsoft.com/en-us/dotnet/core/compatibility/interop/9.0/cet-support) introduced in .NET 9.\n\n### Reproduction Steps\n\nFor some reason this does not reproduce in all PCs, I couldn\u0027t find any pattern to why.\nIn my case it happens to users of my app when they try to open executable files as admin.\nIt\u0027s done by starting a `Process` with `Verb=\"runas\"`.\n\n```c#\nvar processStartInfo = new ProcessStartInfo(filePath)\n{\n    UseShellExecute = true,\n    Arguments = args,\n    WorkingDirectory = Path.GetDirectoryName(filePath)!\n};\nvar process = new Process\n{\n    StartInfo = processStartInfo\n};\n\nprocessStartInfo.Verb = \"runas\";\nprocess.Start();\n```\n\n### Expected behavior\n\nThe .NET process to not crash.\n\n### Actual behavior\n\nThe .NET process crashes with `ntd.dll 0xc0000409`, no stack trace.\n\n### Regression?\n\nThis was not an issue in .NET 8.\n\n### Known Workarounds\n\nUse `\u003cCETCompat\u003efalse\u003c/CETCompat\u003e` solves the issue.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkyaZJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TCA1e",
                                           "createdAt":  "2024-11-10T15:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have seen the same symptoms due to CET compatibility problems in 3rd party native libraries (#107993). Does your app use any 3rd party native libraries?\n\nTo get more information about the crash, could you please enable crash dumps https://learn.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps and then open the crash dump in windbg debugger to get the stacktrace of the crash.\n\ncc @janvorli ",
                                           "updatedAt":  "2024-11-10T15:30:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TCSa0",
                                           "createdAt":  "2024-11-10T19:10:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Could it be some non CET compatible AV/software that\u0027s hooking into ntdll?",
                                           "updatedAt":  "2024-11-10T19:10:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TCVyl",
                                           "createdAt":  "2024-11-10T19:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adirh3",
                                           "body":  "\u003e Does your app use any 3rd party native libraries?\n\u003e \nIt does, but it\u0027s in a different DLL of my app, and it happens mostly in code I shared at the repro.\n\n\u003e To get more information about the crash, could you please enable crash dumps https://learn.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps and then open the crash dump in windbg debugger to get the stacktrace of the crash.\n\u003e\nUnfortunately I can\u0027t reproduce it with any of my machines, I will see if any of the effected users are interested in helping.\n\n@MichalPetryka I suspect this AV issue as well, I think this may be the only difference between the users of my software.\n**Edit**: two of the effected users told me they are using 3rd party EV software and not Windows Defender.\n\n",
                                           "updatedAt":  "2024-11-11T06:12:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TFw1M",
                                           "createdAt":  "2024-11-11T10:14:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@adirh3 in order for the problem to reproduce, you need to run it on a machine with a CPU that supports CET (shadow stacks) - recent Intel and AMD CPUs support it. \nIs the app that you are trying to start with runas a .NET app too?",
                                           "updatedAt":  "2024-11-11T10:14:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TF4uC",
                                           "createdAt":  "2024-11-11T10:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adirh3",
                                           "body":  "\u003e [@adirh3](https://github.com/adirh3) in order for the problem to reproduce, you need to run it on a machine with a CPU that supports CET (shadow stacks) - recent Intel and AMD CPUs support it. Is the app that you are trying to start with runas a .NET app too?\n\nI can\u0027t reproduce it on Intel 11th, 12th gen (desktops) and Core Ultra 2 (laptop).\nThe app they\u0027re trying to runas is `cmd.exe`, but it seems to happen with other executables as well.",
                                           "updatedAt":  "2024-11-11T10:53:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TJeOC",
                                           "createdAt":  "2024-11-11T17:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Would you be able to get more detail e.g. for the cmd.exe case, ideally creating a full repro that we can debug? ",
                                           "updatedAt":  "2024-11-11T17:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TJhd6",
                                           "createdAt":  "2024-11-11T18:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adirh3",
                                           "body":  "\u003e Would you be able to get more detail e.g. for the cmd.exe case, ideally creating a full repro that we can debug?\n\nI will see if I can get one of the users that have this issue get a process dump as I can\u0027t personally reproduce it. \nIt happens for them in the code snippet I shared in the post.",
                                           "updatedAt":  "2024-11-11T18:01:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TJpkn",
                                           "createdAt":  "2024-11-11T18:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Launching just plain cmd.exe, I cannot repro it either on my CET enabled machine with .NET 9 RC 2. ",
                                           "updatedAt":  "2024-11-11T18:20:20Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  ".NET 9 Process.Start crash due to CETCompat",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110368",
        "createdAt":  "2024-12-03T19:15:13Z",
        "number":  110368,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBXjZA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oto313",
                                            "createdAt":  "2025-01-10T09:36:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoinebj",
                                            "createdAt":  "2025-04-18T14:00:06Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-03T21:48:14Z",
        "body":  "Some languages and frameworks (like Go), require that all signals be registered with `SA_ONSTACK` because they create threads with very small stack sizes. .NET currently does not support this mode. All signal handling in the runtime would have to be audited and rewritten to support executing with `SA_ONSTACK`.\n\n[Go\u0027s interop policy](https://pkg.go.dev/os/signal#hdr-Non_Go_programs_that_call_Go_code)\n\nThis feature would be nice to have, but is complex to implement.\n\nSee https://learn.microsoft.com/dotnet/standard/native-interop/abi-support#golang for our current support policy due to this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlfFMmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6V7bdb",
                                           "createdAt":  "2024-12-03T19:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-03T19:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V8UyY",
                                           "createdAt":  "2024-12-03T21:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  ".NET actually uses SA_ONSTACK, but only for the SIGSEGV handler. For other hardware exception signals, a change to optionally use SA_ONSTACK everywhere should be trivial, basically sharing the existing mechanism for switching the stack the .NET handling code runs on back to the real stack. I am not sure about possible extra complexities for other signals like SIGINT, SIGQUIT, SIGABRT, SIGRTMIN, SIGUSR1 etc.",
                                           "updatedAt":  "2024-12-03T21:48:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support registering all runtime signal handlers with `SA_ONSTACK`",
        "labels":  [
                       "area-VM-coreclr",
                       "hard-problem",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111628",
        "createdAt":  "2025-01-20T17:03:16Z",
        "number":  111628,
        "author":  "corngood",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T17:22:37Z",
        "body":  "### Description\n\n@theolivenbaum I\u0027m hitting something like #76356, and it sounds like that issue was never actually resolved.  Any chance we can re-open it?\n\n### Reproduction Steps\n\n- build dotnet VMR osx-x64 on osx-arm64.\n\n\n### Expected behavior\n\n- build doesn\u0027t hang\n\n### Actual behavior\n\n- build hangs intermittently during msbuild (e.g. of `source-build-reference-packages`)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n- I\u0027ve been unable to reproduce it with `-maxCpuCount:1` \n\n### Configuration\n\n```\n$ uname -a\nDarwin darwin01 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 19:04:03 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T8132 arm64\n```\n\nbuilding dotnet 8.0.11 (VMR), using SDK 8.0.110 on dotnet 8.0.10\n\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm0JL7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bJlgb",
                                           "createdAt":  "2025-01-20T17:45:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "corngood",
                                           "body":  "Processes alive when hung:\n\n```\n |     \\-+= 95876 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet//dotnet msbuild /m /nologo /clp:Summary /v:minimal /nr:false /warnaserror /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=true /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/prereqs/packages/restored/ArcadeBootstrapPackage/microsoft.dotnet.arcade.sdk/8.0.0-beta.24463.3/tools/Build.proj /bl:/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/artifacts/log/Release/Build.binlog /p:Configuration=Release /p:RepoRoot=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/ /p:Restore=true /p:Build=true /p:ArcadeBuildFromSource=false /p:Rebuild=false /p:Test=false /p:Pack=true /p:IntegrationTest=false /p:PerformanceTest=false /p:Sign=false /p:Publish=true /p:ArcadeBuildFromSource=true /p:CopyWipIntoInnerSourceBuildRepo=true /p:DotNetBuildOffline=true /p:CopySrcInsteadOfClone=true /p:DotNetPackageVersionPropsPath=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/artifacts/obj/x64/Release/PackageVersions.source-build-reference-packages.props /p:AdditionalSourceBuiltNupkgCacheDir=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/artifacts/obj/x64/Release/blob-feed/packages/ /p:ReferencePackageNupkgCacheDir=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/prereqs/packages/reference/ /p:PreviouslySourceBuiltNupkgCacheDir=/nix/store/glfgr79f58fhm80y2ijpd25i9pcksm64-Private.SourceBuilt.Artifacts.8.0.110-servicing.24474.1.centos.9-x64/ /p:SourceBuildUseMonoRuntime= /p:MicrosoftNetCoreIlasmPackageRuntimeId=osx-x64 /p:LocalNuGetPackageCacheDirectory=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/artifacts/obj/source-build-reference-package-cache -logger:/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/prereqs/packages/restored/ArcadeBootstrapPackage/microsoft.dotnet.arcade.sdk/8.0.0-beta.24463.3/tools/net8.0/Mi\ncrosoft.DotNet.ArcadeLogging.dll /p:ArcadeInnerBuildFromSource=true /p:DotNetBuildFromSource=true /p:RepoRoot=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/artifacts/source-build/self/src/ /p:ArtifactsDir=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/artifacts/source-build/self/src/artifacts/ /bl:/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/artifacts/source-build/self/src/artifacts/sourcebuild.binlog /p:ContinuousIntegrationBuild=true /p:SourceBuildOutputDir=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/src/source-build-reference-packages/artifacts/source-build/ /p:SourceBuiltBlobFeedDir= /p:DotNetBuildOffline=true /p:DotNetPackageVersionPropsPath=/Users/corngood/nixpkgs/tmp/dotnet-8.0.11/artifacts/obj/x64/Release/PackageVersions.source-build-reference-packages.props /p:FullAssemblySigningSupported=false -flp:Verbosity=diag\n |       |--- 96530 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96535 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96536 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96537 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96541 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96543 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96546 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       |--- 96548 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n |       \\--- 96551 corngood /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/dotnet /Users/corngood/nixpkgs/tmp/dotnet-8.0.11/.dotnet/sdk/8.0.110/MSBuild.dll /nologo /nodemode:1 /nodeReuse:false /low:false\n```\n\n`sample` output for these processes: https://gist.github.com/corngood/608a0b2fc6f8a84ea95177a3429eb55c.\n\n`dotnet-stack` seems to hang on process `96537`.\n\nThis process is the only one with a thread in:\n\n```\n7684 JIT_RareDisableHelper  (in libcoreclr.dylib) + 23  [0x10d6321df]\n7684 JIT_RareDisableHelperWorker  (in libcoreclr.dylib) + 48  [0x10d4ef9b0]\n7684 Thread::RareDisablePreemptiveGC()  (in libcoreclr.dylib) + 345  [0x10d559909]\n7684 GCEvent::Impl::Wait(unsigned int, bool)  (in libcoreclr.dylib) + 210  [0x10d775052]\n7684 _pthread_cond_wait  (in libsystem_pthread.dylib) + 1193  [0x7ff81a0207a8]\n7684 __psynch_cvwait  (in libsystem_kernel.dylib) + 10  [0x7ff819fe1aaa]\n7684 ???  (in \u003cunknown binary\u003e)  [0x7ff8aa4d6a84]\n```\n\nand also:\n\n```\n7684 CallDescrWorkerInternal  (in libcoreclr.dylib) + 124  [0x10d631121]\n7684 ???  (in \u003cunknown binary\u003e)  [0x10e59f9df]\n7684 ???  (in \u003cunknown binary\u003e)  [0x10e5981e8]\n7684 ???  (in \u003cunknown binary\u003e)  [0x10f6e6c3e]\n7684 ???  (in \u003cunknown binary\u003e)  [0x10f6e70d6]\n7684 ???  (in \u003cunknown binary\u003e)  [0x11257831f]\n7684 JIT_New(CORINFO_CLASS_STRUCT_*)  (in libcoreclr.dylib) + 146  [0x10d4e6c72]\n7684 AllocateObject(MethodTable*)  (in libcoreclr.dylib) + 96  [0x10d4cbc70]\n7684 Alloc(unsigned long, GC_ALLOC_FLAGS)  (in libcoreclr.dylib) + 163  [0x10d4cab23]\n7684 WKS::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int)  (in libcoreclr.dylib) + 192  [0x10d6294d0]\n7684 WKS::gc_heap::try_allocate_more_space(alloc_context*, unsigned long, unsigned int, int)  (in libcoreclr.dylib) + 809  [0x10d5fdf09]\n7684 WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason)  (in libcoreclr.dylib) + 644  [0x10d5fbbd4]\n7684 GCToEEInterface::SuspendEE(SUSPEND_REASON)  (in libcoreclr.dylib) + 35  [0x10d4c6f63]\n7684 ThreadSuspend::SuspendEE(ThreadSuspend::SUSPEND_REASON)  (in libcoreclr.dylib) + 404  [0x10d55c2d4]\n7684 ThreadSuspend::SuspendRuntime(ThreadSuspend::SUSPEND_REASON)  (in libcoreclr.dylib) + 213  [0x10d55a205]\n7684 FlushProcessWriteBuffers  (in libcoreclr.dylib) + 147  [0x10d3678b3]\n7684 thread_get_register_pointer_values  (in libsystem_kernel.dylib) + 144  [0x7ff819fefd5f]\n7684 thread_get_state  (in libsystem_kernel.dylib) + 149  [0x7ff819fe651b]\n7684 mach_msg2_trap  (in libsystem_kernel.dylib) + 10  [0x7ff819fdef0e]\n7684 ???  (in \u003cunknown binary\u003e)  [0x7ff8aa4d6c2c]\n7684 ???  (in runtime)  load address 0x7ff7ffcac000 + 0x14ae0  [0x7ff7ffcc0ae0]\n7684 ???  (in runtime)  load address 0x7ff7ffcac000 + 0x14938  [0x7ff7ffcc0938]\n7684 ???  (in runtime)  load address 0x7ff7ffcac000 + 0x1597c  [0x7ff7ffcc197c]\n7684 ???  (in runtime)  load address 0x7ff7ffcac000 + 0x3d68  [0x7ff7ffcafd68]\n```",
                                           "updatedAt":  "2025-01-20T19:15:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bLhqv",
                                           "createdAt":  "2025-01-21T02:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e 7684 JIT_RareDisableHelper  (in libcoreclr.dylib) + 23\n\nThis callstack means that the process is not able to complete suspension for GC. Issues like this have to investigated using low-level debugger. Could you please install .NET debugger extensions \nhttps://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-debugger-extensions, attach lldb to the hung process, and run the `Threads` command from the .NET debugger extensions and share its output here?\n\n\u003e osx-x64 on osx-arm64\n\nIt is best to use native osx-arm64 runtime on osx-arm64 for large workloads. We are aware that running osx-x64 on osx-arm64 via Rosetta tends to have reliability issues. We often track down these issues to what looks like bugs in Rosetta and it is hard to make good progress from there.\n\nIs VMR build able to use native osx-arm64 SDK when building osx-x64 bits on osx-arm64 machine? If not, it is something that needs to be fixed in the VMR. cc @jkoritzinsky\n\nNote that VMR build is fully tested and supported on Linux only in .NET 8: https://github.com/dotnet/dotnet?tab=readme-ov-file#supported-platforms",
                                           "updatedAt":  "2025-01-21T02:19:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bLh4a",
                                           "createdAt":  "2025-01-21T02:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-21T02:19:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bQkvs",
                                           "createdAt":  "2025-01-21T13:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "corngood",
                                           "body":  "\u003e  https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-debugger-extensions, attach lldb to the hung process, and run the Threads command from the .NET debugger extensions and share its output here?\n\nUnfortunately I\u0027m having some trouble with this due to xcode not being installed on the darwin machine (nix community builder) I have access to.  The plugin doesn\u0027t load in lldb from nixpkgs.  I\u0027ll try to make this happen, but it may take some time.\n\n\u003e It is best to use native osx-arm64 runtime on osx-arm64 for large workloads. We are aware that running osx-x64 on osx-arm64 via Rosetta tends to have reliability issues. \n\nFor background, I\u0027m maintaining the source-builds of dotnet (VMR) in nixpkgs for osx/linux on arm64/x64.  When nix builds x86_64-darwin packages, it does so on a build farm which now contains only aarch64 machines, so all these builds run on rosetta.\n\nThe builds are supposed to be deterministic substitutes for what a user would build on their machine, so while it might be possible to cross compile, it\u0027s not possible to use that as a substitute for what a user would build on an x64 machine.\n\n\u003e We often track down these issues to what looks like bugs in Rosetta and it is hard to make good progress from there.\n\nI suspect this is the case here too, unfortunately.\n\nI think my best bet is to find some sort of workaround.  One might be to build everything with `-maxCpuCount:1`, but VMR already takes an extremely long time to build.  I\u0027ve been looking for anything tunable in the runtime (especially GC), but no luck so far.",
                                           "updatedAt":  "2025-01-21T13:59:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[followup] App hangs on macOS / Apple Silicon when run under Rosetta",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112762",
        "createdAt":  "2025-02-20T20:23:10Z",
        "number":  112762,
        "author":  "anthonycanino",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T22:51:14Z",
        "body":  "Opening an issue to track potential push2/pop2 OS unwinder changes (if any) and mirror them in `src/coreclr/unwinder/amd64/unwinder.cpp` etc.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtgSsQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6fTKXP",
                                           "createdAt":  "2025-02-20T20:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonycanino",
                                           "body":  "@BruceForstall if you could add this to the APX issue that would be great",
                                           "updatedAt":  "2025-02-20T20:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fdLvO",
                                           "createdAt":  "2025-02-21T18:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-21T18:09:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62BKxA",
                                           "createdAt":  "2025-07-09T19:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "As of now, have a workaround in place where I\u0027m using 2 individual `push` unwind to simulate `push2`. See [here](https://github.com/dotnet/runtime/blob/3f184737d81c8404c0d16c59b8482a8c4336c416/src/coreclr/jit/unwindamd64.cpp#L235-L247). Once the requisite OS support is available, we will have to update `unwindPush2Pop2CFI` and `unwindPush2Windows`",
                                           "updatedAt":  "2025-07-09T19:28:46Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Track APX push2/pop2 OS changes for .NET unwinder changes",
        "labels":  [
                       "area-VM-coreclr",
                       "apx"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112865",
        "createdAt":  "2025-02-24T15:56:07Z",
        "number":  112865,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T21:22:47Z",
        "body":  "## Description\n\nThis issue is made for tracking necessary work for enabling runtime logging for CoreCLR on Android.\n\n### Logging\nCurrently, most of the messages logged by the runtime end up in `/dev/null` (either because they\nare disabled in release build or because they log to stdio which doesn\u0027t work on Android).\n\nLogcat is the only way to get information from remote devices, especially via Google Play Console.\n\nWe should log to logcat:\n\n- C++ exception messages\n- abort() messages / fatal errors\n- warnings\n- errors\n\nA subsystem should be added which will provide a single function that will do actual output, implementation of which\nwill be specific to the platform.  API should allow specification of severity, the actual message, and possibly a flag\nto indicate whether the process should be aborted (the decision might also be based on the severity).  Severity should\nbe shared between all targets, which then can (if needed) translate it to the target platform\u0027s value(s), if any.\n\n## Tasks\n\n- [x] Enable JIT logging: https://github.com/dotnet/runtime/pull/112677, https://github.com/dotnet/runtime/pull/113416\n- [x] Fatal error logging: https://github.com/dotnet/runtime/pull/112705, https://github.com/dotnet/runtime/pull/113416\n- [x] Enable runtime logging: https://github.com/dotnet/runtime/pull/113416, https://github.com/dotnet/runtime/pull/113916\n- [ ] Figure out how to enable stress log on Android.\n- [ ] Investigate runtime crash dumps on Android, implement custom version of PROCCreateCrashDumpIfEnabled for Android.\n- [ ] Android platform unwinder can\u0027t unwind through managed frames. Investigate possibility to register minimal unwind info for managed frames making sure Android platform unwinder can produce complete stack traces in bug reports.\n- [x] Consolidate native logging in minipal: https://github.com/dotnet/runtime/pull/113416\n\n## References on runtime logging\n\nhttps://github.com/dotnet/runtime/blob/9ff850ea5d29f487961d1c773bd495630aa8d2ea/docs/design/coreclr/botr/logging.md",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuSmFmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6frRXy",
                                           "createdAt":  "2025-02-24T15:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "/cc: @janvorli @elinor-fung @grendello @lateralusX \n\nPlease fill in the description as you see fit",
                                           "updatedAt":  "2025-02-24T15:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ft78L",
                                           "createdAt":  "2025-02-24T20:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I think it would be nice to consolidate all logging implementation in `src/native/minipal`, where we have various similar shared components.\n\nlog/assert like native code in the repo, which are overlapping:\n\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/mono/mono/utils/mono-log-android.c#L39\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/mono/mono/utils/mono-logger-internals.h#L154\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/native/libs/System.Security.Cryptography.Native.Android/pal_err.c#L31\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/mono/mono/utils/mono-logger.c#L136\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/coreclr/inc/debugmacros.h#L37\nhttps://github.com/dotnet/runtime/blob/0b80e907a50d0c64f73f23d26b1434f2674f747e/src/native/libs/Common/pal_utilities.h#L31\n",
                                           "updatedAt":  "2025-02-24T20:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fvi3Q",
                                           "createdAt":  "2025-02-25T00:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHiETg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2025-02-25T09:43:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Enable runtime logging\n\nThe most valuable form of runtime logging is stresslog. Stresslog is high-performance logging that is not printed to console. Instead, it is recorded in a circular buffer that can be extracted from a crash dump via SOS DumpLog command. Stresslog is compiled into release builds and we depend on it to diagnose toughest bugs like intermittent crashes.\n\nIt would be great if we can create a documented workflow for how to use stresslog on Android.",
                                           "updatedAt":  "2025-02-25T00:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gYaZ1",
                                           "createdAt":  "2025-02-28T14:15:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIFLPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2025-02-28T20:17:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e \u003e Enable runtime logging\n\u003e \n\u003e The most valuable form of runtime logging is stresslog. Stresslog is high-performance logging that is not printed to console. Instead, it is recorded in a circular buffer that can be extracted from a crash dump via SOS DumpLog command. Stresslog is compiled into release builds and we depend on it to diagnose toughest bugs like intermittent crashes.\n\u003e \n\u003e It would be great if we can create a documented workflow for how to use stresslog on Android.\n\nRegarding stress log, on Android we won\u0027t get access to core dumps, at least not what\u0027s currently reported to things like Google Play Console or standard Android bug reports, those reports are also limited in the data they provide, but they include logcat output, tombstone files and ANR callstack dumps, device events etc. Logcat is an internal circular memory buffers handled by the Android OS. For apps running on regular device not hooked up to adb, I believe the size of the logcat buffer is rather small (64KB) and I don\u0027t expect users to run stress log directly on end user devices (no simple way for users to enable runtime features without running adb). In cases you can access device using adb, it is possible to increase the logcat buffers making it a potential output target for all our Android logging needs. On Mono we centralized all our runtime logging into one place and categorized it into different log levels that have pretty much 1:1 mapping to logcat log levels. \n\nSince we won\u0027t get hold of core dumps or additional data except what\u0027s included in default bug report, storing stress log in internal runtime memory buffer will mainly be for internal live debugging using native debugger and SOS DumpLog command. External users are more likely to help diagnose issues using adb and logcat output. In that scenario logcat would server a similar purpose as our stress log memory buffer, except that is accessible through regular adb tooling without need of native debugger or SOS. I have not looked too deep into stress log, but what I seen is that its rather optimized to only store raw pointers to format string and arguments, optimizing the internal storage and postpone any string formatting until log gets extracted. Each thread have their own \"buffer\" meaning that there is no contention when logging when there is still free space available. Since logcat works closer to regular printf logging, it will have a higher impact per logging compared to in memory stress log.\n\nBased on above I see a couple of different scenarios:\n\n* For installed apps running in the wild, I don\u0027t think there will be an easy way to enable stress logging or even change default runtime log levels unless the embedding application adds support for this in retail application and integrate it with some UI where users can enable/disable additional diagnostics. Even if we get there, a crash won\u0027t give us the core, the logcat buffer on retail apps is probably too small and there is no way to submit additional files in generated bug reports (in case we would put stress log in a separate file). In order to get more information out of the device, we would need to rely on 3\u0027rd party crash tooling or implement something ourselves that could upload needed additional data in case of a crash, with the risk of interfering with 3\u0027rd party crash tooling already used through the Android ecosystem.\n* External users/developers having a repro and access to adb, hook up device, enabled stress log using adb, increase logcat buffer if needed and run repro, that would give us a stress log up until the point of the crash that could be shared with us.\n* Internal debugging or advanced external developers, either use above strategy or attach native debugger and uses SOS DumpLog command when app crash under debugger.\n\nSo regardless I believe there is a value to make sure we could get stress log into logcat on Android, even if it will add more overhead compared to in memory stress log due to calling a printf style 3\u0027rd party API ending up formatting the string put into logcat memory buffer.\n\nThere is still value to have option to record stress log in internal memory buffer so we could use same debug pattern for live debugging over native debugger + SOS, when we have SOS working on Android.",
                                           "updatedAt":  "2025-02-28T14:15:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gYfg4",
                                           "createdAt":  "2025-02-28T14:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Added two new task to this issue, one is to \"Figure out\" stress log on Android, inline with comment above. The other puts idea above to consolidate native logging into minipal. In order to quicker hook up runtime logging making it simpler to diagnose runtime errors and problems during initial work with the CoreClr Android port, I would assume we would do the \"Enable Runtime logging\" based on what we currently have, just adding support for logcat and then change when/if we end up doing the consolidation of logging, since that is probably a longer running task.",
                                           "updatedAt":  "2025-02-28T14:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaazd",
                                           "createdAt":  "2025-02-28T18:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIkXJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2025-03-05T05:21:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e on Android we won\u0027t get access to core dumps, at least not what\u0027s currently reported to things like Google Play Console or standard Android bug reports\n\nIt is the case for CoreCLR too. The regular bug reports or crash dumps do not have stress log enabled by default.\n\nThe typical workflow is to work with the customer to enable the stresslog, reproduce the issue with stress log enabled and capture the crashdump. It is typically needed to configure the stress log size to be in the order of megabytes to successfully diagnose GC-related crashes that are the most common use case for stress log. Also, you typically needed both the stresslog and the dump to figure out what happened. \n\nHere is an example of my go-to stresslog settings and how the workflow used to diagnose hard to reproduce crash: https://github.com/dotnet/runtime/issues/45557#issuecomment-738547930 .\n\n\u003e I have not looked too deep into stress log, but what I seen is that its rather optimized to only store raw pointers to format string and arguments, optimizing the internal storage and postpone any string formatting until log gets extracted. Each thread have their own \"buffer\" meaning that there is no contention when logging when there is still free space available. \n\nThe main reason for this architecture is to minimize the timing differences of enabled stresslog. The stress bugs typically require very specific timing to reproduce. If the logging disrupts the timing, there is a high change that the bug won\u0027t reproduce anymore.",
                                           "updatedAt":  "2025-02-28T18:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65Awjb",
                                           "createdAt":  "2025-07-22T17:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@lateralusX, is this work item complete or is there more work planned for 10? ",
                                           "updatedAt":  "2025-07-22T17:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65KYWb",
                                           "createdAt":  "2025-07-23T08:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Not for 10, rest will follow in 11.",
                                           "updatedAt":  "2025-07-23T08:31:52Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[android] Add runtime logging support for CoreCLR on Android",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114096",
        "createdAt":  "2025-04-01T09:13:58Z",
        "number":  114096,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T15:18:48Z",
        "body":  "we are single threaded on browser/wasm. so we will need to run finalizers from main thread at the convenient point in time, similar as in mono\n\n@lewing please add more details of how it is currently handled in mono runtime",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwzs56w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lBy2-",
                                           "createdAt":  "2025-04-01T09:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-01T09:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lZjb7",
                                           "createdAt":  "2025-04-03T08:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "NativeAOT-LLVM implemented it, although I don\u0027t remember details ",
                                           "updatedAt":  "2025-04-03T08:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lfg01",
                                           "createdAt":  "2025-04-03T17:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e NativeAOT-LLVM implemented it, although I don\u0027t remember details\n\nhttps://github.com/dotnet/runtimelab/pull/2634",
                                           "updatedAt":  "2025-04-03T17:38:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A8wbA",
                                           "createdAt":  "2025-08-29T14:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "If we consider running finalizers from synchronous code like NAOT_LLVM, we would also benefit from doing it for Mono in same way. \nOur users are surprised that calling `GC.Collect()` from tight synchronous loop \"doesn\u0027t work\" when there are objects in finalizer queue.\n\nThe existing solution is to call the finalizer from `setTimeout` from JS.\nFor WASI the solution is to use `wasi:clock` and schedule wakeup callback. Especially with WASIp3 it should be fine.",
                                           "updatedAt":  "2025-08-29T14:04:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C-2Tp",
                                           "createdAt":  "2025-09-09T15:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Asynchronous finalizers imply throwing PNSE from `WaitForPendingFinalizers`.\n\nAsynchronous finalizers also imply that apps (esp. on WASI) that don\u0027t yield to the host event loop would have a by-design leak built-in (without any way to remedy it, apart from avoiding any finalization entirely). I think that\u0027s a hard-to-justify experience.",
                                           "updatedAt":  "2025-09-09T15:34:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DAaaP",
                                           "createdAt":  "2025-09-09T17:31:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Running finalizers on exit from allocation helper is bug prone. You cannot tell whether the code that happens to be on the thread is going to interfere with the code that the finalizer code is going to run. It is the same fundamental problem as COM STA message pumping inside RPC calls where almost arbitrary code can start running on the thread while your code is calling out somewhere else.\n\nI think running finalizers on exit from allocation helper is fine for experimentation, but I do not think it is something we would want to ship as a supported solution.\n\nSingle threaded app models have to cooperate by running the finalizers in their top-level dispatch loop.",
                                           "updatedAt":  "2025-09-09T17:31:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DAmyK",
                                           "createdAt":  "2025-09-09T17:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e Single threaded app models have to cooperate by running the finalizers in their top-level dispatch loop.\n\nMy main worry is what to do if there is no top-level dispatch loop. It is not a big problem for browser (the browser doesn\u0027t work well if you don\u0027t return to the event loop), but are we saying that basically only async main/exports are going to be the supported (non-leaky scenario) for ST WASM in general? Should we _throw_ for non-async main/exports?\n",
                                           "updatedAt":  "2025-09-09T17:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DAtA7",
                                           "createdAt":  "2025-09-09T17:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhiIEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SingleAccretion",
                                                                               "createdAt":  "2025-09-09T17:59:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can hit the problem with async Main too. Any synchronous code that produces large amount of finalizable garbage without going to the top-level dispatch loop has this problem.",
                                           "updatedAt":  "2025-09-09T17:58:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DKOGt",
                                           "createdAt":  "2025-09-10T10:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Asynchronous finalizers imply throwing PNSE from `WaitForPendingFinalizers`.\n\nOn Mono ST this is NOP rather than PNSE. It would break too many existing codebases.\n\n\u003e apps that don\u0027t yield to the host event loop would have a by-design leak\n\nYes. It\u0027s much more likely that this would be tight loop in user code. \nWe get such bug reports for mono/browser. \"why GC doesn\u0027t work\" - because finalizers are holding the rest of the graph alive.\n\n\u003e (esp. on WASI) \n\nFor WASIp3 we would abandon synchronous `PollWasiEventLoopUntilResolved` and yield to host.\n\nFor WASIp2, we implement the [synchronous loop](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Threading/Wasi/WasiEventLoop.cs#L75)  \n\nIt allows you to create timer that would be called. I think lib-c pollables are resolved too, because lib-c sockets works.\nAnd so we could schedule `mono_runtime_do_background_work` for later by registering for `wasi:clock` pollable from C with time zero (next tick).\n\nLooking at the current code it\u0027s called in-line for WASI and that\u0027s wrong.\n\nhttps://github.com/dotnet/runtime/blob/0001e1c1d60b4d0a32c05017898455ad1a3cccc6/src/mono/mono/metadata/gc.c#L668-L672\n\nI don\u0027t think we have bandwidth to fix it for WASIp2 and I would rather wait for WASIp3.",
                                           "updatedAt":  "2025-09-10T10:35:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DNU7e",
                                           "createdAt":  "2025-09-10T13:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e For WASIp3 we would abandon synchronous PollWasiEventLoopUntilResolved and yield to host.\n\nThe yield points would still need to be explicit (or \"implicitly explicit\" if we end up using the host magic with suspendable threads - it would still need to be some kind of `wait` call). It would be the same system as browser\u0027s event loop with the same problems.\n\nMy comment w.r.t. WASI was more so that in WASI it\u0027s not clear to me that an application which doesn\u0027t yield to the host is fundamentally \"broken\" (unlike on browser). E. g. if I were to write an interactive CUI program (al\u0027a LLDB) which does `while (line = Console.ReadLine()) { ... }` (sync IO all the way down), it would only work with suspendable threads (equivalent of the COM message pumping Jan mentioned above).",
                                           "updatedAt":  "2025-09-10T13:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DNq4N",
                                           "createdAt":  "2025-09-10T14:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e The yield points would still need to be explicit\n\u003e with the same problems.\n\ndo you mean \"What Color is Your Function\" @SingleAccretion ?\n\n\u003e magic with suspendable threads\n\nfor MT guest, we should not be able to tell the difference how the host does the magic. Also for MT guest we would run finalizer on guest thread.\n\nfor ST guest, I\u0027m not friends with `wait`. Because I\u0027m scared of host-\u003eguest re-entrance \"in the middle\" of unrelated call stack. Which would lead to same state corruption that finalizer code could cause, same as Jan said.",
                                           "updatedAt":  "2025-09-10T14:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DODwC",
                                           "createdAt":  "2025-09-10T14:28:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I think that async main on ST is good tradeoff for async HTTP, async Socket, tasks on \"threadpool\" and other things we are used to as C# developers. If we allowed blocking on ST, those things would not make progress until that wait finished. Also, you could write code that would cause deadlock, if you assume \"another thread\" would wake this wait. That is, if we disable re-entrance.",
                                           "updatedAt":  "2025-09-10T14:30:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DOPdC",
                                           "createdAt":  "2025-09-10T14:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Should we _throw_ for non-async main/exports?\n\nI think that would be too harsh. \n\nPerhaps better solution would be to call finalizer+GC run at the end of exports. \nBecause that\u0027s top level enough (no other managed code is running in ST at that time, with no re-entry).",
                                           "updatedAt":  "2025-09-10T14:39:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DOyWS",
                                           "createdAt":  "2025-09-10T15:17:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e do you mean \"What Color is Your Function\"\n\nWell, what I am saying is simply that WASI P3 doesn\u0027t change much w.r.t. this issue. We will just have a host event loop instead of the guest event loop. For the finalizers to run in the async scheme you as a developer will still need to explicitly yield.\n\n...or use the \"magic\" of suspendable threads and opt into running arbitrary (not just finalizer) code at (sync IO) `wait` points. Which we agree is not desirable.",
                                           "updatedAt":  "2025-09-10T15:17:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DOznr",
                                           "createdAt":  "2025-09-10T15:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhsTzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-09-10T16:05:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e On Mono ST this is NOP rather than PNSE. It would break too many existing codebases.\n\nYeah, PNSE is a bit too radical. I think it would make sense to make it run the finalizers synchronously instead of being a no-op.",
                                           "updatedAt":  "2025-09-10T15:18:48Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[wasm coreclr] do not run finalizers on separate thread",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115096",
        "createdAt":  "2025-04-27T17:32:03Z",
        "number":  115096,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T06:13:08Z",
        "body":  "Re: https://github.com/dotnet/runtime/pull/114675#discussion_r2060672991\n\nRight now async variants are explicitly excluded from PGO. \nNo fundamental reason for that, it is just an NYI that needs to be revisited, implemented, tested.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqObwfA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o5LdO",
                                           "createdAt":  "2025-04-27T17:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T17:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5SU6",
                                           "createdAt":  "2025-04-27T18:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T18:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5SfC",
                                           "createdAt":  "2025-04-27T18:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "I assume by async variants you mean specifically the runtime provided thunks. I believe PGO already works fine in the methods with user provided IL (at least it was the case a few months ago).",
                                           "updatedAt":  "2025-04-27T18:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5iJH",
                                           "createdAt":  "2025-04-27T21:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I did not look in details if it is only thunks that we do not support. This is just an issue to make sure we act on TODOs in that area. \nIt may be that we decide that what we have working is sufficient. Then removing TODO would be the only action. \n\nI am not sure how much thunks can dynamically learn and improve something. \nMaybe some kind of devirtualization/inlining is still possible.",
                                           "updatedAt":  "2025-05-13T22:24:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5j94",
                                           "createdAt":  "2025-04-27T22:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "You did the work in https://github.com/dotnet/runtimelab/pull/2818#issue-2706574087 to ensure tiered compilation and PGO worked (in the first version the PR broke it.)\n\n\u003e I am not sure how much thunks can dynamically learn something and improve.\nMaybe some kind of devirtualization/inlining is still possible.\n\nYeah, this would likely be around inlining. But yes, it likely is not super important, and it is not clear if we would even benefit from it. I also believe there currently is no tiering at all for the runtime provided stubs (so they are always compiled in tier 1).\n",
                                           "updatedAt":  "2025-04-27T22:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5vB8",
                                           "createdAt":  "2025-04-28T00:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Ah, right. I remember there was a major issue with tiering as we got confused which of the two variants we are dealing with. \nI forgot that it was in a PGO testcase. \n\nI guess PGO is working in scenarios where we allow tiering. ",
                                           "updatedAt":  "2025-04-28T00:01:32Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[RuntimeAsync] PGO support.",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115097",
        "createdAt":  "2025-04-27T17:34:26Z",
        "number":  115097,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T06:18:16Z",
        "body":  "https://github.com/dotnet/runtime/pull/114675#discussion_r2060681432\n\nRight now async variants are explicitly excluded from Multicore JIT.\nNo fundamental reason for that, it is just an NYI that needs to be revisited, implemented, tested.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqOVYUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o5Lq0",
                                           "createdAt":  "2025-04-27T17:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T17:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5VhR",
                                           "createdAt":  "2025-04-27T19:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T19:20:23Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[RuntimeAsync] Multicore JIT support.",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115098",
        "createdAt":  "2025-04-27T17:45:43Z",
        "number":  115098,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODByCPg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2025-04-28T03:09:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-12T20:32:13Z",
        "body":  "There are two parts here:\n- R2R for Async helpers.  \nWe explicitly make them `BypassReadyToRun`, since R2R typesystem does not support `MethodImpl.Async`. THis could be a relatively easy fix.\n\n- R2R for Async/Task variants of user-defined methods (those using user-provided IL). \nWe exclude these in R2R. It is basically an NYI, that needs to be revisited, implemented, tested.\n\n- R2R for Async/Task thunks.\nIt is unclear whether this is beneficial. Needs to be revisited.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqOTLiQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o5MuJ",
                                           "createdAt":  "2025-04-27T17:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T17:46:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[RuntimeAsync] R2R support",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115794",
        "createdAt":  "2025-05-20T13:08:05Z",
        "number":  115794,
        "author":  "cleardarkz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T17:39:51Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nSometimes when running a background worker for a lengthy period of time, it appears that the GC tries to run a collection round, suspends all threads but gets interlocked while trying to free resources\n\nWe have experienced this behavior on long running processes, usually a couple of hours or more. I will add that the codebase is using GetAwaiter.Result() extensively, however, it appears that even in this case, there should be some sort of a fallback to when the GC fails to run\n\n\nI have attached a dump diagram of the latest occurrence. I will be able to provide more logs/dumps as required.\n\nAttempting to reproduce the issue with a sample repo succeeded in behavior but the memory dumps do not look the same, therefor the sample project is not attached to the report\n\n### Expected Behavior\n\nResources allocation exception, process exception, any sort of an error which will resume the .NET internals\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\nNo exceptions, the process hangs until manually freed (Forceful shutdown)\n\n### .NET Version\n\n8.0.409\n\n### Anything else?\n\n![Image](https://github.com/user-attachments/assets/4092e711-c08d-4b67-9dd6-01fe8706740b)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvtTprw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6skWNg",
                                           "createdAt":  "2025-05-20T13:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOES2-Tg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2025-05-20T14:11:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Looks like this issue should be transferred to [dotnet/runtime](https://github.com/dotnet/runtime) as it doesn\u0027t appear to be specific to ASP.NET Core.\n",
                                           "updatedAt":  "2025-05-20T13:15:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sw4yu",
                                           "createdAt":  "2025-05-21T16:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-21T16:04:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sxdYo",
                                           "createdAt":  "2025-05-21T17:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cleardarkz, can you please provide a repro for this issue or a dump when its deadlocked? ",
                                           "updatedAt":  "2025-05-21T17:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6szGqX",
                                           "createdAt":  "2025-05-21T19:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cleardarkz",
                                           "body":  "\u003e [@cleardarkz](https://github.com/cleardarkz), can you please provide a repro for this issue or a dump when its deadlocked?\n\nAbsolutely,\n\nHere\u0027s a Google Drive link:\nhttps://drive.google.com/file/d/1_7KcDgkSuqIA9MFpe_kqkxXE3bbdL9b7/view?usp=sharing",
                                           "updatedAt":  "2025-05-21T19:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6szki1",
                                           "createdAt":  "2025-05-21T20:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is this a NativeAOT app? I notice that ThreadSuspension appears to be blocked by this reverse pInvoke stack. @VSadov have you seen anything like this before? \n\n```\n # Call Site\n00 ntdll!ZwWaitForSingleObject\n01 KERNELBASE!WaitForSingleObjectEx\n02 Cymulate_Agent_Service!Thread::RareDisablePreemptiveGC\n03 Cymulate_Agent_Service!JIT_ReversePInvokeEnterRare2\n04 Cymulate_Agent_Service!JIT_ReversePInvokeEnterTrackTransitions\n05 0x0\n06 user32!UserCallWinProcCheckWow\n07 user32!DispatchClientMessage\n08 user32!__fnINDEVICECHANGE\n09 ntdll!KiUserCallbackDispatcherContinue\n0a win32u!ZwUserGetMessage\n0b user32!GetMessageW\n0c 0x0\n0d 0x0\n0e Cymulate_Agent_Service!CallDescrWorkerInternal\n0f Cymulate_Agent_Service!CallDescrWorkerWithHandler\n10 Cymulate_Agent_Service!DispatchCallSimple\n11 Cymulate_Agent_Service!ThreadNative::KickOffThread_Worker\n12 Cymulate_Agent_Service!ManagedThreadBase_DispatchInner\n13 Cymulate_Agent_Service!ManagedThreadBase_DispatchMiddle\n14 Cymulate_Agent_Service!ManagedThreadBase_DispatchOuter\n15 Cymulate_Agent_Service!ManagedThreadBase_FullTransition\n16 Cymulate_Agent_Service!ManagedThreadBase::KickOff\n17 Cymulate_Agent_Service!ThreadNative::KickOffThread\n18 kernel32!BaseThreadInitThunk\n19 ntdll!RtlUserThreadStart\n```",
                                           "updatedAt":  "2025-05-21T20:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s0geG",
                                           "createdAt":  "2025-05-21T22:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e Is this a NativeAOT app? I notice that ThreadSuspension appears to be blocked by this reverse pInvoke stack. @VSadov have you seen anything like this before?\n\nThis is a normal stack for a thread that is trying to enter managed code while EE is suspended, most likely for GC. In such case the thread will block and wait for EE to resume. \n",
                                           "updatedAt":  "2025-05-21T22:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s0sWJ",
                                           "createdAt":  "2025-05-21T23:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "From the screenshot it looks like \n- it is CoreCLR, not NativeAot   (because PulseAll is in native code)\n- one thread tries to initiate GC, thus it starts suspending all managed threads\n- almost all threads are suspended, but not all. \n- the suspending thread is waiting (with timeout) for more progress. If the wait times out it will try checking if threads are all stopped or can be forced to stop via hijacking, interrupts etc..  \nUltimately it is possible for a thread to be in a state where it cannot be suspended. Such states should be transient and should not take long.\n- one thread is running ObjectNative::PulseAll.   If it runs in COOP mode it would be in a \"can\u0027t suspend\" state and would prevent EE suspend to complete. \n\nIf the  PulseAll thread is somehow stuck, EE cannot finish suspending and GC cannot start.\n\nI am not sure how PulseAll can get stuck though - it is just going through a linked list of waiters and sets every waiter\u0027s event. \n\nThe waiter list would be limited by the number of threads in the program, so should not be long. Perhaps it gets corrupted somehow and became circular?\nOr maybe the Set on the event gets stuck - not sure if that can happen.",
                                           "updatedAt":  "2025-05-21T23:33:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s5g7P",
                                           "createdAt":  "2025-05-22T10:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cymulateagentteam",
                                           "body":  "@VSadov I have reproduced the issue and debugged it live. \n\nThe singly linked list had somehow turned into a circular list, which is definitely an issue. \nThe memory hasn\u0027t been corrupted, the link-\u003enext value pointed to the same node. See the following: \n\n![Image](https://github.com/user-attachments/assets/b77541b3-a364-4191-950b-9184a5d14224)\n\n\nhttps://github.com/dotnet/runtime/blob/7e7e19568fc8ba398e7acdf0cbeee0160d95da85/src/coreclr/vm/syncblk.cpp#L240\n\ncausing the following PulseAll to effectively deadlock the GC collection procedure\n\nhttps://github.com/dotnet/runtime/blob/7e7e19568fc8ba398e7acdf0cbeee0160d95da85/src/coreclr/vm/syncblk.cpp#L2877\n\nI have managed to unclog the deadlock in runtime by manually resetting the -\u003em_pNext value to NULL, restoring the SList expected behavior\n\nI believe the root cause might be manipulation of the SList from code that\u0027s unprotected by a critical section\n\nThere could be an easy mitigation for this issue, with the following before L240: \n\n```\nif ( psb-\u003em_Link.m_pNext == pLink-\u003em_pNext )\npsb-\u003em_Link.m_pNext = NULL; \n```",
                                           "updatedAt":  "2025-05-22T10:45:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s8Xkl",
                                           "createdAt":  "2025-05-22T14:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETN5WA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-05-22T15:49:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is there a standalone repro for this? We should properly investigate and fix root cause instead of taking the proposed fix as-is. ",
                                           "updatedAt":  "2025-05-22T14:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s94tB",
                                           "createdAt":  "2025-05-22T16:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cleardarkz",
                                           "body":  "\u003e Is there a standalone repro for this? We should properly investigate and fix root cause instead of taking the proposed fix as-is.\n\nInvestigating the root cause might be a lengthy process as there could be so many reasons why this could happen.\n\nThe proposed fix is clean and simple, if the condition in the proposed fix is met, you can safely assume the the process is deadlocked.\n\nIts also worth noting that after releasing the deadlock manually by setting -\u003em_pNext to NULL, the process resumed gracefully without any further hiccups, as if it was never deadlocked.",
                                           "updatedAt":  "2025-05-22T16:44:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s-MDL",
                                           "createdAt":  "2025-05-22T17:10:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We cannot accept changes to silently ignore unexpected data corruptions for security reasons.\n\nIt would be ok to check for the data corruption and fail the process immediately. It would replace the hang with a crash.",
                                           "updatedAt":  "2025-05-22T17:10:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_Ssa",
                                           "createdAt":  "2025-05-22T19:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I think all changes to the list happen when the corresponding lock is acquired, so how could the list become circular?\n\nI wonder if it is possible to insert a circularity check/failfast at places where a waiter is added or removed from the queue and run the repro?",
                                           "updatedAt":  "2025-05-22T19:35:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_lxM",
                                           "createdAt":  "2025-05-22T19:31:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cleardarkz",
                                           "body":  "\u003e We cannot accept changes to silently ignore unexpected data corruptions for security reasons.\n\u003e \n\u003e It would be ok to check for the data corruption and fail the process immediately. It would replace the hang with a crash.\n\nUnderstood, we\u0027re merely here to provide all the insights we can gather and help find a solution to the issue, if one exists.",
                                           "updatedAt":  "2025-05-22T19:31:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tCPp0",
                                           "createdAt":  "2025-05-23T02:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Potentially related: https://github.com/dotnet/runtime/issues/97034 (another mysterious PulseAll issue)",
                                           "updatedAt":  "2025-05-23T02:04:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tDfa7",
                                           "createdAt":  "2025-05-23T06:10:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The corrupted linked list lives on thread stacks, ie one thread is modifying stack of another thread. It is unusual data structure. We may be hitting a corner case hardware issue with write-back of stack memory. The linked list corruption can be explained by write-back of stack memory being issued twice that is harmless nearly 100% of the time otherwise.\n\nHere is a delta that we can try to test this theory: https://github.com/jkotas/runtime/commit/3b340c16a9396d8a2876b618918b54a1ce726f60 . Could you please give it a try and let us know if you still hit the hang? InterlockedExchange should give a hint to the hardware to avoid delayed write backs.",
                                           "updatedAt":  "2025-05-23T06:10:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tUdV7",
                                           "createdAt":  "2025-05-25T13:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cymulateagentteam",
                                           "body":  "\u003e The corrupted linked list lives on thread stacks, ie one thread is modifying stack of another thread. It is unusual data structure. We may be hitting a corner case hardware issue with write-back of stack memory. The linked list corruption can be explained by write-back of stack memory being issued twice that is harmless nearly 100% of the time otherwise.\n\u003e \n\u003e Here is a delta that we can try to test this theory: [jkotas@3b340c1](https://github.com/jkotas/runtime/commit/3b340c16a9396d8a2876b618918b54a1ce726f60) . Could you please give it a try and let us know if you still hit the hang? InterlockedExchange should give a hint to the hardware to avoid delayed write backs.\n\nI am positive this is going to work, however, I am not entirely sure we can definitely pin this over hardware-caused delayed write-backs. \nBy assuming this theory is correct and the issue is write-back of stack memory, we simply cannot trust anything to be consistent in the operating system. \n\nAlso, this issue has been reproducing specifically with this list way too many times for it to be statistically probable to suffer specifically from delayed write-backs.  (although I do believe everything is possible)\n\nIf I had to guess, I would lean towards insufficient locking mechanism (incorrect lock objects? missing lock?) or uninitialized fields that creates a once-in-a-while race condition status where the list may be corrupted provided the right stars align\n\nI think performing InterlockedExchange would solve insufficient locking in this case as well as solving delayed write-backs.\nI suppose we could give it a go, however, the issue reproduces once every couple of days at best, sometimes it takes weeks.\n\nAnother insight - by assuming delayed write-backs could happen so relatively often, I would expect a LOT of processes to break over this behavior. For instance, Windows uses Critical Sections in the NT Loader mechanism to synchronize linked lists across threads, for proper modules initialization and usage, these kinds of swaps in linked lists are very popular in the NT loader implementation (fundamentally the back-bone of Windows) I would expect the lists in the NT Loader to corrupt way before the lists are corrupted in the process\u0027 .NET runtime, I would bet a single .NET process\u0027 GC collector runs less frequently than the entire NT Loader implementation in every Windows process",
                                           "updatedAt":  "2025-05-25T13:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tUkDI",
                                           "createdAt":  "2025-05-25T14:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Windows uses Critical Sections in the NT Loader mechanism to synchronize linked lists across threads, for proper modules initialization and usage, these kinds of swaps in linked lists are very popular in the NT loader implementation (fundamentally the back-bone of Windows)\n\nThis linked list is not an ordinary linked list accessed by multiple threads. Ordinary linked lists accessed by multiple threads are allocated on heap.\n\nThis linked list is allocated on stacks of multiple threads. One thread has pointers into stacks of other threads and uses those pointers to read and write stack memory on other threads. This is very unusual. I cannot think of other examples where code uses a data structure like that. Are you aware of any (e.g. in NT loader)?\n\n\u003e I would lean towards insufficient locking mechanism (incorrect lock objects? missing lock?) or uninitialized fields that creates a once-in-a-while race condition status \n\nI would lean towards this as well. However, I am not able to find evidence of anything like that in the crash dumps.",
                                           "updatedAt":  "2025-05-25T14:12:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64dvdM",
                                           "createdAt":  "2025-07-20T21:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I\u0027ve examined code that implements monitor Wait/Pulse/PulseAll. it is indeed complex and also very old code. There are ways in which the implementation could be made more straightforward, but I do not see any obvious flaws that would affect common scenarios. \nIn particular all operations that modify the waiting thread list for a given syncblock appear to be done while holding `SyncBlockCache` lock, which should ensure exclusivity and consistency of modifications.\n(also blocking threads protect the locked object and the syncblock for the duration of wait, so GC can\u0027t reclaim them as long as anyone is waiting)\n\nI was unable to make a sample that that involve Wait/Pulse/PulseAll and would end up with a circular waiting thread list and it would be hard to claim for any code change that it fixed the issue if there is no meaningful repro in the first place.\n\nAlso, considering how common the use of Monitor lock is by programs and by the runtime, I wonder why we do not see the same problems more broadly.\n\nI am wondering if the program that encounters this issue does something unusual that most programs do not do?\n\nBy \"unusual\" I would count things like \n* modifying behavior of `Wait` via overriding `SynchronizationContext.Wait` or \n* there is a possibility of threads exiting while holding locks (possible if calling `Monitor.Enter` directly, vs. via `lock(){}` statement).\n* . . .\n\n",
                                           "updatedAt":  "2025-07-20T21:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68tn9f",
                                           "createdAt":  "2025-08-07T23:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T23:00:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc684b01",
                                           "createdAt":  "2025-08-08T18:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@jkoritzinsky has been working on switching Monitor to C# in #118371. It is likely going to fix this issue as side-effect. ",
                                           "updatedAt":  "2025-08-08T18:09:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-1Omv",
                                           "createdAt":  "2025-08-19T17:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cymulateagentteam",
                                           "body":  "@jkotas @jkoritzinsky I have found another issue from 2018 describing the very same behavior, with a similar stack trace @ \nhttps://github.com/StackExchange/StackExchange.Redis/issues/975",
                                           "updatedAt":  "2025-08-19T17:39:51Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "GC hangs indefinitely on LongRunning",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115848",
        "createdAt":  "2025-05-21T19:10:47Z",
        "number":  115848,
        "author":  "ealsur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-08T08:38:35Z",
        "body":  "### Description\n\nWe have an Azure Pipeline that runs dotnet test on the solution. The solution contains several test projects. Non-deterministically, we get Testhost aborted failures, across different test projects, sometimes none, for the same source code.\n\nThis using .NET 8.0.408 on Linux.\n\n### Reproduction Steps\n\nWhen the host crashes, we see these logs using `--diag`\n\n```\nTpTrace Verbose: 0 : 1307, 10, 2025/05/21, 18:27:09.172, 249491535604, vstest.console.dll, TestHostManagerCallbacks.StandardOutputReceivedCallback Test host standard output line: \nTpTrace Warning: 0 : 1307, 11, 2025/05/21, 18:27:09.172, 249491562318, vstest.console.dll, TestHostManagerCallbacks.ErrorReceivedCallback Test host standard error line: \nTpTrace Verbose: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249494786437, vstest.console.dll, TestHostProvider.ExitCallBack: Host exited starting callback.\nTpTrace Error: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249494945026, vstest.console.dll, TestHostManagerCallbacks.ExitCallBack: Testhost processId: 1918 exited with exitcode: 139 error: \u0027\u0027\nTpTrace Verbose: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249495007524, vstest.console.dll, DotnetTestHostManager.OnHostExited: invoking OnHostExited callback\nTpTrace Verbose: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249495079620, vstest.console.dll, CrossPlatEngine.TestHostManagerHostExited: calling on client process exit callback.\nTpTrace Information: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249495154571, vstest.console.dll, TestRequestSender.OnClientProcessExit: Test host process exited. Standard error: \nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.176, 249495239770, vstest.console.dll, TestRequestSender.WaitForRequestHandlerConnection: waiting took 1331 ms, with timeout 90000 ms, and result 2, which is failure.\nTpTrace Information: 0 : 1307, 11, 2025/05/21, 18:27:09.176, 249495242216, vstest.console.dll, SocketServer.Stop: Stop server endPoint: 127.0.0.1:34723\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.176, 249495307237, vstest.console.dll, Test host failed to start Test host launched:True test host exited: True\nTpTrace Information: 0 : 1307, 11, 2025/05/21, 18:27:09.176, 249495373343, vstest.console.dll, SocketServer.Stop: Cancellation requested. Stopping message loop.\nTpTrace Verbose: 0 : 1307, 11, 2025/05/21, 18:27:09.176, 249495618365, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: HostProviderEvents.OnHostExited: Invoking callback 1/1 for Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager., took 0 ms.\nTpTrace Error: 0 : 1307, 5, 2025/05/21, 18:27:09.177, 249496714440, vstest.console.dll, ProxyExecutionManager.StartTestRun: Failed to start test run: Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException: Testhost process for source(s) \u0027/__w/1/s/\u003cobfuscatedproject\u003e.dll\u0027 exited with error: . Please check the diagnostic logs for more information.\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.ThrowOnTestHostExited(IEnumerable`1 sources, Boolean testHostExited) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyOperationManager.cs:line 520\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(IEnumerable`1 sources, String runSettings) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyOperationManager.cs:line 290\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.InitializeTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyExecutionManager.cs:line 182\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.179, 249498436005, vstest.console.dll, TestRunRequest:SendTestRunMessage: Starting.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.179, 249498630291, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: TestRun.LogMessages: Invoking callback 1/1 for Microsoft.VisualStudio.TestPlatform.CommandLine.TestRunResultAggregator., took 0 ms.\nTpTrace Verbose: 0 : 1307, 4, 2025/05/21, 18:27:09.179, 249498684596, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestRunMessage: Invoking callback 1/2 for Microsoft.VisualStudio.TestPlatform.Extensions.TrxLogger.TrxLogger., took 0 ms.\nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.179, 249498757541, vstest.console.dll, TestRunRequest:SendTestRunMessage: Completed.\nTpTrace Verbose: 0 : 1307, 4, 2025/05/21, 18:27:09.179, 249498865366, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestRunMessage: Invoking callback 2/2 for Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ConsoleLogger., took 0 ms.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.189, 249508779204, vstest.console.dll, TestRequestSender.EndSession: Sending end session.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.189, 249508869554, vstest.console.dll, ProxyOperationManager.Close: waiting for test host to exit for 100 ms\nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.189, 249508962930, vstest.console.dll, SocketServer.Stop: Stop server endPoint: 127.0.0.1:34723\nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.189, 249509011522, vstest.console.dll, SocketServer.Stop: Cancellation requested. Stopping message loop.\nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.189, 249509077336, vstest.console.dll, Closing the connection\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249513810669, vstest.console.dll, ParallelProxyExecutionManager: HandlePartialRunComplete: Total workloads = 1, Total started clients = 1 Total completed clients = 1, Run complete = True, Run canceled: False.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249513878186, vstest.console.dll, ParallelProxyExecutionManager: HandlePartialRunComplete: All runs completed stopping all managers.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249513943199, vstest.console.dll, ParallelOperationManager.StopAllManagers: Stopping all managers.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249514001689, vstest.console.dll, ParallelOperationManager.ClearSlots: Clearing all slots. Slots should accept more work: False\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249514078955, vstest.console.dll, ParallelOperationManager.SetOccupiedSlotCount: Setting slot counts AvailableSlotCount = 1, OccupiedSlotCount = 0.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.194, 249514148716, vstest.console.dll, Occupied slots:\n\nTpTrace Information: 0 : 1307, 4, 2025/05/21, 18:27:09.226, 249545245008, vstest.console.dll, Converter.ToCollectionEntries: Converting attachmentSets  to collection entries.\nTpTrace Information: 0 : 1307, 4, 2025/05/21, 18:27:09.229, 249548424212, vstest.console.dll, Results File: /__w/1/TestResults/_487e1012aa75_2025-05-21_18_27_09.trx\nTpTrace Verbose: 0 : 1307, 4, 2025/05/21, 18:27:09.229, 249548494765, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestRunComplete: Invoking callback 1/3 for Microsoft.VisualStudio.TestPlatform.Extensions.TrxLogger.TrxLogger., took 15 ms.\nTpTrace Verbose: 0 : 1307, 4, 2025/05/21, 18:27:09.234, 249553203572, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestRunComplete: Invoking callback 2/3 for Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ConsoleLogger., took 4 ms.\nTpTrace Verbose: 0 : 1307, 4, 2025/05/21, 18:27:09.234, 249553569952, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestRunComplete: Invoking callback 3/3 for Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger., took 0 ms.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.234, 249553839931, vstest.console.dll, TestRunRequest:TestRunComplete: Starting. IsAborted:True IsCanceled:False.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.234, 249553997888, vstest.console.dll, ParallelOperationManager.DoActionOnAllManagers: Calling an action on all managers.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.235, 249554950595, vstest.console.dll, TestLoggerManager.HandleTestRunComplete: Ignoring as the object is disposed.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.235, 249555017581, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: TestRun.TestRunComplete: Invoking callback 1/2 for Microsoft.VisualStudio.TestPlatform.CommandLine.TestRunResultAggregator., took 0 ms.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.235, 249555111137, vstest.console.dll, MulticastDelegateUtilities.SafeInvoke: TestRun.TestRunComplete: Invoking callback 2/2 for Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunTestsArgumentExecutor+TestRunRequestEventsRegistrar., took 0 ms.\nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555204132, vstest.console.dll, TestRunRequest:TestRunComplete: Completed.\nTpTrace Verbose: 0 : 1307, 1, 2025/05/21, 18:27:09.236, 249555232979, vstest.console.dll, TestRunRequest.Dispose: Starting.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555253205, vstest.console.dll, ParallelProxyExecutionManager.StartTestRunOnConcurrentManager: Execution starting. Started clients: 1\nTpTrace Information: 0 : 1307, 1, 2025/05/21, 18:27:09.236, 249555307268, vstest.console.dll, TestRunRequest.Dispose: Completed.\nTpTrace Information: 0 : 1307, 1, 2025/05/21, 18:27:09.236, 249555387900, vstest.console.dll, TestRequestManager.RunTests: run tests completed.\nTpTrace Information: 0 : 1307, 1, 2025/05/21, 18:27:09.236, 249555469164, vstest.console.dll, RunTestsArgumentProcessor:Execute: Test run is completed.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555487467, vstest.console.dll, TestRunRequest:SendTestRunMessage: Starting.\nTpTrace Warning: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555565944, vstest.console.dll, TestRunRequest.SendTestRunMessage: Ignoring as the object is disposed.\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555662366, vstest.console.dll, ProxyExecutionManager: Test host is always Lazy initialize.\nTpTrace Verbose: 0 : 1307, 1, 2025/05/21, 18:27:09.236, 249555724686, vstest.console.dll, Executor.Execute: Exiting with exit code of 1\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555743950, vstest.console.dll, TestRequestSender.InitializeCommunication: initialize communication. \nTpTrace Information: 0 : 1307, 5, 2025/05/21, 18:27:09.236, 249555960598, vstest.console.dll, SocketServer.Start: Listening on endpoint : 127.0.0.1:43347\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.237, 249556255264, vstest.console.dll, DotnetTestHostmanager.GetTestHostProcessStartInfo: Platform environment \u0027X64\u0027 target architecture \u0027X64\u0027 framework \u0027.NETCoreApp,Version=v8.0\u0027 OS \u0027Unix\u0027\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.237, 249556323092, vstest.console.dll, DotnetTestHostmanager: Adding  --runtimeconfig \"/__w/1/s/\u003cobfuscatedproject\u003e.runtimeconfig.json\" in args\nTpTrace Verbose: 0 : 1307, 5, 2025/05/21, 18:27:09.237, 249556365582, vstest.console.dll, DotnetTestHostmanager: Adding  --depsfile \"/__w/1/s/\u003cobfuscatedproject\u003e.deps.json\" in args\nlticastDelegateUtilities.SafeInvoke: InternalTestLoggerEvents.SendTestResult: Invoking callback 2/2 for Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ConsoleLogger., took 0 ms.\n```\n\nThe crash seems to always be with `errorcode: 139` but there is no information at all on what is the cause.\n\nAdding `--blame --blame-crash --blame-crash-collect-always` to the CLI but we see no dumps.\n\nOn the `dotnet test` output we see:\n\n```\nData collector \u0027Blame\u0027 message: System.IO.FileNotFoundException: Collect dump was enabled but no dump file was generated.\n   at Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcessDumpUtility.GetDumpFiles(Boolean warnOnNoDumpFiles, Boolean processCrashed) in /_/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcessDumpUtility.cs:line 84\n   at Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector.SessionEndedHandler(Object sender, SessionEndEventArgs args) in /_/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameCollector.cs:line 534.\n```\n\n### Expected behavior\n\nSome form of explanation of what is causing the crash. Attachments contain dumps.\n\n### Actual behavior\n\nNo indication of what is the reason for the crash. No dumps in Attachments.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n*  .NET 8.0.408\n* mcr.microsoft.com/onebranch/azurelinux/build:3.0\n* x64\n* It doesn\u0027t repro locally\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrwVHLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6szhgd",
                                           "createdAt":  "2025-05-21T20:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "Looking at the `log.datacollector..` files, I see this:\n\n```\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.353, 244672232886, datacollector.dll, DataCollectionRequestHandler.ProcessRequests : DataCollection started.\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.373, 244692488147, datacollector.dll, DataCollectionRequestHandler.ProcessRequests: Datacollector received message: (DataCollection.TestHostLaunched) -\u003e {\"MessageType\":\"DataCollection.TestHostLaunched\",\"Payload\":{\"ProcessId\":1653}}\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.375, 244694516608, datacollector.dll, DynamicCoverageDataCollector.TestHostLaunched: TestHostLaunched event received: ProcessId: 1653\nTpTrace Verbose: 0 : 1538, 1, 2025/05/21, 18:27:04.375, 244694835846, datacollector.dll, MulticastDelegateUtilities.SafeInvoke: DataCollectionEvents.TestHostLaunched: Invoking callback 1/2 for Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollectorWithAttachmentProcessorAndTelemetry., took 0 ms.\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.379, 244698727824, datacollector.dll, ProcessDumpUtility.CrashDump: Creating a crash dumper for process dotnet (1653). If crash happens, dumper will try to create \u0027Full\u0027 dump and store it temporarily in path \u0027/__w/_temp/80dc43fe-e0cb-48c5-bf94-461841a82ce7\u0027. Later dumps will become attachments and will be moved to TestResults directory.\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.379, 244699120802, datacollector.dll, CrashDumperFactory: Creating dumper for Microsoft Azure Linux 3.0 with target framework .NETCoreApp,Version=v8.0.\nTpTrace Information: 0 : 1538, 1, 2025/05/21, 18:27:04.380, 244699372912, datacollector.dll, CrashDumperFactory: This is Microsoft Azure Linux 3.0 on .NETCoreApp,Version=v8.0 .NETClient dumper which uses env variables to collect crashdumps of testhost and any child process that is .NET 5 or newer.\nTpTrace Verbose: 0 : 1538, 1, 2025/05/21, 18:27:04.382, 244701556438, datacollector.dll, MulticastDelegateUtilities.SafeInvoke: DataCollectionEvents.TestHostLaunched: Invoking callback 2/2 for Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector., took 6 ms.\nTpTrace Error: 0 : 1538, 1, 2025/05/21, 18:27:07.253, 247572426347, datacollector.dll, Program.Main: Error occurred during initialization of Datacollector : System.IO.EndOfStreamException: Unable to read beyond the end of the stream.\n   at System.IO.BinaryReader.Read7BitEncodedInt()\n   at System.IO.BinaryReader.ReadString()\n   at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager.ReceiveRawMessage() in /_/src/Microsoft.TestPlatform.CommunicationUtilities/SocketCommunicationManager.cs:line 321\n   at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager.ReceiveMessage() in /_/src/Microsoft.TestPlatform.CommunicationUtilities/SocketCommunicationManager.cs:line 289\n   at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.DataCollectionRequestHandler.ProcessRequests() in /_/src/Microsoft.TestPlatform.CommunicationUtilities/DataCollectionRequestHandler.cs:line 178\n   at Microsoft.VisualStudio.TestPlatform.DataCollector.DataCollectorMain.Run(String[] args) in /_/src/datacollector/DataCollectorMain.cs:line 150\n   at Microsoft.VisualStudio.TestPlatform.DataCollector.Program.Main(String[] args) in /_/src/datacollector/Program.cs:line 25\n\n```",
                                           "updatedAt":  "2025-05-21T20:44:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6szqrd",
                                           "createdAt":  "2025-05-21T21:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "I managed to get ahold of this temporary dump from `/__w/_temp/80dc43fe-e0cb-48c5-bf94-461841a82ce7` but it doesn\u0027t have any actionable data as far as I can see:\n\n![Image](https://github.com/user-attachments/assets/4c84497b-195f-4d00-87f4-7dca81eb4e5b)",
                                           "updatedAt":  "2025-05-21T21:02:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tJojE",
                                           "createdAt":  "2025-05-23T16:10:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "@tkapin does your team own these components?  Is there a repro we can move this too?",
                                           "updatedAt":  "2025-05-23T16:10:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tb8om",
                                           "createdAt":  "2025-05-26T13:34:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tkapin",
                                           "body":  "Absolutely. @pavelhorak and team - could you please check if this is a VSTest (or related) issue? A repro would help, of course.",
                                           "updatedAt":  "2025-05-26T13:35:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tc1Ig",
                                           "createdAt":  "2025-05-26T14:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelhorak",
                                           "body":  "@nohwnd is looking into this",
                                           "updatedAt":  "2025-05-26T14:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tc8ok",
                                           "createdAt":  "2025-05-26T15:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "@ealsur the log above mentions that the testhost is exiting with 139 on linux which is probably means it is being killed by the OS via SIGSEGV \n\nTpTrace Error: 0 : 1307, 11, 2025/05/21, 18:27:09.175, 249494945026, vstest.console.dll, TestHostManagerCallbacks.ExitCallBack: Testhost processId: 1918 exited with exitcode: 139 error: \u0027\u0027\n\nThis is more likely to be an error in the code that is being tested that will then kill the whole process (testhost), rather than testhost or runtime itself (because in such cases we get multiple reports of such problems).\n\nInternet recommends to first look at kernel logs to see what could be the cause. Have you tried looking at the dump as native / mixed to see if there are any available stacks?",
                                           "updatedAt":  "2025-05-26T15:08:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tpSdf",
                                           "createdAt":  "2025-05-27T16:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "@nohwnd Thanks for the insight! Yes, we were on that track and we were trying to get a dump of the crash to understand what code was causing the issue.\nBut the problem is that using `--blame --blame-crash --blame-crash-collect-always` is not generating any crash dump. The BlameCollector is crashing while attempting to generate the crash apparently.\nOn the `dotnet test` console output we see: `Collect dump was enabled but no dump file was generated.`\nAnd there are no attachments after the run generated.",
                                           "updatedAt":  "2025-05-27T16:50:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tp1qM",
                                           "createdAt":  "2025-05-27T17:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOET-E8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ealsur",
                                                                               "createdAt":  "2025-05-27T17:50:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "You won’t be able to make a dump like that. Blame on .NET relies on the .NET built in dumper which won’t create a dump in this case. The app is killed externally by the os, so it won’t get more execution time to make the dump.",
                                           "updatedAt":  "2025-05-27T17:47:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tp4gr",
                                           "createdAt":  "2025-05-27T17:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "The challenge is this is running in Azure Pipelines, do you know if there is a way to obtain some log that can help identify what is causing the crash? I tried adding logs for unhandled exceptions on the AppDomain, but nothing is appearing.",
                                           "updatedAt":  "2025-05-27T17:52:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6trppL",
                                           "createdAt":  "2025-05-27T20:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUAHzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ealsur",
                                                                               "createdAt":  "2025-05-27T21:26:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "If you will search online on how to debug this kind of problem, there should be a command that prints the system logs, and you can just print that to screen (e.g. via cat) on the azdo agent to get the info from logs. All the highlevel .net constructs won’t work because your process is (most likely) faulting and force killed by os before it can cause more damage. \n\nMaybe someone else from runtime can offer advice on how they capture and solve such issues. @ivanpovazan you go pretty low level, some ideas?:)",
                                           "updatedAt":  "2025-05-27T20:14:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uR__t",
                                           "createdAt":  "2025-05-31T01:40:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEU86Jg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ealsur",
                                                                               "createdAt":  "2025-06-02T18:51:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Following up a bit on this one offline. In case this happens again, a good thing to check here in the future: set `DOTNET_CreateDumpVerboseDiagnostics=1` - this will help see if things are getting stuck in calls to ptrace",
                                           "updatedAt":  "2025-05-31T01:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uxZkc",
                                           "createdAt":  "2025-06-02T19:36:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "Thanks @hoyosjs ! We were able to set the flag and share a dump. I\u0027ll update the thread with findings",
                                           "updatedAt":  "2025-06-02T19:36:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uywsm",
                                           "createdAt":  "2025-06-02T21:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "The reason this seems to not get associated is the test is not even started:\n\nThe thread that crashed is \n\n\u003cdetails\u003e\n\n\u003csummary\u003e Thread 7 - stack \u003c/summary\u003e\n\n```\n* thread #7, stop reason = signal SIGSEGV: address not mapped to object\n    frame #0: 0x0000781c558f5693 libc.so.6`__GI___wait4(pid=1727, stat_loc=0x0000781c522678d4, options=0, usage=0x0000000000000000) at wait4.c:30:10\n    frame #1: 0x0000781c558f579b libc.so.6`__GI___waitpid(pid=\u003cunavailable\u003e, stat_loc=\u003cunavailable\u003e, options=\u003cunavailable\u003e) at waitpid.c:38:10 [artificial]\n    frame #2: 0x0000781c55678635 libcoreclr.so`PROCCreateCrashDump(argv=size=17, errorMessageBuffer=0x0000000000000000, cbErrorMessageBuffer=0, serialize=\u003cunavailable\u003e) at process.cpp:2306:22\n    frame #3: 0x0000781c55679580 libcoreclr.so`PROCCreateCrashDumpIfEnabled(signal=11, siginfo=0x0000781c522687b0, serialize=true) at process.cpp:2522:9\n    frame #4: 0x0000781c5564b9fe libcoreclr.so`invoke_previous_action(action=0x0000781c55748bb8, code=11, siginfo=0x0000781c522687b0, context=0x0000781c52268680, signalRestarts=\u003cunavailable\u003e) at signal.cpp:394:13\n    frame #5: 0x0000781c5564afc5 libcoreclr.so`sigsegv_handler(code=11, siginfo=0x0000781c522687b0, context=0x0000781c52268680) at signal.cpp:630:5\n    frame #6: 0x0000781c55838c90 libc.so.6`__restore_rt\n    frame #7: 0x0000781c5563737b libcoreclr.so`EESocketCleanupHelper(bool) [inlined] InterlockedOr(Destination=0x0000000000000008, Value=64) at pal.h:3739:1\n    frame #8: 0x0000781c5563737b libcoreclr.so`EESocketCleanupHelper(bool) [inlined] Thread::SetThreadState(this=0x0000000000000000, ts=TS_ExecutingOnAltStack) at threads.h:1060:9\n    frame #9: 0x0000781c5563737b libcoreclr.so`EESocketCleanupHelper(bool) [inlined] Thread::SetExecutingOnAltStack(this=0x0000000000000000) at threads.h:1257:9\n  * frame #10: 0x0000781c5563737b libcoreclr.so`EESocketCleanupHelper(isExecutingOnAltStack=\u003cunavailable\u003e) at ceemain.cpp:557:22\n    frame #11: 0x0000781c5564b9ef libcoreclr.so`invoke_previous_action(action=0x0000781c55748bb8, code=11, siginfo=0x0000781c52269a30, context=0x0000781c52269900, signalRestarts=\u003cunavailable\u003e) at signal.cpp:392:13\n    frame #12: 0x0000781c5564afc5 libcoreclr.so`sigsegv_handler(code=11, siginfo=0x0000781c52269a30, context=0x0000781c52269900) at signal.cpp:630:5\n    frame #13: 0x0000781c55838c90 libc.so.6`__restore_rt\n    frame #14: 0x0000781c525280b4\n \n```\n\n\u003c/details\u003e\n\nMeanwhile the \n\n\u003cdetails\u003e\n\n\u003csummary\u003emain thread\u003c/summary\u003e\n\n```\nbt\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal 0\n  * frame #0: 0x0000781c55907bdb libc.so.6`__munmap at syscall-template.S:117\n    frame #1: 0x0000781c55645099 libcoreclr.so`VMToOSInterface::ReleaseRWMapping(pStart=\u003cunavailable\u003e, size=\u003cunavailable\u003e) at doublemapping.cpp:237:12\n    frame #2: 0x0000781c5553363c libcoreclr.so`ExecutableAllocator::UnmapRW(this=\u003cunavailable\u003e, pRW=0x0000781c5271b000) at executableallocator.cpp:959:26\n    frame #3: 0x0000781c55515ba6 libcoreclr.so`UnlockedLoaderHeap::CommitPages(void*, unsigned long) [inlined] ExecutableWriterHolderNoLog\u003cunsigned char\u003e::Unmap(this=0x00007fff4d066698) at executableallocator.h:296:46\n    frame #4: 0x0000781c55515b91 libcoreclr.so`UnlockedLoaderHeap::CommitPages(void*, unsigned long) [inlined] ExecutableWriterHolderNoLog\u003cunsigned char\u003e::~ExecutableWriterHolderNoLog(this=0x00007fff4d066698) at executableallocator.h:334:9\n    frame #5: 0x0000781c55515b91 libcoreclr.so`UnlockedLoaderHeap::CommitPages(this=0x0000781c556ffff8, pData=0x0000781bd6db0000, dwSizeToCommitPart=16384) at loaderheap.cpp:1113:5\n    frame #6: 0x0000781c55515d31 libcoreclr.so`UnlockedLoaderHeap::UnlockedReservePages(this=0x0000781c556ffff8, dwSizeToCommit=32768) at loaderheap.cpp:1197:10\n    frame #7: 0x0000781c55515f32 libcoreclr.so`UnlockedLoaderHeap::GetMoreCommittedPages(this=\u003cunavailable\u003e, dwMinSize=\u003cunavailable\u003e) at loaderheap.cpp:1360:12 [artificial]\n    frame #8: 0x0000781c555165b0 libcoreclr.so`UnlockedLoaderHeap::UnlockedAllocAlignedMem(unsigned long, unsigned long, unsigned long*) [inlined] UnlockedLoaderHeap::UnlockedAllocAlignedMem_NoThrow(this=0x0000781c556ffff8, dwRequestedSize=24, alignment=1, pdwExtra=0x00007fff4d0667f8) at loaderheap.cpp:1748:14\n    frame #9: 0x0000781c55516567 libcoreclr.so`UnlockedLoaderHeap::UnlockedAllocAlignedMem(this=0x0000781c556ffff8, dwRequestedSize=24, dwAlignment=1, pdwExtra=0x00007fff4d0667f8) at loaderheap.cpp:1853:21\n    frame #10: 0x0000781c552dc172 libcoreclr.so`Precode::Allocate(PrecodeType, MethodDesc*, LoaderAllocator*, AllocMemTracker*) [inlined] LoaderHeap::RealAllocAlignedMem(this=0x0000781c556ffff0, dwRequestedSize=24, dwAlignment=1) at loaderheap.h:681:19\n    frame #11: 0x0000781c552dc137 libcoreclr.so`Precode::Allocate(t=PRECODE_NDIRECT_IMPORT, pMD=0x0000781bd6d960a0, pLoaderAllocator=\u003cunavailable\u003e, pamTracker=0x00007fff4d068fc0) at precode.cpp:254:91\n    frame #12: 0x0000781c553baaa0 libcoreclr.so`MethodTableBuilder::InitMethodDesc(this=0x00007fff4d068cf0, pNewMD=0x0000781bd6d960a0, Classification=\u003cunavailable\u003e, tok=100664235, dwImplFlags=128, dwMemberAttrs=8337, fEnC=NO, RVA=0, pIMDII=0x00005a469fa67c00, pMethodName=\"GetEnumValuesAndNames\") at methodtablebuilder.cpp:6111:51\n    frame #13: 0x0000781c553ba7fe libcoreclr.so`MethodTableBuilder::InitNewMethodDesc(this=0x00007fff4d068cf0, pMethod=0x00007fff4d0676b8, pNewMD=0x0000781bd6d960a0) at methodtablebuilder.cpp:5198:5\n    frame #14: 0x0000781c553bc0a7 libcoreclr.so`MethodTableBuilder::AllocAndInitMethodDescChunk(this=0x00007fff4d068cf0, startIndex=0, count=\u003cunavailable\u003e, sizeOfMethodDescs=2040) at methodtablebuilder.cpp:7065:9\n    frame #15: 0x0000781c553b2293 libcoreclr.so`MethodTableBuilder::AllocAndInitMethodDescs(this=0x00007fff4d068cf0) at methodtablebuilder.cpp:7002:17\n    frame #16: 0x0000781c553ae8d1 libcoreclr.so`MethodTableBuilder::BuildMethodTableThrowing(this=0x00007fff4d068cf0, pAllocator=0x0000781c556ffcf0, pLoaderModule=0x0000781bd6094000, pModule=0x0000781bd6094000, cl=33554506, pBuildingInterfaceList=0x00007fff4d066b88, pLayoutRawFieldInfos=0x0000000000000000, pParentMethodTable=0x0000781bd6d95c18, bmtGenericsInfo=0x00007fff4d068ca0, parentInst=SigPointer @ 0x00007fff4d066b48, cBuildingInterfaceList=4) at methodtablebuilder.cpp:1620:5\n    frame #17: 0x0000781c553c0fad libcoreclr.so`ClassLoader::CreateTypeHandleForTypeDefThrowing(pModule=0x0000781bd6094000, cl=33554506, inst=\u003cunavailable\u003e, pamTracker=0x00007fff4d068fc0) at methodtablebuilder.cpp:12589:19\n    frame #18: 0x0000781c55246d69 libcoreclr.so`ClassLoader::CreateTypeHandleForTypeKey(pKey=0x00007fff4d0692c8, pamTracker=0x00007fff4d068fc0) at clsload.cpp:0\n    frame #19: 0x0000781c55247a81 libcoreclr.so`ClassLoader::LoadTypeHandleForTypeKey_Body(TypeKey*, TypeHandle, ClassLoadLevel) [inlined] ClassLoader::DoIncrementalLoad(pTypeKey=0x00007fff4d0692c8, typeHnd=TypeHandle @ 0x00007fff4d068f68, currentLevel=CLASS_LOAD_BEGIN) at clsload.cpp:2877:27\n    frame #20: 0x0000781c55247a5b libcoreclr.so`ClassLoader::LoadTypeHandleForTypeKey_Body(this=0x00005a469fa683d0, pTypeKey=0x00007fff4d0692c8, typeHnd=TypeHandle @ 0x00007fff4d068f60, targetLevel=CLASS_LOAD_EXACTPARENTS) at clsload.cpp:3553:23\n    frame #21: 0x0000781c55243d95 libcoreclr.so`ClassLoader::LoadTypeHandleForTypeKey(this=0x00005a469fa683d0, pTypeKey=0x00007fff4d0692c8, typeHnd=TypeHandle @ 0x00007fff4d069238, targetLevel=CLASS_LOADED, pInstContext=0x0000000000000000) at clsload.cpp:3272:19\n    frame #22: 0x0000781c55244d00 libcoreclr.so`ClassLoader::LoadTypeDefThrowing(pModule=0x0000781bd6094000, typeDef=33554506, fNotFoundAction=ReturnNullIfNotFound, fUninstantiated=PermitUninstDefOrRef, tokenNotToLoad=0, level=CLASS_LOADED, pTargetInstantiation=0x0000000000000000) at clsload.cpp:2252:54\n    frame #23: 0x0000781c55241d98 libcoreclr.so`ClassLoader::LoadTypeHandleThrowing(this=0x00005a469fa683d0, pName=0x00007fff4d069468, level=CLASS_LOADED, pLookInThisModuleOnly=\u003cunavailable\u003e) at clsload.cpp:0\n    frame #24: 0x0000781c55241a10 libcoreclr.so`ClassLoader::LoadTypeByNameThrowing(pAssembly=\u003cunavailable\u003e, pNameHandle=0x00007fff4d069468, fNotFound=ThrowIfNotFound, fLoadTypes=\u003cunavailable\u003e, level=\u003cunavailable\u003e) at clsload.cpp:0\n    frame #25: 0x0000781c55225f9b libcoreclr.so`CoreLibBinder::LookupClassLocal(this=0x0000781c55700a00, id=CLASS__ENUM) at binder.cpp:71:15\n    frame #26: 0x0000781c55211e93 libcoreclr.so`SystemDomain::LoadBaseSystemClasses() [inlined] CoreLibBinder::GetClass(id=CLASS__ENUM) at binder.h:341:16\n    frame #27: 0x0000781c55211e79 libcoreclr.so`SystemDomain::LoadBaseSystemClasses(this=0x0000781c556ff2f0) at appdomain.cpp:1304:24\n    frame #28: 0x0000781c55211a89 libcoreclr.so`SystemDomain::Init(this=0x0000781c556ff2f0) at appdomain.cpp:1149:5\n    frame #29: 0x0000781c55637a03 libcoreclr.so`EEStartupHelper() at ceemain.cpp:924:33\n    frame #30: 0x0000781c55637132 libcoreclr.so`EEStartup() [inlined] EEStartup()::$_0::operator()(this=\u003cunavailable\u003e, p=\u003cunavailable\u003e) const at ceemain.cpp:1060:9\n    frame #31: 0x0000781c556370b6 libcoreclr.so`EEStartup() at ceemain.cpp:1062:5\n    frame #32: 0x0000781c5563701c libcoreclr.so`EnsureEEStarted() at ceemain.cpp:299:17\n    frame #33: 0x0000781c5524fd5c libcoreclr.so`CorHost2::Start(this=0x00005a469fa2f250) at corhost.cpp:100:14\n    frame #34: 0x0000781c5520ec8a libcoreclr.so`coreclr_initialize(exePath=\u003cunavailable\u003e, appDomainFriendlyName=\u003cunavailable\u003e, propertyCount=11, propertyKeys=\u003cunavailable\u003e, propertyValues=\u003cunavailable\u003e, hostHandle=0x00007fff4d069af8, domainId=0x00007fff4d069af4) at exports.cpp:320:16\n    frame #35: 0x0000781c55772085 libhostpolicy.so`coreclr_t::create(libcoreclr_path=\u003cunavailable\u003e, exe_path=\"/usr/share/dotnet/dotnet\", app_domain_friendly_name=\"clrhost\", properties=0x00005a469fa29fe8, inst=nullptr) at coreclr.cpp:73:10\n    frame #36: 0x0000781c5578d16e libhostpolicy.so`(anonymous namespace)::create_coreclr() at hostpolicy.cpp:75:23\n    frame #37: 0x0000781c5578caf4 libhostpolicy.so`corehost_main(argc=18, argv=0x00005a469fa25c10) at hostpolicy.cpp:422:10\n    frame #38: 0x0000781c557cc685 libhostfxr.so`fx_muxer_t::handle_exec_host_command(std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e const\u0026, host_startup_info_t const\u0026, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e, std::allocator\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e\u003e\u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003cknown_options const, std::vector\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e, std::allocator\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e\u003e\u003e\u003e\u003e\u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) [inlined] execute_app(impl_dll_dir=\"/usr/share/dotnet/shared/Microsoft.NETCore.App/8.0.15\", init=0x00005a469fa27b70, argc=18, argv=0x00005a469fa25c10) at fx_muxer.cpp:145:20 [opt]\n    frame #39: 0x0000781c557cc41b libhostfxr.so`fx_muxer_t::handle_exec_host_command(std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e const\u0026, host_startup_info_t const\u0026, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e, std::allocator\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e\u003e\u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003cknown_options const, std::vector\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e, std::allocator\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e\u003e\u003e\u003e\u003e\u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) [inlined] (anonymous namespace)::read_config_and_execute(host_command=\u003cunavailable\u003e, host_info=\u003cunavailable\u003e, app_candidate=\"/__w/1/s/test/AzureAI.MaaS.Test/bin/Release/net8.0/testhost.dll\", opts=\u003cunavailable\u003e, new_argc=18, new_argv=0x00005a469fa25c10, mode=\u003cunavailable\u003e, is_sdk_command=\u003cunavailable\u003e, out_buffer=\u003cunavailable\u003e, buffer_size=\u003cunavailable\u003e, required_buffer_size=\u003cunavailable\u003e) at fx_muxer.cpp:532:18 [opt]\n    frame #40: 0x0000781c557cc316 libhostfxr.so`fx_muxer_t::handle_exec_host_command(host_command=\"\", host_info=0x00007fff4d069ec0, app_candidate=\"/__w/1/s/test/AzureAI.MaaS.Test/bin/Release/net8.0/testhost.dll\", opts=size=2, argc=23, argv=0x00007fff4d06a238, argoff=6, mode=muxer, is_sdk_command=\u003cunavailable\u003e, result_buffer=0x0000000000000000, buffer_size=0, required_buffer_size=0x0000000000000000) at fx_muxer.cpp:1007:12 [opt]\n    frame #41: 0x0000781c557cb67d libhostfxr.so`fx_muxer_t::execute(host_command=\u003cunavailable\u003e, argc=23, argv=0x00007fff4d06a238, host_info=0x00007fff4d069ec0, result_buffer=0x0000000000000000, buffer_size=0, required_buffer_size=0x0000000000000000) at fx_muxer.cpp:578:18 [opt]\n    frame #42: 0x0000781c557c55f2 libhostfxr.so`hostfxr_main_startupinfo(argc=23, argv=0x00007fff4d06a238, host_path=\"/usr/share/dotnet/dotnet\", dotnet_root=\"/usr/share/dotnet/\", app_path=\"/usr/share/dotnet/dotnet.dll\") at hostfxr.cpp:63:12 [opt]\n    frame #43: 0x00005a4681308981 dotnet`exe_start(argc=23, argv=0x00007fff4d06a238) at corehost.cpp:253:18 [opt]\n    frame #44: 0x00005a4681308c5f dotnet`main(argc=23, argv=0x00007fff4d06a238) at corehost.cpp:321:21 [opt]\n    frame #45: 0x0000781c55822efb libc.so.6`__libc_start_call_main(main=(dotnet`main at corehost.cpp:303), argc=23, argv=0x00007fff4d06a238) at libc_start_call_main.h:58:16\n    frame #46: 0x0000781c55822fbb libc.so.6`__libc_start_main_impl(main=(dotnet`main at corehost.cpp:303), argc=23, argv=0x00007fff4d06a238, init=\u003cunavailable\u003e, fini=\u003cunavailable\u003e, rtld_fini=\u003cunavailable\u003e, stack_end=0x00007fff4d06a228) at libc-start.c:360:3\n    frame #47: 0x00005a4681307c9a dotnet`_start + 42\n```\n\n\u003c/details\u003e\n\nThis is a reentrant crash. We faulted *somewhere* who\u0027s memory isn\u0027t static c++, modules, nor managed code and also not on the managed heap (Given the siginfo we jumped to an arbitrary point with segv with mapper fault). Then we fault in `EESocketCleanupHelper` because `GetThread` is null. I tried poking a bit at the context in the original that originally ended up calling into the bogus address, but it\u0027s libc\u0027s start_thread according to poking RBP/RSP a little... That being said - I can\u0027t find this thread in `CorUnix::pGThreadList` so I am not sure why it\u0027s performing cleanup.\n\n@VSadov,  Does this thread null issue sound familiar at all? This is 8.0.15\n\n@janvorli any ideas of where we can investigate any more?",
                                           "updatedAt":  "2025-06-02T21:24:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uzGr5",
                                           "createdAt":  "2025-06-02T21:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVKAVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ealsur",
                                                                               "createdAt":  "2025-06-02T21:50:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2025-06-03T17:39:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The bug is here:\nhttps://github.com/dotnet/runtime/blob/efd5742bb5dd1677fbbbeb277bcfb5c9025548e5/src/coreclr/vm/ceemain.cpp#L555-L558\n\nThe current state has it fixed this way:\n```c++\n    if (isExecutingOnAltStack)\n    {\n        Thread *pThread = GetThreadNULLOk();\n        if (pThread)\n        {\n             pThread-\u003eSetExecutingOnAltStack();\n        }\n    }\n```\nIt was fixed in https://github.com/dotnet/runtime/pull/100817",
                                           "updatedAt":  "2025-06-02T21:49:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uzHDx",
                                           "createdAt":  "2025-06-02T21:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It was never backported to 8",
                                           "updatedAt":  "2025-06-02T21:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uzOKe",
                                           "createdAt":  "2025-06-02T22:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ealsur",
                                           "body":  "@janvorli Given this is running on an Azure pipelines with image `mcr.microsoft.com/onebranch/azurelinux/build:3.0`, if we moved the runtime dependency to NET 9, would that solve the issue then? Or would we need to migrate the project o use NET 9 too?",
                                           "updatedAt":  "2025-06-02T22:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uzX9x",
                                           "createdAt":  "2025-06-02T22:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "I\u0027d say this is a candidate for backport to 8.0\n",
                                           "updatedAt":  "2025-06-02T22:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u0TJx",
                                           "createdAt":  "2025-06-03T00:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVHl-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ealsur",
                                                                               "createdAt":  "2025-06-03T14:21:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "https://github.com/dotnet/runtime/pull/116233\n",
                                           "updatedAt":  "2025-06-03T00:05:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vBUcu",
                                           "createdAt":  "2025-06-03T17:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T17:10:38Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "dotnet test on linux container randomly crashing host",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116375",
        "createdAt":  "2025-06-06T14:07:54Z",
        "number":  116375,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDXvlw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2025-06-06T15:31:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-16T20:39:16Z",
        "body":  "Follow up tracking issue from discussion in https://github.com/dotnet/runtime/pull/116085. It will ultimately get rid of 1 of 6 remaining calls to HP-libunwind.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsm46kw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vzAHe",
                                           "createdAt":  "2025-06-06T14:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "cc @filipnavara, @davidwrighton",
                                           "updatedAt":  "2025-06-06T14:08:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vzAVx",
                                           "createdAt":  "2025-06-06T14:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-06T14:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ybgzg",
                                           "createdAt":  "2025-06-21T12:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@filipnavara (based on the comments) would it be something like this:\n```\n               ---------------------\n              |  Unified Fast IL_Throw |\n               ---------------------\n                         ▲\n             ┌───────────┴────────────┐\n             │                        │\n  Uses for normal         Uses in transitions from\n   managed throws            unmanaged (QCall, etc)\n             │                        │\n     [#1] PUSH_COOP_           [#2] Delay throw until\n       PINVOKE_FRAME              managed reentry\n                                    │\n                         [#3] Thread-local signaling\n                            (à la Objective-C)\n```\n\nor both paths with `PUSH_COOP_PINVOKE_FRAME`?",
                                           "updatedAt":  "2025-06-21T12:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ybjqT",
                                           "createdAt":  "2025-06-21T13:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXdyZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-06-21T13:08:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I\u0027ll need to look into it again. I realized I never got the floating point context quite right. There may not be anything dependent on that in the managed unwinding but I am less sure about the odd cases and C++/CLI.\n\nThe Obj-C path will eventually go through the same path in the end. I\u0027d prefer if it\u0027s implemented through managed throw that then flows to the unified path on the left...",
                                           "updatedAt":  "2025-06-21T13:00:08Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Bring `IL_{Throw,Rethrow,ThrowExact}` to `PUSH_COOP_PINVOKE_FRAME` plan",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116633",
        "createdAt":  "2025-06-13T15:05:25Z",
        "number":  116633,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNTwrw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "pavelsavara",
                                            "createdAt":  "2025-08-29T15:21:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-16T17:00:43Z",
        "body":  "Look at how much of javascript side runtime we want or need to share with coreclr.\n\nWe will need mono_wasm_browser_entropy on browser. There will be more.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsXcfXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xdxyY",
                                           "createdAt":  "2025-06-16T17:00:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-16T17:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xdx9c",
                                           "createdAt":  "2025-06-16T17:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-16T17:00:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] share part of javascript side of mono and coreclr runtimes",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116712",
        "createdAt":  "2025-06-16T19:51:39Z",
        "number":  116712,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-16T20:24:58Z",
        "body":  "We can use \u0027-sGLOBAL_BASE=...\u0027 option to force the stack not start at 0 address in debug builds.\n\nIt currently breaks other things, so it needs more work. I would also like to look at it in more detail to be sure we indeed want to use this option. Mono doesn\u0027t currently use it. \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsYDm_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xf14B",
                                           "createdAt":  "2025-06-16T19:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-16T19:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xgOb-",
                                           "createdAt":  "2025-06-16T20:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Previously the default global base in emscripten wasn\u0027t 0, so if we rely on it being zero we should be explicit about whatever base we currently need, IMO",
                                           "updatedAt":  "2025-06-16T20:24:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] move stack in debug builds to not start at 0 address",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117278",
        "createdAt":  "2025-07-03T16:24:44Z",
        "number":  117278,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-21T21:17:04Z",
        "body":  "Re: https://github.com/dotnet/runtime/pull/117104#discussion_r2182544942\n\nhttps://github.com/dotnet/runtime/pull/117104 introduced `ArgIteratorTemplate\u003cARGITERATOR_BASE\u003e::GetAsyncContinuationArgOffset()` to support continuation arguments in TransitionFrame and ArgIterator. \n\nIt is very likely that we need a managed counterpart to that + testing for the crossgen scenario that prepopulates pointer maps for calls. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtN9hFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60xdG8",
                                           "createdAt":  "2025-07-03T16:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-03T16:25:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60xlSb",
                                           "createdAt":  "2025-07-03T16:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZOFNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-07-04T05:01:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "We should perhaps have a bigger scoped issue for the general managed type system / NAOT / R2R support for runtime async.",
                                           "updatedAt":  "2025-07-03T16:37:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6032EU",
                                           "createdAt":  "2025-07-04T05:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It is very likely that we need a managed counterpart to that\n\nYes: src\\coreclr\\tools\\aot\\ILCompiler.ReadyToRun\\Compiler\\DependencyAnalysis\\ReadyToRun\\ArgIterator.cs",
                                           "updatedAt":  "2025-07-04T05:01:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Validate support for async continuations in pointer maps created in crossgen",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117496",
        "createdAt":  "2025-07-10T09:53:55Z",
        "number":  117496,
        "author":  "luukvnes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T07:18:51Z",
        "body":  "Hi,\n\nMy asp.net server randomly stops working, while the process is still active and no exception is thrown.  All threads \"pause\" and nothing happens anymore. As far as I can tell using dotnet-dump there is no deadlock, the syncblk table shows every line with Monitorheld 0. A strange thing i found is that using dumpexceptions I can see a System.ExecutionEngineException, but this does not contain any information about why or where this happened. I am not really sure where to go next to find the issue. If anyone could help me with finding the problem that would be amazing. I can share the dump privately if that helps.\n\nedit: I forgot to mention this, but it seems constrained to happening on my linux(ubuntu) developer computer. My windows laptop and two linux(ubuntu) servers don\u0027t seem to have the same problem (so far).\n\n\n________________________________________________\n ~~~~ 1431aa\n    1 System.Threading.Monitor.Wait(Object, Int32)\n    1 System.Threading.ManualResetEventSlim.Wait(Int32, CancellationToken)\n    1 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, CancellationToken)\n    1 System.Threading.Tasks.Task.InternalWaitCore(Int32, CancellationToken)\n    1 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task, ConfigureAwaitOptions)\n    1 Program.\u003cMain\u003e(String[])\n\n\n________________________________________________\n ~~~~ 143232\n    1 Interop+Sys.Read(SafeHandle, Byte*, Int32)\n    1 System.IO.FileSystemWatcher+RunningInstance.TryReadEvent(NotifyEvent ByRef)\n    1 System.IO.FileSystemWatcher+RunningInstance.ProcessEvents()\n\n\n________________________________________________\n ~~~~ 1432ce\n    1 System.Threading.ManualResetEventSlim.Wait(Int32, CancellationToken)\n    1 System.Threading.ManualResetEventSlim.Wait(TimeSpan)\n    1 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat.TimerLoop()\n    1 System.Threading.ExecutionContext.RunInternal(ExecutionContext, ContextCallback, Object)\n\n\n________________________________________________\n      ~~~~ 143234\n         1 System.Threading.Monitor.Wait(Object, Int32)\n         1 System.Threading.ManualResetEventSlim.Wait(Int32, CancellationToken)\n         1 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, CancellationToken)\n         1 System.Threading.Tasks.Task.InternalWaitCore(Int32, CancellationToken)\n         1 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task, ConfigureAwaitOptions)\n         1 Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost)\n         1 Program+\u003c\u003cMain\u003e$\u003ed__0.MoveNext()\n         1 System.Threading.ExecutionContext.RunInternal(ExecutionContext, ContextCallback, Object)\n         --------------- **Some startup code, removed here for clarity (running the program without this code does not help)** --------------------\n         1 System.Net.Sockets.SocketAsyncEventArgs.TransferCompletionCallbackCore(Int32, Memory\u003cByte\u003e, SocketFlags, SocketError)\n         1 System.Net.Sockets.SocketAsyncEngine.Execute()\n         1 System.Threading.ThreadPoolWorkQueue.Dispatch()\n      ~~~~ 55b8b\n         1 System.Threading.LowLevelLifoSemaphore.WaitNative(SafeWaitHandle, Int32)\n         1 System.Threading.LowLevelLifoSemaphore.WaitForSignal(Int32)\n         1 System.Threading.LowLevelLifoSemaphore.Wait(Int32, Boolean)\n    2 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\n\n\n________________________________________________\n ~~~~ 143235\n    1 System.Threading.WaitHandle.WaitOneNoCheck(Int32, Boolean, Object, WaitHandleWaitSourceMap)\n    1 System.Threading.PortableThreadPool+GateThread.GateThreadStart()\n\n\n________________________________________________\n ~~~~ 143268\n    1 System.Net.Sockets.SocketAsyncEngine.EventLoop()\n\n\n________________________________________________\n ~~~~ 14326a\n    1 System.Threading.WaitHandle.WaitOneNoCheck(Int32, Boolean, Object, WaitHandleWaitSourceMap)\n    1 System.Threading.TimerQueue.TimerThread()\n\n\n________________________________________________\n ~~~~ 1432b0\n    1 System.Threading.Thread.Sleep(Int32)\n    1 Program+\u003c\u003ec.\u003c\u003cMain\u003e$\u003eb__0_12()\n    \n  dumpexceptions                                                                                                                                                                                                                                                                                       \n       Address      MethodTable Message Name\n  7ad546404a48     7b15639527f0 Microsoft.AspNetCore.Connections.ConnectionAbortedException\n      Message: The Socket transport\u0027s send loop completed gracefully.\n  7ad546496b38     7b15639527f0 Microsoft.AspNetCore.Connections.ConnectionAbortedException\n      Message: The Socket transport\u0027s send loop completed gracefully.\n  7ad5465b37a8     7b15639527f0 Microsoft.AspNetCore.Connections.ConnectionAbortedException\n      Message: The Socket transport\u0027s send loop completed gracefully.\n  7ad57c000088     7b155c1ce440 System.OutOfMemoryException\n      Message: \u003cnull\u003e\n  7ad57c000100     7b155c1ce568 System.StackOverflowException\n      Message: \u003cnull\u003e\n  7ad57c000178     7b155c1ce690 System.ExecutionEngineException\n      Message: \u003cnull\u003e\n  7ad57c36b5d8     7b155e587a08 System.ObjectDisposedException\n      Message: Cannot access a disposed object.\n  7ad546c20d70     7b15639527f0 Microsoft.AspNetCore.Connections.ConnectionAbortedException\n      Message: The Socket transport\u0027s send loop completed gracefully.\n  7ad546d5dfc0     7b15639527f0 Microsoft.AspNetCore.Connections.ConnectionAbortedException\n      Message: The Socket transport\u0027s send loop completed gracefully.\n  7ad57e5d9280     7b155df682e0 System.ArgumentNullException\n      Message: Value cannot be null.\n\n    Total: 10 objects\n    \n  bottom part of dumpheap\n  7b155e4e4ea0  2,545    386,840 System.Reflection.Emit.DynamicILGenerator\n7b1561a850b0  1,546    494,720 System.Collections.Concurrent.ConcurrentDictionary\u003cSystem.String, Microsoft.EntityFrameworkCore.Infrastructure.Annotation\u003e+VolatileNode[]\n7b155e4f4720  5,889    518,232 System.Reflection.RuntimeParameterInfo\n7b155c1c8d38  7,710    731,324 System.Int32[]\n7b155e4f1a40  7,456    775,424 System.Reflection.RuntimeMethodInfo\n7b155c277d30  1,702    939,938 System.Char[]\n7b155c172278  6,388  1,078,648 System.Object[]\n7b155b234910 64,271  1,542,504 System.Object\n7b155c1cbe30 44,794  6,382,110 System.String\n7b155e3a9240 14,496  8,133,504 System.Byte[]\n5633de175bd0  3,884 13,070,488 Free\nTotal 386,593 objects, 48,672,038 bytes\n\nFragmented blocks larger than 0.5 MB:\n         Address           Size      Followed By\n    7ad54be45858        800,048     7ad54bf08d88 System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u003cNpgsql.IBackendMessage\u003e+StateMachineBox\u003cNpgsql.Internal.NpgsqlConnector+\u003cReadMessageLong\u003ed__235\u003e\n    7ad57fdad190        935,600     7ad57fe91840 System.Buffers.SharedArrayPoolPartitions",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuxaxsA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64t950",
                                           "createdAt":  "2025-07-21T21:17:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Are you able to share a dump of this issue? Is it consistently reproing? ",
                                           "updatedAt":  "2025-07-21T21:17:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65Je83",
                                           "createdAt":  "2025-07-23T07:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luukvnes",
                                           "body":  "It is reproing consistently in that it always happens at some point. However after how long it happens is incosistent.\n\nThis is a link to the dump file\n\nhttps://we.tl/t-ytAolSuhUR\n\nIt expires in three days. If you haven\u0027t gotten it by then let me know and i can create a new link.",
                                           "updatedAt":  "2025-07-23T07:30:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65WaWL",
                                           "createdAt":  "2025-07-23T18:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Looking at the dump I am noticing a few threads with this stack, are you certain the JobScheduler has work and isn\u0027t deadlocked for some reason? \n\n```\n00007A0F2E7FB550 00007a5171ec3a60 libcoreclr!JIT_RareDisableHelper + 0x17 [/__w/1/s/src/coreclr/vm/amd64/unixasmhelpers.S:134], calling libcoreclr!JIT_RareDisableHelperWorker [/__w/1/s/src/coreclr/vm/jithelpers.cpp:3608]\n00007A0F2E7FB590 00007a50fb6cbf03 (MethodDesc 00007a50f5883370 + 0x173 Interop+Kernel32.CreateEventEx(IntPtr, System.String, UInt32, UInt32)), calling 00007a5171d662a0 (stub for System.Runtime.InteropServices.Marshal.SetLastPInvokeError(Int32))\n00007A0F2E7FB5A0 00007a5171d1fea6 libcoreclr!WaitHandleNative::CorWaitOneNative + 0x96 [/__w/1/s/src/coreclr/vm/comwaithandle.cpp:24], calling libcoreclr!LazyMachStateCaptureState [/__w/1/s/src/coreclr/vm/amd64/getstate.S:28]\n00007A0F2E7FB5F0 00007a50fb56c960 (MethodDesc 00007a50f7fa64c0 + 0xc0 System.Threading.WaitHandle.WaitOneNoCheck(Int32, Boolean, System.Object, WaitHandleWaitSourceMap)), calling 00007a5171d1fe10 (stub for System.Threading.WaitHandle.WaitOneCore(IntPtr, Int32, Boolean))\n00007A0F2E7FB640 00007a50fbc61b46 (MethodDesc 00007a50fae429c8 + 0x1e6 Hangfire.Common.CancellationTokenExtentions.Wait(System.Threading.CancellationToken, System.TimeSpan)), calling (MethodDesc 00007a50f7fa64c0 + 0 System.Threading.WaitHandle.WaitOneNoCheck(Int32, Boolean, System.Object, WaitHandleWaitSourceMap))\n00007A0F2E7FB6D0 00007a50fc2644cf (MethodDesc 00007a50fad544e0 + 0xcf Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)), calling (MethodDesc 00007a50fae429c8 + 0 Hangfire.Common.CancellationTokenExtentions.Wait(System.Threading.CancellationToken, System.TimeSpan))\n00007A0F2E7FB730 00007a50fcf96e60 (MethodDesc 00007a50fad555c0 + 0x80 Hangfire.Server.BackgroundProcessDispatcherBuilder.ExecuteProcess(System.Guid, System.Object))\n00007A0F2E7FB760 00007a50fa31e31c (MethodDesc 00007a50fad555c0 + 0x44c Hangfire.Server.BackgroundProcessDispatcherBuilder.ExecuteProcess(System.Guid, System.Object)), calling libcoreclr!JIT_Patchpoint [/__w/1/s/src/coreclr/vm/jithelpers.cpp:3833]\n00007A0F2E7FB8C0 00007a50fa3184cf (MethodDesc 00007a50fad5c8d8 + 0x1df Hangfire.Processing.BackgroundExecution.Run(System.Action`2\u003cSystem.Guid,System.Object\u003e, System.Object))\n00007A0F2E7FBA20 00007a50fa317e75 (MethodDesc 00007a50fad5d0d8 + 0x55 Hangfire.Processing.BackgroundDispatcher.DispatchLoop())\n00007A0F2E7FBAA0 00007a50f2c910a6 (MethodDesc 00007a50f60bb940 + 0x96 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object))\n```",
                                           "updatedAt":  "2025-07-23T18:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67FrGw",
                                           "createdAt":  "2025-07-31T07:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luukvnes",
                                           "body":  "I also thought at first that it would be due to hangfire. But even when I remove hangfire completely from my project the issue remains. I created another dump with that situation. It again expires in three days.\n\nhttps://we.tl/t-MuSL03Kuho",
                                           "updatedAt":  "2025-07-31T07:18:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "My server randomly hangs, with dumpexceptions showing System.ExecutionEngineException",
        "labels":  [
                       "area-VM-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117754",
        "createdAt":  "2025-07-17T11:21:24Z",
        "number":  117754,
        "author":  "cincuranet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T21:30:04Z",
        "body":  "EF Core was running on Mac with W^X disabled (`COMPlus_EnableWriteXorExecute=0`) because of #70758. Removing the `COMPlus_EnableWriteXorExecute` now makes the test run extremely long - usually tests on Helix (where this was applied) run in under 60 minutes. With `COMPlus_EnableWriteXorExecute=0` removed these did not finish within the timeout of 3 hours ([detail](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1094965\u0026view=logs\u0026jobId=f95328f7-07f5-5106-5c2a-5dc7069f305c\u0026j=f95328f7-07f5-5106-5c2a-5dc7069f305c\u0026t=e2f3026d-346a-509b-3549-57236476a9cb)).\n\nThe PR that removes the W^X workaround: https://github.com/dotnet/efcore/pull/36243.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt-EypA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc63z6hm",
                                           "createdAt":  "2025-07-17T12:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I\u0027m assuming it\u0027s arm64 mac?\n\ncc @janvorli ",
                                           "updatedAt":  "2025-07-17T12:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63z68R",
                                           "createdAt":  "2025-07-17T12:14:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T12:14:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc630GY8",
                                           "createdAt":  "2025-07-17T12:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "It\u0027s AMD64 (on `OSX.13.Amd64.Open` Helix queue).",
                                           "updatedAt":  "2025-07-17T12:30:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6339o-",
                                           "createdAt":  "2025-07-17T17:38:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cincuranet, is this a blocking issue for 10? Assume you dont see the same issue on arm64? ",
                                           "updatedAt":  "2025-07-17T17:38:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc634TKk",
                                           "createdAt":  "2025-07-17T18:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "@mangod9 It is not a blocking issue for 10. I don\u0027t know about ARM64, I\u0027d have to manually queue a build into internal Helix queue. Do you want me to do it?",
                                           "updatedAt":  "2025-07-17T18:12:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "W^X on Mac for EF Core tests is very slow",
        "labels":  [
                       "tenet-performance",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117815",
        "createdAt":  "2025-07-18T15:02:24Z",
        "number":  117815,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T16:37:12Z",
        "body":  "Context: https://github.com/dotnet/runtime/pull/116383#discussion_r2197923011\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuC4Z0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64KmZq",
                                           "createdAt":  "2025-07-18T15:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T15:02:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64LhnT",
                                           "createdAt":  "2025-07-18T16:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T16:37:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] Rename GetLoadedLayout",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117984",
        "createdAt":  "2025-07-23T15:49:02Z",
        "number":  117984,
        "author":  "andrii-litvinov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T12:15:52Z",
        "body":  "### Description\n\nWe\u0027ve encountered a very weird unmanaged memory leak in our services that run in linux-arm64 containers in Kubernetes.\n\nWith old deprecated [package](https://www.nuget.org/packages/Serilog.Enrichers.Demystify/1.0.0-dev-00019) an unmanaged memory starts to grow quickly and leads to a pod getting OOMKilled.\n\nNewer [package](https://www.nuget.org/packages/Serilog.Enrichers.Demystifier/1.0.3) works as expected with no memory leaks and stable memory consumption.\n\nWhat\u0027s even more weird is that a newer package is a maintained fork of an older one, but the core integration of Demystifier with Serilog is very simple and hasn\u0027t changed.\n\n### Reproduction Steps\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n    \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003c/PropertyGroup\u003e\n\n    \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Serilog\" Version=\"4.3.0\" /\u003e\n\u003c!--        \u003cPackageReference Include=\"Serilog.Enrichers.Demystifier\" Version=\"1.0.3\" /\u003e--\u003e\n        \u003cPackageReference Include=\"Serilog.Enrichers.Demystify\" Version=\"1.0.0-dev-00019\" /\u003e\n    \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n````\n\n```csharp\nusing Serilog;\n\nvar logger = new LoggerConfiguration()\n    .Enrich.WithDemystifiedStackTraces()\n    .CreateLogger();\n\nwhile (true)\n{\n    logger.Information(\"Entering demystifier enricher\");\n}\n```\n```sh\n❯ dotnet publish -c Release /t:PublishContainer -r linux-arm64 -p ContainerArchiveOutputPath=./images/oom-repro.tar.gz\n\n❯ docker load -i images/oom-repro.tar.gz\n```\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: oom-repro\nspec:\n  selector:\n    matchLabels:\n      app: oom-repro\n  template:\n    metadata:\n      labels:\n        app: oom-repro\n    spec:\n      containers:\n      - image: oomrepro\n        imagePullPolicy: IfNotPresent\n        name: oom-repro\n        resources:\n          limits:\n            memory: 200Mi\n          requests:\n            memory: 200Mi\n```\n```sh\nkubect apply -f oom-repro.yaml\n```\n\n### Expected behavior\n\nMemory consumption is stable and pod does not get OOMKilled.\n\n### Actual behavior\n\nUnmanaged memory grows and pod gets OOMKilled.\n\n### Regression?\n\nIt is a regression, the same service with same setup worked fine in .NET 8.\n\n### Known Workarounds\n\nUpdate to a maintained package\n```xml\n\u003cPackageReference Include=\"Serilog.Enrichers.Demystifier\" Version=\"1.0.3\" /\u003e\n```\n\n### Configuration\n\n.NET 9 service hosted in Linux Kubernetes cluster (both on local Mac with Docker and in cloud) with ARM64 node. I couldn\u0027t reproduce it on bare-metal local Mac with M1 chip, so must be specific to Linux, potentially specific to linux-arm64.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuZ7Viw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65VE2T",
                                           "createdAt":  "2025-07-23T16:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Serilog.Enrichers.Demystifier package depends on Ben.Demystifier package.\n\nOld Serilog.Enrichers.Demystifier depends on Ben.Demystifier 0.1.4.\nNewer Serilog.Enrichers.Demystifier depends on Ben.Demystifier 0.4.1.\n\nYou are picking up a lot of changes in Ben.Demystifier when you upgrade Serilog.Enrichers.Demystifier. It is likely that there was a fix in Ben.Demystifier or one of its dependencies that addressed the memory leak.\n\nIf you would like to trace down the exact change that fixed the memory leak, Serilog.Enrichers.Demystifier or Ben.Demystifier are the best place to do that.",
                                           "updatedAt":  "2025-07-23T16:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65VYmg",
                                           "createdAt":  "2025-07-23T16:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrii-litvinov",
                                           "body":  "Oh, sorry @jkotas , I never mentioned that, but it will leak even with latest Ben.Demystifier package. We had it of version 0.4.1. You can confirm when it\u0027s added to the project. That Demystifier itself is not even executed, because the repro doesn\u0027t throw any errors to demystify.\n\n```xml\n\u003cPackageReference Include=\"Ben.Demystifier\" Version=\"0.4.1\" /\u003e\n```",
                                           "updatedAt":  "2025-07-23T16:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65V3iQ",
                                           "createdAt":  "2025-07-23T17:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Have you done anything to investigate the memory leak further?\n\nThe most likely cause of \"memory leak\" for a code like `while (true) { logger.Information(\"Entering demystifier enricher\"); }` is a problem with logging. If the logging is not able to keep up, you may end up with ever growing queue of messages that are waiting to be logged. The difference between good and bad cases can be very subtle, e.g. the size of your terminal window can make a difference.",
                                           "updatedAt":  "2025-07-23T17:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65WDq6",
                                           "createdAt":  "2025-07-23T17:51:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrii-litvinov",
                                           "body":  "Thanks Jan for reopening it! It took me about 1.5 weeks to pinpoint the issue to this package. In our production code we don\u0027t anything like such logging in a loop. It was the smallest repro that I managed to come up with to report the issue. The symptom was that after .NET 9 upgrade services started to get OOMKilled and Vertical Pod Autoscaler started to provision more resources to them, which led to over-provisioned cluster and increased cost.\n\nEven simple `/health` check requests where we log basic info about request would lead to OOMKilled event. The snapshot shows that there\u0027s a little bit of managed memory allocated and an unproportional amount of unmanaged memory.\n\n\u003cimg width=\"3418\" height=\"1764\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/af4d8b41-7161-4b5e-911d-eb338502d6b9\" /\u003e\n\nI don\u0027t have enough skills to further investigate that unmanaged memory unfortunately. We have solved it for our system, but I thought I would report it anyway, because other users might encounter this or similar issue, so they would know where to look for solution even if it\u0027s decided not to resolve. Also it may have bigger impact if the issue promotes to .NET 10 which is LTS and more users get affected, those who decided to skip .NET 9 Current.\n\nI suspect that it\u0027s related to the fact that the old package is produced years ago with old SDK and there\u0027s some regression on how that old IL is processed in new runtime, but I cannot prove it, it\u0027s just my best guess.",
                                           "updatedAt":  "2025-07-23T17:51:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65nalJ",
                                           "createdAt":  "2025-07-24T16:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "thank you @andrii-litvinov for starting this conversation and pinpointing the issue in the external package.  I am going to close this issue, but it will remain searchable for others to find.",
                                           "updatedAt":  "2025-07-24T16:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65ndDa",
                                           "createdAt":  "2025-07-24T16:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrii-litvinov",
                                           "body":  "@jeffschwMSFT the issue is not in the external package. The very same setup works just fine with no memory leaks in .NET 8. It\u0027s clearly a regression. Also it\u0027s fine with me if you don\u0027t find it of enough importance to investigate.",
                                           "updatedAt":  "2025-07-24T16:38:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65ntWL",
                                           "createdAt":  "2025-07-24T16:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-24T16:59:06Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Unmanaged memory leak in linux-arm64 container after migration from .NET 8 to .NET 9 caused by old NuGet package",
        "labels":  [
                       "tracking-external-issue",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118074",
        "createdAt":  "2025-07-25T22:24:45Z",
        "number":  118074,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:16:08Z",
        "body":  "\nThis basically implies support for dynamic async methods, as in:\n- a dynamic method decorated with `MethodImpl.Async` is JITed into a state machine.\n- the method has CORINFO_CALLCONV_ASYNCCALL call convention\n- there is a Task-returning variant/thunk that non-async callers can use.\n- async callers recognize the method as async-capable and optimize Await patterns into direct calls to the CORINFO_CALLCONV_ASYNCCALL variant.\n- the above includes Await patterns inside the async variant as well. \n\nThe end result is that dynamic async methods have the same capability to await and be awaited efficiently as the regular/nondynamic async methods.\n\nThe IL of such dynamic async methods would have to conform to the same rules and restrictions as the IL emitted by static IL generators (i.e. Roslyn compiler). \nIt would be up to the IL emitter to ensure conforming IL. This is a fairly advanced scenario.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuirFHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65_-pG",
                                           "createdAt":  "2025-07-25T22:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-25T22:25:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66KsUd",
                                           "createdAt":  "2025-07-26T20:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "MethodImplAttributes on dynamic methods are hardcoded to `MethodImplAttributes.IL | MethodImplAttributes.NoInlining` currently: https://github.com/dotnet/runtime/blob/a8c169a07cf5d44b537e1ae518df5032a174d3f4/src/libraries/System.Private.CoreLib/src/System/Reflection/Emit/DynamicMethod.cs#L337-L338\n\nIt effectively blocks this scenario. We would have to introduce a new API on dynamic methods that allows customizing `MethodImplAttributes` to enable support for runtime async.",
                                           "updatedAt":  "2025-07-26T21:18:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[RuntimeAsync] Support `MethodImpl.Async` on dynamic methods.",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118401",
        "createdAt":  "2025-08-05T17:02:59Z",
        "number":  118401,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T17:03:24Z",
        "body":  "We should either remove them or make them match reality.\n\nhttps://github.com/dotnet/runtime/blob/824fdb181152f74ec5e189921f7105df83bd25d5/src/coreclr/vm/threads.cpp#L6117-L6130",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvBuiBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68G6IF",
                                           "createdAt":  "2025-08-05T17:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-05T17:03:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Comment on stack needs of the runtime in `Thread::CLRSetThreadStackGuarantee` are stale",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118844",
        "createdAt":  "2025-08-18T15:52:01Z",
        "number":  118844,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:14:59Z",
        "body":  "See https://github.com/dotnet/runtime/pull/118827\n\nThe above changes should be reverted. Right now they bypass an all build assert due to issues with IJW.\n\nA test should be added for variables with static storage to ensure C++/CLI doesn\u0027t generate code that will run during `DllMain`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpXGcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-lcZz",
                                           "createdAt":  "2025-08-18T15:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T15:52:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add test and revert mitigation for IJW bad code gen",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119005",
        "createdAt":  "2025-08-22T14:39:03Z",
        "number":  119005,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:05Z",
        "body":  "Just posting this for tracking. In https://github.com/dotnet/runtime/pull/114982#discussion_r2083272768 we discussed an issue with Apple linker that needed a workaround by placing `.cfi_startproc`/`.cfi_endproc` around `.alt_entry` labels. The bug has been fixed in Xcode 26 (as of Beta 6, but possibly earlier) and I verified that it\u0027s now working as expected.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv5uiAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_m6IB",
                                           "createdAt":  "2025-08-22T14:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-22T14:48:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Remove CFI workarounds after bumping mimimum Xcode version to 26",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119163",
        "createdAt":  "2025-08-28T02:18:34Z",
        "number":  119163,
        "author":  "driver1998",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:06Z",
        "body":  "Currently .NET on LoongArch relies on TLS descriptors, which is supported in upstream glibc ~2.40, related code is at https://github.com/dotnet/runtime/blob/d643f6451a58f726980d4fc73902ee950764d921/src/coreclr/vm/loongarch64/asmhelpers.S#L1003-L1032.\n\nThere are quite a few new world distros with glibc 2.38, like deepin 25, openKylin 2.0 and the just released Kylin OS V11 (commercial).\n\nHow to build a working .NET runtime targeting those distros? IIRC some have TLS descriptors support backported, can we assume all of those do (or will do in the future)?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwKOkNQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AmdcO",
                                           "createdAt":  "2025-08-28T02:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "driver1998",
                                           "body":  "cc @shushanhf @LuckyXu-HF @xen0n ",
                                           "updatedAt":  "2025-08-28T02:20:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ao6Q1",
                                           "createdAt":  "2025-08-28T05:29:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T05:29:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "LoongArch: Support for glibc \u003c 2.40 (TLS descriptors)",
        "labels":  [
                       "area-VM-coreclr",
                       "arch-loongarch64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119174",
        "createdAt":  "2025-08-28T14:48:41Z",
        "number":  119174,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T11:21:13Z",
        "body":  "### Description\n\nApp fails with unexpected exception:\n\n\u003e System.ExecutionEngineException: Illegal instruction: Attempted to execute an instruction code not defined by the processor.\n\n\n### Reproduction Steps\n\nDownload: https://microsofteur-my.sharepoint.com/:u:/g/personal/rokvin_microsoft_com/EVtFFQAfB7lDgiyfJc8z1_8BFC7vY4Vd6LftZalSUWMb8g?e=48ohxL\n\nRun: `./introspection.app/Contents/MacOS/introspection`\n\nTo build from source:\n\n```shell\ngit clone https://github.com/dotnet/macios\ncd macios\ngit checkout darc-net10.0-af994d64-8b2e-4de8-9f93-2f77e6447306\n./configure --disable-all-platforms --enable-macos\nmake reset\nmake all -j8\nmake install -j8\nmake build run-bare RID=osx-x64 -C tests/introspection/dotnet/macOS\n```\n\n### Expected behavior\n\nSuccessful execution.\n\n### Actual behavior\n\nApp terminates with:\n\n\u003csummary\u003e\n\n```\nFatal error.\nSystem.ExecutionEngineException: Illegal instruction: Attempted to execute an instruction code not defined by the processor.\nRepeated 135 times:\n--------------------------------\n   at System.Runtime.EH.GetClasslibException(System.Runtime.ExceptionIDs, IntPtr)\n   at System.Runtime.EH.RhThrowHwEx(UInt32, ExInfo ByRef)\n--------------------------------\n```\n\n\u003cdetails\u003e\n\n```\nFatal error.\nSystem.ExecutionEngineException: Illegal instruction: Attempted to execute an instruction code not defined by the processor.\nRepeated 135 times:\n--------------------------------\n   at System.Runtime.EH.GetClasslibException(System.Runtime.ExceptionIDs, IntPtr)\n   at System.Runtime.EH.RhThrowHwEx(UInt32, ExInfo ByRef)\n--------------------------------\n   at System.ModuleHandle.ResolveMethodHandle(Int32, System.RuntimeTypeHandle[], System.RuntimeTypeHandle[])\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u003cSystem.Object\u003e ByRef, System.Reflection.RuntimeModule, Int32, System.RuntimeType, Boolean, ListBuilder`1\u003cSystem.Object\u003e)\n   at System.RuntimeType.GetCustomAttributes(Boolean)\n   at Xamarin.Tests.AvailabilityExtensions.IsAvailable(System.Reflection.ICustomAttributeProvider, Xamarin.Tests.PlatformInfo)\n   at Xamarin.Tests.AvailabilityExtensions.IsAvailableOnHostPlatform(System.Reflection.ICustomAttributeProvider)\n   at Introspection.ApiBaseTest.SkipDueToAttribute(System.Reflection.MemberInfo)\n   at Introspection.ApiBaseTest.SkipDueToAttribute(System.Reflection.MemberInfo)\n   at Introspection.ApiBaseTest.SkipDueToAttribute(System.Reflection.MemberInfo)\n   at Introspection.ApiFieldTest.Skip(System.Reflection.PropertyInfo)\n   at Introspection.MacApiFieldTest.Skip(System.Reflection.PropertyInfo)\n   at Introspection.ApiFieldTest.AllProperties()\n   at Introspection.ApiFieldTest.FieldExists()\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*)\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n   at NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo, System.Object, System.Object[])\n   at NUnit.Framework.Internal.MethodWrapper.Invoke(System.Object, System.Object[])\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.InvokeTestMethod(NUnit.Framework.Internal.TestExecutionContext)\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.RunTestMethod(NUnit.Framework.Internal.TestExecutionContext)\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)\n   at NUnit.Framework.Internal.Execution.SimpleWorkItem.PerformWork()\n   at NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread()\n   at NUnit.Framework.Internal.Execution.WorkItem.Execute()\n   at NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren()\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork()\n   at NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread()\n   at NUnit.Framework.Internal.Execution.WorkItem.Execute()\n   at NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren()\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork()\n   at NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread()\n   at NUnit.Framework.Internal.Execution.WorkItem.Execute()\n   at NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren()\n   at NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork()\n   at NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread()\n   at NUnit.Framework.Internal.Execution.WorkItem.Execute()\n   at NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)\n   at NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem)\n   at NUnit.Framework.Api.NUnitTestAssemblyRunner.StartRun(NUnit.Framework.Interfaces.ITestListener)\n   at NUnit.Framework.Api.NUnitTestAssemblyRunner+\u003c\u003ec__DisplayClass38_0.\u003cRunAsync\u003eb__0()\n   at NUnit.Framework.Api.NUnitTestAssemblyRunner.WrapInNUnitCallContext(System.Action)\n   at NUnit.Framework.Api.NUnitTestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener, NUnit.Framework.Interfaces.ITestFilter)\n   at NUnit.Framework.Api.NUnitTestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener, NUnit.Framework.Interfaces.ITestFilter)\n   at MonoTouch.NUnit.UI.BaseTouchRunner.Run(NUnit.Framework.Internal.Test)\n   at MonoTouch.NUnit.UI.BaseTouchRunner.Run()\n   at MonoTouch.NUnit.UI.BaseTouchRunner.RunAsync()\n   at MonoTouch.NUnit.UI.MacRunner+\u003cRunTestsAsync\u003ed__1.MoveNext()\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at MonoTouch.NUnit.UI.MacRunner.RunTestsAsync(MonoTouch.NUnit.UI.TouchOptions, System.Reflection.Assembly[])\n   at MonoTouch.NUnit.UI.MacRunner+\u003c\u003ec__DisplayClass0_1+\u003c\u003cMainAsync\u003eb__0\u003ed.MoveNext()\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at MonoTouch.NUnit.UI.MacRunner+\u003c\u003ec__DisplayClass0_1.\u003cMainAsync\u003eb__0()\n   at Foundation.NSActionDispatcher.Apply()\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags)\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n   at ObjCRuntime.Runtime.InvokeMethod(System.Reflection.MethodBase, System.Object, IntPtr)\n   at ObjCRuntime.Runtime.bridge_runtime_invoke_method(MonoObject*, MonoObject*, IntPtr, IntPtr*)\n   at ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool(IntPtr, IntPtr, ObjCRuntime.NativeHandle, ObjCRuntime.NativeHandle, Byte)\n   at ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool(IntPtr, IntPtr, ObjCRuntime.NativeHandle, ObjCRuntime.NativeHandle, Byte)\n   at Foundation.NSObject.InvokeOnMainThread(System.Action)\n   at MonoTouch.NUnit.UI.MacRunner+\u003cMainAsync\u003ed__0.MoveNext()\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at MonoTouch.NUnit.UI.MacRunner.MainAsync(System.Collections.Generic.IList`1\u003cSystem.String\u003e, Boolean, System.Action`1\u003cInt32\u003e, System.Reflection.Assembly[])\n   at Xamarin.Mac.Tests.MainClass+\u003cMain\u003ed__0.MoveNext()\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)\n   at Xamarin.Mac.Tests.MainClass.Main(System.String[])\n   at Xamarin.Mac.Tests.MainClass.\u003cMain\u003e(System.String[])\n```\n\n\u003c/details\u003e\n\u003c/summary\u003e\n\n\n### Regression?\n\nYes, this started happening in this maestro bump: https://github.com/dotnet/macios/pull/23694.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 10.0.100-rc.1.25426.115 (note that this is actual RC 2 due to  https://github.com/dotnet/dotnet/pull/1918)\n\nThis is on macOS, using the `macos` workload to create a macOS app.\n\n### Other information\n\nThis only happens with x64 (either on x64 hardware, or using Rosetta on arm64), using CoreCLR.\n\nIt doesn\u0027t happen with Mono (on Mac Catalyst).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxNicgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AwGgg",
                                           "createdAt":  "2025-08-28T14:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T14:55:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwNAK",
                                           "createdAt":  "2025-08-28T15:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "/cc @jkotas @tannergooding ",
                                           "updatedAt":  "2025-08-28T15:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwPDu",
                                           "createdAt":  "2025-08-28T15:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Is there a dump showing the code bytes it tried to execute?\n\nThere were no changes, that I\u0027m aware of, to the .NET 10 ISAs or JIT/AOT codegen.",
                                           "updatedAt":  "2025-08-28T15:03:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwRqH",
                                           "createdAt":  "2025-08-28T15:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e Is there a dump showing the code bytes it tried to execute?\n\nHow can I get that?\n",
                                           "updatedAt":  "2025-08-28T15:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwVBJ",
                                           "createdAt":  "2025-08-28T15:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Hmm why is this printing a message from NativeAOT if this should be using coreclr?\nhttps://github.com/dotnet/runtime/blob/9397efd7c005d0f6f322293362ee0c2229cd6dc8/src/coreclr/nativeaot/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs#L103",
                                           "updatedAt":  "2025-08-28T15:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Awbwn",
                                           "createdAt":  "2025-08-28T15:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The diff the maestro PR is pulling in is: https://github.com/dotnet/dotnet/compare/619d563351...39ec54dcf6\n\nI don\u0027t see any runtime changes that would cause a codegen change here.\n\n\u003e How can I get that?\n\nI would expect that you get something like `Illegal instruction (core dumped)` and that typically lists the corresponding bytes that are around the trigger point. -- I\u0027m not overly familiar with the necessary commands to get it otherwise on MacOS, my experience is the run logs typically provide the info or dumps and that is sufficient.\n\n\u003e Hmm why is this printing a message from NativeAOT if this should be using coreclr?\n\nNot all the files in the naot folder are actually NAOT specific. See\n* https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/System.Private.CoreLib.csproj#L214\n* https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/ExceptionHandling.cs#L330",
                                           "updatedAt":  "2025-08-28T15:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwdjC",
                                           "createdAt":  "2025-08-28T15:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e Not all the files in the naot folder are actually NAOT specific.\n\nI know but from what I can see src/coreclr/nativeaot/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs is only included in the NAOT corelib.",
                                           "updatedAt":  "2025-08-28T15:16:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AweL6",
                                           "createdAt":  "2025-08-28T15:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes, but `ExceptionHandling.cs` is in the corelcr S.P.Corelib and raises the same message (see the links provided)",
                                           "updatedAt":  "2025-08-28T15:17:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwgBW",
                                           "createdAt":  "2025-08-28T15:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Ahh I see, sorry 😄 ",
                                           "updatedAt":  "2025-08-28T15:19:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AwzSh",
                                           "createdAt":  "2025-08-28T15:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Here\u0027s a backtrace:\n\n```\nProcess 82584 stopped\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGABRT\n    frame #0: 0x00007ff818666d96 libsystem_kernel.dylib`__pthread_kill + 10\nlibsystem_kernel.dylib`:\n-\u003e  0x7ff818666d96 \u003c+10\u003e: jae    0x7ff818666da0            ; \u003c+20\u003e\n    0x7ff818666d98 \u003c+12\u003e: movq   %rax, %rdi\n    0x7ff818666d9b \u003c+15\u003e: jmp    0x7ff8186607c0            ; cerror_nocancel\n    0x7ff818666da0 \u003c+20\u003e: retq\nTarget 0: (introspection) stopped.\n(lldb) bt\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGABRT\n  * frame #0: 0x00007ff818666d96 libsystem_kernel.dylib`__pthread_kill + 10\n    frame #1: 0x00007ff81869febd libsystem_pthread.dylib`pthread_kill + 262\n    frame #2: 0x00007ff8185c5a79 libsystem_c.dylib`abort + 126\n    frame #3: 0x0000000101f5a6bb libcoreclr.dylib`PROCAbort(signal=6, siginfo=0x0000000000000000) at process.cpp:2810:5 [opt]\n    frame #4: 0x0000000101f5a5d9 libcoreclr.dylib`::TerminateProcess(HANDLE, UINT) [inlined] PROCEndProcess(hProcess=\u003cunavailable\u003e, uExitCode=3221225501, bTerminateUnconditionally=YES) at process.cpp:1326:13 [opt]\n    frame #5: 0x0000000101f5a5bc libcoreclr.dylib`TerminateProcess(hProcess=\u003cunavailable\u003e, uExitCode=3221225501) at process.cpp:1223:11 [opt]\n    frame #6: 0x0000000101dcb5ef libcoreclr.dylib`EEPolicy::HandleFatalError(exitCode=3221225501, address=0, pszMessage=u\"System.ExecutionEngineException: Illegal instruction: Attempted to execute an instruction code not defined by the processor.\", pExceptionInfo=0x00007ff7bfc21eb0, errorSource=Summary Unavailable, argExceptionString=Summary Unavailable) at eepolicy.cpp:861:9 [opt]\n    frame #7: 0x0000000101e6e583 libcoreclr.dylib`FailFastIfCorruptingStateException(pExInfo=0x00007ff7bfc21ea0) at exceptionhandling.cpp:3613:9 [opt]\n    frame #8: 0x0000000101e6ecfd libcoreclr.dylib`SfiInit(pThis=0x00007ff7bfc21f60, pStackwalkCtx=0x00007ff7bfc22130, instructionFault=\u003cunavailable\u003e, pfIsExceptionIntercepted=0x00007ff7bfc21d18) at exceptionhandling.cpp:3778:9 [opt]\n    frame #9: 0x0000000102e1a60a\n    frame #10: 0x0000000102e1a135\n    frame #11: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #12: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #13: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #14: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc256c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #15: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc256c0) at seh.cpp:266:21 [opt]\n    frame #16: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc277d0, pExRecord=0x00007ff7bfc27738) at machexception.cpp:387:29 [opt]\n    frame #17: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc277d0, pExRecord=0x00007ff7bfc27738, pMachExceptionInfo=0x00007ff7bfc26c90) at machexception.cpp:430:5 [opt]\n    frame #18: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #19: 0x0000000102b600b2\n    frame #20: 0x0000000102e1a113\n    frame #21: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #22: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #23: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #24: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc2be00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #25: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc2be00) at seh.cpp:266:21 [opt]\n    frame #26: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc2df10, pExRecord=0x00007ff7bfc2de78) at machexception.cpp:387:29 [opt]\n    frame #27: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc2df10, pExRecord=0x00007ff7bfc2de78, pMachExceptionInfo=0x00007ff7bfc2d3d0) at machexception.cpp:430:5 [opt]\n    frame #28: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #29: 0x0000000102b600b2\n    frame #30: 0x0000000102e1a113\n    frame #31: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #32: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #33: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #34: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc32540) at exceptionhandling.cpp:1513:9 [opt]\n    frame #35: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc32540) at seh.cpp:266:21 [opt]\n    frame #36: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc34650, pExRecord=0x00007ff7bfc345b8) at machexception.cpp:387:29 [opt]\n    frame #37: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc34650, pExRecord=0x00007ff7bfc345b8, pMachExceptionInfo=0x00007ff7bfc33b10) at machexception.cpp:430:5 [opt]\n    frame #38: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #39: 0x0000000102b600b2\n    frame #40: 0x0000000102e1a113\n    frame #41: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #42: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #43: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #44: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc38c80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #45: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc38c80) at seh.cpp:266:21 [opt]\n    frame #46: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc3ad90, pExRecord=0x00007ff7bfc3acf8) at machexception.cpp:387:29 [opt]\n    frame #47: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc3ad90, pExRecord=0x00007ff7bfc3acf8, pMachExceptionInfo=0x00007ff7bfc3a250) at machexception.cpp:430:5 [opt]\n    frame #48: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #49: 0x0000000102b600b2\n    frame #50: 0x0000000102e1a113\n    frame #51: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #52: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #53: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #54: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc3f3c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #55: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc3f3c0) at seh.cpp:266:21 [opt]\n    frame #56: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc414d0, pExRecord=0x00007ff7bfc41438) at machexception.cpp:387:29 [opt]\n    frame #57: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc414d0, pExRecord=0x00007ff7bfc41438, pMachExceptionInfo=0x00007ff7bfc40990) at machexception.cpp:430:5 [opt]\n    frame #58: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #59: 0x0000000102b600b2\n    frame #60: 0x0000000102e1a113\n    frame #61: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #62: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #63: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #64: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc45b00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #65: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc45b00) at seh.cpp:266:21 [opt]\n    frame #66: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc47c10, pExRecord=0x00007ff7bfc47b78) at machexception.cpp:387:29 [opt]\n    frame #67: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc47c10, pExRecord=0x00007ff7bfc47b78, pMachExceptionInfo=0x00007ff7bfc470d0) at machexception.cpp:430:5 [opt]\n    frame #68: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #69: 0x0000000102b600b2\n    frame #70: 0x0000000102e1a113\n    frame #71: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #72: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #73: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #74: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc4c240) at exceptionhandling.cpp:1513:9 [opt]\n    frame #75: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc4c240) at seh.cpp:266:21 [opt]\n    frame #76: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc4e350, pExRecord=0x00007ff7bfc4e2b8) at machexception.cpp:387:29 [opt]\n    frame #77: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc4e350, pExRecord=0x00007ff7bfc4e2b8, pMachExceptionInfo=0x00007ff7bfc4d810) at machexception.cpp:430:5 [opt]\n    frame #78: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #79: 0x0000000102b600b2\n    frame #80: 0x0000000102e1a113\n    frame #81: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #82: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #83: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #84: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc52980) at exceptionhandling.cpp:1513:9 [opt]\n    frame #85: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc52980) at seh.cpp:266:21 [opt]\n    frame #86: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc54a90, pExRecord=0x00007ff7bfc549f8) at machexception.cpp:387:29 [opt]\n    frame #87: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc54a90, pExRecord=0x00007ff7bfc549f8, pMachExceptionInfo=0x00007ff7bfc53f50) at machexception.cpp:430:5 [opt]\n    frame #88: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #89: 0x0000000102b600b2\n    frame #90: 0x0000000102e1a113\n    frame #91: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #92: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #93: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #94: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc590c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #95: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc590c0) at seh.cpp:266:21 [opt]\n    frame #96: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc5b1d0, pExRecord=0x00007ff7bfc5b138) at machexception.cpp:387:29 [opt]\n    frame #97: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc5b1d0, pExRecord=0x00007ff7bfc5b138, pMachExceptionInfo=0x00007ff7bfc5a690) at machexception.cpp:430:5 [opt]\n    frame #98: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #99: 0x0000000102b600b2\n    frame #100: 0x0000000102e1a113\n    frame #101: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #102: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #103: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #104: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc5f800) at exceptionhandling.cpp:1513:9 [opt]\n    frame #105: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc5f800) at seh.cpp:266:21 [opt]\n    frame #106: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc61910, pExRecord=0x00007ff7bfc61878) at machexception.cpp:387:29 [opt]\n    frame #107: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc61910, pExRecord=0x00007ff7bfc61878, pMachExceptionInfo=0x00007ff7bfc60dd0) at machexception.cpp:430:5 [opt]\n    frame #108: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #109: 0x0000000102b600b2\n    frame #110: 0x0000000102e1a113\n    frame #111: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #112: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #113: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #114: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc65f40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #115: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc65f40) at seh.cpp:266:21 [opt]\n    frame #116: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc68050, pExRecord=0x00007ff7bfc67fb8) at machexception.cpp:387:29 [opt]\n    frame #117: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc68050, pExRecord=0x00007ff7bfc67fb8, pMachExceptionInfo=0x00007ff7bfc67510) at machexception.cpp:430:5 [opt]\n    frame #118: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #119: 0x0000000102b600b2\n    frame #120: 0x0000000102e1a113\n    frame #121: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #122: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #123: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #124: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc6c680) at exceptionhandling.cpp:1513:9 [opt]\n    frame #125: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc6c680) at seh.cpp:266:21 [opt]\n    frame #126: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc6e790, pExRecord=0x00007ff7bfc6e6f8) at machexception.cpp:387:29 [opt]\n    frame #127: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc6e790, pExRecord=0x00007ff7bfc6e6f8, pMachExceptionInfo=0x00007ff7bfc6dc50) at machexception.cpp:430:5 [opt]\n    frame #128: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #129: 0x0000000102b600b2\n    frame #130: 0x0000000102e1a113\n    frame #131: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #132: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #133: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #134: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc72dc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #135: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc72dc0) at seh.cpp:266:21 [opt]\n    frame #136: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc74ed0, pExRecord=0x00007ff7bfc74e38) at machexception.cpp:387:29 [opt]\n    frame #137: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc74ed0, pExRecord=0x00007ff7bfc74e38, pMachExceptionInfo=0x00007ff7bfc74390) at machexception.cpp:430:5 [opt]\n    frame #138: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #139: 0x0000000102b600b2\n    frame #140: 0x0000000102e1a113\n    frame #141: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #142: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #143: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #144: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc79500) at exceptionhandling.cpp:1513:9 [opt]\n    frame #145: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc79500) at seh.cpp:266:21 [opt]\n    frame #146: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc7b610, pExRecord=0x00007ff7bfc7b578) at machexception.cpp:387:29 [opt]\n    frame #147: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc7b610, pExRecord=0x00007ff7bfc7b578, pMachExceptionInfo=0x00007ff7bfc7aad0) at machexception.cpp:430:5 [opt]\n    frame #148: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #149: 0x0000000102b600b2\n    frame #150: 0x0000000102e1a113\n    frame #151: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #152: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #153: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #154: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc7fc40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #155: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc7fc40) at seh.cpp:266:21 [opt]\n    frame #156: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc81d50, pExRecord=0x00007ff7bfc81cb8) at machexception.cpp:387:29 [opt]\n    frame #157: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc81d50, pExRecord=0x00007ff7bfc81cb8, pMachExceptionInfo=0x00007ff7bfc81210) at machexception.cpp:430:5 [opt]\n    frame #158: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #159: 0x0000000102b600b2\n    frame #160: 0x0000000102e1a113\n    frame #161: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #162: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #163: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #164: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc86380) at exceptionhandling.cpp:1513:9 [opt]\n    frame #165: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc86380) at seh.cpp:266:21 [opt]\n    frame #166: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc88490, pExRecord=0x00007ff7bfc883f8) at machexception.cpp:387:29 [opt]\n    frame #167: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc88490, pExRecord=0x00007ff7bfc883f8, pMachExceptionInfo=0x00007ff7bfc87950) at machexception.cpp:430:5 [opt]\n    frame #168: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #169: 0x0000000102b600b2\n    frame #170: 0x0000000102e1a113\n    frame #171: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #172: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #173: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #174: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc8cac0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #175: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc8cac0) at seh.cpp:266:21 [opt]\n    frame #176: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc8ebd0, pExRecord=0x00007ff7bfc8eb38) at machexception.cpp:387:29 [opt]\n    frame #177: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc8ebd0, pExRecord=0x00007ff7bfc8eb38, pMachExceptionInfo=0x00007ff7bfc8e090) at machexception.cpp:430:5 [opt]\n    frame #178: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #179: 0x0000000102b600b2\n    frame #180: 0x0000000102e1a113\n    frame #181: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #182: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #183: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #184: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc93200) at exceptionhandling.cpp:1513:9 [opt]\n    frame #185: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc93200) at seh.cpp:266:21 [opt]\n    frame #186: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc95310, pExRecord=0x00007ff7bfc95278) at machexception.cpp:387:29 [opt]\n    frame #187: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc95310, pExRecord=0x00007ff7bfc95278, pMachExceptionInfo=0x00007ff7bfc947d0) at machexception.cpp:430:5 [opt]\n    frame #188: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #189: 0x0000000102b600b2\n    frame #190: 0x0000000102e1a113\n    frame #191: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #192: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #193: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #194: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfc99940) at exceptionhandling.cpp:1513:9 [opt]\n    frame #195: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfc99940) at seh.cpp:266:21 [opt]\n    frame #196: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfc9ba50, pExRecord=0x00007ff7bfc9b9b8) at machexception.cpp:387:29 [opt]\n    frame #197: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfc9ba50, pExRecord=0x00007ff7bfc9b9b8, pMachExceptionInfo=0x00007ff7bfc9af10) at machexception.cpp:430:5 [opt]\n    frame #198: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #199: 0x0000000102b600b2\n    frame #200: 0x0000000102e1a113\n    frame #201: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #202: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #203: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #204: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfca0080) at exceptionhandling.cpp:1513:9 [opt]\n    frame #205: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfca0080) at seh.cpp:266:21 [opt]\n    frame #206: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfca2190, pExRecord=0x00007ff7bfca20f8) at machexception.cpp:387:29 [opt]\n    frame #207: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfca2190, pExRecord=0x00007ff7bfca20f8, pMachExceptionInfo=0x00007ff7bfca1650) at machexception.cpp:430:5 [opt]\n    frame #208: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #209: 0x0000000102b600b2\n    frame #210: 0x0000000102e1a113\n    frame #211: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #212: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #213: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #214: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfca67c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #215: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfca67c0) at seh.cpp:266:21 [opt]\n    frame #216: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfca88d0, pExRecord=0x00007ff7bfca8838) at machexception.cpp:387:29 [opt]\n    frame #217: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfca88d0, pExRecord=0x00007ff7bfca8838, pMachExceptionInfo=0x00007ff7bfca7d90) at machexception.cpp:430:5 [opt]\n    frame #218: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #219: 0x0000000102b600b2\n    frame #220: 0x0000000102e1a113\n    frame #221: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #222: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #223: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #224: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcacf00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #225: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcacf00) at seh.cpp:266:21 [opt]\n    frame #226: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcaf010, pExRecord=0x00007ff7bfcaef78) at machexception.cpp:387:29 [opt]\n    frame #227: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcaf010, pExRecord=0x00007ff7bfcaef78, pMachExceptionInfo=0x00007ff7bfcae4d0) at machexception.cpp:430:5 [opt]\n    frame #228: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #229: 0x0000000102b600b2\n    frame #230: 0x0000000102e1a113\n    frame #231: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #232: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #233: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #234: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcb3640) at exceptionhandling.cpp:1513:9 [opt]\n    frame #235: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcb3640) at seh.cpp:266:21 [opt]\n    frame #236: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcb5750, pExRecord=0x00007ff7bfcb56b8) at machexception.cpp:387:29 [opt]\n    frame #237: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcb5750, pExRecord=0x00007ff7bfcb56b8, pMachExceptionInfo=0x00007ff7bfcb4c10) at machexception.cpp:430:5 [opt]\n    frame #238: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #239: 0x0000000102b600b2\n    frame #240: 0x0000000102e1a113\n    frame #241: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #242: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #243: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #244: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcb9d80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #245: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcb9d80) at seh.cpp:266:21 [opt]\n    frame #246: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcbbe90, pExRecord=0x00007ff7bfcbbdf8) at machexception.cpp:387:29 [opt]\n    frame #247: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcbbe90, pExRecord=0x00007ff7bfcbbdf8, pMachExceptionInfo=0x00007ff7bfcbb350) at machexception.cpp:430:5 [opt]\n    frame #248: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #249: 0x0000000102b600b2\n    frame #250: 0x0000000102e1a113\n    frame #251: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #252: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #253: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #254: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcc04c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #255: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcc04c0) at seh.cpp:266:21 [opt]\n    frame #256: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcc25d0, pExRecord=0x00007ff7bfcc2538) at machexception.cpp:387:29 [opt]\n    frame #257: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcc25d0, pExRecord=0x00007ff7bfcc2538, pMachExceptionInfo=0x00007ff7bfcc1a90) at machexception.cpp:430:5 [opt]\n    frame #258: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #259: 0x0000000102b600b2\n    frame #260: 0x0000000102e1a113\n    frame #261: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #262: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #263: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #264: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcc6c00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #265: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcc6c00) at seh.cpp:266:21 [opt]\n    frame #266: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcc8d10, pExRecord=0x00007ff7bfcc8c78) at machexception.cpp:387:29 [opt]\n    frame #267: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcc8d10, pExRecord=0x00007ff7bfcc8c78, pMachExceptionInfo=0x00007ff7bfcc81d0) at machexception.cpp:430:5 [opt]\n    frame #268: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #269: 0x0000000102b600b2\n    frame #270: 0x0000000102e1a113\n    frame #271: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #272: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #273: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #274: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfccd340) at exceptionhandling.cpp:1513:9 [opt]\n    frame #275: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfccd340) at seh.cpp:266:21 [opt]\n    frame #276: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfccf450, pExRecord=0x00007ff7bfccf3b8) at machexception.cpp:387:29 [opt]\n    frame #277: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfccf450, pExRecord=0x00007ff7bfccf3b8, pMachExceptionInfo=0x00007ff7bfcce910) at machexception.cpp:430:5 [opt]\n    frame #278: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #279: 0x0000000102b600b2\n    frame #280: 0x0000000102e1a113\n    frame #281: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #282: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #283: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #284: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcd3a80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #285: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcd3a80) at seh.cpp:266:21 [opt]\n    frame #286: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcd5b90, pExRecord=0x00007ff7bfcd5af8) at machexception.cpp:387:29 [opt]\n    frame #287: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcd5b90, pExRecord=0x00007ff7bfcd5af8, pMachExceptionInfo=0x00007ff7bfcd5050) at machexception.cpp:430:5 [opt]\n    frame #288: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #289: 0x0000000102b600b2\n    frame #290: 0x0000000102e1a113\n    frame #291: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #292: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #293: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #294: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcda1c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #295: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcda1c0) at seh.cpp:266:21 [opt]\n    frame #296: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcdc2d0, pExRecord=0x00007ff7bfcdc238) at machexception.cpp:387:29 [opt]\n    frame #297: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcdc2d0, pExRecord=0x00007ff7bfcdc238, pMachExceptionInfo=0x00007ff7bfcdb790) at machexception.cpp:430:5 [opt]\n    frame #298: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #299: 0x0000000102b600b2\n    frame #300: 0x0000000102e1a113\n    frame #301: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #302: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #303: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #304: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfce0900) at exceptionhandling.cpp:1513:9 [opt]\n    frame #305: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfce0900) at seh.cpp:266:21 [opt]\n    frame #306: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfce2a10, pExRecord=0x00007ff7bfce2978) at machexception.cpp:387:29 [opt]\n    frame #307: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfce2a10, pExRecord=0x00007ff7bfce2978, pMachExceptionInfo=0x00007ff7bfce1ed0) at machexception.cpp:430:5 [opt]\n    frame #308: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #309: 0x0000000102b600b2\n    frame #310: 0x0000000102e1a113\n    frame #311: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #312: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #313: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #314: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfce7040) at exceptionhandling.cpp:1513:9 [opt]\n    frame #315: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfce7040) at seh.cpp:266:21 [opt]\n    frame #316: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfce9150, pExRecord=0x00007ff7bfce90b8) at machexception.cpp:387:29 [opt]\n    frame #317: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfce9150, pExRecord=0x00007ff7bfce90b8, pMachExceptionInfo=0x00007ff7bfce8610) at machexception.cpp:430:5 [opt]\n    frame #318: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #319: 0x0000000102b600b2\n    frame #320: 0x0000000102e1a113\n    frame #321: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #322: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #323: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #324: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfced780) at exceptionhandling.cpp:1513:9 [opt]\n    frame #325: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfced780) at seh.cpp:266:21 [opt]\n    frame #326: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcef890, pExRecord=0x00007ff7bfcef7f8) at machexception.cpp:387:29 [opt]\n    frame #327: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcef890, pExRecord=0x00007ff7bfcef7f8, pMachExceptionInfo=0x00007ff7bfceed50) at machexception.cpp:430:5 [opt]\n    frame #328: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #329: 0x0000000102b600b2\n    frame #330: 0x0000000102e1a113\n    frame #331: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #332: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #333: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #334: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcf3ec0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #335: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcf3ec0) at seh.cpp:266:21 [opt]\n    frame #336: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcf5fd0, pExRecord=0x00007ff7bfcf5f38) at machexception.cpp:387:29 [opt]\n    frame #337: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcf5fd0, pExRecord=0x00007ff7bfcf5f38, pMachExceptionInfo=0x00007ff7bfcf5490) at machexception.cpp:430:5 [opt]\n    frame #338: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #339: 0x0000000102b600b2\n    frame #340: 0x0000000102e1a113\n    frame #341: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #342: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #343: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #344: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfcfa600) at exceptionhandling.cpp:1513:9 [opt]\n    frame #345: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfcfa600) at seh.cpp:266:21 [opt]\n    frame #346: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfcfc710, pExRecord=0x00007ff7bfcfc678) at machexception.cpp:387:29 [opt]\n    frame #347: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfcfc710, pExRecord=0x00007ff7bfcfc678, pMachExceptionInfo=0x00007ff7bfcfbbd0) at machexception.cpp:430:5 [opt]\n    frame #348: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #349: 0x0000000102b600b2\n    frame #350: 0x0000000102e1a113\n    frame #351: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #352: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #353: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #354: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd00d40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #355: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd00d40) at seh.cpp:266:21 [opt]\n    frame #356: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd02e50, pExRecord=0x00007ff7bfd02db8) at machexception.cpp:387:29 [opt]\n    frame #357: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd02e50, pExRecord=0x00007ff7bfd02db8, pMachExceptionInfo=0x00007ff7bfd02310) at machexception.cpp:430:5 [opt]\n    frame #358: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #359: 0x0000000102b600b2\n    frame #360: 0x0000000102e1a113\n    frame #361: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #362: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #363: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #364: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd07480) at exceptionhandling.cpp:1513:9 [opt]\n    frame #365: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd07480) at seh.cpp:266:21 [opt]\n    frame #366: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd09590, pExRecord=0x00007ff7bfd094f8) at machexception.cpp:387:29 [opt]\n    frame #367: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd09590, pExRecord=0x00007ff7bfd094f8, pMachExceptionInfo=0x00007ff7bfd08a50) at machexception.cpp:430:5 [opt]\n    frame #368: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #369: 0x0000000102b600b2\n    frame #370: 0x0000000102e1a113\n    frame #371: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #372: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #373: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #374: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd0dbc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #375: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd0dbc0) at seh.cpp:266:21 [opt]\n    frame #376: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd0fcd0, pExRecord=0x00007ff7bfd0fc38) at machexception.cpp:387:29 [opt]\n    frame #377: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd0fcd0, pExRecord=0x00007ff7bfd0fc38, pMachExceptionInfo=0x00007ff7bfd0f190) at machexception.cpp:430:5 [opt]\n    frame #378: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #379: 0x0000000102b600b2\n    frame #380: 0x0000000102e1a113\n    frame #381: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #382: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #383: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #384: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd14300) at exceptionhandling.cpp:1513:9 [opt]\n    frame #385: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd14300) at seh.cpp:266:21 [opt]\n    frame #386: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd16410, pExRecord=0x00007ff7bfd16378) at machexception.cpp:387:29 [opt]\n    frame #387: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd16410, pExRecord=0x00007ff7bfd16378, pMachExceptionInfo=0x00007ff7bfd158d0) at machexception.cpp:430:5 [opt]\n    frame #388: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #389: 0x0000000102b600b2\n    frame #390: 0x0000000102e1a113\n    frame #391: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #392: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #393: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #394: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd1aa40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #395: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd1aa40) at seh.cpp:266:21 [opt]\n    frame #396: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd1cb50, pExRecord=0x00007ff7bfd1cab8) at machexception.cpp:387:29 [opt]\n    frame #397: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd1cb50, pExRecord=0x00007ff7bfd1cab8, pMachExceptionInfo=0x00007ff7bfd1c010) at machexception.cpp:430:5 [opt]\n    frame #398: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #399: 0x0000000102b600b2\n    frame #400: 0x0000000102e1a113\n    frame #401: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #402: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #403: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #404: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd21180) at exceptionhandling.cpp:1513:9 [opt]\n    frame #405: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd21180) at seh.cpp:266:21 [opt]\n    frame #406: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd23290, pExRecord=0x00007ff7bfd231f8) at machexception.cpp:387:29 [opt]\n    frame #407: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd23290, pExRecord=0x00007ff7bfd231f8, pMachExceptionInfo=0x00007ff7bfd22750) at machexception.cpp:430:5 [opt]\n    frame #408: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #409: 0x0000000102b600b2\n    frame #410: 0x0000000102e1a113\n    frame #411: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #412: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #413: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #414: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd278c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #415: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd278c0) at seh.cpp:266:21 [opt]\n    frame #416: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd299d0, pExRecord=0x00007ff7bfd29938) at machexception.cpp:387:29 [opt]\n    frame #417: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd299d0, pExRecord=0x00007ff7bfd29938, pMachExceptionInfo=0x00007ff7bfd28e90) at machexception.cpp:430:5 [opt]\n    frame #418: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #419: 0x0000000102b600b2\n    frame #420: 0x0000000102e1a113\n    frame #421: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #422: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #423: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #424: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd2e000) at exceptionhandling.cpp:1513:9 [opt]\n    frame #425: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd2e000) at seh.cpp:266:21 [opt]\n    frame #426: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd30110, pExRecord=0x00007ff7bfd30078) at machexception.cpp:387:29 [opt]\n    frame #427: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd30110, pExRecord=0x00007ff7bfd30078, pMachExceptionInfo=0x00007ff7bfd2f5d0) at machexception.cpp:430:5 [opt]\n    frame #428: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #429: 0x0000000102b600b2\n    frame #430: 0x0000000102e1a113\n    frame #431: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #432: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #433: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #434: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd34740) at exceptionhandling.cpp:1513:9 [opt]\n    frame #435: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd34740) at seh.cpp:266:21 [opt]\n    frame #436: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd36850, pExRecord=0x00007ff7bfd367b8) at machexception.cpp:387:29 [opt]\n    frame #437: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd36850, pExRecord=0x00007ff7bfd367b8, pMachExceptionInfo=0x00007ff7bfd35d10) at machexception.cpp:430:5 [opt]\n    frame #438: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #439: 0x0000000102b600b2\n    frame #440: 0x0000000102e1a113\n    frame #441: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #442: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #443: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #444: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd3ae80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #445: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd3ae80) at seh.cpp:266:21 [opt]\n    frame #446: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd3cf90, pExRecord=0x00007ff7bfd3cef8) at machexception.cpp:387:29 [opt]\n    frame #447: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd3cf90, pExRecord=0x00007ff7bfd3cef8, pMachExceptionInfo=0x00007ff7bfd3c450) at machexception.cpp:430:5 [opt]\n    frame #448: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #449: 0x0000000102b600b2\n    frame #450: 0x0000000102e1a113\n    frame #451: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #452: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #453: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #454: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd415c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #455: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd415c0) at seh.cpp:266:21 [opt]\n    frame #456: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd436d0, pExRecord=0x00007ff7bfd43638) at machexception.cpp:387:29 [opt]\n    frame #457: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd436d0, pExRecord=0x00007ff7bfd43638, pMachExceptionInfo=0x00007ff7bfd42b90) at machexception.cpp:430:5 [opt]\n    frame #458: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #459: 0x0000000102b600b2\n    frame #460: 0x0000000102e1a113\n    frame #461: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #462: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #463: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #464: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd47d00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #465: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd47d00) at seh.cpp:266:21 [opt]\n    frame #466: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd49e10, pExRecord=0x00007ff7bfd49d78) at machexception.cpp:387:29 [opt]\n    frame #467: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd49e10, pExRecord=0x00007ff7bfd49d78, pMachExceptionInfo=0x00007ff7bfd492d0) at machexception.cpp:430:5 [opt]\n    frame #468: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #469: 0x0000000102b600b2\n    frame #470: 0x0000000102e1a113\n    frame #471: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #472: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #473: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #474: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd4e440) at exceptionhandling.cpp:1513:9 [opt]\n    frame #475: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd4e440) at seh.cpp:266:21 [opt]\n    frame #476: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd50550, pExRecord=0x00007ff7bfd504b8) at machexception.cpp:387:29 [opt]\n    frame #477: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd50550, pExRecord=0x00007ff7bfd504b8, pMachExceptionInfo=0x00007ff7bfd4fa10) at machexception.cpp:430:5 [opt]\n    frame #478: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #479: 0x0000000102b600b2\n    frame #480: 0x0000000102e1a113\n    frame #481: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #482: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #483: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #484: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd54b80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #485: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd54b80) at seh.cpp:266:21 [opt]\n    frame #486: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd56c90, pExRecord=0x00007ff7bfd56bf8) at machexception.cpp:387:29 [opt]\n    frame #487: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd56c90, pExRecord=0x00007ff7bfd56bf8, pMachExceptionInfo=0x00007ff7bfd56150) at machexception.cpp:430:5 [opt]\n    frame #488: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #489: 0x0000000102b600b2\n    frame #490: 0x0000000102e1a113\n    frame #491: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #492: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #493: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #494: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd5b2c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #495: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd5b2c0) at seh.cpp:266:21 [opt]\n    frame #496: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd5d3d0, pExRecord=0x00007ff7bfd5d338) at machexception.cpp:387:29 [opt]\n    frame #497: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd5d3d0, pExRecord=0x00007ff7bfd5d338, pMachExceptionInfo=0x00007ff7bfd5c890) at machexception.cpp:430:5 [opt]\n    frame #498: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #499: 0x0000000102b600b2\n    frame #500: 0x0000000102e1a113\n    frame #501: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #502: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #503: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #504: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd61a00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #505: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd61a00) at seh.cpp:266:21 [opt]\n    frame #506: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd63b10, pExRecord=0x00007ff7bfd63a78) at machexception.cpp:387:29 [opt]\n    frame #507: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd63b10, pExRecord=0x00007ff7bfd63a78, pMachExceptionInfo=0x00007ff7bfd62fd0) at machexception.cpp:430:5 [opt]\n    frame #508: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #509: 0x0000000102b600b2\n    frame #510: 0x0000000102e1a113\n    frame #511: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #512: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #513: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #514: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd68140) at exceptionhandling.cpp:1513:9 [opt]\n    frame #515: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd68140) at seh.cpp:266:21 [opt]\n    frame #516: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd6a250, pExRecord=0x00007ff7bfd6a1b8) at machexception.cpp:387:29 [opt]\n    frame #517: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd6a250, pExRecord=0x00007ff7bfd6a1b8, pMachExceptionInfo=0x00007ff7bfd69710) at machexception.cpp:430:5 [opt]\n    frame #518: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #519: 0x0000000102b600b2\n    frame #520: 0x0000000102e1a113\n    frame #521: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #522: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #523: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #524: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd6e880) at exceptionhandling.cpp:1513:9 [opt]\n    frame #525: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd6e880) at seh.cpp:266:21 [opt]\n    frame #526: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd70990, pExRecord=0x00007ff7bfd708f8) at machexception.cpp:387:29 [opt]\n    frame #527: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd70990, pExRecord=0x00007ff7bfd708f8, pMachExceptionInfo=0x00007ff7bfd6fe50) at machexception.cpp:430:5 [opt]\n    frame #528: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #529: 0x0000000102b600b2\n    frame #530: 0x0000000102e1a113\n    frame #531: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #532: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #533: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #534: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd74fc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #535: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd74fc0) at seh.cpp:266:21 [opt]\n    frame #536: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd770d0, pExRecord=0x00007ff7bfd77038) at machexception.cpp:387:29 [opt]\n    frame #537: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd770d0, pExRecord=0x00007ff7bfd77038, pMachExceptionInfo=0x00007ff7bfd76590) at machexception.cpp:430:5 [opt]\n    frame #538: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #539: 0x0000000102b600b2\n    frame #540: 0x0000000102e1a113\n    frame #541: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #542: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #543: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #544: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd7b700) at exceptionhandling.cpp:1513:9 [opt]\n    frame #545: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd7b700) at seh.cpp:266:21 [opt]\n    frame #546: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd7d810, pExRecord=0x00007ff7bfd7d778) at machexception.cpp:387:29 [opt]\n    frame #547: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd7d810, pExRecord=0x00007ff7bfd7d778, pMachExceptionInfo=0x00007ff7bfd7ccd0) at machexception.cpp:430:5 [opt]\n    frame #548: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #549: 0x0000000102b600b2\n    frame #550: 0x0000000102e1a113\n    frame #551: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #552: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #553: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #554: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd81e40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #555: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd81e40) at seh.cpp:266:21 [opt]\n    frame #556: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd83f50, pExRecord=0x00007ff7bfd83eb8) at machexception.cpp:387:29 [opt]\n    frame #557: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd83f50, pExRecord=0x00007ff7bfd83eb8, pMachExceptionInfo=0x00007ff7bfd83410) at machexception.cpp:430:5 [opt]\n    frame #558: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #559: 0x0000000102b600b2\n    frame #560: 0x0000000102e1a113\n    frame #561: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #562: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #563: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #564: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd88580) at exceptionhandling.cpp:1513:9 [opt]\n    frame #565: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd88580) at seh.cpp:266:21 [opt]\n    frame #566: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd8a690, pExRecord=0x00007ff7bfd8a5f8) at machexception.cpp:387:29 [opt]\n    frame #567: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd8a690, pExRecord=0x00007ff7bfd8a5f8, pMachExceptionInfo=0x00007ff7bfd89b50) at machexception.cpp:430:5 [opt]\n    frame #568: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #569: 0x0000000102b600b2\n    frame #570: 0x0000000102e1a113\n    frame #571: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #572: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #573: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #574: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd8ecc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #575: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd8ecc0) at seh.cpp:266:21 [opt]\n    frame #576: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd90dd0, pExRecord=0x00007ff7bfd90d38) at machexception.cpp:387:29 [opt]\n    frame #577: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd90dd0, pExRecord=0x00007ff7bfd90d38, pMachExceptionInfo=0x00007ff7bfd90290) at machexception.cpp:430:5 [opt]\n    frame #578: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #579: 0x0000000102b600b2\n    frame #580: 0x0000000102e1a113\n    frame #581: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #582: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #583: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #584: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd95400) at exceptionhandling.cpp:1513:9 [opt]\n    frame #585: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd95400) at seh.cpp:266:21 [opt]\n    frame #586: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd97510, pExRecord=0x00007ff7bfd97478) at machexception.cpp:387:29 [opt]\n    frame #587: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd97510, pExRecord=0x00007ff7bfd97478, pMachExceptionInfo=0x00007ff7bfd969d0) at machexception.cpp:430:5 [opt]\n    frame #588: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #589: 0x0000000102b600b2\n    frame #590: 0x0000000102e1a113\n    frame #591: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #592: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #593: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #594: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfd9bb40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #595: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfd9bb40) at seh.cpp:266:21 [opt]\n    frame #596: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfd9dc50, pExRecord=0x00007ff7bfd9dbb8) at machexception.cpp:387:29 [opt]\n    frame #597: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfd9dc50, pExRecord=0x00007ff7bfd9dbb8, pMachExceptionInfo=0x00007ff7bfd9d110) at machexception.cpp:430:5 [opt]\n    frame #598: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #599: 0x0000000102b600b2\n    frame #600: 0x0000000102e1a113\n    frame #601: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #602: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #603: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #604: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfda2280) at exceptionhandling.cpp:1513:9 [opt]\n    frame #605: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfda2280) at seh.cpp:266:21 [opt]\n    frame #606: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfda4390, pExRecord=0x00007ff7bfda42f8) at machexception.cpp:387:29 [opt]\n    frame #607: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfda4390, pExRecord=0x00007ff7bfda42f8, pMachExceptionInfo=0x00007ff7bfda3850) at machexception.cpp:430:5 [opt]\n    frame #608: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #609: 0x0000000102b600b2\n    frame #610: 0x0000000102e1a113\n    frame #611: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #612: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #613: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #614: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfda89c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #615: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfda89c0) at seh.cpp:266:21 [opt]\n    frame #616: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdaaad0, pExRecord=0x00007ff7bfdaaa38) at machexception.cpp:387:29 [opt]\n    frame #617: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdaaad0, pExRecord=0x00007ff7bfdaaa38, pMachExceptionInfo=0x00007ff7bfda9f90) at machexception.cpp:430:5 [opt]\n    frame #618: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #619: 0x0000000102b600b2\n    frame #620: 0x0000000102e1a113\n    frame #621: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #622: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #623: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #624: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdaf100) at exceptionhandling.cpp:1513:9 [opt]\n    frame #625: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdaf100) at seh.cpp:266:21 [opt]\n    frame #626: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdb1210, pExRecord=0x00007ff7bfdb1178) at machexception.cpp:387:29 [opt]\n    frame #627: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdb1210, pExRecord=0x00007ff7bfdb1178, pMachExceptionInfo=0x00007ff7bfdb06d0) at machexception.cpp:430:5 [opt]\n    frame #628: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #629: 0x0000000102b600b2\n    frame #630: 0x0000000102e1a113\n    frame #631: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #632: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #633: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #634: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdb5840) at exceptionhandling.cpp:1513:9 [opt]\n    frame #635: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdb5840) at seh.cpp:266:21 [opt]\n    frame #636: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdb7950, pExRecord=0x00007ff7bfdb78b8) at machexception.cpp:387:29 [opt]\n    frame #637: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdb7950, pExRecord=0x00007ff7bfdb78b8, pMachExceptionInfo=0x00007ff7bfdb6e10) at machexception.cpp:430:5 [opt]\n    frame #638: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #639: 0x0000000102b600b2\n    frame #640: 0x0000000102e1a113\n    frame #641: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #642: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #643: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #644: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdbbf80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #645: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdbbf80) at seh.cpp:266:21 [opt]\n    frame #646: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdbe090, pExRecord=0x00007ff7bfdbdff8) at machexception.cpp:387:29 [opt]\n    frame #647: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdbe090, pExRecord=0x00007ff7bfdbdff8, pMachExceptionInfo=0x00007ff7bfdbd550) at machexception.cpp:430:5 [opt]\n    frame #648: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #649: 0x0000000102b600b2\n    frame #650: 0x0000000102e1a113\n    frame #651: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #652: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #653: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #654: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdc26c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #655: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdc26c0) at seh.cpp:266:21 [opt]\n    frame #656: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdc47d0, pExRecord=0x00007ff7bfdc4738) at machexception.cpp:387:29 [opt]\n    frame #657: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdc47d0, pExRecord=0x00007ff7bfdc4738, pMachExceptionInfo=0x00007ff7bfdc3c90) at machexception.cpp:430:5 [opt]\n    frame #658: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #659: 0x0000000102b600b2\n    frame #660: 0x0000000102e1a113\n    frame #661: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #662: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #663: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #664: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdc8e00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #665: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdc8e00) at seh.cpp:266:21 [opt]\n    frame #666: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdcaf10, pExRecord=0x00007ff7bfdcae78) at machexception.cpp:387:29 [opt]\n    frame #667: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdcaf10, pExRecord=0x00007ff7bfdcae78, pMachExceptionInfo=0x00007ff7bfdca3d0) at machexception.cpp:430:5 [opt]\n    frame #668: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #669: 0x0000000102b600b2\n    frame #670: 0x0000000102e1a113\n    frame #671: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #672: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #673: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #674: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdcf540) at exceptionhandling.cpp:1513:9 [opt]\n    frame #675: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdcf540) at seh.cpp:266:21 [opt]\n    frame #676: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdd1650, pExRecord=0x00007ff7bfdd15b8) at machexception.cpp:387:29 [opt]\n    frame #677: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdd1650, pExRecord=0x00007ff7bfdd15b8, pMachExceptionInfo=0x00007ff7bfdd0b10) at machexception.cpp:430:5 [opt]\n    frame #678: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #679: 0x0000000102b600b2\n    frame #680: 0x0000000102e1a113\n    frame #681: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #682: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #683: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #684: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdd5c80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #685: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdd5c80) at seh.cpp:266:21 [opt]\n    frame #686: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdd7d90, pExRecord=0x00007ff7bfdd7cf8) at machexception.cpp:387:29 [opt]\n    frame #687: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdd7d90, pExRecord=0x00007ff7bfdd7cf8, pMachExceptionInfo=0x00007ff7bfdd7250) at machexception.cpp:430:5 [opt]\n    frame #688: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #689: 0x0000000102b600b2\n    frame #690: 0x0000000102e1a113\n    frame #691: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #692: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #693: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #694: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfddc3c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #695: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfddc3c0) at seh.cpp:266:21 [opt]\n    frame #696: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdde4d0, pExRecord=0x00007ff7bfdde438) at machexception.cpp:387:29 [opt]\n    frame #697: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdde4d0, pExRecord=0x00007ff7bfdde438, pMachExceptionInfo=0x00007ff7bfddd990) at machexception.cpp:430:5 [opt]\n    frame #698: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #699: 0x0000000102b600b2\n    frame #700: 0x0000000102e1a113\n    frame #701: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #702: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #703: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #704: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfde2b00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #705: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfde2b00) at seh.cpp:266:21 [opt]\n    frame #706: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfde4c10, pExRecord=0x00007ff7bfde4b78) at machexception.cpp:387:29 [opt]\n    frame #707: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfde4c10, pExRecord=0x00007ff7bfde4b78, pMachExceptionInfo=0x00007ff7bfde40d0) at machexception.cpp:430:5 [opt]\n    frame #708: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #709: 0x0000000102b600b2\n    frame #710: 0x0000000102e1a113\n    frame #711: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #712: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #713: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #714: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfde9240) at exceptionhandling.cpp:1513:9 [opt]\n    frame #715: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfde9240) at seh.cpp:266:21 [opt]\n    frame #716: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdeb350, pExRecord=0x00007ff7bfdeb2b8) at machexception.cpp:387:29 [opt]\n    frame #717: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdeb350, pExRecord=0x00007ff7bfdeb2b8, pMachExceptionInfo=0x00007ff7bfdea810) at machexception.cpp:430:5 [opt]\n    frame #718: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #719: 0x0000000102b600b2\n    frame #720: 0x0000000102e1a113\n    frame #721: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #722: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #723: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #724: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdef980) at exceptionhandling.cpp:1513:9 [opt]\n    frame #725: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdef980) at seh.cpp:266:21 [opt]\n    frame #726: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdf1a90, pExRecord=0x00007ff7bfdf19f8) at machexception.cpp:387:29 [opt]\n    frame #727: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdf1a90, pExRecord=0x00007ff7bfdf19f8, pMachExceptionInfo=0x00007ff7bfdf0f50) at machexception.cpp:430:5 [opt]\n    frame #728: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #729: 0x0000000102b600b2\n    frame #730: 0x0000000102e1a113\n    frame #731: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #732: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #733: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #734: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdf60c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #735: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdf60c0) at seh.cpp:266:21 [opt]\n    frame #736: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdf81d0, pExRecord=0x00007ff7bfdf8138) at machexception.cpp:387:29 [opt]\n    frame #737: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdf81d0, pExRecord=0x00007ff7bfdf8138, pMachExceptionInfo=0x00007ff7bfdf7690) at machexception.cpp:430:5 [opt]\n    frame #738: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #739: 0x0000000102b600b2\n    frame #740: 0x0000000102e1a113\n    frame #741: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #742: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #743: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #744: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfdfc800) at exceptionhandling.cpp:1513:9 [opt]\n    frame #745: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfdfc800) at seh.cpp:266:21 [opt]\n    frame #746: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfdfe910, pExRecord=0x00007ff7bfdfe878) at machexception.cpp:387:29 [opt]\n    frame #747: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfdfe910, pExRecord=0x00007ff7bfdfe878, pMachExceptionInfo=0x00007ff7bfdfddd0) at machexception.cpp:430:5 [opt]\n    frame #748: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #749: 0x0000000102b600b2\n    frame #750: 0x0000000102e1a113\n    frame #751: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #752: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #753: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #754: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe02f40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #755: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe02f40) at seh.cpp:266:21 [opt]\n    frame #756: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe05050, pExRecord=0x00007ff7bfe04fb8) at machexception.cpp:387:29 [opt]\n    frame #757: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe05050, pExRecord=0x00007ff7bfe04fb8, pMachExceptionInfo=0x00007ff7bfe04510) at machexception.cpp:430:5 [opt]\n    frame #758: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #759: 0x0000000102b600b2\n    frame #760: 0x0000000102e1a113\n    frame #761: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #762: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #763: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #764: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe09680) at exceptionhandling.cpp:1513:9 [opt]\n    frame #765: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe09680) at seh.cpp:266:21 [opt]\n    frame #766: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe0b790, pExRecord=0x00007ff7bfe0b6f8) at machexception.cpp:387:29 [opt]\n    frame #767: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe0b790, pExRecord=0x00007ff7bfe0b6f8, pMachExceptionInfo=0x00007ff7bfe0ac50) at machexception.cpp:430:5 [opt]\n    frame #768: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #769: 0x0000000102b600b2\n    frame #770: 0x0000000102e1a113\n    frame #771: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #772: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #773: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #774: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe0fdc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #775: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe0fdc0) at seh.cpp:266:21 [opt]\n    frame #776: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe11ed0, pExRecord=0x00007ff7bfe11e38) at machexception.cpp:387:29 [opt]\n    frame #777: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe11ed0, pExRecord=0x00007ff7bfe11e38, pMachExceptionInfo=0x00007ff7bfe11390) at machexception.cpp:430:5 [opt]\n    frame #778: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #779: 0x0000000102b600b2\n    frame #780: 0x0000000102e1a113\n    frame #781: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #782: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #783: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #784: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe16500) at exceptionhandling.cpp:1513:9 [opt]\n    frame #785: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe16500) at seh.cpp:266:21 [opt]\n    frame #786: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe18610, pExRecord=0x00007ff7bfe18578) at machexception.cpp:387:29 [opt]\n    frame #787: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe18610, pExRecord=0x00007ff7bfe18578, pMachExceptionInfo=0x00007ff7bfe17ad0) at machexception.cpp:430:5 [opt]\n    frame #788: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #789: 0x0000000102b600b2\n    frame #790: 0x0000000102e1a113\n    frame #791: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #792: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #793: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #794: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe1cc40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #795: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe1cc40) at seh.cpp:266:21 [opt]\n    frame #796: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe1ed50, pExRecord=0x00007ff7bfe1ecb8) at machexception.cpp:387:29 [opt]\n    frame #797: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe1ed50, pExRecord=0x00007ff7bfe1ecb8, pMachExceptionInfo=0x00007ff7bfe1e210) at machexception.cpp:430:5 [opt]\n    frame #798: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #799: 0x0000000102b600b2\n    frame #800: 0x0000000102e1a113\n    frame #801: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #802: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #803: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #804: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe23380) at exceptionhandling.cpp:1513:9 [opt]\n    frame #805: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe23380) at seh.cpp:266:21 [opt]\n    frame #806: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe25490, pExRecord=0x00007ff7bfe253f8) at machexception.cpp:387:29 [opt]\n    frame #807: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe25490, pExRecord=0x00007ff7bfe253f8, pMachExceptionInfo=0x00007ff7bfe24950) at machexception.cpp:430:5 [opt]\n    frame #808: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #809: 0x0000000102b600b2\n    frame #810: 0x0000000102e1a113\n    frame #811: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #812: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #813: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #814: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe29ac0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #815: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe29ac0) at seh.cpp:266:21 [opt]\n    frame #816: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe2bbd0, pExRecord=0x00007ff7bfe2bb38) at machexception.cpp:387:29 [opt]\n    frame #817: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe2bbd0, pExRecord=0x00007ff7bfe2bb38, pMachExceptionInfo=0x00007ff7bfe2b090) at machexception.cpp:430:5 [opt]\n    frame #818: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #819: 0x0000000102b600b2\n    frame #820: 0x0000000102e1a113\n    frame #821: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #822: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #823: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #824: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe30200) at exceptionhandling.cpp:1513:9 [opt]\n    frame #825: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe30200) at seh.cpp:266:21 [opt]\n    frame #826: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe32310, pExRecord=0x00007ff7bfe32278) at machexception.cpp:387:29 [opt]\n    frame #827: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe32310, pExRecord=0x00007ff7bfe32278, pMachExceptionInfo=0x00007ff7bfe317d0) at machexception.cpp:430:5 [opt]\n    frame #828: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #829: 0x0000000102b600b2\n    frame #830: 0x0000000102e1a113\n    frame #831: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #832: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #833: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #834: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe36940) at exceptionhandling.cpp:1513:9 [opt]\n    frame #835: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe36940) at seh.cpp:266:21 [opt]\n    frame #836: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe38a50, pExRecord=0x00007ff7bfe389b8) at machexception.cpp:387:29 [opt]\n    frame #837: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe38a50, pExRecord=0x00007ff7bfe389b8, pMachExceptionInfo=0x00007ff7bfe37f10) at machexception.cpp:430:5 [opt]\n    frame #838: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #839: 0x0000000102b600b2\n    frame #840: 0x0000000102e1a113\n    frame #841: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #842: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #843: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #844: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe3d080) at exceptionhandling.cpp:1513:9 [opt]\n    frame #845: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe3d080) at seh.cpp:266:21 [opt]\n    frame #846: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe3f190, pExRecord=0x00007ff7bfe3f0f8) at machexception.cpp:387:29 [opt]\n    frame #847: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe3f190, pExRecord=0x00007ff7bfe3f0f8, pMachExceptionInfo=0x00007ff7bfe3e650) at machexception.cpp:430:5 [opt]\n    frame #848: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #849: 0x0000000102b600b2\n    frame #850: 0x0000000102e1a113\n    frame #851: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #852: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #853: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #854: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe437c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #855: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe437c0) at seh.cpp:266:21 [opt]\n    frame #856: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe458d0, pExRecord=0x00007ff7bfe45838) at machexception.cpp:387:29 [opt]\n    frame #857: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe458d0, pExRecord=0x00007ff7bfe45838, pMachExceptionInfo=0x00007ff7bfe44d90) at machexception.cpp:430:5 [opt]\n    frame #858: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #859: 0x0000000102b600b2\n    frame #860: 0x0000000102e1a113\n    frame #861: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #862: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #863: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #864: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe49f00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #865: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe49f00) at seh.cpp:266:21 [opt]\n    frame #866: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe4c010, pExRecord=0x00007ff7bfe4bf78) at machexception.cpp:387:29 [opt]\n    frame #867: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe4c010, pExRecord=0x00007ff7bfe4bf78, pMachExceptionInfo=0x00007ff7bfe4b4d0) at machexception.cpp:430:5 [opt]\n    frame #868: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #869: 0x0000000102b600b2\n    frame #870: 0x0000000102e1a113\n    frame #871: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #872: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #873: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #874: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe50640) at exceptionhandling.cpp:1513:9 [opt]\n    frame #875: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe50640) at seh.cpp:266:21 [opt]\n    frame #876: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe52750, pExRecord=0x00007ff7bfe526b8) at machexception.cpp:387:29 [opt]\n    frame #877: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe52750, pExRecord=0x00007ff7bfe526b8, pMachExceptionInfo=0x00007ff7bfe51c10) at machexception.cpp:430:5 [opt]\n    frame #878: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #879: 0x0000000102b600b2\n    frame #880: 0x0000000102e1a113\n    frame #881: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #882: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #883: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #884: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe56d80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #885: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe56d80) at seh.cpp:266:21 [opt]\n    frame #886: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe58e90, pExRecord=0x00007ff7bfe58df8) at machexception.cpp:387:29 [opt]\n    frame #887: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe58e90, pExRecord=0x00007ff7bfe58df8, pMachExceptionInfo=0x00007ff7bfe58350) at machexception.cpp:430:5 [opt]\n    frame #888: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #889: 0x0000000102b600b2\n    frame #890: 0x0000000102e1a113\n    frame #891: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #892: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #893: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #894: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe5d4c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #895: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe5d4c0) at seh.cpp:266:21 [opt]\n    frame #896: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe5f5d0, pExRecord=0x00007ff7bfe5f538) at machexception.cpp:387:29 [opt]\n    frame #897: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe5f5d0, pExRecord=0x00007ff7bfe5f538, pMachExceptionInfo=0x00007ff7bfe5ea90) at machexception.cpp:430:5 [opt]\n    frame #898: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #899: 0x0000000102b600b2\n    frame #900: 0x0000000102e1a113\n    frame #901: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #902: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #903: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #904: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe63c00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #905: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe63c00) at seh.cpp:266:21 [opt]\n    frame #906: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe65d10, pExRecord=0x00007ff7bfe65c78) at machexception.cpp:387:29 [opt]\n    frame #907: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe65d10, pExRecord=0x00007ff7bfe65c78, pMachExceptionInfo=0x00007ff7bfe651d0) at machexception.cpp:430:5 [opt]\n    frame #908: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #909: 0x0000000102b600b2\n    frame #910: 0x0000000102e1a113\n    frame #911: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #912: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #913: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #914: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe6a340) at exceptionhandling.cpp:1513:9 [opt]\n    frame #915: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe6a340) at seh.cpp:266:21 [opt]\n    frame #916: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe6c450, pExRecord=0x00007ff7bfe6c3b8) at machexception.cpp:387:29 [opt]\n    frame #917: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe6c450, pExRecord=0x00007ff7bfe6c3b8, pMachExceptionInfo=0x00007ff7bfe6b910) at machexception.cpp:430:5 [opt]\n    frame #918: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #919: 0x0000000102b600b2\n    frame #920: 0x0000000102e1a113\n    frame #921: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #922: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #923: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #924: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe70a80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #925: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe70a80) at seh.cpp:266:21 [opt]\n    frame #926: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe72b90, pExRecord=0x00007ff7bfe72af8) at machexception.cpp:387:29 [opt]\n    frame #927: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe72b90, pExRecord=0x00007ff7bfe72af8, pMachExceptionInfo=0x00007ff7bfe72050) at machexception.cpp:430:5 [opt]\n    frame #928: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #929: 0x0000000102b600b2\n    frame #930: 0x0000000102e1a113\n    frame #931: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #932: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #933: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #934: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe771c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #935: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe771c0) at seh.cpp:266:21 [opt]\n    frame #936: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe792d0, pExRecord=0x00007ff7bfe79238) at machexception.cpp:387:29 [opt]\n    frame #937: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe792d0, pExRecord=0x00007ff7bfe79238, pMachExceptionInfo=0x00007ff7bfe78790) at machexception.cpp:430:5 [opt]\n    frame #938: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #939: 0x0000000102b600b2\n    frame #940: 0x0000000102e1a113\n    frame #941: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #942: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #943: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #944: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe7d900) at exceptionhandling.cpp:1513:9 [opt]\n    frame #945: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe7d900) at seh.cpp:266:21 [opt]\n    frame #946: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe7fa10, pExRecord=0x00007ff7bfe7f978) at machexception.cpp:387:29 [opt]\n    frame #947: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe7fa10, pExRecord=0x00007ff7bfe7f978, pMachExceptionInfo=0x00007ff7bfe7eed0) at machexception.cpp:430:5 [opt]\n    frame #948: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #949: 0x0000000102b600b2\n    frame #950: 0x0000000102e1a113\n    frame #951: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #952: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #953: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #954: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe84040) at exceptionhandling.cpp:1513:9 [opt]\n    frame #955: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe84040) at seh.cpp:266:21 [opt]\n    frame #956: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe86150, pExRecord=0x00007ff7bfe860b8) at machexception.cpp:387:29 [opt]\n    frame #957: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe86150, pExRecord=0x00007ff7bfe860b8, pMachExceptionInfo=0x00007ff7bfe85610) at machexception.cpp:430:5 [opt]\n    frame #958: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #959: 0x0000000102b600b2\n    frame #960: 0x0000000102e1a113\n    frame #961: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #962: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #963: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #964: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe8a780) at exceptionhandling.cpp:1513:9 [opt]\n    frame #965: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe8a780) at seh.cpp:266:21 [opt]\n    frame #966: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe8c890, pExRecord=0x00007ff7bfe8c7f8) at machexception.cpp:387:29 [opt]\n    frame #967: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe8c890, pExRecord=0x00007ff7bfe8c7f8, pMachExceptionInfo=0x00007ff7bfe8bd50) at machexception.cpp:430:5 [opt]\n    frame #968: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #969: 0x0000000102b600b2\n    frame #970: 0x0000000102e1a113\n    frame #971: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #972: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #973: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #974: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe90ec0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #975: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe90ec0) at seh.cpp:266:21 [opt]\n    frame #976: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe92fd0, pExRecord=0x00007ff7bfe92f38) at machexception.cpp:387:29 [opt]\n    frame #977: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe92fd0, pExRecord=0x00007ff7bfe92f38, pMachExceptionInfo=0x00007ff7bfe92490) at machexception.cpp:430:5 [opt]\n    frame #978: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #979: 0x0000000102b600b2\n    frame #980: 0x0000000102e1a113\n    frame #981: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #982: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #983: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #984: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe97600) at exceptionhandling.cpp:1513:9 [opt]\n    frame #985: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe97600) at seh.cpp:266:21 [opt]\n    frame #986: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe99710, pExRecord=0x00007ff7bfe99678) at machexception.cpp:387:29 [opt]\n    frame #987: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe99710, pExRecord=0x00007ff7bfe99678, pMachExceptionInfo=0x00007ff7bfe98bd0) at machexception.cpp:430:5 [opt]\n    frame #988: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #989: 0x0000000102b600b2\n    frame #990: 0x0000000102e1a113\n    frame #991: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #992: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #993: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #994: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfe9dd40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #995: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfe9dd40) at seh.cpp:266:21 [opt]\n    frame #996: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfe9fe50, pExRecord=0x00007ff7bfe9fdb8) at machexception.cpp:387:29 [opt]\n    frame #997: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfe9fe50, pExRecord=0x00007ff7bfe9fdb8, pMachExceptionInfo=0x00007ff7bfe9f310) at machexception.cpp:430:5 [opt]\n    frame #998: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #999: 0x0000000102b600b2\n    frame #1000: 0x0000000102e1a113\n    frame #1001: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1002: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1003: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1004: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfea4480) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1005: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfea4480) at seh.cpp:266:21 [opt]\n    frame #1006: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfea6590, pExRecord=0x00007ff7bfea64f8) at machexception.cpp:387:29 [opt]\n    frame #1007: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfea6590, pExRecord=0x00007ff7bfea64f8, pMachExceptionInfo=0x00007ff7bfea5a50) at machexception.cpp:430:5 [opt]\n    frame #1008: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1009: 0x0000000102b600b2\n    frame #1010: 0x0000000102e1a113\n    frame #1011: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1012: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1013: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1014: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfeaabc0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1015: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfeaabc0) at seh.cpp:266:21 [opt]\n    frame #1016: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfeaccd0, pExRecord=0x00007ff7bfeacc38) at machexception.cpp:387:29 [opt]\n    frame #1017: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfeaccd0, pExRecord=0x00007ff7bfeacc38, pMachExceptionInfo=0x00007ff7bfeac190) at machexception.cpp:430:5 [opt]\n    frame #1018: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1019: 0x0000000102b600b2\n    frame #1020: 0x0000000102e1a113\n    frame #1021: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1022: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1023: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1024: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfeb1300) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1025: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfeb1300) at seh.cpp:266:21 [opt]\n    frame #1026: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfeb3410, pExRecord=0x00007ff7bfeb3378) at machexception.cpp:387:29 [opt]\n    frame #1027: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfeb3410, pExRecord=0x00007ff7bfeb3378, pMachExceptionInfo=0x00007ff7bfeb28d0) at machexception.cpp:430:5 [opt]\n    frame #1028: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1029: 0x0000000102b600b2\n    frame #1030: 0x0000000102e1a113\n    frame #1031: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1032: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1033: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1034: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfeb7a40) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1035: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfeb7a40) at seh.cpp:266:21 [opt]\n    frame #1036: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfeb9b50, pExRecord=0x00007ff7bfeb9ab8) at machexception.cpp:387:29 [opt]\n    frame #1037: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfeb9b50, pExRecord=0x00007ff7bfeb9ab8, pMachExceptionInfo=0x00007ff7bfeb9010) at machexception.cpp:430:5 [opt]\n    frame #1038: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1039: 0x0000000102b600b2\n    frame #1040: 0x0000000102e1a113\n    frame #1041: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1042: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1043: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1044: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfebe180) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1045: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfebe180) at seh.cpp:266:21 [opt]\n    frame #1046: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfec0290, pExRecord=0x00007ff7bfec01f8) at machexception.cpp:387:29 [opt]\n    frame #1047: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfec0290, pExRecord=0x00007ff7bfec01f8, pMachExceptionInfo=0x00007ff7bfebf750) at machexception.cpp:430:5 [opt]\n    frame #1048: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1049: 0x0000000102b600b2\n    frame #1050: 0x0000000102e1a113\n    frame #1051: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1052: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1053: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1054: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfec48c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1055: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfec48c0) at seh.cpp:266:21 [opt]\n    frame #1056: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfec69d0, pExRecord=0x00007ff7bfec6938) at machexception.cpp:387:29 [opt]\n    frame #1057: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfec69d0, pExRecord=0x00007ff7bfec6938, pMachExceptionInfo=0x00007ff7bfec5e90) at machexception.cpp:430:5 [opt]\n    frame #1058: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1059: 0x0000000102b600b2\n    frame #1060: 0x0000000102e1a113\n    frame #1061: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1062: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1063: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1064: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfecb000) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1065: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfecb000) at seh.cpp:266:21 [opt]\n    frame #1066: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfecd110, pExRecord=0x00007ff7bfecd078) at machexception.cpp:387:29 [opt]\n    frame #1067: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfecd110, pExRecord=0x00007ff7bfecd078, pMachExceptionInfo=0x00007ff7bfecc5d0) at machexception.cpp:430:5 [opt]\n    frame #1068: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1069: 0x0000000102b600b2\n    frame #1070: 0x0000000102e1a113\n    frame #1071: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1072: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1073: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1074: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfed1740) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1075: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfed1740) at seh.cpp:266:21 [opt]\n    frame #1076: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfed3850, pExRecord=0x00007ff7bfed37b8) at machexception.cpp:387:29 [opt]\n    frame #1077: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfed3850, pExRecord=0x00007ff7bfed37b8, pMachExceptionInfo=0x00007ff7bfed2d10) at machexception.cpp:430:5 [opt]\n    frame #1078: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1079: 0x0000000102b600b2\n    frame #1080: 0x0000000102e1a113\n    frame #1081: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1082: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1083: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1084: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfed7e80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1085: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfed7e80) at seh.cpp:266:21 [opt]\n    frame #1086: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfed9f90, pExRecord=0x00007ff7bfed9ef8) at machexception.cpp:387:29 [opt]\n    frame #1087: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfed9f90, pExRecord=0x00007ff7bfed9ef8, pMachExceptionInfo=0x00007ff7bfed9450) at machexception.cpp:430:5 [opt]\n    frame #1088: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1089: 0x0000000102b600b2\n    frame #1090: 0x0000000102e1a113\n    frame #1091: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1092: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1093: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1094: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfede5c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1095: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfede5c0) at seh.cpp:266:21 [opt]\n    frame #1096: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfee06d0, pExRecord=0x00007ff7bfee0638) at machexception.cpp:387:29 [opt]\n    frame #1097: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfee06d0, pExRecord=0x00007ff7bfee0638, pMachExceptionInfo=0x00007ff7bfedfb90) at machexception.cpp:430:5 [opt]\n    frame #1098: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1099: 0x0000000102b600b2\n    frame #1100: 0x0000000102e1a113\n    frame #1101: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1102: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1103: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1104: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfee4d00) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1105: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfee4d00) at seh.cpp:266:21 [opt]\n    frame #1106: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfee6e10, pExRecord=0x00007ff7bfee6d78) at machexception.cpp:387:29 [opt]\n    frame #1107: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfee6e10, pExRecord=0x00007ff7bfee6d78, pMachExceptionInfo=0x00007ff7bfee62d0) at machexception.cpp:430:5 [opt]\n    frame #1108: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1109: 0x0000000102b600b2\n    frame #1110: 0x0000000102e1a113\n    frame #1111: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1112: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1113: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1114: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfeeb440) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1115: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfeeb440) at seh.cpp:266:21 [opt]\n    frame #1116: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfeed550, pExRecord=0x00007ff7bfeed4b8) at machexception.cpp:387:29 [opt]\n    frame #1117: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfeed550, pExRecord=0x00007ff7bfeed4b8, pMachExceptionInfo=0x00007ff7bfeeca10) at machexception.cpp:430:5 [opt]\n    frame #1118: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1119: 0x0000000102b600b2\n    frame #1120: 0x0000000102e1a113\n    frame #1121: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1122: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1123: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1124: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfef1b80) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1125: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfef1b80) at seh.cpp:266:21 [opt]\n    frame #1126: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfef3c90, pExRecord=0x00007ff7bfef3bf8) at machexception.cpp:387:29 [opt]\n    frame #1127: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfef3c90, pExRecord=0x00007ff7bfef3bf8, pMachExceptionInfo=0x00007ff7bfef3150) at machexception.cpp:430:5 [opt]\n    frame #1128: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1129: 0x0000000102b600b2\n    frame #1130: 0x0000000102e1a113\n    frame #1131: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1132: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1133: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1134: 0x0000000101e6b240 libcoreclr.dylib`HandleHardwareException(ex=0x00007ff7bfef82c0) at exceptionhandling.cpp:1513:9 [opt]\n    frame #1135: 0x0000000101f34fbc libcoreclr.dylib`SEHProcessException(exception=0x00007ff7bfef82c0) at seh.cpp:266:21 [opt]\n    frame #1136: 0x0000000101f60fa8 libcoreclr.dylib`PAL_DispatchExceptionInner(pContext=0x00007ff7bfefa3d0, pExRecord=0x00007ff7bfefa338) at machexception.cpp:387:29 [opt]\n    frame #1137: 0x0000000101f60f0e libcoreclr.dylib`PAL_DispatchException(dwRDI=\u003cunavailable\u003e, dwRSI=\u003cunavailable\u003e, dwRDX=\u003cunavailable\u003e, dwRCX=\u003cunavailable\u003e, dwR8=\u003cunavailable\u003e, dwR9=\u003cunavailable\u003e, pContext=0x00007ff7bfefa3d0, pExRecord=0x00007ff7bfefa338, pMachExceptionInfo=0x00007ff7bfef9890) at machexception.cpp:430:5 [opt]\n    frame #1138: 0x0000000101f60bda libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\n    frame #1139: 0x0000000102b600b2\n    frame #1140: 0x00000001091d7f94\n    frame #1141: 0x00000001091d6281\n    frame #1142: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1143: 0x0000000101da001a libcoreclr.dylib`DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) at callhelpers.cpp:59:5 [opt]\n    frame #1144: 0x0000000101d9ffca libcoreclr.dylib`DispatchCallSimple(pSrc=\u003cunavailable\u003e, numStackSlotsToCopy=\u003cunavailable\u003e, pTargetAddress=\u003cunavailable\u003e, dwDispatchCallSimpleFlags=0) at callhelpers.cpp:239:9 [opt]\n    frame #1145: 0x0000000101e50fd9 libcoreclr.dylib`GetTypeHelper(szTypeName=\u003cunavailable\u003e, pRequestingAssembly=0x000060000153c060, bThrowIfNotFound=YES, bRequireAssemblyQualifiedName=NO, unsafeAccessorMethod=0x0000000000000000) at typeparse.cpp:43:5 [opt]\n    frame #1146: 0x0000000101e50e43 libcoreclr.dylib`TypeName::GetTypeReferencedByCustomAttribute(szTypeName=\u003cunavailable\u003e, pRequestingAssembly=0x000060000153c060) at typeparse.cpp:59:12 [opt]\n    frame #1147: 0x0000000101dbcdf7 libcoreclr.dylib`GetTypeHandleFromBlob(pCtorAssembly=\u003cunavailable\u003e, objType=SERIALIZATION_TYPE_TYPE, pBlob=0x00007ff7bfefb7e8, endBlob=\"\\x81\\x84\\U00000001\", pModule=0x0000000103caf558) at customattribute.cpp:451:22 [opt]\n    frame #1148: 0x0000000101dbb864 libcoreclr.dylib`GetDataFromBlob(pCtorAssembly=\u003cunavailable\u003e, type=SERIALIZATION_TYPE_TYPE, th=TypeHandle @ 0x00007ff7bfefb698, pBlob=0x00007ff7bfefb7e8, endBlob=\"\\x81\\x84\\U00000001\", pModule=0x0000000103caf558, bObjectCreated=NO) at customattribute.cpp:766:19 [opt]\n    frame #1149: 0x0000000101dbc2ba libcoreclr.dylib`ReadArray(pCtorAssembly=\u003cunavailable\u003e, arrayType=SERIALIZATION_TYPE_TYPE, size=3, th=TypeHandle @ 0x00007ff7bfefb708, pBlob=0x00007ff7bfefb7e8, endBlob=\"\\x81\\x84\\U00000001\", pModule=0x0000000103caf558) at customattribute.cpp:599:23 [opt]\n    frame #1150: 0x0000000101dbbf24 libcoreclr.dylib`CustomAttribute_CreatePropertyOrFieldData(pModule=ModuleHandle @ 0x000060000372fef0, ppBlobStart=0x00007ff7bfefbb08, pBlobEnd=\"\\x81\\x84\\U00000001\", pName=\u003cunavailable\u003e, pbIsProperty=\u003cunavailable\u003e, pType=ObjectHandleOnStack @ 0x00007ff7bfefb830, pValue=ObjectHandleOnStack @ 0x00007ff7bfefb838) at customattribute.cpp:1134:28 [opt]\n    frame #1151: 0x00000001091d1e2a\n    frame #1152: 0x00000001091c541b\n    frame #1153: 0x00000001091c8f86\n    frame #1154: 0x0000000103c401eb\n    frame #1155: 0x0000000103c3e8e5\n    frame #1156: 0x0000000103c3e801\n    frame #1157: 0x0000000103c3e83e\n    frame #1158: 0x00000001091f6c0d\n    frame #1159: 0x00000001091f65b6\n    frame #1160: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1161: 0x0000000101d9fd8b libcoreclr.dylib`CallDescrWorkerWithHandler(pCallDescrData=0x00007ff7bfefc170, fCriticalCall=\u003cunavailable\u003e) at callhelpers.cpp:59:5 [opt]\n    frame #1162: 0x0000000101e31413 libcoreclr.dylib`RuntimeMethodHandle_InvokeMethod(target=\u003cunavailable\u003e, args=0x0000000000000000, pSig=\u003cunavailable\u003e, fConstructor=NO, result=ObjectHandleOnStack @ 0x00007ff7bfefc218) at reflectioninvocation.cpp:599:5 [opt]\n    frame #1163: 0x0000000102e50dd6\n    frame #1164: 0x00000001091db553\n    frame #1165: 0x0000000103c38173\n    frame #1166: 0x0000000103c380fc\n    frame #1167: 0x0000000103c3809d\n    frame #1168: 0x0000000103c37fe3\n    frame #1169: 0x0000000103c37e2a\n    frame #1170: 0x0000000103c36d15\n    frame #1171: 0x0000000103c31e68\n    frame #1172: 0x0000000103c319c8\n    frame #1173: 0x0000000103c3135b\n    frame #1174: 0x0000000103c34e1f\n    frame #1175: 0x0000000103c33103\n    frame #1176: 0x0000000103c31e68\n    frame #1177: 0x0000000103c319c8\n    frame #1178: 0x0000000103c3135b\n    frame #1179: 0x0000000103c34e1f\n    frame #1180: 0x0000000103c33103\n    frame #1181: 0x0000000103c31e68\n    frame #1182: 0x0000000103c319c8\n    frame #1183: 0x0000000103c3135b\n    frame #1184: 0x0000000103c34e1f\n    frame #1185: 0x0000000103c33103\n    frame #1186: 0x0000000103c31e68\n    frame #1187: 0x0000000103c319c8\n    frame #1188: 0x0000000103c3135b\n    frame #1189: 0x0000000103c31310\n    frame #1190: 0x0000000103c30ebb\n    frame #1191: 0x0000000103c30bc4\n    frame #1192: 0x0000000103c13541\n    frame #1193: 0x0000000103c2ddae\n    frame #1194: 0x0000000103c2db68\n    frame #1195: 0x0000000103c2d7d2\n    frame #1196: 0x0000000103c2491d\n    frame #1197: 0x0000000103c24841\n    frame #1198: 0x0000000103c11d2a\n    frame #1199: 0x00000001031e1b0c\n    frame #1200: 0x0000000103c11b61\n    frame #1201: 0x0000000103c11a77\n    frame #1202: 0x0000000103c0b547\n    frame #1203: 0x00000001031e1b0c\n    frame #1204: 0x0000000103c0b2cb\n    frame #1205: 0x0000000103c0b1ef\n    frame #1206: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1207: 0x0000000101d9fd8b libcoreclr.dylib`CallDescrWorkerWithHandler(pCallDescrData=0x00007ff7bfefd970, fCriticalCall=\u003cunavailable\u003e) at callhelpers.cpp:59:5 [opt]\n    frame #1208: 0x0000000101e31413 libcoreclr.dylib`RuntimeMethodHandle_InvokeMethod(target=\u003cunavailable\u003e, args=0x0000000000000000, pSig=\u003cunavailable\u003e, fConstructor=NO, result=ObjectHandleOnStack @ 0x00007ff7bfefda18) at reflectioninvocation.cpp:599:5 [opt]\n    frame #1209: 0x0000000102e50dd6\n    frame #1210: 0x0000000102e50e9a\n    frame #1211: 0x0000000102e63f5a\n    frame #1212: 0x0000000103c0a985\n    frame #1213: 0x0000000103c09c2f\n    frame #1214: 0x00000001000173a4 introspection`xamarin_bridge_runtime_invoke_method + 132\n    frame #1215: 0x000000010002726b introspection`mono_runtime_invoke + 75\n    frame #1216: 0x000000010006f65d introspection`native_to_managed_trampoline_25(objc_object*, objc_selector*, _MonoObject**, unsigned int) + 237\n    frame #1217: 0x000000010006f7e9 introspection`-[__MonoMac_NSActionDispatcher xamarinApplySelector] + 41\n    frame #1218: 0x00007ff81971d704 Foundation`-[NSObject(NSThreadPerformAdditions) performSelector:onThread:withObject:waitUntilDone:modes:] + 373\n    frame #1219: 0x00007ff81971d42f Foundation`-[NSObject(NSThreadPerformAdditions) performSelectorOnMainThread:withObject:waitUntilDone:] + 121\n    frame #1220: 0x000000010002bfc9 introspection`xamarin_dyn_objc_msgSend + 217\n    frame #1221: 0x0000000103c08dd1\n    frame #1222: 0x0000000103c08b02\n    frame #1223: 0x0000000103bf9bda\n    frame #1224: 0x00000001031e1b0c\n    frame #1225: 0x0000000103bf9091\n    frame #1226: 0x0000000103bf9939\n    frame #1227: 0x0000000103bf937e\n    frame #1228: 0x00000001031e1b0c\n    frame #1229: 0x0000000103bf9091\n    frame #1230: 0x0000000103bf8fa2\n    frame #1231: 0x0000000103bf8ea6\n    frame #1232: 0x0000000101f1adac libcoreclr.dylib`CallDescrWorkerInternal + 124\n    frame #1233: 0x0000000101da0664 libcoreclr.dylib`MethodDescCallSite::CallTargetWorker(unsigned long long const*, unsigned long long*, int) at callhelpers.cpp:59:5 [opt]\n    frame #1234: 0x0000000101da0615 libcoreclr.dylib`MethodDescCallSite::CallTargetWorker(this=\u003cunavailable\u003e, pArguments=0x00007ff7bfefebc0, pReturnValue=0x00007ff7bfefeb88, cbReturnValue=8) at callhelpers.cpp:546:5 [opt]\n    frame #1235: 0x0000000101c9bb46 libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) [inlined] MethodDescCallSite::Call_RetArgSlot(this=0x00007ff7bfefea28, pArguments=0x00007ff7bfefebc0) at callhelpers.h:446:9 [opt]\n    frame #1236: 0x0000000101c9bb3c libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) at assembly.cpp:1216:48 [opt]\n    frame #1237: 0x0000000101c9b9dd libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) [inlined] RunMain(this=\u003cunavailable\u003e, pParam=0x00007ff7bfefeb30)::$_0::operator()(Param*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at assembly.cpp:1281:9 [opt]\n    frame #1238: 0x0000000101c9b9dd libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) at assembly.cpp:1283:5 [opt]\n    frame #1239: 0x0000000101c9b9d0 libcoreclr.dylib`RunMain(pFD=0x00000001042e1f38, numSkipArgs=1, piRetVal=0x00007ff7bfefec5c, stringArgs=0x00007ff7bfefef28) at assembly.cpp:1283:5 [opt]\n    frame #1240: 0x0000000101c9bf16 libcoreclr.dylib`Assembly::ExecuteMainMethod(this=0x0000600001538c60, stringArgs=0x00007ff7bfefef28, waitForOtherThreads=YES) at assembly.cpp:1409:18 [opt]\n    frame #1241: 0x0000000101cc115c libcoreclr.dylib`CorHost2::ExecuteAssembly(this=\u003cunavailable\u003e, dwAppDomainId=\u003cunavailable\u003e, pwzAssemblyPath=\u003cunavailable\u003e, argc=0, argv=0x0000000000000000, pReturnValue=0x00007ff7bfeff074) at corhost.cpp:349:39 [opt]\n    frame #1242: 0x0000000101b56f72 libcoreclr.dylib`coreclr_execute_assembly(hostHandle=\u003cunavailable\u003e, domainId=1, argc=0, argv=\u003cunavailable\u003e, managedAssemblyPath=\u003cunavailable\u003e, exitCode=0x00007ff7bfeff074) at exports.cpp:491:24 [opt]\n    frame #1243: 0x0000000100026fd9 introspection`mono_jit_exec + 153\n    frame #1244: 0x000000010002a8d6 introspection`xamarin_main + 694\n    frame #1245: 0x00000001000c45f4 introspection`main + 52\n    frame #1246: 0x00007ff818314345 dyld`start + 1909\n```",
                                           "updatedAt":  "2025-08-28T15:40:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Aw8ek",
                                           "createdAt":  "2025-08-28T15:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "here\u0027s ExInfo from FailFastIfCorruptingStateException\n\n```\n(lldb) p *pExInfo\n(ExInfo) {\n  m_pPrevNestedInfo = 0x00007ff7bfc285e0\n  m_hThrowable = 0x0000000100511320\n  m_ptrs = {\n    ExceptionRecord = 0x00007fc1401c02a0\n    ContextRecord = 0x00007fc1401bf600\n  }\n  m_EHClauseInfo = {\n    m_IPForEHClause = 0\n    m_sfForEHClause = (SP = 0)\n    m_csfEHClause = {\n      StackFrame = (SP = 0)\n    }\n    m_ClauseType = COR_PRF_CLAUSE_NONE\n    m_fManagedCodeEntered = NO\n  }\n  m_ExceptionFlags = (m_flags = 1024)\n  m_fDeliveredFirstChanceNotification = NO\n  m_ExceptionCode = 3221225501\n  m_DebuggerExState = {\n    m_sfDebuggerIndicatedFramePointer = (SP = 0)\n    m_pDebuggerInterceptFunc = nullptr\n    m_sfDebuggerInterceptFramePointer = (SP = 0)\n    m_pDebuggerContext = 0x0000000000000000\n    m_pDebuggerInterceptNativeOffset = 0\n    m_dDebuggerInterceptHandlerDepth = 0\n  }\n  m_ScannedStackRange = {\n    m_sfLowBound = (SP = 18446744073709551615)\n    m_sfHighBound = (SP = 0)\n  }\n  m_padding = \"\"\n  m_pExContext = 0x00007ff7bfc22130\n  m_exception = 0x000000018279b660\n  m_kind = HardwareFault | InstructionFaultFlag\n  m_passNumber = \u0027\\x01\u0027\n  m_idxCurClause = 4294967295\n  m_frameIter = {\n    m_crawl = {\n      isFrameless = false\n      isFirst = true\n      isInterrupted = false\n      hasFaulted = false\n      isIPadjusted = false\n      isNativeMarker = false\n      isProfilerDoStackSnapshot = false\n      isNoFrameTransition = false\n      taNoFrameTransitionMarker = 0\n      pFrame = 0x00007ff7bfc24970\n      pFunc = nullptr\n      pRD = 0x00007ff7bfc22dd0\n      codeInfo = {\n        m_codeAddress = 0\n        m_methodToken = {\n          m_pRangeSection = nullptr\n          m_pCodeHeader = 0\n        }\n        m_pMD = nullptr\n        m_pJM = nullptr\n        m_relOffset = 0\n        m_isFuncletCache = NotSet\n        m_pFunctionEntry = nullptr\n      }\n      isFilterFunclet = false\n      isFilterFuncletCached = false\n      fShouldParentToFuncletSkipReportingGCReferences = false\n      fShouldCrawlframeReportGCReferences = true\n      fShouldParentFrameUseUnwindTargetPCforGCReporting = false\n      fShouldSaveFuncletInfo = false\n      fShouldParentToFuncletReportSavedFuncletSlots = false\n      ehClauseForCatch = {\n        Flags = COR_ILEXCEPTION_CLAUSE_NONE\n        TryStartPC = 0\n        TryEndPC = 0\n        HandlerStartPC = 0\n        HandlerEndPC = 0\n         = (TypeHandle = 0x0000000000000000, ClassToken = 0, FilterOffset = 0)\n      }\n      pThread = 0x00007fc13ff128f0\n      pCurGSCookie = 0x0000000000000000\n      pFirstGSCookie = 0x0000000000000000\n    }\n    m_frameState = SFITER_FRAME_FUNCTION\n    m_pThread = 0x00007fc13ff128f0\n    m_pStartFrame = 0x00007ff7bfc24970\n    m_flags = 133184\n    m_codeManFlags = UpdateAllRegs\n    m_scanFlag = ScanReaderLock\n    m_cachedCodeInfo = {\n      m_codeAddress = 0\n      m_methodToken = {\n        m_pRangeSection = nullptr\n        m_pCodeHeader = 0\n      }\n      m_pMD = nullptr\n      m_pJM = nullptr\n      m_relOffset = 0\n      m_isFuncletCache = NotSet\n      m_pFunctionEntry = nullptr\n    }\n    m_pCachedGSCookie = 0x0000000000000000\n    m_sfParent = (SP = 0)\n    m_sfFuncletParent = (SP = 0)\n    m_fProcessNonFilterFunclet = false\n    m_sfIntermediaryFuncletParent = (SP = 0)\n    m_fProcessIntermediaryNonFilterFunclet = false\n    m_fDidFuncletReportGCReferences = true\n    m_isRuntimeWrappedExceptions = false\n    m_forceReportingWhileSkipping = Off\n    m_movedPastFirstExInfo = false\n    m_fFuncletNotSeen = false\n    m_fFoundFirstFunclet = false\n    m_pvResumableFrameTargetSP = 0x0000000000000000\n    m_pNextExInfo = 0x00007ff7bfc21ea0\n    m_AdjustedControlPC = 0\n  }\n  m_notifyDebuggerSP = 0\n  m_pFrame = 0x00007ff7bfc24970\n  m_csfEHClause = {\n    StackFrame = (SP = 0)\n  }\n  m_csfEnclosingClause = {\n    StackFrame = (SP = 0)\n  }\n  m_sfCallerOfActualHandlerFrame = (SP = 0)\n  m_ClauseForCatch = {\n    Flags = COR_ILEXCEPTION_CLAUSE_NONE\n    TryStartPC = 0\n    TryEndPC = 0\n    HandlerStartPC = 0\n    HandlerEndPC = 0\n     = (TypeHandle = 0x0000000000000000, ClassToken = 0, FilterOffset = 0)\n  }\n  m_fOwnsExceptionPointers = YES\n  m_propagateExceptionCallback = 0x0000000000000000\n  m_propagateExceptionContext = 0x0000000000000000\n  m_CurrentClause = {\n    Flags = COR_ILEXCEPTION_CLAUSE_NONE\n    TryStartPC = 0\n    TryEndPC = 0\n    HandlerStartPC = 0\n    HandlerEndPC = 0\n     = (TypeHandle = 0x0000000000000000, ClassToken = 0, FilterOffset = 0)\n  }\n  m_pMDToReportFunctionLeave = nullptr\n  m_exContext = {\n    P1Home = 0\n    P2Home = 0\n    P3Home = 0\n    P4Home = 0\n    P5Home = 0\n    P6Home = 0\n    ContextFlags = 1048587\n    MxCsr = 0\n    SegCs = 0\n    SegDs = 0\n    SegEs = 0\n    SegFs = 0\n    SegGs = 0\n    SegSs = 0\n    EFlags = 0\n    Dr0 = 0\n    Dr1 = 0\n    Dr2 = 0\n    Dr3 = 0\n    Dr6 = 0\n    Dr7 = 0\n    Rax = 0\n    Rcx = 0\n    Rdx = 0\n    Rbx = 0\n    Rsp = 0\n    Rbp = 0\n    Rsi = 0\n    Rdi = 0\n    R8 = 0\n    R9 = 0\n    R10 = 0\n    R11 = 0\n    R12 = 0\n    R13 = 0\n    R14 = 0\n    R15 = 0\n    Rip = 0\n     = {\n      FltSave = {\n        ControlWord = 0\n        StatusWord = 0\n        TagWord = \u0027\\0\u0027\n        Reserved1 = \u0027\\0\u0027\n        ErrorOpcode = 0\n        ErrorOffset = 0\n        ErrorSelector = 0\n        Reserved2 = 0\n        DataOffset = 0\n        DataSelector = 0\n        Reserved3 = 0\n        MxCsr = 0\n        MxCsr_Mask = 0\n        FloatRegisters = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n          [2] = (Low = 0, High = 0)\n          [3] = (Low = 0, High = 0)\n          [4] = (Low = 0, High = 0)\n          [5] = (Low = 0, High = 0)\n          [6] = (Low = 0, High = 0)\n          [7] = (Low = 0, High = 0)\n        }\n        XmmRegisters = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n          [2] = (Low = 0, High = 0)\n          [3] = (Low = 0, High = 0)\n          [4] = (Low = 0, High = 0)\n          [5] = (Low = 0, High = 0)\n          [6] = (Low = 0, High = 0)\n          [7] = (Low = 0, High = 0)\n          [8] = (Low = 0, High = 0)\n          [9] = (Low = 0, High = 0)\n          [10] = (Low = 0, High = 0)\n          [11] = (Low = 0, High = 0)\n          [12] = (Low = 0, High = 0)\n          [13] = (Low = 0, High = 0)\n          [14] = (Low = 0, High = 0)\n          [15] = (Low = 0, High = 0)\n        }\n        Reserved4 = \"\"\n      }\n       = {\n        Header = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n        }\n        Legacy = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n          [2] = (Low = 0, High = 0)\n          [3] = (Low = 0, High = 0)\n          [4] = (Low = 0, High = 0)\n          [5] = (Low = 0, High = 0)\n          [6] = (Low = 0, High = 0)\n          [7] = (Low = 0, High = 0)\n        }\n        Xmm0 = (Low = 0, High = 0)\n        Xmm1 = (Low = 0, High = 0)\n        Xmm2 = (Low = 0, High = 0)\n        Xmm3 = (Low = 0, High = 0)\n        Xmm4 = (Low = 0, High = 0)\n        Xmm5 = (Low = 0, High = 0)\n        Xmm6 = (Low = 0, High = 0)\n        Xmm7 = (Low = 0, High = 0)\n        Xmm8 = (Low = 0, High = 0)\n        Xmm9 = (Low = 0, High = 0)\n        Xmm10 = (Low = 0, High = 0)\n        Xmm11 = (Low = 0, High = 0)\n        Xmm12 = (Low = 0, High = 0)\n        Xmm13 = (Low = 0, High = 0)\n        Xmm14 = (Low = 0, High = 0)\n        Xmm15 = (Low = 0, High = 0)\n      }\n    }\n    VectorRegister = {\n      [0] = (Low = 0, High = 0)\n      [1] = (Low = 0, High = 0)\n      [2] = (Low = 0, High = 0)\n      [3] = (Low = 0, High = 0)\n      [4] = (Low = 0, High = 0)\n      [5] = (Low = 0, High = 0)\n      [6] = (Low = 0, High = 0)\n      [7] = (Low = 0, High = 0)\n      [8] = (Low = 0, High = 0)\n      [9] = (Low = 0, High = 0)\n      [10] = (Low = 0, High = 0)\n      [11] = (Low = 0, High = 0)\n      [12] = (Low = 0, High = 0)\n      [13] = (Low = 0, High = 0)\n      [14] = (Low = 0, High = 0)\n      [15] = (Low = 0, High = 0)\n      [16] = (Low = 0, High = 0)\n      [17] = (Low = 0, High = 0)\n      [18] = (Low = 0, High = 0)\n      [19] = (Low = 0, High = 0)\n      [20] = (Low = 0, High = 0)\n      [21] = (Low = 0, High = 0)\n      [22] = (Low = 0, High = 0)\n      [23] = (Low = 0, High = 0)\n      [24] = (Low = 0, High = 0)\n      [25] = (Low = 0, High = 0)\n    }\n    VectorControl = 0\n    DebugControl = 0\n    LastBranchToRip = 0\n    LastBranchFromRip = 0\n    LastExceptionToRip = 0\n    LastExceptionFromRip = 0\n    XStateFeaturesMask = 0\n    XStateReserved0 = 0\n     = {\n      Ymm0H = (Low = 0, High = 0)\n      Ymm1H = (Low = 0, High = 0)\n      Ymm2H = (Low = 0, High = 0)\n      Ymm3H = (Low = 0, High = 0)\n      Ymm4H = (Low = 0, High = 0)\n      Ymm5H = (Low = 0, High = 0)\n      Ymm6H = (Low = 0, High = 0)\n      Ymm7H = (Low = 0, High = 0)\n      Ymm8H = (Low = 0, High = 0)\n      Ymm9H = (Low = 0, High = 0)\n      Ymm10H = (Low = 0, High = 0)\n      Ymm11H = (Low = 0, High = 0)\n      Ymm12H = (Low = 0, High = 0)\n      Ymm13H = (Low = 0, High = 0)\n      Ymm14H = (Low = 0, High = 0)\n      Ymm15H = (Low = 0, High = 0)\n    }\n     = (KMask0 = 0, KMask1 = 0, KMask2 = 0, KMask3 = 0, KMask4 = 0, KMask5 = 0, KMask6 = 0, KMask7 = 0)\n     = {\n      Zmm0H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm1H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm2H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm3H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm4H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm5H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm6H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm7H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm8H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm9H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm10H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm11H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm12H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm13H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm14H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n      Zmm15H = {\n        Low = (Low = 0, High = 0)\n        High = (Low = 0, High = 0)\n      }\n    }\n     = {\n      Zmm16 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm17 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm18 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm19 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm20 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm21 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm22 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm23 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm24 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm25 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm26 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm27 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm28 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm29 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm30 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n      Zmm31 = {\n        Low = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n        High = {\n          Low = (Low = 0, High = 0)\n          High = (Low = 0, High = 0)\n        }\n      }\n    }\n     = (R16 = 0, R17 = 0, R18 = 0, R19 = 0, R20 = 0, R21 = 0, R22 = 0, R23 = 0, R24 = 0, R25 = 0, R26 = 0, R27 = 0, R28 = 0, R29 = 0, R30 = 0, R31 = 0)\n  }\n  m_regDisplay = {\n    REGDISPLAY_BASE = {\n      pContext = 0x00007ff7bfc22130\n      pCurrentContext = 0x00007ff7bfc22e00\n      pCallerContext = 0x00007ff7bfc23aa0\n      pCurrentContextPointers = 0x00007ff7bfc24740\n      pCallerContextPointers = 0x00007ff7bfc24840\n      IsCallerContextValid = NO\n      IsCallerSPValid = NO\n      ctxOne = {\n        P1Home = 0\n        P2Home = 0\n        P3Home = 0\n        P4Home = 0\n        P5Home = 0\n        P6Home = 0\n        ContextFlags = 1048587\n        MxCsr = 0\n        SegCs = 0\n        SegDs = 0\n        SegEs = 0\n        SegFs = 0\n        SegGs = 0\n        SegSs = 0\n        EFlags = 0\n        Dr0 = 0\n        Dr1 = 0\n        Dr2 = 0\n        Dr3 = 0\n        Dr6 = 0\n        Dr7 = 0\n        Rax = 0\n        Rcx = 0\n        Rdx = 0\n        Rbx = 0\n        Rsp = 0\n        Rbp = 0\n        Rsi = 0\n        Rdi = 0\n        R8 = 0\n        R9 = 0\n        R10 = 0\n        R11 = 0\n        R12 = 0\n        R13 = 0\n        R14 = 0\n        R15 = 0\n        Rip = 0\n         = {\n          FltSave = {\n            ControlWord = 0\n            StatusWord = 0\n            TagWord = \u0027\\0\u0027\n            Reserved1 = \u0027\\0\u0027\n            ErrorOpcode = 0\n            ErrorOffset = 0\n            ErrorSelector = 0\n            Reserved2 = 0\n            DataOffset = 0\n            DataSelector = 0\n            Reserved3 = 0\n            MxCsr = 0\n            MxCsr_Mask = 0\n            FloatRegisters ={...}\n            XmmRegisters ={...}\n            Reserved4 = \"\"{...}\n          }\n           = {\n            Header ={...}\n            Legacy ={...}\n            Xmm0 ={...}\n            Xmm1 ={...}\n            Xmm2 ={...}\n            Xmm3 ={...}\n            Xmm4 ={...}\n            Xmm5 ={...}\n            Xmm6 ={...}\n            Xmm7 ={...}\n            Xmm8 ={...}\n            Xmm9 ={...}\n            Xmm10 ={...}\n            Xmm11 ={...}\n            Xmm12 ={...}\n            Xmm13 ={...}\n            Xmm14 ={...}\n            Xmm15 ={...}\n          }\n        }\n        VectorRegister = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n          [2] = (Low = 0, High = 0)\n          [3] = (Low = 0, High = 0)\n          [4] = (Low = 0, High = 0)\n          [5] = (Low = 0, High = 0)\n          [6] = (Low = 0, High = 0)\n          [7] = (Low = 0, High = 0)\n          [8] = (Low = 0, High = 0)\n          [9] = (Low = 0, High = 0)\n          [10] = (Low = 0, High = 0)\n          [11] = (Low = 0, High = 0)\n          [12] = (Low = 0, High = 0)\n          [13] = (Low = 0, High = 0)\n          [14] = (Low = 0, High = 0)\n          [15] = (Low = 0, High = 0)\n          [16] = (Low = 0, High = 0)\n          [17] = (Low = 0, High = 0)\n          [18] = (Low = 0, High = 0)\n          [19] = (Low = 0, High = 0)\n          [20] = (Low = 0, High = 0)\n          [21] = (Low = 0, High = 0)\n          [22] = (Low = 0, High = 0)\n          [23] = (Low = 0, High = 0)\n          [24] = (Low = 0, High = 0)\n          [25] = (Low = 0, High = 0)\n        }\n        VectorControl = 0\n        DebugControl = 0\n        LastBranchToRip = 0\n        LastBranchFromRip = 0\n        LastExceptionToRip = 0\n        LastExceptionFromRip = 0\n        XStateFeaturesMask = 0\n        XStateReserved0 = 0\n         = {\n          Ymm0H = (Low = 0, High = 0)\n          Ymm1H = (Low = 0, High = 0)\n          Ymm2H = (Low = 0, High = 0)\n          Ymm3H = (Low = 0, High = 0)\n          Ymm4H = (Low = 0, High = 0)\n          Ymm5H = (Low = 0, High = 0)\n          Ymm6H = (Low = 0, High = 0)\n          Ymm7H = (Low = 0, High = 0)\n          Ymm8H = (Low = 0, High = 0)\n          Ymm9H = (Low = 0, High = 0)\n          Ymm10H = (Low = 0, High = 0)\n          Ymm11H = (Low = 0, High = 0)\n          Ymm12H = (Low = 0, High = 0)\n          Ymm13H = (Low = 0, High = 0)\n          Ymm14H = (Low = 0, High = 0)\n          Ymm15H = (Low = 0, High = 0)\n        }\n         = (KMask0 = 0, KMask1 = 0, KMask2 = 0, KMask3 = 0, KMask4 = 0, KMask5 = 0, KMask6 = 0, KMask7 = 0)\n         = {\n          Zmm0H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm1H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm2H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm3H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm4H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm5H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm6H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm7H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm8H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm9H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm10H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm11H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm12H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm13H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm14H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm15H = {\n            Low ={...}\n            High ={...}\n          }\n        }\n         = {\n          Zmm16 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm17 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm18 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm19 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm20 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm21 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm22 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm23 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm24 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm25 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm26 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm27 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm28 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm29 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm30 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm31 = {\n            Low ={...}\n            High ={...}\n          }\n        }\n         = (R16 = 0, R17 = 0, R18 = 0, R19 = 0, R20 = 0, R21 = 0, R22 = 0, R23 = 0, R24 = 0, R25 = 0, R26 = 0, R27 = 0, R28 = 0, R29 = 0, R30 = 0, R31 = 0)\n      }\n      ctxTwo = {\n        P1Home = 0\n        P2Home = 0\n        P3Home = 0\n        P4Home = 0\n        P5Home = 0\n        P6Home = 0\n        ContextFlags = 0\n        MxCsr = 0\n        SegCs = 0\n        SegDs = 0\n        SegEs = 0\n        SegFs = 0\n        SegGs = 0\n        SegSs = 0\n        EFlags = 0\n        Dr0 = 0\n        Dr1 = 0\n        Dr2 = 0\n        Dr3 = 0\n        Dr6 = 0\n        Dr7 = 0\n        Rax = 0\n        Rcx = 0\n        Rdx = 0\n        Rbx = 0\n        Rsp = 0\n        Rbp = 0\n        Rsi = 0\n        Rdi = 0\n        R8 = 0\n        R9 = 0\n        R10 = 0\n        R11 = 0\n        R12 = 0\n        R13 = 0\n        R14 = 0\n        R15 = 0\n        Rip = 0\n         = {\n          FltSave = {\n            ControlWord = 0\n            StatusWord = 0\n            TagWord = \u0027\\0\u0027\n            Reserved1 = \u0027\\0\u0027\n            ErrorOpcode = 0\n            ErrorOffset = 0\n            ErrorSelector = 0\n            Reserved2 = 0\n            DataOffset = 0\n            DataSelector = 0\n            Reserved3 = 0\n            MxCsr = 0\n            MxCsr_Mask = 0\n            FloatRegisters ={...}\n            XmmRegisters ={...}\n            Reserved4 = \"\"{...}\n          }\n           = {\n            Header ={...}\n            Legacy ={...}\n            Xmm0 ={...}\n            Xmm1 ={...}\n            Xmm2 ={...}\n            Xmm3 ={...}\n            Xmm4 ={...}\n            Xmm5 ={...}\n            Xmm6 ={...}\n            Xmm7 ={...}\n            Xmm8 ={...}\n            Xmm9 ={...}\n            Xmm10 ={...}\n            Xmm11 ={...}\n            Xmm12 ={...}\n            Xmm13 ={...}\n            Xmm14 ={...}\n            Xmm15 ={...}\n          }\n        }\n        VectorRegister = {\n          [0] = (Low = 0, High = 0)\n          [1] = (Low = 0, High = 0)\n          [2] = (Low = 0, High = 0)\n          [3] = (Low = 0, High = 0)\n          [4] = (Low = 0, High = 0)\n          [5] = (Low = 0, High = 0)\n          [6] = (Low = 0, High = 0)\n          [7] = (Low = 0, High = 0)\n          [8] = (Low = 0, High = 0)\n          [9] = (Low = 0, High = 0)\n          [10] = (Low = 0, High = 0)\n          [11] = (Low = 0, High = 0)\n          [12] = (Low = 0, High = 0)\n          [13] = (Low = 0, High = 0)\n          [14] = (Low = 0, High = 0)\n          [15] = (Low = 0, High = 0)\n          [16] = (Low = 0, High = 0)\n          [17] = (Low = 0, High = 0)\n          [18] = (Low = 0, High = 0)\n          [19] = (Low = 0, High = 0)\n          [20] = (Low = 0, High = 0)\n          [21] = (Low = 0, High = 0)\n          [22] = (Low = 0, High = 0)\n          [23] = (Low = 0, High = 0)\n          [24] = (Low = 0, High = 0)\n          [25] = (Low = 0, High = 0)\n        }\n        VectorControl = 0\n        DebugControl = 0\n        LastBranchToRip = 0\n        LastBranchFromRip = 0\n        LastExceptionToRip = 0\n        LastExceptionFromRip = 0\n        XStateFeaturesMask = 0\n        XStateReserved0 = 0\n         = {\n          Ymm0H = (Low = 0, High = 0)\n          Ymm1H = (Low = 0, High = 0)\n          Ymm2H = (Low = 0, High = 0)\n          Ymm3H = (Low = 0, High = 0)\n          Ymm4H = (Low = 0, High = 0)\n          Ymm5H = (Low = 0, High = 0)\n          Ymm6H = (Low = 0, High = 0)\n          Ymm7H = (Low = 0, High = 0)\n          Ymm8H = (Low = 0, High = 0)\n          Ymm9H = (Low = 0, High = 0)\n          Ymm10H = (Low = 0, High = 0)\n          Ymm11H = (Low = 0, High = 0)\n          Ymm12H = (Low = 0, High = 0)\n          Ymm13H = (Low = 0, High = 0)\n          Ymm14H = (Low = 0, High = 0)\n          Ymm15H = (Low = 0, High = 0)\n        }\n         = (KMask0 = 0, KMask1 = 0, KMask2 = 0, KMask3 = 0, KMask4 = 0, KMask5 = 0, KMask6 = 0, KMask7 = 0)\n         = {\n          Zmm0H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm1H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm2H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm3H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm4H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm5H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm6H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm7H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm8H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm9H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm10H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm11H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm12H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm13H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm14H = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm15H = {\n            Low ={...}\n            High ={...}\n          }\n        }\n         = {\n          Zmm16 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm17 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm18 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm19 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm20 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm21 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm22 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm23 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm24 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm25 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm26 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm27 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm28 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm29 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm30 = {\n            Low ={...}\n            High ={...}\n          }\n          Zmm31 = {\n            Low ={...}\n            High ={...}\n          }\n        }\n         = (R16 = 0, R17 = 0, R18 = 0, R19 = 0, R20 = 0, R21 = 0, R22 = 0, R23 = 0, R24 = 0, R25 = 0, R26 = 0, R27 = 0, R28 = 0, R29 = 0, R30 = 0, R31 = 0)\n      }\n      ctxPtrsOne = {\n         = {\n          FloatingContext = {\n            [0] = nullptr{...}\n            [1] = nullptr{...}\n            [2] = nullptr{...}\n            [3] = nullptr{...}\n            [4] = nullptr{...}\n            [5] = nullptr{...}\n            [6] = nullptr{...}\n            [7] = nullptr{...}\n            [8] = nullptr{...}\n            [9] = nullptr{...}\n            [10] = nullptr{...}\n            [11] = nullptr{...}\n            [12] = nullptr{...}\n            [13] = nullptr{...}\n            [14] = nullptr{...}\n            [15] = nullptr{...}\n          }\n           = {\n            Xmm0 = nullptr{...}\n            Xmm1 = nullptr{...}\n            Xmm2 = nullptr{...}\n            Xmm3 = nullptr{...}\n            Xmm4 = nullptr{...}\n            Xmm5 = nullptr{...}\n            Xmm6 = nullptr{...}\n            Xmm7 = nullptr{...}\n            Xmm8 = nullptr{...}\n            Xmm9 = nullptr{...}\n            Xmm10 = nullptr{...}\n            Xmm11 = nullptr{...}\n            Xmm12 = nullptr{...}\n            Xmm13 = nullptr{...}\n            Xmm14 = nullptr{...}\n            Xmm15 = nullptr{...}\n          }\n        }\n         = {\n          IntegerContext = {\n            [0] = 0x00007ff7bfc221a8{...}\n            [1] = 0x00007ff7bfc221b0{...}\n            [2] = 0x00007ff7bfc221b8{...}\n            [3] = 0x00007ff7bfc221c0{...}\n            [4] = 0x00007ff7bfc221c8{...}\n            [5] = 0x00007ff7bfc221d0{...}\n            [6] = 0x00007ff7bfc221d8{...}\n            [7] = 0x00007ff7bfc221e0{...}\n            [8] = 0x00007ff7bfc221e8{...}\n            [9] = 0x00007ff7bfc221f0{...}\n            [10] = 0x00007ff7bfc221f8{...}\n            [11] = 0x00007ff7bfc22200{...}\n            [12] = 0x00007ff7bfc22208{...}\n            [13] = 0x00007ff7bfc22210{...}\n            [14] = 0x00007ff7bfc22218{...}\n            [15] = 0x00007ff7bfc22220{...}\n          }\n           = {\n            Rax = 0x00007ff7bfc221a8{...}\n            Rcx = 0x00007ff7bfc221b0{...}\n            Rdx = 0x00007ff7bfc221b8{...}\n            Rbx = 0x00007ff7bfc221c0{...}\n            Rsp = 0x00007ff7bfc221c8{...}\n            Rbp = 0x00007ff7bfc221d0{...}\n            Rsi = 0x00007ff7bfc221d8{...}\n            Rdi = 0x00007ff7bfc221e0{...}\n            R8 = 0x00007ff7bfc221e8{...}\n            R9 = 0x00007ff7bfc221f0{...}\n            R10 = 0x00007ff7bfc221f8{...}\n            R11 = 0x00007ff7bfc22200{...}\n            R12 = 0x00007ff7bfc22208{...}\n            R13 = 0x00007ff7bfc22210{...}\n            R14 = 0x00007ff7bfc22218{...}\n            R15 = 0x00007ff7bfc22220{...}\n          }\n        }\n      }\n      ctxPtrsTwo = {\n         = {\n          FloatingContext = {\n            [0] = nullptr{...}\n            [1] = nullptr{...}\n            [2] = nullptr{...}\n            [3] = nullptr{...}\n            [4] = nullptr{...}\n            [5] = nullptr{...}\n            [6] = nullptr{...}\n            [7] = nullptr{...}\n            [8] = nullptr{...}\n            [9] = nullptr{...}\n            [10] = nullptr{...}\n            [11] = nullptr{...}\n            [12] = nullptr{...}\n            [13] = nullptr{...}\n            [14] = nullptr{...}\n            [15] = nullptr{...}\n          }\n           = {\n            Xmm0 = nullptr{...}\n            Xmm1 = nullptr{...}\n            Xmm2 = nullptr{...}\n            Xmm3 = nullptr{...}\n            Xmm4 = nullptr{...}\n            Xmm5 = nullptr{...}\n            Xmm6 = nullptr{...}\n            Xmm7 = nullptr{...}\n            Xmm8 = nullptr{...}\n            Xmm9 = nullptr{...}\n            Xmm10 = nullptr{...}\n            Xmm11 = nullptr{...}\n            Xmm12 = nullptr{...}\n            Xmm13 = nullptr{...}\n            Xmm14 = nullptr{...}\n            Xmm15 = nullptr{...}\n          }\n        }\n         = {\n          IntegerContext = {\n            [0] = 0x0000000000000000{...}\n            [1] = 0x0000000000000000{...}\n            [2] = 0x0000000000000000{...}\n            [3] = 0x0000000000000000{...}\n            [4] = 0x0000000000000000{...}\n            [5] = 0x0000000000000000{...}\n            [6] = 0x0000000000000000{...}\n            [7] = 0x0000000000000000{...}\n            [8] = 0x0000000000000000{...}\n            [9] = 0x0000000000000000{...}\n            [10] = 0x0000000000000000{...}\n            [11] = 0x0000000000000000{...}\n            [12] = 0x0000000000000000{...}\n            [13] = 0x0000000000000000{...}\n            [14] = 0x0000000000000000{...}\n            [15] = 0x0000000000000000{...}\n          }\n           = {\n            Rax = 0x0000000000000000{...}\n            Rcx = 0x0000000000000000{...}\n            Rdx = 0x0000000000000000{...}\n            Rbx = 0x0000000000000000{...}\n            Rsp = 0x0000000000000000{...}\n            Rbp = 0x0000000000000000{...}\n            Rsi = 0x0000000000000000{...}\n            Rdi = 0x0000000000000000{...}\n            R8 = 0x0000000000000000{...}\n            R9 = 0x0000000000000000{...}\n            R10 = 0x0000000000000000{...}\n            R11 = 0x0000000000000000{...}\n            R12 = 0x0000000000000000{...}\n            R13 = 0x0000000000000000{...}\n            R14 = 0x0000000000000000{...}\n            R15 = 0x0000000000000000{...}\n          }\n        }\n      }\n      SP = 0\n      ControlPC = 0\n    }\n  }\n  m_pInitialFrame = 0x00007ff7bfc24970\n  m_lastReportedFunclet = (IP = 0, FP = 0, Flags = 0)\n}\n```",
                                           "updatedAt":  "2025-08-28T15:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AxAdz",
                                           "createdAt":  "2025-08-28T15:57:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "EF is hitting very similar crash #119165",
                                           "updatedAt":  "2025-08-28T15:57:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AxI0E",
                                           "createdAt":  "2025-08-28T16:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t see anything in the runtime diffs:\n* full diff is https://github.com/dotnet/dotnet/compare/619d563351...39ec54dcf6\n* which for runtime is just \n  * https://github.com/dotnet/dotnet/commit/02acb20c927365af1bd46e4013b564cec411416c#diff-539566c28230c0624f69435a0007b63187fbdc2802aa9678d8422bcbfed039ad\n  * https://github.com/dotnet/dotnet/commit/e5a2cbadbbc481777795c8d531508c7fcee8db7a\n\nNotably the `StelemRef_Helper` that EF has a `GetMethodTable` call: https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/System/Runtime/CompilerServices/CastHelpers.cs#L473\n\nWhile this one has `System.ModuleHandle.ResolveMethodHandle`...",
                                           "updatedAt":  "2025-08-28T16:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AxLhO",
                                           "createdAt":  "2025-08-28T16:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The `WriteBarrier` might also be interesting. I know we\u0027ve done various optimizations to that space, even if its not in the runtime diffs.\n\n@akoeplinger had pointed out there was the runtime boostrap which would\u0027ve brought in the new Crossgen: https://github.com/dotnet/dotnet/commit/36a2299c5bd39001f15c8917e30c07af0892e14f\n\nI\u0027m not aware of any .NET 10 related crossgen changes we made though, just the ones we made for .NET 11 and which went in after the rebootstrap",
                                           "updatedAt":  "2025-08-28T16:11:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AxP6X",
                                           "createdAt":  "2025-08-28T16:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@janvorli Could you please take a quick look to diagnose this and route as appropriate? I do not have access to mac hardware at the moment.",
                                           "updatedAt":  "2025-08-28T16:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AxbD8",
                                           "createdAt":  "2025-08-28T16:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgCJhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-08-28T16:37:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@jkotas sure!",
                                           "updatedAt":  "2025-08-28T16:31:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AyYB7",
                                           "createdAt":  "2025-08-28T17:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "So it is pretty interesting. The caller calls\n```\n0000000110e715c9 e872eaa4f9           call    0x10a8c0040 (JitHelp: CORINFO_HELP_ASSIGN_REF)\n```\nThe disassembly of the helper looks like this:\n```\n(lldb) disass -F intel -s 0x10a8c0040 -e 0x000000010a8c00b4\n    0x10a8c0040: mov    qword ptr [rdi], rsi\n    0x10a8c0043: mov    rax, rdi\n    0x10a8c0046: movabs r10, 0x1053fc8bc\n    0x10a8c0050: shr    rax, 0xc\n    0x10a8c0054: nop\n    0x10a8c0056: movabs r11, 0x182205058\n    0x10a8c0060: add    rax, r10\n    0x10a8c0063: cmp    byte ptr [rax], 0x0\n    0x10a8c0066: jne    0x10a8c006b\n    0x10a8c0068: mov    byte ptr [rax], -0x1\n    0x10a8c006b: cmp    rsi, r11\n    0x10a8c006e: jb     0x10a8c00b0\n    0x10a8c0070: shr    rdi, 0xb\n    0x10a8c0074: nop\n    0x10a8c0076: movabs rax, 0x1051faf28\n    0x10a8c0080: cmp    byte ptr [rdi + rax], -0x1\n    0x10a8c0084: jne    0x10a8c0088\n    0x10a8c0086: rep    ret\n    0x10a8c0088: mov    byte ptr [rdi + rax], -0x1\n    0x10a8c008c: nop\n    0x10a8c008e: movabs rax, 0x10557d434\n    0x10a8c0098: shr    rdi, 0xa\n    0x10a8c009c: cmp    byte ptr [rdi + rax], -0x1\n    0x10a8c00a0: jne    0x10a8c00a4\n    0x10a8c00a2: rep    ret\n    0x10a8c00a4: mov    byte ptr [rdi + rax], -0x1\n    0x10a8c00a8: ret\n    0x10a8c00a9: nop    dword ptr [rax]\n    0x10a8c00b0: add    byte ptr [rax], al\n```\nAnd the crash happens at `0x10a8c00b2`, which is not reachable from any of the helper code. There is really an invalid instruction code there:\n```\nx/8bx 0x10a8c00b2\n0x10a8c00b2: 0x07 0xff 0x75 0x02 0xf3 0xc3 0xc6 0x04\n```\nIt seems the `CORINFO_HELP_ASSIGN_REF` (write barrier) code was swapped while the CPU was executing it somehow.",
                                           "updatedAt":  "2025-08-28T17:56:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AyyFi",
                                           "createdAt":  "2025-08-28T18:31:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "There is a background GC going on on another thread at the time of the crash:\n```\n* thread #35, name = \u0027.NET BGC\u0027\n  * frame #0: 0x0000000101c43569 libcoreclr.dylib`WKS::gc_heap::background_mark_simple1(unsigned char*) + 2153\n    frame #1: 0x0000000101c438ec libcoreclr.dylib`WKS::gc_heap::background_promote(Object**, ScanContext*, unsigned int) + 300\n    frame #2: 0x0000000101bc978e libcoreclr.dylib`BlockScanBlocksWithoutUserData(TableSegment*, unsigned int, unsigned int, ScanCallbackInfo*) + 126\n    frame #3: 0x0000000101bcaa72 libcoreclr.dylib`xxxTableScanQueuedBlocksAsync(HandleTable*, TableSegment*, Holder\u003cCrstBase*, \u0026(CrstBase::AcquireLock(CrstBase*)), \u0026(CrstBase::ReleaseLock(CrstBase*)), 0ul, \u0026(int CompareDefault\u003cCrstBase*\u003e(CrstBase*, CrstBase*)), true\u003e*) + 514\n    frame #4: 0x0000000101bcb720 libcoreclr.dylib`xxxTableScanHandlesAsync(HandleTable*, unsigned int const*, unsigned int, TableSegment* (*)(HandleTable*, TableSegment*, Holder\u003cCrstBase*, \u0026(CrstBase::AcquireLock(CrstBase*)), \u0026(CrstBase::ReleaseLock(CrstBase*)), 0ul, \u0026(int CompareDefault\u003cCrstBase*\u003e(CrstBase*, CrstBase*)), true\u003e*), void (*)(TableSegment*, unsigned int, unsigned int, ScanCallbackInfo*), ScanCallbackInfo*, Holder\u003cCrstBase*, \u0026(CrstBase::AcquireLock(CrstBase*)), \u0026(CrstBase::ReleaseLock(CrstBase*)), 0ul, \u0026(int CompareDefault\u003cCrstBase*\u003e(CrstBase*, CrstBase*)), true\u003e*) + 912\n    frame #5: 0x0000000101bc5451 libcoreclr.dylib`HndScanHandlesForGC(HandleTable*, void (*)(Object**, unsigned long*, unsigned long, unsigned long), unsigned long, unsigned long, unsigned int const*, unsigned int, unsigned int, unsigned int, unsigned int) + 353\n    frame #6: 0x0000000101bccdc2 libcoreclr.dylib`Ref_TraceNormalRoots(unsigned int, unsigned int, ScanContext*, void (*)(Object**, ScanContext*, unsigned int)) + 322\n    frame #7: 0x0000000101c35789 libcoreclr.dylib`WKS::gc_heap::background_mark_phase() + 617\n    frame #8: 0x0000000101c34832 libcoreclr.dylib`WKS::gc_heap::gc1() + 706\n    frame #9: 0x0000000101c5296c libcoreclr.dylib`WKS::gc_heap::bgc_thread_function() + 220\n    frame #10: 0x0000000101b21bd5 libcoreclr.dylib`(anonymous namespace)::CreateSuspendableThread(void (*)(void*), void*, char16_t const*)::$_0::__invoke(void*) + 133\n    frame #11: 0x0000000101ca7cb2 libcoreclr.dylib`CorUnix::CPalThread::ThreadEntry(void*) + 386\n    frame #12: 0x00007ff81db794e1 libsystem_pthread.dylib`_pthread_start + 125\n    frame #13: 0x00007ff81db74f6b libsystem_pthread.dylib`thread_start + 15\n```",
                                           "updatedAt":  "2025-08-28T18:31:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AyztT",
                                           "createdAt":  "2025-08-28T18:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The crashing thread is in cooperative mode, but closely before calling the write barrier, it was in a preemptive mode:\n```\nOS Thread Id: 0x807477d (1)\n        Child SP               IP Call Site\n00007FF7BFEFB638 000000010A8C00B2\n00007FF7BFEFB740 0000000110E706F5\n00007FF7BFEFB850 0000000101C63DAC libcoreclr.dylib!CallDescrWorkerInternal + 124\n00007FF7BFEFB870 0000000101AE901A libcoreclr.dylib!DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) + 218\n00007FF7BFEFB900 0000000101B99FD9 libcoreclr.dylib!GetTypeHelper(char16_t const*, Assembly*, int, int, MethodDesc*) + 297\n00007FF7BFEFB9C0 0000000101B99E43 libcoreclr.dylib!TypeName::GetTypeReferencedByCustomAttribute(char const*, Assembly*) + 131\n00007FF7BFEFBC00 0000000101B05DF7 libcoreclr.dylib!GetTypeHandleFromBlob(Assembly*, CorSerializationType, unsigned char**, unsigned char const*, Module*) + 279\n00007FF7BFEFBC70 0000000101B04864 libcoreclr.dylib!GetDataFromBlob(Assembly*, CorSerializationType, TypeHandle, unsigned char**, unsigned char const*, Module*, int*) + 436\n00007FF7BFEFBCD0 0000000101B052BA libcoreclr.dylib!ReadArray(Assembly*, CorSerializationType, int, TypeHandle, unsigned char**, unsigned char const*, Module*) + 202\n00007FF7BFEFBD50 0000000101B04F24 libcoreclr.dylib!CustomAttribute_CreatePropertyOrFieldData + 900\n00007FF7BFEFBE20 0000000110E5D28A\n00007FF7BFEFBE48                  [InlinedCallFrame: 00007ff7bfefbe48] System.Private.CoreLib.dll!System.Reflection.CustomAttribute.\u003cCreatePropertyOrFieldData\u003eg____PInvoke|32_0(System.Runtime.CompilerServices.QCallModule, IntPtr*, IntPtr, System.Runtime.CompilerServices.StringHandleOnStack, Int32*, System.Runtime.CompilerServices.ObjectHandleOnStack, System.Runtime.CompilerServices.ObjectHandleOnStack)\n00007FF7BFEFBE48                  [InlinedCallFrame: 00007ff7bfefbe48] System.Private.CoreLib.dll!System.Reflection.CustomAttribute.\u003cCreatePropertyOrFieldData\u003eg____PInvoke|32_0(System.Runtime.CompilerServices.QCallModule, IntPtr*, IntPtr, System.Runtime.CompilerServices.StringHandleOnStack, Int32*, System.Runtime.CompilerServices.ObjectHandleOnStack, System.Runtime.CompilerServices.ObjectHandleOnStack)\n00007FF7BFEFBE20 0000000110E5D28A System.Private.CoreLib.dll!System.Reflection.CustomAttribute.GetPropertyOrFieldData(System.Reflection.RuntimeModule, IntPtr ByRef, IntPtr, System.String ByRef, Boolean ByRef, System.RuntimeType ByRef, System.Object ByRef) + 234\n00007FF7BFEFBEF0 0000000110E4910B System.Private.CoreLib.dll!System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u003cSystem.Object\u003e ByRef, System.Reflection.RuntimeModule, Int32, System.RuntimeType, Boolean, ListBuilder`1\u003cSystem.Object\u003e) + 555\n00007FF7BFEFBFE0 0000000110E60774 System.Private.CoreLib.dll!System.RuntimeType.GetCustomAttributes(Boolean) + 372\n00007FF7BFEFC0D0 000000010B9A013B introspection.dll!Xamarin.Tests.AvailabilityExtensions.IsAvailable(System.Reflection.ICustomAttributeProvider, Xamarin.Tests.PlatformInfo) + 75 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/PlatformInfo.cs @ 108]\n00007FF7BFEFC150 000000010B99E7F5 introspection.dll!Xamarin.Tests.AvailabilityExtensions.IsAvailableOnHostPlatform(System.Reflection.ICustomAttributeProvider) + 85 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/PlatformInfo.cs @ 102]\n00007FF7BFEFC180 000000010B99E711 introspection.dll!Introspection.ApiBaseTest.SkipDueToAttribute(System.Reflection.MemberInfo) + 81 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/introspection/ApiBaseTest.cs @ 167]\n00007FF7BFEFC1D0 000000010B99E74E introspection.dll!Introspection.ApiBaseTest.SkipDueToAttribute(System.Reflection.MemberInfo) + 142 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/introspection/ApiBaseTest.cs @ 167]\n00007FF7BFEFC220 0000000110E454FD introspection.dll!Introspection.ApiFieldTest.AllProperties() + 317 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/introspection/ApiFieldTest.cs @ 153]\n00007FF7BFEFC2D0 0000000110E44E96 introspection.dll!Introspection.ApiFieldTest.FieldExists() + 150 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/introspection/ApiFieldTest.cs @ 254]\n00007FF7BFEFC450 0000000101C63DAC libcoreclr.dylib!CallDescrWorkerInternal + 124\n00007FF7BFEFC470 0000000101AE8D8B libcoreclr.dylib!CallDescrWorkerWithHandler(CallDescrData*, int) + 91\n00007FF7BFEFC4A0 0000000101B7A413 libcoreclr.dylib!RuntimeMethodHandle_InvokeMethod + 2323\n00007FF7BFEFC790 000000010ABB0DD6\n00007FF7BFEFC7B8                  [InlinedCallFrame: 00007ff7bfefc7b8]\n00007FF7BFEFC7B8                  [InlinedCallFrame: 00007ff7bfefc7b8]\n00007FF7BFEFC790 000000010ABB0DAB System.Private.CoreLib.dll!System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) + -103650853\n00007FF7BFEFC860 000000010ABB0E9A System.Private.CoreLib.dll!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) + -103561686\n00007FF7BFEFC890 000000010ABC3F5A System.Private.CoreLib.dll!System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) + -103489222\n00007FF7BFEFC900 000000010B997DA3 nunit.framework.dll!NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo, System.Object, System.Object[]) + 83\n00007FF7BFEFC980 000000010B997D2C nunit.framework.dll!NUnit.Framework.Internal.MethodWrapper.Invoke(System.Object, System.Object[]) + 60\n00007FF7BFEFC9B0 000000010B997CCD nunit.framework.dll!NUnit.Framework.Internal.Commands.TestMethodCommand.InvokeTestMethod(NUnit.Framework.Internal.TestExecutionContext) + 93\n00007FF7BFEFC9E0 000000010B997C13 nunit.framework.dll!NUnit.Framework.Internal.Commands.TestMethodCommand.RunTestMethod(NUnit.Framework.Internal.TestExecutionContext) + 227\n00007FF7BFEFCA20 000000010B997A5A nunit.framework.dll!NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext) + 42\n00007FF7BFEFCA60 000000010B996945 nunit.framework.dll!NUnit.Framework.Internal.Execution.SimpleWorkItem.PerformWork() + 85\n00007FF7BFEFCAB0 000000010B991688 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread() + 376\n00007FF7BFEFCB30 000000010B9911E8 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.Execute() + 744\n00007FF7BFEFCBF0 000000010B990B7B nunit.framework.dll!NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem) + 43\n00007FF7BFEFCC10 000000010B99463F nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren() + 767\n00007FF7BFEFCD00 000000010B992923 nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork() + 435\n00007FF7BFEFCDA0 000000010B991688 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread() + 376\n00007FF7BFEFCE20 000000010B9911E8 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.Execute() + 744\n00007FF7BFEFCEE0 000000010B990B7B nunit.framework.dll!NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem) + 43\n00007FF7BFEFCF00 000000010B99463F nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren() + 767\n00007FF7BFEFCFF0 000000010B992923 nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork() + 435\n00007FF7BFEFD090 000000010B991688 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread() + 376\n00007FF7BFEFD110 000000010B9911E8 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.Execute() + 744\n00007FF7BFEFD1D0 000000010B990B7B nunit.framework.dll!NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem) + 43\n00007FF7BFEFD1F0 000000010B99463F nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.RunChildren() + 767\n00007FF7BFEFD2E0 000000010B992923 nunit.framework.dll!NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork() + 435\n00007FF7BFEFD380 000000010B991688 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.RunOnCurrentThread() + 376\n00007FF7BFEFD400 000000010B9911E8 nunit.framework.dll!NUnit.Framework.Internal.Execution.WorkItem.Execute() + 744\n00007FF7BFEFD4C0 000000010B990B7B nunit.framework.dll!NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem) + 43\n00007FF7BFEFD4E0 000000010B990B30 nunit.framework.dll!NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem) + 32\n00007FF7BFEFD500 000000010B9906DB nunit.framework.dll!NUnit.Framework.Api.NUnitTestAssemblyRunner.StartRun(NUnit.Framework.Interfaces.ITestListener) + 731\n00007FF7BFEFD5D0 000000010B9903E4 nunit.framework.dll!NUnit.Framework.Api.NUnitTestAssemblyRunner+\u003c\u003ec__DisplayClass38_0.\u003cRunAsync\u003eb__0() + 36\n00007FF7BFEFD5F0 000000010B973561 nunit.framework.dll!NUnit.Framework.Api.NUnitTestAssemblyRunner.WrapInNUnitCallContext(System.Action) + 33\n00007FF7BFEFD610 000000010B98D9DE nunit.framework.dll!NUnit.Framework.Api.NUnitTestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener, NUnit.Framework.Interfaces.ITestFilter) + 526\n00007FF7BFEFD6A0 000000010B98D798 nunit.framework.dll!NUnit.Framework.Api.NUnitTestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener, NUnit.Framework.Interfaces.ITestFilter) + 40\n00007FF7BFEFD6D0 000000010B98D402 Touch.Client.dll!MonoTouch.NUnit.UI.BaseTouchRunner.Run(NUnit.Framework.Internal.Test) + 866 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/TouchRunner.cs @ 641]\n00007FF7BFEFD870 000000010B98466D Touch.Client.dll!MonoTouch.NUnit.UI.BaseTouchRunner.Run() + 157 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/TouchRunner.cs @ 268]\n00007FF7BFEFD8A0 000000010B984591 Touch.Client.dll!MonoTouch.NUnit.UI.BaseTouchRunner.RunAsync() + 49 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/TouchRunner.cs @ 249]\n00007FF7BFEFD8D0 000000010B971D4A Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner+\u003cRunTestsAsync\u003ed__1.MoveNext() + 426 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/MacRunner.cs @ 68]\n00007FF7BFEFD970 000000010AF41B0C System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 92\n00007FF7BFEFD9C0 000000010B971B81 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, System.Private.CoreLib]].Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 97\n00007FF7BFEFDA00 000000010B971A97 Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner.RunTestsAsync(MonoTouch.NUnit.UI.TouchOptions, System.Reflection.Assembly[]) + 199\n00007FF7BFEFDA50 000000010B96B567 Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner+\u003c\u003ec__DisplayClass0_1+\u003c\u003cMainAsync\u003eb__0\u003ed.MoveNext() + 519 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/MacRunner.cs @ 33]\n00007FF7BFEFDB90 000000010AF41B0C System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 92\n00007FF7BFEFDBE0 000000010B96B2EB Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner+\u003c\u003ec__DisplayClass0_1.\u003cMainAsync\u003eb__0() + 187\n00007FF7BFEFDC20 000000010B96B20F Microsoft.macOS.dll!Foundation.NSActionDispatcher.Apply() + 47 [/Users/rolf/work/dotnet/macios/net10.0/macios/src/Foundation/NSAction.cs @ 64]\n00007FF7BFEFDC40 0000000101C63DAC libcoreclr.dylib!CallDescrWorkerInternal + 124\n00007FF7BFEFDC60 0000000101AE8D8B libcoreclr.dylib!CallDescrWorkerWithHandler(CallDescrData*, int) + 91\n00007FF7BFEFDC90 0000000101B7A413 libcoreclr.dylib!RuntimeMethodHandle_InvokeMethod + 2323\n00007FF7BFEFDF80 000000010ABB0DD6\n00007FF7BFEFDFA8                  [InlinedCallFrame: 00007ff7bfefdfa8]\n00007FF7BFEFDFA8                  [InlinedCallFrame: 00007ff7bfefdfa8]\n00007FF7BFEFDF80 000000010ABB0DAB System.Private.CoreLib.dll!System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) + -103650853\n00007FF7BFEFE050 000000010ABB0E9A System.Private.CoreLib.dll!System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) + -103561686\n00007FF7BFEFE080 000000010ABC3F5A System.Private.CoreLib.dll!System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) + -103489222\n00007FF7BFEFE0F0 000000010B96A9A5 Microsoft.macOS.dll!ObjCRuntime.Runtime.InvokeMethod(System.Reflection.MethodBase, System.Object, IntPtr) + 2901 [/Users/rolf/work/dotnet/macios/net10.0/macios/src/ObjCRuntime/Runtime.CoreCLR.cs @ 797]\n00007FF7BFEFE410 000000010B969C4F Microsoft.macOS.dll!ObjCRuntime.Runtime.bridge_runtime_invoke_method(MonoObject*, MonoObject*, IntPtr, IntPtr*) + 111 [/Users/rolf/work/dotnet/macios/net10.0/macios/runtime/Delegates.generated.cs @ 880]\n00007FF7BFEFE480 00000001000173A4 introspection!xamarin_bridge_runtime_invoke_method + 132\n00007FF7BFEFE4D0 000000010002726B introspection!mono_runtime_invoke + 75\n00007FF7BFEFE520 000000010006F65D introspection!native_to_managed_trampoline_25(objc_object*, objc_selector*, _MonoObject**, unsigned int) + 237\n00007FF7BFEFE590 000000010006F7E9 introspection!-[__MonoMac_NSActionDispatcher xamarinApplySelector] + 41\n00007FF7BFEFE5B0 00007FF81EA8B4B1 Foundation!-[NSObject(NSThreadPerformAdditions) performSelector:onThread:withObject:waitUntilDone:modes:] + 379\n00007FF7BFEFE600 00007FF81EA8B1D6 Foundation!-[NSObject(NSThreadPerformAdditions) performSelectorOnMainThread:withObject:waitUntilDone:] + 124\n00007FF7BFEFE650 000000010002BFC9 introspection!xamarin_dyn_objc_msgSend + 217\n00007FF7BFEFE7E0 000000010B968DF1\n00007FF7BFEFE7E8                  [InlinedCallFrame: 00007ff7bfefe7e8] Microsoft.macOS.dll!ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool(IntPtr, IntPtr, ObjCRuntime.NativeHandle, ObjCRuntime.NativeHandle, Byte)\n00007FF7BFEFE7E8                  [InlinedCallFrame: 00007ff7bfefe7e8] Microsoft.macOS.dll!ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool(IntPtr, IntPtr, ObjCRuntime.NativeHandle, ObjCRuntime.NativeHandle, Byte)\n00007FF7BFEFE7E0 000000010B968DF1 Microsoft.macOS.dll!ILStubClass.IL_STUB_PInvoke(IntPtr, IntPtr, ObjCRuntime.NativeHandle, ObjCRuntime.NativeHandle, Byte) + 129\n00007FF7BFEFE870 000000010B968B22 Microsoft.macOS.dll!Foundation.NSObject.InvokeOnMainThread(System.Action) + 194 [/Users/rolf/work/dotnet/macios/net10.0/macios/src/Foundation/NSObject2.cs @ 811]\n00007FF7BFEFE8D0 000000010B959BEA Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner+\u003cMainAsync\u003ed__0.MoveNext() + 538 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/Touch.Unit/Touch.Client/Runner/MacRunner.cs @ 26]\n00007FF7BFEFE990 000000010AF41B0C System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 92\n00007FF7BFEFE9E0 000000010B9590A1 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib]].Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 97\n00007FF7BFEFEA20 000000010B959949 Touch.Client.dll!MonoTouch.NUnit.UI.MacRunner.MainAsync(System.Collections.Generic.IList`1\u003cSystem.String\u003e, Boolean, System.Action`1\u003cInt32\u003e, System.Reflection.Assembly[]) + 233\n00007FF7BFEFEA80 000000010B95938E introspection.dll!Xamarin.Mac.Tests.MainClass+\u003cMain\u003ed__0.MoveNext() + 718 [/Users/rolf/work/dotnet/macios/net10.0/macios/tests/common/mac/MacMain.cs @ 19]\n00007FF7BFEFEB90 000000010AF41B0C System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 92\n00007FF7BFEFEBE0 000000010B9590A1 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib]].Start[[System.__Canon, System.Private.CoreLib]](System.__Canon ByRef) + 97\n00007FF7BFEFEC20 000000010B958FB2 introspection.dll!Xamarin.Mac.Tests.MainClass.Main(System.String[]) + 178\n00007FF7BFEFEC60 000000010B958EB6 introspection.dll!Xamarin.Mac.Tests.MainClass.\u003cMain\u003e(System.String[]) + 54\n00007FF7BFEFECA0 0000000101C63DAC libcoreclr.dylib!CallDescrWorkerInternal + 124\n00007FF7BFEFECC0 0000000101AE9664 libcoreclr.dylib!MethodDescCallSite::CallTargetWorker(unsigned long long const*, unsigned long long*, int) + 1540\n00007FF7BFEFEEA0 00000001019E4B46 libcoreclr.dylib!RunMain(MethodDesc*, short, int*, PtrArray**) + 742\n00007FF7BFEFF0A0 00000001019E4F16 libcoreclr.dylib!Assembly::ExecuteMainMethod(PtrArray**, int) + 454\n00007FF7BFEFF340 0000000101A0A15C libcoreclr.dylib!CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 700\n00007FF7BFEFF440 000000010189FF72 libcoreclr.dylib!coreclr_execute_assembly + 226\n00007FF7BFEFF4B0 0000000100026FD9 introspection!mono_jit_exec + 153\n00007FF7BFEFF510 000000010002A8D6 introspection!xamarin_main + 694\n00007FF7BFEFF5D0 00000001000C45F4 introspection!main + 52\n00007FF7BFEFF600 000000010039D52E dyld!start + 462\n\n```",
                                           "updatedAt":  "2025-08-28T18:34:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A3qBP",
                                           "createdAt":  "2025-08-29T05:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgLylQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndriySvyryd",
                                                                               "createdAt":  "2025-08-29T16:47:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "The problem disappeared in the last bump: https://github.com/dotnet/macios/pull/23694/commits/c53290dd0e43445515a79e9a1ccdd9d32b83328c",
                                           "updatedAt":  "2025-08-29T05:56:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A5bg0",
                                           "createdAt":  "2025-08-29T09:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "weird. that points to https://github.com/dotnet/dotnet/compare/39ec54dcf651bb3f9fea7aa0ae946fad6d503954...7ac1ca67bb1fb8a381c1c94a9f82a97725f0ccf3 as the diff and from there the runtime diff https://github.com/dotnet/runtime/compare/d934b8cab19f53c42e4e5cda98d1816914704764...4cf369ee051d845236c5dab9b2074490d33242b6 doesn\u0027t seem to have any related fixes",
                                           "updatedAt":  "2025-08-29T09:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A7G1n",
                                           "createdAt":  "2025-08-29T11:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I will keep investigating, I think it might have disappeared just due to some code layout change or something along those lines.",
                                           "updatedAt":  "2025-08-29T11:28:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BA0gF",
                                           "createdAt":  "2025-08-29T20:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I have found the culprit, I didn\u0027t expect something like this. The `JIT_WriteBarrier_WriteWatch_PreGrow64` jumps at 0x101c645ce to 0x101c64610, but there is no code. The `JIT_WriteBarrier_WriteWatch_PreGrow64_End` is at 0x101c64612 and so the crash happens because the execution leaves the barrier that way. \n\nBut this doesn\u0027t match the source code! We have a `REPRET` macro there that is expanded to `rep ret` and obviously worked few lines above correctly.\n\n```\n(lldb) disass -s 0x101c645a0 -e 0x101c645a0+0x76\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64:\n    0x101c645a0 \u003c+0\u003e:  movq   %rsi, (%rdi)\n    0x101c645a3 \u003c+3\u003e:  movq   %rdi, %rax\n\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64_Patch_Label_WriteWatchTable:\n    0x101c645a6 \u003c+0\u003e:  movabsq $-0xf0f0f0f0f0f0f10, %r10 ; imm = 0xF0F0F0F0F0F0F0F0\n    0x101c645b0 \u003c+10\u003e: shrq   $0xc, %rax\n    0x101c645b4 \u003c+14\u003e: nop\n\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64_Patch_Label_Lower:\n    0x101c645b6 \u003c+0\u003e:  movabsq $-0xf0f0f0f0f0f0f10, %r11 ; imm = 0xF0F0F0F0F0F0F0F0\n    0x101c645c0 \u003c+10\u003e: addq   %r10, %rax\n    0x101c645c3 \u003c+13\u003e: cmpb   $0x0, (%rax)\n    0x101c645c6 \u003c+16\u003e: jne    0x101c645cb               ; CheckCardTable_WriteWatch_PreGrow64\n    0x101c645c8 \u003c+18\u003e: movb   $-0x1, (%rax)\n\nlibcoreclr.dylib`CheckCardTable_WriteWatch_PreGrow64:\n    0x101c645cb \u003c+0\u003e:  cmpq   %r11, %rsi\n    0x101c645ce \u003c+3\u003e:  jb     0x101c64610               ; UpdateCardBundle_WriteWatch_PreGrow64 + 12\n    0x101c645d0 \u003c+5\u003e:  shrq   $0xb, %rdi\n    0x101c645d4 \u003c+9\u003e:  nop\n\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64_Patch_Label_CardTable:\n    0x101c645d6 \u003c+0\u003e:  movabsq $-0xf0f0f0f0f0f0f10, %rax ; imm = 0xF0F0F0F0F0F0F0F0\n    0x101c645e0 \u003c+10\u003e: cmpb   $-0x1, (%rdi,%rax)\n    0x101c645e4 \u003c+14\u003e: jne    0x101c645e8               ; UpdateCardTable_WriteWatch_PreGrow64\n    0x101c645e6 \u003c+16\u003e: rep    retq\n\nlibcoreclr.dylib`UpdateCardTable_WriteWatch_PreGrow64:\n    0x101c645e8 \u003c+0\u003e:  movb   $-0x1, (%rdi,%rax)\n    0x101c645ec \u003c+4\u003e:  nop\n\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64_Patch_Label_CardBundleTable:\n    0x101c645ee \u003c+0\u003e:  movabsq $-0xf0f0f0f0f0f0f10, %rax ; imm = 0xF0F0F0F0F0F0F0F0\n    0x101c645f8 \u003c+10\u003e: shrq   $0xa, %rdi\n    0x101c645fc \u003c+14\u003e: cmpb   $-0x1, (%rdi,%rax)\n    0x101c64600 \u003c+18\u003e: jne    0x101c64604               ; UpdateCardBundle_WriteWatch_PreGrow64\n    0x101c64602 \u003c+20\u003e: rep    retq\n\nlibcoreclr.dylib`UpdateCardBundle_WriteWatch_PreGrow64:\n    0x101c64604 \u003c+0\u003e:  movb   $-0x1, (%rdi,%rax)\n    0x101c64608 \u003c+4\u003e:  retq\n    0x101c64609 \u003c+5\u003e:  nopl   (%rax)\n    0x101c64610 \u003c+12\u003e: addb   %al, (%rax)\n\nlibcoreclr.dylib`JIT_WriteBarrier_WriteWatch_PreGrow64_End:\n    0x101c64612 \u003c+0\u003e:  nop\n```\n",
                                           "updatedAt":  "2025-08-29T20:38:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BA5SS",
                                           "createdAt":  "2025-08-29T20:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "My local release build of runtime from the release/10.0 branch for macOS doesn\u0027t have this problem, the end looks correctly like this:\n```\n00000000003e0380 \u003cExit_WriteWatch_PreGrow64\u003e:\n  3e0380: f3 c3                         rep             retq\n\n00000000003e0382 \u003c_JIT_WriteBarrier_WriteWatch_PreGrow64_End\u003e:\n  3e0382: 90                            nop\n```\nSo it sound like the compiler version that we use to build our runtime in the lab is broken.",
                                           "updatedAt":  "2025-08-29T20:47:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BA-5H",
                                           "createdAt":  "2025-08-29T20:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I haven\u0027t updated my local x64 mac for quite a while and I still have clang 14 there, which is quite dated. \nDo we know what Apple clang we use for our builds?",
                                           "updatedAt":  "2025-08-29T20:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BFQyy",
                                           "createdAt":  "2025-08-30T16:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Do we know what Apple clang we use for our builds?\n\nMetadata on nightly builds suggest Xcode 15.4.",
                                           "updatedAt":  "2025-08-30T16:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BH4V2",
                                           "createdAt":  "2025-08-31T11:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Just a thought: Xcode 15 comes with the new linker. Unlike other unix platforms we are dealing with Mach-O object files which are sub-divided into subsections which may be eliminated by the linker if dead code elimination is enabled, or moved in the final linker output. Cursory look suggests that `Exit_WriteWatch_PreGrow64` is not directly referenced in the object file (*), not marked as `.alt_entry` (which doesn\u0027t split subsections on symbols), and not named like a local label (`L` prefix). This would likely mean that the linker is free to treat `Exit_WriteWatch_PreGrow64` as a start of a function (and subsection) and eliminate/move it.\n\nPerhaps we should just mark `Exit_WriteWatch_PreGrow64` with `PATCH_LABEL` to ensure it gets `.alt_entry` attribute and the linker doesn\u0027t move/eliminate it.\n\n(*) On second look it may be referenced from elsewhere, but the part about moving the code still holds.",
                                           "updatedAt":  "2025-08-31T11:33:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BMm1t",
                                           "createdAt":  "2025-09-01T08:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "Looks like the last RC 1 build is affected too: https://github.com/dotnet/sdk/issues/50567",
                                           "updatedAt":  "2025-09-01T08:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BM1xy",
                                           "createdAt":  "2025-09-01T08:22:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "I checked that build for RC1 (10.0.100-rc.1.25429.105) and it was using Xcode 16.4.\nIt looks like the build machines were recently switched from Xcode 16.0 to 16.4: https://github.com/actions/runner-images/issues/12751\n\n\u003cimg width=\"1006\" height=\"350\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/425a29d1-351b-4a99-b491-7209c0d4a7ef\" /\u003e\n\n",
                                           "updatedAt":  "2025-09-01T08:22:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BM-1-",
                                           "createdAt":  "2025-09-01T08:33:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "The build where Rolf originally hit this issue (10.0.100-rc.1.25426.11, note this is actually rc2) was using Xcode 16.0 so the 16.4 bump seems unrelated:\n\n\u003cimg width=\"998\" height=\"381\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6ec47a4a-a2ce-4d5d-ba16-72e5db1f032b\" /\u003e",
                                           "updatedAt":  "2025-09-01T08:33:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BNBsi",
                                           "createdAt":  "2025-09-01T08:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "@akoeplinger what about 10.0.100-rc.1.25427.104 (which worked for us: https://github.com/dotnet/macios/commit/c53290dd0e43445515a79e9a1ccdd9d32b83328c)?",
                                           "updatedAt":  "2025-09-01T08:35:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BNC-d",
                                           "createdAt":  "2025-09-01T08:36:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I drafted a fix for the label types ([#119245](https://github.com/dotnet/runtime/pull/119245)) in the assembly code. Unfortunately I don\u0027t have access to macOS machine today, so I am relying solely on CI to check the output. Keeping it as draft until I get home to check it.",
                                           "updatedAt":  "2025-09-01T08:36:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BNE0K",
                                           "createdAt":  "2025-09-01T08:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@rolfbjarne that one was using Xcode 15.4 (it ran on macos 14 instead of macos 15. see https://github.com/actions/runner-images/issues/12520):\n\n\u003cimg width=\"1066\" height=\"266\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/545d98e3-c134-4fd8-8e9a-bdd085da8853\" /\u003e",
                                           "updatedAt":  "2025-09-01T08:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BNL7k",
                                           "createdAt":  "2025-09-01T08:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Also note that we cross build from arm64 macOS for the x64 builds in the VMR official build, just in case it matters.",
                                           "updatedAt":  "2025-09-01T08:46:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BNZL5",
                                           "createdAt":  "2025-09-01T09:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-01T09:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CJJs_",
                                           "createdAt":  "2025-09-05T06:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhcL4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-09-09T08:15:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "This issue is still present in RC2 (https://github.com/dotnet/macios/pull/23751/commits/83dba309f7567668ecbedb4d2b561ba96ff4d8c4 for instance).",
                                           "updatedAt":  "2025-09-05T06:07:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C4J93",
                                           "createdAt":  "2025-09-09T08:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Hitting this with `10.0.100-rc.2.25458.103` on our perf CI as well https://dev.azure.com/dnceng/internal/_build/results?buildId=2789248\u0026view=logs\u0026j=6cdc3f7c-7c36-5fa3-3615-9d6c2a1c5f15\u0026t=699e146f-7e03-5849-b0d7-f0d21fa17dec\n",
                                           "updatedAt":  "2025-09-09T08:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C59NX",
                                           "createdAt":  "2025-09-09T10:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "Continues happening in EF Core:\n* https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142828\u0026view=logs\u0026jobId=7bab896a-24f8-544f-51eb-43745367a332\n* https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142851\u0026view=logs\u0026jobId=7bab896a-24f8-544f-51eb-43745367a332\n\nFrom https://github.com/dotnet/efcore/pull/36724 and https://github.com/dotnet/efcore/pull/36725.\n\ncc @AndriySvyryd @SamMonoRT ",
                                           "updatedAt":  "2025-09-09T10:16:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C6oN7",
                                           "createdAt":  "2025-09-09T10:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhexew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-09-09T12:36:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Since the tentative fix (https://github.com/dotnet/runtime/pull/119245) will likely take a bit more time to land I\u0027ve backported the workaround to RC2: https://github.com/dotnet/dotnet/pull/2335",
                                           "updatedAt":  "2025-09-09T10:57:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eu3Ow",
                                           "createdAt":  "2025-09-16T23:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Sorry, I\u0027m a bit out of the loop here. Do we know which versions of XCode hit this issue?",
                                           "updatedAt":  "2025-09-16T23:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E2JyB",
                                           "createdAt":  "2025-09-17T11:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEir8Ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2025-09-17T16:58:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@agocke Xcode 16+",
                                           "updatedAt":  "2025-09-17T11:21:13Z"
                                       }
                                   ],
                         "totalCount":  41
                     },
        "title":  ".NET 10 RC 2: System.ExecutionEngineException: Illegal instruction: Attempted to execute an instruction code not defined by the processor.",
        "labels":  [
                       "blocking-release",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119199",
        "createdAt":  "2025-08-29T08:45:39Z",
        "number":  119199,
        "author":  "ww898",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNPhwA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "valco1994",
                                            "createdAt":  "2025-08-29T08:47:44Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-19T18:01:11Z",
        "body":  "### Description\n\nHi there,\nI frequently (once on 20-30 runs) got hanging `dotnet.exe build` command in v10.0.0-preview.7 (10.0.0-preview.5 works properly) x64 under Windows ARM64. The process dump is [here](https://drive.google.com/file/d/1Ap8KifXDWHsoivvpPwXjKZKFcCHh9ujh/view?usp=drive_link).\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\n-\n\n### Actual behavior\n\n-\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwXyo0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7A9uqX",
                                           "createdAt":  "2025-08-29T15:21:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-29T15:21:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A99bK",
                                           "createdAt":  "2025-08-29T15:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgLhkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffschwMSFT",
                                                                               "createdAt":  "2025-08-29T16:09:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Just confirming that x64 emulated is what hangs, and not the native arm64 sdk correct? ",
                                           "updatedAt":  "2025-08-29T15:39:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BfKjQ",
                                           "createdAt":  "2025-09-02T17:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Do you have a project or source which reproduces the issue? ",
                                           "updatedAt":  "2025-09-02T17:17:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "dotnet.exe v10.0.0-preview.7 x64 frequently hangs on `build` command under Windows ARM64",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119485",
        "createdAt":  "2025-09-09T08:43:38Z",
        "number":  119485,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:13Z",
        "body":  "`GetCookieForCalliSig` is expensive lookup. \nWe may want to cache it so that we do not need to perform it every time.\n\nSee https://github.com/dotnet/runtime/pull/119448#discussion_r2330247261\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwvXwbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7C4aap",
                                           "createdAt":  "2025-09-09T08:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-09T08:43:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C4azD",
                                           "createdAt":  "2025-09-09T08:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-09T08:44:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C9fBs",
                                           "createdAt":  "2025-09-09T14:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "More context: https://github.com/dotnet/runtime/pull/119448#discussion_r2333766823",
                                           "updatedAt":  "2025-09-09T14:04:38Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm coreclr] cache GetCookieForCalliSig",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119565",
        "createdAt":  "2025-09-11T05:57:12Z",
        "number":  119565,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:11Z",
        "body":  "I got a bit confused by the naming and comments [here](https://github.com/dotnet/runtime/blob/80dbb9f0579493dafc685f6cb99f12e58a8b9b0c/src/coreclr/vm/method.hpp#L73) \n\nHopefully I understand it correctly now, but if not please correct me. It appears we are using the term \"Task Returning\" to mean different things in different places:\n\n[AsyncMethodKind.TaskReturning](https://github.com/dotnet/runtime/blob/80dbb9f0579493dafc685f6cb99f12e58a8b9b0c/src/coreclr/vm/method.hpp#L73) - The MethodDesc variant whose entrypoint returns a task and it corresponds to a C# method not marked with the MethodImpl::Async attribute.\n[// Task-returning methods](https://github.com/dotnet/runtime/blob/80dbb9f0579493dafc685f6cb99f12e58a8b9b0c/src/coreclr/vm/method.hpp#L75) - Any C# method returning a Task regardless if it has the MethodImpl::Async attribute\n\nI think if you renamed AsyncMethodKind.TaskReturning -\u003e AsyncMethodKind.CompilerAsync it would remove the naming collision and it would also contrast nicely: RuntimeAsync vs CompilerAsync.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw696fQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DfPvt",
                                           "createdAt":  "2025-09-11T10:19:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e I think if you renamed AsyncMethodKind.TaskReturning -\u003e AsyncMethodKind.CompilerAsync it would remove the naming collision and it would also contrast nicely: RuntimeAsync vs CompilerAsync.\n\nCompiler async is quite confusing to me, since in the context of the runtime/VM the only compiler I see is the JIT/interpreter\u0027s compiler. But IIUC, here it would refer to something that originally produced the IL that we are seeing? Such a compiler doesn\u0027t even need to exist.\n\nOriginally these were the names:\nhttps://github.com/dotnet/runtimelab/blame/d95f6eadeeb696071635d9662fbe33f8a0e0d645/src/coreclr/vm/method.hpp#L58-L64\n\nI quite liked those names, but the enum grew and things changed so it wouldn\u0027t really map anymore.",
                                           "updatedAt":  "2025-09-11T10:20:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DoTF7",
                                           "createdAt":  "2025-09-11T18:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e [AsyncMethodKind.TaskReturning](https://github.com/dotnet/runtime/blob/80dbb9f0579493dafc685f6cb99f12e58a8b9b0c/src/coreclr/vm/method.hpp#L73) - The MethodDesc variant whose entrypoint returns a task and it corresponds to a C# method marked with the MethodImpl::Async attribute.\n\nNo. `AsyncMethodKind.TaskReturning` is a method that returns `Task`, `ValueTask` or generic version of that and the method\u0027s definition in metadata is _NOT_ marked as `MethodImpl::Async`\n\nBasically, these methoddescs represent ordinary Task-returning methods. The IL may contain a state machine produced by C#/VB/?? or may contain whatever else code. \n\nThe IL for these methods is compiled as-is. To participate in runtime async such methods get paired with a thunk that has runtime-async calling convention.\n\nI think `TaskReturning` is appropriate as the part that they return tasks is what makes them special, while `NotAsync` are not special at all. ",
                                           "updatedAt":  "2025-09-11T18:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DoT3D",
                                           "createdAt":  "2025-09-11T18:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Perhaps it is `NotAsync` that is confusing and should be called something else. `NotAsync` is for ordinary methods not interesting to runtime async in any way. \n`Ordinary` could probably be a better name, but I think we have other classifications that use `Ordinary` so it may be confusing that these are also ordinary but in async sense.",
                                           "updatedAt":  "2025-09-11T18:12:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3p9",
                                           "createdAt":  "2025-09-12T00:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003eNo. AsyncMethodKind.TaskReturning is a method that returns Task, ValueTask or generic version of that and the method\u0027s definition in metadata is NOT marked as MethodImpl::Async\n\nOops I had the right idea in my head but then still wrote the wrong text. I stink. I edited it in the original post so hopefully its correct now.\n\n\u003e I think TaskReturning is appropriate as the part that they return tasks is what makes them special, while NotAsync are not special at all.\n\nThe key thing that I am suggesting we fix is that \"TaskReturning\" should have only one definition. I discovered [this function]((https://github.com/dotnet/runtime/blob/51368d6a06ba18b237f7c304a781c51ac78a3c5d/src/coreclr/vm/method.hpp#L1918C1-L1926C6)) which I think really exemplifies it:\n\n```\n    inline bool IsTaskReturningMethod() const\n    {\n        ...\n        return asyncKind == AsyncMethodKind::RuntimeAsync ||\n            asyncKind == AsyncMethodKind::TaskReturning;\n    }\n```\n\nThe meaning of \"TaskReturning\" in the method name isn\u0027t the same as the meaning of \"TaskReturning\" in the enum value. Right now AsyncMethodKind::RuntimeAsync is task-returning (IsTaskReturningMethod()==true) and also isn\u0027t task-returning (asyncKind != AsyncMethodKind::TaskReturning).\n\nIMO \"TaskReturning\" as used in the method name feels intuitive. Its what I would guess the term meant if I saw it in a comment or a document and thats the one I\u0027d recommend we keep.\n\nIf folks don\u0027t like CompilerAsync I\u0027d have no qualms calling it anything else. CompileAsync was just the first thought that came to mind.\n",
                                           "updatedAt":  "2025-09-12T03:24:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Suggestion] Rename AsyncMethodKind.TaskReturning",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119613",
        "createdAt":  "2025-09-12T01:19:29Z",
        "number":  119613,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:43Z",
        "body":  "Observed while enabling rt async in Libraires partition - https://github.com/dotnet/runtime/pull/119432\n\nThe symptom is the number of tests failing with assert like:\n`Assert failure(PID 62300 [0x0000f35c], Thread: 12816 [0x3210]): Assertion failed \u0027!varTypeIsStruct(node) \u0026\u0026 !varTypeIsStruct(type)\u0027 in \u0027System.IO.Stream:ReadAsync(System.Memory`1[byte],System.Threading.CancellationToken):int:this\u0027 during \u0027Importation\u0027 (IL size 40; hash 0xaffe5a9c; FullOpts)\n`\n\nValueTask-returning methods need slightly different shape of the thunk. In particular - we can\u0027t just callvirt GetAwaiter on the result of the warapped call when it returns a `ValueTask`. Since it is a struct, we need to do `stloc; ldloca`.\n\nAn approximate fix is in: https://github.com/dotnet/runtime/pull/119432/commits/0803d3925753bf4348942212f67ac07fbcc20224",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw7K6sA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Dsrqw",
                                           "createdAt":  "2025-09-12T01:20:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T01:20:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[RuntimeAsync] Async thunks need special support for ValueTask-returning methods.",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119617",
        "createdAt":  "2025-09-12T01:52:53Z",
        "number":  119617,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:13Z",
        "body":  "Observed while enabling rt async in Libraires partition - https://github.com/dotnet/runtime/pull/119432\n\nWhile the optimization should not be needed for correctness, thus not the first priority to fix, it is certainly not the intention to leave this unoptimized.\n\nThe reason why we do not recognize the await pattern in `Await(call).ConfigureAwait(false)` when call returns ValueTask is because we expect `ConfigureAwait` applied to the result, but the IL contains `stloc;ldloca` in between. \n\nThe importer (`impMatchTaskAwaitPattern`) needs to learn about this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw7QlHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DtCUc",
                                           "createdAt":  "2025-09-12T01:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T01:53:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[RuntimeAsync] ConfigureAwait(bool) is not optimized for ValueTask-returning method.",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119621",
        "createdAt":  "2025-09-12T02:47:19Z",
        "number":  119621,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:12Z",
        "body":  "Observed while enabling rt async in Libraires partition - https://github.com/dotnet/runtime/pull/119432\n\nNote: the issue may be not completely deterministic. I think I saw different number of failures in different runs. The runs had other changes, but none specifically for this failure, so it is possible that there is dependency on whether code suspends or takes fast path.\n\nThe failure looks like:\n```     System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: True, contentMode: ContentLength) [FAIL]\n        Sync Ctx used:    at System.Environment.get_StackTrace() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Environment.cs:line 239\n           at System.Threading.Tests.TrackingSynchronizationContext.Post(SendOrPostCallback d, Object state)\n           at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task\u0026 currentTask) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskContinuation.cs:line 697\n           at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 3486\n           at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Future.cs:line 385\n           at System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(TResult result) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskCompletionSource_T.cs:line 218\n```\n\nThese are complicated scenarios involving HTTP server/client talking to each other asynchronously. \nThe tests deliberately set a synchronization context on the client\u0027s thread that tracks its use and subsequently fail if it ends up used. \nSomehow we may end up using the context when runtime async is enabled. \n\nAn additional care may need to be taken to ensure that this is a real issue and not just artefact of particular way to test. \nIn a way it would still be an observable change and thus a compat concern.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxW4rWA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DtYfY",
                                           "createdAt":  "2025-09-12T02:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T02:47:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E4fm7",
                                           "createdAt":  "2025-09-17T13:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiqpjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2025-09-17T14:54:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "There is also a failure in the yield test: System.Threading.Tasks.Tests.YieldAwaitableTests.AsyncMethod_Yields_ReturnsToCorrectSynchronizationContext\n\nThat one is pretty manageable size, so I think a better place to start. I will investigate that.",
                                           "updatedAt":  "2025-09-17T13:59:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E6BlX",
                                           "createdAt":  "2025-09-17T15:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "I think the issue is somewhat obvious and is in the task-returning thunks. They look approximately like\n```csharp\nExecutionAndSyncBlockStore store = default;\nstore.Push();\nContinuation cont = null;\nT result = default;\ntry\n{\n  try\n  {\n    result = Inner(args);\n    cont = StubHelpers.AsyncCallContinuation();\n  }\n  catch (Exception ex)\n  {\n    return Task.FromException(ex);\n  }\n}\nfinally\n{\n  store.Pop();\n}\n\nif (cont == null)\n  return Task.FromResult(result);\n\nreturn FinalizeTaskReturningThunk(cont);\n```\n\nWe end up restoring the synchronization context too early in the suspension case, before `FinalizeTaskReturningThunk` is called. `FinalizeTaskReturningThunk` calls into user code (`UnsafeOnCompleted`), which expectedly might be looking at the sync context.",
                                           "updatedAt":  "2025-09-17T15:30:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E6eAI",
                                           "createdAt":  "2025-09-17T16:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e We end up restoring the synchronization context too early in the suspension case\n\nThat could also explain why it is not reproducing consistently in scenarios that may or may not suspend.",
                                           "updatedAt":  "2025-09-17T16:02:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FTMRg",
                                           "createdAt":  "2025-09-19T01:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Also the following tests fail due to hangs or timeouts:\n- `System.IO.Pipelines.Tests.SchedulerFacts.UseSynchronizationContextFalseIgnoresSyncContextForReaderScheduler\u0027\n- \u0027AddHttpClient_GetAwaiterAndResult_InSingleThreadedSynchronizationContext_ShouldNotHangs\u0027\n\nI see them failing both locally and in the CI. It may be related to the `Sync Ctx used:` failures, or could be something else.",
                                           "updatedAt":  "2025-09-19T01:10:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FbitY",
                                           "createdAt":  "2025-09-19T14:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "The debug/debug stack is:\n(may be more informative at how we get to the unexpected Post)\n\n```\n      System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Asynchrony_Test.ResponseHeadersRead_SynchronizationContextNotUsedByHandler(responseHeadersRead: False, contentMode: ContentLength) [FAIL]\n        Sync Ctx used:    at System.Environment.get_StackTrace() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Environment.cs:line 239\n           at System.Threading.Tests.TrackingSynchronizationContext.Post(SendOrPostCallback d, Object state) in E:\\dotnet004\\runtime\\src\\libraries\\Common\\tests\\System\\Threading\\TrackingSynchronizationContext.cs:line 17\n           at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.PostAction(Object state) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskContinuation.cs:line 428\n           at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task\u0026 currentTask) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskContinuation.cs:line 697\n           at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(Task task, Boolean canInlineContinuationTask) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskContinuation.cs:line 409\n           at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 3487\n           at System.Threading.Tasks.Task.FinishContinuations() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 3451\n           at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Future.cs:line 385\n           at System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(TResult result) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\TaskCompletionSource_T.cs:line 218\n           at System.Net.Http.WinHttpHandler.StartRequestAsync(WinHttpRequestState state) in E:\\dotnet004\\runtime\\src\\libraries\\System.Net.Http.WinHttpHandler\\src\\System\\Net\\Http\\WinHttpHandler.cs:line 1007\n           at System.Runtime.CompilerServices.AsyncHelpers.ThunkTaskCore.MoveNext[T,TOps](T task) in E:\\dotnet004\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\AsyncHelpers.CoreCLR.cs:line 354\n           at System.Runtime.CompilerServices.AsyncHelpers.ThunkTask.MoveNext() in E:\\dotnet004\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\AsyncHelpers.CoreCLR.cs:line 306\n           at System.Threading.Tasks.Task.InnerInvoke() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2397\n           at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__288_0(Object obj) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2385\n           at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\ExecutionContext.cs:line 264\n           at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2347\n           at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2281\n           at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread) in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2272\n           at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\ThreadPoolWorkQueue.cs:line 1154\n           at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() in E:\\dotnet004\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Threading\\PortableThreadPool.WorkerThread.cs:line 118\n           at System.Threading.Thread.StartCallback() in E:\\dotnet004\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Threading\\Thread.CoreCLR.cs:line 108\n```",
                                           "updatedAt":  "2025-09-19T14:03:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[RuntimeAsync] A few tests fail with runtime async due to unexpected use of sync context",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119622",
        "createdAt":  "2025-09-12T02:53:45Z",
        "number":  119622,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:12Z",
        "body":  "Observed while enabling rt async in Libraires partition - https://github.com/dotnet/runtime/pull/119432\n\nNot a lot of info on these yet. Not even sure it is the same issue.\n\nThere are handful of AVs in `FinalizeTaskReturningThunk`. All involve fairly complex large async methods. Most have try/catch in them, but not sure if that is a factor.\n\nExample of a failure:\n```\n  Fatal error.\n  System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n     at System.Runtime.CompilerServices.AsyncHelpers.FinalizeTaskReturningThunk(System.Runtime.CompilerServices.Continuation)\n     at System.Net.Test.Common.Http11LoopbackServerFactory.CreateServer(System.Net.Test.Common.GenericLoopbackOptions)\n     at System.Net.WebSockets.Client.Tests.LoopbackWebSocketServer+HttpRunner.RunAsync(System.Func`2\u003cSystem.Uri,System.Threading.Tasks.Task\u003e, System.Func`3\u003cSystem.Net.WebSockets.Client.Tests.WebSocketRequestData,System.Threading.CancellationToken,System.Threading.Tasks.Task\u003e, Options, System.Threading.CancellationToken, System.Threading.CancellationToken)\n     at System.Net.WebSockets.Client.Tests.LoopbackWebSocketServer+HttpRunner.RunAsync(System.Func`2\u003cSystem.Uri,System.Threading.Tasks.Task\u003e, System.Func`3\u003cSystem.Net.WebSockets.Client.Tests.WebSocketRequestData,System.Threading.CancellationToken,System.Threading.Tasks.Task\u003e, Options, System.Threading.CancellationToken, System.Threading.CancellationToken)\n     at System.Net.WebSockets.Client.Tests.LoopbackWebSocketServer.RunEchoAsync(System.Func`2\u003cSystem.Uri,System.Threading.Tasks.Task\u003e, Options, System.Threading.CancellationToken)\n     at System.Net.WebSockets.Client.Tests.AbortTest_LoopbackBase.Abort_ReceiveAndAbort_Success(Boolean)\n     at System.RuntimeMethodHandle.InvokeMethod(System.Runtime.CompilerServices.ObjectHandleOnStack, Void**, System.Runtime.CompilerServices.ObjectHandleOnStack, BOOL, System.Runtime.CompilerServices.ObjectHandleOnStack)\n     at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(System.Object, System.Span`1\u003cSystem.Object\u003e, System.Reflection.BindingFlags)\n     at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n     at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n     at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass47_0+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext()\n     at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext()\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__9 ByRef)\n     at Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__47[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\n     at Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__46_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__46_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cRunAsync\u003eb__46_0\u003ed\u003cSystem.__Canon\u003e ByRef)\n     at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\n     at Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestAsync\u003ed__4 ByRef)\n     at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef)\n     at Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.XunitTheoryTestCaseRunner+\u003cRunTestAsync\u003ed__11.MoveNext()\n     at Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync()\n     at Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestCasesAsync()\n     at Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].ExecutionContextCallback(System.Object)\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext(System.Threading.Thread)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].ExecutionContextCallback(System.Object)\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext(System.Threading.Thread)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].ExecutionContextCallback(System.Object)\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext(System.Threading.Thread)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].ExecutionContextCallback(System.Object)\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext(System.Threading.Thread)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.XunitTheoryTestCaseRunner+\u003cRunTestAsync\u003ed__11.MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.XunitTheoryTestCaseRunner+\u003cRunTestAsync\u003ed__11, xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__46_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__46_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)\n     at System.Threading.Tasks.Task.RunContinuations(System.Object)\n     at Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__47[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Decimal, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__47[[System.__Canon, System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.3.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]].MoveNext()\n     at Xunit.Sdk.AsyncTestSyncContext+\u003c\u003ec__DisplayClass7_0.\u003cPost\u003eb__0()\n     at System.Threading.Tasks.Task.InnerInvoke()\n     at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\n     at System.Threading.Thread.StartCallback()\n\n```\n\n\n\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw7WtcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Dta1w",
                                           "createdAt":  "2025-09-12T02:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T02:54:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[RuntimeAsync] A few Libraries tests end up crashing with AccessViolationException in FinalizeTaskReturningThunk if runtime async is enabled",
        "labels":  [
                       "area-VM-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119639",
        "createdAt":  "2025-09-12T13:31:19Z",
        "number":  119639,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:12:30Z",
        "body":  "Make coreclr work with  `-sWASM_BIGINT=1`\n\nIt fails with\n```\nRuntimeError: memory access out of bounds\n    at corerun.wasm.emscripten_memset_bulkmem (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[33089]:0xc5072c)\n    at corerun.wasm.__memset (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[33088]:0xc5071d)\n    at corerun.wasm.MethodTableBuilder::AllocateWorkingSlotTables() (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[17922]:0x642822)\n    at corerun.wasm.MethodTableBuilder::BuildMethodTableThrowing(LoaderAllocator*, Module*, Module*, unsigned int, BuildingInterfaceInfo_t*, MethodTableBuilder::bmtLayoutInfo const*, MethodTable*, MethodTableBuilder::bmtGenericsInfo const*, SigPointer, unsigned short) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[17883]:0x639222)\n    at corerun.wasm.ClassLoader::CreateTypeHandleForTypeDefThrowing(Module*, unsigned int, Instantiation, AllocMemTracker*) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[18261]:0x675bdf)\n    at corerun.wasm.ClassLoader::CreateTypeHandleForTypeKey(TypeKey const*, AllocMemTracker*) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[7579]:0x2a1dd7)\n    at corerun.wasm.ClassLoader::DoIncrementalLoad(TypeKey const*, TypeHandle, ClassLoadLevel) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[7578]:0x2a1a5a)\n    at corerun.wasm.ClassLoader::LoadTypeHandleForTypeKey_Body(TypeKey const*, TypeHandle, ClassLoadLevel) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[7520]:0x29bdef)\n    at corerun.wasm.ClassLoader::LoadTypeHandleForTypeKey(TypeKey const*, TypeHandle, ClassLoadLevel, InstantiationContext const*) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[7516]:0x29ab12)\n    at corerun.wasm.ClassLoader::LoadTypeDefThrowing(Module*, unsigned int, ClassLoader::NotFoundAction, ClassLoader::PermitUninstantiatedFlag, unsigned int, ClassLoadLevel, Instantiation*) (wasm://wasm/corerun.wasm-19cb4c66:wasm-function[7463]:0x295568)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxXx5UQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7D0frm",
                                           "createdAt":  "2025-09-12T13:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T13:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D0f2f",
                                           "createdAt":  "2025-09-12T13:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T13:31:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FfHlR",
                                           "createdAt":  "2025-09-19T18:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Context https://github.com/dotnet/runtime/pull/119640#discussion_r2344327017 \n\nThis can be closed once we upgrade to EMSDK that enables this by default.",
                                           "updatedAt":  "2025-09-19T18:12:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm coreclr] fix bigint",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119761",
        "createdAt":  "2025-09-16T13:37:00Z",
        "number":  119761,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T21:36:55Z",
        "body":  "### Description\n\nThis is a crash I saw once on our bots, I have no way to reproduce it, nor do I know what the process in question was doing (probably \u0027dotnet build\u0027, but it can be any number of things we do during our build).\n\nHowever, I have a crash report: \n\n[dotnet-2025-09-12-093407.ips.txt](https://github.com/user-attachments/files/22363855/dotnet-2025-09-12-093407.ips.txt)\n\nThis is what the crash report claims the crashing thread was doing:\n\n```\nThread 12 Crashed:: .NET TP Worker\n0   libcoreclr.dylib              \t       0x101887444 MethodTable::MethodDataObject::FillEntryDataForAncestor(MethodTable*) + 396\n1   libcoreclr.dylib              \t       0x1018874e8 MethodTable::MethodDataObject::GetDeclMethodDesc(unsigned int) + 132\n2   libcoreclr.dylib              \t       0x1018741e0 MemberLoader::FindMethod(MethodTable*, char const*, unsigned char const*, unsigned int, ModuleBase*, MemberLoader::FM_Flags, Substitution const*) + 392\n3   libcoreclr.dylib              \t       0x1018736f0 MemberLoader::GetDescFromMemberRef(ModuleBase*, unsigned int, MethodDesc**, FieldDesc**, SigTypeContext const*, int, TypeHandle*, int, unsigned char const**, unsigned int*) + 1252\n4   libcoreclr.dylib              \t       0x1018e0e60 ZapSig::DecodeMethod(ModuleBase*, unsigned char const*, SigTypeContext*, ZapSig::Context*, TypeHandle*, unsigned char const**, unsigned char const**, unsigned char const**, int) + 940\n5   libcoreclr.dylib              \t       0x1018e0aa8 ZapSig::DecodeMethod(Module*, ModuleBase*, unsigned char const*, TypeHandle*) + 84\n6   libcoreclr.dylib              \t       0x1018a1d90 ExternalMethodFixupWorker + 544\n7   libcoreclr.dylib              \t       0x101a6f514 DelayLoad_MethodCall + 88\n[...]\n```\n\nI also have a minidump (~6gb), can be found here: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=12376959\u0026view=artifacts\u0026pathAsName=false\u0026type=publishedArtifacts (expand the \"minidumps\" folder).\n\nIf the build has been deleted, or get an access denied error, I can provide a download link to the minidump (note to self: it\u0027s in the \u0027dotnet-runtime-issue-119761\u0027 directory in OneDrive).\n\n### Configuration\n\nmacOS 15.6, arm64\n\n.NET 9.0.110-servicing.25418.5 (probably)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYY0Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EqtGA",
                                           "createdAt":  "2025-09-16T16:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T16:32:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FhjQK",
                                           "createdAt":  "2025-09-19T21:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@davidwrighton Can you take a quick look at this?",
                                           "updatedAt":  "2025-09-19T21:36:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Crash in MethodTable::MethodDataObject::FillEntryDataForAncestor",
        "labels":  [
                       "area-VM-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119769",
        "createdAt":  "2025-09-16T16:18:24Z",
        "number":  119769,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:16Z",
        "body":  "We will need a way to load the icu data in the development hosts (corerun, corewasmrun) to not fail in `GlobalizationNative_LoadICU`.\n\nCurrently we use `src/native/libs/System.Globalization.Native/pal_icushim_static.c`.\n\nAnd fail to load ICU like this:\n\n```\nTRACE resolved GlobalizationNative_LoadICU to 0xedf\nTRACE call Globalization::LoadICU int32 *() arg0: 0x0 arg1: 0x44404a0\ncalli Call count: 92\nTRACE calli 0xedf arg0 = 0x1 arg1 = 0x1\nLoading ICU data... 1\nTRACE calli return (0) =\u003e 0\nTRACE return (0x4825984) ILStubClass::IL_STUB_PInvoke =\u003e 0\nTRACE return (0x4824558) System.Globalization.GlobalizationMode::LoadICU =\u003e 0\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxKobJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Eqhb4",
                                           "createdAt":  "2025-09-16T16:18:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T16:18:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eqhsk",
                                           "createdAt":  "2025-09-16T16:18:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T16:18:56Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] load icu data",
        "labels":  [
                       "arch-wasm",
                       "area-VM-coreclr"
                   ]
    }
]
